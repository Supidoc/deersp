
Audio_Matrix_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d38c  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  0800d624  0800d624  0000e624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d6bc  0800d6bc  0000f010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d6bc  0800d6bc  0000e6bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d6c4  0800d6c4  0000f010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d6c4  0800d6c4  0000e6c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d6c8  0800d6c8  0000e6c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  24000000  0800d6cc  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001058  24000010  0800d6dc  0000f010  2**3
                  ALLOC
 10 .audiobuffer  00000800  20000000  20000000  00010000  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  24001068  24001068  0000f068  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0000f010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001dfd2  00000000  00000000  0000f03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d89  00000000  00000000  0002d010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013a0  00000000  00000000  00030da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f7d  00000000  00000000  00032140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003c16d  00000000  00000000  000330bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f64c  00000000  00000000  0006f22a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00183814  00000000  00000000  0008e876  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000b8  00000000  00000000  0021208a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005134  00000000  00000000  00212144  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  00217278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00000fad  00000000  00000000  002172de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 00000280  00000000  00000000  0021828b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800d60c 	.word	0x0800d60c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	0800d60c 	.word	0x0800d60c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b988 	b.w	8000600 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	468e      	mov	lr, r1
 8000310:	4604      	mov	r4, r0
 8000312:	4688      	mov	r8, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d962      	bls.n	80003e4 <__udivmoddi4+0xdc>
 800031e:	fab2 f682 	clz	r6, r2
 8000322:	b14e      	cbz	r6, 8000338 <__udivmoddi4+0x30>
 8000324:	f1c6 0320 	rsb	r3, r6, #32
 8000328:	fa01 f806 	lsl.w	r8, r1, r6
 800032c:	fa20 f303 	lsr.w	r3, r0, r3
 8000330:	40b7      	lsls	r7, r6
 8000332:	ea43 0808 	orr.w	r8, r3, r8
 8000336:	40b4      	lsls	r4, r6
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	fbb8 f1fe 	udiv	r1, r8, lr
 8000344:	0c23      	lsrs	r3, r4, #16
 8000346:	fb0e 8811 	mls	r8, lr, r1, r8
 800034a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034e:	fb01 f20c 	mul.w	r2, r1, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d909      	bls.n	800036a <__udivmoddi4+0x62>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f101 30ff 	add.w	r0, r1, #4294967295
 800035c:	f080 80ea 	bcs.w	8000534 <__udivmoddi4+0x22c>
 8000360:	429a      	cmp	r2, r3
 8000362:	f240 80e7 	bls.w	8000534 <__udivmoddi4+0x22c>
 8000366:	3902      	subs	r1, #2
 8000368:	443b      	add	r3, r7
 800036a:	1a9a      	subs	r2, r3, r2
 800036c:	b2a3      	uxth	r3, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800037a:	fb00 fc0c 	mul.w	ip, r0, ip
 800037e:	459c      	cmp	ip, r3
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x8e>
 8000382:	18fb      	adds	r3, r7, r3
 8000384:	f100 32ff 	add.w	r2, r0, #4294967295
 8000388:	f080 80d6 	bcs.w	8000538 <__udivmoddi4+0x230>
 800038c:	459c      	cmp	ip, r3
 800038e:	f240 80d3 	bls.w	8000538 <__udivmoddi4+0x230>
 8000392:	443b      	add	r3, r7
 8000394:	3802      	subs	r0, #2
 8000396:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039a:	eba3 030c 	sub.w	r3, r3, ip
 800039e:	2100      	movs	r1, #0
 80003a0:	b11d      	cbz	r5, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40f3      	lsrs	r3, r6
 80003a4:	2200      	movs	r2, #0
 80003a6:	e9c5 3200 	strd	r3, r2, [r5]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d905      	bls.n	80003be <__udivmoddi4+0xb6>
 80003b2:	b10d      	cbz	r5, 80003b8 <__udivmoddi4+0xb0>
 80003b4:	e9c5 0100 	strd	r0, r1, [r5]
 80003b8:	2100      	movs	r1, #0
 80003ba:	4608      	mov	r0, r1
 80003bc:	e7f5      	b.n	80003aa <__udivmoddi4+0xa2>
 80003be:	fab3 f183 	clz	r1, r3
 80003c2:	2900      	cmp	r1, #0
 80003c4:	d146      	bne.n	8000454 <__udivmoddi4+0x14c>
 80003c6:	4573      	cmp	r3, lr
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0xc8>
 80003ca:	4282      	cmp	r2, r0
 80003cc:	f200 8105 	bhi.w	80005da <__udivmoddi4+0x2d2>
 80003d0:	1a84      	subs	r4, r0, r2
 80003d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	4690      	mov	r8, r2
 80003da:	2d00      	cmp	r5, #0
 80003dc:	d0e5      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003de:	e9c5 4800 	strd	r4, r8, [r5]
 80003e2:	e7e2      	b.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	2a00      	cmp	r2, #0
 80003e6:	f000 8090 	beq.w	800050a <__udivmoddi4+0x202>
 80003ea:	fab2 f682 	clz	r6, r2
 80003ee:	2e00      	cmp	r6, #0
 80003f0:	f040 80a4 	bne.w	800053c <__udivmoddi4+0x234>
 80003f4:	1a8a      	subs	r2, r1, r2
 80003f6:	0c03      	lsrs	r3, r0, #16
 80003f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fc:	b280      	uxth	r0, r0
 80003fe:	b2bc      	uxth	r4, r7
 8000400:	2101      	movs	r1, #1
 8000402:	fbb2 fcfe 	udiv	ip, r2, lr
 8000406:	fb0e 221c 	mls	r2, lr, ip, r2
 800040a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800040e:	fb04 f20c 	mul.w	r2, r4, ip
 8000412:	429a      	cmp	r2, r3
 8000414:	d907      	bls.n	8000426 <__udivmoddi4+0x11e>
 8000416:	18fb      	adds	r3, r7, r3
 8000418:	f10c 38ff 	add.w	r8, ip, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x11c>
 800041e:	429a      	cmp	r2, r3
 8000420:	f200 80e0 	bhi.w	80005e4 <__udivmoddi4+0x2dc>
 8000424:	46c4      	mov	ip, r8
 8000426:	1a9b      	subs	r3, r3, r2
 8000428:	fbb3 f2fe 	udiv	r2, r3, lr
 800042c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000430:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000434:	fb02 f404 	mul.w	r4, r2, r4
 8000438:	429c      	cmp	r4, r3
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x144>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x142>
 8000444:	429c      	cmp	r4, r3
 8000446:	f200 80ca 	bhi.w	80005de <__udivmoddi4+0x2d6>
 800044a:	4602      	mov	r2, r0
 800044c:	1b1b      	subs	r3, r3, r4
 800044e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000452:	e7a5      	b.n	80003a0 <__udivmoddi4+0x98>
 8000454:	f1c1 0620 	rsb	r6, r1, #32
 8000458:	408b      	lsls	r3, r1
 800045a:	fa22 f706 	lsr.w	r7, r2, r6
 800045e:	431f      	orrs	r7, r3
 8000460:	fa0e f401 	lsl.w	r4, lr, r1
 8000464:	fa20 f306 	lsr.w	r3, r0, r6
 8000468:	fa2e fe06 	lsr.w	lr, lr, r6
 800046c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000470:	4323      	orrs	r3, r4
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	fa1f fc87 	uxth.w	ip, r7
 800047a:	fbbe f0f9 	udiv	r0, lr, r9
 800047e:	0c1c      	lsrs	r4, r3, #16
 8000480:	fb09 ee10 	mls	lr, r9, r0, lr
 8000484:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000488:	fb00 fe0c 	mul.w	lr, r0, ip
 800048c:	45a6      	cmp	lr, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	d909      	bls.n	80004a8 <__udivmoddi4+0x1a0>
 8000494:	193c      	adds	r4, r7, r4
 8000496:	f100 3aff 	add.w	sl, r0, #4294967295
 800049a:	f080 809c 	bcs.w	80005d6 <__udivmoddi4+0x2ce>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f240 8099 	bls.w	80005d6 <__udivmoddi4+0x2ce>
 80004a4:	3802      	subs	r0, #2
 80004a6:	443c      	add	r4, r7
 80004a8:	eba4 040e 	sub.w	r4, r4, lr
 80004ac:	fa1f fe83 	uxth.w	lr, r3
 80004b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b4:	fb09 4413 	mls	r4, r9, r3, r4
 80004b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c0:	45a4      	cmp	ip, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x1ce>
 80004c4:	193c      	adds	r4, r7, r4
 80004c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80004ca:	f080 8082 	bcs.w	80005d2 <__udivmoddi4+0x2ca>
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d97f      	bls.n	80005d2 <__udivmoddi4+0x2ca>
 80004d2:	3b02      	subs	r3, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	fba0 ec02 	umull	lr, ip, r0, r2
 80004e2:	4564      	cmp	r4, ip
 80004e4:	4673      	mov	r3, lr
 80004e6:	46e1      	mov	r9, ip
 80004e8:	d362      	bcc.n	80005b0 <__udivmoddi4+0x2a8>
 80004ea:	d05f      	beq.n	80005ac <__udivmoddi4+0x2a4>
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x1fe>
 80004ee:	ebb8 0203 	subs.w	r2, r8, r3
 80004f2:	eb64 0409 	sbc.w	r4, r4, r9
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	fa22 f301 	lsr.w	r3, r2, r1
 80004fe:	431e      	orrs	r6, r3
 8000500:	40cc      	lsrs	r4, r1
 8000502:	e9c5 6400 	strd	r6, r4, [r5]
 8000506:	2100      	movs	r1, #0
 8000508:	e74f      	b.n	80003aa <__udivmoddi4+0xa2>
 800050a:	fbb1 fcf2 	udiv	ip, r1, r2
 800050e:	0c01      	lsrs	r1, r0, #16
 8000510:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000514:	b280      	uxth	r0, r0
 8000516:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800051a:	463b      	mov	r3, r7
 800051c:	4638      	mov	r0, r7
 800051e:	463c      	mov	r4, r7
 8000520:	46b8      	mov	r8, r7
 8000522:	46be      	mov	lr, r7
 8000524:	2620      	movs	r6, #32
 8000526:	fbb1 f1f7 	udiv	r1, r1, r7
 800052a:	eba2 0208 	sub.w	r2, r2, r8
 800052e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000532:	e766      	b.n	8000402 <__udivmoddi4+0xfa>
 8000534:	4601      	mov	r1, r0
 8000536:	e718      	b.n	800036a <__udivmoddi4+0x62>
 8000538:	4610      	mov	r0, r2
 800053a:	e72c      	b.n	8000396 <__udivmoddi4+0x8e>
 800053c:	f1c6 0220 	rsb	r2, r6, #32
 8000540:	fa2e f302 	lsr.w	r3, lr, r2
 8000544:	40b7      	lsls	r7, r6
 8000546:	40b1      	lsls	r1, r6
 8000548:	fa20 f202 	lsr.w	r2, r0, r2
 800054c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000550:	430a      	orrs	r2, r1
 8000552:	fbb3 f8fe 	udiv	r8, r3, lr
 8000556:	b2bc      	uxth	r4, r7
 8000558:	fb0e 3318 	mls	r3, lr, r8, r3
 800055c:	0c11      	lsrs	r1, r2, #16
 800055e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000562:	fb08 f904 	mul.w	r9, r8, r4
 8000566:	40b0      	lsls	r0, r6
 8000568:	4589      	cmp	r9, r1
 800056a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800056e:	b280      	uxth	r0, r0
 8000570:	d93e      	bls.n	80005f0 <__udivmoddi4+0x2e8>
 8000572:	1879      	adds	r1, r7, r1
 8000574:	f108 3cff 	add.w	ip, r8, #4294967295
 8000578:	d201      	bcs.n	800057e <__udivmoddi4+0x276>
 800057a:	4589      	cmp	r9, r1
 800057c:	d81f      	bhi.n	80005be <__udivmoddi4+0x2b6>
 800057e:	eba1 0109 	sub.w	r1, r1, r9
 8000582:	fbb1 f9fe 	udiv	r9, r1, lr
 8000586:	fb09 f804 	mul.w	r8, r9, r4
 800058a:	fb0e 1119 	mls	r1, lr, r9, r1
 800058e:	b292      	uxth	r2, r2
 8000590:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000594:	4542      	cmp	r2, r8
 8000596:	d229      	bcs.n	80005ec <__udivmoddi4+0x2e4>
 8000598:	18ba      	adds	r2, r7, r2
 800059a:	f109 31ff 	add.w	r1, r9, #4294967295
 800059e:	d2c4      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a0:	4542      	cmp	r2, r8
 80005a2:	d2c2      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a4:	f1a9 0102 	sub.w	r1, r9, #2
 80005a8:	443a      	add	r2, r7
 80005aa:	e7be      	b.n	800052a <__udivmoddi4+0x222>
 80005ac:	45f0      	cmp	r8, lr
 80005ae:	d29d      	bcs.n	80004ec <__udivmoddi4+0x1e4>
 80005b0:	ebbe 0302 	subs.w	r3, lr, r2
 80005b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005b8:	3801      	subs	r0, #1
 80005ba:	46e1      	mov	r9, ip
 80005bc:	e796      	b.n	80004ec <__udivmoddi4+0x1e4>
 80005be:	eba7 0909 	sub.w	r9, r7, r9
 80005c2:	4449      	add	r1, r9
 80005c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80005c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80005cc:	fb09 f804 	mul.w	r8, r9, r4
 80005d0:	e7db      	b.n	800058a <__udivmoddi4+0x282>
 80005d2:	4673      	mov	r3, lr
 80005d4:	e77f      	b.n	80004d6 <__udivmoddi4+0x1ce>
 80005d6:	4650      	mov	r0, sl
 80005d8:	e766      	b.n	80004a8 <__udivmoddi4+0x1a0>
 80005da:	4608      	mov	r0, r1
 80005dc:	e6fd      	b.n	80003da <__udivmoddi4+0xd2>
 80005de:	443b      	add	r3, r7
 80005e0:	3a02      	subs	r2, #2
 80005e2:	e733      	b.n	800044c <__udivmoddi4+0x144>
 80005e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e8:	443b      	add	r3, r7
 80005ea:	e71c      	b.n	8000426 <__udivmoddi4+0x11e>
 80005ec:	4649      	mov	r1, r9
 80005ee:	e79c      	b.n	800052a <__udivmoddi4+0x222>
 80005f0:	eba1 0109 	sub.w	r1, r1, r9
 80005f4:	46c4      	mov	ip, r8
 80005f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80005fa:	fb09 f804 	mul.w	r8, r9, r4
 80005fe:	e7c4      	b.n	800058a <__udivmoddi4+0x282>

08000600 <__aeabi_idiv0>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000608:	4b49      	ldr	r3, [pc, #292]	@ (8000730 <SystemInit+0x12c>)
 800060a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800060e:	4a48      	ldr	r2, [pc, #288]	@ (8000730 <SystemInit+0x12c>)
 8000610:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000614:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000618:	4b45      	ldr	r3, [pc, #276]	@ (8000730 <SystemInit+0x12c>)
 800061a:	691b      	ldr	r3, [r3, #16]
 800061c:	4a44      	ldr	r2, [pc, #272]	@ (8000730 <SystemInit+0x12c>)
 800061e:	f043 0310 	orr.w	r3, r3, #16
 8000622:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000624:	4b43      	ldr	r3, [pc, #268]	@ (8000734 <SystemInit+0x130>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f003 030f 	and.w	r3, r3, #15
 800062c:	2b06      	cmp	r3, #6
 800062e:	d807      	bhi.n	8000640 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000630:	4b40      	ldr	r3, [pc, #256]	@ (8000734 <SystemInit+0x130>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f023 030f 	bic.w	r3, r3, #15
 8000638:	4a3e      	ldr	r2, [pc, #248]	@ (8000734 <SystemInit+0x130>)
 800063a:	f043 0307 	orr.w	r3, r3, #7
 800063e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000640:	4b3d      	ldr	r3, [pc, #244]	@ (8000738 <SystemInit+0x134>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a3c      	ldr	r2, [pc, #240]	@ (8000738 <SystemInit+0x134>)
 8000646:	f043 0301 	orr.w	r3, r3, #1
 800064a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800064c:	4b3a      	ldr	r3, [pc, #232]	@ (8000738 <SystemInit+0x134>)
 800064e:	2200      	movs	r2, #0
 8000650:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000652:	4b39      	ldr	r3, [pc, #228]	@ (8000738 <SystemInit+0x134>)
 8000654:	681a      	ldr	r2, [r3, #0]
 8000656:	4938      	ldr	r1, [pc, #224]	@ (8000738 <SystemInit+0x134>)
 8000658:	4b38      	ldr	r3, [pc, #224]	@ (800073c <SystemInit+0x138>)
 800065a:	4013      	ands	r3, r2
 800065c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800065e:	4b35      	ldr	r3, [pc, #212]	@ (8000734 <SystemInit+0x130>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	f003 0308 	and.w	r3, r3, #8
 8000666:	2b00      	cmp	r3, #0
 8000668:	d007      	beq.n	800067a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800066a:	4b32      	ldr	r3, [pc, #200]	@ (8000734 <SystemInit+0x130>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	f023 030f 	bic.w	r3, r3, #15
 8000672:	4a30      	ldr	r2, [pc, #192]	@ (8000734 <SystemInit+0x130>)
 8000674:	f043 0307 	orr.w	r3, r3, #7
 8000678:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800067a:	4b2f      	ldr	r3, [pc, #188]	@ (8000738 <SystemInit+0x134>)
 800067c:	2200      	movs	r2, #0
 800067e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000680:	4b2d      	ldr	r3, [pc, #180]	@ (8000738 <SystemInit+0x134>)
 8000682:	2200      	movs	r2, #0
 8000684:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000686:	4b2c      	ldr	r3, [pc, #176]	@ (8000738 <SystemInit+0x134>)
 8000688:	2200      	movs	r2, #0
 800068a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800068c:	4b2a      	ldr	r3, [pc, #168]	@ (8000738 <SystemInit+0x134>)
 800068e:	4a2c      	ldr	r2, [pc, #176]	@ (8000740 <SystemInit+0x13c>)
 8000690:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000692:	4b29      	ldr	r3, [pc, #164]	@ (8000738 <SystemInit+0x134>)
 8000694:	4a2b      	ldr	r2, [pc, #172]	@ (8000744 <SystemInit+0x140>)
 8000696:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000698:	4b27      	ldr	r3, [pc, #156]	@ (8000738 <SystemInit+0x134>)
 800069a:	4a2b      	ldr	r2, [pc, #172]	@ (8000748 <SystemInit+0x144>)
 800069c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800069e:	4b26      	ldr	r3, [pc, #152]	@ (8000738 <SystemInit+0x134>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80006a4:	4b24      	ldr	r3, [pc, #144]	@ (8000738 <SystemInit+0x134>)
 80006a6:	4a28      	ldr	r2, [pc, #160]	@ (8000748 <SystemInit+0x144>)
 80006a8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80006aa:	4b23      	ldr	r3, [pc, #140]	@ (8000738 <SystemInit+0x134>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80006b0:	4b21      	ldr	r3, [pc, #132]	@ (8000738 <SystemInit+0x134>)
 80006b2:	4a25      	ldr	r2, [pc, #148]	@ (8000748 <SystemInit+0x144>)
 80006b4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80006b6:	4b20      	ldr	r3, [pc, #128]	@ (8000738 <SystemInit+0x134>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80006bc:	4b1e      	ldr	r3, [pc, #120]	@ (8000738 <SystemInit+0x134>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a1d      	ldr	r2, [pc, #116]	@ (8000738 <SystemInit+0x134>)
 80006c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80006c6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000738 <SystemInit+0x134>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006ce:	4b1f      	ldr	r3, [pc, #124]	@ (800074c <SystemInit+0x148>)
 80006d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006d2:	4a1e      	ldr	r2, [pc, #120]	@ (800074c <SystemInit+0x148>)
 80006d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006d8:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006da:	4b1d      	ldr	r3, [pc, #116]	@ (8000750 <SystemInit+0x14c>)
 80006dc:	681a      	ldr	r2, [r3, #0]
 80006de:	4b1d      	ldr	r3, [pc, #116]	@ (8000754 <SystemInit+0x150>)
 80006e0:	4013      	ands	r3, r2
 80006e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80006e6:	d202      	bcs.n	80006ee <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000758 <SystemInit+0x154>)
 80006ea:	2201      	movs	r2, #1
 80006ec:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80006ee:	4b12      	ldr	r3, [pc, #72]	@ (8000738 <SystemInit+0x134>)
 80006f0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80006f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d113      	bne.n	8000724 <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80006fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000738 <SystemInit+0x134>)
 80006fe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000702:	4a0d      	ldr	r2, [pc, #52]	@ (8000738 <SystemInit+0x134>)
 8000704:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000708:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800070c:	4b13      	ldr	r3, [pc, #76]	@ (800075c <SystemInit+0x158>)
 800070e:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000712:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000714:	4b08      	ldr	r3, [pc, #32]	@ (8000738 <SystemInit+0x134>)
 8000716:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800071a:	4a07      	ldr	r2, [pc, #28]	@ (8000738 <SystemInit+0x134>)
 800071c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000720:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	e000ed00 	.word	0xe000ed00
 8000734:	52002000 	.word	0x52002000
 8000738:	58024400 	.word	0x58024400
 800073c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000740:	02020200 	.word	0x02020200
 8000744:	01ff0000 	.word	0x01ff0000
 8000748:	01010280 	.word	0x01010280
 800074c:	580000c0 	.word	0x580000c0
 8000750:	5c001000 	.word	0x5c001000
 8000754:	ffff0000 	.word	0xffff0000
 8000758:	51008108 	.word	0x51008108
 800075c:	52004000 	.word	0x52004000

08000760 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8000764:	4b09      	ldr	r3, [pc, #36]	@ (800078c <ExitRun0Mode+0x2c>)
 8000766:	68db      	ldr	r3, [r3, #12]
 8000768:	4a08      	ldr	r2, [pc, #32]	@ (800078c <ExitRun0Mode+0x2c>)
 800076a:	f023 0302 	bic.w	r3, r3, #2
 800076e:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000770:	bf00      	nop
 8000772:	4b06      	ldr	r3, [pc, #24]	@ (800078c <ExitRun0Mode+0x2c>)
 8000774:	685b      	ldr	r3, [r3, #4]
 8000776:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800077a:	2b00      	cmp	r3, #0
 800077c:	d0f9      	beq.n	8000772 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800077e:	bf00      	nop
 8000780:	bf00      	nop
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	58024800 	.word	0x58024800

08000790 <AIC3X_Init>:
 *
 * @param haic3x Pointer to a AIC3X_HandleTypeDef structure that contains
 *  the configuration information for the specified AIC3X
 * @retval Hal Status
 */
HAL_StatusTypeDef AIC3X_Init(AIC3X_HandleTypeDef *haic3x) {
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]

	if (haic3x == NULL) {
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d101      	bne.n	80007a2 <AIC3X_Init+0x12>
		return HAL_ERROR;
 800079e:	2301      	movs	r3, #1
 80007a0:	e006      	b.n	80007b0 <AIC3X_Init+0x20>
	}

	AIC3X_HwReset(haic3x);
 80007a2:	6878      	ldr	r0, [r7, #4]
 80007a4:	f000 f808 	bl	80007b8 <AIC3X_HwReset>
	return AIC3X_SwReset(haic3x);
 80007a8:	6878      	ldr	r0, [r7, #4]
 80007aa:	f000 f829 	bl	8000800 <AIC3X_SwReset>
 80007ae:	4603      	mov	r3, r0
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <AIC3X_HwReset>:
 *
 * @param haic3x Pointer to a AIC3X_HandleTypeDef structure that contains
 *  the configuration information for the specified AIC3X.
 * @retval Hal Status
 */
HAL_StatusTypeDef AIC3X_HwReset(AIC3X_HandleTypeDef *haic3x) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]

	if (haic3x == NULL) {
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d101      	bne.n	80007ca <AIC3X_HwReset+0x12>
		return HAL_ERROR;
 80007c6:	2301      	movs	r3, #1
 80007c8:	e016      	b.n	80007f8 <AIC3X_HwReset+0x40>
	}

	HAL_GPIO_WritePin(haic3x->rst_port, haic3x->rst_pin, GPIO_PIN_RESET);
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	6858      	ldr	r0, [r3, #4]
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	891b      	ldrh	r3, [r3, #8]
 80007d2:	2200      	movs	r2, #0
 80007d4:	4619      	mov	r1, r3
 80007d6:	f005 fc65 	bl	80060a4 <HAL_GPIO_WritePin>
	HAL_Delay(AIC3X_RESET_TIME_LOW);
 80007da:	20c8      	movs	r0, #200	@ 0xc8
 80007dc:	f002 ffc8 	bl	8003770 <HAL_Delay>

	HAL_GPIO_WritePin(haic3x->rst_port, haic3x->rst_pin, GPIO_PIN_SET);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	6858      	ldr	r0, [r3, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	891b      	ldrh	r3, [r3, #8]
 80007e8:	2201      	movs	r2, #1
 80007ea:	4619      	mov	r1, r3
 80007ec:	f005 fc5a 	bl	80060a4 <HAL_GPIO_WritePin>
	HAL_Delay(AIC3X_RESET_TIME_HIGH);
 80007f0:	2000      	movs	r0, #0
 80007f2:	f002 ffbd 	bl	8003770 <HAL_Delay>
	return HAL_OK;
 80007f6:	2300      	movs	r3, #0
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	3708      	adds	r7, #8
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}

08000800 <AIC3X_SwReset>:
 *
 * @param haic3x Pointer to a AIC3X_HandleTypeDef structure that contains
 *  the configuration information for the specified AIC3X.
 * @return Hal Status
 */
HAL_StatusTypeDef AIC3X_SwReset(AIC3X_HandleTypeDef *haic3x) {
 8000800:	b580      	push	{r7, lr}
 8000802:	b088      	sub	sp, #32
 8000804:	af04      	add	r7, sp, #16
 8000806:	6078      	str	r0, [r7, #4]

	if (haic3x == NULL) {
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d101      	bne.n	8000812 <AIC3X_SwReset+0x12>
		return HAL_ERROR;
 800080e:	2301      	movs	r3, #1
 8000810:	e010      	b.n	8000834 <AIC3X_SwReset+0x34>
	}

	uint8_t writeBuffer = 0x80u;
 8000812:	2380      	movs	r3, #128	@ 0x80
 8000814:	73fb      	strb	r3, [r7, #15]
	return HAL_I2C_Mem_Write(haic3x->hi2c, (uint16_t) AIC3x_ADDRESS << 1,
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	6818      	ldr	r0, [r3, #0]
 800081a:	230a      	movs	r3, #10
 800081c:	9302      	str	r3, [sp, #8]
 800081e:	2301      	movs	r3, #1
 8000820:	9301      	str	r3, [sp, #4]
 8000822:	f107 030f 	add.w	r3, r7, #15
 8000826:	9300      	str	r3, [sp, #0]
 8000828:	2301      	movs	r3, #1
 800082a:	2201      	movs	r2, #1
 800082c:	2130      	movs	r1, #48	@ 0x30
 800082e:	f005 fd1d 	bl	800626c <HAL_I2C_Mem_Write>
 8000832:	4603      	mov	r3, r0
	AIC3X_RESET, I2C_MEMADD_SIZE_8BIT, &writeBuffer, 1U, 10);
}
 8000834:	4618      	mov	r0, r3
 8000836:	3710      	adds	r7, #16
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}

0800083c <AIC3X_ReadData>:

HAL_StatusTypeDef AIC3X_ReadData(AIC3X_HandleTypeDef *haic3x, uint8_t reg,
		uint8_t *data, uint8_t dataSize) {
 800083c:	b580      	push	{r7, lr}
 800083e:	b088      	sub	sp, #32
 8000840:	af04      	add	r7, sp, #16
 8000842:	60f8      	str	r0, [r7, #12]
 8000844:	607a      	str	r2, [r7, #4]
 8000846:	461a      	mov	r2, r3
 8000848:	460b      	mov	r3, r1
 800084a:	72fb      	strb	r3, [r7, #11]
 800084c:	4613      	mov	r3, r2
 800084e:	72bb      	strb	r3, [r7, #10]
	if (haic3x == NULL) {
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d101      	bne.n	800085a <AIC3X_ReadData+0x1e>
		return HAL_ERROR;
 8000856:	2301      	movs	r3, #1
 8000858:	e014      	b.n	8000884 <AIC3X_ReadData+0x48>
	}

	if (data == NULL) {
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d101      	bne.n	8000864 <AIC3X_ReadData+0x28>
		return HAL_ERROR;
 8000860:	2301      	movs	r3, #1
 8000862:	e00f      	b.n	8000884 <AIC3X_ReadData+0x48>
	}

	return HAL_I2C_Mem_Read(haic3x->hi2c, (uint16_t) AIC3x_ADDRESS << 1, reg,
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	6818      	ldr	r0, [r3, #0]
 8000868:	7afb      	ldrb	r3, [r7, #11]
 800086a:	b29a      	uxth	r2, r3
 800086c:	7abb      	ldrb	r3, [r7, #10]
 800086e:	b29b      	uxth	r3, r3
 8000870:	210a      	movs	r1, #10
 8000872:	9102      	str	r1, [sp, #8]
 8000874:	9301      	str	r3, [sp, #4]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	9300      	str	r3, [sp, #0]
 800087a:	2301      	movs	r3, #1
 800087c:	2130      	movs	r1, #48	@ 0x30
 800087e:	f005 fe09 	bl	8006494 <HAL_I2C_Mem_Read>
 8000882:	4603      	mov	r3, r0
	I2C_MEMADD_SIZE_8BIT, data, dataSize, 10);
}
 8000884:	4618      	mov	r0, r3
 8000886:	3710      	adds	r7, #16
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}

0800088c <AIC3X_WriteData>:

HAL_StatusTypeDef AIC3X_WriteData(AIC3X_HandleTypeDef *haic3x, uint8_t reg,
		uint8_t *data, uint8_t dataSize) {
 800088c:	b580      	push	{r7, lr}
 800088e:	b088      	sub	sp, #32
 8000890:	af04      	add	r7, sp, #16
 8000892:	60f8      	str	r0, [r7, #12]
 8000894:	607a      	str	r2, [r7, #4]
 8000896:	461a      	mov	r2, r3
 8000898:	460b      	mov	r3, r1
 800089a:	72fb      	strb	r3, [r7, #11]
 800089c:	4613      	mov	r3, r2
 800089e:	72bb      	strb	r3, [r7, #10]
	if (haic3x == NULL) {
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d101      	bne.n	80008aa <AIC3X_WriteData+0x1e>
		return HAL_ERROR;
 80008a6:	2301      	movs	r3, #1
 80008a8:	e014      	b.n	80008d4 <AIC3X_WriteData+0x48>
	}

	if (data == NULL) {
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d101      	bne.n	80008b4 <AIC3X_WriteData+0x28>
		return HAL_ERROR;
 80008b0:	2301      	movs	r3, #1
 80008b2:	e00f      	b.n	80008d4 <AIC3X_WriteData+0x48>
	}

	return HAL_I2C_Mem_Write(haic3x->hi2c, (uint16_t) AIC3x_ADDRESS << 1, reg,
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	6818      	ldr	r0, [r3, #0]
 80008b8:	7afb      	ldrb	r3, [r7, #11]
 80008ba:	b29a      	uxth	r2, r3
 80008bc:	7abb      	ldrb	r3, [r7, #10]
 80008be:	b29b      	uxth	r3, r3
 80008c0:	210a      	movs	r1, #10
 80008c2:	9102      	str	r1, [sp, #8]
 80008c4:	9301      	str	r3, [sp, #4]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	9300      	str	r3, [sp, #0]
 80008ca:	2301      	movs	r3, #1
 80008cc:	2130      	movs	r1, #48	@ 0x30
 80008ce:	f005 fccd 	bl	800626c <HAL_I2C_Mem_Write>
 80008d2:	4603      	mov	r3, r0
	I2C_MEMADD_SIZE_8BIT, data, dataSize, 10);
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	3710      	adds	r7, #16
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}

080008dc <AIC3X_WriteDataPathControl>:

	return HAL_OK;
}

HAL_StatusTypeDef AIC3X_WriteDataPathControl(AIC3X_HandleTypeDef *haic3x,
		AIC3X_DataPathControl_TypeDef *pDataPathControl) {
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	6039      	str	r1, [r7, #0]
	if (haic3x == NULL) {
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d101      	bne.n	80008f0 <AIC3X_WriteDataPathControl+0x14>
		return HAL_ERROR;
 80008ec:	2301      	movs	r3, #1
 80008ee:	e030      	b.n	8000952 <AIC3X_WriteDataPathControl+0x76>
	}

	if (pDataPathControl == NULL) {
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d101      	bne.n	80008fa <AIC3X_WriteDataPathControl+0x1e>
		return HAL_ERROR;
 80008f6:	2301      	movs	r3, #1
 80008f8:	e02b      	b.n	8000952 <AIC3X_WriteDataPathControl+0x76>
	}

	uint8_t readBuffer;
	uint8_t writeBuffer;

	readBuffer = AIC3X_ReadData(haic3x, AIC3X_CODEC_DATAPATH_REG, &readBuffer,
 80008fa:	f107 020f 	add.w	r2, r7, #15
 80008fe:	2301      	movs	r3, #1
 8000900:	2107      	movs	r1, #7
 8000902:	6878      	ldr	r0, [r7, #4]
 8000904:	f7ff ff9a 	bl	800083c <AIC3X_ReadData>
 8000908:	4603      	mov	r3, r0
 800090a:	73fb      	strb	r3, [r7, #15]
			sizeof(readBuffer));

	writeBuffer = readBuffer
			& (~(AIC3X_DATAPATH_LEFT_MASK | AIC3X_DATAPATH_RIGHT_MASK));
 800090c:	7bfb      	ldrb	r3, [r7, #15]
 800090e:	f023 031e 	bic.w	r3, r3, #30
 8000912:	b2db      	uxtb	r3, r3
	writeBuffer = readBuffer
 8000914:	73bb      	strb	r3, [r7, #14]

	writeBuffer |= (uint8_t) pDataPathControl->LeftDACDataPath << 3;
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	b25b      	sxtb	r3, r3
 800091c:	00db      	lsls	r3, r3, #3
 800091e:	b25a      	sxtb	r2, r3
 8000920:	7bbb      	ldrb	r3, [r7, #14]
 8000922:	b25b      	sxtb	r3, r3
 8000924:	4313      	orrs	r3, r2
 8000926:	b25b      	sxtb	r3, r3
 8000928:	b2db      	uxtb	r3, r3
 800092a:	73bb      	strb	r3, [r7, #14]
	writeBuffer |= (uint8_t) pDataPathControl->RightDACDataPath << 1;
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	785b      	ldrb	r3, [r3, #1]
 8000930:	b25b      	sxtb	r3, r3
 8000932:	005b      	lsls	r3, r3, #1
 8000934:	b25a      	sxtb	r2, r3
 8000936:	7bbb      	ldrb	r3, [r7, #14]
 8000938:	b25b      	sxtb	r3, r3
 800093a:	4313      	orrs	r3, r2
 800093c:	b25b      	sxtb	r3, r3
 800093e:	b2db      	uxtb	r3, r3
 8000940:	73bb      	strb	r3, [r7, #14]

	return AIC3X_WriteData(haic3x, AIC3X_CODEC_DATAPATH_REG, &writeBuffer,
 8000942:	f107 020e 	add.w	r2, r7, #14
 8000946:	2301      	movs	r3, #1
 8000948:	2107      	movs	r1, #7
 800094a:	6878      	ldr	r0, [r7, #4]
 800094c:	f7ff ff9e 	bl	800088c <AIC3X_WriteData>
 8000950:	4603      	mov	r3, r0
			sizeof(writeBuffer));
}
 8000952:	4618      	mov	r0, r3
 8000954:	3710      	adds	r7, #16
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}

0800095a <AIC3X_WriteASDataIntfControl>:
 *
 * @warning The size of the sent data is not calculated with sizeof() but set
 * 	with a constant value of 3u because the registers have a length of 24 bits.
 */
HAL_StatusTypeDef AIC3X_WriteASDataIntfControl(AIC3X_HandleTypeDef *haic3x,
		AIC3X_ASDIntCtrl_TypeDef *pASDIntfCtrl) {
 800095a:	b580      	push	{r7, lr}
 800095c:	b088      	sub	sp, #32
 800095e:	af04      	add	r7, sp, #16
 8000960:	6078      	str	r0, [r7, #4]
 8000962:	6039      	str	r1, [r7, #0]

	if (haic3x == NULL) {
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d101      	bne.n	800096e <AIC3X_WriteASDataIntfControl+0x14>
		return HAL_ERROR;
 800096a:	2301      	movs	r3, #1
 800096c:	e060      	b.n	8000a30 <AIC3X_WriteASDataIntfControl+0xd6>
	}

	if (pASDIntfCtrl == NULL) {
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d101      	bne.n	8000978 <AIC3X_WriteASDataIntfControl+0x1e>
		return HAL_ERROR;
 8000974:	2301      	movs	r3, #1
 8000976:	e05b      	b.n	8000a30 <AIC3X_WriteASDataIntfControl+0xd6>
	}

	uint32_t writeBuffer = 0;
 8000978:	2300      	movs	r3, #0
 800097a:	60fb      	str	r3, [r7, #12]

	/*Set corresponding bits for the values in pASDIntfCtrl */
	writeBuffer |= pASDIntfCtrl->BclkOutput << 24;
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	061a      	lsls	r2, r3, #24
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	4313      	orrs	r3, r2
 8000986:	60fb      	str	r3, [r7, #12]
	writeBuffer |= pASDIntfCtrl->WclkOutput << 23;
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	785b      	ldrb	r3, [r3, #1]
 800098c:	05da      	lsls	r2, r3, #23
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	4313      	orrs	r3, r2
 8000992:	60fb      	str	r3, [r7, #12]
	writeBuffer |= pASDIntfCtrl->DoutTristate << 22;
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	789b      	ldrb	r3, [r3, #2]
 8000998:	059a      	lsls	r2, r3, #22
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	4313      	orrs	r3, r2
 800099e:	60fb      	str	r3, [r7, #12]
	writeBuffer |= pASDIntfCtrl->ClkDriveCtrl << 21;
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	78db      	ldrb	r3, [r3, #3]
 80009a4:	055a      	lsls	r2, r3, #21
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	4313      	orrs	r3, r2
 80009aa:	60fb      	str	r3, [r7, #12]
	writeBuffer |= pASDIntfCtrl->Effect3D << 19;
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	791b      	ldrb	r3, [r3, #4]
 80009b0:	04da      	lsls	r2, r3, #19
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	4313      	orrs	r3, r2
 80009b6:	60fb      	str	r3, [r7, #12]
	writeBuffer |= pASDIntfCtrl->TransferMode << 14;
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	795b      	ldrb	r3, [r3, #5]
 80009bc:	039a      	lsls	r2, r3, #14
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	4313      	orrs	r3, r2
 80009c2:	60fb      	str	r3, [r7, #12]
	writeBuffer |= pASDIntfCtrl->WordLength << 12;
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	799b      	ldrb	r3, [r3, #6]
 80009c8:	031a      	lsls	r2, r3, #12
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	4313      	orrs	r3, r2
 80009ce:	60fb      	str	r3, [r7, #12]
	writeBuffer |= pASDIntfCtrl->Bclk265ClockMode << 11;
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	79db      	ldrb	r3, [r3, #7]
 80009d4:	02da      	lsls	r2, r3, #11
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	4313      	orrs	r3, r2
 80009da:	60fb      	str	r3, [r7, #12]
	writeBuffer |= pASDIntfCtrl->DACResync << 10;
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	7a1b      	ldrb	r3, [r3, #8]
 80009e0:	029a      	lsls	r2, r3, #10
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	4313      	orrs	r3, r2
 80009e6:	60fb      	str	r3, [r7, #12]
	writeBuffer |= pASDIntfCtrl->ADCResync << 9;
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	7a5b      	ldrb	r3, [r3, #9]
 80009ec:	025a      	lsls	r2, r3, #9
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	4313      	orrs	r3, r2
 80009f2:	60fb      	str	r3, [r7, #12]
	writeBuffer |= pASDIntfCtrl->ReSyncMute << 8;
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	7a9b      	ldrb	r3, [r3, #10]
 80009f8:	021a      	lsls	r2, r3, #8
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	4313      	orrs	r3, r2
 80009fe:	60fb      	str	r3, [r7, #12]
	writeBuffer |= pASDIntfCtrl->WordOffset;
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	7adb      	ldrb	r3, [r3, #11]
 8000a04:	461a      	mov	r2, r3
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	60fb      	str	r3, [r7, #12]

	/* Shift the writeBuffer to the left by 8 bits to make place for the bits of the ASD overflow control register*/
	writeBuffer = writeBuffer << 8;
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	021b      	lsls	r3, r3, #8
 8000a10:	60fb      	str	r3, [r7, #12]

	/* Write the ASD interface control register */
	return HAL_I2C_Mem_Write(haic3x->hi2c, (uint16_t) AIC3x_ADDRESS << 1,
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	6818      	ldr	r0, [r3, #0]
 8000a16:	230a      	movs	r3, #10
 8000a18:	9302      	str	r3, [sp, #8]
 8000a1a:	2303      	movs	r3, #3
 8000a1c:	9301      	str	r3, [sp, #4]
 8000a1e:	f107 030c 	add.w	r3, r7, #12
 8000a22:	9300      	str	r3, [sp, #0]
 8000a24:	2301      	movs	r3, #1
 8000a26:	2208      	movs	r2, #8
 8000a28:	2130      	movs	r1, #48	@ 0x30
 8000a2a:	f005 fc1f 	bl	800626c <HAL_I2C_Mem_Write>
 8000a2e:	4603      	mov	r3, r0
	AIC3X_ASD_INTF_CTRLA, I2C_MEMADD_SIZE_8BIT, (uint8_t*) &writeBuffer, 3u, 10);

}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3710      	adds	r7, #16
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <AIC3X_WritePGAGainControl>:

	return HAL_OK;
}

HAL_StatusTypeDef AIC3X_WritePGAGainControl(AIC3X_HandleTypeDef *haic3x,
		AIC3X_PGAGainControl_TypeDef *pPGAGainControl) {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	6039      	str	r1, [r7, #0]
	if (haic3x == NULL) {
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d101      	bne.n	8000a4c <AIC3X_WritePGAGainControl+0x14>
		return HAL_ERROR;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	e038      	b.n	8000abe <AIC3X_WritePGAGainControl+0x86>
	}

	if (pPGAGainControl == NULL) {
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d101      	bne.n	8000a56 <AIC3X_WritePGAGainControl+0x1e>
		return HAL_ERROR;
 8000a52:	2301      	movs	r3, #1
 8000a54:	e033      	b.n	8000abe <AIC3X_WritePGAGainControl+0x86>
	}

	uint16_t writeBuffer = 0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	81fb      	strh	r3, [r7, #14]

	writeBuffer |= pPGAGainControl->LADCMuted << 15;
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	b21b      	sxth	r3, r3
 8000a60:	03db      	lsls	r3, r3, #15
 8000a62:	b21a      	sxth	r2, r3
 8000a64:	89fb      	ldrh	r3, [r7, #14]
 8000a66:	b21b      	sxth	r3, r3
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	b21b      	sxth	r3, r3
 8000a6c:	b29b      	uxth	r3, r3
 8000a6e:	81fb      	strh	r3, [r7, #14]
	writeBuffer |= (pPGAGainControl->LADCGain & AIC3X_PGA_GAIN_MASK) << 8;
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	785b      	ldrb	r3, [r3, #1]
 8000a74:	021b      	lsls	r3, r3, #8
 8000a76:	b29b      	uxth	r3, r3
 8000a78:	f403 43fe 	and.w	r3, r3, #32512	@ 0x7f00
 8000a7c:	b29a      	uxth	r2, r3
 8000a7e:	89fb      	ldrh	r3, [r7, #14]
 8000a80:	4313      	orrs	r3, r2
 8000a82:	b29b      	uxth	r3, r3
 8000a84:	81fb      	strh	r3, [r7, #14]
	writeBuffer |= pPGAGainControl->RADCMuted << 7;
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	789b      	ldrb	r3, [r3, #2]
 8000a8a:	b21b      	sxth	r3, r3
 8000a8c:	01db      	lsls	r3, r3, #7
 8000a8e:	b21a      	sxth	r2, r3
 8000a90:	89fb      	ldrh	r3, [r7, #14]
 8000a92:	b21b      	sxth	r3, r3
 8000a94:	4313      	orrs	r3, r2
 8000a96:	b21b      	sxth	r3, r3
 8000a98:	b29b      	uxth	r3, r3
 8000a9a:	81fb      	strh	r3, [r7, #14]
	writeBuffer |= pPGAGainControl->RADCGain & AIC3X_PGA_GAIN_MASK;
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	78db      	ldrb	r3, [r3, #3]
 8000aa0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000aa4:	b29a      	uxth	r2, r3
 8000aa6:	89fb      	ldrh	r3, [r7, #14]
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	b29b      	uxth	r3, r3
 8000aac:	81fb      	strh	r3, [r7, #14]

	return AIC3X_WriteData(haic3x, LADC_VOL, (uint8_t*) &writeBuffer,
 8000aae:	f107 020e 	add.w	r2, r7, #14
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	210f      	movs	r1, #15
 8000ab6:	6878      	ldr	r0, [r7, #4]
 8000ab8:	f7ff fee8 	bl	800088c <AIC3X_WriteData>
 8000abc:	4603      	mov	r3, r0
			sizeof(writeBuffer));
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3710      	adds	r7, #16
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <AIC3X_WriteADCMixControl>:

	return HAL_OK;
}

HAL_StatusTypeDef AIC3X_WriteADCMixControl(AIC3X_HandleTypeDef *haic3x,
		AIC3X_ADCMixControl_TypeDef *pADCMixControl) {
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b086      	sub	sp, #24
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
 8000ace:	6039      	str	r1, [r7, #0]
	if (haic3x == NULL) {
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d101      	bne.n	8000ada <AIC3X_WriteADCMixControl+0x14>
		return HAL_ERROR;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	e12f      	b.n	8000d3a <AIC3X_WriteADCMixControl+0x274>
	}

	if (pADCMixControl == NULL) {
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d101      	bne.n	8000ae4 <AIC3X_WriteADCMixControl+0x1e>
		return HAL_ERROR;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	e12a      	b.n	8000d3a <AIC3X_WriteADCMixControl+0x274>
	}

	if ((pADCMixControl->LeftADC_MIC2LGain > 8
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	2b08      	cmp	r3, #8
 8000aea:	d903      	bls.n	8000af4 <AIC3X_WriteADCMixControl+0x2e>
			&& pADCMixControl->LeftADC_MIC2LGain < 15)
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	2b0e      	cmp	r3, #14
 8000af2:	d937      	bls.n	8000b64 <AIC3X_WriteADCMixControl+0x9e>
			|| (pADCMixControl->LeftADC_MIC2RGain > 8
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	785b      	ldrb	r3, [r3, #1]
 8000af8:	2b08      	cmp	r3, #8
 8000afa:	d903      	bls.n	8000b04 <AIC3X_WriteADCMixControl+0x3e>
					&& pADCMixControl->LeftADC_MIC2RGain < 15)
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	785b      	ldrb	r3, [r3, #1]
 8000b00:	2b0e      	cmp	r3, #14
 8000b02:	d92f      	bls.n	8000b64 <AIC3X_WriteADCMixControl+0x9e>
			|| (pADCMixControl->RightADC_MIC2LGain > 8
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	789b      	ldrb	r3, [r3, #2]
 8000b08:	2b08      	cmp	r3, #8
 8000b0a:	d903      	bls.n	8000b14 <AIC3X_WriteADCMixControl+0x4e>
					&& pADCMixControl->RightADC_MIC2LGain < 15)
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	789b      	ldrb	r3, [r3, #2]
 8000b10:	2b0e      	cmp	r3, #14
 8000b12:	d927      	bls.n	8000b64 <AIC3X_WriteADCMixControl+0x9e>
			|| (pADCMixControl->RightADC_MIC2RGain > 8
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	78db      	ldrb	r3, [r3, #3]
 8000b18:	2b08      	cmp	r3, #8
 8000b1a:	d903      	bls.n	8000b24 <AIC3X_WriteADCMixControl+0x5e>
					&& pADCMixControl->RightADC_MIC2RGain < 15)
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	78db      	ldrb	r3, [r3, #3]
 8000b20:	2b0e      	cmp	r3, #14
 8000b22:	d91f      	bls.n	8000b64 <AIC3X_WriteADCMixControl+0x9e>
			|| (pADCMixControl->LeftADC_MIC1LPGain > 8
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	795b      	ldrb	r3, [r3, #5]
 8000b28:	2b08      	cmp	r3, #8
 8000b2a:	d903      	bls.n	8000b34 <AIC3X_WriteADCMixControl+0x6e>
					&& pADCMixControl->LeftADC_MIC1LPGain < 15)
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	795b      	ldrb	r3, [r3, #5]
 8000b30:	2b0e      	cmp	r3, #14
 8000b32:	d917      	bls.n	8000b64 <AIC3X_WriteADCMixControl+0x9e>
			|| (pADCMixControl->LeftADC_MIC1RPGain > 8
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	7a5b      	ldrb	r3, [r3, #9]
 8000b38:	2b08      	cmp	r3, #8
 8000b3a:	d903      	bls.n	8000b44 <AIC3X_WriteADCMixControl+0x7e>
					&& pADCMixControl->LeftADC_MIC1RPGain < 15)
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	7a5b      	ldrb	r3, [r3, #9]
 8000b40:	2b0e      	cmp	r3, #14
 8000b42:	d90f      	bls.n	8000b64 <AIC3X_WriteADCMixControl+0x9e>
			|| (pADCMixControl->RightADC_MIC1LPGain > 8
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	7bdb      	ldrb	r3, [r3, #15]
 8000b48:	2b08      	cmp	r3, #8
 8000b4a:	d903      	bls.n	8000b54 <AIC3X_WriteADCMixControl+0x8e>
					&& pADCMixControl->RightADC_MIC1LPGain < 15)
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	7bdb      	ldrb	r3, [r3, #15]
 8000b50:	2b0e      	cmp	r3, #14
 8000b52:	d907      	bls.n	8000b64 <AIC3X_WriteADCMixControl+0x9e>
			|| (pADCMixControl->RightADC_MIC1RPGain > 8
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	7adb      	ldrb	r3, [r3, #11]
 8000b58:	2b08      	cmp	r3, #8
 8000b5a:	d905      	bls.n	8000b68 <AIC3X_WriteADCMixControl+0xa2>
					&& pADCMixControl->RightADC_MIC1RPGain < 15)) {
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	7adb      	ldrb	r3, [r3, #11]
 8000b60:	2b0e      	cmp	r3, #14
 8000b62:	d801      	bhi.n	8000b68 <AIC3X_WriteADCMixControl+0xa2>
		return HAL_ERROR;
 8000b64:	2301      	movs	r3, #1
 8000b66:	e0e8      	b.n	8000d3a <AIC3X_WriteADCMixControl+0x274>
	}

uint16_t writeBufferMIC2 = 0;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	82bb      	strh	r3, [r7, #20]
uint8_t writeBufferLeftADCMIC1LP = 0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	74fb      	strb	r3, [r7, #19]
uint16_t writeBufferMIC1RP = 0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	823b      	strh	r3, [r7, #16]
uint8_t writeBufferRightADCMIC1LP = 0;
 8000b74:	2300      	movs	r3, #0
 8000b76:	73fb      	strb	r3, [r7, #15]

writeBufferMIC2 |= pADCMixControl->LeftADC_MIC2LGain << 12;
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	b21b      	sxth	r3, r3
 8000b7e:	031b      	lsls	r3, r3, #12
 8000b80:	b21a      	sxth	r2, r3
 8000b82:	8abb      	ldrh	r3, [r7, #20]
 8000b84:	b21b      	sxth	r3, r3
 8000b86:	4313      	orrs	r3, r2
 8000b88:	b21b      	sxth	r3, r3
 8000b8a:	b29b      	uxth	r3, r3
 8000b8c:	82bb      	strh	r3, [r7, #20]
writeBufferMIC2 |= pADCMixControl->LeftADC_MIC2RGain << 8;
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	785b      	ldrb	r3, [r3, #1]
 8000b92:	b21b      	sxth	r3, r3
 8000b94:	021b      	lsls	r3, r3, #8
 8000b96:	b21a      	sxth	r2, r3
 8000b98:	8abb      	ldrh	r3, [r7, #20]
 8000b9a:	b21b      	sxth	r3, r3
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	b21b      	sxth	r3, r3
 8000ba0:	b29b      	uxth	r3, r3
 8000ba2:	82bb      	strh	r3, [r7, #20]
writeBufferMIC2 |= pADCMixControl->RightADC_MIC2LGain << 4;
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	789b      	ldrb	r3, [r3, #2]
 8000ba8:	b21b      	sxth	r3, r3
 8000baa:	011b      	lsls	r3, r3, #4
 8000bac:	b21a      	sxth	r2, r3
 8000bae:	8abb      	ldrh	r3, [r7, #20]
 8000bb0:	b21b      	sxth	r3, r3
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	b21b      	sxth	r3, r3
 8000bb6:	b29b      	uxth	r3, r3
 8000bb8:	82bb      	strh	r3, [r7, #20]
writeBufferMIC2 |= pADCMixControl->RightADC_MIC2RGain;
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	78db      	ldrb	r3, [r3, #3]
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	8abb      	ldrh	r3, [r7, #20]
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	b29b      	uxth	r3, r3
 8000bc6:	82bb      	strh	r3, [r7, #20]

writeBufferLeftADCMIC1LP |= pADCMixControl->LeftADC_MIC1LPDifferential << 7;
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	791b      	ldrb	r3, [r3, #4]
 8000bcc:	b25b      	sxtb	r3, r3
 8000bce:	01db      	lsls	r3, r3, #7
 8000bd0:	b25a      	sxtb	r2, r3
 8000bd2:	7cfb      	ldrb	r3, [r7, #19]
 8000bd4:	b25b      	sxtb	r3, r3
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	b25b      	sxtb	r3, r3
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	74fb      	strb	r3, [r7, #19]
writeBufferLeftADCMIC1LP |= pADCMixControl->LeftADC_MIC1LPGain << 3;
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	795b      	ldrb	r3, [r3, #5]
 8000be2:	b25b      	sxtb	r3, r3
 8000be4:	00db      	lsls	r3, r3, #3
 8000be6:	b25a      	sxtb	r2, r3
 8000be8:	7cfb      	ldrb	r3, [r7, #19]
 8000bea:	b25b      	sxtb	r3, r3
 8000bec:	4313      	orrs	r3, r2
 8000bee:	b25b      	sxtb	r3, r3
 8000bf0:	b2db      	uxtb	r3, r3
 8000bf2:	74fb      	strb	r3, [r7, #19]
writeBufferLeftADCMIC1LP |= pADCMixControl->LeftADC_PowerUp << 2;
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	799b      	ldrb	r3, [r3, #6]
 8000bf8:	b25b      	sxtb	r3, r3
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	b25a      	sxtb	r2, r3
 8000bfe:	7cfb      	ldrb	r3, [r7, #19]
 8000c00:	b25b      	sxtb	r3, r3
 8000c02:	4313      	orrs	r3, r2
 8000c04:	b25b      	sxtb	r3, r3
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	74fb      	strb	r3, [r7, #19]
writeBufferLeftADCMIC1LP |= pADCMixControl->LeftADC_PGASoftStepping & AIC3X_LEFT_ADC_MIC1LP_SOFT_STEPPING_MASK;
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	79db      	ldrb	r3, [r3, #7]
 8000c0e:	f003 0303 	and.w	r3, r3, #3
 8000c12:	b2da      	uxtb	r2, r3
 8000c14:	7cfb      	ldrb	r3, [r7, #19]
 8000c16:	4313      	orrs	r3, r2
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	74fb      	strb	r3, [r7, #19]

writeBufferMIC1RP |= pADCMixControl->LeftADC_MIC1RPDifferential << 15;
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	7a1b      	ldrb	r3, [r3, #8]
 8000c20:	b21b      	sxth	r3, r3
 8000c22:	03db      	lsls	r3, r3, #15
 8000c24:	b21a      	sxth	r2, r3
 8000c26:	8a3b      	ldrh	r3, [r7, #16]
 8000c28:	b21b      	sxth	r3, r3
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	b21b      	sxth	r3, r3
 8000c2e:	b29b      	uxth	r3, r3
 8000c30:	823b      	strh	r3, [r7, #16]
writeBufferMIC1RP |= pADCMixControl->LeftADC_MIC1RPGain << 11;
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	7a5b      	ldrb	r3, [r3, #9]
 8000c36:	b21b      	sxth	r3, r3
 8000c38:	02db      	lsls	r3, r3, #11
 8000c3a:	b21a      	sxth	r2, r3
 8000c3c:	8a3b      	ldrh	r3, [r7, #16]
 8000c3e:	b21b      	sxth	r3, r3
 8000c40:	4313      	orrs	r3, r2
 8000c42:	b21b      	sxth	r3, r3
 8000c44:	b29b      	uxth	r3, r3
 8000c46:	823b      	strh	r3, [r7, #16]
writeBufferMIC1RP |= pADCMixControl->RightADC_MIC1RPDifferential << 7;
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	7a9b      	ldrb	r3, [r3, #10]
 8000c4c:	b21b      	sxth	r3, r3
 8000c4e:	01db      	lsls	r3, r3, #7
 8000c50:	b21a      	sxth	r2, r3
 8000c52:	8a3b      	ldrh	r3, [r7, #16]
 8000c54:	b21b      	sxth	r3, r3
 8000c56:	4313      	orrs	r3, r2
 8000c58:	b21b      	sxth	r3, r3
 8000c5a:	b29b      	uxth	r3, r3
 8000c5c:	823b      	strh	r3, [r7, #16]
writeBufferMIC1RP |= pADCMixControl->RightADC_MIC1RPGain << 3;
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	7adb      	ldrb	r3, [r3, #11]
 8000c62:	b21b      	sxth	r3, r3
 8000c64:	00db      	lsls	r3, r3, #3
 8000c66:	b21a      	sxth	r2, r3
 8000c68:	8a3b      	ldrh	r3, [r7, #16]
 8000c6a:	b21b      	sxth	r3, r3
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	b21b      	sxth	r3, r3
 8000c70:	b29b      	uxth	r3, r3
 8000c72:	823b      	strh	r3, [r7, #16]
writeBufferMIC1RP |= pADCMixControl->RightADC_PowerUp << 2;
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	7b1b      	ldrb	r3, [r3, #12]
 8000c78:	b21b      	sxth	r3, r3
 8000c7a:	009b      	lsls	r3, r3, #2
 8000c7c:	b21a      	sxth	r2, r3
 8000c7e:	8a3b      	ldrh	r3, [r7, #16]
 8000c80:	b21b      	sxth	r3, r3
 8000c82:	4313      	orrs	r3, r2
 8000c84:	b21b      	sxth	r3, r3
 8000c86:	b29b      	uxth	r3, r3
 8000c88:	823b      	strh	r3, [r7, #16]
writeBufferMIC1RP |= pADCMixControl->RightADC_PGASoftStepping & AIC3X_RIGHT_ADC_MIC1RP_SOFT_STEPPING_MASK;
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	7b5b      	ldrb	r3, [r3, #13]
 8000c8e:	f003 0303 	and.w	r3, r3, #3
 8000c92:	b29a      	uxth	r2, r3
 8000c94:	8a3b      	ldrh	r3, [r7, #16]
 8000c96:	4313      	orrs	r3, r2
 8000c98:	b29b      	uxth	r3, r3
 8000c9a:	823b      	strh	r3, [r7, #16]

writeBufferRightADCMIC1LP |= pADCMixControl->RightADC_MIC1LPDifferential
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	7b9b      	ldrb	r3, [r3, #14]
 8000ca0:	b25b      	sxtb	r3, r3
 8000ca2:	01db      	lsls	r3, r3, #7
 8000ca4:	b25a      	sxtb	r2, r3
 8000ca6:	7bfb      	ldrb	r3, [r7, #15]
 8000ca8:	b25b      	sxtb	r3, r3
 8000caa:	4313      	orrs	r3, r2
 8000cac:	b25b      	sxtb	r3, r3
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	73fb      	strb	r3, [r7, #15]
<< 7;
writeBufferRightADCMIC1LP |= pADCMixControl->RightADC_MIC1LPGain << 3;
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	7bdb      	ldrb	r3, [r3, #15]
 8000cb6:	b25b      	sxtb	r3, r3
 8000cb8:	00db      	lsls	r3, r3, #3
 8000cba:	b25a      	sxtb	r2, r3
 8000cbc:	7bfb      	ldrb	r3, [r7, #15]
 8000cbe:	b25b      	sxtb	r3, r3
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	b25b      	sxtb	r3, r3
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	73fb      	strb	r3, [r7, #15]

HAL_StatusTypeDef status;

status = AIC3X_WriteData(haic3x, MIC2LR_LADC_CTRL, (uint8_t*) &writeBufferMIC2,
 8000cc8:	f107 0214 	add.w	r2, r7, #20
 8000ccc:	2302      	movs	r3, #2
 8000cce:	2111      	movs	r1, #17
 8000cd0:	6878      	ldr	r0, [r7, #4]
 8000cd2:	f7ff fddb 	bl	800088c <AIC3X_WriteData>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	75fb      	strb	r3, [r7, #23]
		sizeof(writeBufferMIC2));

if (status != HAL_OK) {
 8000cda:	7dfb      	ldrb	r3, [r7, #23]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <AIC3X_WriteADCMixControl+0x21e>
	return status;
 8000ce0:	7dfb      	ldrb	r3, [r7, #23]
 8000ce2:	e02a      	b.n	8000d3a <AIC3X_WriteADCMixControl+0x274>
}

status = AIC3X_WriteData(haic3x, MIC1L_LADC_CTRL, &writeBufferLeftADCMIC1LP,
 8000ce4:	f107 0213 	add.w	r2, r7, #19
 8000ce8:	2301      	movs	r3, #1
 8000cea:	2113      	movs	r1, #19
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f7ff fdcd 	bl	800088c <AIC3X_WriteData>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	75fb      	strb	r3, [r7, #23]
		sizeof(writeBufferLeftADCMIC1LP));

if (status != HAL_OK) {
 8000cf6:	7dfb      	ldrb	r3, [r7, #23]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <AIC3X_WriteADCMixControl+0x23a>
	return status;
 8000cfc:	7dfb      	ldrb	r3, [r7, #23]
 8000cfe:	e01c      	b.n	8000d3a <AIC3X_WriteADCMixControl+0x274>
}

status = AIC3X_WriteData(haic3x, MIC1R_LADC_CTRL, (uint8_t*) &writeBufferMIC1RP,
 8000d00:	f107 0210 	add.w	r2, r7, #16
 8000d04:	2302      	movs	r3, #2
 8000d06:	2115      	movs	r1, #21
 8000d08:	6878      	ldr	r0, [r7, #4]
 8000d0a:	f7ff fdbf 	bl	800088c <AIC3X_WriteData>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	75fb      	strb	r3, [r7, #23]
		sizeof(writeBufferMIC1RP));

if (status != HAL_OK) {
 8000d12:	7dfb      	ldrb	r3, [r7, #23]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <AIC3X_WriteADCMixControl+0x256>
	return status;
 8000d18:	7dfb      	ldrb	r3, [r7, #23]
 8000d1a:	e00e      	b.n	8000d3a <AIC3X_WriteADCMixControl+0x274>
}

status = AIC3X_WriteData(haic3x, MIC1L_RADC_CTRL, &writeBufferRightADCMIC1LP,
 8000d1c:	f107 020f 	add.w	r2, r7, #15
 8000d20:	2301      	movs	r3, #1
 8000d22:	2118      	movs	r1, #24
 8000d24:	6878      	ldr	r0, [r7, #4]
 8000d26:	f7ff fdb1 	bl	800088c <AIC3X_WriteData>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	75fb      	strb	r3, [r7, #23]
		sizeof(writeBufferRightADCMIC1LP));

if (status != HAL_OK) {
 8000d2e:	7dfb      	ldrb	r3, [r7, #23]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <AIC3X_WriteADCMixControl+0x272>
	return status;
 8000d34:	7dfb      	ldrb	r3, [r7, #23]
 8000d36:	e000      	b.n	8000d3a <AIC3X_WriteADCMixControl+0x274>
}

return HAL_OK;
 8000d38:	2300      	movs	r3, #0
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3718      	adds	r7, #24
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <AIC3X_WriteDACPowerControl>:

return HAL_OK;
}

HAL_StatusTypeDef AIC3X_WriteDACPowerControl(AIC3X_HandleTypeDef *haic3x,
	AIC3X_DACPowerControl_TypeDef *pDACPowerControl) {
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b084      	sub	sp, #16
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	6078      	str	r0, [r7, #4]
 8000d4a:	6039      	str	r1, [r7, #0]
if (haic3x == NULL) {
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d101      	bne.n	8000d56 <AIC3X_WriteDACPowerControl+0x14>
	return HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	e035      	b.n	8000dc2 <AIC3X_WriteDACPowerControl+0x80>
}

if (pDACPowerControl == NULL) {
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d101      	bne.n	8000d60 <AIC3X_WriteDACPowerControl+0x1e>
	return HAL_ERROR;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	e030      	b.n	8000dc2 <AIC3X_WriteDACPowerControl+0x80>
}

uint8_t readBuffer;
HAL_StatusTypeDef status;

status = AIC3X_ReadData(haic3x, DAC_PWR, &readBuffer, sizeof(readBuffer));
 8000d60:	f107 020e 	add.w	r2, r7, #14
 8000d64:	2301      	movs	r3, #1
 8000d66:	2125      	movs	r1, #37	@ 0x25
 8000d68:	6878      	ldr	r0, [r7, #4]
 8000d6a:	f7ff fd67 	bl	800083c <AIC3X_ReadData>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	73fb      	strb	r3, [r7, #15]

if (status != HAL_OK) {
 8000d72:	7bfb      	ldrb	r3, [r7, #15]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <AIC3X_WriteDACPowerControl+0x3a>
	return status;
 8000d78:	7bfb      	ldrb	r3, [r7, #15]
 8000d7a:	e022      	b.n	8000dc2 <AIC3X_WriteDACPowerControl+0x80>
}

uint8_t writeBuffer = readBuffer
		& (~(AIC3X_LEFT_DAC_POWER_MASK | AIC3X_RIGHT_DAC_POWER_MASK));
 8000d7c:	7bbb      	ldrb	r3, [r7, #14]
 8000d7e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000d82:	b2db      	uxtb	r3, r3
uint8_t writeBuffer = readBuffer
 8000d84:	737b      	strb	r3, [r7, #13]

writeBuffer |= pDACPowerControl->LeftDACPoweredUp << 7;
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	b25b      	sxtb	r3, r3
 8000d8c:	01db      	lsls	r3, r3, #7
 8000d8e:	b25a      	sxtb	r2, r3
 8000d90:	7b7b      	ldrb	r3, [r7, #13]
 8000d92:	b25b      	sxtb	r3, r3
 8000d94:	4313      	orrs	r3, r2
 8000d96:	b25b      	sxtb	r3, r3
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	737b      	strb	r3, [r7, #13]
writeBuffer |= pDACPowerControl->RightDACPoweredUp << 6;
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	785b      	ldrb	r3, [r3, #1]
 8000da0:	b25b      	sxtb	r3, r3
 8000da2:	019b      	lsls	r3, r3, #6
 8000da4:	b25a      	sxtb	r2, r3
 8000da6:	7b7b      	ldrb	r3, [r7, #13]
 8000da8:	b25b      	sxtb	r3, r3
 8000daa:	4313      	orrs	r3, r2
 8000dac:	b25b      	sxtb	r3, r3
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	737b      	strb	r3, [r7, #13]

return AIC3X_WriteData(haic3x, DAC_PWR, &writeBuffer, sizeof(writeBuffer));
 8000db2:	f107 020d 	add.w	r2, r7, #13
 8000db6:	2301      	movs	r3, #1
 8000db8:	2125      	movs	r1, #37	@ 0x25
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	f7ff fd66 	bl	800088c <AIC3X_WriteData>
 8000dc0:	4603      	mov	r3, r0
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3710      	adds	r7, #16
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <AIC3X_WriteVolControl>:

return HAL_OK;
}

HAL_StatusTypeDef AIC3X_WriteVolControl(AIC3X_HandleTypeDef *haic3x,
	uint8_t reg, AIC3X_VolControl_TypeDef *pVolControl) {
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b086      	sub	sp, #24
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	60f8      	str	r0, [r7, #12]
 8000dd2:	460b      	mov	r3, r1
 8000dd4:	607a      	str	r2, [r7, #4]
 8000dd6:	72fb      	strb	r3, [r7, #11]
if (haic3x == NULL) {
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d101      	bne.n	8000de2 <AIC3X_WriteVolControl+0x18>
	return HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
 8000de0:	e03e      	b.n	8000e60 <AIC3X_WriteVolControl+0x96>
}

if (pVolControl == NULL) {
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d101      	bne.n	8000dec <AIC3X_WriteVolControl+0x22>
	return HAL_ERROR;
 8000de8:	2301      	movs	r3, #1
 8000dea:	e039      	b.n	8000e60 <AIC3X_WriteVolControl+0x96>
}

if (pVolControl->Volume > 127) {
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	785b      	ldrb	r3, [r3, #1]
 8000df0:	b25b      	sxtb	r3, r3
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	da01      	bge.n	8000dfa <AIC3X_WriteVolControl+0x30>
	return HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
 8000df8:	e032      	b.n	8000e60 <AIC3X_WriteVolControl+0x96>
}

uint8_t writeBuffer = 0;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	75fb      	strb	r3, [r7, #23]
if(reg == LDAC_VOL || reg == RDAC_VOL)
 8000dfe:	7afb      	ldrb	r3, [r7, #11]
 8000e00:	2b2b      	cmp	r3, #43	@ 0x2b
 8000e02:	d002      	beq.n	8000e0a <AIC3X_WriteVolControl+0x40>
 8000e04:	7afb      	ldrb	r3, [r7, #11]
 8000e06:	2b2c      	cmp	r3, #44	@ 0x2c
 8000e08:	d10b      	bne.n	8000e22 <AIC3X_WriteVolControl+0x58>
{
	writeBuffer |= pVolControl->Muted << 7;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	b25b      	sxtb	r3, r3
 8000e10:	01db      	lsls	r3, r3, #7
 8000e12:	b25a      	sxtb	r2, r3
 8000e14:	7dfb      	ldrb	r3, [r7, #23]
 8000e16:	b25b      	sxtb	r3, r3
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	b25b      	sxtb	r3, r3
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	75fb      	strb	r3, [r7, #23]
 8000e20:	e00d      	b.n	8000e3e <AIC3X_WriteVolControl+0x74>
}
else
{
	writeBuffer |= ((!pVolControl->Muted ) << 7) & AIC3X_VOL_MUTED_MASK ;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	f083 0301 	eor.w	r3, r3, #1
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <AIC3X_WriteVolControl+0x6a>
 8000e30:	2280      	movs	r2, #128	@ 0x80
 8000e32:	e000      	b.n	8000e36 <AIC3X_WriteVolControl+0x6c>
 8000e34:	2200      	movs	r2, #0
 8000e36:	7dfb      	ldrb	r3, [r7, #23]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	75fb      	strb	r3, [r7, #23]
}
writeBuffer |= pVolControl->Volume & AIC3X_VOL_MASK;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	785b      	ldrb	r3, [r3, #1]
 8000e42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000e46:	b2da      	uxtb	r2, r3
 8000e48:	7dfb      	ldrb	r3, [r7, #23]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	75fb      	strb	r3, [r7, #23]

return AIC3X_WriteData(haic3x, reg, (uint8_t*) &writeBuffer,
 8000e50:	f107 0217 	add.w	r2, r7, #23
 8000e54:	7af9      	ldrb	r1, [r7, #11]
 8000e56:	2301      	movs	r3, #1
 8000e58:	68f8      	ldr	r0, [r7, #12]
 8000e5a:	f7ff fd17 	bl	800088c <AIC3X_WriteData>
 8000e5e:	4603      	mov	r3, r0
		sizeof(writeBuffer));
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3718      	adds	r7, #24
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <AIC3X_WriteOutputLevelControl>:

return HAL_OK;
}

HAL_StatusTypeDef AIC3X_WriteOutputLevelControl(AIC3X_HandleTypeDef *haic3x,
	uint8_t reg, AIC3X_OutputLevelControl_TypeDef *pOutputLevelControl) {
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	460b      	mov	r3, r1
 8000e72:	607a      	str	r2, [r7, #4]
 8000e74:	72fb      	strb	r3, [r7, #11]
if (haic3x == NULL) {
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d101      	bne.n	8000e80 <AIC3X_WriteOutputLevelControl+0x18>
	return HAL_ERROR;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	e04a      	b.n	8000f16 <AIC3X_WriteOutputLevelControl+0xae>
}

if (pOutputLevelControl == NULL) {
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d101      	bne.n	8000e8a <AIC3X_WriteOutputLevelControl+0x22>
	return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	e045      	b.n	8000f16 <AIC3X_WriteOutputLevelControl+0xae>
}

if(pOutputLevelControl->Level > 9)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	2b09      	cmp	r3, #9
 8000e90:	d901      	bls.n	8000e96 <AIC3X_WriteOutputLevelControl+0x2e>
{
	return HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
 8000e94:	e03f      	b.n	8000f16 <AIC3X_WriteOutputLevelControl+0xae>
}

uint8_t writeBuffer = 0;
 8000e96:	2300      	movs	r3, #0
 8000e98:	75fb      	strb	r3, [r7, #23]

writeBuffer |= pOutputLevelControl->Level << 4;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	b25b      	sxtb	r3, r3
 8000ea0:	011b      	lsls	r3, r3, #4
 8000ea2:	b25a      	sxtb	r2, r3
 8000ea4:	7dfb      	ldrb	r3, [r7, #23]
 8000ea6:	b25b      	sxtb	r3, r3
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	b25b      	sxtb	r3, r3
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	75fb      	strb	r3, [r7, #23]
writeBuffer |= (!pOutputLevelControl->Muted) << 3;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	785b      	ldrb	r3, [r3, #1]
 8000eb4:	f083 0301 	eor.w	r3, r3, #1
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	b25b      	sxtb	r3, r3
 8000ebc:	00db      	lsls	r3, r3, #3
 8000ebe:	b25a      	sxtb	r2, r3
 8000ec0:	7dfb      	ldrb	r3, [r7, #23]
 8000ec2:	b25b      	sxtb	r3, r3
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	b25b      	sxtb	r3, r3
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	75fb      	strb	r3, [r7, #23]
writeBuffer |= pOutputLevelControl->PowerDownDriveControl << 2;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	789b      	ldrb	r3, [r3, #2]
 8000ed0:	b25b      	sxtb	r3, r3
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	b25a      	sxtb	r2, r3
 8000ed6:	7dfb      	ldrb	r3, [r7, #23]
 8000ed8:	b25b      	sxtb	r3, r3
 8000eda:	4313      	orrs	r3, r2
 8000edc:	b25b      	sxtb	r3, r3
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	75fb      	strb	r3, [r7, #23]
writeBuffer |= pOutputLevelControl->VolumeControlStatus << 1;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	78db      	ldrb	r3, [r3, #3]
 8000ee6:	b25b      	sxtb	r3, r3
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	b25a      	sxtb	r2, r3
 8000eec:	7dfb      	ldrb	r3, [r7, #23]
 8000eee:	b25b      	sxtb	r3, r3
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	b25b      	sxtb	r3, r3
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	75fb      	strb	r3, [r7, #23]
writeBuffer |= pOutputLevelControl->PowerControl;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	791b      	ldrb	r3, [r3, #4]
 8000efc:	461a      	mov	r2, r3
 8000efe:	7dfb      	ldrb	r3, [r7, #23]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	75fb      	strb	r3, [r7, #23]

return AIC3X_WriteData(haic3x, reg, (uint8_t*) &writeBuffer,
 8000f06:	f107 0217 	add.w	r2, r7, #23
 8000f0a:	7af9      	ldrb	r1, [r7, #11]
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	68f8      	ldr	r0, [r7, #12]
 8000f10:	f7ff fcbc 	bl	800088c <AIC3X_WriteData>
 8000f14:	4603      	mov	r3, r0
		sizeof(writeBuffer));
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3718      	adds	r7, #24
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
	...

08000f20 <ABUF_init>:
__attribute__((section(".audiobuffer"), aligned(8)))
static ABUF_stereoBuffer_t ABUF_audioBuffers[AUDIO_STEREO_CHANNEL_COUNT];

ABUF_stereoBufferPtr_t ABUF_audioBufferPtrs[AUDIO_STEREO_CHANNEL_COUNT];

void ABUF_init(void){
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
	for(size_t i = 0;i<AUDIO_STEREO_CHANNEL_COUNT;i++){
 8000f26:	2300      	movs	r3, #0
 8000f28:	607b      	str	r3, [r7, #4]
 8000f2a:	e0ed      	b.n	8001108 <ABUF_init+0x1e8>
		for(size_t j = 0; j< AUDIO_BUFFER_LENGTH; j++){
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	603b      	str	r3, [r7, #0]
 8000f30:	e028      	b.n	8000f84 <ABUF_init+0x64>
			ABUF_audioBuffers[i].leftRx[j] = 0;
 8000f32:	497b      	ldr	r1, [pc, #492]	@ (8001120 <ABUF_init+0x200>)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	029a      	lsls	r2, r3, #10
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			ABUF_audioBuffers[i].rightRx[j] = 0;
 8000f42:	4977      	ldr	r1, [pc, #476]	@ (8001120 <ABUF_init+0x200>)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	029a      	lsls	r2, r3, #10
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000f50:	2200      	movs	r2, #0
 8000f52:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			ABUF_audioBuffers[i].leftTx[j] = 0;
 8000f56:	4972      	ldr	r1, [pc, #456]	@ (8001120 <ABUF_init+0x200>)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	029a      	lsls	r2, r3, #10
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	4413      	add	r3, r2
 8000f60:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000f64:	2200      	movs	r2, #0
 8000f66:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			ABUF_audioBuffers[i].rightRx[j] = 0;
 8000f6a:	496d      	ldr	r1, [pc, #436]	@ (8001120 <ABUF_init+0x200>)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	029a      	lsls	r2, r3, #10
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	4413      	add	r3, r2
 8000f74:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000f78:	2200      	movs	r2, #0
 8000f7a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(size_t j = 0; j< AUDIO_BUFFER_LENGTH; j++){
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	3301      	adds	r3, #1
 8000f82:	603b      	str	r3, [r7, #0]
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	2bff      	cmp	r3, #255	@ 0xff
 8000f88:	d9d3      	bls.n	8000f32 <ABUF_init+0x12>
		}
		ABUF_saiBufferPtrs[i].leftRxFirstHalf = &ABUF_saiBufferRx[i*2];
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	4a64      	ldr	r2, [pc, #400]	@ (8001124 <ABUF_init+0x204>)
 8000f92:	441a      	add	r2, r3
 8000f94:	4964      	ldr	r1, [pc, #400]	@ (8001128 <ABUF_init+0x208>)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	015b      	lsls	r3, r3, #5
 8000f9a:	440b      	add	r3, r1
 8000f9c:	601a      	str	r2, [r3, #0]
		ABUF_saiBufferPtrs[i].rightRxFirstHalf = &ABUF_saiBufferRx[i*2+1];
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	4a5f      	ldr	r2, [pc, #380]	@ (8001124 <ABUF_init+0x204>)
 8000fa8:	441a      	add	r2, r3
 8000faa:	495f      	ldr	r1, [pc, #380]	@ (8001128 <ABUF_init+0x208>)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	015b      	lsls	r3, r3, #5
 8000fb0:	440b      	add	r3, r1
 8000fb2:	3304      	adds	r3, #4
 8000fb4:	601a      	str	r2, [r3, #0]
		ABUF_saiBufferPtrs[i].leftRxSecHalf = &ABUF_saiBufferRx[SAI_BUFFER_LENGTH_HALF + i*2];
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	3380      	adds	r3, #128	@ 0x80
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	4a59      	ldr	r2, [pc, #356]	@ (8001124 <ABUF_init+0x204>)
 8000fc0:	441a      	add	r2, r3
 8000fc2:	4959      	ldr	r1, [pc, #356]	@ (8001128 <ABUF_init+0x208>)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	015b      	lsls	r3, r3, #5
 8000fc8:	440b      	add	r3, r1
 8000fca:	3308      	adds	r3, #8
 8000fcc:	601a      	str	r2, [r3, #0]
		ABUF_saiBufferPtrs[i].rightRxSecHalf = &ABUF_saiBufferRx[SAI_BUFFER_LENGTH_HALF + i*2 + 1];
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	f203 1301 	addw	r3, r3, #257	@ 0x101
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	4a52      	ldr	r2, [pc, #328]	@ (8001124 <ABUF_init+0x204>)
 8000fda:	441a      	add	r2, r3
 8000fdc:	4952      	ldr	r1, [pc, #328]	@ (8001128 <ABUF_init+0x208>)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	015b      	lsls	r3, r3, #5
 8000fe2:	440b      	add	r3, r1
 8000fe4:	330c      	adds	r3, #12
 8000fe6:	601a      	str	r2, [r3, #0]
		ABUF_saiBufferPtrs[i].leftTxFirstHalf = &ABUF_saiBufferTx[i*2];
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	4a4f      	ldr	r2, [pc, #316]	@ (800112c <ABUF_init+0x20c>)
 8000ff0:	441a      	add	r2, r3
 8000ff2:	494d      	ldr	r1, [pc, #308]	@ (8001128 <ABUF_init+0x208>)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	015b      	lsls	r3, r3, #5
 8000ff8:	440b      	add	r3, r1
 8000ffa:	3310      	adds	r3, #16
 8000ffc:	601a      	str	r2, [r3, #0]
		ABUF_saiBufferPtrs[i].rightTxFirstHalf = &ABUF_saiBufferTx[i*2+1];
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	3301      	adds	r3, #1
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	4a49      	ldr	r2, [pc, #292]	@ (800112c <ABUF_init+0x20c>)
 8001008:	441a      	add	r2, r3
 800100a:	4947      	ldr	r1, [pc, #284]	@ (8001128 <ABUF_init+0x208>)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	015b      	lsls	r3, r3, #5
 8001010:	440b      	add	r3, r1
 8001012:	3314      	adds	r3, #20
 8001014:	601a      	str	r2, [r3, #0]
		ABUF_saiBufferPtrs[i].leftTxSecHalf = &ABUF_saiBufferTx[SAI_BUFFER_LENGTH_HALF + i*2];
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	3380      	adds	r3, #128	@ 0x80
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	4a43      	ldr	r2, [pc, #268]	@ (800112c <ABUF_init+0x20c>)
 8001020:	441a      	add	r2, r3
 8001022:	4941      	ldr	r1, [pc, #260]	@ (8001128 <ABUF_init+0x208>)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	015b      	lsls	r3, r3, #5
 8001028:	440b      	add	r3, r1
 800102a:	3318      	adds	r3, #24
 800102c:	601a      	str	r2, [r3, #0]
		ABUF_saiBufferPtrs[i].rightTxSecHalf = &ABUF_saiBufferTx[SAI_BUFFER_LENGTH_HALF + i*2 + 1];
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	f203 1301 	addw	r3, r3, #257	@ 0x101
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	4a3c      	ldr	r2, [pc, #240]	@ (800112c <ABUF_init+0x20c>)
 800103a:	441a      	add	r2, r3
 800103c:	493a      	ldr	r1, [pc, #232]	@ (8001128 <ABUF_init+0x208>)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	015b      	lsls	r3, r3, #5
 8001042:	440b      	add	r3, r1
 8001044:	331c      	adds	r3, #28
 8001046:	601a      	str	r2, [r3, #0]

		ABUF_audioBufferPtrs[i].leftRxFirstHalf = &ABUF_audioBuffers[i].leftRx[0];
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	02db      	lsls	r3, r3, #11
 800104c:	4a34      	ldr	r2, [pc, #208]	@ (8001120 <ABUF_init+0x200>)
 800104e:	441a      	add	r2, r3
 8001050:	4937      	ldr	r1, [pc, #220]	@ (8001130 <ABUF_init+0x210>)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	015b      	lsls	r3, r3, #5
 8001056:	440b      	add	r3, r1
 8001058:	601a      	str	r2, [r3, #0]
		ABUF_audioBufferPtrs[i].rightRxFirstHalf = &ABUF_audioBuffers[i].rightRx[0];
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	02db      	lsls	r3, r3, #11
 800105e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001062:	4a2f      	ldr	r2, [pc, #188]	@ (8001120 <ABUF_init+0x200>)
 8001064:	441a      	add	r2, r3
 8001066:	4932      	ldr	r1, [pc, #200]	@ (8001130 <ABUF_init+0x210>)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	015b      	lsls	r3, r3, #5
 800106c:	440b      	add	r3, r1
 800106e:	3304      	adds	r3, #4
 8001070:	601a      	str	r2, [r3, #0]
		ABUF_audioBufferPtrs[i].leftRxSecHalf = &ABUF_audioBuffers[i].leftRx[AUDIO_BUFFER_LENGTH_HALF];
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	02db      	lsls	r3, r3, #11
 8001076:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800107a:	4a29      	ldr	r2, [pc, #164]	@ (8001120 <ABUF_init+0x200>)
 800107c:	441a      	add	r2, r3
 800107e:	492c      	ldr	r1, [pc, #176]	@ (8001130 <ABUF_init+0x210>)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	015b      	lsls	r3, r3, #5
 8001084:	440b      	add	r3, r1
 8001086:	3308      	adds	r3, #8
 8001088:	601a      	str	r2, [r3, #0]
		ABUF_audioBufferPtrs[i].rightRxSecHalf = &ABUF_audioBuffers[i].rightRx[AUDIO_BUFFER_LENGTH_HALF];
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	02db      	lsls	r3, r3, #11
 800108e:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8001092:	4a23      	ldr	r2, [pc, #140]	@ (8001120 <ABUF_init+0x200>)
 8001094:	441a      	add	r2, r3
 8001096:	4926      	ldr	r1, [pc, #152]	@ (8001130 <ABUF_init+0x210>)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	015b      	lsls	r3, r3, #5
 800109c:	440b      	add	r3, r1
 800109e:	330c      	adds	r3, #12
 80010a0:	601a      	str	r2, [r3, #0]
		ABUF_audioBufferPtrs[i].leftTxFirstHalf = &ABUF_audioBuffers[i].leftTx[0];
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	02db      	lsls	r3, r3, #11
 80010a6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80010aa:	4a1d      	ldr	r2, [pc, #116]	@ (8001120 <ABUF_init+0x200>)
 80010ac:	441a      	add	r2, r3
 80010ae:	4920      	ldr	r1, [pc, #128]	@ (8001130 <ABUF_init+0x210>)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	015b      	lsls	r3, r3, #5
 80010b4:	440b      	add	r3, r1
 80010b6:	3310      	adds	r3, #16
 80010b8:	601a      	str	r2, [r3, #0]
		ABUF_audioBufferPtrs[i].rightTxFirstHalf = &ABUF_audioBuffers[i].rightTx[0];
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	02db      	lsls	r3, r3, #11
 80010be:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 80010c2:	4a17      	ldr	r2, [pc, #92]	@ (8001120 <ABUF_init+0x200>)
 80010c4:	441a      	add	r2, r3
 80010c6:	491a      	ldr	r1, [pc, #104]	@ (8001130 <ABUF_init+0x210>)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	015b      	lsls	r3, r3, #5
 80010cc:	440b      	add	r3, r1
 80010ce:	3314      	adds	r3, #20
 80010d0:	601a      	str	r2, [r3, #0]
		ABUF_audioBufferPtrs[i].leftTxSecHalf = &ABUF_audioBuffers[i].leftTx[AUDIO_BUFFER_LENGTH_HALF];
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	02db      	lsls	r3, r3, #11
 80010d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80010da:	4a11      	ldr	r2, [pc, #68]	@ (8001120 <ABUF_init+0x200>)
 80010dc:	441a      	add	r2, r3
 80010de:	4914      	ldr	r1, [pc, #80]	@ (8001130 <ABUF_init+0x210>)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	015b      	lsls	r3, r3, #5
 80010e4:	440b      	add	r3, r1
 80010e6:	3318      	adds	r3, #24
 80010e8:	601a      	str	r2, [r3, #0]
		ABUF_audioBufferPtrs[i].rightTxSecHalf = &ABUF_audioBuffers[i].rightTx[AUDIO_BUFFER_LENGTH_HALF];
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	02db      	lsls	r3, r3, #11
 80010ee:	f503 63e0 	add.w	r3, r3, #1792	@ 0x700
 80010f2:	4a0b      	ldr	r2, [pc, #44]	@ (8001120 <ABUF_init+0x200>)
 80010f4:	441a      	add	r2, r3
 80010f6:	490e      	ldr	r1, [pc, #56]	@ (8001130 <ABUF_init+0x210>)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	015b      	lsls	r3, r3, #5
 80010fc:	440b      	add	r3, r1
 80010fe:	331c      	adds	r3, #28
 8001100:	601a      	str	r2, [r3, #0]
	for(size_t i = 0;i<AUDIO_STEREO_CHANNEL_COUNT;i++){
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	3301      	adds	r3, #1
 8001106:	607b      	str	r3, [r7, #4]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2b00      	cmp	r3, #0
 800110c:	f43f af0e 	beq.w	8000f2c <ABUF_init+0xc>


	}
}
 8001110:	bf00      	nop
 8001112:	bf00      	nop
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	20000000 	.word	0x20000000
 8001124:	24000030 	.word	0x24000030
 8001128:	24000830 	.word	0x24000830
 800112c:	24000430 	.word	0x24000430
 8001130:	24000850 	.word	0x24000850

08001134 <ASTAT_init>:

bool ASTAT_rxXferStartUpCplt = false;
bool ASTAT_txXferStartupCplt = false;

void ASTAT_init(MDMA_HandleTypeDef *hmdma_rx, MDMA_HandleTypeDef *hmdma_tx)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	6039      	str	r1, [r7, #0]
	ASTAT_hmdmaRxInstance = hmdma_rx;
 800113e:	4a06      	ldr	r2, [pc, #24]	@ (8001158 <ASTAT_init+0x24>)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6013      	str	r3, [r2, #0]
	ASTAT_hmdmaTxInstance = hmdma_tx;
 8001144:	4a05      	ldr	r2, [pc, #20]	@ (800115c <ASTAT_init+0x28>)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	6013      	str	r3, [r2, #0]

	ASTAT_reset();
 800114a:	f000 f809 	bl	8001160 <ASTAT_reset>
}
 800114e:	bf00      	nop
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	2400087c 	.word	0x2400087c
 800115c:	24000880 	.word	0x24000880

08001160 <ASTAT_reset>:

void ASTAT_reset(void)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
	for (size_t i = 0; i < AUDIO_STEREO_CHANNEL_COUNT; i++)
 8001166:	2300      	movs	r3, #0
 8001168:	607b      	str	r3, [r7, #4]
 800116a:	e011      	b.n	8001190 <ASTAT_reset+0x30>
	{
		ASTAT_rxStatus[i] = 0;
 800116c:	4a0e      	ldr	r2, [pc, #56]	@ (80011a8 <ASTAT_reset+0x48>)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4413      	add	r3, r2
 8001172:	2200      	movs	r2, #0
 8001174:	701a      	strb	r2, [r3, #0]
		ASTAT_dspStatus[i] = 0;
 8001176:	4a0d      	ldr	r2, [pc, #52]	@ (80011ac <ASTAT_reset+0x4c>)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	4413      	add	r3, r2
 800117c:	2200      	movs	r2, #0
 800117e:	701a      	strb	r2, [r3, #0]
		ASTAT_txStatus[i] = 0;
 8001180:	4a0b      	ldr	r2, [pc, #44]	@ (80011b0 <ASTAT_reset+0x50>)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4413      	add	r3, r2
 8001186:	2200      	movs	r2, #0
 8001188:	701a      	strb	r2, [r3, #0]
	for (size_t i = 0; i < AUDIO_STEREO_CHANNEL_COUNT; i++)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	3301      	adds	r3, #1
 800118e:	607b      	str	r3, [r7, #4]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d0ea      	beq.n	800116c <ASTAT_reset+0xc>
	}

	ASTAT_saiStatus = 0;
 8001196:	4b07      	ldr	r3, [pc, #28]	@ (80011b4 <ASTAT_reset+0x54>)
 8001198:	2200      	movs	r2, #0
 800119a:	701a      	strb	r2, [r3, #0]

}
 800119c:	bf00      	nop
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	24000870 	.word	0x24000870
 80011ac:	24000874 	.word	0x24000874
 80011b0:	24000878 	.word	0x24000878
 80011b4:	24000879 	.word	0x24000879

080011b8 <ASTAT_rxXferRequestHandler>:

void ASTAT_rxXferRequestHandler(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0

	for (size_t i = 0; i < AUDIO_STEREO_CHANNEL_COUNT; i++)
 80011be:	2300      	movs	r3, #0
 80011c0:	607b      	str	r3, [r7, #4]
 80011c2:	e0cb      	b.n	800135c <ASTAT_rxXferRequestHandler+0x1a4>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011c4:	b672      	cpsid	i
}
 80011c6:	bf00      	nop
	{

		__disable_irq();

		if (READ_BIT(ASTAT_saiStatus,
 80011c8:	4b69      	ldr	r3, [pc, #420]	@ (8001370 <ASTAT_rxXferRequestHandler+0x1b8>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	f003 0302 	and.w	r3, r3, #2
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d030      	beq.n	8001238 <ASTAT_rxXferRequestHandler+0x80>
				SAI_STATUS_RX_HALF_CPLT) && READ_BIT(ASTAT_rxStatus[i], AUDIO_STATUS_L_HALF_PENDING) == false
 80011d6:	4a67      	ldr	r2, [pc, #412]	@ (8001374 <ASTAT_rxXferRequestHandler+0x1bc>)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	4413      	add	r3, r2
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	f003 0301 	and.w	r3, r3, #1
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d127      	bne.n	8001238 <ASTAT_rxXferRequestHandler+0x80>
				&& READ_BIT(ASTAT_rxStatus[i], AUDIO_STATUS_L_HALF_CPLT) == false)
 80011e8:	4a62      	ldr	r2, [pc, #392]	@ (8001374 <ASTAT_rxXferRequestHandler+0x1bc>)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4413      	add	r3, r2
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	f003 0302 	and.w	r3, r3, #2
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d11e      	bne.n	8001238 <ASTAT_rxXferRequestHandler+0x80>
  __ASM volatile ("cpsie i" : : : "memory");
 80011fa:	b662      	cpsie	i
}
 80011fc:	bf00      	nop
		{
			//TODO Check if previous TX was completed
			__enable_irq();
			SET_BIT(ASTAT_rxStatus[i], AUDIO_STATUS_L_HALF_PENDING);
 80011fe:	4a5d      	ldr	r2, [pc, #372]	@ (8001374 <ASTAT_rxXferRequestHandler+0x1bc>)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4413      	add	r3, r2
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	b2db      	uxtb	r3, r3
 8001208:	f043 0301 	orr.w	r3, r3, #1
 800120c:	b2d9      	uxtb	r1, r3
 800120e:	4a59      	ldr	r2, [pc, #356]	@ (8001374 <ASTAT_rxXferRequestHandler+0x1bc>)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	4413      	add	r3, r2
 8001214:	460a      	mov	r2, r1
 8001216:	701a      	strb	r2, [r3, #0]

			if (ASTAT_rxXferStartUpCplt)
 8001218:	4b57      	ldr	r3, [pc, #348]	@ (8001378 <ASTAT_rxXferRequestHandler+0x1c0>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d005      	beq.n	800122c <ASTAT_rxXferRequestHandler+0x74>
			{
				HAL_MDMA_GenerateSWRequest(ASTAT_hmdmaRxInstance);
 8001220:	4b56      	ldr	r3, [pc, #344]	@ (800137c <ASTAT_rxXferRequestHandler+0x1c4>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4618      	mov	r0, r3
 8001226:	f006 f8b3 	bl	8007390 <HAL_MDMA_GenerateSWRequest>
			if (ASTAT_rxXferStartUpCplt)
 800122a:	e094      	b.n	8001356 <ASTAT_rxXferRequestHandler+0x19e>
			}
			else
			{
				ASTAT_rxXferStartUpCplt = true;
 800122c:	4b52      	ldr	r3, [pc, #328]	@ (8001378 <ASTAT_rxXferRequestHandler+0x1c0>)
 800122e:	2201      	movs	r2, #1
 8001230:	701a      	strb	r2, [r3, #0]
				MDMA_startRxTransfer();
 8001232:	f001 ff0f 	bl	8003054 <MDMA_startRxTransfer>
			if (ASTAT_rxXferStartUpCplt)
 8001236:	e08e      	b.n	8001356 <ASTAT_rxXferRequestHandler+0x19e>
			}

		}
		else if (READ_BIT(ASTAT_rxStatus[i],
 8001238:	4a4e      	ldr	r2, [pc, #312]	@ (8001374 <ASTAT_rxXferRequestHandler+0x1bc>)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4413      	add	r3, r2
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	b2db      	uxtb	r3, r3
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	2b00      	cmp	r3, #0
 8001248:	d026      	beq.n	8001298 <ASTAT_rxXferRequestHandler+0xe0>
				AUDIO_STATUS_L_HALF_CPLT) && READ_BIT(ASTAT_rxStatus[i], AUDIO_STATUS_R_HALF_PENDING) == false
 800124a:	4a4a      	ldr	r2, [pc, #296]	@ (8001374 <ASTAT_rxXferRequestHandler+0x1bc>)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4413      	add	r3, r2
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	b2db      	uxtb	r3, r3
 8001254:	f003 0304 	and.w	r3, r3, #4
 8001258:	2b00      	cmp	r3, #0
 800125a:	d11d      	bne.n	8001298 <ASTAT_rxXferRequestHandler+0xe0>
				&& READ_BIT(ASTAT_rxStatus[i], AUDIO_STATUS_R_HALF_CPLT) == false)
 800125c:	4a45      	ldr	r2, [pc, #276]	@ (8001374 <ASTAT_rxXferRequestHandler+0x1bc>)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4413      	add	r3, r2
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	b2db      	uxtb	r3, r3
 8001266:	f003 0308 	and.w	r3, r3, #8
 800126a:	2b00      	cmp	r3, #0
 800126c:	d114      	bne.n	8001298 <ASTAT_rxXferRequestHandler+0xe0>
  __ASM volatile ("cpsie i" : : : "memory");
 800126e:	b662      	cpsie	i
}
 8001270:	bf00      	nop
		{
			__enable_irq();

			SET_BIT(ASTAT_rxStatus[i], AUDIO_STATUS_R_HALF_PENDING);
 8001272:	4a40      	ldr	r2, [pc, #256]	@ (8001374 <ASTAT_rxXferRequestHandler+0x1bc>)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	4413      	add	r3, r2
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	b2db      	uxtb	r3, r3
 800127c:	f043 0304 	orr.w	r3, r3, #4
 8001280:	b2d9      	uxtb	r1, r3
 8001282:	4a3c      	ldr	r2, [pc, #240]	@ (8001374 <ASTAT_rxXferRequestHandler+0x1bc>)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	4413      	add	r3, r2
 8001288:	460a      	mov	r2, r1
 800128a:	701a      	strb	r2, [r3, #0]

			HAL_MDMA_GenerateSWRequest(ASTAT_hmdmaRxInstance);
 800128c:	4b3b      	ldr	r3, [pc, #236]	@ (800137c <ASTAT_rxXferRequestHandler+0x1c4>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4618      	mov	r0, r3
 8001292:	f006 f87d 	bl	8007390 <HAL_MDMA_GenerateSWRequest>
 8001296:	e05e      	b.n	8001356 <ASTAT_rxXferRequestHandler+0x19e>
		}
		else if (READ_BIT(ASTAT_saiStatus,
 8001298:	4b35      	ldr	r3, [pc, #212]	@ (8001370 <ASTAT_rxXferRequestHandler+0x1b8>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	b2db      	uxtb	r3, r3
 800129e:	f003 0308 	and.w	r3, r3, #8
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d026      	beq.n	80012f4 <ASTAT_rxXferRequestHandler+0x13c>
				SAI_STATUS_RX_FULL_CPLT) && READ_BIT(ASTAT_rxStatus[i], AUDIO_STATUS_L_PENDING) == false
 80012a6:	4a33      	ldr	r2, [pc, #204]	@ (8001374 <ASTAT_rxXferRequestHandler+0x1bc>)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	4413      	add	r3, r2
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	f003 0310 	and.w	r3, r3, #16
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d11d      	bne.n	80012f4 <ASTAT_rxXferRequestHandler+0x13c>
				&& READ_BIT(ASTAT_rxStatus[i], AUDIO_STATUS_L_CPLT) == false)
 80012b8:	4a2e      	ldr	r2, [pc, #184]	@ (8001374 <ASTAT_rxXferRequestHandler+0x1bc>)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4413      	add	r3, r2
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	f003 0320 	and.w	r3, r3, #32
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d114      	bne.n	80012f4 <ASTAT_rxXferRequestHandler+0x13c>
  __ASM volatile ("cpsie i" : : : "memory");
 80012ca:	b662      	cpsie	i
}
 80012cc:	bf00      	nop
		{
			//TODO Check if previous TX was completed
			__enable_irq();

			SET_BIT(ASTAT_rxStatus[i], AUDIO_STATUS_L_PENDING);
 80012ce:	4a29      	ldr	r2, [pc, #164]	@ (8001374 <ASTAT_rxXferRequestHandler+0x1bc>)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	4413      	add	r3, r2
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	f043 0310 	orr.w	r3, r3, #16
 80012dc:	b2d9      	uxtb	r1, r3
 80012de:	4a25      	ldr	r2, [pc, #148]	@ (8001374 <ASTAT_rxXferRequestHandler+0x1bc>)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4413      	add	r3, r2
 80012e4:	460a      	mov	r2, r1
 80012e6:	701a      	strb	r2, [r3, #0]

			HAL_MDMA_GenerateSWRequest(ASTAT_hmdmaRxInstance);
 80012e8:	4b24      	ldr	r3, [pc, #144]	@ (800137c <ASTAT_rxXferRequestHandler+0x1c4>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f006 f84f 	bl	8007390 <HAL_MDMA_GenerateSWRequest>
 80012f2:	e030      	b.n	8001356 <ASTAT_rxXferRequestHandler+0x19e>
		}
		else if (READ_BIT(ASTAT_rxStatus[i],
 80012f4:	4a1f      	ldr	r2, [pc, #124]	@ (8001374 <ASTAT_rxXferRequestHandler+0x1bc>)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4413      	add	r3, r2
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	f003 0320 	and.w	r3, r3, #32
 8001302:	2b00      	cmp	r3, #0
 8001304:	d025      	beq.n	8001352 <ASTAT_rxXferRequestHandler+0x19a>
				AUDIO_STATUS_L_CPLT) && READ_BIT(ASTAT_rxStatus[i], AUDIO_STATUS_R_PENDING) == false
 8001306:	4a1b      	ldr	r2, [pc, #108]	@ (8001374 <ASTAT_rxXferRequestHandler+0x1bc>)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4413      	add	r3, r2
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	b2db      	uxtb	r3, r3
 8001310:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001314:	2b00      	cmp	r3, #0
 8001316:	d11c      	bne.n	8001352 <ASTAT_rxXferRequestHandler+0x19a>
				&& READ_BIT(ASTAT_rxStatus[i], AUDIO_STATUS_R_CPLT) == false)
 8001318:	4a16      	ldr	r2, [pc, #88]	@ (8001374 <ASTAT_rxXferRequestHandler+0x1bc>)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4413      	add	r3, r2
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	b2db      	uxtb	r3, r3
 8001322:	b25b      	sxtb	r3, r3
 8001324:	2b00      	cmp	r3, #0
 8001326:	db14      	blt.n	8001352 <ASTAT_rxXferRequestHandler+0x19a>
  __ASM volatile ("cpsie i" : : : "memory");
 8001328:	b662      	cpsie	i
}
 800132a:	bf00      	nop
		{
			__enable_irq();

			SET_BIT(ASTAT_rxStatus[i], AUDIO_STATUS_R_PENDING);
 800132c:	4a11      	ldr	r2, [pc, #68]	@ (8001374 <ASTAT_rxXferRequestHandler+0x1bc>)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4413      	add	r3, r2
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	b2db      	uxtb	r3, r3
 8001336:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800133a:	b2d9      	uxtb	r1, r3
 800133c:	4a0d      	ldr	r2, [pc, #52]	@ (8001374 <ASTAT_rxXferRequestHandler+0x1bc>)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4413      	add	r3, r2
 8001342:	460a      	mov	r2, r1
 8001344:	701a      	strb	r2, [r3, #0]

			HAL_MDMA_GenerateSWRequest(ASTAT_hmdmaRxInstance);
 8001346:	4b0d      	ldr	r3, [pc, #52]	@ (800137c <ASTAT_rxXferRequestHandler+0x1c4>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4618      	mov	r0, r3
 800134c:	f006 f820 	bl	8007390 <HAL_MDMA_GenerateSWRequest>
 8001350:	e001      	b.n	8001356 <ASTAT_rxXferRequestHandler+0x19e>
  __ASM volatile ("cpsie i" : : : "memory");
 8001352:	b662      	cpsie	i
}
 8001354:	bf00      	nop
	for (size_t i = 0; i < AUDIO_STEREO_CHANNEL_COUNT; i++)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	3301      	adds	r3, #1
 800135a:	607b      	str	r3, [r7, #4]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2b00      	cmp	r3, #0
 8001360:	f43f af30 	beq.w	80011c4 <ASTAT_rxXferRequestHandler+0xc>
		else
		{
			__enable_irq();
		}
	}
}
 8001364:	bf00      	nop
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	24000879 	.word	0x24000879
 8001374:	24000870 	.word	0x24000870
 8001378:	24000886 	.word	0x24000886
 800137c:	2400087c 	.word	0x2400087c

08001380 <ASTAT_DspRequestHandler>:

void ASTAT_DspRequestHandler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
	for (size_t i = 0; i < AUDIO_STEREO_CHANNEL_COUNT; i++)
 8001386:	2300      	movs	r3, #0
 8001388:	607b      	str	r3, [r7, #4]
 800138a:	e0e4      	b.n	8001556 <ASTAT_DspRequestHandler+0x1d6>
  __ASM volatile ("cpsid i" : : : "memory");
 800138c:	b672      	cpsid	i
}
 800138e:	bf00      	nop
	{

		__disable_irq();
		if (READ_BIT(ASTAT_rxStatus[i],
 8001390:	4a76      	ldr	r2, [pc, #472]	@ (800156c <ASTAT_DspRequestHandler+0x1ec>)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4413      	add	r3, r2
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	b2db      	uxtb	r3, r3
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d02e      	beq.n	8001400 <ASTAT_DspRequestHandler+0x80>
				AUDIO_STATUS_L_HALF_CPLT) && READ_BIT(ASTAT_dspStatus[i], AUDIO_STATUS_L_HALF_PENDING) == false
 80013a2:	4a73      	ldr	r2, [pc, #460]	@ (8001570 <ASTAT_DspRequestHandler+0x1f0>)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	4413      	add	r3, r2
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	f003 0301 	and.w	r3, r3, #1
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d125      	bne.n	8001400 <ASTAT_DspRequestHandler+0x80>
				&& READ_BIT(ASTAT_dspStatus[i], AUDIO_STATUS_L_HALF_CPLT) == false)
 80013b4:	4a6e      	ldr	r2, [pc, #440]	@ (8001570 <ASTAT_DspRequestHandler+0x1f0>)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4413      	add	r3, r2
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d11c      	bne.n	8001400 <ASTAT_DspRequestHandler+0x80>
  __ASM volatile ("cpsie i" : : : "memory");
 80013c6:	b662      	cpsie	i
}
 80013c8:	bf00      	nop
		{
			__enable_irq();
			SET_BIT(ASTAT_dspStatus[i], AUDIO_STATUS_L_HALF_PENDING);
 80013ca:	4a69      	ldr	r2, [pc, #420]	@ (8001570 <ASTAT_DspRequestHandler+0x1f0>)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	4413      	add	r3, r2
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	f043 0301 	orr.w	r3, r3, #1
 80013d8:	b2d9      	uxtb	r1, r3
 80013da:	4a65      	ldr	r2, [pc, #404]	@ (8001570 <ASTAT_DspRequestHandler+0x1f0>)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4413      	add	r3, r2
 80013e0:	460a      	mov	r2, r1
 80013e2:	701a      	strb	r2, [r3, #0]
			CLEAR_BIT(ASTAT_dspStatus[i], AUDIO_STATUS_L_HALF_CPLT);
 80013e4:	4a62      	ldr	r2, [pc, #392]	@ (8001570 <ASTAT_DspRequestHandler+0x1f0>)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4413      	add	r3, r2
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	f023 0302 	bic.w	r3, r3, #2
 80013f2:	b2d9      	uxtb	r1, r3
 80013f4:	4a5e      	ldr	r2, [pc, #376]	@ (8001570 <ASTAT_DspRequestHandler+0x1f0>)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4413      	add	r3, r2
 80013fa:	460a      	mov	r2, r1
 80013fc:	701a      	strb	r2, [r3, #0]
 80013fe:	e0a7      	b.n	8001550 <ASTAT_DspRequestHandler+0x1d0>

		}
		else if (READ_BIT(ASTAT_rxStatus[i],
 8001400:	4a5a      	ldr	r2, [pc, #360]	@ (800156c <ASTAT_DspRequestHandler+0x1ec>)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4413      	add	r3, r2
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	b2db      	uxtb	r3, r3
 800140a:	f003 0308 	and.w	r3, r3, #8
 800140e:	2b00      	cmp	r3, #0
 8001410:	d02e      	beq.n	8001470 <ASTAT_DspRequestHandler+0xf0>
				AUDIO_STATUS_R_HALF_CPLT) && READ_BIT(ASTAT_dspStatus[i], AUDIO_STATUS_R_HALF_PENDING) == false
 8001412:	4a57      	ldr	r2, [pc, #348]	@ (8001570 <ASTAT_DspRequestHandler+0x1f0>)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4413      	add	r3, r2
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	b2db      	uxtb	r3, r3
 800141c:	f003 0304 	and.w	r3, r3, #4
 8001420:	2b00      	cmp	r3, #0
 8001422:	d125      	bne.n	8001470 <ASTAT_DspRequestHandler+0xf0>
				&& READ_BIT(ASTAT_dspStatus[i], AUDIO_STATUS_R_HALF_CPLT) == false)
 8001424:	4a52      	ldr	r2, [pc, #328]	@ (8001570 <ASTAT_DspRequestHandler+0x1f0>)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4413      	add	r3, r2
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	b2db      	uxtb	r3, r3
 800142e:	f003 0308 	and.w	r3, r3, #8
 8001432:	2b00      	cmp	r3, #0
 8001434:	d11c      	bne.n	8001470 <ASTAT_DspRequestHandler+0xf0>
  __ASM volatile ("cpsie i" : : : "memory");
 8001436:	b662      	cpsie	i
}
 8001438:	bf00      	nop
		{
			__enable_irq();

			SET_BIT(ASTAT_dspStatus[i], AUDIO_STATUS_R_HALF_PENDING);
 800143a:	4a4d      	ldr	r2, [pc, #308]	@ (8001570 <ASTAT_DspRequestHandler+0x1f0>)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	4413      	add	r3, r2
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	b2db      	uxtb	r3, r3
 8001444:	f043 0304 	orr.w	r3, r3, #4
 8001448:	b2d9      	uxtb	r1, r3
 800144a:	4a49      	ldr	r2, [pc, #292]	@ (8001570 <ASTAT_DspRequestHandler+0x1f0>)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	4413      	add	r3, r2
 8001450:	460a      	mov	r2, r1
 8001452:	701a      	strb	r2, [r3, #0]
			CLEAR_BIT(ASTAT_dspStatus[i], AUDIO_STATUS_R_HALF_CPLT);
 8001454:	4a46      	ldr	r2, [pc, #280]	@ (8001570 <ASTAT_DspRequestHandler+0x1f0>)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4413      	add	r3, r2
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	b2db      	uxtb	r3, r3
 800145e:	f023 0308 	bic.w	r3, r3, #8
 8001462:	b2d9      	uxtb	r1, r3
 8001464:	4a42      	ldr	r2, [pc, #264]	@ (8001570 <ASTAT_DspRequestHandler+0x1f0>)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4413      	add	r3, r2
 800146a:	460a      	mov	r2, r1
 800146c:	701a      	strb	r2, [r3, #0]
 800146e:	e06f      	b.n	8001550 <ASTAT_DspRequestHandler+0x1d0>

		}
		else if (READ_BIT(ASTAT_rxStatus[i],
 8001470:	4a3e      	ldr	r2, [pc, #248]	@ (800156c <ASTAT_DspRequestHandler+0x1ec>)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4413      	add	r3, r2
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	b2db      	uxtb	r3, r3
 800147a:	f003 0320 	and.w	r3, r3, #32
 800147e:	2b00      	cmp	r3, #0
 8001480:	d02e      	beq.n	80014e0 <ASTAT_DspRequestHandler+0x160>
				AUDIO_STATUS_L_CPLT) && READ_BIT(ASTAT_dspStatus[i], AUDIO_STATUS_L_PENDING) == false
 8001482:	4a3b      	ldr	r2, [pc, #236]	@ (8001570 <ASTAT_DspRequestHandler+0x1f0>)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	4413      	add	r3, r2
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	b2db      	uxtb	r3, r3
 800148c:	f003 0310 	and.w	r3, r3, #16
 8001490:	2b00      	cmp	r3, #0
 8001492:	d125      	bne.n	80014e0 <ASTAT_DspRequestHandler+0x160>
				&& READ_BIT(ASTAT_dspStatus[i], AUDIO_STATUS_L_CPLT) == false)
 8001494:	4a36      	ldr	r2, [pc, #216]	@ (8001570 <ASTAT_DspRequestHandler+0x1f0>)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4413      	add	r3, r2
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	b2db      	uxtb	r3, r3
 800149e:	f003 0320 	and.w	r3, r3, #32
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d11c      	bne.n	80014e0 <ASTAT_DspRequestHandler+0x160>
  __ASM volatile ("cpsie i" : : : "memory");
 80014a6:	b662      	cpsie	i
}
 80014a8:	bf00      	nop
		{
			__enable_irq();

			SET_BIT(ASTAT_dspStatus[i], AUDIO_STATUS_L_PENDING);
 80014aa:	4a31      	ldr	r2, [pc, #196]	@ (8001570 <ASTAT_DspRequestHandler+0x1f0>)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	4413      	add	r3, r2
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	f043 0310 	orr.w	r3, r3, #16
 80014b8:	b2d9      	uxtb	r1, r3
 80014ba:	4a2d      	ldr	r2, [pc, #180]	@ (8001570 <ASTAT_DspRequestHandler+0x1f0>)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	4413      	add	r3, r2
 80014c0:	460a      	mov	r2, r1
 80014c2:	701a      	strb	r2, [r3, #0]
			CLEAR_BIT(ASTAT_dspStatus[i], AUDIO_STATUS_L_CPLT);
 80014c4:	4a2a      	ldr	r2, [pc, #168]	@ (8001570 <ASTAT_DspRequestHandler+0x1f0>)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4413      	add	r3, r2
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	f023 0320 	bic.w	r3, r3, #32
 80014d2:	b2d9      	uxtb	r1, r3
 80014d4:	4a26      	ldr	r2, [pc, #152]	@ (8001570 <ASTAT_DspRequestHandler+0x1f0>)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4413      	add	r3, r2
 80014da:	460a      	mov	r2, r1
 80014dc:	701a      	strb	r2, [r3, #0]
 80014de:	e037      	b.n	8001550 <ASTAT_DspRequestHandler+0x1d0>

		}
		else if (READ_BIT(ASTAT_rxStatus[i],
 80014e0:	4a22      	ldr	r2, [pc, #136]	@ (800156c <ASTAT_DspRequestHandler+0x1ec>)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4413      	add	r3, r2
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	b25b      	sxtb	r3, r3
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	da2d      	bge.n	800154c <ASTAT_DspRequestHandler+0x1cc>
				AUDIO_STATUS_R_CPLT) && READ_BIT(ASTAT_dspStatus[i], AUDIO_STATUS_R_PENDING) == false
 80014f0:	4a1f      	ldr	r2, [pc, #124]	@ (8001570 <ASTAT_DspRequestHandler+0x1f0>)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4413      	add	r3, r2
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d124      	bne.n	800154c <ASTAT_DspRequestHandler+0x1cc>
				&& READ_BIT(ASTAT_dspStatus[i], AUDIO_STATUS_R_CPLT) == false)
 8001502:	4a1b      	ldr	r2, [pc, #108]	@ (8001570 <ASTAT_DspRequestHandler+0x1f0>)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	4413      	add	r3, r2
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	b2db      	uxtb	r3, r3
 800150c:	b25b      	sxtb	r3, r3
 800150e:	2b00      	cmp	r3, #0
 8001510:	db1c      	blt.n	800154c <ASTAT_DspRequestHandler+0x1cc>
  __ASM volatile ("cpsie i" : : : "memory");
 8001512:	b662      	cpsie	i
}
 8001514:	bf00      	nop
		{
			__enable_irq();

			SET_BIT(ASTAT_dspStatus[i], AUDIO_STATUS_R_PENDING);
 8001516:	4a16      	ldr	r2, [pc, #88]	@ (8001570 <ASTAT_DspRequestHandler+0x1f0>)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	4413      	add	r3, r2
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	b2db      	uxtb	r3, r3
 8001520:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001524:	b2d9      	uxtb	r1, r3
 8001526:	4a12      	ldr	r2, [pc, #72]	@ (8001570 <ASTAT_DspRequestHandler+0x1f0>)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	4413      	add	r3, r2
 800152c:	460a      	mov	r2, r1
 800152e:	701a      	strb	r2, [r3, #0]
			CLEAR_BIT(ASTAT_dspStatus[i], AUDIO_STATUS_R_CPLT);
 8001530:	4a0f      	ldr	r2, [pc, #60]	@ (8001570 <ASTAT_DspRequestHandler+0x1f0>)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4413      	add	r3, r2
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	b2db      	uxtb	r3, r3
 800153a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800153e:	b2d9      	uxtb	r1, r3
 8001540:	4a0b      	ldr	r2, [pc, #44]	@ (8001570 <ASTAT_DspRequestHandler+0x1f0>)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4413      	add	r3, r2
 8001546:	460a      	mov	r2, r1
 8001548:	701a      	strb	r2, [r3, #0]
 800154a:	e001      	b.n	8001550 <ASTAT_DspRequestHandler+0x1d0>
  __ASM volatile ("cpsie i" : : : "memory");
 800154c:	b662      	cpsie	i
}
 800154e:	bf00      	nop
	for (size_t i = 0; i < AUDIO_STEREO_CHANNEL_COUNT; i++)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	3301      	adds	r3, #1
 8001554:	607b      	str	r3, [r7, #4]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2b00      	cmp	r3, #0
 800155a:	f43f af17 	beq.w	800138c <ASTAT_DspRequestHandler+0xc>
		else
		{
			__enable_irq();
		}
	}
}
 800155e:	bf00      	nop
 8001560:	bf00      	nop
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	24000870 	.word	0x24000870
 8001570:	24000874 	.word	0x24000874

08001574 <ASTAT_TxXferRequestHandler>:

void ASTAT_TxXferRequestHandler(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
	for (size_t i = 0; i < AUDIO_STEREO_CHANNEL_COUNT; i++)
 800157a:	2300      	movs	r3, #0
 800157c:	607b      	str	r3, [r7, #4]
 800157e:	e125      	b.n	80017cc <ASTAT_TxXferRequestHandler+0x258>
  __ASM volatile ("cpsid i" : : : "memory");
 8001580:	b672      	cpsid	i
}
 8001582:	bf00      	nop
	{
		__disable_irq();
		if (READ_BIT(ASTAT_dspStatus[i],
 8001584:	4a96      	ldr	r2, [pc, #600]	@ (80017e0 <ASTAT_TxXferRequestHandler+0x26c>)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4413      	add	r3, r2
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	b2db      	uxtb	r3, r3
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	2b00      	cmp	r3, #0
 8001594:	d046      	beq.n	8001624 <ASTAT_TxXferRequestHandler+0xb0>
				AUDIO_STATUS_L_HALF_CPLT) && READ_BIT(ASTAT_rxStatus[i], AUDIO_STATUS_R_HALF_CPLT)
 8001596:	4a93      	ldr	r2, [pc, #588]	@ (80017e4 <ASTAT_TxXferRequestHandler+0x270>)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	4413      	add	r3, r2
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	f003 0308 	and.w	r3, r3, #8
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d03d      	beq.n	8001624 <ASTAT_TxXferRequestHandler+0xb0>
				&& READ_BIT(ASTAT_txStatus[i], AUDIO_STATUS_L_HALF_PENDING) == false
 80015a8:	4a8f      	ldr	r2, [pc, #572]	@ (80017e8 <ASTAT_TxXferRequestHandler+0x274>)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4413      	add	r3, r2
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d134      	bne.n	8001624 <ASTAT_TxXferRequestHandler+0xb0>
				&& READ_BIT(ASTAT_txStatus[i], AUDIO_STATUS_L_HALF_CPLT) == false)
 80015ba:	4a8b      	ldr	r2, [pc, #556]	@ (80017e8 <ASTAT_TxXferRequestHandler+0x274>)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	4413      	add	r3, r2
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	f003 0302 	and.w	r3, r3, #2
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d12b      	bne.n	8001624 <ASTAT_TxXferRequestHandler+0xb0>
  __ASM volatile ("cpsie i" : : : "memory");
 80015cc:	b662      	cpsie	i
}
 80015ce:	bf00      	nop
		{
			__enable_irq();

			SET_BIT(ASTAT_txStatus[i], AUDIO_STATUS_L_HALF_PENDING);
 80015d0:	4a85      	ldr	r2, [pc, #532]	@ (80017e8 <ASTAT_TxXferRequestHandler+0x274>)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4413      	add	r3, r2
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	f043 0301 	orr.w	r3, r3, #1
 80015de:	b2d9      	uxtb	r1, r3
 80015e0:	4a81      	ldr	r2, [pc, #516]	@ (80017e8 <ASTAT_TxXferRequestHandler+0x274>)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4413      	add	r3, r2
 80015e6:	460a      	mov	r2, r1
 80015e8:	701a      	strb	r2, [r3, #0]
			CLEAR_BIT(ASTAT_txStatus[i], AUDIO_STATUS_L_HALF_CPLT);
 80015ea:	4a7f      	ldr	r2, [pc, #508]	@ (80017e8 <ASTAT_TxXferRequestHandler+0x274>)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4413      	add	r3, r2
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	f023 0302 	bic.w	r3, r3, #2
 80015f8:	b2d9      	uxtb	r1, r3
 80015fa:	4a7b      	ldr	r2, [pc, #492]	@ (80017e8 <ASTAT_TxXferRequestHandler+0x274>)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4413      	add	r3, r2
 8001600:	460a      	mov	r2, r1
 8001602:	701a      	strb	r2, [r3, #0]

			if (ASTAT_txXferStartupCplt)
 8001604:	4b79      	ldr	r3, [pc, #484]	@ (80017ec <ASTAT_TxXferRequestHandler+0x278>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d005      	beq.n	8001618 <ASTAT_TxXferRequestHandler+0xa4>
			{
				HAL_MDMA_GenerateSWRequest(ASTAT_hmdmaTxInstance);
 800160c:	4b78      	ldr	r3, [pc, #480]	@ (80017f0 <ASTAT_TxXferRequestHandler+0x27c>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4618      	mov	r0, r3
 8001612:	f005 febd 	bl	8007390 <HAL_MDMA_GenerateSWRequest>
			if (ASTAT_txXferStartupCplt)
 8001616:	e0d6      	b.n	80017c6 <ASTAT_TxXferRequestHandler+0x252>
			}
			else
			{
				ASTAT_txXferStartupCplt = true;
 8001618:	4b74      	ldr	r3, [pc, #464]	@ (80017ec <ASTAT_TxXferRequestHandler+0x278>)
 800161a:	2201      	movs	r2, #1
 800161c:	701a      	strb	r2, [r3, #0]
				MDMA_startTxTransfer();
 800161e:	f001 fd35 	bl	800308c <MDMA_startTxTransfer>
			if (ASTAT_txXferStartupCplt)
 8001622:	e0d0      	b.n	80017c6 <ASTAT_TxXferRequestHandler+0x252>
			}
		}
		else if (READ_BIT(ASTAT_dspStatus[i],
 8001624:	4a6e      	ldr	r2, [pc, #440]	@ (80017e0 <ASTAT_TxXferRequestHandler+0x26c>)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4413      	add	r3, r2
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	b2db      	uxtb	r3, r3
 800162e:	f003 0308 	and.w	r3, r3, #8
 8001632:	2b00      	cmp	r3, #0
 8001634:	d03c      	beq.n	80016b0 <ASTAT_TxXferRequestHandler+0x13c>
				AUDIO_STATUS_R_HALF_CPLT) && READ_BIT(ASTAT_txStatus[i], AUDIO_STATUS_L_HALF_CPLT)
 8001636:	4a6c      	ldr	r2, [pc, #432]	@ (80017e8 <ASTAT_TxXferRequestHandler+0x274>)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	4413      	add	r3, r2
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	b2db      	uxtb	r3, r3
 8001640:	f003 0302 	and.w	r3, r3, #2
 8001644:	2b00      	cmp	r3, #0
 8001646:	d033      	beq.n	80016b0 <ASTAT_TxXferRequestHandler+0x13c>
				&& READ_BIT(ASTAT_txStatus[i], AUDIO_STATUS_R_HALF_PENDING) == false
 8001648:	4a67      	ldr	r2, [pc, #412]	@ (80017e8 <ASTAT_TxXferRequestHandler+0x274>)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4413      	add	r3, r2
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	b2db      	uxtb	r3, r3
 8001652:	f003 0304 	and.w	r3, r3, #4
 8001656:	2b00      	cmp	r3, #0
 8001658:	d12a      	bne.n	80016b0 <ASTAT_TxXferRequestHandler+0x13c>
				&& READ_BIT(ASTAT_txStatus[i], AUDIO_STATUS_R_HALF_CPLT) == false)
 800165a:	4a63      	ldr	r2, [pc, #396]	@ (80017e8 <ASTAT_TxXferRequestHandler+0x274>)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	4413      	add	r3, r2
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	b2db      	uxtb	r3, r3
 8001664:	f003 0308 	and.w	r3, r3, #8
 8001668:	2b00      	cmp	r3, #0
 800166a:	d121      	bne.n	80016b0 <ASTAT_TxXferRequestHandler+0x13c>
  __ASM volatile ("cpsie i" : : : "memory");
 800166c:	b662      	cpsie	i
}
 800166e:	bf00      	nop
		{
			__enable_irq();

			SET_BIT(ASTAT_txStatus[i], AUDIO_STATUS_R_HALF_PENDING);
 8001670:	4a5d      	ldr	r2, [pc, #372]	@ (80017e8 <ASTAT_TxXferRequestHandler+0x274>)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4413      	add	r3, r2
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	b2db      	uxtb	r3, r3
 800167a:	f043 0304 	orr.w	r3, r3, #4
 800167e:	b2d9      	uxtb	r1, r3
 8001680:	4a59      	ldr	r2, [pc, #356]	@ (80017e8 <ASTAT_TxXferRequestHandler+0x274>)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4413      	add	r3, r2
 8001686:	460a      	mov	r2, r1
 8001688:	701a      	strb	r2, [r3, #0]
			CLEAR_BIT(ASTAT_txStatus[i], AUDIO_STATUS_R_HALF_CPLT);
 800168a:	4a57      	ldr	r2, [pc, #348]	@ (80017e8 <ASTAT_TxXferRequestHandler+0x274>)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4413      	add	r3, r2
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	b2db      	uxtb	r3, r3
 8001694:	f023 0308 	bic.w	r3, r3, #8
 8001698:	b2d9      	uxtb	r1, r3
 800169a:	4a53      	ldr	r2, [pc, #332]	@ (80017e8 <ASTAT_TxXferRequestHandler+0x274>)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	4413      	add	r3, r2
 80016a0:	460a      	mov	r2, r1
 80016a2:	701a      	strb	r2, [r3, #0]
			HAL_MDMA_GenerateSWRequest(ASTAT_hmdmaTxInstance);
 80016a4:	4b52      	ldr	r3, [pc, #328]	@ (80017f0 <ASTAT_TxXferRequestHandler+0x27c>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f005 fe71 	bl	8007390 <HAL_MDMA_GenerateSWRequest>
 80016ae:	e08a      	b.n	80017c6 <ASTAT_TxXferRequestHandler+0x252>
		}
		else if (READ_BIT(ASTAT_dspStatus[i],
 80016b0:	4a4b      	ldr	r2, [pc, #300]	@ (80017e0 <ASTAT_TxXferRequestHandler+0x26c>)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4413      	add	r3, r2
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	f003 0320 	and.w	r3, r3, #32
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d03b      	beq.n	800173a <ASTAT_TxXferRequestHandler+0x1c6>
				AUDIO_STATUS_L_CPLT) && READ_BIT(ASTAT_rxStatus[i], AUDIO_STATUS_R_CPLT)
 80016c2:	4a48      	ldr	r2, [pc, #288]	@ (80017e4 <ASTAT_TxXferRequestHandler+0x270>)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	4413      	add	r3, r2
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	b25b      	sxtb	r3, r3
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	da33      	bge.n	800173a <ASTAT_TxXferRequestHandler+0x1c6>
				&& READ_BIT(ASTAT_txStatus[i], AUDIO_STATUS_L_PENDING) == false
 80016d2:	4a45      	ldr	r2, [pc, #276]	@ (80017e8 <ASTAT_TxXferRequestHandler+0x274>)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	4413      	add	r3, r2
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	f003 0310 	and.w	r3, r3, #16
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d12a      	bne.n	800173a <ASTAT_TxXferRequestHandler+0x1c6>
				&& READ_BIT(ASTAT_txStatus[i], AUDIO_STATUS_L_CPLT) == false)
 80016e4:	4a40      	ldr	r2, [pc, #256]	@ (80017e8 <ASTAT_TxXferRequestHandler+0x274>)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4413      	add	r3, r2
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	f003 0320 	and.w	r3, r3, #32
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d121      	bne.n	800173a <ASTAT_TxXferRequestHandler+0x1c6>
  __ASM volatile ("cpsie i" : : : "memory");
 80016f6:	b662      	cpsie	i
}
 80016f8:	bf00      	nop
		{
			__enable_irq();

			SET_BIT(ASTAT_txStatus[i], AUDIO_STATUS_L_PENDING);
 80016fa:	4a3b      	ldr	r2, [pc, #236]	@ (80017e8 <ASTAT_TxXferRequestHandler+0x274>)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	4413      	add	r3, r2
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	b2db      	uxtb	r3, r3
 8001704:	f043 0310 	orr.w	r3, r3, #16
 8001708:	b2d9      	uxtb	r1, r3
 800170a:	4a37      	ldr	r2, [pc, #220]	@ (80017e8 <ASTAT_TxXferRequestHandler+0x274>)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	4413      	add	r3, r2
 8001710:	460a      	mov	r2, r1
 8001712:	701a      	strb	r2, [r3, #0]
			CLEAR_BIT(ASTAT_txStatus[i], AUDIO_STATUS_L_CPLT);
 8001714:	4a34      	ldr	r2, [pc, #208]	@ (80017e8 <ASTAT_TxXferRequestHandler+0x274>)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4413      	add	r3, r2
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	b2db      	uxtb	r3, r3
 800171e:	f023 0320 	bic.w	r3, r3, #32
 8001722:	b2d9      	uxtb	r1, r3
 8001724:	4a30      	ldr	r2, [pc, #192]	@ (80017e8 <ASTAT_TxXferRequestHandler+0x274>)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4413      	add	r3, r2
 800172a:	460a      	mov	r2, r1
 800172c:	701a      	strb	r2, [r3, #0]
			HAL_MDMA_GenerateSWRequest(ASTAT_hmdmaTxInstance);
 800172e:	4b30      	ldr	r3, [pc, #192]	@ (80017f0 <ASTAT_TxXferRequestHandler+0x27c>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4618      	mov	r0, r3
 8001734:	f005 fe2c 	bl	8007390 <HAL_MDMA_GenerateSWRequest>
 8001738:	e045      	b.n	80017c6 <ASTAT_TxXferRequestHandler+0x252>
		}
		else if (READ_BIT(ASTAT_dspStatus[i],
 800173a:	4a29      	ldr	r2, [pc, #164]	@ (80017e0 <ASTAT_TxXferRequestHandler+0x26c>)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	4413      	add	r3, r2
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	b2db      	uxtb	r3, r3
 8001744:	b25b      	sxtb	r3, r3
 8001746:	2b00      	cmp	r3, #0
 8001748:	da3b      	bge.n	80017c2 <ASTAT_TxXferRequestHandler+0x24e>
				AUDIO_STATUS_R_CPLT) && READ_BIT(ASTAT_txStatus[i], AUDIO_STATUS_L_CPLT)
 800174a:	4a27      	ldr	r2, [pc, #156]	@ (80017e8 <ASTAT_TxXferRequestHandler+0x274>)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	4413      	add	r3, r2
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	b2db      	uxtb	r3, r3
 8001754:	f003 0320 	and.w	r3, r3, #32
 8001758:	2b00      	cmp	r3, #0
 800175a:	d032      	beq.n	80017c2 <ASTAT_TxXferRequestHandler+0x24e>
				&& READ_BIT(ASTAT_txStatus[i], AUDIO_STATUS_R_PENDING) == false
 800175c:	4a22      	ldr	r2, [pc, #136]	@ (80017e8 <ASTAT_TxXferRequestHandler+0x274>)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4413      	add	r3, r2
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	b2db      	uxtb	r3, r3
 8001766:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800176a:	2b00      	cmp	r3, #0
 800176c:	d129      	bne.n	80017c2 <ASTAT_TxXferRequestHandler+0x24e>
				&& READ_BIT(ASTAT_txStatus[i], AUDIO_STATUS_R_CPLT) == false)
 800176e:	4a1e      	ldr	r2, [pc, #120]	@ (80017e8 <ASTAT_TxXferRequestHandler+0x274>)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	4413      	add	r3, r2
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	b2db      	uxtb	r3, r3
 8001778:	b25b      	sxtb	r3, r3
 800177a:	2b00      	cmp	r3, #0
 800177c:	db21      	blt.n	80017c2 <ASTAT_TxXferRequestHandler+0x24e>
  __ASM volatile ("cpsie i" : : : "memory");
 800177e:	b662      	cpsie	i
}
 8001780:	bf00      	nop
		{
			__enable_irq();

			SET_BIT(ASTAT_txStatus[i], AUDIO_STATUS_R_PENDING);
 8001782:	4a19      	ldr	r2, [pc, #100]	@ (80017e8 <ASTAT_TxXferRequestHandler+0x274>)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	4413      	add	r3, r2
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	b2db      	uxtb	r3, r3
 800178c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001790:	b2d9      	uxtb	r1, r3
 8001792:	4a15      	ldr	r2, [pc, #84]	@ (80017e8 <ASTAT_TxXferRequestHandler+0x274>)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	4413      	add	r3, r2
 8001798:	460a      	mov	r2, r1
 800179a:	701a      	strb	r2, [r3, #0]
			CLEAR_BIT(ASTAT_txStatus[i], AUDIO_STATUS_R_CPLT);
 800179c:	4a12      	ldr	r2, [pc, #72]	@ (80017e8 <ASTAT_TxXferRequestHandler+0x274>)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4413      	add	r3, r2
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80017aa:	b2d9      	uxtb	r1, r3
 80017ac:	4a0e      	ldr	r2, [pc, #56]	@ (80017e8 <ASTAT_TxXferRequestHandler+0x274>)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4413      	add	r3, r2
 80017b2:	460a      	mov	r2, r1
 80017b4:	701a      	strb	r2, [r3, #0]
			HAL_MDMA_GenerateSWRequest(ASTAT_hmdmaTxInstance);
 80017b6:	4b0e      	ldr	r3, [pc, #56]	@ (80017f0 <ASTAT_TxXferRequestHandler+0x27c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f005 fde8 	bl	8007390 <HAL_MDMA_GenerateSWRequest>
 80017c0:	e001      	b.n	80017c6 <ASTAT_TxXferRequestHandler+0x252>
  __ASM volatile ("cpsie i" : : : "memory");
 80017c2:	b662      	cpsie	i
}
 80017c4:	bf00      	nop
	for (size_t i = 0; i < AUDIO_STEREO_CHANNEL_COUNT; i++)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	3301      	adds	r3, #1
 80017ca:	607b      	str	r3, [r7, #4]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	f43f aed6 	beq.w	8001580 <ASTAT_TxXferRequestHandler+0xc>
		else
		{
			__enable_irq();
		}
	}
}
 80017d4:	bf00      	nop
 80017d6:	bf00      	nop
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	24000874 	.word	0x24000874
 80017e4:	24000870 	.word	0x24000870
 80017e8:	24000878 	.word	0x24000878
 80017ec:	24000887 	.word	0x24000887
 80017f0:	24000880 	.word	0x24000880

080017f4 <ASTAT_RxXferBlockCpltHandler>:

void ASTAT_RxXferBlockCpltHandler(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
	if (ASTAT_isRxTransferComplete)
 80017fa:	4b5a      	ldr	r3, [pc, #360]	@ (8001964 <ASTAT_RxXferBlockCpltHandler+0x170>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	2b00      	cmp	r3, #0
 8001802:	f000 80aa 	beq.w	800195a <ASTAT_RxXferBlockCpltHandler+0x166>
	{
		ASTAT_isRxTransferComplete = false;
 8001806:	4b57      	ldr	r3, [pc, #348]	@ (8001964 <ASTAT_RxXferBlockCpltHandler+0x170>)
 8001808:	2200      	movs	r2, #0
 800180a:	701a      	strb	r2, [r3, #0]

		uint8_t currNodeIndex = MDMA_getCurrentRxChIndex();
 800180c:	f001 fc5a 	bl	80030c4 <MDMA_getCurrentRxChIndex>
 8001810:	4603      	mov	r3, r0
 8001812:	717b      	strb	r3, [r7, #5]

		bool isFirstHalf = false;
 8001814:	2300      	movs	r3, #0
 8001816:	71fb      	strb	r3, [r7, #7]
		uint8_t currChIndex;
		if ((currNodeIndex) / 2 < AUDIO_STEREO_CHANNEL_COUNT)
 8001818:	797b      	ldrb	r3, [r7, #5]
 800181a:	2b01      	cmp	r3, #1
 800181c:	d805      	bhi.n	800182a <ASTAT_RxXferBlockCpltHandler+0x36>
		{
			currChIndex = currNodeIndex / 2;
 800181e:	797b      	ldrb	r3, [r7, #5]
 8001820:	085b      	lsrs	r3, r3, #1
 8001822:	71bb      	strb	r3, [r7, #6]
			isFirstHalf = true;
 8001824:	2301      	movs	r3, #1
 8001826:	71fb      	strb	r3, [r7, #7]
 8001828:	e006      	b.n	8001838 <ASTAT_RxXferBlockCpltHandler+0x44>
		}
		else
		{
			currChIndex = (currNodeIndex - AUDIO_CHANNEL_COUNT) / 2;
 800182a:	797b      	ldrb	r3, [r7, #5]
 800182c:	3b02      	subs	r3, #2
 800182e:	2b00      	cmp	r3, #0
 8001830:	da00      	bge.n	8001834 <ASTAT_RxXferBlockCpltHandler+0x40>
 8001832:	3301      	adds	r3, #1
 8001834:	105b      	asrs	r3, r3, #1
 8001836:	71bb      	strb	r3, [r7, #6]
		}

		bool isLeft = (currNodeIndex % 2) == 0 ;
 8001838:	797b      	ldrb	r3, [r7, #5]
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	b2db      	uxtb	r3, r3
 8001840:	2b00      	cmp	r3, #0
 8001842:	bf0c      	ite	eq
 8001844:	2301      	moveq	r3, #1
 8001846:	2300      	movne	r3, #0
 8001848:	713b      	strb	r3, [r7, #4]

		if (isFirstHalf)
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d042      	beq.n	80018d6 <ASTAT_RxXferBlockCpltHandler+0xe2>
		{
			if (isLeft)
 8001850:	793b      	ldrb	r3, [r7, #4]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d01f      	beq.n	8001896 <ASTAT_RxXferBlockCpltHandler+0xa2>
			{
				if (READ_BIT(ASTAT_rxStatus[currChIndex],
 8001856:	79bb      	ldrb	r3, [r7, #6]
 8001858:	4a43      	ldr	r2, [pc, #268]	@ (8001968 <ASTAT_RxXferBlockCpltHandler+0x174>)
 800185a:	5cd3      	ldrb	r3, [r2, r3]
 800185c:	b2db      	uxtb	r3, r3
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	2b00      	cmp	r3, #0
 8001864:	d014      	beq.n	8001890 <ASTAT_RxXferBlockCpltHandler+0x9c>
						AUDIO_STATUS_L_HALF_PENDING))
				{
					SET_BIT(ASTAT_rxStatus[currChIndex],
 8001866:	79bb      	ldrb	r3, [r7, #6]
 8001868:	4a3f      	ldr	r2, [pc, #252]	@ (8001968 <ASTAT_RxXferBlockCpltHandler+0x174>)
 800186a:	5cd3      	ldrb	r3, [r2, r3]
 800186c:	b2da      	uxtb	r2, r3
 800186e:	79bb      	ldrb	r3, [r7, #6]
 8001870:	f042 0202 	orr.w	r2, r2, #2
 8001874:	b2d1      	uxtb	r1, r2
 8001876:	4a3c      	ldr	r2, [pc, #240]	@ (8001968 <ASTAT_RxXferBlockCpltHandler+0x174>)
 8001878:	54d1      	strb	r1, [r2, r3]
							AUDIO_STATUS_L_HALF_CPLT);
					CLEAR_BIT(ASTAT_rxStatus[currChIndex],
 800187a:	79bb      	ldrb	r3, [r7, #6]
 800187c:	4a3a      	ldr	r2, [pc, #232]	@ (8001968 <ASTAT_RxXferBlockCpltHandler+0x174>)
 800187e:	5cd3      	ldrb	r3, [r2, r3]
 8001880:	b2da      	uxtb	r2, r3
 8001882:	79bb      	ldrb	r3, [r7, #6]
 8001884:	f022 0201 	bic.w	r2, r2, #1
 8001888:	b2d1      	uxtb	r1, r2
 800188a:	4a37      	ldr	r2, [pc, #220]	@ (8001968 <ASTAT_RxXferBlockCpltHandler+0x174>)
 800188c:	54d1      	strb	r1, [r2, r3]
				}
			}
		}

	}
}
 800188e:	e064      	b.n	800195a <ASTAT_RxXferBlockCpltHandler+0x166>
					Error_Handler();
 8001890:	f000 ffa4 	bl	80027dc <Error_Handler>
}
 8001894:	e061      	b.n	800195a <ASTAT_RxXferBlockCpltHandler+0x166>
				if (READ_BIT(ASTAT_rxStatus[currChIndex],
 8001896:	79bb      	ldrb	r3, [r7, #6]
 8001898:	4a33      	ldr	r2, [pc, #204]	@ (8001968 <ASTAT_RxXferBlockCpltHandler+0x174>)
 800189a:	5cd3      	ldrb	r3, [r2, r3]
 800189c:	b2db      	uxtb	r3, r3
 800189e:	f003 0304 	and.w	r3, r3, #4
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d014      	beq.n	80018d0 <ASTAT_RxXferBlockCpltHandler+0xdc>
					SET_BIT(ASTAT_rxStatus[currChIndex],
 80018a6:	79bb      	ldrb	r3, [r7, #6]
 80018a8:	4a2f      	ldr	r2, [pc, #188]	@ (8001968 <ASTAT_RxXferBlockCpltHandler+0x174>)
 80018aa:	5cd3      	ldrb	r3, [r2, r3]
 80018ac:	b2da      	uxtb	r2, r3
 80018ae:	79bb      	ldrb	r3, [r7, #6]
 80018b0:	f042 0208 	orr.w	r2, r2, #8
 80018b4:	b2d1      	uxtb	r1, r2
 80018b6:	4a2c      	ldr	r2, [pc, #176]	@ (8001968 <ASTAT_RxXferBlockCpltHandler+0x174>)
 80018b8:	54d1      	strb	r1, [r2, r3]
					CLEAR_BIT(ASTAT_rxStatus[currChIndex],
 80018ba:	79bb      	ldrb	r3, [r7, #6]
 80018bc:	4a2a      	ldr	r2, [pc, #168]	@ (8001968 <ASTAT_RxXferBlockCpltHandler+0x174>)
 80018be:	5cd3      	ldrb	r3, [r2, r3]
 80018c0:	b2da      	uxtb	r2, r3
 80018c2:	79bb      	ldrb	r3, [r7, #6]
 80018c4:	f022 0204 	bic.w	r2, r2, #4
 80018c8:	b2d1      	uxtb	r1, r2
 80018ca:	4a27      	ldr	r2, [pc, #156]	@ (8001968 <ASTAT_RxXferBlockCpltHandler+0x174>)
 80018cc:	54d1      	strb	r1, [r2, r3]
}
 80018ce:	e044      	b.n	800195a <ASTAT_RxXferBlockCpltHandler+0x166>
					Error_Handler();
 80018d0:	f000 ff84 	bl	80027dc <Error_Handler>
}
 80018d4:	e041      	b.n	800195a <ASTAT_RxXferBlockCpltHandler+0x166>
			if (isLeft)
 80018d6:	793b      	ldrb	r3, [r7, #4]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d01f      	beq.n	800191c <ASTAT_RxXferBlockCpltHandler+0x128>
				if (READ_BIT(ASTAT_rxStatus[currChIndex],
 80018dc:	79bb      	ldrb	r3, [r7, #6]
 80018de:	4a22      	ldr	r2, [pc, #136]	@ (8001968 <ASTAT_RxXferBlockCpltHandler+0x174>)
 80018e0:	5cd3      	ldrb	r3, [r2, r3]
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	f003 0310 	and.w	r3, r3, #16
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d014      	beq.n	8001916 <ASTAT_RxXferBlockCpltHandler+0x122>
					SET_BIT(ASTAT_rxStatus[currChIndex], AUDIO_STATUS_L_CPLT);
 80018ec:	79bb      	ldrb	r3, [r7, #6]
 80018ee:	4a1e      	ldr	r2, [pc, #120]	@ (8001968 <ASTAT_RxXferBlockCpltHandler+0x174>)
 80018f0:	5cd3      	ldrb	r3, [r2, r3]
 80018f2:	b2da      	uxtb	r2, r3
 80018f4:	79bb      	ldrb	r3, [r7, #6]
 80018f6:	f042 0220 	orr.w	r2, r2, #32
 80018fa:	b2d1      	uxtb	r1, r2
 80018fc:	4a1a      	ldr	r2, [pc, #104]	@ (8001968 <ASTAT_RxXferBlockCpltHandler+0x174>)
 80018fe:	54d1      	strb	r1, [r2, r3]
					CLEAR_BIT(ASTAT_rxStatus[currChIndex],
 8001900:	79bb      	ldrb	r3, [r7, #6]
 8001902:	4a19      	ldr	r2, [pc, #100]	@ (8001968 <ASTAT_RxXferBlockCpltHandler+0x174>)
 8001904:	5cd3      	ldrb	r3, [r2, r3]
 8001906:	b2da      	uxtb	r2, r3
 8001908:	79bb      	ldrb	r3, [r7, #6]
 800190a:	f022 0210 	bic.w	r2, r2, #16
 800190e:	b2d1      	uxtb	r1, r2
 8001910:	4a15      	ldr	r2, [pc, #84]	@ (8001968 <ASTAT_RxXferBlockCpltHandler+0x174>)
 8001912:	54d1      	strb	r1, [r2, r3]
}
 8001914:	e021      	b.n	800195a <ASTAT_RxXferBlockCpltHandler+0x166>
					Error_Handler();
 8001916:	f000 ff61 	bl	80027dc <Error_Handler>
}
 800191a:	e01e      	b.n	800195a <ASTAT_RxXferBlockCpltHandler+0x166>
				if (READ_BIT(ASTAT_rxStatus[currChIndex],
 800191c:	79bb      	ldrb	r3, [r7, #6]
 800191e:	4a12      	ldr	r2, [pc, #72]	@ (8001968 <ASTAT_RxXferBlockCpltHandler+0x174>)
 8001920:	5cd3      	ldrb	r3, [r2, r3]
 8001922:	b2db      	uxtb	r3, r3
 8001924:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001928:	2b00      	cmp	r3, #0
 800192a:	d014      	beq.n	8001956 <ASTAT_RxXferBlockCpltHandler+0x162>
					SET_BIT(ASTAT_rxStatus[currChIndex], AUDIO_STATUS_R_CPLT);
 800192c:	79bb      	ldrb	r3, [r7, #6]
 800192e:	4a0e      	ldr	r2, [pc, #56]	@ (8001968 <ASTAT_RxXferBlockCpltHandler+0x174>)
 8001930:	5cd3      	ldrb	r3, [r2, r3]
 8001932:	b2da      	uxtb	r2, r3
 8001934:	79bb      	ldrb	r3, [r7, #6]
 8001936:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800193a:	b2d1      	uxtb	r1, r2
 800193c:	4a0a      	ldr	r2, [pc, #40]	@ (8001968 <ASTAT_RxXferBlockCpltHandler+0x174>)
 800193e:	54d1      	strb	r1, [r2, r3]
					CLEAR_BIT(ASTAT_rxStatus[currChIndex],
 8001940:	79bb      	ldrb	r3, [r7, #6]
 8001942:	4a09      	ldr	r2, [pc, #36]	@ (8001968 <ASTAT_RxXferBlockCpltHandler+0x174>)
 8001944:	5cd3      	ldrb	r3, [r2, r3]
 8001946:	b2da      	uxtb	r2, r3
 8001948:	79bb      	ldrb	r3, [r7, #6]
 800194a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800194e:	b2d1      	uxtb	r1, r2
 8001950:	4a05      	ldr	r2, [pc, #20]	@ (8001968 <ASTAT_RxXferBlockCpltHandler+0x174>)
 8001952:	54d1      	strb	r1, [r2, r3]
}
 8001954:	e001      	b.n	800195a <ASTAT_RxXferBlockCpltHandler+0x166>
					Error_Handler();
 8001956:	f000 ff41 	bl	80027dc <Error_Handler>
}
 800195a:	bf00      	nop
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	24000884 	.word	0x24000884
 8001968:	24000870 	.word	0x24000870

0800196c <ASTAT_TxXferBlockCpltHandler>:

void ASTAT_TxXferBlockCpltHandler(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
	if (ASTAT_isTxTransferComplete)
 8001972:	4b5a      	ldr	r3, [pc, #360]	@ (8001adc <ASTAT_TxXferBlockCpltHandler+0x170>)
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	b2db      	uxtb	r3, r3
 8001978:	2b00      	cmp	r3, #0
 800197a:	f000 80aa 	beq.w	8001ad2 <ASTAT_TxXferBlockCpltHandler+0x166>
	{
		ASTAT_isTxTransferComplete = false;
 800197e:	4b57      	ldr	r3, [pc, #348]	@ (8001adc <ASTAT_TxXferBlockCpltHandler+0x170>)
 8001980:	2200      	movs	r2, #0
 8001982:	701a      	strb	r2, [r3, #0]

		uint8_t currNodeIndex = MDMA_getCurrentTxChIndex();
 8001984:	f001 fbc6 	bl	8003114 <MDMA_getCurrentTxChIndex>
 8001988:	4603      	mov	r3, r0
 800198a:	717b      	strb	r3, [r7, #5]

		bool isFirstHalf = false;
 800198c:	2300      	movs	r3, #0
 800198e:	71fb      	strb	r3, [r7, #7]
		uint8_t currChIndex;
		if (currNodeIndex / 2 < AUDIO_STEREO_CHANNEL_COUNT)
 8001990:	797b      	ldrb	r3, [r7, #5]
 8001992:	2b01      	cmp	r3, #1
 8001994:	d805      	bhi.n	80019a2 <ASTAT_TxXferBlockCpltHandler+0x36>
		{
			currChIndex = currNodeIndex / 2 ;
 8001996:	797b      	ldrb	r3, [r7, #5]
 8001998:	085b      	lsrs	r3, r3, #1
 800199a:	71bb      	strb	r3, [r7, #6]
			isFirstHalf = true;
 800199c:	2301      	movs	r3, #1
 800199e:	71fb      	strb	r3, [r7, #7]
 80019a0:	e006      	b.n	80019b0 <ASTAT_TxXferBlockCpltHandler+0x44>
		}
		else
		{
			currChIndex = (currNodeIndex - AUDIO_CHANNEL_COUNT) / 2;
 80019a2:	797b      	ldrb	r3, [r7, #5]
 80019a4:	3b02      	subs	r3, #2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	da00      	bge.n	80019ac <ASTAT_TxXferBlockCpltHandler+0x40>
 80019aa:	3301      	adds	r3, #1
 80019ac:	105b      	asrs	r3, r3, #1
 80019ae:	71bb      	strb	r3, [r7, #6]
		}

		bool isLeft = (currNodeIndex % 2) == 0;
 80019b0:	797b      	ldrb	r3, [r7, #5]
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	bf0c      	ite	eq
 80019bc:	2301      	moveq	r3, #1
 80019be:	2300      	movne	r3, #0
 80019c0:	713b      	strb	r3, [r7, #4]

		if (isFirstHalf)
 80019c2:	79fb      	ldrb	r3, [r7, #7]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d042      	beq.n	8001a4e <ASTAT_TxXferBlockCpltHandler+0xe2>
		{
			if (isLeft)
 80019c8:	793b      	ldrb	r3, [r7, #4]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d01f      	beq.n	8001a0e <ASTAT_TxXferBlockCpltHandler+0xa2>
			{
				if (READ_BIT(ASTAT_txStatus[currChIndex],
 80019ce:	79bb      	ldrb	r3, [r7, #6]
 80019d0:	4a43      	ldr	r2, [pc, #268]	@ (8001ae0 <ASTAT_TxXferBlockCpltHandler+0x174>)
 80019d2:	5cd3      	ldrb	r3, [r2, r3]
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d014      	beq.n	8001a08 <ASTAT_TxXferBlockCpltHandler+0x9c>
						AUDIO_STATUS_L_HALF_PENDING))
				{
					SET_BIT(ASTAT_txStatus[currChIndex],
 80019de:	79bb      	ldrb	r3, [r7, #6]
 80019e0:	4a3f      	ldr	r2, [pc, #252]	@ (8001ae0 <ASTAT_TxXferBlockCpltHandler+0x174>)
 80019e2:	5cd3      	ldrb	r3, [r2, r3]
 80019e4:	b2da      	uxtb	r2, r3
 80019e6:	79bb      	ldrb	r3, [r7, #6]
 80019e8:	f042 0202 	orr.w	r2, r2, #2
 80019ec:	b2d1      	uxtb	r1, r2
 80019ee:	4a3c      	ldr	r2, [pc, #240]	@ (8001ae0 <ASTAT_TxXferBlockCpltHandler+0x174>)
 80019f0:	54d1      	strb	r1, [r2, r3]
							AUDIO_STATUS_L_HALF_CPLT);
					CLEAR_BIT(ASTAT_txStatus[currChIndex],
 80019f2:	79bb      	ldrb	r3, [r7, #6]
 80019f4:	4a3a      	ldr	r2, [pc, #232]	@ (8001ae0 <ASTAT_TxXferBlockCpltHandler+0x174>)
 80019f6:	5cd3      	ldrb	r3, [r2, r3]
 80019f8:	b2da      	uxtb	r2, r3
 80019fa:	79bb      	ldrb	r3, [r7, #6]
 80019fc:	f022 0201 	bic.w	r2, r2, #1
 8001a00:	b2d1      	uxtb	r1, r2
 8001a02:	4a37      	ldr	r2, [pc, #220]	@ (8001ae0 <ASTAT_TxXferBlockCpltHandler+0x174>)
 8001a04:	54d1      	strb	r1, [r2, r3]
				}
			}

		}
	}
}
 8001a06:	e064      	b.n	8001ad2 <ASTAT_TxXferBlockCpltHandler+0x166>
					Error_Handler();
 8001a08:	f000 fee8 	bl	80027dc <Error_Handler>
}
 8001a0c:	e061      	b.n	8001ad2 <ASTAT_TxXferBlockCpltHandler+0x166>
				if (READ_BIT(ASTAT_txStatus[currChIndex],
 8001a0e:	79bb      	ldrb	r3, [r7, #6]
 8001a10:	4a33      	ldr	r2, [pc, #204]	@ (8001ae0 <ASTAT_TxXferBlockCpltHandler+0x174>)
 8001a12:	5cd3      	ldrb	r3, [r2, r3]
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	f003 0304 	and.w	r3, r3, #4
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d014      	beq.n	8001a48 <ASTAT_TxXferBlockCpltHandler+0xdc>
					SET_BIT(ASTAT_txStatus[currChIndex],
 8001a1e:	79bb      	ldrb	r3, [r7, #6]
 8001a20:	4a2f      	ldr	r2, [pc, #188]	@ (8001ae0 <ASTAT_TxXferBlockCpltHandler+0x174>)
 8001a22:	5cd3      	ldrb	r3, [r2, r3]
 8001a24:	b2da      	uxtb	r2, r3
 8001a26:	79bb      	ldrb	r3, [r7, #6]
 8001a28:	f042 0208 	orr.w	r2, r2, #8
 8001a2c:	b2d1      	uxtb	r1, r2
 8001a2e:	4a2c      	ldr	r2, [pc, #176]	@ (8001ae0 <ASTAT_TxXferBlockCpltHandler+0x174>)
 8001a30:	54d1      	strb	r1, [r2, r3]
					CLEAR_BIT(ASTAT_txStatus[currChIndex],
 8001a32:	79bb      	ldrb	r3, [r7, #6]
 8001a34:	4a2a      	ldr	r2, [pc, #168]	@ (8001ae0 <ASTAT_TxXferBlockCpltHandler+0x174>)
 8001a36:	5cd3      	ldrb	r3, [r2, r3]
 8001a38:	b2da      	uxtb	r2, r3
 8001a3a:	79bb      	ldrb	r3, [r7, #6]
 8001a3c:	f022 0204 	bic.w	r2, r2, #4
 8001a40:	b2d1      	uxtb	r1, r2
 8001a42:	4a27      	ldr	r2, [pc, #156]	@ (8001ae0 <ASTAT_TxXferBlockCpltHandler+0x174>)
 8001a44:	54d1      	strb	r1, [r2, r3]
}
 8001a46:	e044      	b.n	8001ad2 <ASTAT_TxXferBlockCpltHandler+0x166>
					Error_Handler();
 8001a48:	f000 fec8 	bl	80027dc <Error_Handler>
}
 8001a4c:	e041      	b.n	8001ad2 <ASTAT_TxXferBlockCpltHandler+0x166>
			if (isLeft)
 8001a4e:	793b      	ldrb	r3, [r7, #4]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d01f      	beq.n	8001a94 <ASTAT_TxXferBlockCpltHandler+0x128>
				if (READ_BIT(ASTAT_txStatus[currChIndex],
 8001a54:	79bb      	ldrb	r3, [r7, #6]
 8001a56:	4a22      	ldr	r2, [pc, #136]	@ (8001ae0 <ASTAT_TxXferBlockCpltHandler+0x174>)
 8001a58:	5cd3      	ldrb	r3, [r2, r3]
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	f003 0310 	and.w	r3, r3, #16
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d014      	beq.n	8001a8e <ASTAT_TxXferBlockCpltHandler+0x122>
					SET_BIT(ASTAT_txStatus[currChIndex], AUDIO_STATUS_L_CPLT);
 8001a64:	79bb      	ldrb	r3, [r7, #6]
 8001a66:	4a1e      	ldr	r2, [pc, #120]	@ (8001ae0 <ASTAT_TxXferBlockCpltHandler+0x174>)
 8001a68:	5cd3      	ldrb	r3, [r2, r3]
 8001a6a:	b2da      	uxtb	r2, r3
 8001a6c:	79bb      	ldrb	r3, [r7, #6]
 8001a6e:	f042 0220 	orr.w	r2, r2, #32
 8001a72:	b2d1      	uxtb	r1, r2
 8001a74:	4a1a      	ldr	r2, [pc, #104]	@ (8001ae0 <ASTAT_TxXferBlockCpltHandler+0x174>)
 8001a76:	54d1      	strb	r1, [r2, r3]
					CLEAR_BIT(ASTAT_txStatus[currChIndex],
 8001a78:	79bb      	ldrb	r3, [r7, #6]
 8001a7a:	4a19      	ldr	r2, [pc, #100]	@ (8001ae0 <ASTAT_TxXferBlockCpltHandler+0x174>)
 8001a7c:	5cd3      	ldrb	r3, [r2, r3]
 8001a7e:	b2da      	uxtb	r2, r3
 8001a80:	79bb      	ldrb	r3, [r7, #6]
 8001a82:	f022 0210 	bic.w	r2, r2, #16
 8001a86:	b2d1      	uxtb	r1, r2
 8001a88:	4a15      	ldr	r2, [pc, #84]	@ (8001ae0 <ASTAT_TxXferBlockCpltHandler+0x174>)
 8001a8a:	54d1      	strb	r1, [r2, r3]
}
 8001a8c:	e021      	b.n	8001ad2 <ASTAT_TxXferBlockCpltHandler+0x166>
					Error_Handler();
 8001a8e:	f000 fea5 	bl	80027dc <Error_Handler>
}
 8001a92:	e01e      	b.n	8001ad2 <ASTAT_TxXferBlockCpltHandler+0x166>
				if (READ_BIT(ASTAT_txStatus[currChIndex],
 8001a94:	79bb      	ldrb	r3, [r7, #6]
 8001a96:	4a12      	ldr	r2, [pc, #72]	@ (8001ae0 <ASTAT_TxXferBlockCpltHandler+0x174>)
 8001a98:	5cd3      	ldrb	r3, [r2, r3]
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d014      	beq.n	8001ace <ASTAT_TxXferBlockCpltHandler+0x162>
					SET_BIT(ASTAT_txStatus[currChIndex], AUDIO_STATUS_R_CPLT);
 8001aa4:	79bb      	ldrb	r3, [r7, #6]
 8001aa6:	4a0e      	ldr	r2, [pc, #56]	@ (8001ae0 <ASTAT_TxXferBlockCpltHandler+0x174>)
 8001aa8:	5cd3      	ldrb	r3, [r2, r3]
 8001aaa:	b2da      	uxtb	r2, r3
 8001aac:	79bb      	ldrb	r3, [r7, #6]
 8001aae:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001ab2:	b2d1      	uxtb	r1, r2
 8001ab4:	4a0a      	ldr	r2, [pc, #40]	@ (8001ae0 <ASTAT_TxXferBlockCpltHandler+0x174>)
 8001ab6:	54d1      	strb	r1, [r2, r3]
					CLEAR_BIT(ASTAT_txStatus[currChIndex],
 8001ab8:	79bb      	ldrb	r3, [r7, #6]
 8001aba:	4a09      	ldr	r2, [pc, #36]	@ (8001ae0 <ASTAT_TxXferBlockCpltHandler+0x174>)
 8001abc:	5cd3      	ldrb	r3, [r2, r3]
 8001abe:	b2da      	uxtb	r2, r3
 8001ac0:	79bb      	ldrb	r3, [r7, #6]
 8001ac2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001ac6:	b2d1      	uxtb	r1, r2
 8001ac8:	4a05      	ldr	r2, [pc, #20]	@ (8001ae0 <ASTAT_TxXferBlockCpltHandler+0x174>)
 8001aca:	54d1      	strb	r1, [r2, r3]
}
 8001acc:	e001      	b.n	8001ad2 <ASTAT_TxXferBlockCpltHandler+0x166>
					Error_Handler();
 8001ace:	f000 fe85 	bl	80027dc <Error_Handler>
}
 8001ad2:	bf00      	nop
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	24000885 	.word	0x24000885
 8001ae0:	24000878 	.word	0x24000878

08001ae4 <DSP_init>:
{ 0, -3, -8, 21, 70, 0, -221, -222, 345, 842, 0, -1848, -1737, 2851, 9745,
		13100, 9745, 2851, -1737, -1848, 0, 842, 345, -222, -221, 0, 70, 21, -8,
		-3, 0, 0 };

arm_status DSP_init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af02      	add	r7, sp, #8
	// Initialize DSP related components here
	arm_status filterStatus;
	for (size_t i = 0; i < AUDIO_STEREO_CHANNEL_COUNT; i++)
 8001aea:	2300      	movs	r3, #0
 8001aec:	603b      	str	r3, [r7, #0]
 8001aee:	e042      	b.n	8001b76 <DSP_init+0x92>
	{
		filterStatus = arm_fir_init_q15(&DSP_filters[i].firInstanceQ15_l,
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8001af6:	fb02 f303 	mul.w	r3, r2, r3
 8001afa:	4a23      	ldr	r2, [pc, #140]	@ (8001b88 <DSP_init+0xa4>)
 8001afc:	1898      	adds	r0, r3, r2
		NUM_TAPS, firCoeffsQ15, DSP_filters[i].firStateQ15_l,
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8001b04:	fb02 f303 	mul.w	r3, r2, r3
 8001b08:	3318      	adds	r3, #24
 8001b0a:	4a1f      	ldr	r2, [pc, #124]	@ (8001b88 <DSP_init+0xa4>)
 8001b0c:	4413      	add	r3, r2
		filterStatus = arm_fir_init_q15(&DSP_filters[i].firInstanceQ15_l,
 8001b0e:	2280      	movs	r2, #128	@ 0x80
 8001b10:	9200      	str	r2, [sp, #0]
 8001b12:	4a1e      	ldr	r2, [pc, #120]	@ (8001b8c <DSP_init+0xa8>)
 8001b14:	2120      	movs	r1, #32
 8001b16:	f00b fd39 	bl	800d58c <arm_fir_init_q15>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	71fb      	strb	r3, [r7, #7]
		AUDIO_BUFFER_LENGTH_HALF);

		if (filterStatus != ARM_MATH_SUCCESS)
 8001b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d002      	beq.n	8001b2c <DSP_init+0x48>
		{
			return filterStatus;
 8001b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2a:	e029      	b.n	8001b80 <DSP_init+0x9c>
		}

		filterStatus = arm_fir_init_q15(&DSP_filters[i].firInstanceQ15_r,
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8001b32:	fb02 f303 	mul.w	r3, r2, r3
 8001b36:	3308      	adds	r3, #8
 8001b38:	4a13      	ldr	r2, [pc, #76]	@ (8001b88 <DSP_init+0xa4>)
 8001b3a:	4413      	add	r3, r2
 8001b3c:	1d18      	adds	r0, r3, #4
		NUM_TAPS, firCoeffsQ15, DSP_filters[i].firStateQ15_r,
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8001b44:	fb02 f303 	mul.w	r3, r2, r3
 8001b48:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001b4c:	4a0e      	ldr	r2, [pc, #56]	@ (8001b88 <DSP_init+0xa4>)
 8001b4e:	4413      	add	r3, r2
 8001b50:	3306      	adds	r3, #6
		filterStatus = arm_fir_init_q15(&DSP_filters[i].firInstanceQ15_r,
 8001b52:	2280      	movs	r2, #128	@ 0x80
 8001b54:	9200      	str	r2, [sp, #0]
 8001b56:	4a0d      	ldr	r2, [pc, #52]	@ (8001b8c <DSP_init+0xa8>)
 8001b58:	2120      	movs	r1, #32
 8001b5a:	f00b fd17 	bl	800d58c <arm_fir_init_q15>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	71fb      	strb	r3, [r7, #7]
		AUDIO_BUFFER_LENGTH_HALF);
		if (filterStatus != ARM_MATH_SUCCESS)
 8001b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d002      	beq.n	8001b70 <DSP_init+0x8c>
		{
			return filterStatus;
 8001b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6e:	e007      	b.n	8001b80 <DSP_init+0x9c>
	for (size_t i = 0; i < AUDIO_STEREO_CHANNEL_COUNT; i++)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	3301      	adds	r3, #1
 8001b74:	603b      	str	r3, [r7, #0]
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d0b9      	beq.n	8001af0 <DSP_init+0xc>
		}
	}
	return filterStatus;
 8001b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	24000888 	.word	0x24000888
 8001b8c:	0800d64c 	.word	0x0800d64c

08001b90 <DSP_process>:

void DSP_process(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
	for (size_t i = 0; i < AUDIO_STEREO_CHANNEL_COUNT; i++)
 8001b96:	2300      	movs	r3, #0
 8001b98:	607b      	str	r3, [r7, #4]
 8001b9a:	e0ec      	b.n	8001d76 <DSP_process+0x1e6>
	{
		if (READ_BIT(ASTAT_dspStatus[i], AUDIO_STATUS_L_HALF_PENDING))
 8001b9c:	4a7a      	ldr	r2, [pc, #488]	@ (8001d88 <DSP_process+0x1f8>)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d02f      	beq.n	8001c0e <DSP_process+0x7e>
		{

			arm_fir_q15(&DSP_filters[i].firInstanceQ15_l,
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8001bb4:	fb02 f303 	mul.w	r3, r2, r3
 8001bb8:	4a74      	ldr	r2, [pc, #464]	@ (8001d8c <DSP_process+0x1fc>)
 8001bba:	1898      	adds	r0, r3, r2
					(q15_t*) ABUF_audioBufferPtrs[i].leftRxFirstHalf,
 8001bbc:	4a74      	ldr	r2, [pc, #464]	@ (8001d90 <DSP_process+0x200>)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	015b      	lsls	r3, r3, #5
 8001bc2:	4413      	add	r3, r2
 8001bc4:	6819      	ldr	r1, [r3, #0]
					(q15_t*) ABUF_audioBufferPtrs[i].leftTxFirstHalf,
 8001bc6:	4a72      	ldr	r2, [pc, #456]	@ (8001d90 <DSP_process+0x200>)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	015b      	lsls	r3, r3, #5
 8001bcc:	4413      	add	r3, r2
 8001bce:	3310      	adds	r3, #16
 8001bd0:	681a      	ldr	r2, [r3, #0]
			arm_fir_q15(&DSP_filters[i].firInstanceQ15_l,
 8001bd2:	2380      	movs	r3, #128	@ 0x80
 8001bd4:	f00b fb22 	bl	800d21c <arm_fir_q15>
					AUDIO_BUFFER_LENGTH_HALF);

			CLEAR_BIT(ASTAT_dspStatus[i], AUDIO_STATUS_L_HALF_PENDING);
 8001bd8:	4a6b      	ldr	r2, [pc, #428]	@ (8001d88 <DSP_process+0x1f8>)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4413      	add	r3, r2
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	f023 0301 	bic.w	r3, r3, #1
 8001be6:	b2d9      	uxtb	r1, r3
 8001be8:	4a67      	ldr	r2, [pc, #412]	@ (8001d88 <DSP_process+0x1f8>)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4413      	add	r3, r2
 8001bee:	460a      	mov	r2, r1
 8001bf0:	701a      	strb	r2, [r3, #0]
			SET_BIT(ASTAT_dspStatus[i], AUDIO_STATUS_L_HALF_CPLT);
 8001bf2:	4a65      	ldr	r2, [pc, #404]	@ (8001d88 <DSP_process+0x1f8>)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	f043 0302 	orr.w	r3, r3, #2
 8001c00:	b2d9      	uxtb	r1, r3
 8001c02:	4a61      	ldr	r2, [pc, #388]	@ (8001d88 <DSP_process+0x1f8>)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4413      	add	r3, r2
 8001c08:	460a      	mov	r2, r1
 8001c0a:	701a      	strb	r2, [r3, #0]
 8001c0c:	e0b0      	b.n	8001d70 <DSP_process+0x1e0>
		}
		else if (READ_BIT(ASTAT_dspStatus[i], AUDIO_STATUS_R_HALF_PENDING))
 8001c0e:	4a5e      	ldr	r2, [pc, #376]	@ (8001d88 <DSP_process+0x1f8>)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	4413      	add	r3, r2
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	f003 0304 	and.w	r3, r3, #4
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d032      	beq.n	8001c86 <DSP_process+0xf6>
		{

			arm_fir_q15(&DSP_filters[i].firInstanceQ15_r,
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8001c26:	fb02 f303 	mul.w	r3, r2, r3
 8001c2a:	3308      	adds	r3, #8
 8001c2c:	4a57      	ldr	r2, [pc, #348]	@ (8001d8c <DSP_process+0x1fc>)
 8001c2e:	4413      	add	r3, r2
 8001c30:	1d18      	adds	r0, r3, #4
					(q15_t*) ABUF_audioBufferPtrs[i].rightRxFirstHalf,
 8001c32:	4a57      	ldr	r2, [pc, #348]	@ (8001d90 <DSP_process+0x200>)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	015b      	lsls	r3, r3, #5
 8001c38:	4413      	add	r3, r2
 8001c3a:	3304      	adds	r3, #4
 8001c3c:	6819      	ldr	r1, [r3, #0]
					(q15_t*) ABUF_audioBufferPtrs[i].rightTxFirstHalf,
 8001c3e:	4a54      	ldr	r2, [pc, #336]	@ (8001d90 <DSP_process+0x200>)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	015b      	lsls	r3, r3, #5
 8001c44:	4413      	add	r3, r2
 8001c46:	3314      	adds	r3, #20
 8001c48:	681a      	ldr	r2, [r3, #0]
			arm_fir_q15(&DSP_filters[i].firInstanceQ15_r,
 8001c4a:	2380      	movs	r3, #128	@ 0x80
 8001c4c:	f00b fae6 	bl	800d21c <arm_fir_q15>
					AUDIO_BUFFER_LENGTH_HALF);

			CLEAR_BIT(ASTAT_dspStatus[i], AUDIO_STATUS_R_HALF_PENDING);
 8001c50:	4a4d      	ldr	r2, [pc, #308]	@ (8001d88 <DSP_process+0x1f8>)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4413      	add	r3, r2
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	f023 0304 	bic.w	r3, r3, #4
 8001c5e:	b2d9      	uxtb	r1, r3
 8001c60:	4a49      	ldr	r2, [pc, #292]	@ (8001d88 <DSP_process+0x1f8>)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4413      	add	r3, r2
 8001c66:	460a      	mov	r2, r1
 8001c68:	701a      	strb	r2, [r3, #0]
			SET_BIT(ASTAT_dspStatus[i], AUDIO_STATUS_R_HALF_CPLT);
 8001c6a:	4a47      	ldr	r2, [pc, #284]	@ (8001d88 <DSP_process+0x1f8>)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	4413      	add	r3, r2
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	f043 0308 	orr.w	r3, r3, #8
 8001c78:	b2d9      	uxtb	r1, r3
 8001c7a:	4a43      	ldr	r2, [pc, #268]	@ (8001d88 <DSP_process+0x1f8>)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4413      	add	r3, r2
 8001c80:	460a      	mov	r2, r1
 8001c82:	701a      	strb	r2, [r3, #0]
 8001c84:	e074      	b.n	8001d70 <DSP_process+0x1e0>
		}
		else if (READ_BIT(ASTAT_dspStatus[i], AUDIO_STATUS_L_PENDING))
 8001c86:	4a40      	ldr	r2, [pc, #256]	@ (8001d88 <DSP_process+0x1f8>)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	f003 0310 	and.w	r3, r3, #16
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d030      	beq.n	8001cfa <DSP_process+0x16a>
		{

			arm_fir_q15(&DSP_filters[i].firInstanceQ15_l,
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8001c9e:	fb02 f303 	mul.w	r3, r2, r3
 8001ca2:	4a3a      	ldr	r2, [pc, #232]	@ (8001d8c <DSP_process+0x1fc>)
 8001ca4:	1898      	adds	r0, r3, r2
					(q15_t*) ABUF_audioBufferPtrs[i].leftRxSecHalf,
 8001ca6:	4a3a      	ldr	r2, [pc, #232]	@ (8001d90 <DSP_process+0x200>)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	015b      	lsls	r3, r3, #5
 8001cac:	4413      	add	r3, r2
 8001cae:	3308      	adds	r3, #8
 8001cb0:	6819      	ldr	r1, [r3, #0]
					(q15_t*) ABUF_audioBufferPtrs[i].leftTxSecHalf,
 8001cb2:	4a37      	ldr	r2, [pc, #220]	@ (8001d90 <DSP_process+0x200>)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	015b      	lsls	r3, r3, #5
 8001cb8:	4413      	add	r3, r2
 8001cba:	3318      	adds	r3, #24
 8001cbc:	681a      	ldr	r2, [r3, #0]
			arm_fir_q15(&DSP_filters[i].firInstanceQ15_l,
 8001cbe:	2380      	movs	r3, #128	@ 0x80
 8001cc0:	f00b faac 	bl	800d21c <arm_fir_q15>
					AUDIO_BUFFER_LENGTH_HALF);

			CLEAR_BIT(ASTAT_dspStatus[i], AUDIO_STATUS_L_PENDING);
 8001cc4:	4a30      	ldr	r2, [pc, #192]	@ (8001d88 <DSP_process+0x1f8>)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4413      	add	r3, r2
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	f023 0310 	bic.w	r3, r3, #16
 8001cd2:	b2d9      	uxtb	r1, r3
 8001cd4:	4a2c      	ldr	r2, [pc, #176]	@ (8001d88 <DSP_process+0x1f8>)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4413      	add	r3, r2
 8001cda:	460a      	mov	r2, r1
 8001cdc:	701a      	strb	r2, [r3, #0]
			SET_BIT(ASTAT_dspStatus[i], AUDIO_STATUS_L_CPLT);
 8001cde:	4a2a      	ldr	r2, [pc, #168]	@ (8001d88 <DSP_process+0x1f8>)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	f043 0320 	orr.w	r3, r3, #32
 8001cec:	b2d9      	uxtb	r1, r3
 8001cee:	4a26      	ldr	r2, [pc, #152]	@ (8001d88 <DSP_process+0x1f8>)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	460a      	mov	r2, r1
 8001cf6:	701a      	strb	r2, [r3, #0]
 8001cf8:	e03a      	b.n	8001d70 <DSP_process+0x1e0>
		}
		else if (READ_BIT(ASTAT_dspStatus[i], AUDIO_STATUS_R_PENDING))
 8001cfa:	4a23      	ldr	r2, [pc, #140]	@ (8001d88 <DSP_process+0x1f8>)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	4413      	add	r3, r2
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d031      	beq.n	8001d70 <DSP_process+0x1e0>
		{

			arm_fir_q15(&DSP_filters[i].firInstanceQ15_r,
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8001d12:	fb02 f303 	mul.w	r3, r2, r3
 8001d16:	3308      	adds	r3, #8
 8001d18:	4a1c      	ldr	r2, [pc, #112]	@ (8001d8c <DSP_process+0x1fc>)
 8001d1a:	4413      	add	r3, r2
 8001d1c:	1d18      	adds	r0, r3, #4
					(q15_t*) ABUF_audioBufferPtrs[i].rightRxFirstHalf,
 8001d1e:	4a1c      	ldr	r2, [pc, #112]	@ (8001d90 <DSP_process+0x200>)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	015b      	lsls	r3, r3, #5
 8001d24:	4413      	add	r3, r2
 8001d26:	3304      	adds	r3, #4
 8001d28:	6819      	ldr	r1, [r3, #0]
					(q15_t*) ABUF_audioBufferPtrs[i].rightTxFirstHalf,
 8001d2a:	4a19      	ldr	r2, [pc, #100]	@ (8001d90 <DSP_process+0x200>)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	015b      	lsls	r3, r3, #5
 8001d30:	4413      	add	r3, r2
 8001d32:	3314      	adds	r3, #20
 8001d34:	681a      	ldr	r2, [r3, #0]
			arm_fir_q15(&DSP_filters[i].firInstanceQ15_r,
 8001d36:	2380      	movs	r3, #128	@ 0x80
 8001d38:	f00b fa70 	bl	800d21c <arm_fir_q15>
					AUDIO_BUFFER_LENGTH_HALF);

			CLEAR_BIT(ASTAT_dspStatus[i], AUDIO_STATUS_R_PENDING);
 8001d3c:	4a12      	ldr	r2, [pc, #72]	@ (8001d88 <DSP_process+0x1f8>)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4413      	add	r3, r2
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001d4a:	b2d9      	uxtb	r1, r3
 8001d4c:	4a0e      	ldr	r2, [pc, #56]	@ (8001d88 <DSP_process+0x1f8>)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4413      	add	r3, r2
 8001d52:	460a      	mov	r2, r1
 8001d54:	701a      	strb	r2, [r3, #0]
			SET_BIT(ASTAT_dspStatus[i], AUDIO_STATUS_R_CPLT);
 8001d56:	4a0c      	ldr	r2, [pc, #48]	@ (8001d88 <DSP_process+0x1f8>)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001d64:	b2d9      	uxtb	r1, r3
 8001d66:	4a08      	ldr	r2, [pc, #32]	@ (8001d88 <DSP_process+0x1f8>)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	460a      	mov	r2, r1
 8001d6e:	701a      	strb	r2, [r3, #0]
	for (size_t i = 0; i < AUDIO_STEREO_CHANNEL_COUNT; i++)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	3301      	adds	r3, #1
 8001d74:	607b      	str	r3, [r7, #4]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	f43f af0f 	beq.w	8001b9c <DSP_process+0xc>
		}
	}
}
 8001d7e:	bf00      	nop
 8001d80:	bf00      	nop
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	24000874 	.word	0x24000874
 8001d8c:	24000888 	.word	0x24000888
 8001d90:	24000850 	.word	0x24000850

08001d94 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
	/* USER CODE END Boot_Mode_Sequence_0 */

	/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/

	timeout = 0xFFFF;
 8001d9a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001d9e:	60fb      	str	r3, [r7, #12]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0))
 8001da0:	bf00      	nop
 8001da2:	4b56      	ldr	r3, [pc, #344]	@ (8001efc <main+0x168>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d004      	beq.n	8001db8 <main+0x24>
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	1e5a      	subs	r2, r3, #1
 8001db2:	60fa      	str	r2, [r7, #12]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	dcf4      	bgt.n	8001da2 <main+0xe>
		;
	if (timeout < 0)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	da01      	bge.n	8001dc2 <main+0x2e>
	{
		Error_Handler();
 8001dbe:	f000 fd0d 	bl	80027dc <Error_Handler>
	}
	/* USER CODE END Boot_Mode_Sequence_1 */
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001dc2:	f001 fc43 	bl	800364c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001dc6:	f000 f8ad 	bl	8001f24 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 8001dca:	f000 f929 	bl	8002020 <PeriphCommonClock_Config>
	/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
	 HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8001dce:	4b4b      	ldr	r3, [pc, #300]	@ (8001efc <main+0x168>)
 8001dd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dd4:	4a49      	ldr	r2, [pc, #292]	@ (8001efc <main+0x168>)
 8001dd6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001dda:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001dde:	4b47      	ldr	r3, [pc, #284]	@ (8001efc <main+0x168>)
 8001de0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001de4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001de8:	607b      	str	r3, [r7, #4]
 8001dea:	687b      	ldr	r3, [r7, #4]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8001dec:	2000      	movs	r0, #0
 8001dee:	f004 f973 	bl	80060d8 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0, 0);
 8001df2:	2100      	movs	r1, #0
 8001df4:	2000      	movs	r0, #0
 8001df6:	f004 f989 	bl	800610c <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 8001dfa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001dfe:	60fb      	str	r3, [r7, #12]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0))
 8001e00:	bf00      	nop
 8001e02:	4b3e      	ldr	r3, [pc, #248]	@ (8001efc <main+0x168>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d104      	bne.n	8001e18 <main+0x84>
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	1e5a      	subs	r2, r3, #1
 8001e12:	60fa      	str	r2, [r7, #12]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	dcf4      	bgt.n	8001e02 <main+0x6e>
		;
	if (timeout < 0)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	da01      	bge.n	8001e22 <main+0x8e>
	{
		Error_Handler();
 8001e1e:	f000 fcdd 	bl	80027dc <Error_Handler>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001e22:	f000 fa41 	bl	80022a8 <MX_GPIO_Init>
	MX_DMA_Init();
 8001e26:	f000 fa17 	bl	8002258 <MX_DMA_Init>
	MX_USART3_UART_Init();
 8001e2a:	f000 f9c9 	bl	80021c0 <MX_USART3_UART_Init>
	MX_I2C2_Init();
 8001e2e:	f000 f927 	bl	8002080 <MX_I2C2_Init>
	MX_SAI1_Init();
 8001e32:	f000 f963 	bl	80020fc <MX_SAI1_Init>
	/* USER CODE BEGIN 2 */
	HAL_StatusTypeDef status;

	status = codecSetup();
 8001e36:	f000 fbd3 	bl	80025e0 <codecSetup>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	72fb      	strb	r3, [r7, #11]
	/* Initialize the sai and audio buffers */
	ABUF_init();
 8001e3e:	f7ff f86f 	bl	8000f20 <ABUF_init>

	/* Initialize the MDMA */
	MDMA_init();
 8001e42:	f000 fcd1 	bl	80027e8 <MDMA_init>
	MDMA_registerRxCallbacks(MDMA_RxXferBlockCpltCallback,
 8001e46:	492e      	ldr	r1, [pc, #184]	@ (8001f00 <main+0x16c>)
 8001e48:	482e      	ldr	r0, [pc, #184]	@ (8001f04 <main+0x170>)
 8001e4a:	f001 f8bf 	bl	8002fcc <MDMA_registerRxCallbacks>
			MDMA_RxErrorCallback);
	MDMA_registerTxCallbacks(MDMA_TxXferBlockCpltCallback,
 8001e4e:	492e      	ldr	r1, [pc, #184]	@ (8001f08 <main+0x174>)
 8001e50:	482e      	ldr	r0, [pc, #184]	@ (8001f0c <main+0x178>)
 8001e52:	f001 f8dd 	bl	8003010 <MDMA_registerTxCallbacks>
			MDMA_TxErrorCallback);

	/* Initialize the audio status */
	ASTAT_init(MDMA_hmdmaRxInstance, MDMA_hmdmaTxInstance);
 8001e56:	4b2e      	ldr	r3, [pc, #184]	@ (8001f10 <main+0x17c>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a2e      	ldr	r2, [pc, #184]	@ (8001f14 <main+0x180>)
 8001e5c:	6812      	ldr	r2, [r2, #0]
 8001e5e:	4611      	mov	r1, r2
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff f967 	bl	8001134 <ASTAT_init>

	DSP_init();
 8001e66:	f7ff fe3d 	bl	8001ae4 <DSP_init>

	HAL_StatusTypeDef saiStatus;

	saiStatus = HAL_SAI_Init(&hsai_BlockA1);
 8001e6a:	482b      	ldr	r0, [pc, #172]	@ (8001f18 <main+0x184>)
 8001e6c:	f009 fa96 	bl	800b39c <HAL_SAI_Init>
 8001e70:	4603      	mov	r3, r0
 8001e72:	72bb      	strb	r3, [r7, #10]
	saiStatus = HAL_SAI_Init(&hsai_BlockB1);
 8001e74:	4829      	ldr	r0, [pc, #164]	@ (8001f1c <main+0x188>)
 8001e76:	f009 fa91 	bl	800b39c <HAL_SAI_Init>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	72bb      	strb	r3, [r7, #10]
	__HAL_SAI_ENABLE(&hsai_BlockA1);
 8001e7e:	4b26      	ldr	r3, [pc, #152]	@ (8001f18 <main+0x184>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	4b24      	ldr	r3, [pc, #144]	@ (8001f18 <main+0x184>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001e8c:	601a      	str	r2, [r3, #0]
	__HAL_SAI_ENABLE(&hsai_BlockB1);
 8001e8e:	4b23      	ldr	r3, [pc, #140]	@ (8001f1c <main+0x188>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	4b21      	ldr	r3, [pc, #132]	@ (8001f1c <main+0x188>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001e9c:	601a      	str	r2, [r3, #0]



	HAL_Delay(100);
 8001e9e:	2064      	movs	r0, #100	@ 0x64
 8001ea0:	f001 fc66 	bl	8003770 <HAL_Delay>

	if (HAL_OK
			!= HAL_SAI_Receive_DMA(&hsai_BlockA1,
					(uint8_t*) ABUF_saiBufferPtrs[0].leftRxFirstHalf,
 8001ea4:	4b1e      	ldr	r3, [pc, #120]	@ (8001f20 <main+0x18c>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
			!= HAL_SAI_Receive_DMA(&hsai_BlockA1,
 8001ea8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001eac:	4619      	mov	r1, r3
 8001eae:	481a      	ldr	r0, [pc, #104]	@ (8001f18 <main+0x184>)
 8001eb0:	f009 fdd4 	bl	800ba5c <HAL_SAI_Receive_DMA>
 8001eb4:	4603      	mov	r3, r0
	if (HAL_OK
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <main+0x12a>
					SAI_BUFFER_LENGTH))
	{
		Error_Handler();
 8001eba:	f000 fc8f 	bl	80027dc <Error_Handler>
	}
	if (HAL_OK
			!= HAL_SAI_Transmit_DMA(&hsai_BlockB1,
					(uint8_t*) ABUF_saiBufferPtrs[0].leftTxFirstHalf,
 8001ebe:	4b18      	ldr	r3, [pc, #96]	@ (8001f20 <main+0x18c>)
 8001ec0:	691b      	ldr	r3, [r3, #16]
			!= HAL_SAI_Transmit_DMA(&hsai_BlockB1,
 8001ec2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4814      	ldr	r0, [pc, #80]	@ (8001f1c <main+0x188>)
 8001eca:	f009 fd11 	bl	800b8f0 <HAL_SAI_Transmit_DMA>
 8001ece:	4603      	mov	r3, r0
	if (HAL_OK
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <main+0x144>
					SAI_BUFFER_LENGTH))
	{
		Error_Handler();
 8001ed4:	f000 fc82 	bl	80027dc <Error_Handler>
	}

	HAL_Delay(100);
 8001ed8:	2064      	movs	r0, #100	@ 0x64
 8001eda:	f001 fc49 	bl	8003770 <HAL_Delay>

		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		ASTAT_rxXferRequestHandler();
 8001ede:	f7ff f96b 	bl	80011b8 <ASTAT_rxXferRequestHandler>
		ASTAT_DspRequestHandler();
 8001ee2:	f7ff fa4d 	bl	8001380 <ASTAT_DspRequestHandler>
		ASTAT_TxXferRequestHandler();
 8001ee6:	f7ff fb45 	bl	8001574 <ASTAT_TxXferRequestHandler>

		ASTAT_RxXferBlockCpltHandler();
 8001eea:	f7ff fc83 	bl	80017f4 <ASTAT_RxXferBlockCpltHandler>
		ASTAT_TxXferBlockCpltHandler();
 8001eee:	f7ff fd3d 	bl	800196c <ASTAT_TxXferBlockCpltHandler>

		DSP_process();
 8001ef2:	f7ff fe4d 	bl	8001b90 <DSP_process>
		ASTAT_rxXferRequestHandler();
 8001ef6:	bf00      	nop
 8001ef8:	e7f1      	b.n	8001ede <main+0x14a>
 8001efa:	bf00      	nop
 8001efc:	58024400 	.word	0x58024400
 8001f00:	080025b9 	.word	0x080025b9
 8001f04:	08002529 	.word	0x08002529
 8001f08:	080025cd 	.word	0x080025cd
 8001f0c:	08002571 	.word	0x08002571
 8001f10:	24001058 	.word	0x24001058
 8001f14:	2400105c 	.word	0x2400105c
 8001f18:	24000b70 	.word	0x24000b70
 8001f1c:	24000c08 	.word	0x24000c08
 8001f20:	24000830 	.word	0x24000830

08001f24 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b09c      	sub	sp, #112	@ 0x70
 8001f28:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 8001f2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f2e:	224c      	movs	r2, #76	@ 0x4c
 8001f30:	2100      	movs	r1, #0
 8001f32:	4618      	mov	r0, r3
 8001f34:	f00b fb3e 	bl	800d5b4 <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8001f38:	1d3b      	adds	r3, r7, #4
 8001f3a:	2220      	movs	r2, #32
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f00b fb38 	bl	800d5b4 <memset>
	{ 0 };

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001f44:	2004      	movs	r0, #4
 8001f46:	f005 fcb9 	bl	80078bc <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	603b      	str	r3, [r7, #0]
 8001f4e:	4b32      	ldr	r3, [pc, #200]	@ (8002018 <SystemClock_Config+0xf4>)
 8001f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f52:	4a31      	ldr	r2, [pc, #196]	@ (8002018 <SystemClock_Config+0xf4>)
 8001f54:	f023 0301 	bic.w	r3, r3, #1
 8001f58:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001f5a:	4b2f      	ldr	r3, [pc, #188]	@ (8002018 <SystemClock_Config+0xf4>)
 8001f5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	603b      	str	r3, [r7, #0]
 8001f64:	4b2d      	ldr	r3, [pc, #180]	@ (800201c <SystemClock_Config+0xf8>)
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001f6c:	4a2b      	ldr	r2, [pc, #172]	@ (800201c <SystemClock_Config+0xf8>)
 8001f6e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f72:	6193      	str	r3, [r2, #24]
 8001f74:	4b29      	ldr	r3, [pc, #164]	@ (800201c <SystemClock_Config+0xf8>)
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001f7c:	603b      	str	r3, [r7, #0]
 8001f7e:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 8001f80:	bf00      	nop
 8001f82:	4b26      	ldr	r3, [pc, #152]	@ (800201c <SystemClock_Config+0xf8>)
 8001f84:	699b      	ldr	r3, [r3, #24]
 8001f86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f8e:	d1f8      	bne.n	8001f82 <SystemClock_Config+0x5e>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f90:	2302      	movs	r3, #2
 8001f92:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001f94:	2301      	movs	r3, #1
 8001f96:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f98:	2340      	movs	r3, #64	@ 0x40
 8001f9a:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8001fa4:	2304      	movs	r3, #4
 8001fa6:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLN = 50;
 8001fa8:	2332      	movs	r3, #50	@ 0x32
 8001faa:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 8001fac:	2302      	movs	r3, #2
 8001fae:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLQ = 65;
 8001fb0:	2341      	movs	r3, #65	@ 0x41
 8001fb2:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001fb8:	230c      	movs	r3, #12
 8001fba:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	66fb      	str	r3, [r7, #108]	@ 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f005 fcd1 	bl	8007970 <HAL_RCC_OscConfig>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <SystemClock_Config+0xb4>
	{
		Error_Handler();
 8001fd4:	f000 fc02 	bl	80027dc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001fd8:	233f      	movs	r3, #63	@ 0x3f
 8001fda:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 8001fe0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001fe4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001fe6:	2308      	movs	r3, #8
 8001fe8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001fea:	2340      	movs	r3, #64	@ 0x40
 8001fec:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001fee:	2340      	movs	r3, #64	@ 0x40
 8001ff0:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001ff2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ff6:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001ff8:	2340      	movs	r3, #64	@ 0x40
 8001ffa:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ffc:	1d3b      	adds	r3, r7, #4
 8001ffe:	2102      	movs	r1, #2
 8002000:	4618      	mov	r0, r3
 8002002:	f006 f90f 	bl	8008224 <HAL_RCC_ClockConfig>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <SystemClock_Config+0xec>
	{
		Error_Handler();
 800200c:	f000 fbe6 	bl	80027dc <Error_Handler>
	}
}
 8002010:	bf00      	nop
 8002012:	3770      	adds	r7, #112	@ 0x70
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	58000400 	.word	0x58000400
 800201c:	58024800 	.word	0x58024800

08002020 <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b0b0      	sub	sp, #192	@ 0xc0
 8002024:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct =
 8002026:	463b      	mov	r3, r7
 8002028:	22c0      	movs	r2, #192	@ 0xc0
 800202a:	2100      	movs	r1, #0
 800202c:	4618      	mov	r0, r3
 800202e:	f00b fac1 	bl	800d5b4 <memset>
	{ 0 };

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1
 8002032:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8002036:	f04f 0300 	mov.w	r3, #0
 800203a:	e9c7 2300 	strd	r2, r3, [r7]
			| RCC_PERIPHCLK_USART3;
	PeriphClkInitStruct.PLL2.PLL2M = 5;
 800203e:	2305      	movs	r3, #5
 8002040:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.PLL2.PLL2N = 24;
 8002042:	2318      	movs	r3, #24
 8002044:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLL2.PLL2P = 25;
 8002046:	2319      	movs	r3, #25
 8002048:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLL2.PLL2Q = 24;
 800204a:	2318      	movs	r3, #24
 800204c:	617b      	str	r3, [r7, #20]
	PeriphClkInitStruct.PLL2.PLL2R = 2;
 800204e:	2302      	movs	r3, #2
 8002050:	61bb      	str	r3, [r7, #24]
	PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8002052:	23c0      	movs	r3, #192	@ 0xc0
 8002054:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8002056:	2300      	movs	r3, #0
 8002058:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800205a:	2300      	movs	r3, #0
 800205c:	627b      	str	r3, [r7, #36]	@ 0x24
	PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 800205e:	2301      	movs	r3, #1
 8002060:	65bb      	str	r3, [r7, #88]	@ 0x58
	PeriphClkInitStruct.Usart234578ClockSelection =
 8002062:	2301      	movs	r3, #1
 8002064:	67bb      	str	r3, [r7, #120]	@ 0x78
	RCC_USART234578CLKSOURCE_PLL2;
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002066:	463b      	mov	r3, r7
 8002068:	4618      	mov	r0, r3
 800206a:	f006 fc67 	bl	800893c <HAL_RCCEx_PeriphCLKConfig>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <PeriphCommonClock_Config+0x58>
	{
		Error_Handler();
 8002074:	f000 fbb2 	bl	80027dc <Error_Handler>
	}
}
 8002078:	bf00      	nop
 800207a:	37c0      	adds	r7, #192	@ 0xc0
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8002084:	4b1b      	ldr	r3, [pc, #108]	@ (80020f4 <MX_I2C2_Init+0x74>)
 8002086:	4a1c      	ldr	r2, [pc, #112]	@ (80020f8 <MX_I2C2_Init+0x78>)
 8002088:	601a      	str	r2, [r3, #0]
	hi2c2.Init.Timing = 0x00000873;
 800208a:	4b1a      	ldr	r3, [pc, #104]	@ (80020f4 <MX_I2C2_Init+0x74>)
 800208c:	f640 0273 	movw	r2, #2163	@ 0x873
 8002090:	605a      	str	r2, [r3, #4]
	hi2c2.Init.OwnAddress1 = 0;
 8002092:	4b18      	ldr	r3, [pc, #96]	@ (80020f4 <MX_I2C2_Init+0x74>)
 8002094:	2200      	movs	r2, #0
 8002096:	609a      	str	r2, [r3, #8]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002098:	4b16      	ldr	r3, [pc, #88]	@ (80020f4 <MX_I2C2_Init+0x74>)
 800209a:	2201      	movs	r2, #1
 800209c:	60da      	str	r2, [r3, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800209e:	4b15      	ldr	r3, [pc, #84]	@ (80020f4 <MX_I2C2_Init+0x74>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	611a      	str	r2, [r3, #16]
	hi2c2.Init.OwnAddress2 = 0;
 80020a4:	4b13      	ldr	r3, [pc, #76]	@ (80020f4 <MX_I2C2_Init+0x74>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80020aa:	4b12      	ldr	r3, [pc, #72]	@ (80020f4 <MX_I2C2_Init+0x74>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020b0:	4b10      	ldr	r3, [pc, #64]	@ (80020f4 <MX_I2C2_Init+0x74>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020b6:	4b0f      	ldr	r3, [pc, #60]	@ (80020f4 <MX_I2C2_Init+0x74>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80020bc:	480d      	ldr	r0, [pc, #52]	@ (80020f4 <MX_I2C2_Init+0x74>)
 80020be:	f004 f839 	bl	8006134 <HAL_I2C_Init>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <MX_I2C2_Init+0x4c>
	{
		Error_Handler();
 80020c8:	f000 fb88 	bl	80027dc <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80020cc:	2100      	movs	r1, #0
 80020ce:	4809      	ldr	r0, [pc, #36]	@ (80020f4 <MX_I2C2_Init+0x74>)
 80020d0:	f004 fdbc 	bl	8006c4c <HAL_I2CEx_ConfigAnalogFilter>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <MX_I2C2_Init+0x5e>
	{
		Error_Handler();
 80020da:	f000 fb7f 	bl	80027dc <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80020de:	2100      	movs	r1, #0
 80020e0:	4804      	ldr	r0, [pc, #16]	@ (80020f4 <MX_I2C2_Init+0x74>)
 80020e2:	f004 fdfe 	bl	8006ce2 <HAL_I2CEx_ConfigDigitalFilter>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <MX_I2C2_Init+0x70>
	{
		Error_Handler();
 80020ec:	f000 fb76 	bl	80027dc <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 80020f0:	bf00      	nop
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	24000b1c 	.word	0x24000b1c
 80020f8:	40005800 	.word	0x40005800

080020fc <MX_SAI1_Init>:
 * @brief SAI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SAI1_Init(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
	/* USER CODE END SAI1_Init 0 */

	/* USER CODE BEGIN SAI1_Init 1 */

	/* USER CODE END SAI1_Init 1 */
	hsai_BlockA1.Instance = SAI1_Block_A;
 8002100:	4b2b      	ldr	r3, [pc, #172]	@ (80021b0 <MX_SAI1_Init+0xb4>)
 8002102:	4a2c      	ldr	r2, [pc, #176]	@ (80021b4 <MX_SAI1_Init+0xb8>)
 8002104:	601a      	str	r2, [r3, #0]
	hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
 8002106:	4b2a      	ldr	r3, [pc, #168]	@ (80021b0 <MX_SAI1_Init+0xb4>)
 8002108:	2201      	movs	r2, #1
 800210a:	605a      	str	r2, [r3, #4]
	hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 800210c:	4b28      	ldr	r3, [pc, #160]	@ (80021b0 <MX_SAI1_Init+0xb4>)
 800210e:	2200      	movs	r2, #0
 8002110:	609a      	str	r2, [r3, #8]
	hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002112:	4b27      	ldr	r3, [pc, #156]	@ (80021b0 <MX_SAI1_Init+0xb4>)
 8002114:	2200      	movs	r2, #0
 8002116:	615a      	str	r2, [r3, #20]
	hsai_BlockA1.Init.NoDivider = SAI_MCK_OVERSAMPLING_DISABLE;
 8002118:	4b25      	ldr	r3, [pc, #148]	@ (80021b0 <MX_SAI1_Init+0xb4>)
 800211a:	2200      	movs	r2, #0
 800211c:	619a      	str	r2, [r3, #24]
	hsai_BlockA1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 800211e:	4b24      	ldr	r3, [pc, #144]	@ (80021b0 <MX_SAI1_Init+0xb4>)
 8002120:	2200      	movs	r2, #0
 8002122:	629a      	str	r2, [r3, #40]	@ 0x28
	hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8002124:	4b22      	ldr	r3, [pc, #136]	@ (80021b0 <MX_SAI1_Init+0xb4>)
 8002126:	2201      	movs	r2, #1
 8002128:	61da      	str	r2, [r3, #28]
	hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 800212a:	4b21      	ldr	r3, [pc, #132]	@ (80021b0 <MX_SAI1_Init+0xb4>)
 800212c:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8002130:	621a      	str	r2, [r3, #32]
	hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002132:	4b1f      	ldr	r3, [pc, #124]	@ (80021b0 <MX_SAI1_Init+0xb4>)
 8002134:	2200      	movs	r2, #0
 8002136:	60da      	str	r2, [r3, #12]
	hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8002138:	4b1d      	ldr	r3, [pc, #116]	@ (80021b0 <MX_SAI1_Init+0xb4>)
 800213a:	2200      	movs	r2, #0
 800213c:	62da      	str	r2, [r3, #44]	@ 0x2c
	hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 800213e:	4b1c      	ldr	r3, [pc, #112]	@ (80021b0 <MX_SAI1_Init+0xb4>)
 8002140:	2200      	movs	r2, #0
 8002142:	631a      	str	r2, [r3, #48]	@ 0x30
	if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD,
 8002144:	2302      	movs	r3, #2
 8002146:	2200      	movs	r2, #0
 8002148:	2100      	movs	r1, #0
 800214a:	4819      	ldr	r0, [pc, #100]	@ (80021b0 <MX_SAI1_Init+0xb4>)
 800214c:	f009 f8f4 	bl	800b338 <HAL_SAI_InitProtocol>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <MX_SAI1_Init+0x5e>
	SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
	{
		Error_Handler();
 8002156:	f000 fb41 	bl	80027dc <Error_Handler>
	}
	hsai_BlockB1.Instance = SAI1_Block_B;
 800215a:	4b17      	ldr	r3, [pc, #92]	@ (80021b8 <MX_SAI1_Init+0xbc>)
 800215c:	4a17      	ldr	r2, [pc, #92]	@ (80021bc <MX_SAI1_Init+0xc0>)
 800215e:	601a      	str	r2, [r3, #0]
	hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_TX;
 8002160:	4b15      	ldr	r3, [pc, #84]	@ (80021b8 <MX_SAI1_Init+0xbc>)
 8002162:	2202      	movs	r2, #2
 8002164:	605a      	str	r2, [r3, #4]
	hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8002166:	4b14      	ldr	r3, [pc, #80]	@ (80021b8 <MX_SAI1_Init+0xbc>)
 8002168:	2201      	movs	r2, #1
 800216a:	609a      	str	r2, [r3, #8]
	hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800216c:	4b12      	ldr	r3, [pc, #72]	@ (80021b8 <MX_SAI1_Init+0xbc>)
 800216e:	2200      	movs	r2, #0
 8002170:	615a      	str	r2, [r3, #20]
	hsai_BlockB1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8002172:	4b11      	ldr	r3, [pc, #68]	@ (80021b8 <MX_SAI1_Init+0xbc>)
 8002174:	2200      	movs	r2, #0
 8002176:	629a      	str	r2, [r3, #40]	@ 0x28
	hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8002178:	4b0f      	ldr	r3, [pc, #60]	@ (80021b8 <MX_SAI1_Init+0xbc>)
 800217a:	2201      	movs	r2, #1
 800217c:	61da      	str	r2, [r3, #28]
	hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800217e:	4b0e      	ldr	r3, [pc, #56]	@ (80021b8 <MX_SAI1_Init+0xbc>)
 8002180:	2200      	movs	r2, #0
 8002182:	60da      	str	r2, [r3, #12]
	hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8002184:	4b0c      	ldr	r3, [pc, #48]	@ (80021b8 <MX_SAI1_Init+0xbc>)
 8002186:	2200      	movs	r2, #0
 8002188:	62da      	str	r2, [r3, #44]	@ 0x2c
	hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 800218a:	4b0b      	ldr	r3, [pc, #44]	@ (80021b8 <MX_SAI1_Init+0xbc>)
 800218c:	2200      	movs	r2, #0
 800218e:	631a      	str	r2, [r3, #48]	@ 0x30
	hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002190:	4b09      	ldr	r3, [pc, #36]	@ (80021b8 <MX_SAI1_Init+0xbc>)
 8002192:	2200      	movs	r2, #0
 8002194:	635a      	str	r2, [r3, #52]	@ 0x34
	if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD,
 8002196:	2302      	movs	r3, #2
 8002198:	2200      	movs	r2, #0
 800219a:	2100      	movs	r1, #0
 800219c:	4806      	ldr	r0, [pc, #24]	@ (80021b8 <MX_SAI1_Init+0xbc>)
 800219e:	f009 f8cb 	bl	800b338 <HAL_SAI_InitProtocol>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <MX_SAI1_Init+0xb0>
	SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
	{
		Error_Handler();
 80021a8:	f000 fb18 	bl	80027dc <Error_Handler>
	}
	/* USER CODE BEGIN SAI1_Init 2 */

	/* USER CODE END SAI1_Init 2 */

}
 80021ac:	bf00      	nop
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	24000b70 	.word	0x24000b70
 80021b4:	40015804 	.word	0x40015804
 80021b8:	24000c08 	.word	0x24000c08
 80021bc:	40015824 	.word	0x40015824

080021c0 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80021c4:	4b22      	ldr	r3, [pc, #136]	@ (8002250 <MX_USART3_UART_Init+0x90>)
 80021c6:	4a23      	ldr	r2, [pc, #140]	@ (8002254 <MX_USART3_UART_Init+0x94>)
 80021c8:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 80021ca:	4b21      	ldr	r3, [pc, #132]	@ (8002250 <MX_USART3_UART_Init+0x90>)
 80021cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80021d0:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80021d2:	4b1f      	ldr	r3, [pc, #124]	@ (8002250 <MX_USART3_UART_Init+0x90>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80021d8:	4b1d      	ldr	r3, [pc, #116]	@ (8002250 <MX_USART3_UART_Init+0x90>)
 80021da:	2200      	movs	r2, #0
 80021dc:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80021de:	4b1c      	ldr	r3, [pc, #112]	@ (8002250 <MX_USART3_UART_Init+0x90>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80021e4:	4b1a      	ldr	r3, [pc, #104]	@ (8002250 <MX_USART3_UART_Init+0x90>)
 80021e6:	220c      	movs	r2, #12
 80021e8:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021ea:	4b19      	ldr	r3, [pc, #100]	@ (8002250 <MX_USART3_UART_Init+0x90>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80021f0:	4b17      	ldr	r3, [pc, #92]	@ (8002250 <MX_USART3_UART_Init+0x90>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021f6:	4b16      	ldr	r3, [pc, #88]	@ (8002250 <MX_USART3_UART_Init+0x90>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	621a      	str	r2, [r3, #32]
	huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80021fc:	4b14      	ldr	r3, [pc, #80]	@ (8002250 <MX_USART3_UART_Init+0x90>)
 80021fe:	2200      	movs	r2, #0
 8002200:	625a      	str	r2, [r3, #36]	@ 0x24
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002202:	4b13      	ldr	r3, [pc, #76]	@ (8002250 <MX_USART3_UART_Init+0x90>)
 8002204:	2200      	movs	r2, #0
 8002206:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8002208:	4811      	ldr	r0, [pc, #68]	@ (8002250 <MX_USART3_UART_Init+0x90>)
 800220a:	f009 ff2a 	bl	800c062 <HAL_UART_Init>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <MX_USART3_UART_Init+0x58>
	{
		Error_Handler();
 8002214:	f000 fae2 	bl	80027dc <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8)
 8002218:	2100      	movs	r1, #0
 800221a:	480d      	ldr	r0, [pc, #52]	@ (8002250 <MX_USART3_UART_Init+0x90>)
 800221c:	f00a ff33 	bl	800d086 <HAL_UARTEx_SetTxFifoThreshold>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <MX_USART3_UART_Init+0x6a>
			!= HAL_OK)
	{
		Error_Handler();
 8002226:	f000 fad9 	bl	80027dc <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8)
 800222a:	2100      	movs	r1, #0
 800222c:	4808      	ldr	r0, [pc, #32]	@ (8002250 <MX_USART3_UART_Init+0x90>)
 800222e:	f00a ff68 	bl	800d102 <HAL_UARTEx_SetRxFifoThreshold>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <MX_USART3_UART_Init+0x7c>
			!= HAL_OK)
	{
		Error_Handler();
 8002238:	f000 fad0 	bl	80027dc <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800223c:	4804      	ldr	r0, [pc, #16]	@ (8002250 <MX_USART3_UART_Init+0x90>)
 800223e:	f00a fee9 	bl	800d014 <HAL_UARTEx_DisableFifoMode>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <MX_USART3_UART_Init+0x8c>
	{
		Error_Handler();
 8002248:	f000 fac8 	bl	80027dc <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 800224c:	bf00      	nop
 800224e:	bd80      	pop	{r7, pc}
 8002250:	24000d90 	.word	0x24000d90
 8002254:	40004800 	.word	0x40004800

08002258 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800225e:	4b11      	ldr	r3, [pc, #68]	@ (80022a4 <MX_DMA_Init+0x4c>)
 8002260:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002264:	4a0f      	ldr	r2, [pc, #60]	@ (80022a4 <MX_DMA_Init+0x4c>)
 8002266:	f043 0301 	orr.w	r3, r3, #1
 800226a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800226e:	4b0d      	ldr	r3, [pc, #52]	@ (80022a4 <MX_DMA_Init+0x4c>)
 8002270:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002274:	f003 0301 	and.w	r3, r3, #1
 8002278:	607b      	str	r3, [r7, #4]
 800227a:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800227c:	2200      	movs	r2, #0
 800227e:	2100      	movs	r1, #0
 8002280:	200b      	movs	r0, #11
 8002282:	f001 fb80 	bl	8003986 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002286:	200b      	movs	r0, #11
 8002288:	f001 fb97 	bl	80039ba <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800228c:	2200      	movs	r2, #0
 800228e:	2100      	movs	r1, #0
 8002290:	200c      	movs	r0, #12
 8002292:	f001 fb78 	bl	8003986 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002296:	200c      	movs	r0, #12
 8002298:	f001 fb8f 	bl	80039ba <HAL_NVIC_EnableIRQ>

}
 800229c:	bf00      	nop
 800229e:	3708      	adds	r7, #8
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	58024400 	.word	0x58024400

080022a8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b08a      	sub	sp, #40	@ 0x28
 80022ac:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 80022ae:	f107 0314 	add.w	r3, r7, #20
 80022b2:	2200      	movs	r2, #0
 80022b4:	601a      	str	r2, [r3, #0]
 80022b6:	605a      	str	r2, [r3, #4]
 80022b8:	609a      	str	r2, [r3, #8]
 80022ba:	60da      	str	r2, [r3, #12]
 80022bc:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80022be:	4b33      	ldr	r3, [pc, #204]	@ (800238c <MX_GPIO_Init+0xe4>)
 80022c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022c4:	4a31      	ldr	r2, [pc, #196]	@ (800238c <MX_GPIO_Init+0xe4>)
 80022c6:	f043 0310 	orr.w	r3, r3, #16
 80022ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022ce:	4b2f      	ldr	r3, [pc, #188]	@ (800238c <MX_GPIO_Init+0xe4>)
 80022d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022d4:	f003 0310 	and.w	r3, r3, #16
 80022d8:	613b      	str	r3, [r7, #16]
 80022da:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80022dc:	4b2b      	ldr	r3, [pc, #172]	@ (800238c <MX_GPIO_Init+0xe4>)
 80022de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022e2:	4a2a      	ldr	r2, [pc, #168]	@ (800238c <MX_GPIO_Init+0xe4>)
 80022e4:	f043 0302 	orr.w	r3, r3, #2
 80022e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022ec:	4b27      	ldr	r3, [pc, #156]	@ (800238c <MX_GPIO_Init+0xe4>)
 80022ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80022fa:	4b24      	ldr	r3, [pc, #144]	@ (800238c <MX_GPIO_Init+0xe4>)
 80022fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002300:	4a22      	ldr	r2, [pc, #136]	@ (800238c <MX_GPIO_Init+0xe4>)
 8002302:	f043 0308 	orr.w	r3, r3, #8
 8002306:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800230a:	4b20      	ldr	r3, [pc, #128]	@ (800238c <MX_GPIO_Init+0xe4>)
 800230c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002310:	f003 0308 	and.w	r3, r3, #8
 8002314:	60bb      	str	r3, [r7, #8]
 8002316:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002318:	4b1c      	ldr	r3, [pc, #112]	@ (800238c <MX_GPIO_Init+0xe4>)
 800231a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800231e:	4a1b      	ldr	r2, [pc, #108]	@ (800238c <MX_GPIO_Init+0xe4>)
 8002320:	f043 0301 	orr.w	r3, r3, #1
 8002324:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002328:	4b18      	ldr	r3, [pc, #96]	@ (800238c <MX_GPIO_Init+0xe4>)
 800232a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	607b      	str	r3, [r7, #4]
 8002334:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_RESET);
 8002336:	2200      	movs	r2, #0
 8002338:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800233c:	4814      	ldr	r0, [pc, #80]	@ (8002390 <MX_GPIO_Init+0xe8>)
 800233e:	f003 feb1 	bl	80060a4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : RESET_Pin */
	GPIO_InitStruct.Pin = RESET_Pin;
 8002342:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002346:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002348:	2301      	movs	r3, #1
 800234a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234c:	2300      	movs	r3, #0
 800234e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002350:	2303      	movs	r3, #3
 8002352:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 8002354:	f107 0314 	add.w	r3, r7, #20
 8002358:	4619      	mov	r1, r3
 800235a:	480d      	ldr	r0, [pc, #52]	@ (8002390 <MX_GPIO_Init+0xe8>)
 800235c:	f003 fcf2 	bl	8005d44 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA8 PA11 PA12 */
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_11 | GPIO_PIN_12;
 8002360:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8002364:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002366:	2302      	movs	r3, #2
 8002368:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236a:	2300      	movs	r3, #0
 800236c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800236e:	2300      	movs	r3, #0
 8002370:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002372:	230a      	movs	r3, #10
 8002374:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002376:	f107 0314 	add.w	r3, r7, #20
 800237a:	4619      	mov	r1, r3
 800237c:	4805      	ldr	r0, [pc, #20]	@ (8002394 <MX_GPIO_Init+0xec>)
 800237e:	f003 fce1 	bl	8005d44 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 8002382:	bf00      	nop
 8002384:	3728      	adds	r7, #40	@ 0x28
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	58024400 	.word	0x58024400
 8002390:	58021000 	.word	0x58021000
 8002394:	58020000 	.word	0x58020000

08002398 <HAL_SAI_RxHalfCpltCallback>:

/* USER CODE BEGIN 4 */
//TODO Adress/Size aligment error, Read error
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8002398:	b480      	push	{r7}
 800239a:	b085      	sub	sp, #20
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
	CLEAR_BIT(ASTAT_saiStatus, SAI_STATUS_RX_HALF_PENDING);
 80023a0:	4b2b      	ldr	r3, [pc, #172]	@ (8002450 <HAL_SAI_RxHalfCpltCallback+0xb8>)
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	f023 0301 	bic.w	r3, r3, #1
 80023aa:	b2da      	uxtb	r2, r3
 80023ac:	4b28      	ldr	r3, [pc, #160]	@ (8002450 <HAL_SAI_RxHalfCpltCallback+0xb8>)
 80023ae:	701a      	strb	r2, [r3, #0]
	SET_BIT(ASTAT_saiStatus, SAI_STATUS_RX_HALF_CPLT);
 80023b0:	4b27      	ldr	r3, [pc, #156]	@ (8002450 <HAL_SAI_RxHalfCpltCallback+0xb8>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	f043 0302 	orr.w	r3, r3, #2
 80023ba:	b2da      	uxtb	r2, r3
 80023bc:	4b24      	ldr	r3, [pc, #144]	@ (8002450 <HAL_SAI_RxHalfCpltCallback+0xb8>)
 80023be:	701a      	strb	r2, [r3, #0]
	CLEAR_BIT(ASTAT_saiStatus, SAI_STATUS_RX_FULL_CPLT);
 80023c0:	4b23      	ldr	r3, [pc, #140]	@ (8002450 <HAL_SAI_RxHalfCpltCallback+0xb8>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	f023 0308 	bic.w	r3, r3, #8
 80023ca:	b2da      	uxtb	r2, r3
 80023cc:	4b20      	ldr	r3, [pc, #128]	@ (8002450 <HAL_SAI_RxHalfCpltCallback+0xb8>)
 80023ce:	701a      	strb	r2, [r3, #0]
	SET_BIT(ASTAT_saiStatus, SAI_STATUS_RX_FULL_PENDING);
 80023d0:	4b1f      	ldr	r3, [pc, #124]	@ (8002450 <HAL_SAI_RxHalfCpltCallback+0xb8>)
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	f043 0304 	orr.w	r3, r3, #4
 80023da:	b2da      	uxtb	r2, r3
 80023dc:	4b1c      	ldr	r3, [pc, #112]	@ (8002450 <HAL_SAI_RxHalfCpltCallback+0xb8>)
 80023de:	701a      	strb	r2, [r3, #0]

	for (size_t i = 0; i < AUDIO_STEREO_CHANNEL_COUNT; i++)
 80023e0:	2300      	movs	r3, #0
 80023e2:	60fb      	str	r3, [r7, #12]
 80023e4:	e029      	b.n	800243a <HAL_SAI_RxHalfCpltCallback+0xa2>
	{
		CLEAR_BIT(ASTAT_rxStatus[i], AUDIO_STATUS_HALF_PART);
 80023e6:	4a1b      	ldr	r2, [pc, #108]	@ (8002454 <HAL_SAI_RxHalfCpltCallback+0xbc>)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	4413      	add	r3, r2
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	f023 030f 	bic.w	r3, r3, #15
 80023f4:	b2d9      	uxtb	r1, r3
 80023f6:	4a17      	ldr	r2, [pc, #92]	@ (8002454 <HAL_SAI_RxHalfCpltCallback+0xbc>)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	4413      	add	r3, r2
 80023fc:	460a      	mov	r2, r1
 80023fe:	701a      	strb	r2, [r3, #0]
		CLEAR_BIT(ASTAT_dspStatus[i], AUDIO_STATUS_HALF_PART);
 8002400:	4a15      	ldr	r2, [pc, #84]	@ (8002458 <HAL_SAI_RxHalfCpltCallback+0xc0>)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	4413      	add	r3, r2
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	b2db      	uxtb	r3, r3
 800240a:	f023 030f 	bic.w	r3, r3, #15
 800240e:	b2d9      	uxtb	r1, r3
 8002410:	4a11      	ldr	r2, [pc, #68]	@ (8002458 <HAL_SAI_RxHalfCpltCallback+0xc0>)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	4413      	add	r3, r2
 8002416:	460a      	mov	r2, r1
 8002418:	701a      	strb	r2, [r3, #0]
		CLEAR_BIT(ASTAT_txStatus[i], AUDIO_STATUS_HALF_PART);
 800241a:	4a10      	ldr	r2, [pc, #64]	@ (800245c <HAL_SAI_RxHalfCpltCallback+0xc4>)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	4413      	add	r3, r2
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	b2db      	uxtb	r3, r3
 8002424:	f023 030f 	bic.w	r3, r3, #15
 8002428:	b2d9      	uxtb	r1, r3
 800242a:	4a0c      	ldr	r2, [pc, #48]	@ (800245c <HAL_SAI_RxHalfCpltCallback+0xc4>)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	4413      	add	r3, r2
 8002430:	460a      	mov	r2, r1
 8002432:	701a      	strb	r2, [r3, #0]
	for (size_t i = 0; i < AUDIO_STEREO_CHANNEL_COUNT; i++)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	3301      	adds	r3, #1
 8002438:	60fb      	str	r3, [r7, #12]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d0d2      	beq.n	80023e6 <HAL_SAI_RxHalfCpltCallback+0x4e>
	}

}
 8002440:	bf00      	nop
 8002442:	bf00      	nop
 8002444:	3714      	adds	r7, #20
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	24000879 	.word	0x24000879
 8002454:	24000870 	.word	0x24000870
 8002458:	24000874 	.word	0x24000874
 800245c:	24000878 	.word	0x24000878

08002460 <HAL_SAI_RxCpltCallback>:

void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8002460:	b480      	push	{r7}
 8002462:	b085      	sub	sp, #20
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
	CLEAR_BIT(ASTAT_saiStatus, SAI_STATUS_RX_FULL_PENDING);
 8002468:	4b2b      	ldr	r3, [pc, #172]	@ (8002518 <HAL_SAI_RxCpltCallback+0xb8>)
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	b2db      	uxtb	r3, r3
 800246e:	f023 0304 	bic.w	r3, r3, #4
 8002472:	b2da      	uxtb	r2, r3
 8002474:	4b28      	ldr	r3, [pc, #160]	@ (8002518 <HAL_SAI_RxCpltCallback+0xb8>)
 8002476:	701a      	strb	r2, [r3, #0]
	SET_BIT(ASTAT_saiStatus, SAI_STATUS_RX_FULL_CPLT);
 8002478:	4b27      	ldr	r3, [pc, #156]	@ (8002518 <HAL_SAI_RxCpltCallback+0xb8>)
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	b2db      	uxtb	r3, r3
 800247e:	f043 0308 	orr.w	r3, r3, #8
 8002482:	b2da      	uxtb	r2, r3
 8002484:	4b24      	ldr	r3, [pc, #144]	@ (8002518 <HAL_SAI_RxCpltCallback+0xb8>)
 8002486:	701a      	strb	r2, [r3, #0]
	CLEAR_BIT(ASTAT_saiStatus, SAI_STATUS_RX_HALF_CPLT);
 8002488:	4b23      	ldr	r3, [pc, #140]	@ (8002518 <HAL_SAI_RxCpltCallback+0xb8>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	b2db      	uxtb	r3, r3
 800248e:	f023 0302 	bic.w	r3, r3, #2
 8002492:	b2da      	uxtb	r2, r3
 8002494:	4b20      	ldr	r3, [pc, #128]	@ (8002518 <HAL_SAI_RxCpltCallback+0xb8>)
 8002496:	701a      	strb	r2, [r3, #0]
	SET_BIT(ASTAT_saiStatus, SAI_STATUS_RX_HALF_PENDING);
 8002498:	4b1f      	ldr	r3, [pc, #124]	@ (8002518 <HAL_SAI_RxCpltCallback+0xb8>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	b2db      	uxtb	r3, r3
 800249e:	f043 0301 	orr.w	r3, r3, #1
 80024a2:	b2da      	uxtb	r2, r3
 80024a4:	4b1c      	ldr	r3, [pc, #112]	@ (8002518 <HAL_SAI_RxCpltCallback+0xb8>)
 80024a6:	701a      	strb	r2, [r3, #0]

	for (size_t i = 0; i < AUDIO_STEREO_CHANNEL_COUNT; i++)
 80024a8:	2300      	movs	r3, #0
 80024aa:	60fb      	str	r3, [r7, #12]
 80024ac:	e029      	b.n	8002502 <HAL_SAI_RxCpltCallback+0xa2>
	{
		CLEAR_BIT(ASTAT_rxStatus[i], AUDIO_STATUS_FULL);
 80024ae:	4a1b      	ldr	r2, [pc, #108]	@ (800251c <HAL_SAI_RxCpltCallback+0xbc>)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	4413      	add	r3, r2
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	f003 030f 	and.w	r3, r3, #15
 80024bc:	b2d9      	uxtb	r1, r3
 80024be:	4a17      	ldr	r2, [pc, #92]	@ (800251c <HAL_SAI_RxCpltCallback+0xbc>)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	4413      	add	r3, r2
 80024c4:	460a      	mov	r2, r1
 80024c6:	701a      	strb	r2, [r3, #0]
		CLEAR_BIT(ASTAT_dspStatus[i], AUDIO_STATUS_FULL);
 80024c8:	4a15      	ldr	r2, [pc, #84]	@ (8002520 <HAL_SAI_RxCpltCallback+0xc0>)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	4413      	add	r3, r2
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	f003 030f 	and.w	r3, r3, #15
 80024d6:	b2d9      	uxtb	r1, r3
 80024d8:	4a11      	ldr	r2, [pc, #68]	@ (8002520 <HAL_SAI_RxCpltCallback+0xc0>)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	4413      	add	r3, r2
 80024de:	460a      	mov	r2, r1
 80024e0:	701a      	strb	r2, [r3, #0]
		CLEAR_BIT(ASTAT_txStatus[i], AUDIO_STATUS_FULL);
 80024e2:	4a10      	ldr	r2, [pc, #64]	@ (8002524 <HAL_SAI_RxCpltCallback+0xc4>)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	4413      	add	r3, r2
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	f003 030f 	and.w	r3, r3, #15
 80024f0:	b2d9      	uxtb	r1, r3
 80024f2:	4a0c      	ldr	r2, [pc, #48]	@ (8002524 <HAL_SAI_RxCpltCallback+0xc4>)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	4413      	add	r3, r2
 80024f8:	460a      	mov	r2, r1
 80024fa:	701a      	strb	r2, [r3, #0]
	for (size_t i = 0; i < AUDIO_STEREO_CHANNEL_COUNT; i++)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	3301      	adds	r3, #1
 8002500:	60fb      	str	r3, [r7, #12]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d0d2      	beq.n	80024ae <HAL_SAI_RxCpltCallback+0x4e>
	}

}
 8002508:	bf00      	nop
 800250a:	bf00      	nop
 800250c:	3714      	adds	r7, #20
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	24000879 	.word	0x24000879
 800251c:	24000870 	.word	0x24000870
 8002520:	24000874 	.word	0x24000874
 8002524:	24000878 	.word	0x24000878

08002528 <MDMA_RxXferBlockCpltCallback>:
////	}
//	//CLEAR_BIT(ASTAT_TxStatus, AUDIO_STATUS_HALF_PART);
//}

void MDMA_RxXferBlockCpltCallback(MDMA_HandleTypeDef *_hdma)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
	if (ASTAT_rxXferStartUpCplt == false)
 8002530:	4b0c      	ldr	r3, [pc, #48]	@ (8002564 <MDMA_RxXferBlockCpltCallback+0x3c>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	f083 0301 	eor.w	r3, r3, #1
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b00      	cmp	r3, #0
 800253c:	d003      	beq.n	8002546 <MDMA_RxXferBlockCpltCallback+0x1e>
	{
		rxXferCounter = 1;
 800253e:	4b0a      	ldr	r3, [pc, #40]	@ (8002568 <MDMA_RxXferBlockCpltCallback+0x40>)
 8002540:	2201      	movs	r2, #1
 8002542:	601a      	str	r2, [r3, #0]
 8002544:	e004      	b.n	8002550 <MDMA_RxXferBlockCpltCallback+0x28>
	}
	else
	{
		rxXferCounter++;
 8002546:	4b08      	ldr	r3, [pc, #32]	@ (8002568 <MDMA_RxXferBlockCpltCallback+0x40>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	3301      	adds	r3, #1
 800254c:	4a06      	ldr	r2, [pc, #24]	@ (8002568 <MDMA_RxXferBlockCpltCallback+0x40>)
 800254e:	6013      	str	r3, [r2, #0]
	}
	ASTAT_isRxTransferComplete = true;
 8002550:	4b06      	ldr	r3, [pc, #24]	@ (800256c <MDMA_RxXferBlockCpltCallback+0x44>)
 8002552:	2201      	movs	r2, #1
 8002554:	701a      	strb	r2, [r3, #0]
}
 8002556:	bf00      	nop
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	24000886 	.word	0x24000886
 8002568:	24000e30 	.word	0x24000e30
 800256c:	24000884 	.word	0x24000884

08002570 <MDMA_TxXferBlockCpltCallback>:

void MDMA_TxXferBlockCpltCallback(MDMA_HandleTypeDef *_hdma)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
	if (ASTAT_txXferStartupCplt == false)
 8002578:	4b0c      	ldr	r3, [pc, #48]	@ (80025ac <MDMA_TxXferBlockCpltCallback+0x3c>)
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	f083 0301 	eor.w	r3, r3, #1
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	d003      	beq.n	800258e <MDMA_TxXferBlockCpltCallback+0x1e>
	{
		txXferCounter = 1;
 8002586:	4b0a      	ldr	r3, [pc, #40]	@ (80025b0 <MDMA_TxXferBlockCpltCallback+0x40>)
 8002588:	2201      	movs	r2, #1
 800258a:	601a      	str	r2, [r3, #0]
 800258c:	e004      	b.n	8002598 <MDMA_TxXferBlockCpltCallback+0x28>
	}
	else
	{
		txXferCounter++;
 800258e:	4b08      	ldr	r3, [pc, #32]	@ (80025b0 <MDMA_TxXferBlockCpltCallback+0x40>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	3301      	adds	r3, #1
 8002594:	4a06      	ldr	r2, [pc, #24]	@ (80025b0 <MDMA_TxXferBlockCpltCallback+0x40>)
 8002596:	6013      	str	r3, [r2, #0]
	}
	ASTAT_isTxTransferComplete = true;
 8002598:	4b06      	ldr	r3, [pc, #24]	@ (80025b4 <MDMA_TxXferBlockCpltCallback+0x44>)
 800259a:	2201      	movs	r2, #1
 800259c:	701a      	strb	r2, [r3, #0]
}
 800259e:	bf00      	nop
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	24000887 	.word	0x24000887
 80025b0:	24000e34 	.word	0x24000e34
 80025b4:	24000885 	.word	0x24000885

080025b8 <MDMA_RxErrorCallback>:

void MDMA_RxErrorCallback(MDMA_HandleTypeDef *_hdma)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
	Error_Handler();
 80025c0:	f000 f90c 	bl	80027dc <Error_Handler>
}
 80025c4:	bf00      	nop
 80025c6:	3708      	adds	r7, #8
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <MDMA_TxErrorCallback>:

void MDMA_TxErrorCallback(MDMA_HandleTypeDef *_hdma)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
	Error_Handler();
 80025d4:	f000 f902 	bl	80027dc <Error_Handler>
}
 80025d8:	bf00      	nop
 80025da:	3708      	adds	r7, #8
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <codecSetup>:

HAL_StatusTypeDef codecSetup()
{
 80025e0:	b590      	push	{r4, r7, lr}
 80025e2:	b08f      	sub	sp, #60	@ 0x3c
 80025e4:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status;

	aic3xHandle.hi2c = &hi2c2;
 80025e6:	4b77      	ldr	r3, [pc, #476]	@ (80027c4 <codecSetup+0x1e4>)
 80025e8:	4a77      	ldr	r2, [pc, #476]	@ (80027c8 <codecSetup+0x1e8>)
 80025ea:	601a      	str	r2, [r3, #0]
	aic3xHandle.rst_port = RESET_GPIO_Port;
 80025ec:	4b75      	ldr	r3, [pc, #468]	@ (80027c4 <codecSetup+0x1e4>)
 80025ee:	4a77      	ldr	r2, [pc, #476]	@ (80027cc <codecSetup+0x1ec>)
 80025f0:	605a      	str	r2, [r3, #4]
	aic3xHandle.rst_pin = RESET_Pin;
 80025f2:	4b74      	ldr	r3, [pc, #464]	@ (80027c4 <codecSetup+0x1e4>)
 80025f4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80025f8:	811a      	strh	r2, [r3, #8]

	status = AIC3X_Init(&aic3xHandle);
 80025fa:	4872      	ldr	r0, [pc, #456]	@ (80027c4 <codecSetup+0x1e4>)
 80025fc:	f7fe f8c8 	bl	8000790 <AIC3X_Init>
 8002600:	4603      	mov	r3, r0
 8002602:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	if (status != HAL_OK)
 8002606:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800260a:	2b00      	cmp	r3, #0
 800260c:	d002      	beq.n	8002614 <codecSetup+0x34>
	{
		return status;
 800260e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002612:	e0d3      	b.n	80027bc <codecSetup+0x1dc>
	}

	AIC3X_ASDIntCtrl_TypeDef asdIntCtrl =
 8002614:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002618:	2200      	movs	r2, #0
 800261a:	601a      	str	r2, [r3, #0]
 800261c:	605a      	str	r2, [r3, #4]
 800261e:	609a      	str	r2, [r3, #8]
 8002620:	2301      	movs	r3, #1
 8002622:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
			.ClkDriveCtrl = false, .Effect3D = false, .TransferMode =
					AIC3X_ASD_I2S, .WordLength = AIC3X_ASD_16_BIT,
			.Bclk265ClockMode = false, .DACResync = false, .ADCResync = false,
			.ReSyncMute = false, .WordOffset = 0 };

	status = AIC3X_WriteASDataIntfControl(&aic3xHandle, &asdIntCtrl);
 8002626:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800262a:	4619      	mov	r1, r3
 800262c:	4865      	ldr	r0, [pc, #404]	@ (80027c4 <codecSetup+0x1e4>)
 800262e:	f7fe f994 	bl	800095a <AIC3X_WriteASDataIntfControl>
 8002632:	4603      	mov	r3, r0
 8002634:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	if (status != HAL_OK)
 8002638:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800263c:	2b00      	cmp	r3, #0
 800263e:	d002      	beq.n	8002646 <codecSetup+0x66>
	{
		return status;
 8002640:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002644:	e0ba      	b.n	80027bc <codecSetup+0x1dc>
//	  				.PllR = 8
//	  		};
//
//	  		status = USER_AIC3X_WritePllProgramming(&aic3xHandle, &pllProgramming);

	AIC3X_PGAGainControl_TypeDef pgaGainControl =
 8002646:	2300      	movs	r3, #0
 8002648:	627b      	str	r3, [r7, #36]	@ 0x24
	{ .LADCMuted = false, .LADCGain = 0, .RADCMuted = false, .RADCGain = 0 };

	AIC3X_ADCMixControl_TypeDef adcMixControl =
 800264a:	4b61      	ldr	r3, [pc, #388]	@ (80027d0 <codecSetup+0x1f0>)
 800264c:	f107 0414 	add.w	r4, r7, #20
 8002650:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002652:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
					.RightADC_MIC1RPGain = 0b1111, .RightADC_PowerUp = true,
					.RightADC_PGASoftStepping = 0b00,
					.RightADC_MIC1LPDifferential = false, .RightADC_MIC1LPGain =
							0b1111 };

	status = AIC3X_WriteADCMixControl(&aic3xHandle, &adcMixControl);
 8002656:	f107 0314 	add.w	r3, r7, #20
 800265a:	4619      	mov	r1, r3
 800265c:	4859      	ldr	r0, [pc, #356]	@ (80027c4 <codecSetup+0x1e4>)
 800265e:	f7fe fa32 	bl	8000ac6 <AIC3X_WriteADCMixControl>
 8002662:	4603      	mov	r3, r0
 8002664:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	if (status != HAL_OK)
 8002668:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800266c:	2b00      	cmp	r3, #0
 800266e:	d002      	beq.n	8002676 <codecSetup+0x96>
	{
		return status;
 8002670:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002674:	e0a2      	b.n	80027bc <codecSetup+0x1dc>
	}

	status = AIC3X_WritePGAGainControl(&aic3xHandle, &pgaGainControl);
 8002676:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800267a:	4619      	mov	r1, r3
 800267c:	4851      	ldr	r0, [pc, #324]	@ (80027c4 <codecSetup+0x1e4>)
 800267e:	f7fe f9db 	bl	8000a38 <AIC3X_WritePGAGainControl>
 8002682:	4603      	mov	r3, r0
 8002684:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	if (status != HAL_OK)
 8002688:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800268c:	2b00      	cmp	r3, #0
 800268e:	d002      	beq.n	8002696 <codecSetup+0xb6>
	{
		return status;
 8002690:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002694:	e092      	b.n	80027bc <codecSetup+0x1dc>
	}

	AIC3X_DataPathControl_TypeDef dataPathControl =
 8002696:	4b4f      	ldr	r3, [pc, #316]	@ (80027d4 <codecSetup+0x1f4>)
 8002698:	881b      	ldrh	r3, [r3, #0]
 800269a:	823b      	strh	r3, [r7, #16]
	{ .LeftDACDataPath = AIC3X_DATAPATH_STRAIGHT, .RightDACDataPath =
			AIC3X_DATAPATH_STRAIGHT };

	status = AIC3X_WriteDataPathControl(&aic3xHandle, &dataPathControl);
 800269c:	f107 0310 	add.w	r3, r7, #16
 80026a0:	4619      	mov	r1, r3
 80026a2:	4848      	ldr	r0, [pc, #288]	@ (80027c4 <codecSetup+0x1e4>)
 80026a4:	f7fe f91a 	bl	80008dc <AIC3X_WriteDataPathControl>
 80026a8:	4603      	mov	r3, r0
 80026aa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	if (status != HAL_OK)
 80026ae:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d002      	beq.n	80026bc <codecSetup+0xdc>
	{
		return status;
 80026b6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80026ba:	e07f      	b.n	80027bc <codecSetup+0x1dc>
	}

	AIC3X_DACPowerControl_TypeDef dacPowerControl =
 80026bc:	4b46      	ldr	r3, [pc, #280]	@ (80027d8 <codecSetup+0x1f8>)
 80026be:	881b      	ldrh	r3, [r3, #0]
 80026c0:	81bb      	strh	r3, [r7, #12]
	{ .LeftDACPoweredUp = true, .RightDACPoweredUp = true };

	status = AIC3X_WriteDACPowerControl(&aic3xHandle, &dacPowerControl);
 80026c2:	f107 030c 	add.w	r3, r7, #12
 80026c6:	4619      	mov	r1, r3
 80026c8:	483e      	ldr	r0, [pc, #248]	@ (80027c4 <codecSetup+0x1e4>)
 80026ca:	f7fe fb3a 	bl	8000d42 <AIC3X_WriteDACPowerControl>
 80026ce:	4603      	mov	r3, r0
 80026d0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	if (status != HAL_OK)
 80026d4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d002      	beq.n	80026e2 <codecSetup+0x102>
	{
		return status;
 80026dc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80026e0:	e06c      	b.n	80027bc <codecSetup+0x1dc>
	}

	AIC3X_VolControl_TypeDef defaultVolControl =
 80026e2:	2300      	movs	r3, #0
 80026e4:	723b      	strb	r3, [r7, #8]
 80026e6:	2300      	movs	r3, #0
 80026e8:	727b      	strb	r3, [r7, #9]
	{ .Muted = false, .Volume = 0, };

	status = AIC3X_WriteVolControl(&aic3xHandle, LDAC_VOL, &defaultVolControl);
 80026ea:	f107 0308 	add.w	r3, r7, #8
 80026ee:	461a      	mov	r2, r3
 80026f0:	212b      	movs	r1, #43	@ 0x2b
 80026f2:	4834      	ldr	r0, [pc, #208]	@ (80027c4 <codecSetup+0x1e4>)
 80026f4:	f7fe fb69 	bl	8000dca <AIC3X_WriteVolControl>
 80026f8:	4603      	mov	r3, r0
 80026fa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	if (status != HAL_OK)
 80026fe:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002702:	2b00      	cmp	r3, #0
 8002704:	d002      	beq.n	800270c <codecSetup+0x12c>
	{
		return status;
 8002706:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800270a:	e057      	b.n	80027bc <codecSetup+0x1dc>
	}

	status = AIC3X_WriteVolControl(&aic3xHandle, RDAC_VOL, &defaultVolControl);
 800270c:	f107 0308 	add.w	r3, r7, #8
 8002710:	461a      	mov	r2, r3
 8002712:	212c      	movs	r1, #44	@ 0x2c
 8002714:	482b      	ldr	r0, [pc, #172]	@ (80027c4 <codecSetup+0x1e4>)
 8002716:	f7fe fb58 	bl	8000dca <AIC3X_WriteVolControl>
 800271a:	4603      	mov	r3, r0
 800271c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	if (status != HAL_OK)
 8002720:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002724:	2b00      	cmp	r3, #0
 8002726:	d002      	beq.n	800272e <codecSetup+0x14e>
	{
		return status;
 8002728:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800272c:	e046      	b.n	80027bc <codecSetup+0x1dc>
	}

	status = AIC3X_WriteVolControl(&aic3xHandle, DACL1_2_LLOPM_VOL,
 800272e:	f107 0308 	add.w	r3, r7, #8
 8002732:	461a      	mov	r2, r3
 8002734:	2152      	movs	r1, #82	@ 0x52
 8002736:	4823      	ldr	r0, [pc, #140]	@ (80027c4 <codecSetup+0x1e4>)
 8002738:	f7fe fb47 	bl	8000dca <AIC3X_WriteVolControl>
 800273c:	4603      	mov	r3, r0
 800273e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			&defaultVolControl);

	if (status != HAL_OK)
 8002742:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002746:	2b00      	cmp	r3, #0
 8002748:	d002      	beq.n	8002750 <codecSetup+0x170>
	{
		return status;
 800274a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800274e:	e035      	b.n	80027bc <codecSetup+0x1dc>
	}

	status = AIC3X_WriteVolControl(&aic3xHandle, DACR1_2_RLOPM_VOL,
 8002750:	f107 0308 	add.w	r3, r7, #8
 8002754:	461a      	mov	r2, r3
 8002756:	215c      	movs	r1, #92	@ 0x5c
 8002758:	481a      	ldr	r0, [pc, #104]	@ (80027c4 <codecSetup+0x1e4>)
 800275a:	f7fe fb36 	bl	8000dca <AIC3X_WriteVolControl>
 800275e:	4603      	mov	r3, r0
 8002760:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			&defaultVolControl);

	if (status != HAL_OK)
 8002764:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002768:	2b00      	cmp	r3, #0
 800276a:	d002      	beq.n	8002772 <codecSetup+0x192>
	{
		return status;
 800276c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002770:	e024      	b.n	80027bc <codecSetup+0x1dc>
	}

	AIC3X_OutputLevelControl_TypeDef defaultOutputLevelControl =
 8002772:	2300      	movs	r3, #0
 8002774:	703b      	strb	r3, [r7, #0]
 8002776:	2300      	movs	r3, #0
 8002778:	707b      	strb	r3, [r7, #1]
 800277a:	2300      	movs	r3, #0
 800277c:	70bb      	strb	r3, [r7, #2]
 800277e:	2300      	movs	r3, #0
 8002780:	70fb      	strb	r3, [r7, #3]
 8002782:	2301      	movs	r3, #1
 8002784:	713b      	strb	r3, [r7, #4]
	{ .Level = 0, .Muted = false, .PowerDownDriveControl = false,
			.VolumeControlStatus = false, .PowerControl = true };

	status = AIC3X_WriteOutputLevelControl(&aic3xHandle, LLOPM_CTRL,
 8002786:	463b      	mov	r3, r7
 8002788:	461a      	mov	r2, r3
 800278a:	2156      	movs	r1, #86	@ 0x56
 800278c:	480d      	ldr	r0, [pc, #52]	@ (80027c4 <codecSetup+0x1e4>)
 800278e:	f7fe fb6b 	bl	8000e68 <AIC3X_WriteOutputLevelControl>
 8002792:	4603      	mov	r3, r0
 8002794:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			&defaultOutputLevelControl);

	if (status != HAL_OK)
 8002798:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800279c:	2b00      	cmp	r3, #0
 800279e:	d002      	beq.n	80027a6 <codecSetup+0x1c6>
	{
		return status;
 80027a0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80027a4:	e00a      	b.n	80027bc <codecSetup+0x1dc>
	}

	status = AIC3X_WriteOutputLevelControl(&aic3xHandle, RLOPM_CTRL,
 80027a6:	463b      	mov	r3, r7
 80027a8:	461a      	mov	r2, r3
 80027aa:	215d      	movs	r1, #93	@ 0x5d
 80027ac:	4805      	ldr	r0, [pc, #20]	@ (80027c4 <codecSetup+0x1e4>)
 80027ae:	f7fe fb5b 	bl	8000e68 <AIC3X_WriteOutputLevelControl>
 80027b2:	4603      	mov	r3, r0
 80027b4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			&defaultOutputLevelControl);

	return status;
 80027b8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 80027bc:	4618      	mov	r0, r3
 80027be:	373c      	adds	r7, #60	@ 0x3c
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd90      	pop	{r4, r7, pc}
 80027c4:	24000e24 	.word	0x24000e24
 80027c8:	24000b1c 	.word	0x24000b1c
 80027cc:	58021000 	.word	0x58021000
 80027d0:	0800d624 	.word	0x0800d624
 80027d4:	0800d634 	.word	0x0800d634
 80027d8:	0800d638 	.word	0x0800d638

080027dc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80027e0:	b672      	cpsid	i
}
 80027e2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
	{
		__BKPT();
 80027e4:	be00      	bkpt	0x0000
 80027e6:	e7fd      	b.n	80027e4 <Error_Handler+0x8>

080027e8 <MDMA_init>:
MDMA_HandleTypeDef *MDMA_hmdmaTxInstance;



void MDMA_init(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b09a      	sub	sp, #104	@ 0x68
 80027ec:	af00      	add	r7, sp, #0
	__HAL_RCC_MDMA_CLK_ENABLE();
 80027ee:	4b88      	ldr	r3, [pc, #544]	@ (8002a10 <MDMA_init+0x228>)
 80027f0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80027f4:	4a86      	ldr	r2, [pc, #536]	@ (8002a10 <MDMA_init+0x228>)
 80027f6:	f043 0301 	orr.w	r3, r3, #1
 80027fa:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80027fe:	4b84      	ldr	r3, [pc, #528]	@ (8002a10 <MDMA_init+0x228>)
 8002800:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002804:	f003 0301 	and.w	r3, r3, #1
 8002808:	607b      	str	r3, [r7, #4]
 800280a:	687b      	ldr	r3, [r7, #4]
	/* Local variables */
	MDMA_LinkNodeConfTypeDef nodeConfig;

	/* Configure MDMA channel MDMA_Channel0 */
	MDMA_ch0Sw0.Instance = MDMA_Channel0;
 800280c:	4b81      	ldr	r3, [pc, #516]	@ (8002a14 <MDMA_init+0x22c>)
 800280e:	4a82      	ldr	r2, [pc, #520]	@ (8002a18 <MDMA_init+0x230>)
 8002810:	601a      	str	r2, [r3, #0]
	MDMA_ch0Sw0.Init.Request = MDMA_REQUEST_SW;
 8002812:	4b80      	ldr	r3, [pc, #512]	@ (8002a14 <MDMA_init+0x22c>)
 8002814:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002818:	605a      	str	r2, [r3, #4]
	MDMA_ch0Sw0.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 800281a:	4b7e      	ldr	r3, [pc, #504]	@ (8002a14 <MDMA_init+0x22c>)
 800281c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002820:	609a      	str	r2, [r3, #8]
	MDMA_ch0Sw0.Init.Priority = MDMA_PRIORITY_HIGH;
 8002822:	4b7c      	ldr	r3, [pc, #496]	@ (8002a14 <MDMA_init+0x22c>)
 8002824:	2280      	movs	r2, #128	@ 0x80
 8002826:	60da      	str	r2, [r3, #12]
	MDMA_ch0Sw0.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8002828:	4b7a      	ldr	r3, [pc, #488]	@ (8002a14 <MDMA_init+0x22c>)
 800282a:	2200      	movs	r2, #0
 800282c:	611a      	str	r2, [r3, #16]
	MDMA_ch0Sw0.Init.SourceInc = MDMA_SRC_INC_WORD;
 800282e:	4b79      	ldr	r3, [pc, #484]	@ (8002a14 <MDMA_init+0x22c>)
 8002830:	f240 2202 	movw	r2, #514	@ 0x202
 8002834:	615a      	str	r2, [r3, #20]
	MDMA_ch0Sw0.Init.DestinationInc = MDMA_DEST_INC_HALFWORD;
 8002836:	4b77      	ldr	r3, [pc, #476]	@ (8002a14 <MDMA_init+0x22c>)
 8002838:	f44f 6281 	mov.w	r2, #1032	@ 0x408
 800283c:	619a      	str	r2, [r3, #24]
	MDMA_ch0Sw0.Init.SourceDataSize = MDMA_SRC_DATASIZE_HALFWORD;
 800283e:	4b75      	ldr	r3, [pc, #468]	@ (8002a14 <MDMA_init+0x22c>)
 8002840:	2210      	movs	r2, #16
 8002842:	61da      	str	r2, [r3, #28]
	MDMA_ch0Sw0.Init.DestDataSize = MDMA_DEST_DATASIZE_HALFWORD;
 8002844:	4b73      	ldr	r3, [pc, #460]	@ (8002a14 <MDMA_init+0x22c>)
 8002846:	2240      	movs	r2, #64	@ 0x40
 8002848:	621a      	str	r2, [r3, #32]
	MDMA_ch0Sw0.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 800284a:	4b72      	ldr	r3, [pc, #456]	@ (8002a14 <MDMA_init+0x22c>)
 800284c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002850:	625a      	str	r2, [r3, #36]	@ 0x24
	MDMA_ch0Sw0.Init.BufferTransferLength = AUDIO_SAMPLE_SIZE;
 8002852:	4b70      	ldr	r3, [pc, #448]	@ (8002a14 <MDMA_init+0x22c>)
 8002854:	2202      	movs	r2, #2
 8002856:	629a      	str	r2, [r3, #40]	@ 0x28
	MDMA_ch0Sw0.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8002858:	4b6e      	ldr	r3, [pc, #440]	@ (8002a14 <MDMA_init+0x22c>)
 800285a:	2200      	movs	r2, #0
 800285c:	62da      	str	r2, [r3, #44]	@ 0x2c
	MDMA_ch0Sw0.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 800285e:	4b6d      	ldr	r3, [pc, #436]	@ (8002a14 <MDMA_init+0x22c>)
 8002860:	2200      	movs	r2, #0
 8002862:	631a      	str	r2, [r3, #48]	@ 0x30
	MDMA_ch0Sw0.Init.SourceBlockAddressOffset = 0;
 8002864:	4b6b      	ldr	r3, [pc, #428]	@ (8002a14 <MDMA_init+0x22c>)
 8002866:	2200      	movs	r2, #0
 8002868:	635a      	str	r2, [r3, #52]	@ 0x34
	MDMA_ch0Sw0.Init.DestBlockAddressOffset = 0;
 800286a:	4b6a      	ldr	r3, [pc, #424]	@ (8002a14 <MDMA_init+0x22c>)
 800286c:	2200      	movs	r2, #0
 800286e:	639a      	str	r2, [r3, #56]	@ 0x38
	if (HAL_MDMA_Init(&MDMA_ch0Sw0) != HAL_OK)
 8002870:	4868      	ldr	r0, [pc, #416]	@ (8002a14 <MDMA_init+0x22c>)
 8002872:	f004 fa82 	bl	8006d7a <HAL_MDMA_Init>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <MDMA_init+0x98>
	{
		Error_Handler();
 800287c:	f7ff ffae 	bl	80027dc <Error_Handler>
	}

	for (size_t i = 0; i < AUDIO_STEREO_CHANNEL_COUNT; i++)
 8002880:	2300      	movs	r3, #0
 8002882:	667b      	str	r3, [r7, #100]	@ 0x64
 8002884:	e0bc      	b.n	8002a00 <MDMA_init+0x218>
	{
		nodeConfig.Init.Request = MDMA_REQUEST_SW;
 8002886:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800288a:	60bb      	str	r3, [r7, #8]
		nodeConfig.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 800288c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002890:	60fb      	str	r3, [r7, #12]
		nodeConfig.Init.Priority = MDMA_PRIORITY_HIGH;
 8002892:	2380      	movs	r3, #128	@ 0x80
 8002894:	613b      	str	r3, [r7, #16]
		nodeConfig.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8002896:	2300      	movs	r3, #0
 8002898:	617b      	str	r3, [r7, #20]
		nodeConfig.Init.SourceInc = MDMA_SRC_INC_WORD;
 800289a:	f240 2302 	movw	r3, #514	@ 0x202
 800289e:	61bb      	str	r3, [r7, #24]
		nodeConfig.Init.DestinationInc = MDMA_DEST_INC_HALFWORD;
 80028a0:	f44f 6381 	mov.w	r3, #1032	@ 0x408
 80028a4:	61fb      	str	r3, [r7, #28]
		nodeConfig.Init.SourceDataSize = MDMA_SRC_DATASIZE_HALFWORD;
 80028a6:	2310      	movs	r3, #16
 80028a8:	623b      	str	r3, [r7, #32]
		nodeConfig.Init.DestDataSize = MDMA_DEST_DATASIZE_HALFWORD;
 80028aa:	2340      	movs	r3, #64	@ 0x40
 80028ac:	627b      	str	r3, [r7, #36]	@ 0x24
		nodeConfig.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 80028ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028b2:	62bb      	str	r3, [r7, #40]	@ 0x28
		nodeConfig.Init.BufferTransferLength = AUDIO_SAMPLE_SIZE;
 80028b4:	2302      	movs	r3, #2
 80028b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
		nodeConfig.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 80028b8:	2300      	movs	r3, #0
 80028ba:	633b      	str	r3, [r7, #48]	@ 0x30
		nodeConfig.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 80028bc:	2300      	movs	r3, #0
 80028be:	637b      	str	r3, [r7, #52]	@ 0x34
		nodeConfig.Init.SourceBlockAddressOffset = 0;
 80028c0:	2300      	movs	r3, #0
 80028c2:	63bb      	str	r3, [r7, #56]	@ 0x38
		nodeConfig.Init.DestBlockAddressOffset = 0;
 80028c4:	2300      	movs	r3, #0
 80028c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		nodeConfig.PostRequestMaskAddress = 0;
 80028c8:	2300      	movs	r3, #0
 80028ca:	653b      	str	r3, [r7, #80]	@ 0x50
		nodeConfig.PostRequestMaskData = 0;
 80028cc:	2300      	movs	r3, #0
 80028ce:	657b      	str	r3, [r7, #84]	@ 0x54
		nodeConfig.SrcAddress =
				(uint32_t) ABUF_saiBufferPtrs[i].leftRxFirstHalf;
 80028d0:	4a52      	ldr	r2, [pc, #328]	@ (8002a1c <MDMA_init+0x234>)
 80028d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80028d4:	015b      	lsls	r3, r3, #5
 80028d6:	4413      	add	r3, r2
 80028d8:	681b      	ldr	r3, [r3, #0]
		nodeConfig.SrcAddress =
 80028da:	643b      	str	r3, [r7, #64]	@ 0x40
		nodeConfig.DstAddress =
				(uint32_t) ABUF_audioBufferPtrs[i].leftRxFirstHalf;
 80028dc:	4a50      	ldr	r2, [pc, #320]	@ (8002a20 <MDMA_init+0x238>)
 80028de:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80028e0:	015b      	lsls	r3, r3, #5
 80028e2:	4413      	add	r3, r2
 80028e4:	681b      	ldr	r3, [r3, #0]
		nodeConfig.DstAddress =
 80028e6:	647b      	str	r3, [r7, #68]	@ 0x44
		nodeConfig.BlockDataLength = AUDIO_BUFFER_SIZE_HALF;
 80028e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80028ec:	64bb      	str	r3, [r7, #72]	@ 0x48
		nodeConfig.BlockCount = 1;
 80028ee:	2301      	movs	r3, #1
 80028f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (HAL_MDMA_LinkedList_CreateNode(&MDMA_ch0Nodes[i * 2], &nodeConfig)
 80028f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80028f4:	005a      	lsls	r2, r3, #1
 80028f6:	4613      	mov	r3, r2
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	4413      	add	r3, r2
 80028fc:	00db      	lsls	r3, r3, #3
 80028fe:	4a49      	ldr	r2, [pc, #292]	@ (8002a24 <MDMA_init+0x23c>)
 8002900:	4413      	add	r3, r2
 8002902:	f107 0208 	add.w	r2, r7, #8
 8002906:	4611      	mov	r1, r2
 8002908:	4618      	mov	r0, r3
 800290a:	f004 fadd 	bl	8006ec8 <HAL_MDMA_LinkedList_CreateNode>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d001      	beq.n	8002918 <MDMA_init+0x130>
				!= HAL_OK)
		{
			Error_Handler();
 8002914:	f7ff ff62 	bl	80027dc <Error_Handler>
		}
		if (HAL_MDMA_LinkedList_AddNode(&MDMA_ch0Sw0, &MDMA_ch0Nodes[i * 2], 0)
 8002918:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800291a:	005a      	lsls	r2, r3, #1
 800291c:	4613      	mov	r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	4413      	add	r3, r2
 8002922:	00db      	lsls	r3, r3, #3
 8002924:	4a3f      	ldr	r2, [pc, #252]	@ (8002a24 <MDMA_init+0x23c>)
 8002926:	4413      	add	r3, r2
 8002928:	2200      	movs	r2, #0
 800292a:	4619      	mov	r1, r3
 800292c:	4839      	ldr	r0, [pc, #228]	@ (8002a14 <MDMA_init+0x22c>)
 800292e:	f004 fba7 	bl	8007080 <HAL_MDMA_LinkedList_AddNode>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d001      	beq.n	800293c <MDMA_init+0x154>
				!= HAL_OK)
		{
			Error_Handler();
 8002938:	f7ff ff50 	bl	80027dc <Error_Handler>
		}
		nodeConfig.Init.Request = MDMA_REQUEST_SW;
 800293c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002940:	60bb      	str	r3, [r7, #8]
		nodeConfig.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 8002942:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002946:	60fb      	str	r3, [r7, #12]
		nodeConfig.Init.Priority = MDMA_PRIORITY_HIGH;
 8002948:	2380      	movs	r3, #128	@ 0x80
 800294a:	613b      	str	r3, [r7, #16]
		nodeConfig.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 800294c:	2300      	movs	r3, #0
 800294e:	617b      	str	r3, [r7, #20]
		nodeConfig.Init.SourceInc = MDMA_SRC_INC_WORD;
 8002950:	f240 2302 	movw	r3, #514	@ 0x202
 8002954:	61bb      	str	r3, [r7, #24]
		nodeConfig.Init.DestinationInc = MDMA_DEST_INC_HALFWORD;
 8002956:	f44f 6381 	mov.w	r3, #1032	@ 0x408
 800295a:	61fb      	str	r3, [r7, #28]
		nodeConfig.Init.SourceDataSize = MDMA_SRC_DATASIZE_HALFWORD;
 800295c:	2310      	movs	r3, #16
 800295e:	623b      	str	r3, [r7, #32]
		nodeConfig.Init.DestDataSize = MDMA_DEST_DATASIZE_HALFWORD;
 8002960:	2340      	movs	r3, #64	@ 0x40
 8002962:	627b      	str	r3, [r7, #36]	@ 0x24
		nodeConfig.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8002964:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002968:	62bb      	str	r3, [r7, #40]	@ 0x28
		nodeConfig.Init.BufferTransferLength = AUDIO_SAMPLE_SIZE;
 800296a:	2302      	movs	r3, #2
 800296c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		nodeConfig.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 800296e:	2300      	movs	r3, #0
 8002970:	633b      	str	r3, [r7, #48]	@ 0x30
		nodeConfig.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8002972:	2300      	movs	r3, #0
 8002974:	637b      	str	r3, [r7, #52]	@ 0x34
		nodeConfig.Init.SourceBlockAddressOffset = 0;
 8002976:	2300      	movs	r3, #0
 8002978:	63bb      	str	r3, [r7, #56]	@ 0x38
		nodeConfig.Init.DestBlockAddressOffset = 0;
 800297a:	2300      	movs	r3, #0
 800297c:	63fb      	str	r3, [r7, #60]	@ 0x3c
		nodeConfig.PostRequestMaskAddress = 0;
 800297e:	2300      	movs	r3, #0
 8002980:	653b      	str	r3, [r7, #80]	@ 0x50
		nodeConfig.PostRequestMaskData = 0;
 8002982:	2300      	movs	r3, #0
 8002984:	657b      	str	r3, [r7, #84]	@ 0x54
		nodeConfig.SrcAddress =
				(uint32_t) ABUF_saiBufferPtrs[i].rightRxFirstHalf;
 8002986:	4a25      	ldr	r2, [pc, #148]	@ (8002a1c <MDMA_init+0x234>)
 8002988:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800298a:	015b      	lsls	r3, r3, #5
 800298c:	4413      	add	r3, r2
 800298e:	3304      	adds	r3, #4
 8002990:	681b      	ldr	r3, [r3, #0]
		nodeConfig.SrcAddress =
 8002992:	643b      	str	r3, [r7, #64]	@ 0x40
		nodeConfig.DstAddress =
				(uint32_t) ABUF_audioBufferPtrs[i].rightRxFirstHalf;
 8002994:	4a22      	ldr	r2, [pc, #136]	@ (8002a20 <MDMA_init+0x238>)
 8002996:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002998:	015b      	lsls	r3, r3, #5
 800299a:	4413      	add	r3, r2
 800299c:	3304      	adds	r3, #4
 800299e:	681b      	ldr	r3, [r3, #0]
		nodeConfig.DstAddress =
 80029a0:	647b      	str	r3, [r7, #68]	@ 0x44
		nodeConfig.BlockDataLength = AUDIO_BUFFER_SIZE_HALF;
 80029a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80029a6:	64bb      	str	r3, [r7, #72]	@ 0x48
		nodeConfig.BlockCount = 1;
 80029a8:	2301      	movs	r3, #1
 80029aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (HAL_MDMA_LinkedList_CreateNode(&MDMA_ch0Nodes[i * 2 + 1],
 80029ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	1c5a      	adds	r2, r3, #1
 80029b2:	4613      	mov	r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	4413      	add	r3, r2
 80029b8:	00db      	lsls	r3, r3, #3
 80029ba:	4a1a      	ldr	r2, [pc, #104]	@ (8002a24 <MDMA_init+0x23c>)
 80029bc:	4413      	add	r3, r2
 80029be:	f107 0208 	add.w	r2, r7, #8
 80029c2:	4611      	mov	r1, r2
 80029c4:	4618      	mov	r0, r3
 80029c6:	f004 fa7f 	bl	8006ec8 <HAL_MDMA_LinkedList_CreateNode>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d001      	beq.n	80029d4 <MDMA_init+0x1ec>
				&nodeConfig) != HAL_OK)
		{
			Error_Handler();
 80029d0:	f7ff ff04 	bl	80027dc <Error_Handler>
		}
		if (HAL_MDMA_LinkedList_AddNode(&MDMA_ch0Sw0, &MDMA_ch0Nodes[i * 2 + 1],
 80029d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	1c5a      	adds	r2, r3, #1
 80029da:	4613      	mov	r3, r2
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	4413      	add	r3, r2
 80029e0:	00db      	lsls	r3, r3, #3
 80029e2:	4a10      	ldr	r2, [pc, #64]	@ (8002a24 <MDMA_init+0x23c>)
 80029e4:	4413      	add	r3, r2
 80029e6:	2200      	movs	r2, #0
 80029e8:	4619      	mov	r1, r3
 80029ea:	480a      	ldr	r0, [pc, #40]	@ (8002a14 <MDMA_init+0x22c>)
 80029ec:	f004 fb48 	bl	8007080 <HAL_MDMA_LinkedList_AddNode>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <MDMA_init+0x212>
				0) != HAL_OK)
		{
			Error_Handler();
 80029f6:	f7ff fef1 	bl	80027dc <Error_Handler>
	for (size_t i = 0; i < AUDIO_STEREO_CHANNEL_COUNT; i++)
 80029fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80029fc:	3301      	adds	r3, #1
 80029fe:	667b      	str	r3, [r7, #100]	@ 0x64
 8002a00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	f43f af3f 	beq.w	8002886 <MDMA_init+0x9e>
		}
	}
	for (size_t i = 0; i < AUDIO_STEREO_CHANNEL_COUNT;i++)
 8002a08:	2300      	movs	r3, #0
 8002a0a:	663b      	str	r3, [r7, #96]	@ 0x60
 8002a0c:	e0cd      	b.n	8002baa <MDMA_init+0x3c2>
 8002a0e:	bf00      	nop
 8002a10:	58024400 	.word	0x58024400
 8002a14:	24000e38 	.word	0x24000e38
 8002a18:	52000040 	.word	0x52000040
 8002a1c:	24000830 	.word	0x24000830
 8002a20:	24000850 	.word	0x24000850
 8002a24:	24000ea8 	.word	0x24000ea8
	{
		nodeConfig.Init.Request = MDMA_REQUEST_SW;
 8002a28:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002a2c:	60bb      	str	r3, [r7, #8]
		nodeConfig.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 8002a2e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002a32:	60fb      	str	r3, [r7, #12]
		nodeConfig.Init.Priority = MDMA_PRIORITY_HIGH;
 8002a34:	2380      	movs	r3, #128	@ 0x80
 8002a36:	613b      	str	r3, [r7, #16]
		nodeConfig.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	617b      	str	r3, [r7, #20]
		nodeConfig.Init.SourceInc = MDMA_SRC_INC_WORD;
 8002a3c:	f240 2302 	movw	r3, #514	@ 0x202
 8002a40:	61bb      	str	r3, [r7, #24]
		nodeConfig.Init.DestinationInc = MDMA_DEST_INC_HALFWORD;
 8002a42:	f44f 6381 	mov.w	r3, #1032	@ 0x408
 8002a46:	61fb      	str	r3, [r7, #28]
		nodeConfig.Init.SourceDataSize = MDMA_SRC_DATASIZE_HALFWORD;
 8002a48:	2310      	movs	r3, #16
 8002a4a:	623b      	str	r3, [r7, #32]
		nodeConfig.Init.DestDataSize = MDMA_DEST_DATASIZE_HALFWORD;
 8002a4c:	2340      	movs	r3, #64	@ 0x40
 8002a4e:	627b      	str	r3, [r7, #36]	@ 0x24
		nodeConfig.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8002a50:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a54:	62bb      	str	r3, [r7, #40]	@ 0x28
		nodeConfig.Init.BufferTransferLength = AUDIO_SAMPLE_SIZE;
 8002a56:	2302      	movs	r3, #2
 8002a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
		nodeConfig.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	633b      	str	r3, [r7, #48]	@ 0x30
		nodeConfig.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	637b      	str	r3, [r7, #52]	@ 0x34
		nodeConfig.Init.SourceBlockAddressOffset = 0;
 8002a62:	2300      	movs	r3, #0
 8002a64:	63bb      	str	r3, [r7, #56]	@ 0x38
		nodeConfig.Init.DestBlockAddressOffset = 0;
 8002a66:	2300      	movs	r3, #0
 8002a68:	63fb      	str	r3, [r7, #60]	@ 0x3c
		nodeConfig.PostRequestMaskAddress = 0;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	653b      	str	r3, [r7, #80]	@ 0x50
		nodeConfig.PostRequestMaskData = 0;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	657b      	str	r3, [r7, #84]	@ 0x54
		nodeConfig.SrcAddress = (uint32_t) ABUF_saiBufferPtrs[i].leftRxSecHalf;
 8002a72:	4a72      	ldr	r2, [pc, #456]	@ (8002c3c <MDMA_init+0x454>)
 8002a74:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a76:	015b      	lsls	r3, r3, #5
 8002a78:	4413      	add	r3, r2
 8002a7a:	3308      	adds	r3, #8
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	643b      	str	r3, [r7, #64]	@ 0x40
		nodeConfig.DstAddress =
				(uint32_t) ABUF_audioBufferPtrs[i].leftRxSecHalf;
 8002a80:	4a6f      	ldr	r2, [pc, #444]	@ (8002c40 <MDMA_init+0x458>)
 8002a82:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a84:	015b      	lsls	r3, r3, #5
 8002a86:	4413      	add	r3, r2
 8002a88:	3308      	adds	r3, #8
 8002a8a:	681b      	ldr	r3, [r3, #0]
		nodeConfig.DstAddress =
 8002a8c:	647b      	str	r3, [r7, #68]	@ 0x44
		nodeConfig.BlockDataLength = AUDIO_BUFFER_SIZE_HALF;
 8002a8e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a92:	64bb      	str	r3, [r7, #72]	@ 0x48
		nodeConfig.BlockCount = 1;
 8002a94:	2301      	movs	r3, #1
 8002a96:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (HAL_MDMA_LinkedList_CreateNode(
				&MDMA_ch0Nodes[AUDIO_STEREO_CHANNEL_COUNT * 2 + i * 2],
 8002a98:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	005a      	lsls	r2, r3, #1
		if (HAL_MDMA_LinkedList_CreateNode(
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	4413      	add	r3, r2
 8002aa4:	00db      	lsls	r3, r3, #3
 8002aa6:	4a67      	ldr	r2, [pc, #412]	@ (8002c44 <MDMA_init+0x45c>)
 8002aa8:	4413      	add	r3, r2
 8002aaa:	f107 0208 	add.w	r2, r7, #8
 8002aae:	4611      	mov	r1, r2
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f004 fa09 	bl	8006ec8 <HAL_MDMA_LinkedList_CreateNode>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <MDMA_init+0x2d8>
				&nodeConfig) != HAL_OK)
		{
			Error_Handler();
 8002abc:	f7ff fe8e 	bl	80027dc <Error_Handler>
		}
		if (HAL_MDMA_LinkedList_AddNode(&MDMA_ch0Sw0,
				&MDMA_ch0Nodes[AUDIO_STEREO_CHANNEL_COUNT * 2 + i * 2], 0)
 8002ac0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	005a      	lsls	r2, r3, #1
		if (HAL_MDMA_LinkedList_AddNode(&MDMA_ch0Sw0,
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	4413      	add	r3, r2
 8002acc:	00db      	lsls	r3, r3, #3
 8002ace:	4a5d      	ldr	r2, [pc, #372]	@ (8002c44 <MDMA_init+0x45c>)
 8002ad0:	4413      	add	r3, r2
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	485c      	ldr	r0, [pc, #368]	@ (8002c48 <MDMA_init+0x460>)
 8002ad8:	f004 fad2 	bl	8007080 <HAL_MDMA_LinkedList_AddNode>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <MDMA_init+0x2fe>
				!= HAL_OK)
		{
			Error_Handler();
 8002ae2:	f7ff fe7b 	bl	80027dc <Error_Handler>
		}
		nodeConfig.Init.Request = MDMA_REQUEST_SW;
 8002ae6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002aea:	60bb      	str	r3, [r7, #8]
		nodeConfig.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 8002aec:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002af0:	60fb      	str	r3, [r7, #12]
		nodeConfig.Init.Priority = MDMA_PRIORITY_HIGH;
 8002af2:	2380      	movs	r3, #128	@ 0x80
 8002af4:	613b      	str	r3, [r7, #16]
		nodeConfig.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8002af6:	2300      	movs	r3, #0
 8002af8:	617b      	str	r3, [r7, #20]
		nodeConfig.Init.SourceInc = MDMA_SRC_INC_WORD;
 8002afa:	f240 2302 	movw	r3, #514	@ 0x202
 8002afe:	61bb      	str	r3, [r7, #24]
		nodeConfig.Init.DestinationInc = MDMA_DEST_INC_HALFWORD;
 8002b00:	f44f 6381 	mov.w	r3, #1032	@ 0x408
 8002b04:	61fb      	str	r3, [r7, #28]
		nodeConfig.Init.SourceDataSize = MDMA_SRC_DATASIZE_HALFWORD;
 8002b06:	2310      	movs	r3, #16
 8002b08:	623b      	str	r3, [r7, #32]
		nodeConfig.Init.DestDataSize = MDMA_DEST_DATASIZE_HALFWORD;
 8002b0a:	2340      	movs	r3, #64	@ 0x40
 8002b0c:	627b      	str	r3, [r7, #36]	@ 0x24
		nodeConfig.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8002b0e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b12:	62bb      	str	r3, [r7, #40]	@ 0x28
		nodeConfig.Init.BufferTransferLength = AUDIO_SAMPLE_SIZE;
 8002b14:	2302      	movs	r3, #2
 8002b16:	62fb      	str	r3, [r7, #44]	@ 0x2c
		nodeConfig.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	633b      	str	r3, [r7, #48]	@ 0x30
		nodeConfig.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	637b      	str	r3, [r7, #52]	@ 0x34
		nodeConfig.Init.SourceBlockAddressOffset = 0;
 8002b20:	2300      	movs	r3, #0
 8002b22:	63bb      	str	r3, [r7, #56]	@ 0x38
		nodeConfig.Init.DestBlockAddressOffset = 0;
 8002b24:	2300      	movs	r3, #0
 8002b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
		nodeConfig.PostRequestMaskAddress = 0;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	653b      	str	r3, [r7, #80]	@ 0x50
		nodeConfig.PostRequestMaskData = 0;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	657b      	str	r3, [r7, #84]	@ 0x54
		nodeConfig.SrcAddress = (uint32_t) ABUF_saiBufferPtrs[i].rightRxSecHalf;
 8002b30:	4a42      	ldr	r2, [pc, #264]	@ (8002c3c <MDMA_init+0x454>)
 8002b32:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b34:	015b      	lsls	r3, r3, #5
 8002b36:	4413      	add	r3, r2
 8002b38:	330c      	adds	r3, #12
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	643b      	str	r3, [r7, #64]	@ 0x40
		nodeConfig.DstAddress =
				(uint32_t) ABUF_audioBufferPtrs[i].rightRxSecHalf;
 8002b3e:	4a40      	ldr	r2, [pc, #256]	@ (8002c40 <MDMA_init+0x458>)
 8002b40:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b42:	015b      	lsls	r3, r3, #5
 8002b44:	4413      	add	r3, r2
 8002b46:	330c      	adds	r3, #12
 8002b48:	681b      	ldr	r3, [r3, #0]
		nodeConfig.DstAddress =
 8002b4a:	647b      	str	r3, [r7, #68]	@ 0x44
		nodeConfig.BlockDataLength = AUDIO_BUFFER_SIZE_HALF;
 8002b4c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b50:	64bb      	str	r3, [r7, #72]	@ 0x48
		nodeConfig.BlockCount = 1;
 8002b52:	2301      	movs	r3, #1
 8002b54:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (HAL_MDMA_LinkedList_CreateNode(
				&MDMA_ch0Nodes[AUDIO_STEREO_CHANNEL_COUNT * 2 + i * 2 + 1],
 8002b56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	1cda      	adds	r2, r3, #3
		if (HAL_MDMA_LinkedList_CreateNode(
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	4413      	add	r3, r2
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	4a37      	ldr	r2, [pc, #220]	@ (8002c44 <MDMA_init+0x45c>)
 8002b66:	4413      	add	r3, r2
 8002b68:	f107 0208 	add.w	r2, r7, #8
 8002b6c:	4611      	mov	r1, r2
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f004 f9aa 	bl	8006ec8 <HAL_MDMA_LinkedList_CreateNode>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <MDMA_init+0x396>
				&nodeConfig) != HAL_OK)
		{
			Error_Handler();
 8002b7a:	f7ff fe2f 	bl	80027dc <Error_Handler>
		}
		if (HAL_MDMA_LinkedList_AddNode(&MDMA_ch0Sw0,
				&MDMA_ch0Nodes[AUDIO_STEREO_CHANNEL_COUNT * 2 + i * 2 + 1], 0)
 8002b7e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	1cda      	adds	r2, r3, #3
		if (HAL_MDMA_LinkedList_AddNode(&MDMA_ch0Sw0,
 8002b84:	4613      	mov	r3, r2
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	4413      	add	r3, r2
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	4a2d      	ldr	r2, [pc, #180]	@ (8002c44 <MDMA_init+0x45c>)
 8002b8e:	4413      	add	r3, r2
 8002b90:	2200      	movs	r2, #0
 8002b92:	4619      	mov	r1, r3
 8002b94:	482c      	ldr	r0, [pc, #176]	@ (8002c48 <MDMA_init+0x460>)
 8002b96:	f004 fa73 	bl	8007080 <HAL_MDMA_LinkedList_AddNode>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <MDMA_init+0x3bc>
				!= HAL_OK)
		{
			Error_Handler();
 8002ba0:	f7ff fe1c 	bl	80027dc <Error_Handler>
	for (size_t i = 0; i < AUDIO_STEREO_CHANNEL_COUNT;i++)
 8002ba4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	663b      	str	r3, [r7, #96]	@ 0x60
 8002baa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	f43f af3b 	beq.w	8002a28 <MDMA_init+0x240>
		}
	}

	if (HAL_MDMA_LinkedList_EnableCircularMode(&MDMA_ch0Sw0) != HAL_OK)
 8002bb2:	4825      	ldr	r0, [pc, #148]	@ (8002c48 <MDMA_init+0x460>)
 8002bb4:	f004 fb28 	bl	8007208 <HAL_MDMA_LinkedList_EnableCircularMode>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <MDMA_init+0x3da>
	{
		Error_Handler();
 8002bbe:	f7ff fe0d 	bl	80027dc <Error_Handler>
	}

	/* Configure MDMA channel MDMA_Channel1 */
	MDMA_ch1Sw0.Instance = MDMA_Channel1;
 8002bc2:	4b22      	ldr	r3, [pc, #136]	@ (8002c4c <MDMA_init+0x464>)
 8002bc4:	4a22      	ldr	r2, [pc, #136]	@ (8002c50 <MDMA_init+0x468>)
 8002bc6:	601a      	str	r2, [r3, #0]
	MDMA_ch1Sw0.Init.Request = MDMA_REQUEST_SW;
 8002bc8:	4b20      	ldr	r3, [pc, #128]	@ (8002c4c <MDMA_init+0x464>)
 8002bca:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002bce:	605a      	str	r2, [r3, #4]
	MDMA_ch1Sw0.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 8002bd0:	4b1e      	ldr	r3, [pc, #120]	@ (8002c4c <MDMA_init+0x464>)
 8002bd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002bd6:	609a      	str	r2, [r3, #8]
	MDMA_ch1Sw0.Init.Priority = MDMA_PRIORITY_HIGH;
 8002bd8:	4b1c      	ldr	r3, [pc, #112]	@ (8002c4c <MDMA_init+0x464>)
 8002bda:	2280      	movs	r2, #128	@ 0x80
 8002bdc:	60da      	str	r2, [r3, #12]
	MDMA_ch1Sw0.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8002bde:	4b1b      	ldr	r3, [pc, #108]	@ (8002c4c <MDMA_init+0x464>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	611a      	str	r2, [r3, #16]
	MDMA_ch1Sw0.Init.SourceInc = MDMA_SRC_INC_HALFWORD;
 8002be4:	4b19      	ldr	r3, [pc, #100]	@ (8002c4c <MDMA_init+0x464>)
 8002be6:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8002bea:	615a      	str	r2, [r3, #20]
	MDMA_ch1Sw0.Init.DestinationInc = MDMA_DEST_INC_WORD;
 8002bec:	4b17      	ldr	r3, [pc, #92]	@ (8002c4c <MDMA_init+0x464>)
 8002bee:	f640 0208 	movw	r2, #2056	@ 0x808
 8002bf2:	619a      	str	r2, [r3, #24]
	MDMA_ch1Sw0.Init.SourceDataSize = MDMA_SRC_DATASIZE_HALFWORD;
 8002bf4:	4b15      	ldr	r3, [pc, #84]	@ (8002c4c <MDMA_init+0x464>)
 8002bf6:	2210      	movs	r2, #16
 8002bf8:	61da      	str	r2, [r3, #28]
	MDMA_ch1Sw0.Init.DestDataSize = MDMA_DEST_DATASIZE_HALFWORD;
 8002bfa:	4b14      	ldr	r3, [pc, #80]	@ (8002c4c <MDMA_init+0x464>)
 8002bfc:	2240      	movs	r2, #64	@ 0x40
 8002bfe:	621a      	str	r2, [r3, #32]
	MDMA_ch1Sw0.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8002c00:	4b12      	ldr	r3, [pc, #72]	@ (8002c4c <MDMA_init+0x464>)
 8002c02:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c06:	625a      	str	r2, [r3, #36]	@ 0x24
	MDMA_ch1Sw0.Init.BufferTransferLength = AUDIO_SAMPLE_SIZE;
 8002c08:	4b10      	ldr	r3, [pc, #64]	@ (8002c4c <MDMA_init+0x464>)
 8002c0a:	2202      	movs	r2, #2
 8002c0c:	629a      	str	r2, [r3, #40]	@ 0x28
	MDMA_ch1Sw0.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8002c0e:	4b0f      	ldr	r3, [pc, #60]	@ (8002c4c <MDMA_init+0x464>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	62da      	str	r2, [r3, #44]	@ 0x2c
	MDMA_ch1Sw0.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8002c14:	4b0d      	ldr	r3, [pc, #52]	@ (8002c4c <MDMA_init+0x464>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	631a      	str	r2, [r3, #48]	@ 0x30
	MDMA_ch1Sw0.Init.SourceBlockAddressOffset = 0;
 8002c1a:	4b0c      	ldr	r3, [pc, #48]	@ (8002c4c <MDMA_init+0x464>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	635a      	str	r2, [r3, #52]	@ 0x34
	MDMA_ch1Sw0.Init.DestBlockAddressOffset = 0;
 8002c20:	4b0a      	ldr	r3, [pc, #40]	@ (8002c4c <MDMA_init+0x464>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	639a      	str	r2, [r3, #56]	@ 0x38
	if (HAL_MDMA_Init(&MDMA_ch1Sw0) != HAL_OK)
 8002c26:	4809      	ldr	r0, [pc, #36]	@ (8002c4c <MDMA_init+0x464>)
 8002c28:	f004 f8a7 	bl	8006d7a <HAL_MDMA_Init>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <MDMA_init+0x44e>
	{
		Error_Handler();
 8002c32:	f7ff fdd3 	bl	80027dc <Error_Handler>
	}

	for (size_t i = 0; i < AUDIO_STEREO_CHANNEL_COUNT;i++)
 8002c36:	2300      	movs	r3, #0
 8002c38:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002c3a:	e0ca      	b.n	8002dd2 <MDMA_init+0x5ea>
 8002c3c:	24000830 	.word	0x24000830
 8002c40:	24000850 	.word	0x24000850
 8002c44:	24000ea8 	.word	0x24000ea8
 8002c48:	24000e38 	.word	0x24000e38
 8002c4c:	24000f48 	.word	0x24000f48
 8002c50:	52000080 	.word	0x52000080
	{
		nodeConfig.Init.Request = MDMA_REQUEST_SW;
 8002c54:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002c58:	60bb      	str	r3, [r7, #8]
		nodeConfig.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 8002c5a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002c5e:	60fb      	str	r3, [r7, #12]
		nodeConfig.Init.Priority = MDMA_PRIORITY_HIGH;
 8002c60:	2380      	movs	r3, #128	@ 0x80
 8002c62:	613b      	str	r3, [r7, #16]
		nodeConfig.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8002c64:	2300      	movs	r3, #0
 8002c66:	617b      	str	r3, [r7, #20]
		nodeConfig.Init.SourceInc = MDMA_SRC_INC_HALFWORD;
 8002c68:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8002c6c:	61bb      	str	r3, [r7, #24]
		nodeConfig.Init.DestinationInc = MDMA_DEST_INC_WORD;
 8002c6e:	f640 0308 	movw	r3, #2056	@ 0x808
 8002c72:	61fb      	str	r3, [r7, #28]
		nodeConfig.Init.SourceDataSize = MDMA_SRC_DATASIZE_HALFWORD;
 8002c74:	2310      	movs	r3, #16
 8002c76:	623b      	str	r3, [r7, #32]
		nodeConfig.Init.DestDataSize = MDMA_DEST_DATASIZE_HALFWORD;
 8002c78:	2340      	movs	r3, #64	@ 0x40
 8002c7a:	627b      	str	r3, [r7, #36]	@ 0x24
		nodeConfig.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8002c7c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c80:	62bb      	str	r3, [r7, #40]	@ 0x28
		nodeConfig.Init.BufferTransferLength = AUDIO_SAMPLE_SIZE;
 8002c82:	2302      	movs	r3, #2
 8002c84:	62fb      	str	r3, [r7, #44]	@ 0x2c
		nodeConfig.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8002c86:	2300      	movs	r3, #0
 8002c88:	633b      	str	r3, [r7, #48]	@ 0x30
		nodeConfig.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	637b      	str	r3, [r7, #52]	@ 0x34
		nodeConfig.Init.SourceBlockAddressOffset = 0;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	63bb      	str	r3, [r7, #56]	@ 0x38
		nodeConfig.Init.DestBlockAddressOffset = 0;
 8002c92:	2300      	movs	r3, #0
 8002c94:	63fb      	str	r3, [r7, #60]	@ 0x3c
		nodeConfig.PostRequestMaskAddress = 0;
 8002c96:	2300      	movs	r3, #0
 8002c98:	653b      	str	r3, [r7, #80]	@ 0x50
		nodeConfig.PostRequestMaskData = 0;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	657b      	str	r3, [r7, #84]	@ 0x54
		nodeConfig.SrcAddress =
				(uint32_t) ABUF_audioBufferPtrs[i].leftTxFirstHalf;
 8002c9e:	4a50      	ldr	r2, [pc, #320]	@ (8002de0 <MDMA_init+0x5f8>)
 8002ca0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ca2:	015b      	lsls	r3, r3, #5
 8002ca4:	4413      	add	r3, r2
 8002ca6:	3310      	adds	r3, #16
 8002ca8:	681b      	ldr	r3, [r3, #0]
		nodeConfig.SrcAddress =
 8002caa:	643b      	str	r3, [r7, #64]	@ 0x40
		nodeConfig.DstAddress =
				(uint32_t) ABUF_saiBufferPtrs[i].leftTxFirstHalf;
 8002cac:	4a4d      	ldr	r2, [pc, #308]	@ (8002de4 <MDMA_init+0x5fc>)
 8002cae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002cb0:	015b      	lsls	r3, r3, #5
 8002cb2:	4413      	add	r3, r2
 8002cb4:	3310      	adds	r3, #16
 8002cb6:	681b      	ldr	r3, [r3, #0]
		nodeConfig.DstAddress =
 8002cb8:	647b      	str	r3, [r7, #68]	@ 0x44
		nodeConfig.BlockDataLength = AUDIO_BUFFER_SIZE_HALF;
 8002cba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002cbe:	64bb      	str	r3, [r7, #72]	@ 0x48
		nodeConfig.BlockCount = 1;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (HAL_MDMA_LinkedList_CreateNode(&MDMA_ch1Nodes[i * 2], &nodeConfig)
 8002cc4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002cc6:	005a      	lsls	r2, r3, #1
 8002cc8:	4613      	mov	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	4413      	add	r3, r2
 8002cce:	00db      	lsls	r3, r3, #3
 8002cd0:	4a45      	ldr	r2, [pc, #276]	@ (8002de8 <MDMA_init+0x600>)
 8002cd2:	4413      	add	r3, r2
 8002cd4:	f107 0208 	add.w	r2, r7, #8
 8002cd8:	4611      	mov	r1, r2
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f004 f8f4 	bl	8006ec8 <HAL_MDMA_LinkedList_CreateNode>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <MDMA_init+0x502>
				!= HAL_OK)
		{
			Error_Handler();
 8002ce6:	f7ff fd79 	bl	80027dc <Error_Handler>
		}
		if (HAL_MDMA_LinkedList_AddNode(&MDMA_ch1Sw0, &MDMA_ch1Nodes[i * 2], 0)
 8002cea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002cec:	005a      	lsls	r2, r3, #1
 8002cee:	4613      	mov	r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	4413      	add	r3, r2
 8002cf4:	00db      	lsls	r3, r3, #3
 8002cf6:	4a3c      	ldr	r2, [pc, #240]	@ (8002de8 <MDMA_init+0x600>)
 8002cf8:	4413      	add	r3, r2
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	483b      	ldr	r0, [pc, #236]	@ (8002dec <MDMA_init+0x604>)
 8002d00:	f004 f9be 	bl	8007080 <HAL_MDMA_LinkedList_AddNode>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <MDMA_init+0x526>
				!= HAL_OK)
		{
			Error_Handler();
 8002d0a:	f7ff fd67 	bl	80027dc <Error_Handler>
		}
		nodeConfig.Init.Request = MDMA_REQUEST_SW;
 8002d0e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002d12:	60bb      	str	r3, [r7, #8]
		nodeConfig.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 8002d14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002d18:	60fb      	str	r3, [r7, #12]
		nodeConfig.Init.Priority = MDMA_PRIORITY_HIGH;
 8002d1a:	2380      	movs	r3, #128	@ 0x80
 8002d1c:	613b      	str	r3, [r7, #16]
		nodeConfig.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	617b      	str	r3, [r7, #20]
		nodeConfig.Init.SourceInc = MDMA_SRC_INC_HALFWORD;
 8002d22:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8002d26:	61bb      	str	r3, [r7, #24]
		nodeConfig.Init.DestinationInc = MDMA_DEST_INC_WORD;
 8002d28:	f640 0308 	movw	r3, #2056	@ 0x808
 8002d2c:	61fb      	str	r3, [r7, #28]
		nodeConfig.Init.SourceDataSize = MDMA_SRC_DATASIZE_HALFWORD;
 8002d2e:	2310      	movs	r3, #16
 8002d30:	623b      	str	r3, [r7, #32]
		nodeConfig.Init.DestDataSize = MDMA_DEST_DATASIZE_HALFWORD;
 8002d32:	2340      	movs	r3, #64	@ 0x40
 8002d34:	627b      	str	r3, [r7, #36]	@ 0x24
		nodeConfig.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8002d36:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d3a:	62bb      	str	r3, [r7, #40]	@ 0x28
		nodeConfig.Init.BufferTransferLength = AUDIO_SAMPLE_SIZE;
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		nodeConfig.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8002d40:	2300      	movs	r3, #0
 8002d42:	633b      	str	r3, [r7, #48]	@ 0x30
		nodeConfig.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8002d44:	2300      	movs	r3, #0
 8002d46:	637b      	str	r3, [r7, #52]	@ 0x34
		nodeConfig.Init.SourceBlockAddressOffset = 0;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	63bb      	str	r3, [r7, #56]	@ 0x38
		nodeConfig.Init.DestBlockAddressOffset = 0;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		nodeConfig.PostRequestMaskAddress = 0;
 8002d50:	2300      	movs	r3, #0
 8002d52:	653b      	str	r3, [r7, #80]	@ 0x50
		nodeConfig.PostRequestMaskData = 0;
 8002d54:	2300      	movs	r3, #0
 8002d56:	657b      	str	r3, [r7, #84]	@ 0x54
		nodeConfig.SrcAddress =
				(uint32_t) ABUF_audioBufferPtrs[i].rightTxFirstHalf;
 8002d58:	4a21      	ldr	r2, [pc, #132]	@ (8002de0 <MDMA_init+0x5f8>)
 8002d5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d5c:	015b      	lsls	r3, r3, #5
 8002d5e:	4413      	add	r3, r2
 8002d60:	3314      	adds	r3, #20
 8002d62:	681b      	ldr	r3, [r3, #0]
		nodeConfig.SrcAddress =
 8002d64:	643b      	str	r3, [r7, #64]	@ 0x40
		nodeConfig.DstAddress =
				(uint32_t) ABUF_saiBufferPtrs[i].rightTxFirstHalf;
 8002d66:	4a1f      	ldr	r2, [pc, #124]	@ (8002de4 <MDMA_init+0x5fc>)
 8002d68:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d6a:	015b      	lsls	r3, r3, #5
 8002d6c:	4413      	add	r3, r2
 8002d6e:	3314      	adds	r3, #20
 8002d70:	681b      	ldr	r3, [r3, #0]
		nodeConfig.DstAddress =
 8002d72:	647b      	str	r3, [r7, #68]	@ 0x44
		nodeConfig.BlockDataLength = AUDIO_BUFFER_SIZE_HALF;
 8002d74:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002d78:	64bb      	str	r3, [r7, #72]	@ 0x48
		nodeConfig.BlockCount = 1;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (HAL_MDMA_LinkedList_CreateNode(&MDMA_ch1Nodes[i * 2 + 1],
 8002d7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d80:	005b      	lsls	r3, r3, #1
 8002d82:	1c5a      	adds	r2, r3, #1
 8002d84:	4613      	mov	r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	4413      	add	r3, r2
 8002d8a:	00db      	lsls	r3, r3, #3
 8002d8c:	4a16      	ldr	r2, [pc, #88]	@ (8002de8 <MDMA_init+0x600>)
 8002d8e:	4413      	add	r3, r2
 8002d90:	f107 0208 	add.w	r2, r7, #8
 8002d94:	4611      	mov	r1, r2
 8002d96:	4618      	mov	r0, r3
 8002d98:	f004 f896 	bl	8006ec8 <HAL_MDMA_LinkedList_CreateNode>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <MDMA_init+0x5be>
				&nodeConfig) != HAL_OK)
		{
			Error_Handler();
 8002da2:	f7ff fd1b 	bl	80027dc <Error_Handler>
		}
		if (HAL_MDMA_LinkedList_AddNode(&MDMA_ch1Sw0, &MDMA_ch1Nodes[i * 2 + 1],
 8002da6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	1c5a      	adds	r2, r3, #1
 8002dac:	4613      	mov	r3, r2
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	4413      	add	r3, r2
 8002db2:	00db      	lsls	r3, r3, #3
 8002db4:	4a0c      	ldr	r2, [pc, #48]	@ (8002de8 <MDMA_init+0x600>)
 8002db6:	4413      	add	r3, r2
 8002db8:	2200      	movs	r2, #0
 8002dba:	4619      	mov	r1, r3
 8002dbc:	480b      	ldr	r0, [pc, #44]	@ (8002dec <MDMA_init+0x604>)
 8002dbe:	f004 f95f 	bl	8007080 <HAL_MDMA_LinkedList_AddNode>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d001      	beq.n	8002dcc <MDMA_init+0x5e4>
				0) != HAL_OK)
		{
			Error_Handler();
 8002dc8:	f7ff fd08 	bl	80027dc <Error_Handler>
	for (size_t i = 0; i < AUDIO_STEREO_CHANNEL_COUNT;i++)
 8002dcc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002dce:	3301      	adds	r3, #1
 8002dd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002dd2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	f43f af3d 	beq.w	8002c54 <MDMA_init+0x46c>
		}
	}
	for (size_t i = 0; i < AUDIO_STEREO_CHANNEL_COUNT;i++)
 8002dda:	2300      	movs	r3, #0
 8002ddc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002dde:	e0c8      	b.n	8002f72 <MDMA_init+0x78a>
 8002de0:	24000850 	.word	0x24000850
 8002de4:	24000830 	.word	0x24000830
 8002de8:	24000fb8 	.word	0x24000fb8
 8002dec:	24000f48 	.word	0x24000f48
	{
		nodeConfig.Init.Request = MDMA_REQUEST_SW;
 8002df0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002df4:	60bb      	str	r3, [r7, #8]
		nodeConfig.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 8002df6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002dfa:	60fb      	str	r3, [r7, #12]
		nodeConfig.Init.Priority = MDMA_PRIORITY_HIGH;
 8002dfc:	2380      	movs	r3, #128	@ 0x80
 8002dfe:	613b      	str	r3, [r7, #16]
		nodeConfig.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8002e00:	2300      	movs	r3, #0
 8002e02:	617b      	str	r3, [r7, #20]
		nodeConfig.Init.SourceInc = MDMA_SRC_INC_HALFWORD;
 8002e04:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8002e08:	61bb      	str	r3, [r7, #24]
		nodeConfig.Init.DestinationInc = MDMA_DEST_INC_WORD;
 8002e0a:	f640 0308 	movw	r3, #2056	@ 0x808
 8002e0e:	61fb      	str	r3, [r7, #28]
		nodeConfig.Init.SourceDataSize = MDMA_SRC_DATASIZE_HALFWORD;
 8002e10:	2310      	movs	r3, #16
 8002e12:	623b      	str	r3, [r7, #32]
		nodeConfig.Init.DestDataSize = MDMA_DEST_DATASIZE_HALFWORD;
 8002e14:	2340      	movs	r3, #64	@ 0x40
 8002e16:	627b      	str	r3, [r7, #36]	@ 0x24
		nodeConfig.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8002e18:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e1c:	62bb      	str	r3, [r7, #40]	@ 0x28
		nodeConfig.Init.BufferTransferLength = AUDIO_SAMPLE_SIZE;
 8002e1e:	2302      	movs	r3, #2
 8002e20:	62fb      	str	r3, [r7, #44]	@ 0x2c
		nodeConfig.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8002e22:	2300      	movs	r3, #0
 8002e24:	633b      	str	r3, [r7, #48]	@ 0x30
		nodeConfig.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8002e26:	2300      	movs	r3, #0
 8002e28:	637b      	str	r3, [r7, #52]	@ 0x34
		nodeConfig.Init.SourceBlockAddressOffset = 0;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	63bb      	str	r3, [r7, #56]	@ 0x38
		nodeConfig.Init.DestBlockAddressOffset = 0;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	63fb      	str	r3, [r7, #60]	@ 0x3c
		nodeConfig.PostRequestMaskAddress = 0;
 8002e32:	2300      	movs	r3, #0
 8002e34:	653b      	str	r3, [r7, #80]	@ 0x50
		nodeConfig.PostRequestMaskData = 0;
 8002e36:	2300      	movs	r3, #0
 8002e38:	657b      	str	r3, [r7, #84]	@ 0x54
		nodeConfig.SrcAddress =
				(uint32_t) ABUF_audioBufferPtrs[i].leftTxSecHalf;
 8002e3a:	4a5d      	ldr	r2, [pc, #372]	@ (8002fb0 <MDMA_init+0x7c8>)
 8002e3c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002e3e:	015b      	lsls	r3, r3, #5
 8002e40:	4413      	add	r3, r2
 8002e42:	3318      	adds	r3, #24
 8002e44:	681b      	ldr	r3, [r3, #0]
		nodeConfig.SrcAddress =
 8002e46:	643b      	str	r3, [r7, #64]	@ 0x40
		nodeConfig.DstAddress = (uint32_t) ABUF_saiBufferPtrs[i].leftTxSecHalf;
 8002e48:	4a5a      	ldr	r2, [pc, #360]	@ (8002fb4 <MDMA_init+0x7cc>)
 8002e4a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002e4c:	015b      	lsls	r3, r3, #5
 8002e4e:	4413      	add	r3, r2
 8002e50:	3318      	adds	r3, #24
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	647b      	str	r3, [r7, #68]	@ 0x44
		nodeConfig.BlockDataLength = AUDIO_BUFFER_SIZE_HALF;
 8002e56:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e5a:	64bb      	str	r3, [r7, #72]	@ 0x48
		nodeConfig.BlockCount = 1;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (HAL_MDMA_LinkedList_CreateNode(
				&MDMA_ch1Nodes[AUDIO_STEREO_CHANNEL_COUNT * 2 + i * 2],
 8002e60:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002e62:	3301      	adds	r3, #1
 8002e64:	005a      	lsls	r2, r3, #1
		if (HAL_MDMA_LinkedList_CreateNode(
 8002e66:	4613      	mov	r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	4413      	add	r3, r2
 8002e6c:	00db      	lsls	r3, r3, #3
 8002e6e:	4a52      	ldr	r2, [pc, #328]	@ (8002fb8 <MDMA_init+0x7d0>)
 8002e70:	4413      	add	r3, r2
 8002e72:	f107 0208 	add.w	r2, r7, #8
 8002e76:	4611      	mov	r1, r2
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f004 f825 	bl	8006ec8 <HAL_MDMA_LinkedList_CreateNode>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d001      	beq.n	8002e88 <MDMA_init+0x6a0>
				&nodeConfig) != HAL_OK)
		{
			Error_Handler();
 8002e84:	f7ff fcaa 	bl	80027dc <Error_Handler>
		}
		if (HAL_MDMA_LinkedList_AddNode(&MDMA_ch1Sw0,
				&MDMA_ch1Nodes[AUDIO_STEREO_CHANNEL_COUNT * 2 + i * 2], 0)
 8002e88:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	005a      	lsls	r2, r3, #1
		if (HAL_MDMA_LinkedList_AddNode(&MDMA_ch1Sw0,
 8002e8e:	4613      	mov	r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	4413      	add	r3, r2
 8002e94:	00db      	lsls	r3, r3, #3
 8002e96:	4a48      	ldr	r2, [pc, #288]	@ (8002fb8 <MDMA_init+0x7d0>)
 8002e98:	4413      	add	r3, r2
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	4847      	ldr	r0, [pc, #284]	@ (8002fbc <MDMA_init+0x7d4>)
 8002ea0:	f004 f8ee 	bl	8007080 <HAL_MDMA_LinkedList_AddNode>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <MDMA_init+0x6c6>
				!= HAL_OK)
		{
			Error_Handler();
 8002eaa:	f7ff fc97 	bl	80027dc <Error_Handler>
		}
		nodeConfig.Init.Request = MDMA_REQUEST_SW;
 8002eae:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002eb2:	60bb      	str	r3, [r7, #8]
		nodeConfig.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 8002eb4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002eb8:	60fb      	str	r3, [r7, #12]
		nodeConfig.Init.Priority = MDMA_PRIORITY_HIGH;
 8002eba:	2380      	movs	r3, #128	@ 0x80
 8002ebc:	613b      	str	r3, [r7, #16]
		nodeConfig.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	617b      	str	r3, [r7, #20]
		nodeConfig.Init.SourceInc = MDMA_SRC_INC_HALFWORD;
 8002ec2:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8002ec6:	61bb      	str	r3, [r7, #24]
		nodeConfig.Init.DestinationInc = MDMA_DEST_INC_WORD;
 8002ec8:	f640 0308 	movw	r3, #2056	@ 0x808
 8002ecc:	61fb      	str	r3, [r7, #28]
		nodeConfig.Init.SourceDataSize = MDMA_SRC_DATASIZE_HALFWORD;
 8002ece:	2310      	movs	r3, #16
 8002ed0:	623b      	str	r3, [r7, #32]
		nodeConfig.Init.DestDataSize = MDMA_DEST_DATASIZE_HALFWORD;
 8002ed2:	2340      	movs	r3, #64	@ 0x40
 8002ed4:	627b      	str	r3, [r7, #36]	@ 0x24
		nodeConfig.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8002ed6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002eda:	62bb      	str	r3, [r7, #40]	@ 0x28
		nodeConfig.Init.BufferTransferLength = AUDIO_SAMPLE_SIZE;
 8002edc:	2302      	movs	r3, #2
 8002ede:	62fb      	str	r3, [r7, #44]	@ 0x2c
		nodeConfig.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	633b      	str	r3, [r7, #48]	@ 0x30
		nodeConfig.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	637b      	str	r3, [r7, #52]	@ 0x34
		nodeConfig.Init.SourceBlockAddressOffset = 0;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	63bb      	str	r3, [r7, #56]	@ 0x38
		nodeConfig.Init.DestBlockAddressOffset = 0;
 8002eec:	2300      	movs	r3, #0
 8002eee:	63fb      	str	r3, [r7, #60]	@ 0x3c
		nodeConfig.PostRequestMaskAddress = 0;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	653b      	str	r3, [r7, #80]	@ 0x50
		nodeConfig.PostRequestMaskData = 0;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	657b      	str	r3, [r7, #84]	@ 0x54
		nodeConfig.SrcAddress =
				(uint32_t) ABUF_audioBufferPtrs[i].rightTxSecHalf;
 8002ef8:	4a2d      	ldr	r2, [pc, #180]	@ (8002fb0 <MDMA_init+0x7c8>)
 8002efa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002efc:	015b      	lsls	r3, r3, #5
 8002efe:	4413      	add	r3, r2
 8002f00:	331c      	adds	r3, #28
 8002f02:	681b      	ldr	r3, [r3, #0]
		nodeConfig.SrcAddress =
 8002f04:	643b      	str	r3, [r7, #64]	@ 0x40
		nodeConfig.DstAddress = (uint32_t) ABUF_saiBufferPtrs[i].rightTxSecHalf;
 8002f06:	4a2b      	ldr	r2, [pc, #172]	@ (8002fb4 <MDMA_init+0x7cc>)
 8002f08:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f0a:	015b      	lsls	r3, r3, #5
 8002f0c:	4413      	add	r3, r2
 8002f0e:	331c      	adds	r3, #28
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	647b      	str	r3, [r7, #68]	@ 0x44
		nodeConfig.BlockDataLength = AUDIO_BUFFER_SIZE_HALF;
 8002f14:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002f18:	64bb      	str	r3, [r7, #72]	@ 0x48
		nodeConfig.BlockCount = 1;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (HAL_MDMA_LinkedList_CreateNode(
				&MDMA_ch1Nodes[AUDIO_STEREO_CHANNEL_COUNT * 2 + i * 2 + 1],
 8002f1e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f20:	005b      	lsls	r3, r3, #1
 8002f22:	1cda      	adds	r2, r3, #3
		if (HAL_MDMA_LinkedList_CreateNode(
 8002f24:	4613      	mov	r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	4413      	add	r3, r2
 8002f2a:	00db      	lsls	r3, r3, #3
 8002f2c:	4a22      	ldr	r2, [pc, #136]	@ (8002fb8 <MDMA_init+0x7d0>)
 8002f2e:	4413      	add	r3, r2
 8002f30:	f107 0208 	add.w	r2, r7, #8
 8002f34:	4611      	mov	r1, r2
 8002f36:	4618      	mov	r0, r3
 8002f38:	f003 ffc6 	bl	8006ec8 <HAL_MDMA_LinkedList_CreateNode>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <MDMA_init+0x75e>
				&nodeConfig) != HAL_OK)
		{
			Error_Handler();
 8002f42:	f7ff fc4b 	bl	80027dc <Error_Handler>
		}
		if (HAL_MDMA_LinkedList_AddNode(&MDMA_ch1Sw0,
				&MDMA_ch1Nodes[AUDIO_STEREO_CHANNEL_COUNT * 2 + i * 2 + 1], 0)
 8002f46:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f48:	005b      	lsls	r3, r3, #1
 8002f4a:	1cda      	adds	r2, r3, #3
		if (HAL_MDMA_LinkedList_AddNode(&MDMA_ch1Sw0,
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	4413      	add	r3, r2
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	4a18      	ldr	r2, [pc, #96]	@ (8002fb8 <MDMA_init+0x7d0>)
 8002f56:	4413      	add	r3, r2
 8002f58:	2200      	movs	r2, #0
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	4817      	ldr	r0, [pc, #92]	@ (8002fbc <MDMA_init+0x7d4>)
 8002f5e:	f004 f88f 	bl	8007080 <HAL_MDMA_LinkedList_AddNode>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d001      	beq.n	8002f6c <MDMA_init+0x784>
				!= HAL_OK)
		{
			Error_Handler();
 8002f68:	f7ff fc38 	bl	80027dc <Error_Handler>
	for (size_t i = 0; i < AUDIO_STEREO_CHANNEL_COUNT;i++)
 8002f6c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f6e:	3301      	adds	r3, #1
 8002f70:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002f72:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	f43f af3b 	beq.w	8002df0 <MDMA_init+0x608>
		}
	}

	if (HAL_MDMA_LinkedList_EnableCircularMode(&MDMA_ch1Sw0) != HAL_OK)
 8002f7a:	4810      	ldr	r0, [pc, #64]	@ (8002fbc <MDMA_init+0x7d4>)
 8002f7c:	f004 f944 	bl	8007208 <HAL_MDMA_LinkedList_EnableCircularMode>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <MDMA_init+0x7a2>
	{
		Error_Handler();
 8002f86:	f7ff fc29 	bl	80027dc <Error_Handler>
	}

	/* MDMA interrupt initialization */
	/* MDMA_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(MDMA_IRQn, 0, 0);
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	2100      	movs	r1, #0
 8002f8e:	207a      	movs	r0, #122	@ 0x7a
 8002f90:	f000 fcf9 	bl	8003986 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8002f94:	207a      	movs	r0, #122	@ 0x7a
 8002f96:	f000 fd10 	bl	80039ba <HAL_NVIC_EnableIRQ>

	/* Set the MDMA instance for the RX and TX */
	MDMA_hmdmaRxInstance = &MDMA_ch0Sw0;
 8002f9a:	4b09      	ldr	r3, [pc, #36]	@ (8002fc0 <MDMA_init+0x7d8>)
 8002f9c:	4a09      	ldr	r2, [pc, #36]	@ (8002fc4 <MDMA_init+0x7dc>)
 8002f9e:	601a      	str	r2, [r3, #0]
	MDMA_hmdmaTxInstance = &MDMA_ch1Sw0;
 8002fa0:	4b09      	ldr	r3, [pc, #36]	@ (8002fc8 <MDMA_init+0x7e0>)
 8002fa2:	4a06      	ldr	r2, [pc, #24]	@ (8002fbc <MDMA_init+0x7d4>)
 8002fa4:	601a      	str	r2, [r3, #0]
}
 8002fa6:	bf00      	nop
 8002fa8:	3768      	adds	r7, #104	@ 0x68
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	24000850 	.word	0x24000850
 8002fb4:	24000830 	.word	0x24000830
 8002fb8:	24000fb8 	.word	0x24000fb8
 8002fbc:	24000f48 	.word	0x24000f48
 8002fc0:	24001058 	.word	0x24001058
 8002fc4:	24000e38 	.word	0x24000e38
 8002fc8:	2400105c 	.word	0x2400105c

08002fcc <MDMA_registerRxCallbacks>:

HAL_StatusTypeDef MDMA_registerRxCallbacks(
		void (*pXferCallback)(MDMA_HandleTypeDef *_hmdma),
		void (*pErrorCallback)(MDMA_HandleTypeDef *_hmdma))
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status;

	/* Register transfer callback */
	status = HAL_MDMA_RegisterCallback(MDMA_hmdmaRxInstance,
 8002fd6:	4b0d      	ldr	r3, [pc, #52]	@ (800300c <MDMA_registerRxCallbacks+0x40>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	2102      	movs	r1, #2
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f003 ff18 	bl	8006e14 <HAL_MDMA_RegisterCallback>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	73fb      	strb	r3, [r7, #15]
			HAL_MDMA_XFER_BLOCKCPLT_CB_ID, pXferCallback);
	if (status != HAL_OK)
 8002fe8:	7bfb      	ldrb	r3, [r7, #15]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <MDMA_registerRxCallbacks+0x26>
	{
		return status;
 8002fee:	7bfb      	ldrb	r3, [r7, #15]
 8002ff0:	e007      	b.n	8003002 <MDMA_registerRxCallbacks+0x36>
	}
	/* Register the error callback */
	return HAL_MDMA_RegisterCallback(MDMA_hmdmaRxInstance,
 8002ff2:	4b06      	ldr	r3, [pc, #24]	@ (800300c <MDMA_registerRxCallbacks+0x40>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	683a      	ldr	r2, [r7, #0]
 8002ff8:	2104      	movs	r1, #4
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f003 ff0a 	bl	8006e14 <HAL_MDMA_RegisterCallback>
 8003000:	4603      	mov	r3, r0
			HAL_MDMA_XFER_ERROR_CB_ID, pErrorCallback);
}
 8003002:	4618      	mov	r0, r3
 8003004:	3710      	adds	r7, #16
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	24001058 	.word	0x24001058

08003010 <MDMA_registerTxCallbacks>:

HAL_StatusTypeDef MDMA_registerTxCallbacks(
		void (*pXferCallback)(MDMA_HandleTypeDef *_hmdma),
		void (*pErrorCallback)(MDMA_HandleTypeDef *_hmdma))
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status;

	/* Register transfer callback */
	status = HAL_MDMA_RegisterCallback(MDMA_hmdmaTxInstance,
 800301a:	4b0d      	ldr	r3, [pc, #52]	@ (8003050 <MDMA_registerTxCallbacks+0x40>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	2102      	movs	r1, #2
 8003022:	4618      	mov	r0, r3
 8003024:	f003 fef6 	bl	8006e14 <HAL_MDMA_RegisterCallback>
 8003028:	4603      	mov	r3, r0
 800302a:	73fb      	strb	r3, [r7, #15]
			HAL_MDMA_XFER_BLOCKCPLT_CB_ID, pXferCallback);
	if (status != HAL_OK)
 800302c:	7bfb      	ldrb	r3, [r7, #15]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d001      	beq.n	8003036 <MDMA_registerTxCallbacks+0x26>
	{
		return status;
 8003032:	7bfb      	ldrb	r3, [r7, #15]
 8003034:	e007      	b.n	8003046 <MDMA_registerTxCallbacks+0x36>
	}
	/* Register the error callback */
	return HAL_MDMA_RegisterCallback(MDMA_hmdmaTxInstance, HAL_MDMA_XFER_ERROR_CB_ID,
 8003036:	4b06      	ldr	r3, [pc, #24]	@ (8003050 <MDMA_registerTxCallbacks+0x40>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	683a      	ldr	r2, [r7, #0]
 800303c:	2104      	movs	r1, #4
 800303e:	4618      	mov	r0, r3
 8003040:	f003 fee8 	bl	8006e14 <HAL_MDMA_RegisterCallback>
 8003044:	4603      	mov	r3, r0
			pErrorCallback);
}
 8003046:	4618      	mov	r0, r3
 8003048:	3710      	adds	r7, #16
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	2400105c 	.word	0x2400105c

08003054 <MDMA_startRxTransfer>:

HAL_StatusTypeDef MDMA_startRxTransfer(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af02      	add	r7, sp, #8
	/* Start the MDMA transfer */

	return HAL_MDMA_Start_IT(MDMA_hmdmaRxInstance,
 800305a:	4b09      	ldr	r3, [pc, #36]	@ (8003080 <MDMA_startRxTransfer+0x2c>)
 800305c:	6818      	ldr	r0, [r3, #0]
			(uint32_t) ABUF_saiBufferPtrs[0].leftRxFirstHalf,
 800305e:	4b09      	ldr	r3, [pc, #36]	@ (8003084 <MDMA_startRxTransfer+0x30>)
 8003060:	681b      	ldr	r3, [r3, #0]
	return HAL_MDMA_Start_IT(MDMA_hmdmaRxInstance,
 8003062:	4619      	mov	r1, r3
			(uint32_t) ABUF_audioBufferPtrs[0].leftRxFirstHalf,
 8003064:	4b08      	ldr	r3, [pc, #32]	@ (8003088 <MDMA_startRxTransfer+0x34>)
 8003066:	681b      	ldr	r3, [r3, #0]
	return HAL_MDMA_Start_IT(MDMA_hmdmaRxInstance,
 8003068:	461a      	mov	r2, r3
 800306a:	2301      	movs	r3, #1
 800306c:	9300      	str	r3, [sp, #0]
 800306e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003072:	f004 f90c 	bl	800728e <HAL_MDMA_Start_IT>
 8003076:	4603      	mov	r3, r0
			AUDIO_BUFFER_SIZE_HALF, 1);
}
 8003078:	4618      	mov	r0, r3
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	24001058 	.word	0x24001058
 8003084:	24000830 	.word	0x24000830
 8003088:	24000850 	.word	0x24000850

0800308c <MDMA_startTxTransfer>:

HAL_StatusTypeDef MDMA_startTxTransfer(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af02      	add	r7, sp, #8
	/* Start the MDMA transfer */

	return HAL_MDMA_Start_IT(MDMA_hmdmaTxInstance,
 8003092:	4b09      	ldr	r3, [pc, #36]	@ (80030b8 <MDMA_startTxTransfer+0x2c>)
 8003094:	6818      	ldr	r0, [r3, #0]
			(uint32_t) ABUF_audioBufferPtrs[0].leftTxFirstHalf,
 8003096:	4b09      	ldr	r3, [pc, #36]	@ (80030bc <MDMA_startTxTransfer+0x30>)
 8003098:	691b      	ldr	r3, [r3, #16]
	return HAL_MDMA_Start_IT(MDMA_hmdmaTxInstance,
 800309a:	4619      	mov	r1, r3
			(uint32_t) ABUF_saiBufferPtrs[0].leftTxFirstHalf,
 800309c:	4b08      	ldr	r3, [pc, #32]	@ (80030c0 <MDMA_startTxTransfer+0x34>)
 800309e:	691b      	ldr	r3, [r3, #16]
	return HAL_MDMA_Start_IT(MDMA_hmdmaTxInstance,
 80030a0:	461a      	mov	r2, r3
 80030a2:	2301      	movs	r3, #1
 80030a4:	9300      	str	r3, [sp, #0]
 80030a6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80030aa:	f004 f8f0 	bl	800728e <HAL_MDMA_Start_IT>
 80030ae:	4603      	mov	r3, r0
			AUDIO_BUFFER_SIZE_HALF, 1);

}
 80030b0:	4618      	mov	r0, r3
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	2400105c 	.word	0x2400105c
 80030bc:	24000850 	.word	0x24000850
 80030c0:	24000830 	.word	0x24000830

080030c4 <MDMA_getCurrentRxChIndex>:

uint8_t MDMA_getCurrentRxChIndex(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0

	/* Get the current channel index */
	uint8_t currNodeIndex = 0;
 80030ca:	2300      	movs	r3, #0
 80030cc:	71fb      	strb	r3, [r7, #7]
	MDMA_LinkNodeTypeDef *currNode =
			MDMA_hmdmaRxInstance->FirstLinkedListNodeAddress;
 80030ce:	4b10      	ldr	r3, [pc, #64]	@ (8003110 <MDMA_getCurrentRxChIndex+0x4c>)
 80030d0:	681b      	ldr	r3, [r3, #0]
	MDMA_LinkNodeTypeDef *currNode =
 80030d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030d4:	603b      	str	r3, [r7, #0]
	for (;
 80030d6:	e005      	b.n	80030e4 <MDMA_getCurrentRxChIndex+0x20>
			currNodeIndex < MDMA_hmdmaRxInstance->LinkedListNodeCounter
					&& currNode->CLAR
							!= MDMA_hmdmaRxInstance->Instance->CLAR;
			currNodeIndex++, currNode = (MDMA_LinkNodeTypeDef*) currNode->CLAR)
 80030d8:	79fb      	ldrb	r3, [r7, #7]
 80030da:	3301      	adds	r3, #1
 80030dc:	71fb      	strb	r3, [r7, #7]
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	603b      	str	r3, [r7, #0]
			currNodeIndex < MDMA_hmdmaRxInstance->LinkedListNodeCounter
 80030e4:	79fa      	ldrb	r2, [r7, #7]
 80030e6:	4b0a      	ldr	r3, [pc, #40]	@ (8003110 <MDMA_getCurrentRxChIndex+0x4c>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
					&& currNode->CLAR
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d207      	bcs.n	8003100 <MDMA_getCurrentRxChIndex+0x3c>
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	695a      	ldr	r2, [r3, #20]
							!= MDMA_hmdmaRxInstance->Instance->CLAR;
 80030f4:	4b06      	ldr	r3, [pc, #24]	@ (8003110 <MDMA_getCurrentRxChIndex+0x4c>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
					&& currNode->CLAR
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d1eb      	bne.n	80030d8 <MDMA_getCurrentRxChIndex+0x14>
	{
	}
	return currNodeIndex;
 8003100:	79fb      	ldrb	r3, [r7, #7]
}
 8003102:	4618      	mov	r0, r3
 8003104:	370c      	adds	r7, #12
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	24001058 	.word	0x24001058

08003114 <MDMA_getCurrentTxChIndex>:

uint8_t MDMA_getCurrentTxChIndex(void)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0

	/* Get the current channel index */
	uint8_t currNodeIndex = 0;
 800311a:	2300      	movs	r3, #0
 800311c:	71fb      	strb	r3, [r7, #7]
	MDMA_LinkNodeTypeDef *currNode =
			MDMA_hmdmaTxInstance->FirstLinkedListNodeAddress;
 800311e:	4b10      	ldr	r3, [pc, #64]	@ (8003160 <MDMA_getCurrentTxChIndex+0x4c>)
 8003120:	681b      	ldr	r3, [r3, #0]
	MDMA_LinkNodeTypeDef *currNode =
 8003122:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003124:	603b      	str	r3, [r7, #0]
	for (;
 8003126:	e005      	b.n	8003134 <MDMA_getCurrentTxChIndex+0x20>
			currNodeIndex < MDMA_hmdmaTxInstance->LinkedListNodeCounter
					&& currNode->CLAR
							!= MDMA_hmdmaTxInstance->Instance->CLAR;
			currNodeIndex++, currNode = (MDMA_LinkNodeTypeDef*) currNode->CLAR)
 8003128:	79fb      	ldrb	r3, [r7, #7]
 800312a:	3301      	adds	r3, #1
 800312c:	71fb      	strb	r3, [r7, #7]
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	695b      	ldr	r3, [r3, #20]
 8003132:	603b      	str	r3, [r7, #0]
			currNodeIndex < MDMA_hmdmaTxInstance->LinkedListNodeCounter
 8003134:	79fa      	ldrb	r2, [r7, #7]
 8003136:	4b0a      	ldr	r3, [pc, #40]	@ (8003160 <MDMA_getCurrentTxChIndex+0x4c>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
					&& currNode->CLAR
 800313c:	429a      	cmp	r2, r3
 800313e:	d207      	bcs.n	8003150 <MDMA_getCurrentTxChIndex+0x3c>
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	695a      	ldr	r2, [r3, #20]
							!= MDMA_hmdmaTxInstance->Instance->CLAR;
 8003144:	4b06      	ldr	r3, [pc, #24]	@ (8003160 <MDMA_getCurrentTxChIndex+0x4c>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
					&& currNode->CLAR
 800314c:	429a      	cmp	r2, r3
 800314e:	d1eb      	bne.n	8003128 <MDMA_getCurrentTxChIndex+0x14>
	{
	}
	return currNodeIndex;
 8003150:	79fb      	ldrb	r3, [r7, #7]
}
 8003152:	4618      	mov	r0, r3
 8003154:	370c      	adds	r7, #12
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	2400105c 	.word	0x2400105c

08003164 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800316a:	4b0a      	ldr	r3, [pc, #40]	@ (8003194 <HAL_MspInit+0x30>)
 800316c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003170:	4a08      	ldr	r2, [pc, #32]	@ (8003194 <HAL_MspInit+0x30>)
 8003172:	f043 0302 	orr.w	r3, r3, #2
 8003176:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800317a:	4b06      	ldr	r3, [pc, #24]	@ (8003194 <HAL_MspInit+0x30>)
 800317c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003180:	f003 0302 	and.w	r3, r3, #2
 8003184:	607b      	str	r3, [r7, #4]
 8003186:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003188:	bf00      	nop
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr
 8003194:	58024400 	.word	0x58024400

08003198 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b0ba      	sub	sp, #232	@ 0xe8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031a0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80031a4:	2200      	movs	r2, #0
 80031a6:	601a      	str	r2, [r3, #0]
 80031a8:	605a      	str	r2, [r3, #4]
 80031aa:	609a      	str	r2, [r3, #8]
 80031ac:	60da      	str	r2, [r3, #12]
 80031ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80031b0:	f107 0310 	add.w	r3, r7, #16
 80031b4:	22c0      	movs	r2, #192	@ 0xc0
 80031b6:	2100      	movs	r1, #0
 80031b8:	4618      	mov	r0, r3
 80031ba:	f00a f9fb 	bl	800d5b4 <memset>
  if(hi2c->Instance==I2C2)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a30      	ldr	r2, [pc, #192]	@ (8003284 <HAL_I2C_MspInit+0xec>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d158      	bne.n	800327a <HAL_I2C_MspInit+0xe2>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80031c8:	f04f 0208 	mov.w	r2, #8
 80031cc:	f04f 0300 	mov.w	r3, #0
 80031d0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 32;
 80031d4:	2320      	movs	r3, #32
 80031d6:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 129;
 80031d8:	2381      	movs	r3, #129	@ 0x81
 80031da:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80031dc:	2302      	movs	r3, #2
 80031de:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80031e0:	2302      	movs	r3, #2
 80031e2:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 100;
 80031e4:	2364      	movs	r3, #100	@ 0x64
 80031e6:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 80031e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80031ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 80031ee:	2300      	movs	r3, #0
 80031f0:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80031f2:	2300      	movs	r3, #0
 80031f4:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_PLL3;
 80031f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80031fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80031fe:	f107 0310 	add.w	r3, r7, #16
 8003202:	4618      	mov	r0, r3
 8003204:	f005 fb9a 	bl	800893c <HAL_RCCEx_PeriphCLKConfig>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d001      	beq.n	8003212 <HAL_I2C_MspInit+0x7a>
    {
      Error_Handler();
 800320e:	f7ff fae5 	bl	80027dc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003212:	4b1d      	ldr	r3, [pc, #116]	@ (8003288 <HAL_I2C_MspInit+0xf0>)
 8003214:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003218:	4a1b      	ldr	r2, [pc, #108]	@ (8003288 <HAL_I2C_MspInit+0xf0>)
 800321a:	f043 0302 	orr.w	r3, r3, #2
 800321e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003222:	4b19      	ldr	r3, [pc, #100]	@ (8003288 <HAL_I2C_MspInit+0xf0>)
 8003224:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003228:	f003 0302 	and.w	r3, r3, #2
 800322c:	60fb      	str	r3, [r7, #12]
 800322e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003230:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003234:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003238:	2312      	movs	r3, #18
 800323a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800323e:	2301      	movs	r3, #1
 8003240:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003244:	2303      	movs	r3, #3
 8003246:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800324a:	2304      	movs	r3, #4
 800324c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003250:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003254:	4619      	mov	r1, r3
 8003256:	480d      	ldr	r0, [pc, #52]	@ (800328c <HAL_I2C_MspInit+0xf4>)
 8003258:	f002 fd74 	bl	8005d44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800325c:	4b0a      	ldr	r3, [pc, #40]	@ (8003288 <HAL_I2C_MspInit+0xf0>)
 800325e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003262:	4a09      	ldr	r2, [pc, #36]	@ (8003288 <HAL_I2C_MspInit+0xf0>)
 8003264:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003268:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800326c:	4b06      	ldr	r3, [pc, #24]	@ (8003288 <HAL_I2C_MspInit+0xf0>)
 800326e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003272:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003276:	60bb      	str	r3, [r7, #8]
 8003278:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 800327a:	bf00      	nop
 800327c:	37e8      	adds	r7, #232	@ 0xe8
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	40005800 	.word	0x40005800
 8003288:	58024400 	.word	0x58024400
 800328c:	58020400 	.word	0x58020400

08003290 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b08a      	sub	sp, #40	@ 0x28
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003298:	f107 0314 	add.w	r3, r7, #20
 800329c:	2200      	movs	r2, #0
 800329e:	601a      	str	r2, [r3, #0]
 80032a0:	605a      	str	r2, [r3, #4]
 80032a2:	609a      	str	r2, [r3, #8]
 80032a4:	60da      	str	r2, [r3, #12]
 80032a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a1a      	ldr	r2, [pc, #104]	@ (8003318 <HAL_UART_MspInit+0x88>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d12e      	bne.n	8003310 <HAL_UART_MspInit+0x80>
  {
    /* USER CODE BEGIN USART3_MspInit 0 */

    /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80032b2:	4b1a      	ldr	r3, [pc, #104]	@ (800331c <HAL_UART_MspInit+0x8c>)
 80032b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80032b8:	4a18      	ldr	r2, [pc, #96]	@ (800331c <HAL_UART_MspInit+0x8c>)
 80032ba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032be:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80032c2:	4b16      	ldr	r3, [pc, #88]	@ (800331c <HAL_UART_MspInit+0x8c>)
 80032c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80032c8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80032cc:	613b      	str	r3, [r7, #16]
 80032ce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80032d0:	4b12      	ldr	r3, [pc, #72]	@ (800331c <HAL_UART_MspInit+0x8c>)
 80032d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80032d6:	4a11      	ldr	r2, [pc, #68]	@ (800331c <HAL_UART_MspInit+0x8c>)
 80032d8:	f043 0308 	orr.w	r3, r3, #8
 80032dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80032e0:	4b0e      	ldr	r3, [pc, #56]	@ (800331c <HAL_UART_MspInit+0x8c>)
 80032e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80032e6:	f003 0308 	and.w	r3, r3, #8
 80032ea:	60fb      	str	r3, [r7, #12]
 80032ec:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80032ee:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80032f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032f4:	2302      	movs	r3, #2
 80032f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f8:	2300      	movs	r3, #0
 80032fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032fc:	2300      	movs	r3, #0
 80032fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003300:	2307      	movs	r3, #7
 8003302:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003304:	f107 0314 	add.w	r3, r7, #20
 8003308:	4619      	mov	r1, r3
 800330a:	4805      	ldr	r0, [pc, #20]	@ (8003320 <HAL_UART_MspInit+0x90>)
 800330c:	f002 fd1a 	bl	8005d44 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8003310:	bf00      	nop
 8003312:	3728      	adds	r7, #40	@ 0x28
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	40004800 	.word	0x40004800
 800331c:	58024400 	.word	0x58024400
 8003320:	58020c00 	.word	0x58020c00

08003324 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_b;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b08e      	sub	sp, #56	@ 0x38
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a7c      	ldr	r2, [pc, #496]	@ (8003524 <HAL_SAI_MspInit+0x200>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d176      	bne.n	8003424 <HAL_SAI_MspInit+0x100>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8003336:	4b7c      	ldr	r3, [pc, #496]	@ (8003528 <HAL_SAI_MspInit+0x204>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d10e      	bne.n	800335c <HAL_SAI_MspInit+0x38>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800333e:	4b7b      	ldr	r3, [pc, #492]	@ (800352c <HAL_SAI_MspInit+0x208>)
 8003340:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003344:	4a79      	ldr	r2, [pc, #484]	@ (800352c <HAL_SAI_MspInit+0x208>)
 8003346:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800334a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800334e:	4b77      	ldr	r3, [pc, #476]	@ (800352c <HAL_SAI_MspInit+0x208>)
 8003350:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003354:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003358:	613b      	str	r3, [r7, #16]
 800335a:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 800335c:	4b72      	ldr	r3, [pc, #456]	@ (8003528 <HAL_SAI_MspInit+0x204>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	3301      	adds	r3, #1
 8003362:	4a71      	ldr	r2, [pc, #452]	@ (8003528 <HAL_SAI_MspInit+0x204>)
 8003364:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8003366:	2374      	movs	r3, #116	@ 0x74
 8003368:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800336a:	2302      	movs	r3, #2
 800336c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800336e:	2300      	movs	r3, #0
 8003370:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003372:	2300      	movs	r3, #0
 8003374:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8003376:	2306      	movs	r3, #6
 8003378:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800337a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800337e:	4619      	mov	r1, r3
 8003380:	486b      	ldr	r0, [pc, #428]	@ (8003530 <HAL_SAI_MspInit+0x20c>)
 8003382:	f002 fcdf 	bl	8005d44 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA1_Stream0;
 8003386:	4b6b      	ldr	r3, [pc, #428]	@ (8003534 <HAL_SAI_MspInit+0x210>)
 8003388:	4a6b      	ldr	r2, [pc, #428]	@ (8003538 <HAL_SAI_MspInit+0x214>)
 800338a:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 800338c:	4b69      	ldr	r3, [pc, #420]	@ (8003534 <HAL_SAI_MspInit+0x210>)
 800338e:	2257      	movs	r2, #87	@ 0x57
 8003390:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003392:	4b68      	ldr	r3, [pc, #416]	@ (8003534 <HAL_SAI_MspInit+0x210>)
 8003394:	2200      	movs	r2, #0
 8003396:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8003398:	4b66      	ldr	r3, [pc, #408]	@ (8003534 <HAL_SAI_MspInit+0x210>)
 800339a:	2200      	movs	r2, #0
 800339c:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 800339e:	4b65      	ldr	r3, [pc, #404]	@ (8003534 <HAL_SAI_MspInit+0x210>)
 80033a0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80033a4:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80033a6:	4b63      	ldr	r3, [pc, #396]	@ (8003534 <HAL_SAI_MspInit+0x210>)
 80033a8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80033ac:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80033ae:	4b61      	ldr	r3, [pc, #388]	@ (8003534 <HAL_SAI_MspInit+0x210>)
 80033b0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80033b4:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 80033b6:	4b5f      	ldr	r3, [pc, #380]	@ (8003534 <HAL_SAI_MspInit+0x210>)
 80033b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80033bc:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_HIGH;
 80033be:	4b5d      	ldr	r3, [pc, #372]	@ (8003534 <HAL_SAI_MspInit+0x210>)
 80033c0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80033c4:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80033c6:	4b5b      	ldr	r3, [pc, #364]	@ (8003534 <HAL_SAI_MspInit+0x210>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 80033cc:	4859      	ldr	r0, [pc, #356]	@ (8003534 <HAL_SAI_MspInit+0x210>)
 80033ce:	f000 fb0f 	bl	80039f0 <HAL_DMA_Init>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d001      	beq.n	80033dc <HAL_SAI_MspInit+0xb8>
    {
      Error_Handler();
 80033d8:	f7ff fa00 	bl	80027dc <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 80033dc:	2306      	movs	r3, #6
 80033de:	617b      	str	r3, [r7, #20]
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_RISING;
 80033e0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80033e4:	61bb      	str	r3, [r7, #24]
    pSyncConfig.SyncEnable = DISABLE;
 80033e6:	2300      	movs	r3, #0
 80033e8:	773b      	strb	r3, [r7, #28]
    pSyncConfig.EventEnable = ENABLE;
 80033ea:	2301      	movs	r3, #1
 80033ec:	777b      	strb	r3, [r7, #29]
    pSyncConfig.RequestNumber = 1;
 80033ee:	2301      	movs	r3, #1
 80033f0:	623b      	str	r3, [r7, #32]
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai1_a, &pSyncConfig) != HAL_OK)
 80033f2:	f107 0314 	add.w	r3, r7, #20
 80033f6:	4619      	mov	r1, r3
 80033f8:	484e      	ldr	r0, [pc, #312]	@ (8003534 <HAL_SAI_MspInit+0x210>)
 80033fa:	f002 fbdd 	bl	8005bb8 <HAL_DMAEx_ConfigMuxSync>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d001      	beq.n	8003408 <HAL_SAI_MspInit+0xe4>
    {
      Error_Handler();
 8003404:	f7ff f9ea 	bl	80027dc <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4a4a      	ldr	r2, [pc, #296]	@ (8003534 <HAL_SAI_MspInit+0x210>)
 800340c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8003410:	4a48      	ldr	r2, [pc, #288]	@ (8003534 <HAL_SAI_MspInit+0x210>)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6393      	str	r3, [r2, #56]	@ 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a46      	ldr	r2, [pc, #280]	@ (8003534 <HAL_SAI_MspInit+0x210>)
 800341a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800341e:	4a45      	ldr	r2, [pc, #276]	@ (8003534 <HAL_SAI_MspInit+0x210>)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6393      	str	r3, [r2, #56]	@ 0x38

    }
    if(hsai->Instance==SAI1_Block_B)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a44      	ldr	r2, [pc, #272]	@ (800353c <HAL_SAI_MspInit+0x218>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d176      	bne.n	800351c <HAL_SAI_MspInit+0x1f8>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 800342e:	4b3e      	ldr	r3, [pc, #248]	@ (8003528 <HAL_SAI_MspInit+0x204>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d10e      	bne.n	8003454 <HAL_SAI_MspInit+0x130>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8003436:	4b3d      	ldr	r3, [pc, #244]	@ (800352c <HAL_SAI_MspInit+0x208>)
 8003438:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800343c:	4a3b      	ldr	r2, [pc, #236]	@ (800352c <HAL_SAI_MspInit+0x208>)
 800343e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003442:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003446:	4b39      	ldr	r3, [pc, #228]	@ (800352c <HAL_SAI_MspInit+0x208>)
 8003448:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800344c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003450:	60fb      	str	r3, [r7, #12]
 8003452:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8003454:	4b34      	ldr	r3, [pc, #208]	@ (8003528 <HAL_SAI_MspInit+0x204>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	3301      	adds	r3, #1
 800345a:	4a33      	ldr	r2, [pc, #204]	@ (8003528 <HAL_SAI_MspInit+0x204>)
 800345c:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800345e:	2308      	movs	r3, #8
 8003460:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003462:	2302      	movs	r3, #2
 8003464:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003466:	2300      	movs	r3, #0
 8003468:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800346a:	2300      	movs	r3, #0
 800346c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800346e:	2306      	movs	r3, #6
 8003470:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003472:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003476:	4619      	mov	r1, r3
 8003478:	482d      	ldr	r0, [pc, #180]	@ (8003530 <HAL_SAI_MspInit+0x20c>)
 800347a:	f002 fc63 	bl	8005d44 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA1_Stream1;
 800347e:	4b30      	ldr	r3, [pc, #192]	@ (8003540 <HAL_SAI_MspInit+0x21c>)
 8003480:	4a30      	ldr	r2, [pc, #192]	@ (8003544 <HAL_SAI_MspInit+0x220>)
 8003482:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 8003484:	4b2e      	ldr	r3, [pc, #184]	@ (8003540 <HAL_SAI_MspInit+0x21c>)
 8003486:	2258      	movs	r2, #88	@ 0x58
 8003488:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800348a:	4b2d      	ldr	r3, [pc, #180]	@ (8003540 <HAL_SAI_MspInit+0x21c>)
 800348c:	2240      	movs	r2, #64	@ 0x40
 800348e:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8003490:	4b2b      	ldr	r3, [pc, #172]	@ (8003540 <HAL_SAI_MspInit+0x21c>)
 8003492:	2200      	movs	r2, #0
 8003494:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 8003496:	4b2a      	ldr	r3, [pc, #168]	@ (8003540 <HAL_SAI_MspInit+0x21c>)
 8003498:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800349c:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800349e:	4b28      	ldr	r3, [pc, #160]	@ (8003540 <HAL_SAI_MspInit+0x21c>)
 80034a0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80034a4:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80034a6:	4b26      	ldr	r3, [pc, #152]	@ (8003540 <HAL_SAI_MspInit+0x21c>)
 80034a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80034ac:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 80034ae:	4b24      	ldr	r3, [pc, #144]	@ (8003540 <HAL_SAI_MspInit+0x21c>)
 80034b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80034b4:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_HIGH;
 80034b6:	4b22      	ldr	r3, [pc, #136]	@ (8003540 <HAL_SAI_MspInit+0x21c>)
 80034b8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80034bc:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80034be:	4b20      	ldr	r3, [pc, #128]	@ (8003540 <HAL_SAI_MspInit+0x21c>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 80034c4:	481e      	ldr	r0, [pc, #120]	@ (8003540 <HAL_SAI_MspInit+0x21c>)
 80034c6:	f000 fa93 	bl	80039f0 <HAL_DMA_Init>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d001      	beq.n	80034d4 <HAL_SAI_MspInit+0x1b0>
    {
      Error_Handler();
 80034d0:	f7ff f984 	bl	80027dc <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_DMAMUX1_CH0_EVT;
 80034d4:	2300      	movs	r3, #0
 80034d6:	617b      	str	r3, [r7, #20]
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_RISING;
 80034d8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80034dc:	61bb      	str	r3, [r7, #24]
    pSyncConfig.SyncEnable = ENABLE;
 80034de:	2301      	movs	r3, #1
 80034e0:	773b      	strb	r3, [r7, #28]
    pSyncConfig.EventEnable = DISABLE;
 80034e2:	2300      	movs	r3, #0
 80034e4:	777b      	strb	r3, [r7, #29]
    pSyncConfig.RequestNumber = 1;
 80034e6:	2301      	movs	r3, #1
 80034e8:	623b      	str	r3, [r7, #32]
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai1_b, &pSyncConfig) != HAL_OK)
 80034ea:	f107 0314 	add.w	r3, r7, #20
 80034ee:	4619      	mov	r1, r3
 80034f0:	4813      	ldr	r0, [pc, #76]	@ (8003540 <HAL_SAI_MspInit+0x21c>)
 80034f2:	f002 fb61 	bl	8005bb8 <HAL_DMAEx_ConfigMuxSync>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d001      	beq.n	8003500 <HAL_SAI_MspInit+0x1dc>
    {
      Error_Handler();
 80034fc:	f7ff f96e 	bl	80027dc <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a0f      	ldr	r2, [pc, #60]	@ (8003540 <HAL_SAI_MspInit+0x21c>)
 8003504:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8003508:	4a0d      	ldr	r2, [pc, #52]	@ (8003540 <HAL_SAI_MspInit+0x21c>)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a0b      	ldr	r2, [pc, #44]	@ (8003540 <HAL_SAI_MspInit+0x21c>)
 8003512:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003516:	4a0a      	ldr	r2, [pc, #40]	@ (8003540 <HAL_SAI_MspInit+0x21c>)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6393      	str	r3, [r2, #56]	@ 0x38
    }
}
 800351c:	bf00      	nop
 800351e:	3738      	adds	r7, #56	@ 0x38
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}
 8003524:	40015804 	.word	0x40015804
 8003528:	24001060 	.word	0x24001060
 800352c:	58024400 	.word	0x58024400
 8003530:	58021000 	.word	0x58021000
 8003534:	24000ca0 	.word	0x24000ca0
 8003538:	40020010 	.word	0x40020010
 800353c:	40015824 	.word	0x40015824
 8003540:	24000d18 	.word	0x24000d18
 8003544:	40020028 	.word	0x40020028

08003548 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003548:	b480      	push	{r7}
 800354a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 800354c:	bf00      	nop
 800354e:	e7fd      	b.n	800354c <NMI_Handler+0x4>

08003550 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003554:	bf00      	nop
 8003556:	e7fd      	b.n	8003554 <HardFault_Handler+0x4>

08003558 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003558:	b480      	push	{r7}
 800355a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800355c:	bf00      	nop
 800355e:	e7fd      	b.n	800355c <MemManage_Handler+0x4>

08003560 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003560:	b480      	push	{r7}
 8003562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003564:	bf00      	nop
 8003566:	e7fd      	b.n	8003564 <BusFault_Handler+0x4>

08003568 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003568:	b480      	push	{r7}
 800356a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800356c:	bf00      	nop
 800356e:	e7fd      	b.n	800356c <UsageFault_Handler+0x4>

08003570 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003570:	b480      	push	{r7}
 8003572:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003574:	bf00      	nop
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr

0800357e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800357e:	b480      	push	{r7}
 8003580:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003582:	bf00      	nop
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800358c:	b480      	push	{r7}
 800358e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003590:	bf00      	nop
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr

0800359a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800359a:	b580      	push	{r7, lr}
 800359c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800359e:	f000 f8c7 	bl	8003730 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035a2:	bf00      	nop
 80035a4:	bd80      	pop	{r7, pc}
	...

080035a8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 80035ac:	4802      	ldr	r0, [pc, #8]	@ (80035b8 <DMA1_Stream0_IRQHandler+0x10>)
 80035ae:	f000 ffe5 	bl	800457c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80035b2:	bf00      	nop
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	24000ca0 	.word	0x24000ca0

080035bc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 80035c0:	4802      	ldr	r0, [pc, #8]	@ (80035cc <DMA1_Stream1_IRQHandler+0x10>)
 80035c2:	f000 ffdb 	bl	800457c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80035c6:	bf00      	nop
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	24000d18 	.word	0x24000d18

080035d0 <MDMA_IRQHandler>:

/* USER CODE BEGIN 1 */
void MDMA_IRQHandler(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	af00      	add	r7, sp, #0
	HAL_MDMA_IRQHandler(MDMA_hmdmaRxInstance);
 80035d4:	4b05      	ldr	r3, [pc, #20]	@ (80035ec <MDMA_IRQHandler+0x1c>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4618      	mov	r0, r3
 80035da:	f003 ff13 	bl	8007404 <HAL_MDMA_IRQHandler>
	HAL_MDMA_IRQHandler(MDMA_hmdmaTxInstance);
 80035de:	4b04      	ldr	r3, [pc, #16]	@ (80035f0 <MDMA_IRQHandler+0x20>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f003 ff0e 	bl	8007404 <HAL_MDMA_IRQHandler>
}
 80035e8:	bf00      	nop
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	24001058 	.word	0x24001058
 80035f0:	2400105c 	.word	0x2400105c

080035f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80035f4:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8003630 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80035f8:	f7fd f8b2 	bl	8000760 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80035fc:	f7fd f802 	bl	8000604 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003600:	480c      	ldr	r0, [pc, #48]	@ (8003634 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003602:	490d      	ldr	r1, [pc, #52]	@ (8003638 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003604:	4a0d      	ldr	r2, [pc, #52]	@ (800363c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003606:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003608:	e002      	b.n	8003610 <LoopCopyDataInit>

0800360a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800360a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800360c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800360e:	3304      	adds	r3, #4

08003610 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003610:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003612:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003614:	d3f9      	bcc.n	800360a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003616:	4a0a      	ldr	r2, [pc, #40]	@ (8003640 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003618:	4c0a      	ldr	r4, [pc, #40]	@ (8003644 <LoopFillZerobss+0x22>)
  movs r3, #0
 800361a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800361c:	e001      	b.n	8003622 <LoopFillZerobss>

0800361e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800361e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003620:	3204      	adds	r2, #4

08003622 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003622:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003624:	d3fb      	bcc.n	800361e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003626:	f009 ffcd 	bl	800d5c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800362a:	f7fe fbb3 	bl	8001d94 <main>
  bx  lr
 800362e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003630:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003634:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003638:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 800363c:	0800d6cc 	.word	0x0800d6cc
  ldr r2, =_sbss
 8003640:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8003644:	24001068 	.word	0x24001068

08003648 <ADC3_IRQHandler>:
 * @param  None
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
  b  Infinite_Loop
 8003648:	e7ff      	b.n	800364a <Infinite_Loop>

0800364a <Infinite_Loop>:
	...

0800364c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003652:	2003      	movs	r0, #3
 8003654:	f000 f98c 	bl	8003970 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003658:	f004 ff9a 	bl	8008590 <HAL_RCC_GetSysClockFreq>
 800365c:	4602      	mov	r2, r0
 800365e:	4b15      	ldr	r3, [pc, #84]	@ (80036b4 <HAL_Init+0x68>)
 8003660:	699b      	ldr	r3, [r3, #24]
 8003662:	0a1b      	lsrs	r3, r3, #8
 8003664:	f003 030f 	and.w	r3, r3, #15
 8003668:	4913      	ldr	r1, [pc, #76]	@ (80036b8 <HAL_Init+0x6c>)
 800366a:	5ccb      	ldrb	r3, [r1, r3]
 800366c:	f003 031f 	and.w	r3, r3, #31
 8003670:	fa22 f303 	lsr.w	r3, r2, r3
 8003674:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003676:	4b0f      	ldr	r3, [pc, #60]	@ (80036b4 <HAL_Init+0x68>)
 8003678:	699b      	ldr	r3, [r3, #24]
 800367a:	f003 030f 	and.w	r3, r3, #15
 800367e:	4a0e      	ldr	r2, [pc, #56]	@ (80036b8 <HAL_Init+0x6c>)
 8003680:	5cd3      	ldrb	r3, [r2, r3]
 8003682:	f003 031f 	and.w	r3, r3, #31
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	fa22 f303 	lsr.w	r3, r2, r3
 800368c:	4a0b      	ldr	r2, [pc, #44]	@ (80036bc <HAL_Init+0x70>)
 800368e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003690:	4a0b      	ldr	r2, [pc, #44]	@ (80036c0 <HAL_Init+0x74>)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003696:	2000      	movs	r0, #0
 8003698:	f000 f814 	bl	80036c4 <HAL_InitTick>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d001      	beq.n	80036a6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e002      	b.n	80036ac <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80036a6:	f7ff fd5d 	bl	8003164 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3708      	adds	r7, #8
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	58024400 	.word	0x58024400
 80036b8:	0800d63c 	.word	0x0800d63c
 80036bc:	24000004 	.word	0x24000004
 80036c0:	24000000 	.word	0x24000000

080036c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80036cc:	4b15      	ldr	r3, [pc, #84]	@ (8003724 <HAL_InitTick+0x60>)
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d101      	bne.n	80036d8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e021      	b.n	800371c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80036d8:	4b13      	ldr	r3, [pc, #76]	@ (8003728 <HAL_InitTick+0x64>)
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	4b11      	ldr	r3, [pc, #68]	@ (8003724 <HAL_InitTick+0x60>)
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	4619      	mov	r1, r3
 80036e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80036e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80036ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ee:	4618      	mov	r0, r3
 80036f0:	f000 f971 	bl	80039d6 <HAL_SYSTICK_Config>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d001      	beq.n	80036fe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e00e      	b.n	800371c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2b0f      	cmp	r3, #15
 8003702:	d80a      	bhi.n	800371a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003704:	2200      	movs	r2, #0
 8003706:	6879      	ldr	r1, [r7, #4]
 8003708:	f04f 30ff 	mov.w	r0, #4294967295
 800370c:	f000 f93b 	bl	8003986 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003710:	4a06      	ldr	r2, [pc, #24]	@ (800372c <HAL_InitTick+0x68>)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003716:	2300      	movs	r3, #0
 8003718:	e000      	b.n	800371c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
}
 800371c:	4618      	mov	r0, r3
 800371e:	3708      	adds	r7, #8
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	2400000c 	.word	0x2400000c
 8003728:	24000000 	.word	0x24000000
 800372c:	24000008 	.word	0x24000008

08003730 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003730:	b480      	push	{r7}
 8003732:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003734:	4b06      	ldr	r3, [pc, #24]	@ (8003750 <HAL_IncTick+0x20>)
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	461a      	mov	r2, r3
 800373a:	4b06      	ldr	r3, [pc, #24]	@ (8003754 <HAL_IncTick+0x24>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4413      	add	r3, r2
 8003740:	4a04      	ldr	r2, [pc, #16]	@ (8003754 <HAL_IncTick+0x24>)
 8003742:	6013      	str	r3, [r2, #0]
}
 8003744:	bf00      	nop
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	2400000c 	.word	0x2400000c
 8003754:	24001064 	.word	0x24001064

08003758 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003758:	b480      	push	{r7}
 800375a:	af00      	add	r7, sp, #0
  return uwTick;
 800375c:	4b03      	ldr	r3, [pc, #12]	@ (800376c <HAL_GetTick+0x14>)
 800375e:	681b      	ldr	r3, [r3, #0]
}
 8003760:	4618      	mov	r0, r3
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr
 800376a:	bf00      	nop
 800376c:	24001064 	.word	0x24001064

08003770 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003778:	f7ff ffee 	bl	8003758 <HAL_GetTick>
 800377c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003788:	d005      	beq.n	8003796 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800378a:	4b0a      	ldr	r3, [pc, #40]	@ (80037b4 <HAL_Delay+0x44>)
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	461a      	mov	r2, r3
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	4413      	add	r3, r2
 8003794:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003796:	bf00      	nop
 8003798:	f7ff ffde 	bl	8003758 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	68fa      	ldr	r2, [r7, #12]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d8f7      	bhi.n	8003798 <HAL_Delay+0x28>
  {
  }
}
 80037a8:	bf00      	nop
 80037aa:	bf00      	nop
 80037ac:	3710      	adds	r7, #16
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	2400000c 	.word	0x2400000c

080037b8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80037b8:	b480      	push	{r7}
 80037ba:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80037bc:	4b03      	ldr	r3, [pc, #12]	@ (80037cc <HAL_GetREVID+0x14>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	0c1b      	lsrs	r3, r3, #16
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr
 80037cc:	5c001000 	.word	0x5c001000

080037d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b085      	sub	sp, #20
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f003 0307 	and.w	r3, r3, #7
 80037de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003810 <__NVIC_SetPriorityGrouping+0x40>)
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037e6:	68ba      	ldr	r2, [r7, #8]
 80037e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80037ec:	4013      	ands	r3, r2
 80037ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80037f8:	4b06      	ldr	r3, [pc, #24]	@ (8003814 <__NVIC_SetPriorityGrouping+0x44>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037fe:	4a04      	ldr	r2, [pc, #16]	@ (8003810 <__NVIC_SetPriorityGrouping+0x40>)
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	60d3      	str	r3, [r2, #12]
}
 8003804:	bf00      	nop
 8003806:	3714      	adds	r7, #20
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr
 8003810:	e000ed00 	.word	0xe000ed00
 8003814:	05fa0000 	.word	0x05fa0000

08003818 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003818:	b480      	push	{r7}
 800381a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800381c:	4b04      	ldr	r3, [pc, #16]	@ (8003830 <__NVIC_GetPriorityGrouping+0x18>)
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	0a1b      	lsrs	r3, r3, #8
 8003822:	f003 0307 	and.w	r3, r3, #7
}
 8003826:	4618      	mov	r0, r3
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr
 8003830:	e000ed00 	.word	0xe000ed00

08003834 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	4603      	mov	r3, r0
 800383c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800383e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003842:	2b00      	cmp	r3, #0
 8003844:	db0b      	blt.n	800385e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003846:	88fb      	ldrh	r3, [r7, #6]
 8003848:	f003 021f 	and.w	r2, r3, #31
 800384c:	4907      	ldr	r1, [pc, #28]	@ (800386c <__NVIC_EnableIRQ+0x38>)
 800384e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003852:	095b      	lsrs	r3, r3, #5
 8003854:	2001      	movs	r0, #1
 8003856:	fa00 f202 	lsl.w	r2, r0, r2
 800385a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800385e:	bf00      	nop
 8003860:	370c      	adds	r7, #12
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop
 800386c:	e000e100 	.word	0xe000e100

08003870 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	4603      	mov	r3, r0
 8003878:	6039      	str	r1, [r7, #0]
 800387a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800387c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003880:	2b00      	cmp	r3, #0
 8003882:	db0a      	blt.n	800389a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	b2da      	uxtb	r2, r3
 8003888:	490c      	ldr	r1, [pc, #48]	@ (80038bc <__NVIC_SetPriority+0x4c>)
 800388a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800388e:	0112      	lsls	r2, r2, #4
 8003890:	b2d2      	uxtb	r2, r2
 8003892:	440b      	add	r3, r1
 8003894:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003898:	e00a      	b.n	80038b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	b2da      	uxtb	r2, r3
 800389e:	4908      	ldr	r1, [pc, #32]	@ (80038c0 <__NVIC_SetPriority+0x50>)
 80038a0:	88fb      	ldrh	r3, [r7, #6]
 80038a2:	f003 030f 	and.w	r3, r3, #15
 80038a6:	3b04      	subs	r3, #4
 80038a8:	0112      	lsls	r2, r2, #4
 80038aa:	b2d2      	uxtb	r2, r2
 80038ac:	440b      	add	r3, r1
 80038ae:	761a      	strb	r2, [r3, #24]
}
 80038b0:	bf00      	nop
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr
 80038bc:	e000e100 	.word	0xe000e100
 80038c0:	e000ed00 	.word	0xe000ed00

080038c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b089      	sub	sp, #36	@ 0x24
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f003 0307 	and.w	r3, r3, #7
 80038d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	f1c3 0307 	rsb	r3, r3, #7
 80038de:	2b04      	cmp	r3, #4
 80038e0:	bf28      	it	cs
 80038e2:	2304      	movcs	r3, #4
 80038e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	3304      	adds	r3, #4
 80038ea:	2b06      	cmp	r3, #6
 80038ec:	d902      	bls.n	80038f4 <NVIC_EncodePriority+0x30>
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	3b03      	subs	r3, #3
 80038f2:	e000      	b.n	80038f6 <NVIC_EncodePriority+0x32>
 80038f4:	2300      	movs	r3, #0
 80038f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038f8:	f04f 32ff 	mov.w	r2, #4294967295
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003902:	43da      	mvns	r2, r3
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	401a      	ands	r2, r3
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800390c:	f04f 31ff 	mov.w	r1, #4294967295
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	fa01 f303 	lsl.w	r3, r1, r3
 8003916:	43d9      	mvns	r1, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800391c:	4313      	orrs	r3, r2
         );
}
 800391e:	4618      	mov	r0, r3
 8003920:	3724      	adds	r7, #36	@ 0x24
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr
	...

0800392c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	3b01      	subs	r3, #1
 8003938:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800393c:	d301      	bcc.n	8003942 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800393e:	2301      	movs	r3, #1
 8003940:	e00f      	b.n	8003962 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003942:	4a0a      	ldr	r2, [pc, #40]	@ (800396c <SysTick_Config+0x40>)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	3b01      	subs	r3, #1
 8003948:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800394a:	210f      	movs	r1, #15
 800394c:	f04f 30ff 	mov.w	r0, #4294967295
 8003950:	f7ff ff8e 	bl	8003870 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003954:	4b05      	ldr	r3, [pc, #20]	@ (800396c <SysTick_Config+0x40>)
 8003956:	2200      	movs	r2, #0
 8003958:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800395a:	4b04      	ldr	r3, [pc, #16]	@ (800396c <SysTick_Config+0x40>)
 800395c:	2207      	movs	r2, #7
 800395e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3708      	adds	r7, #8
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	e000e010 	.word	0xe000e010

08003970 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f7ff ff29 	bl	80037d0 <__NVIC_SetPriorityGrouping>
}
 800397e:	bf00      	nop
 8003980:	3708      	adds	r7, #8
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}

08003986 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003986:	b580      	push	{r7, lr}
 8003988:	b086      	sub	sp, #24
 800398a:	af00      	add	r7, sp, #0
 800398c:	4603      	mov	r3, r0
 800398e:	60b9      	str	r1, [r7, #8]
 8003990:	607a      	str	r2, [r7, #4]
 8003992:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003994:	f7ff ff40 	bl	8003818 <__NVIC_GetPriorityGrouping>
 8003998:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	68b9      	ldr	r1, [r7, #8]
 800399e:	6978      	ldr	r0, [r7, #20]
 80039a0:	f7ff ff90 	bl	80038c4 <NVIC_EncodePriority>
 80039a4:	4602      	mov	r2, r0
 80039a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80039aa:	4611      	mov	r1, r2
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7ff ff5f 	bl	8003870 <__NVIC_SetPriority>
}
 80039b2:	bf00      	nop
 80039b4:	3718      	adds	r7, #24
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b082      	sub	sp, #8
 80039be:	af00      	add	r7, sp, #0
 80039c0:	4603      	mov	r3, r0
 80039c2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7ff ff33 	bl	8003834 <__NVIC_EnableIRQ>
}
 80039ce:	bf00      	nop
 80039d0:	3708      	adds	r7, #8
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b082      	sub	sp, #8
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f7ff ffa4 	bl	800392c <SysTick_Config>
 80039e4:	4603      	mov	r3, r0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3708      	adds	r7, #8
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
	...

080039f0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b086      	sub	sp, #24
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80039f8:	f7ff feae 	bl	8003758 <HAL_GetTick>
 80039fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d101      	bne.n	8003a08 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e316      	b.n	8004036 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a66      	ldr	r2, [pc, #408]	@ (8003ba8 <HAL_DMA_Init+0x1b8>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d04a      	beq.n	8003aa8 <HAL_DMA_Init+0xb8>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a65      	ldr	r2, [pc, #404]	@ (8003bac <HAL_DMA_Init+0x1bc>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d045      	beq.n	8003aa8 <HAL_DMA_Init+0xb8>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a63      	ldr	r2, [pc, #396]	@ (8003bb0 <HAL_DMA_Init+0x1c0>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d040      	beq.n	8003aa8 <HAL_DMA_Init+0xb8>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a62      	ldr	r2, [pc, #392]	@ (8003bb4 <HAL_DMA_Init+0x1c4>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d03b      	beq.n	8003aa8 <HAL_DMA_Init+0xb8>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a60      	ldr	r2, [pc, #384]	@ (8003bb8 <HAL_DMA_Init+0x1c8>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d036      	beq.n	8003aa8 <HAL_DMA_Init+0xb8>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a5f      	ldr	r2, [pc, #380]	@ (8003bbc <HAL_DMA_Init+0x1cc>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d031      	beq.n	8003aa8 <HAL_DMA_Init+0xb8>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a5d      	ldr	r2, [pc, #372]	@ (8003bc0 <HAL_DMA_Init+0x1d0>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d02c      	beq.n	8003aa8 <HAL_DMA_Init+0xb8>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a5c      	ldr	r2, [pc, #368]	@ (8003bc4 <HAL_DMA_Init+0x1d4>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d027      	beq.n	8003aa8 <HAL_DMA_Init+0xb8>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a5a      	ldr	r2, [pc, #360]	@ (8003bc8 <HAL_DMA_Init+0x1d8>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d022      	beq.n	8003aa8 <HAL_DMA_Init+0xb8>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a59      	ldr	r2, [pc, #356]	@ (8003bcc <HAL_DMA_Init+0x1dc>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d01d      	beq.n	8003aa8 <HAL_DMA_Init+0xb8>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a57      	ldr	r2, [pc, #348]	@ (8003bd0 <HAL_DMA_Init+0x1e0>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d018      	beq.n	8003aa8 <HAL_DMA_Init+0xb8>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a56      	ldr	r2, [pc, #344]	@ (8003bd4 <HAL_DMA_Init+0x1e4>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d013      	beq.n	8003aa8 <HAL_DMA_Init+0xb8>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a54      	ldr	r2, [pc, #336]	@ (8003bd8 <HAL_DMA_Init+0x1e8>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d00e      	beq.n	8003aa8 <HAL_DMA_Init+0xb8>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a53      	ldr	r2, [pc, #332]	@ (8003bdc <HAL_DMA_Init+0x1ec>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d009      	beq.n	8003aa8 <HAL_DMA_Init+0xb8>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a51      	ldr	r2, [pc, #324]	@ (8003be0 <HAL_DMA_Init+0x1f0>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d004      	beq.n	8003aa8 <HAL_DMA_Init+0xb8>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a50      	ldr	r2, [pc, #320]	@ (8003be4 <HAL_DMA_Init+0x1f4>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d101      	bne.n	8003aac <HAL_DMA_Init+0xbc>
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e000      	b.n	8003aae <HAL_DMA_Init+0xbe>
 8003aac:	2300      	movs	r3, #0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	f000 813b 	beq.w	8003d2a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2202      	movs	r2, #2
 8003ab8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a37      	ldr	r2, [pc, #220]	@ (8003ba8 <HAL_DMA_Init+0x1b8>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d04a      	beq.n	8003b64 <HAL_DMA_Init+0x174>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a36      	ldr	r2, [pc, #216]	@ (8003bac <HAL_DMA_Init+0x1bc>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d045      	beq.n	8003b64 <HAL_DMA_Init+0x174>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a34      	ldr	r2, [pc, #208]	@ (8003bb0 <HAL_DMA_Init+0x1c0>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d040      	beq.n	8003b64 <HAL_DMA_Init+0x174>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a33      	ldr	r2, [pc, #204]	@ (8003bb4 <HAL_DMA_Init+0x1c4>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d03b      	beq.n	8003b64 <HAL_DMA_Init+0x174>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a31      	ldr	r2, [pc, #196]	@ (8003bb8 <HAL_DMA_Init+0x1c8>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d036      	beq.n	8003b64 <HAL_DMA_Init+0x174>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a30      	ldr	r2, [pc, #192]	@ (8003bbc <HAL_DMA_Init+0x1cc>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d031      	beq.n	8003b64 <HAL_DMA_Init+0x174>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a2e      	ldr	r2, [pc, #184]	@ (8003bc0 <HAL_DMA_Init+0x1d0>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d02c      	beq.n	8003b64 <HAL_DMA_Init+0x174>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a2d      	ldr	r2, [pc, #180]	@ (8003bc4 <HAL_DMA_Init+0x1d4>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d027      	beq.n	8003b64 <HAL_DMA_Init+0x174>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a2b      	ldr	r2, [pc, #172]	@ (8003bc8 <HAL_DMA_Init+0x1d8>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d022      	beq.n	8003b64 <HAL_DMA_Init+0x174>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a2a      	ldr	r2, [pc, #168]	@ (8003bcc <HAL_DMA_Init+0x1dc>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d01d      	beq.n	8003b64 <HAL_DMA_Init+0x174>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a28      	ldr	r2, [pc, #160]	@ (8003bd0 <HAL_DMA_Init+0x1e0>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d018      	beq.n	8003b64 <HAL_DMA_Init+0x174>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a27      	ldr	r2, [pc, #156]	@ (8003bd4 <HAL_DMA_Init+0x1e4>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d013      	beq.n	8003b64 <HAL_DMA_Init+0x174>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a25      	ldr	r2, [pc, #148]	@ (8003bd8 <HAL_DMA_Init+0x1e8>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d00e      	beq.n	8003b64 <HAL_DMA_Init+0x174>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a24      	ldr	r2, [pc, #144]	@ (8003bdc <HAL_DMA_Init+0x1ec>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d009      	beq.n	8003b64 <HAL_DMA_Init+0x174>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a22      	ldr	r2, [pc, #136]	@ (8003be0 <HAL_DMA_Init+0x1f0>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d004      	beq.n	8003b64 <HAL_DMA_Init+0x174>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a21      	ldr	r2, [pc, #132]	@ (8003be4 <HAL_DMA_Init+0x1f4>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d108      	bne.n	8003b76 <HAL_DMA_Init+0x186>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f022 0201 	bic.w	r2, r2, #1
 8003b72:	601a      	str	r2, [r3, #0]
 8003b74:	e007      	b.n	8003b86 <HAL_DMA_Init+0x196>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f022 0201 	bic.w	r2, r2, #1
 8003b84:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003b86:	e02f      	b.n	8003be8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b88:	f7ff fde6 	bl	8003758 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	2b05      	cmp	r3, #5
 8003b94:	d928      	bls.n	8003be8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2220      	movs	r2, #32
 8003b9a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2203      	movs	r2, #3
 8003ba0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e246      	b.n	8004036 <HAL_DMA_Init+0x646>
 8003ba8:	40020010 	.word	0x40020010
 8003bac:	40020028 	.word	0x40020028
 8003bb0:	40020040 	.word	0x40020040
 8003bb4:	40020058 	.word	0x40020058
 8003bb8:	40020070 	.word	0x40020070
 8003bbc:	40020088 	.word	0x40020088
 8003bc0:	400200a0 	.word	0x400200a0
 8003bc4:	400200b8 	.word	0x400200b8
 8003bc8:	40020410 	.word	0x40020410
 8003bcc:	40020428 	.word	0x40020428
 8003bd0:	40020440 	.word	0x40020440
 8003bd4:	40020458 	.word	0x40020458
 8003bd8:	40020470 	.word	0x40020470
 8003bdc:	40020488 	.word	0x40020488
 8003be0:	400204a0 	.word	0x400204a0
 8003be4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0301 	and.w	r3, r3, #1
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d1c8      	bne.n	8003b88 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003bfe:	697a      	ldr	r2, [r7, #20]
 8003c00:	4b83      	ldr	r3, [pc, #524]	@ (8003e10 <HAL_DMA_Init+0x420>)
 8003c02:	4013      	ands	r3, r2
 8003c04:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003c0e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	691b      	ldr	r3, [r3, #16]
 8003c14:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c1a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	699b      	ldr	r3, [r3, #24]
 8003c20:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c26:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a1b      	ldr	r3, [r3, #32]
 8003c2c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003c2e:	697a      	ldr	r2, [r7, #20]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c38:	2b04      	cmp	r3, #4
 8003c3a:	d107      	bne.n	8003c4c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c44:	4313      	orrs	r3, r2
 8003c46:	697a      	ldr	r2, [r7, #20]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003c4c:	4b71      	ldr	r3, [pc, #452]	@ (8003e14 <HAL_DMA_Init+0x424>)
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	4b71      	ldr	r3, [pc, #452]	@ (8003e18 <HAL_DMA_Init+0x428>)
 8003c52:	4013      	ands	r3, r2
 8003c54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c58:	d328      	bcc.n	8003cac <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	2b28      	cmp	r3, #40	@ 0x28
 8003c60:	d903      	bls.n	8003c6a <HAL_DMA_Init+0x27a>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	2b2e      	cmp	r3, #46	@ 0x2e
 8003c68:	d917      	bls.n	8003c9a <HAL_DMA_Init+0x2aa>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	2b3e      	cmp	r3, #62	@ 0x3e
 8003c70:	d903      	bls.n	8003c7a <HAL_DMA_Init+0x28a>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	2b42      	cmp	r3, #66	@ 0x42
 8003c78:	d90f      	bls.n	8003c9a <HAL_DMA_Init+0x2aa>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	2b46      	cmp	r3, #70	@ 0x46
 8003c80:	d903      	bls.n	8003c8a <HAL_DMA_Init+0x29a>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	2b48      	cmp	r3, #72	@ 0x48
 8003c88:	d907      	bls.n	8003c9a <HAL_DMA_Init+0x2aa>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	2b4e      	cmp	r3, #78	@ 0x4e
 8003c90:	d905      	bls.n	8003c9e <HAL_DMA_Init+0x2ae>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	2b52      	cmp	r3, #82	@ 0x52
 8003c98:	d801      	bhi.n	8003c9e <HAL_DMA_Init+0x2ae>
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e000      	b.n	8003ca0 <HAL_DMA_Init+0x2b0>
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d003      	beq.n	8003cac <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003caa:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	697a      	ldr	r2, [r7, #20]
 8003cb2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	695b      	ldr	r3, [r3, #20]
 8003cba:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	f023 0307 	bic.w	r3, r3, #7
 8003cc2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc8:	697a      	ldr	r2, [r7, #20]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd2:	2b04      	cmp	r3, #4
 8003cd4:	d117      	bne.n	8003d06 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cda:	697a      	ldr	r2, [r7, #20]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d00e      	beq.n	8003d06 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f001 fddb 	bl	80058a4 <DMA_CheckFifoParam>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d008      	beq.n	8003d06 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2240      	movs	r2, #64	@ 0x40
 8003cf8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e197      	b.n	8004036 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	697a      	ldr	r2, [r7, #20]
 8003d0c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f001 fd16 	bl	8005740 <DMA_CalcBaseAndBitshift>
 8003d14:	4603      	mov	r3, r0
 8003d16:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d1c:	f003 031f 	and.w	r3, r3, #31
 8003d20:	223f      	movs	r2, #63	@ 0x3f
 8003d22:	409a      	lsls	r2, r3
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	609a      	str	r2, [r3, #8]
 8003d28:	e0cd      	b.n	8003ec6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a3b      	ldr	r2, [pc, #236]	@ (8003e1c <HAL_DMA_Init+0x42c>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d022      	beq.n	8003d7a <HAL_DMA_Init+0x38a>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a39      	ldr	r2, [pc, #228]	@ (8003e20 <HAL_DMA_Init+0x430>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d01d      	beq.n	8003d7a <HAL_DMA_Init+0x38a>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a38      	ldr	r2, [pc, #224]	@ (8003e24 <HAL_DMA_Init+0x434>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d018      	beq.n	8003d7a <HAL_DMA_Init+0x38a>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a36      	ldr	r2, [pc, #216]	@ (8003e28 <HAL_DMA_Init+0x438>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d013      	beq.n	8003d7a <HAL_DMA_Init+0x38a>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a35      	ldr	r2, [pc, #212]	@ (8003e2c <HAL_DMA_Init+0x43c>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d00e      	beq.n	8003d7a <HAL_DMA_Init+0x38a>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a33      	ldr	r2, [pc, #204]	@ (8003e30 <HAL_DMA_Init+0x440>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d009      	beq.n	8003d7a <HAL_DMA_Init+0x38a>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a32      	ldr	r2, [pc, #200]	@ (8003e34 <HAL_DMA_Init+0x444>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d004      	beq.n	8003d7a <HAL_DMA_Init+0x38a>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a30      	ldr	r2, [pc, #192]	@ (8003e38 <HAL_DMA_Init+0x448>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d101      	bne.n	8003d7e <HAL_DMA_Init+0x38e>
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e000      	b.n	8003d80 <HAL_DMA_Init+0x390>
 8003d7e:	2300      	movs	r3, #0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	f000 8097 	beq.w	8003eb4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a24      	ldr	r2, [pc, #144]	@ (8003e1c <HAL_DMA_Init+0x42c>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d021      	beq.n	8003dd4 <HAL_DMA_Init+0x3e4>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a22      	ldr	r2, [pc, #136]	@ (8003e20 <HAL_DMA_Init+0x430>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d01c      	beq.n	8003dd4 <HAL_DMA_Init+0x3e4>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a21      	ldr	r2, [pc, #132]	@ (8003e24 <HAL_DMA_Init+0x434>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d017      	beq.n	8003dd4 <HAL_DMA_Init+0x3e4>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a1f      	ldr	r2, [pc, #124]	@ (8003e28 <HAL_DMA_Init+0x438>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d012      	beq.n	8003dd4 <HAL_DMA_Init+0x3e4>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a1e      	ldr	r2, [pc, #120]	@ (8003e2c <HAL_DMA_Init+0x43c>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d00d      	beq.n	8003dd4 <HAL_DMA_Init+0x3e4>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a1c      	ldr	r2, [pc, #112]	@ (8003e30 <HAL_DMA_Init+0x440>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d008      	beq.n	8003dd4 <HAL_DMA_Init+0x3e4>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a1b      	ldr	r2, [pc, #108]	@ (8003e34 <HAL_DMA_Init+0x444>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d003      	beq.n	8003dd4 <HAL_DMA_Init+0x3e4>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a19      	ldr	r2, [pc, #100]	@ (8003e38 <HAL_DMA_Init+0x448>)
 8003dd2:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2202      	movs	r2, #2
 8003dd8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003dec:	697a      	ldr	r2, [r7, #20]
 8003dee:	4b13      	ldr	r3, [pc, #76]	@ (8003e3c <HAL_DMA_Init+0x44c>)
 8003df0:	4013      	ands	r3, r2
 8003df2:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	2b40      	cmp	r3, #64	@ 0x40
 8003dfa:	d021      	beq.n	8003e40 <HAL_DMA_Init+0x450>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	2b80      	cmp	r3, #128	@ 0x80
 8003e02:	d102      	bne.n	8003e0a <HAL_DMA_Init+0x41a>
 8003e04:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003e08:	e01b      	b.n	8003e42 <HAL_DMA_Init+0x452>
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	e019      	b.n	8003e42 <HAL_DMA_Init+0x452>
 8003e0e:	bf00      	nop
 8003e10:	fe10803f 	.word	0xfe10803f
 8003e14:	5c001000 	.word	0x5c001000
 8003e18:	ffff0000 	.word	0xffff0000
 8003e1c:	58025408 	.word	0x58025408
 8003e20:	5802541c 	.word	0x5802541c
 8003e24:	58025430 	.word	0x58025430
 8003e28:	58025444 	.word	0x58025444
 8003e2c:	58025458 	.word	0x58025458
 8003e30:	5802546c 	.word	0x5802546c
 8003e34:	58025480 	.word	0x58025480
 8003e38:	58025494 	.word	0x58025494
 8003e3c:	fffe000f 	.word	0xfffe000f
 8003e40:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	68d2      	ldr	r2, [r2, #12]
 8003e46:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003e48:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003e50:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	695b      	ldr	r3, [r3, #20]
 8003e56:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003e58:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	699b      	ldr	r3, [r3, #24]
 8003e5e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003e60:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	69db      	ldr	r3, [r3, #28]
 8003e66:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003e68:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a1b      	ldr	r3, [r3, #32]
 8003e6e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003e70:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003e72:	697a      	ldr	r2, [r7, #20]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	697a      	ldr	r2, [r7, #20]
 8003e7e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	461a      	mov	r2, r3
 8003e86:	4b6e      	ldr	r3, [pc, #440]	@ (8004040 <HAL_DMA_Init+0x650>)
 8003e88:	4413      	add	r3, r2
 8003e8a:	4a6e      	ldr	r2, [pc, #440]	@ (8004044 <HAL_DMA_Init+0x654>)
 8003e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e90:	091b      	lsrs	r3, r3, #4
 8003e92:	009a      	lsls	r2, r3, #2
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f001 fc51 	bl	8005740 <DMA_CalcBaseAndBitshift>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ea6:	f003 031f 	and.w	r3, r3, #31
 8003eaa:	2201      	movs	r2, #1
 8003eac:	409a      	lsls	r2, r3
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	605a      	str	r2, [r3, #4]
 8003eb2:	e008      	b.n	8003ec6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2240      	movs	r2, #64	@ 0x40
 8003eb8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2203      	movs	r2, #3
 8003ebe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e0b7      	b.n	8004036 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a5f      	ldr	r2, [pc, #380]	@ (8004048 <HAL_DMA_Init+0x658>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d072      	beq.n	8003fb6 <HAL_DMA_Init+0x5c6>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a5d      	ldr	r2, [pc, #372]	@ (800404c <HAL_DMA_Init+0x65c>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d06d      	beq.n	8003fb6 <HAL_DMA_Init+0x5c6>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a5c      	ldr	r2, [pc, #368]	@ (8004050 <HAL_DMA_Init+0x660>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d068      	beq.n	8003fb6 <HAL_DMA_Init+0x5c6>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a5a      	ldr	r2, [pc, #360]	@ (8004054 <HAL_DMA_Init+0x664>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d063      	beq.n	8003fb6 <HAL_DMA_Init+0x5c6>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a59      	ldr	r2, [pc, #356]	@ (8004058 <HAL_DMA_Init+0x668>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d05e      	beq.n	8003fb6 <HAL_DMA_Init+0x5c6>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a57      	ldr	r2, [pc, #348]	@ (800405c <HAL_DMA_Init+0x66c>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d059      	beq.n	8003fb6 <HAL_DMA_Init+0x5c6>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a56      	ldr	r2, [pc, #344]	@ (8004060 <HAL_DMA_Init+0x670>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d054      	beq.n	8003fb6 <HAL_DMA_Init+0x5c6>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a54      	ldr	r2, [pc, #336]	@ (8004064 <HAL_DMA_Init+0x674>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d04f      	beq.n	8003fb6 <HAL_DMA_Init+0x5c6>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a53      	ldr	r2, [pc, #332]	@ (8004068 <HAL_DMA_Init+0x678>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d04a      	beq.n	8003fb6 <HAL_DMA_Init+0x5c6>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a51      	ldr	r2, [pc, #324]	@ (800406c <HAL_DMA_Init+0x67c>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d045      	beq.n	8003fb6 <HAL_DMA_Init+0x5c6>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a50      	ldr	r2, [pc, #320]	@ (8004070 <HAL_DMA_Init+0x680>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d040      	beq.n	8003fb6 <HAL_DMA_Init+0x5c6>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a4e      	ldr	r2, [pc, #312]	@ (8004074 <HAL_DMA_Init+0x684>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d03b      	beq.n	8003fb6 <HAL_DMA_Init+0x5c6>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a4d      	ldr	r2, [pc, #308]	@ (8004078 <HAL_DMA_Init+0x688>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d036      	beq.n	8003fb6 <HAL_DMA_Init+0x5c6>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a4b      	ldr	r2, [pc, #300]	@ (800407c <HAL_DMA_Init+0x68c>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d031      	beq.n	8003fb6 <HAL_DMA_Init+0x5c6>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a4a      	ldr	r2, [pc, #296]	@ (8004080 <HAL_DMA_Init+0x690>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d02c      	beq.n	8003fb6 <HAL_DMA_Init+0x5c6>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a48      	ldr	r2, [pc, #288]	@ (8004084 <HAL_DMA_Init+0x694>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d027      	beq.n	8003fb6 <HAL_DMA_Init+0x5c6>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a47      	ldr	r2, [pc, #284]	@ (8004088 <HAL_DMA_Init+0x698>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d022      	beq.n	8003fb6 <HAL_DMA_Init+0x5c6>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a45      	ldr	r2, [pc, #276]	@ (800408c <HAL_DMA_Init+0x69c>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d01d      	beq.n	8003fb6 <HAL_DMA_Init+0x5c6>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a44      	ldr	r2, [pc, #272]	@ (8004090 <HAL_DMA_Init+0x6a0>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d018      	beq.n	8003fb6 <HAL_DMA_Init+0x5c6>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a42      	ldr	r2, [pc, #264]	@ (8004094 <HAL_DMA_Init+0x6a4>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d013      	beq.n	8003fb6 <HAL_DMA_Init+0x5c6>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a41      	ldr	r2, [pc, #260]	@ (8004098 <HAL_DMA_Init+0x6a8>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d00e      	beq.n	8003fb6 <HAL_DMA_Init+0x5c6>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a3f      	ldr	r2, [pc, #252]	@ (800409c <HAL_DMA_Init+0x6ac>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d009      	beq.n	8003fb6 <HAL_DMA_Init+0x5c6>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a3e      	ldr	r2, [pc, #248]	@ (80040a0 <HAL_DMA_Init+0x6b0>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d004      	beq.n	8003fb6 <HAL_DMA_Init+0x5c6>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a3c      	ldr	r2, [pc, #240]	@ (80040a4 <HAL_DMA_Init+0x6b4>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d101      	bne.n	8003fba <HAL_DMA_Init+0x5ca>
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e000      	b.n	8003fbc <HAL_DMA_Init+0x5cc>
 8003fba:	2300      	movs	r3, #0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d032      	beq.n	8004026 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f001 fceb 	bl	800599c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	2b80      	cmp	r3, #128	@ 0x80
 8003fcc:	d102      	bne.n	8003fd4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	685a      	ldr	r2, [r3, #4]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fdc:	b2d2      	uxtb	r2, r2
 8003fde:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003fe8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d010      	beq.n	8004014 <HAL_DMA_Init+0x624>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	2b08      	cmp	r3, #8
 8003ff8:	d80c      	bhi.n	8004014 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f001 fd68 	bl	8005ad0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004004:	2200      	movs	r2, #0
 8004006:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004010:	605a      	str	r2, [r3, #4]
 8004012:	e008      	b.n	8004026 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004034:	2300      	movs	r3, #0
}
 8004036:	4618      	mov	r0, r3
 8004038:	3718      	adds	r7, #24
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	a7fdabf8 	.word	0xa7fdabf8
 8004044:	cccccccd 	.word	0xcccccccd
 8004048:	40020010 	.word	0x40020010
 800404c:	40020028 	.word	0x40020028
 8004050:	40020040 	.word	0x40020040
 8004054:	40020058 	.word	0x40020058
 8004058:	40020070 	.word	0x40020070
 800405c:	40020088 	.word	0x40020088
 8004060:	400200a0 	.word	0x400200a0
 8004064:	400200b8 	.word	0x400200b8
 8004068:	40020410 	.word	0x40020410
 800406c:	40020428 	.word	0x40020428
 8004070:	40020440 	.word	0x40020440
 8004074:	40020458 	.word	0x40020458
 8004078:	40020470 	.word	0x40020470
 800407c:	40020488 	.word	0x40020488
 8004080:	400204a0 	.word	0x400204a0
 8004084:	400204b8 	.word	0x400204b8
 8004088:	58025408 	.word	0x58025408
 800408c:	5802541c 	.word	0x5802541c
 8004090:	58025430 	.word	0x58025430
 8004094:	58025444 	.word	0x58025444
 8004098:	58025458 	.word	0x58025458
 800409c:	5802546c 	.word	0x5802546c
 80040a0:	58025480 	.word	0x58025480
 80040a4:	58025494 	.word	0x58025494

080040a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b086      	sub	sp, #24
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	607a      	str	r2, [r7, #4]
 80040b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040b6:	2300      	movs	r3, #0
 80040b8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d101      	bne.n	80040c4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e226      	b.n	8004512 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d101      	bne.n	80040d2 <HAL_DMA_Start_IT+0x2a>
 80040ce:	2302      	movs	r3, #2
 80040d0:	e21f      	b.n	8004512 <HAL_DMA_Start_IT+0x46a>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2201      	movs	r2, #1
 80040d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	f040 820a 	bne.w	80044fc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2202      	movs	r2, #2
 80040ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2200      	movs	r2, #0
 80040f4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a68      	ldr	r2, [pc, #416]	@ (800429c <HAL_DMA_Start_IT+0x1f4>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d04a      	beq.n	8004196 <HAL_DMA_Start_IT+0xee>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a66      	ldr	r2, [pc, #408]	@ (80042a0 <HAL_DMA_Start_IT+0x1f8>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d045      	beq.n	8004196 <HAL_DMA_Start_IT+0xee>
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a65      	ldr	r2, [pc, #404]	@ (80042a4 <HAL_DMA_Start_IT+0x1fc>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d040      	beq.n	8004196 <HAL_DMA_Start_IT+0xee>
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a63      	ldr	r2, [pc, #396]	@ (80042a8 <HAL_DMA_Start_IT+0x200>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d03b      	beq.n	8004196 <HAL_DMA_Start_IT+0xee>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a62      	ldr	r2, [pc, #392]	@ (80042ac <HAL_DMA_Start_IT+0x204>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d036      	beq.n	8004196 <HAL_DMA_Start_IT+0xee>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a60      	ldr	r2, [pc, #384]	@ (80042b0 <HAL_DMA_Start_IT+0x208>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d031      	beq.n	8004196 <HAL_DMA_Start_IT+0xee>
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a5f      	ldr	r2, [pc, #380]	@ (80042b4 <HAL_DMA_Start_IT+0x20c>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d02c      	beq.n	8004196 <HAL_DMA_Start_IT+0xee>
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a5d      	ldr	r2, [pc, #372]	@ (80042b8 <HAL_DMA_Start_IT+0x210>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d027      	beq.n	8004196 <HAL_DMA_Start_IT+0xee>
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a5c      	ldr	r2, [pc, #368]	@ (80042bc <HAL_DMA_Start_IT+0x214>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d022      	beq.n	8004196 <HAL_DMA_Start_IT+0xee>
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a5a      	ldr	r2, [pc, #360]	@ (80042c0 <HAL_DMA_Start_IT+0x218>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d01d      	beq.n	8004196 <HAL_DMA_Start_IT+0xee>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a59      	ldr	r2, [pc, #356]	@ (80042c4 <HAL_DMA_Start_IT+0x21c>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d018      	beq.n	8004196 <HAL_DMA_Start_IT+0xee>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a57      	ldr	r2, [pc, #348]	@ (80042c8 <HAL_DMA_Start_IT+0x220>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d013      	beq.n	8004196 <HAL_DMA_Start_IT+0xee>
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a56      	ldr	r2, [pc, #344]	@ (80042cc <HAL_DMA_Start_IT+0x224>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d00e      	beq.n	8004196 <HAL_DMA_Start_IT+0xee>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a54      	ldr	r2, [pc, #336]	@ (80042d0 <HAL_DMA_Start_IT+0x228>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d009      	beq.n	8004196 <HAL_DMA_Start_IT+0xee>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a53      	ldr	r2, [pc, #332]	@ (80042d4 <HAL_DMA_Start_IT+0x22c>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d004      	beq.n	8004196 <HAL_DMA_Start_IT+0xee>
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a51      	ldr	r2, [pc, #324]	@ (80042d8 <HAL_DMA_Start_IT+0x230>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d108      	bne.n	80041a8 <HAL_DMA_Start_IT+0x100>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f022 0201 	bic.w	r2, r2, #1
 80041a4:	601a      	str	r2, [r3, #0]
 80041a6:	e007      	b.n	80041b8 <HAL_DMA_Start_IT+0x110>
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f022 0201 	bic.w	r2, r2, #1
 80041b6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	68b9      	ldr	r1, [r7, #8]
 80041be:	68f8      	ldr	r0, [r7, #12]
 80041c0:	f001 f912 	bl	80053e8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a34      	ldr	r2, [pc, #208]	@ (800429c <HAL_DMA_Start_IT+0x1f4>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d04a      	beq.n	8004264 <HAL_DMA_Start_IT+0x1bc>
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a33      	ldr	r2, [pc, #204]	@ (80042a0 <HAL_DMA_Start_IT+0x1f8>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d045      	beq.n	8004264 <HAL_DMA_Start_IT+0x1bc>
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a31      	ldr	r2, [pc, #196]	@ (80042a4 <HAL_DMA_Start_IT+0x1fc>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d040      	beq.n	8004264 <HAL_DMA_Start_IT+0x1bc>
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a30      	ldr	r2, [pc, #192]	@ (80042a8 <HAL_DMA_Start_IT+0x200>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d03b      	beq.n	8004264 <HAL_DMA_Start_IT+0x1bc>
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a2e      	ldr	r2, [pc, #184]	@ (80042ac <HAL_DMA_Start_IT+0x204>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d036      	beq.n	8004264 <HAL_DMA_Start_IT+0x1bc>
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a2d      	ldr	r2, [pc, #180]	@ (80042b0 <HAL_DMA_Start_IT+0x208>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d031      	beq.n	8004264 <HAL_DMA_Start_IT+0x1bc>
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a2b      	ldr	r2, [pc, #172]	@ (80042b4 <HAL_DMA_Start_IT+0x20c>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d02c      	beq.n	8004264 <HAL_DMA_Start_IT+0x1bc>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a2a      	ldr	r2, [pc, #168]	@ (80042b8 <HAL_DMA_Start_IT+0x210>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d027      	beq.n	8004264 <HAL_DMA_Start_IT+0x1bc>
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a28      	ldr	r2, [pc, #160]	@ (80042bc <HAL_DMA_Start_IT+0x214>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d022      	beq.n	8004264 <HAL_DMA_Start_IT+0x1bc>
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a27      	ldr	r2, [pc, #156]	@ (80042c0 <HAL_DMA_Start_IT+0x218>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d01d      	beq.n	8004264 <HAL_DMA_Start_IT+0x1bc>
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a25      	ldr	r2, [pc, #148]	@ (80042c4 <HAL_DMA_Start_IT+0x21c>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d018      	beq.n	8004264 <HAL_DMA_Start_IT+0x1bc>
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a24      	ldr	r2, [pc, #144]	@ (80042c8 <HAL_DMA_Start_IT+0x220>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d013      	beq.n	8004264 <HAL_DMA_Start_IT+0x1bc>
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a22      	ldr	r2, [pc, #136]	@ (80042cc <HAL_DMA_Start_IT+0x224>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d00e      	beq.n	8004264 <HAL_DMA_Start_IT+0x1bc>
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a21      	ldr	r2, [pc, #132]	@ (80042d0 <HAL_DMA_Start_IT+0x228>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d009      	beq.n	8004264 <HAL_DMA_Start_IT+0x1bc>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a1f      	ldr	r2, [pc, #124]	@ (80042d4 <HAL_DMA_Start_IT+0x22c>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d004      	beq.n	8004264 <HAL_DMA_Start_IT+0x1bc>
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a1e      	ldr	r2, [pc, #120]	@ (80042d8 <HAL_DMA_Start_IT+0x230>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d101      	bne.n	8004268 <HAL_DMA_Start_IT+0x1c0>
 8004264:	2301      	movs	r3, #1
 8004266:	e000      	b.n	800426a <HAL_DMA_Start_IT+0x1c2>
 8004268:	2300      	movs	r3, #0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d036      	beq.n	80042dc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f023 021e 	bic.w	r2, r3, #30
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f042 0216 	orr.w	r2, r2, #22
 8004280:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004286:	2b00      	cmp	r3, #0
 8004288:	d03e      	beq.n	8004308 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f042 0208 	orr.w	r2, r2, #8
 8004298:	601a      	str	r2, [r3, #0]
 800429a:	e035      	b.n	8004308 <HAL_DMA_Start_IT+0x260>
 800429c:	40020010 	.word	0x40020010
 80042a0:	40020028 	.word	0x40020028
 80042a4:	40020040 	.word	0x40020040
 80042a8:	40020058 	.word	0x40020058
 80042ac:	40020070 	.word	0x40020070
 80042b0:	40020088 	.word	0x40020088
 80042b4:	400200a0 	.word	0x400200a0
 80042b8:	400200b8 	.word	0x400200b8
 80042bc:	40020410 	.word	0x40020410
 80042c0:	40020428 	.word	0x40020428
 80042c4:	40020440 	.word	0x40020440
 80042c8:	40020458 	.word	0x40020458
 80042cc:	40020470 	.word	0x40020470
 80042d0:	40020488 	.word	0x40020488
 80042d4:	400204a0 	.word	0x400204a0
 80042d8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f023 020e 	bic.w	r2, r3, #14
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f042 020a 	orr.w	r2, r2, #10
 80042ee:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d007      	beq.n	8004308 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f042 0204 	orr.w	r2, r2, #4
 8004306:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a83      	ldr	r2, [pc, #524]	@ (800451c <HAL_DMA_Start_IT+0x474>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d072      	beq.n	80043f8 <HAL_DMA_Start_IT+0x350>
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a82      	ldr	r2, [pc, #520]	@ (8004520 <HAL_DMA_Start_IT+0x478>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d06d      	beq.n	80043f8 <HAL_DMA_Start_IT+0x350>
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a80      	ldr	r2, [pc, #512]	@ (8004524 <HAL_DMA_Start_IT+0x47c>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d068      	beq.n	80043f8 <HAL_DMA_Start_IT+0x350>
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a7f      	ldr	r2, [pc, #508]	@ (8004528 <HAL_DMA_Start_IT+0x480>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d063      	beq.n	80043f8 <HAL_DMA_Start_IT+0x350>
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a7d      	ldr	r2, [pc, #500]	@ (800452c <HAL_DMA_Start_IT+0x484>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d05e      	beq.n	80043f8 <HAL_DMA_Start_IT+0x350>
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a7c      	ldr	r2, [pc, #496]	@ (8004530 <HAL_DMA_Start_IT+0x488>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d059      	beq.n	80043f8 <HAL_DMA_Start_IT+0x350>
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a7a      	ldr	r2, [pc, #488]	@ (8004534 <HAL_DMA_Start_IT+0x48c>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d054      	beq.n	80043f8 <HAL_DMA_Start_IT+0x350>
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a79      	ldr	r2, [pc, #484]	@ (8004538 <HAL_DMA_Start_IT+0x490>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d04f      	beq.n	80043f8 <HAL_DMA_Start_IT+0x350>
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a77      	ldr	r2, [pc, #476]	@ (800453c <HAL_DMA_Start_IT+0x494>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d04a      	beq.n	80043f8 <HAL_DMA_Start_IT+0x350>
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a76      	ldr	r2, [pc, #472]	@ (8004540 <HAL_DMA_Start_IT+0x498>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d045      	beq.n	80043f8 <HAL_DMA_Start_IT+0x350>
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a74      	ldr	r2, [pc, #464]	@ (8004544 <HAL_DMA_Start_IT+0x49c>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d040      	beq.n	80043f8 <HAL_DMA_Start_IT+0x350>
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a73      	ldr	r2, [pc, #460]	@ (8004548 <HAL_DMA_Start_IT+0x4a0>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d03b      	beq.n	80043f8 <HAL_DMA_Start_IT+0x350>
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a71      	ldr	r2, [pc, #452]	@ (800454c <HAL_DMA_Start_IT+0x4a4>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d036      	beq.n	80043f8 <HAL_DMA_Start_IT+0x350>
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a70      	ldr	r2, [pc, #448]	@ (8004550 <HAL_DMA_Start_IT+0x4a8>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d031      	beq.n	80043f8 <HAL_DMA_Start_IT+0x350>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a6e      	ldr	r2, [pc, #440]	@ (8004554 <HAL_DMA_Start_IT+0x4ac>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d02c      	beq.n	80043f8 <HAL_DMA_Start_IT+0x350>
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a6d      	ldr	r2, [pc, #436]	@ (8004558 <HAL_DMA_Start_IT+0x4b0>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d027      	beq.n	80043f8 <HAL_DMA_Start_IT+0x350>
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a6b      	ldr	r2, [pc, #428]	@ (800455c <HAL_DMA_Start_IT+0x4b4>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d022      	beq.n	80043f8 <HAL_DMA_Start_IT+0x350>
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a6a      	ldr	r2, [pc, #424]	@ (8004560 <HAL_DMA_Start_IT+0x4b8>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d01d      	beq.n	80043f8 <HAL_DMA_Start_IT+0x350>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a68      	ldr	r2, [pc, #416]	@ (8004564 <HAL_DMA_Start_IT+0x4bc>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d018      	beq.n	80043f8 <HAL_DMA_Start_IT+0x350>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a67      	ldr	r2, [pc, #412]	@ (8004568 <HAL_DMA_Start_IT+0x4c0>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d013      	beq.n	80043f8 <HAL_DMA_Start_IT+0x350>
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a65      	ldr	r2, [pc, #404]	@ (800456c <HAL_DMA_Start_IT+0x4c4>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d00e      	beq.n	80043f8 <HAL_DMA_Start_IT+0x350>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a64      	ldr	r2, [pc, #400]	@ (8004570 <HAL_DMA_Start_IT+0x4c8>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d009      	beq.n	80043f8 <HAL_DMA_Start_IT+0x350>
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a62      	ldr	r2, [pc, #392]	@ (8004574 <HAL_DMA_Start_IT+0x4cc>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d004      	beq.n	80043f8 <HAL_DMA_Start_IT+0x350>
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a61      	ldr	r2, [pc, #388]	@ (8004578 <HAL_DMA_Start_IT+0x4d0>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d101      	bne.n	80043fc <HAL_DMA_Start_IT+0x354>
 80043f8:	2301      	movs	r3, #1
 80043fa:	e000      	b.n	80043fe <HAL_DMA_Start_IT+0x356>
 80043fc:	2300      	movs	r3, #0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d01a      	beq.n	8004438 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d007      	beq.n	8004420 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800441a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800441e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004424:	2b00      	cmp	r3, #0
 8004426:	d007      	beq.n	8004438 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004432:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004436:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a37      	ldr	r2, [pc, #220]	@ (800451c <HAL_DMA_Start_IT+0x474>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d04a      	beq.n	80044d8 <HAL_DMA_Start_IT+0x430>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a36      	ldr	r2, [pc, #216]	@ (8004520 <HAL_DMA_Start_IT+0x478>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d045      	beq.n	80044d8 <HAL_DMA_Start_IT+0x430>
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a34      	ldr	r2, [pc, #208]	@ (8004524 <HAL_DMA_Start_IT+0x47c>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d040      	beq.n	80044d8 <HAL_DMA_Start_IT+0x430>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a33      	ldr	r2, [pc, #204]	@ (8004528 <HAL_DMA_Start_IT+0x480>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d03b      	beq.n	80044d8 <HAL_DMA_Start_IT+0x430>
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a31      	ldr	r2, [pc, #196]	@ (800452c <HAL_DMA_Start_IT+0x484>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d036      	beq.n	80044d8 <HAL_DMA_Start_IT+0x430>
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a30      	ldr	r2, [pc, #192]	@ (8004530 <HAL_DMA_Start_IT+0x488>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d031      	beq.n	80044d8 <HAL_DMA_Start_IT+0x430>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a2e      	ldr	r2, [pc, #184]	@ (8004534 <HAL_DMA_Start_IT+0x48c>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d02c      	beq.n	80044d8 <HAL_DMA_Start_IT+0x430>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a2d      	ldr	r2, [pc, #180]	@ (8004538 <HAL_DMA_Start_IT+0x490>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d027      	beq.n	80044d8 <HAL_DMA_Start_IT+0x430>
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a2b      	ldr	r2, [pc, #172]	@ (800453c <HAL_DMA_Start_IT+0x494>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d022      	beq.n	80044d8 <HAL_DMA_Start_IT+0x430>
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a2a      	ldr	r2, [pc, #168]	@ (8004540 <HAL_DMA_Start_IT+0x498>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d01d      	beq.n	80044d8 <HAL_DMA_Start_IT+0x430>
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a28      	ldr	r2, [pc, #160]	@ (8004544 <HAL_DMA_Start_IT+0x49c>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d018      	beq.n	80044d8 <HAL_DMA_Start_IT+0x430>
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a27      	ldr	r2, [pc, #156]	@ (8004548 <HAL_DMA_Start_IT+0x4a0>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d013      	beq.n	80044d8 <HAL_DMA_Start_IT+0x430>
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a25      	ldr	r2, [pc, #148]	@ (800454c <HAL_DMA_Start_IT+0x4a4>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d00e      	beq.n	80044d8 <HAL_DMA_Start_IT+0x430>
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a24      	ldr	r2, [pc, #144]	@ (8004550 <HAL_DMA_Start_IT+0x4a8>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d009      	beq.n	80044d8 <HAL_DMA_Start_IT+0x430>
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a22      	ldr	r2, [pc, #136]	@ (8004554 <HAL_DMA_Start_IT+0x4ac>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d004      	beq.n	80044d8 <HAL_DMA_Start_IT+0x430>
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a21      	ldr	r2, [pc, #132]	@ (8004558 <HAL_DMA_Start_IT+0x4b0>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d108      	bne.n	80044ea <HAL_DMA_Start_IT+0x442>
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f042 0201 	orr.w	r2, r2, #1
 80044e6:	601a      	str	r2, [r3, #0]
 80044e8:	e012      	b.n	8004510 <HAL_DMA_Start_IT+0x468>
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f042 0201 	orr.w	r2, r2, #1
 80044f8:	601a      	str	r2, [r3, #0]
 80044fa:	e009      	b.n	8004510 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004502:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2200      	movs	r2, #0
 8004508:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004510:	7dfb      	ldrb	r3, [r7, #23]
}
 8004512:	4618      	mov	r0, r3
 8004514:	3718      	adds	r7, #24
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	40020010 	.word	0x40020010
 8004520:	40020028 	.word	0x40020028
 8004524:	40020040 	.word	0x40020040
 8004528:	40020058 	.word	0x40020058
 800452c:	40020070 	.word	0x40020070
 8004530:	40020088 	.word	0x40020088
 8004534:	400200a0 	.word	0x400200a0
 8004538:	400200b8 	.word	0x400200b8
 800453c:	40020410 	.word	0x40020410
 8004540:	40020428 	.word	0x40020428
 8004544:	40020440 	.word	0x40020440
 8004548:	40020458 	.word	0x40020458
 800454c:	40020470 	.word	0x40020470
 8004550:	40020488 	.word	0x40020488
 8004554:	400204a0 	.word	0x400204a0
 8004558:	400204b8 	.word	0x400204b8
 800455c:	58025408 	.word	0x58025408
 8004560:	5802541c 	.word	0x5802541c
 8004564:	58025430 	.word	0x58025430
 8004568:	58025444 	.word	0x58025444
 800456c:	58025458 	.word	0x58025458
 8004570:	5802546c 	.word	0x5802546c
 8004574:	58025480 	.word	0x58025480
 8004578:	58025494 	.word	0x58025494

0800457c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b08a      	sub	sp, #40	@ 0x28
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004584:	2300      	movs	r3, #0
 8004586:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004588:	4b67      	ldr	r3, [pc, #412]	@ (8004728 <HAL_DMA_IRQHandler+0x1ac>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a67      	ldr	r2, [pc, #412]	@ (800472c <HAL_DMA_IRQHandler+0x1b0>)
 800458e:	fba2 2303 	umull	r2, r3, r2, r3
 8004592:	0a9b      	lsrs	r3, r3, #10
 8004594:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800459a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045a0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80045a2:	6a3b      	ldr	r3, [r7, #32]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a5f      	ldr	r2, [pc, #380]	@ (8004730 <HAL_DMA_IRQHandler+0x1b4>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d04a      	beq.n	800464e <HAL_DMA_IRQHandler+0xd2>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a5d      	ldr	r2, [pc, #372]	@ (8004734 <HAL_DMA_IRQHandler+0x1b8>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d045      	beq.n	800464e <HAL_DMA_IRQHandler+0xd2>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a5c      	ldr	r2, [pc, #368]	@ (8004738 <HAL_DMA_IRQHandler+0x1bc>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d040      	beq.n	800464e <HAL_DMA_IRQHandler+0xd2>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a5a      	ldr	r2, [pc, #360]	@ (800473c <HAL_DMA_IRQHandler+0x1c0>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d03b      	beq.n	800464e <HAL_DMA_IRQHandler+0xd2>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a59      	ldr	r2, [pc, #356]	@ (8004740 <HAL_DMA_IRQHandler+0x1c4>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d036      	beq.n	800464e <HAL_DMA_IRQHandler+0xd2>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a57      	ldr	r2, [pc, #348]	@ (8004744 <HAL_DMA_IRQHandler+0x1c8>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d031      	beq.n	800464e <HAL_DMA_IRQHandler+0xd2>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a56      	ldr	r2, [pc, #344]	@ (8004748 <HAL_DMA_IRQHandler+0x1cc>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d02c      	beq.n	800464e <HAL_DMA_IRQHandler+0xd2>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a54      	ldr	r2, [pc, #336]	@ (800474c <HAL_DMA_IRQHandler+0x1d0>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d027      	beq.n	800464e <HAL_DMA_IRQHandler+0xd2>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a53      	ldr	r2, [pc, #332]	@ (8004750 <HAL_DMA_IRQHandler+0x1d4>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d022      	beq.n	800464e <HAL_DMA_IRQHandler+0xd2>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a51      	ldr	r2, [pc, #324]	@ (8004754 <HAL_DMA_IRQHandler+0x1d8>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d01d      	beq.n	800464e <HAL_DMA_IRQHandler+0xd2>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a50      	ldr	r2, [pc, #320]	@ (8004758 <HAL_DMA_IRQHandler+0x1dc>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d018      	beq.n	800464e <HAL_DMA_IRQHandler+0xd2>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a4e      	ldr	r2, [pc, #312]	@ (800475c <HAL_DMA_IRQHandler+0x1e0>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d013      	beq.n	800464e <HAL_DMA_IRQHandler+0xd2>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a4d      	ldr	r2, [pc, #308]	@ (8004760 <HAL_DMA_IRQHandler+0x1e4>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d00e      	beq.n	800464e <HAL_DMA_IRQHandler+0xd2>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a4b      	ldr	r2, [pc, #300]	@ (8004764 <HAL_DMA_IRQHandler+0x1e8>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d009      	beq.n	800464e <HAL_DMA_IRQHandler+0xd2>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a4a      	ldr	r2, [pc, #296]	@ (8004768 <HAL_DMA_IRQHandler+0x1ec>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d004      	beq.n	800464e <HAL_DMA_IRQHandler+0xd2>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a48      	ldr	r2, [pc, #288]	@ (800476c <HAL_DMA_IRQHandler+0x1f0>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d101      	bne.n	8004652 <HAL_DMA_IRQHandler+0xd6>
 800464e:	2301      	movs	r3, #1
 8004650:	e000      	b.n	8004654 <HAL_DMA_IRQHandler+0xd8>
 8004652:	2300      	movs	r3, #0
 8004654:	2b00      	cmp	r3, #0
 8004656:	f000 842b 	beq.w	8004eb0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800465e:	f003 031f 	and.w	r3, r3, #31
 8004662:	2208      	movs	r2, #8
 8004664:	409a      	lsls	r2, r3
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	4013      	ands	r3, r2
 800466a:	2b00      	cmp	r3, #0
 800466c:	f000 80a2 	beq.w	80047b4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a2e      	ldr	r2, [pc, #184]	@ (8004730 <HAL_DMA_IRQHandler+0x1b4>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d04a      	beq.n	8004710 <HAL_DMA_IRQHandler+0x194>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a2d      	ldr	r2, [pc, #180]	@ (8004734 <HAL_DMA_IRQHandler+0x1b8>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d045      	beq.n	8004710 <HAL_DMA_IRQHandler+0x194>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a2b      	ldr	r2, [pc, #172]	@ (8004738 <HAL_DMA_IRQHandler+0x1bc>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d040      	beq.n	8004710 <HAL_DMA_IRQHandler+0x194>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a2a      	ldr	r2, [pc, #168]	@ (800473c <HAL_DMA_IRQHandler+0x1c0>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d03b      	beq.n	8004710 <HAL_DMA_IRQHandler+0x194>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a28      	ldr	r2, [pc, #160]	@ (8004740 <HAL_DMA_IRQHandler+0x1c4>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d036      	beq.n	8004710 <HAL_DMA_IRQHandler+0x194>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a27      	ldr	r2, [pc, #156]	@ (8004744 <HAL_DMA_IRQHandler+0x1c8>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d031      	beq.n	8004710 <HAL_DMA_IRQHandler+0x194>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a25      	ldr	r2, [pc, #148]	@ (8004748 <HAL_DMA_IRQHandler+0x1cc>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d02c      	beq.n	8004710 <HAL_DMA_IRQHandler+0x194>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a24      	ldr	r2, [pc, #144]	@ (800474c <HAL_DMA_IRQHandler+0x1d0>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d027      	beq.n	8004710 <HAL_DMA_IRQHandler+0x194>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a22      	ldr	r2, [pc, #136]	@ (8004750 <HAL_DMA_IRQHandler+0x1d4>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d022      	beq.n	8004710 <HAL_DMA_IRQHandler+0x194>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a21      	ldr	r2, [pc, #132]	@ (8004754 <HAL_DMA_IRQHandler+0x1d8>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d01d      	beq.n	8004710 <HAL_DMA_IRQHandler+0x194>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a1f      	ldr	r2, [pc, #124]	@ (8004758 <HAL_DMA_IRQHandler+0x1dc>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d018      	beq.n	8004710 <HAL_DMA_IRQHandler+0x194>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a1e      	ldr	r2, [pc, #120]	@ (800475c <HAL_DMA_IRQHandler+0x1e0>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d013      	beq.n	8004710 <HAL_DMA_IRQHandler+0x194>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a1c      	ldr	r2, [pc, #112]	@ (8004760 <HAL_DMA_IRQHandler+0x1e4>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d00e      	beq.n	8004710 <HAL_DMA_IRQHandler+0x194>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a1b      	ldr	r2, [pc, #108]	@ (8004764 <HAL_DMA_IRQHandler+0x1e8>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d009      	beq.n	8004710 <HAL_DMA_IRQHandler+0x194>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a19      	ldr	r2, [pc, #100]	@ (8004768 <HAL_DMA_IRQHandler+0x1ec>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d004      	beq.n	8004710 <HAL_DMA_IRQHandler+0x194>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a18      	ldr	r2, [pc, #96]	@ (800476c <HAL_DMA_IRQHandler+0x1f0>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d12f      	bne.n	8004770 <HAL_DMA_IRQHandler+0x1f4>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 0304 	and.w	r3, r3, #4
 800471a:	2b00      	cmp	r3, #0
 800471c:	bf14      	ite	ne
 800471e:	2301      	movne	r3, #1
 8004720:	2300      	moveq	r3, #0
 8004722:	b2db      	uxtb	r3, r3
 8004724:	e02e      	b.n	8004784 <HAL_DMA_IRQHandler+0x208>
 8004726:	bf00      	nop
 8004728:	24000000 	.word	0x24000000
 800472c:	1b4e81b5 	.word	0x1b4e81b5
 8004730:	40020010 	.word	0x40020010
 8004734:	40020028 	.word	0x40020028
 8004738:	40020040 	.word	0x40020040
 800473c:	40020058 	.word	0x40020058
 8004740:	40020070 	.word	0x40020070
 8004744:	40020088 	.word	0x40020088
 8004748:	400200a0 	.word	0x400200a0
 800474c:	400200b8 	.word	0x400200b8
 8004750:	40020410 	.word	0x40020410
 8004754:	40020428 	.word	0x40020428
 8004758:	40020440 	.word	0x40020440
 800475c:	40020458 	.word	0x40020458
 8004760:	40020470 	.word	0x40020470
 8004764:	40020488 	.word	0x40020488
 8004768:	400204a0 	.word	0x400204a0
 800476c:	400204b8 	.word	0x400204b8
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0308 	and.w	r3, r3, #8
 800477a:	2b00      	cmp	r3, #0
 800477c:	bf14      	ite	ne
 800477e:	2301      	movne	r3, #1
 8004780:	2300      	moveq	r3, #0
 8004782:	b2db      	uxtb	r3, r3
 8004784:	2b00      	cmp	r3, #0
 8004786:	d015      	beq.n	80047b4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f022 0204 	bic.w	r2, r2, #4
 8004796:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800479c:	f003 031f 	and.w	r3, r3, #31
 80047a0:	2208      	movs	r2, #8
 80047a2:	409a      	lsls	r2, r3
 80047a4:	6a3b      	ldr	r3, [r7, #32]
 80047a6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047ac:	f043 0201 	orr.w	r2, r3, #1
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047b8:	f003 031f 	and.w	r3, r3, #31
 80047bc:	69ba      	ldr	r2, [r7, #24]
 80047be:	fa22 f303 	lsr.w	r3, r2, r3
 80047c2:	f003 0301 	and.w	r3, r3, #1
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d06e      	beq.n	80048a8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a69      	ldr	r2, [pc, #420]	@ (8004974 <HAL_DMA_IRQHandler+0x3f8>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d04a      	beq.n	800486a <HAL_DMA_IRQHandler+0x2ee>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a67      	ldr	r2, [pc, #412]	@ (8004978 <HAL_DMA_IRQHandler+0x3fc>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d045      	beq.n	800486a <HAL_DMA_IRQHandler+0x2ee>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a66      	ldr	r2, [pc, #408]	@ (800497c <HAL_DMA_IRQHandler+0x400>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d040      	beq.n	800486a <HAL_DMA_IRQHandler+0x2ee>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a64      	ldr	r2, [pc, #400]	@ (8004980 <HAL_DMA_IRQHandler+0x404>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d03b      	beq.n	800486a <HAL_DMA_IRQHandler+0x2ee>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a63      	ldr	r2, [pc, #396]	@ (8004984 <HAL_DMA_IRQHandler+0x408>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d036      	beq.n	800486a <HAL_DMA_IRQHandler+0x2ee>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a61      	ldr	r2, [pc, #388]	@ (8004988 <HAL_DMA_IRQHandler+0x40c>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d031      	beq.n	800486a <HAL_DMA_IRQHandler+0x2ee>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a60      	ldr	r2, [pc, #384]	@ (800498c <HAL_DMA_IRQHandler+0x410>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d02c      	beq.n	800486a <HAL_DMA_IRQHandler+0x2ee>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a5e      	ldr	r2, [pc, #376]	@ (8004990 <HAL_DMA_IRQHandler+0x414>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d027      	beq.n	800486a <HAL_DMA_IRQHandler+0x2ee>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a5d      	ldr	r2, [pc, #372]	@ (8004994 <HAL_DMA_IRQHandler+0x418>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d022      	beq.n	800486a <HAL_DMA_IRQHandler+0x2ee>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a5b      	ldr	r2, [pc, #364]	@ (8004998 <HAL_DMA_IRQHandler+0x41c>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d01d      	beq.n	800486a <HAL_DMA_IRQHandler+0x2ee>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a5a      	ldr	r2, [pc, #360]	@ (800499c <HAL_DMA_IRQHandler+0x420>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d018      	beq.n	800486a <HAL_DMA_IRQHandler+0x2ee>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a58      	ldr	r2, [pc, #352]	@ (80049a0 <HAL_DMA_IRQHandler+0x424>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d013      	beq.n	800486a <HAL_DMA_IRQHandler+0x2ee>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a57      	ldr	r2, [pc, #348]	@ (80049a4 <HAL_DMA_IRQHandler+0x428>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d00e      	beq.n	800486a <HAL_DMA_IRQHandler+0x2ee>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a55      	ldr	r2, [pc, #340]	@ (80049a8 <HAL_DMA_IRQHandler+0x42c>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d009      	beq.n	800486a <HAL_DMA_IRQHandler+0x2ee>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a54      	ldr	r2, [pc, #336]	@ (80049ac <HAL_DMA_IRQHandler+0x430>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d004      	beq.n	800486a <HAL_DMA_IRQHandler+0x2ee>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a52      	ldr	r2, [pc, #328]	@ (80049b0 <HAL_DMA_IRQHandler+0x434>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d10a      	bne.n	8004880 <HAL_DMA_IRQHandler+0x304>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	695b      	ldr	r3, [r3, #20]
 8004870:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004874:	2b00      	cmp	r3, #0
 8004876:	bf14      	ite	ne
 8004878:	2301      	movne	r3, #1
 800487a:	2300      	moveq	r3, #0
 800487c:	b2db      	uxtb	r3, r3
 800487e:	e003      	b.n	8004888 <HAL_DMA_IRQHandler+0x30c>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2300      	movs	r3, #0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d00d      	beq.n	80048a8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004890:	f003 031f 	and.w	r3, r3, #31
 8004894:	2201      	movs	r2, #1
 8004896:	409a      	lsls	r2, r3
 8004898:	6a3b      	ldr	r3, [r7, #32]
 800489a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048a0:	f043 0202 	orr.w	r2, r3, #2
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048ac:	f003 031f 	and.w	r3, r3, #31
 80048b0:	2204      	movs	r2, #4
 80048b2:	409a      	lsls	r2, r3
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	4013      	ands	r3, r2
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	f000 808f 	beq.w	80049dc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a2c      	ldr	r2, [pc, #176]	@ (8004974 <HAL_DMA_IRQHandler+0x3f8>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d04a      	beq.n	800495e <HAL_DMA_IRQHandler+0x3e2>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a2a      	ldr	r2, [pc, #168]	@ (8004978 <HAL_DMA_IRQHandler+0x3fc>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d045      	beq.n	800495e <HAL_DMA_IRQHandler+0x3e2>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a29      	ldr	r2, [pc, #164]	@ (800497c <HAL_DMA_IRQHandler+0x400>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d040      	beq.n	800495e <HAL_DMA_IRQHandler+0x3e2>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a27      	ldr	r2, [pc, #156]	@ (8004980 <HAL_DMA_IRQHandler+0x404>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d03b      	beq.n	800495e <HAL_DMA_IRQHandler+0x3e2>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a26      	ldr	r2, [pc, #152]	@ (8004984 <HAL_DMA_IRQHandler+0x408>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d036      	beq.n	800495e <HAL_DMA_IRQHandler+0x3e2>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a24      	ldr	r2, [pc, #144]	@ (8004988 <HAL_DMA_IRQHandler+0x40c>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d031      	beq.n	800495e <HAL_DMA_IRQHandler+0x3e2>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a23      	ldr	r2, [pc, #140]	@ (800498c <HAL_DMA_IRQHandler+0x410>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d02c      	beq.n	800495e <HAL_DMA_IRQHandler+0x3e2>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a21      	ldr	r2, [pc, #132]	@ (8004990 <HAL_DMA_IRQHandler+0x414>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d027      	beq.n	800495e <HAL_DMA_IRQHandler+0x3e2>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a20      	ldr	r2, [pc, #128]	@ (8004994 <HAL_DMA_IRQHandler+0x418>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d022      	beq.n	800495e <HAL_DMA_IRQHandler+0x3e2>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a1e      	ldr	r2, [pc, #120]	@ (8004998 <HAL_DMA_IRQHandler+0x41c>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d01d      	beq.n	800495e <HAL_DMA_IRQHandler+0x3e2>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a1d      	ldr	r2, [pc, #116]	@ (800499c <HAL_DMA_IRQHandler+0x420>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d018      	beq.n	800495e <HAL_DMA_IRQHandler+0x3e2>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a1b      	ldr	r2, [pc, #108]	@ (80049a0 <HAL_DMA_IRQHandler+0x424>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d013      	beq.n	800495e <HAL_DMA_IRQHandler+0x3e2>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a1a      	ldr	r2, [pc, #104]	@ (80049a4 <HAL_DMA_IRQHandler+0x428>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d00e      	beq.n	800495e <HAL_DMA_IRQHandler+0x3e2>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a18      	ldr	r2, [pc, #96]	@ (80049a8 <HAL_DMA_IRQHandler+0x42c>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d009      	beq.n	800495e <HAL_DMA_IRQHandler+0x3e2>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a17      	ldr	r2, [pc, #92]	@ (80049ac <HAL_DMA_IRQHandler+0x430>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d004      	beq.n	800495e <HAL_DMA_IRQHandler+0x3e2>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a15      	ldr	r2, [pc, #84]	@ (80049b0 <HAL_DMA_IRQHandler+0x434>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d12a      	bne.n	80049b4 <HAL_DMA_IRQHandler+0x438>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 0302 	and.w	r3, r3, #2
 8004968:	2b00      	cmp	r3, #0
 800496a:	bf14      	ite	ne
 800496c:	2301      	movne	r3, #1
 800496e:	2300      	moveq	r3, #0
 8004970:	b2db      	uxtb	r3, r3
 8004972:	e023      	b.n	80049bc <HAL_DMA_IRQHandler+0x440>
 8004974:	40020010 	.word	0x40020010
 8004978:	40020028 	.word	0x40020028
 800497c:	40020040 	.word	0x40020040
 8004980:	40020058 	.word	0x40020058
 8004984:	40020070 	.word	0x40020070
 8004988:	40020088 	.word	0x40020088
 800498c:	400200a0 	.word	0x400200a0
 8004990:	400200b8 	.word	0x400200b8
 8004994:	40020410 	.word	0x40020410
 8004998:	40020428 	.word	0x40020428
 800499c:	40020440 	.word	0x40020440
 80049a0:	40020458 	.word	0x40020458
 80049a4:	40020470 	.word	0x40020470
 80049a8:	40020488 	.word	0x40020488
 80049ac:	400204a0 	.word	0x400204a0
 80049b0:	400204b8 	.word	0x400204b8
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2300      	movs	r3, #0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d00d      	beq.n	80049dc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049c4:	f003 031f 	and.w	r3, r3, #31
 80049c8:	2204      	movs	r2, #4
 80049ca:	409a      	lsls	r2, r3
 80049cc:	6a3b      	ldr	r3, [r7, #32]
 80049ce:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049d4:	f043 0204 	orr.w	r2, r3, #4
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049e0:	f003 031f 	and.w	r3, r3, #31
 80049e4:	2210      	movs	r2, #16
 80049e6:	409a      	lsls	r2, r3
 80049e8:	69bb      	ldr	r3, [r7, #24]
 80049ea:	4013      	ands	r3, r2
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	f000 80a6 	beq.w	8004b3e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a85      	ldr	r2, [pc, #532]	@ (8004c0c <HAL_DMA_IRQHandler+0x690>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d04a      	beq.n	8004a92 <HAL_DMA_IRQHandler+0x516>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a83      	ldr	r2, [pc, #524]	@ (8004c10 <HAL_DMA_IRQHandler+0x694>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d045      	beq.n	8004a92 <HAL_DMA_IRQHandler+0x516>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a82      	ldr	r2, [pc, #520]	@ (8004c14 <HAL_DMA_IRQHandler+0x698>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d040      	beq.n	8004a92 <HAL_DMA_IRQHandler+0x516>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a80      	ldr	r2, [pc, #512]	@ (8004c18 <HAL_DMA_IRQHandler+0x69c>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d03b      	beq.n	8004a92 <HAL_DMA_IRQHandler+0x516>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a7f      	ldr	r2, [pc, #508]	@ (8004c1c <HAL_DMA_IRQHandler+0x6a0>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d036      	beq.n	8004a92 <HAL_DMA_IRQHandler+0x516>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a7d      	ldr	r2, [pc, #500]	@ (8004c20 <HAL_DMA_IRQHandler+0x6a4>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d031      	beq.n	8004a92 <HAL_DMA_IRQHandler+0x516>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a7c      	ldr	r2, [pc, #496]	@ (8004c24 <HAL_DMA_IRQHandler+0x6a8>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d02c      	beq.n	8004a92 <HAL_DMA_IRQHandler+0x516>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a7a      	ldr	r2, [pc, #488]	@ (8004c28 <HAL_DMA_IRQHandler+0x6ac>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d027      	beq.n	8004a92 <HAL_DMA_IRQHandler+0x516>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a79      	ldr	r2, [pc, #484]	@ (8004c2c <HAL_DMA_IRQHandler+0x6b0>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d022      	beq.n	8004a92 <HAL_DMA_IRQHandler+0x516>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a77      	ldr	r2, [pc, #476]	@ (8004c30 <HAL_DMA_IRQHandler+0x6b4>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d01d      	beq.n	8004a92 <HAL_DMA_IRQHandler+0x516>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a76      	ldr	r2, [pc, #472]	@ (8004c34 <HAL_DMA_IRQHandler+0x6b8>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d018      	beq.n	8004a92 <HAL_DMA_IRQHandler+0x516>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a74      	ldr	r2, [pc, #464]	@ (8004c38 <HAL_DMA_IRQHandler+0x6bc>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d013      	beq.n	8004a92 <HAL_DMA_IRQHandler+0x516>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a73      	ldr	r2, [pc, #460]	@ (8004c3c <HAL_DMA_IRQHandler+0x6c0>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d00e      	beq.n	8004a92 <HAL_DMA_IRQHandler+0x516>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a71      	ldr	r2, [pc, #452]	@ (8004c40 <HAL_DMA_IRQHandler+0x6c4>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d009      	beq.n	8004a92 <HAL_DMA_IRQHandler+0x516>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a70      	ldr	r2, [pc, #448]	@ (8004c44 <HAL_DMA_IRQHandler+0x6c8>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d004      	beq.n	8004a92 <HAL_DMA_IRQHandler+0x516>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a6e      	ldr	r2, [pc, #440]	@ (8004c48 <HAL_DMA_IRQHandler+0x6cc>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d10a      	bne.n	8004aa8 <HAL_DMA_IRQHandler+0x52c>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 0308 	and.w	r3, r3, #8
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	bf14      	ite	ne
 8004aa0:	2301      	movne	r3, #1
 8004aa2:	2300      	moveq	r3, #0
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	e009      	b.n	8004abc <HAL_DMA_IRQHandler+0x540>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0304 	and.w	r3, r3, #4
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	bf14      	ite	ne
 8004ab6:	2301      	movne	r3, #1
 8004ab8:	2300      	moveq	r3, #0
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d03e      	beq.n	8004b3e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ac4:	f003 031f 	and.w	r3, r3, #31
 8004ac8:	2210      	movs	r2, #16
 8004aca:	409a      	lsls	r2, r3
 8004acc:	6a3b      	ldr	r3, [r7, #32]
 8004ace:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d018      	beq.n	8004b10 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d108      	bne.n	8004afe <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d024      	beq.n	8004b3e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	4798      	blx	r3
 8004afc:	e01f      	b.n	8004b3e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d01b      	beq.n	8004b3e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	4798      	blx	r3
 8004b0e:	e016      	b.n	8004b3e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d107      	bne.n	8004b2e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f022 0208 	bic.w	r2, r2, #8
 8004b2c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d003      	beq.n	8004b3e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b42:	f003 031f 	and.w	r3, r3, #31
 8004b46:	2220      	movs	r2, #32
 8004b48:	409a      	lsls	r2, r3
 8004b4a:	69bb      	ldr	r3, [r7, #24]
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	f000 8110 	beq.w	8004d74 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a2c      	ldr	r2, [pc, #176]	@ (8004c0c <HAL_DMA_IRQHandler+0x690>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d04a      	beq.n	8004bf4 <HAL_DMA_IRQHandler+0x678>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a2b      	ldr	r2, [pc, #172]	@ (8004c10 <HAL_DMA_IRQHandler+0x694>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d045      	beq.n	8004bf4 <HAL_DMA_IRQHandler+0x678>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a29      	ldr	r2, [pc, #164]	@ (8004c14 <HAL_DMA_IRQHandler+0x698>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d040      	beq.n	8004bf4 <HAL_DMA_IRQHandler+0x678>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a28      	ldr	r2, [pc, #160]	@ (8004c18 <HAL_DMA_IRQHandler+0x69c>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d03b      	beq.n	8004bf4 <HAL_DMA_IRQHandler+0x678>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a26      	ldr	r2, [pc, #152]	@ (8004c1c <HAL_DMA_IRQHandler+0x6a0>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d036      	beq.n	8004bf4 <HAL_DMA_IRQHandler+0x678>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a25      	ldr	r2, [pc, #148]	@ (8004c20 <HAL_DMA_IRQHandler+0x6a4>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d031      	beq.n	8004bf4 <HAL_DMA_IRQHandler+0x678>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a23      	ldr	r2, [pc, #140]	@ (8004c24 <HAL_DMA_IRQHandler+0x6a8>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d02c      	beq.n	8004bf4 <HAL_DMA_IRQHandler+0x678>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a22      	ldr	r2, [pc, #136]	@ (8004c28 <HAL_DMA_IRQHandler+0x6ac>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d027      	beq.n	8004bf4 <HAL_DMA_IRQHandler+0x678>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a20      	ldr	r2, [pc, #128]	@ (8004c2c <HAL_DMA_IRQHandler+0x6b0>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d022      	beq.n	8004bf4 <HAL_DMA_IRQHandler+0x678>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a1f      	ldr	r2, [pc, #124]	@ (8004c30 <HAL_DMA_IRQHandler+0x6b4>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d01d      	beq.n	8004bf4 <HAL_DMA_IRQHandler+0x678>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a1d      	ldr	r2, [pc, #116]	@ (8004c34 <HAL_DMA_IRQHandler+0x6b8>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d018      	beq.n	8004bf4 <HAL_DMA_IRQHandler+0x678>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a1c      	ldr	r2, [pc, #112]	@ (8004c38 <HAL_DMA_IRQHandler+0x6bc>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d013      	beq.n	8004bf4 <HAL_DMA_IRQHandler+0x678>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a1a      	ldr	r2, [pc, #104]	@ (8004c3c <HAL_DMA_IRQHandler+0x6c0>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d00e      	beq.n	8004bf4 <HAL_DMA_IRQHandler+0x678>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a19      	ldr	r2, [pc, #100]	@ (8004c40 <HAL_DMA_IRQHandler+0x6c4>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d009      	beq.n	8004bf4 <HAL_DMA_IRQHandler+0x678>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a17      	ldr	r2, [pc, #92]	@ (8004c44 <HAL_DMA_IRQHandler+0x6c8>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d004      	beq.n	8004bf4 <HAL_DMA_IRQHandler+0x678>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a16      	ldr	r2, [pc, #88]	@ (8004c48 <HAL_DMA_IRQHandler+0x6cc>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d12b      	bne.n	8004c4c <HAL_DMA_IRQHandler+0x6d0>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0310 	and.w	r3, r3, #16
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	bf14      	ite	ne
 8004c02:	2301      	movne	r3, #1
 8004c04:	2300      	moveq	r3, #0
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	e02a      	b.n	8004c60 <HAL_DMA_IRQHandler+0x6e4>
 8004c0a:	bf00      	nop
 8004c0c:	40020010 	.word	0x40020010
 8004c10:	40020028 	.word	0x40020028
 8004c14:	40020040 	.word	0x40020040
 8004c18:	40020058 	.word	0x40020058
 8004c1c:	40020070 	.word	0x40020070
 8004c20:	40020088 	.word	0x40020088
 8004c24:	400200a0 	.word	0x400200a0
 8004c28:	400200b8 	.word	0x400200b8
 8004c2c:	40020410 	.word	0x40020410
 8004c30:	40020428 	.word	0x40020428
 8004c34:	40020440 	.word	0x40020440
 8004c38:	40020458 	.word	0x40020458
 8004c3c:	40020470 	.word	0x40020470
 8004c40:	40020488 	.word	0x40020488
 8004c44:	400204a0 	.word	0x400204a0
 8004c48:	400204b8 	.word	0x400204b8
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0302 	and.w	r3, r3, #2
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	bf14      	ite	ne
 8004c5a:	2301      	movne	r3, #1
 8004c5c:	2300      	moveq	r3, #0
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	f000 8087 	beq.w	8004d74 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c6a:	f003 031f 	and.w	r3, r3, #31
 8004c6e:	2220      	movs	r2, #32
 8004c70:	409a      	lsls	r2, r3
 8004c72:	6a3b      	ldr	r3, [r7, #32]
 8004c74:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	2b04      	cmp	r3, #4
 8004c80:	d139      	bne.n	8004cf6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f022 0216 	bic.w	r2, r2, #22
 8004c90:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	695a      	ldr	r2, [r3, #20]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004ca0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d103      	bne.n	8004cb2 <HAL_DMA_IRQHandler+0x736>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d007      	beq.n	8004cc2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f022 0208 	bic.w	r2, r2, #8
 8004cc0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cc6:	f003 031f 	and.w	r3, r3, #31
 8004cca:	223f      	movs	r2, #63	@ 0x3f
 8004ccc:	409a      	lsls	r2, r3
 8004cce:	6a3b      	ldr	r3, [r7, #32]
 8004cd0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	f000 834a 	beq.w	8005380 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	4798      	blx	r3
          }
          return;
 8004cf4:	e344      	b.n	8005380 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d018      	beq.n	8004d36 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d108      	bne.n	8004d24 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d02c      	beq.n	8004d74 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	4798      	blx	r3
 8004d22:	e027      	b.n	8004d74 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d023      	beq.n	8004d74 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	4798      	blx	r3
 8004d34:	e01e      	b.n	8004d74 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d10f      	bne.n	8004d64 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f022 0210 	bic.w	r2, r2, #16
 8004d52:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d003      	beq.n	8004d74 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	f000 8306 	beq.w	800538a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d82:	f003 0301 	and.w	r3, r3, #1
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	f000 8088 	beq.w	8004e9c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2204      	movs	r2, #4
 8004d90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a7a      	ldr	r2, [pc, #488]	@ (8004f84 <HAL_DMA_IRQHandler+0xa08>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d04a      	beq.n	8004e34 <HAL_DMA_IRQHandler+0x8b8>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a79      	ldr	r2, [pc, #484]	@ (8004f88 <HAL_DMA_IRQHandler+0xa0c>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d045      	beq.n	8004e34 <HAL_DMA_IRQHandler+0x8b8>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a77      	ldr	r2, [pc, #476]	@ (8004f8c <HAL_DMA_IRQHandler+0xa10>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d040      	beq.n	8004e34 <HAL_DMA_IRQHandler+0x8b8>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a76      	ldr	r2, [pc, #472]	@ (8004f90 <HAL_DMA_IRQHandler+0xa14>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d03b      	beq.n	8004e34 <HAL_DMA_IRQHandler+0x8b8>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a74      	ldr	r2, [pc, #464]	@ (8004f94 <HAL_DMA_IRQHandler+0xa18>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d036      	beq.n	8004e34 <HAL_DMA_IRQHandler+0x8b8>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a73      	ldr	r2, [pc, #460]	@ (8004f98 <HAL_DMA_IRQHandler+0xa1c>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d031      	beq.n	8004e34 <HAL_DMA_IRQHandler+0x8b8>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a71      	ldr	r2, [pc, #452]	@ (8004f9c <HAL_DMA_IRQHandler+0xa20>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d02c      	beq.n	8004e34 <HAL_DMA_IRQHandler+0x8b8>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a70      	ldr	r2, [pc, #448]	@ (8004fa0 <HAL_DMA_IRQHandler+0xa24>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d027      	beq.n	8004e34 <HAL_DMA_IRQHandler+0x8b8>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a6e      	ldr	r2, [pc, #440]	@ (8004fa4 <HAL_DMA_IRQHandler+0xa28>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d022      	beq.n	8004e34 <HAL_DMA_IRQHandler+0x8b8>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a6d      	ldr	r2, [pc, #436]	@ (8004fa8 <HAL_DMA_IRQHandler+0xa2c>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d01d      	beq.n	8004e34 <HAL_DMA_IRQHandler+0x8b8>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a6b      	ldr	r2, [pc, #428]	@ (8004fac <HAL_DMA_IRQHandler+0xa30>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d018      	beq.n	8004e34 <HAL_DMA_IRQHandler+0x8b8>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a6a      	ldr	r2, [pc, #424]	@ (8004fb0 <HAL_DMA_IRQHandler+0xa34>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d013      	beq.n	8004e34 <HAL_DMA_IRQHandler+0x8b8>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a68      	ldr	r2, [pc, #416]	@ (8004fb4 <HAL_DMA_IRQHandler+0xa38>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d00e      	beq.n	8004e34 <HAL_DMA_IRQHandler+0x8b8>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a67      	ldr	r2, [pc, #412]	@ (8004fb8 <HAL_DMA_IRQHandler+0xa3c>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d009      	beq.n	8004e34 <HAL_DMA_IRQHandler+0x8b8>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a65      	ldr	r2, [pc, #404]	@ (8004fbc <HAL_DMA_IRQHandler+0xa40>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d004      	beq.n	8004e34 <HAL_DMA_IRQHandler+0x8b8>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a64      	ldr	r2, [pc, #400]	@ (8004fc0 <HAL_DMA_IRQHandler+0xa44>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d108      	bne.n	8004e46 <HAL_DMA_IRQHandler+0x8ca>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f022 0201 	bic.w	r2, r2, #1
 8004e42:	601a      	str	r2, [r3, #0]
 8004e44:	e007      	b.n	8004e56 <HAL_DMA_IRQHandler+0x8da>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f022 0201 	bic.w	r2, r2, #1
 8004e54:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	3301      	adds	r3, #1
 8004e5a:	60fb      	str	r3, [r7, #12]
 8004e5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d307      	bcc.n	8004e72 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 0301 	and.w	r3, r3, #1
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d1f2      	bne.n	8004e56 <HAL_DMA_IRQHandler+0x8da>
 8004e70:	e000      	b.n	8004e74 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004e72:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0301 	and.w	r3, r3, #1
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d004      	beq.n	8004e8c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2203      	movs	r2, #3
 8004e86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8004e8a:	e003      	b.n	8004e94 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	f000 8272 	beq.w	800538a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	4798      	blx	r3
 8004eae:	e26c      	b.n	800538a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a43      	ldr	r2, [pc, #268]	@ (8004fc4 <HAL_DMA_IRQHandler+0xa48>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d022      	beq.n	8004f00 <HAL_DMA_IRQHandler+0x984>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a42      	ldr	r2, [pc, #264]	@ (8004fc8 <HAL_DMA_IRQHandler+0xa4c>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d01d      	beq.n	8004f00 <HAL_DMA_IRQHandler+0x984>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a40      	ldr	r2, [pc, #256]	@ (8004fcc <HAL_DMA_IRQHandler+0xa50>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d018      	beq.n	8004f00 <HAL_DMA_IRQHandler+0x984>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a3f      	ldr	r2, [pc, #252]	@ (8004fd0 <HAL_DMA_IRQHandler+0xa54>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d013      	beq.n	8004f00 <HAL_DMA_IRQHandler+0x984>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a3d      	ldr	r2, [pc, #244]	@ (8004fd4 <HAL_DMA_IRQHandler+0xa58>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d00e      	beq.n	8004f00 <HAL_DMA_IRQHandler+0x984>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a3c      	ldr	r2, [pc, #240]	@ (8004fd8 <HAL_DMA_IRQHandler+0xa5c>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d009      	beq.n	8004f00 <HAL_DMA_IRQHandler+0x984>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a3a      	ldr	r2, [pc, #232]	@ (8004fdc <HAL_DMA_IRQHandler+0xa60>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d004      	beq.n	8004f00 <HAL_DMA_IRQHandler+0x984>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a39      	ldr	r2, [pc, #228]	@ (8004fe0 <HAL_DMA_IRQHandler+0xa64>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d101      	bne.n	8004f04 <HAL_DMA_IRQHandler+0x988>
 8004f00:	2301      	movs	r3, #1
 8004f02:	e000      	b.n	8004f06 <HAL_DMA_IRQHandler+0x98a>
 8004f04:	2300      	movs	r3, #0
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	f000 823f 	beq.w	800538a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f18:	f003 031f 	and.w	r3, r3, #31
 8004f1c:	2204      	movs	r2, #4
 8004f1e:	409a      	lsls	r2, r3
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	4013      	ands	r3, r2
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	f000 80cd 	beq.w	80050c4 <HAL_DMA_IRQHandler+0xb48>
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	f003 0304 	and.w	r3, r3, #4
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	f000 80c7 	beq.w	80050c4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f3a:	f003 031f 	and.w	r3, r3, #31
 8004f3e:	2204      	movs	r2, #4
 8004f40:	409a      	lsls	r2, r3
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d049      	beq.n	8004fe4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d109      	bne.n	8004f6e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	f000 8210 	beq.w	8005384 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f6c:	e20a      	b.n	8005384 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	f000 8206 	beq.w	8005384 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f80:	e200      	b.n	8005384 <HAL_DMA_IRQHandler+0xe08>
 8004f82:	bf00      	nop
 8004f84:	40020010 	.word	0x40020010
 8004f88:	40020028 	.word	0x40020028
 8004f8c:	40020040 	.word	0x40020040
 8004f90:	40020058 	.word	0x40020058
 8004f94:	40020070 	.word	0x40020070
 8004f98:	40020088 	.word	0x40020088
 8004f9c:	400200a0 	.word	0x400200a0
 8004fa0:	400200b8 	.word	0x400200b8
 8004fa4:	40020410 	.word	0x40020410
 8004fa8:	40020428 	.word	0x40020428
 8004fac:	40020440 	.word	0x40020440
 8004fb0:	40020458 	.word	0x40020458
 8004fb4:	40020470 	.word	0x40020470
 8004fb8:	40020488 	.word	0x40020488
 8004fbc:	400204a0 	.word	0x400204a0
 8004fc0:	400204b8 	.word	0x400204b8
 8004fc4:	58025408 	.word	0x58025408
 8004fc8:	5802541c 	.word	0x5802541c
 8004fcc:	58025430 	.word	0x58025430
 8004fd0:	58025444 	.word	0x58025444
 8004fd4:	58025458 	.word	0x58025458
 8004fd8:	5802546c 	.word	0x5802546c
 8004fdc:	58025480 	.word	0x58025480
 8004fe0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	f003 0320 	and.w	r3, r3, #32
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d160      	bne.n	80050b0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a7f      	ldr	r2, [pc, #508]	@ (80051f0 <HAL_DMA_IRQHandler+0xc74>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d04a      	beq.n	800508e <HAL_DMA_IRQHandler+0xb12>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a7d      	ldr	r2, [pc, #500]	@ (80051f4 <HAL_DMA_IRQHandler+0xc78>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d045      	beq.n	800508e <HAL_DMA_IRQHandler+0xb12>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a7c      	ldr	r2, [pc, #496]	@ (80051f8 <HAL_DMA_IRQHandler+0xc7c>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d040      	beq.n	800508e <HAL_DMA_IRQHandler+0xb12>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a7a      	ldr	r2, [pc, #488]	@ (80051fc <HAL_DMA_IRQHandler+0xc80>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d03b      	beq.n	800508e <HAL_DMA_IRQHandler+0xb12>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a79      	ldr	r2, [pc, #484]	@ (8005200 <HAL_DMA_IRQHandler+0xc84>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d036      	beq.n	800508e <HAL_DMA_IRQHandler+0xb12>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a77      	ldr	r2, [pc, #476]	@ (8005204 <HAL_DMA_IRQHandler+0xc88>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d031      	beq.n	800508e <HAL_DMA_IRQHandler+0xb12>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a76      	ldr	r2, [pc, #472]	@ (8005208 <HAL_DMA_IRQHandler+0xc8c>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d02c      	beq.n	800508e <HAL_DMA_IRQHandler+0xb12>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a74      	ldr	r2, [pc, #464]	@ (800520c <HAL_DMA_IRQHandler+0xc90>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d027      	beq.n	800508e <HAL_DMA_IRQHandler+0xb12>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a73      	ldr	r2, [pc, #460]	@ (8005210 <HAL_DMA_IRQHandler+0xc94>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d022      	beq.n	800508e <HAL_DMA_IRQHandler+0xb12>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a71      	ldr	r2, [pc, #452]	@ (8005214 <HAL_DMA_IRQHandler+0xc98>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d01d      	beq.n	800508e <HAL_DMA_IRQHandler+0xb12>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a70      	ldr	r2, [pc, #448]	@ (8005218 <HAL_DMA_IRQHandler+0xc9c>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d018      	beq.n	800508e <HAL_DMA_IRQHandler+0xb12>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a6e      	ldr	r2, [pc, #440]	@ (800521c <HAL_DMA_IRQHandler+0xca0>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d013      	beq.n	800508e <HAL_DMA_IRQHandler+0xb12>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a6d      	ldr	r2, [pc, #436]	@ (8005220 <HAL_DMA_IRQHandler+0xca4>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d00e      	beq.n	800508e <HAL_DMA_IRQHandler+0xb12>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a6b      	ldr	r2, [pc, #428]	@ (8005224 <HAL_DMA_IRQHandler+0xca8>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d009      	beq.n	800508e <HAL_DMA_IRQHandler+0xb12>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a6a      	ldr	r2, [pc, #424]	@ (8005228 <HAL_DMA_IRQHandler+0xcac>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d004      	beq.n	800508e <HAL_DMA_IRQHandler+0xb12>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a68      	ldr	r2, [pc, #416]	@ (800522c <HAL_DMA_IRQHandler+0xcb0>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d108      	bne.n	80050a0 <HAL_DMA_IRQHandler+0xb24>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f022 0208 	bic.w	r2, r2, #8
 800509c:	601a      	str	r2, [r3, #0]
 800509e:	e007      	b.n	80050b0 <HAL_DMA_IRQHandler+0xb34>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f022 0204 	bic.w	r2, r2, #4
 80050ae:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	f000 8165 	beq.w	8005384 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80050c2:	e15f      	b.n	8005384 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050c8:	f003 031f 	and.w	r3, r3, #31
 80050cc:	2202      	movs	r2, #2
 80050ce:	409a      	lsls	r2, r3
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	4013      	ands	r3, r2
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	f000 80c5 	beq.w	8005264 <HAL_DMA_IRQHandler+0xce8>
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	f003 0302 	and.w	r3, r3, #2
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	f000 80bf 	beq.w	8005264 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050ea:	f003 031f 	and.w	r3, r3, #31
 80050ee:	2202      	movs	r2, #2
 80050f0:	409a      	lsls	r2, r3
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d018      	beq.n	8005132 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d109      	bne.n	800511e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800510e:	2b00      	cmp	r3, #0
 8005110:	f000 813a 	beq.w	8005388 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800511c:	e134      	b.n	8005388 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005122:	2b00      	cmp	r3, #0
 8005124:	f000 8130 	beq.w	8005388 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005130:	e12a      	b.n	8005388 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	f003 0320 	and.w	r3, r3, #32
 8005138:	2b00      	cmp	r3, #0
 800513a:	f040 8089 	bne.w	8005250 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a2b      	ldr	r2, [pc, #172]	@ (80051f0 <HAL_DMA_IRQHandler+0xc74>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d04a      	beq.n	80051de <HAL_DMA_IRQHandler+0xc62>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a29      	ldr	r2, [pc, #164]	@ (80051f4 <HAL_DMA_IRQHandler+0xc78>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d045      	beq.n	80051de <HAL_DMA_IRQHandler+0xc62>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a28      	ldr	r2, [pc, #160]	@ (80051f8 <HAL_DMA_IRQHandler+0xc7c>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d040      	beq.n	80051de <HAL_DMA_IRQHandler+0xc62>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a26      	ldr	r2, [pc, #152]	@ (80051fc <HAL_DMA_IRQHandler+0xc80>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d03b      	beq.n	80051de <HAL_DMA_IRQHandler+0xc62>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a25      	ldr	r2, [pc, #148]	@ (8005200 <HAL_DMA_IRQHandler+0xc84>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d036      	beq.n	80051de <HAL_DMA_IRQHandler+0xc62>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a23      	ldr	r2, [pc, #140]	@ (8005204 <HAL_DMA_IRQHandler+0xc88>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d031      	beq.n	80051de <HAL_DMA_IRQHandler+0xc62>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a22      	ldr	r2, [pc, #136]	@ (8005208 <HAL_DMA_IRQHandler+0xc8c>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d02c      	beq.n	80051de <HAL_DMA_IRQHandler+0xc62>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a20      	ldr	r2, [pc, #128]	@ (800520c <HAL_DMA_IRQHandler+0xc90>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d027      	beq.n	80051de <HAL_DMA_IRQHandler+0xc62>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a1f      	ldr	r2, [pc, #124]	@ (8005210 <HAL_DMA_IRQHandler+0xc94>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d022      	beq.n	80051de <HAL_DMA_IRQHandler+0xc62>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a1d      	ldr	r2, [pc, #116]	@ (8005214 <HAL_DMA_IRQHandler+0xc98>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d01d      	beq.n	80051de <HAL_DMA_IRQHandler+0xc62>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a1c      	ldr	r2, [pc, #112]	@ (8005218 <HAL_DMA_IRQHandler+0xc9c>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d018      	beq.n	80051de <HAL_DMA_IRQHandler+0xc62>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a1a      	ldr	r2, [pc, #104]	@ (800521c <HAL_DMA_IRQHandler+0xca0>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d013      	beq.n	80051de <HAL_DMA_IRQHandler+0xc62>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a19      	ldr	r2, [pc, #100]	@ (8005220 <HAL_DMA_IRQHandler+0xca4>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d00e      	beq.n	80051de <HAL_DMA_IRQHandler+0xc62>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a17      	ldr	r2, [pc, #92]	@ (8005224 <HAL_DMA_IRQHandler+0xca8>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d009      	beq.n	80051de <HAL_DMA_IRQHandler+0xc62>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a16      	ldr	r2, [pc, #88]	@ (8005228 <HAL_DMA_IRQHandler+0xcac>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d004      	beq.n	80051de <HAL_DMA_IRQHandler+0xc62>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a14      	ldr	r2, [pc, #80]	@ (800522c <HAL_DMA_IRQHandler+0xcb0>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d128      	bne.n	8005230 <HAL_DMA_IRQHandler+0xcb4>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f022 0214 	bic.w	r2, r2, #20
 80051ec:	601a      	str	r2, [r3, #0]
 80051ee:	e027      	b.n	8005240 <HAL_DMA_IRQHandler+0xcc4>
 80051f0:	40020010 	.word	0x40020010
 80051f4:	40020028 	.word	0x40020028
 80051f8:	40020040 	.word	0x40020040
 80051fc:	40020058 	.word	0x40020058
 8005200:	40020070 	.word	0x40020070
 8005204:	40020088 	.word	0x40020088
 8005208:	400200a0 	.word	0x400200a0
 800520c:	400200b8 	.word	0x400200b8
 8005210:	40020410 	.word	0x40020410
 8005214:	40020428 	.word	0x40020428
 8005218:	40020440 	.word	0x40020440
 800521c:	40020458 	.word	0x40020458
 8005220:	40020470 	.word	0x40020470
 8005224:	40020488 	.word	0x40020488
 8005228:	400204a0 	.word	0x400204a0
 800522c:	400204b8 	.word	0x400204b8
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f022 020a 	bic.w	r2, r2, #10
 800523e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005254:	2b00      	cmp	r3, #0
 8005256:	f000 8097 	beq.w	8005388 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005262:	e091      	b.n	8005388 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005268:	f003 031f 	and.w	r3, r3, #31
 800526c:	2208      	movs	r2, #8
 800526e:	409a      	lsls	r2, r3
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	4013      	ands	r3, r2
 8005274:	2b00      	cmp	r3, #0
 8005276:	f000 8088 	beq.w	800538a <HAL_DMA_IRQHandler+0xe0e>
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	f003 0308 	and.w	r3, r3, #8
 8005280:	2b00      	cmp	r3, #0
 8005282:	f000 8082 	beq.w	800538a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a41      	ldr	r2, [pc, #260]	@ (8005390 <HAL_DMA_IRQHandler+0xe14>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d04a      	beq.n	8005326 <HAL_DMA_IRQHandler+0xdaa>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a3f      	ldr	r2, [pc, #252]	@ (8005394 <HAL_DMA_IRQHandler+0xe18>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d045      	beq.n	8005326 <HAL_DMA_IRQHandler+0xdaa>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a3e      	ldr	r2, [pc, #248]	@ (8005398 <HAL_DMA_IRQHandler+0xe1c>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d040      	beq.n	8005326 <HAL_DMA_IRQHandler+0xdaa>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a3c      	ldr	r2, [pc, #240]	@ (800539c <HAL_DMA_IRQHandler+0xe20>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d03b      	beq.n	8005326 <HAL_DMA_IRQHandler+0xdaa>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a3b      	ldr	r2, [pc, #236]	@ (80053a0 <HAL_DMA_IRQHandler+0xe24>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d036      	beq.n	8005326 <HAL_DMA_IRQHandler+0xdaa>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a39      	ldr	r2, [pc, #228]	@ (80053a4 <HAL_DMA_IRQHandler+0xe28>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d031      	beq.n	8005326 <HAL_DMA_IRQHandler+0xdaa>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a38      	ldr	r2, [pc, #224]	@ (80053a8 <HAL_DMA_IRQHandler+0xe2c>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d02c      	beq.n	8005326 <HAL_DMA_IRQHandler+0xdaa>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a36      	ldr	r2, [pc, #216]	@ (80053ac <HAL_DMA_IRQHandler+0xe30>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d027      	beq.n	8005326 <HAL_DMA_IRQHandler+0xdaa>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a35      	ldr	r2, [pc, #212]	@ (80053b0 <HAL_DMA_IRQHandler+0xe34>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d022      	beq.n	8005326 <HAL_DMA_IRQHandler+0xdaa>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a33      	ldr	r2, [pc, #204]	@ (80053b4 <HAL_DMA_IRQHandler+0xe38>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d01d      	beq.n	8005326 <HAL_DMA_IRQHandler+0xdaa>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a32      	ldr	r2, [pc, #200]	@ (80053b8 <HAL_DMA_IRQHandler+0xe3c>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d018      	beq.n	8005326 <HAL_DMA_IRQHandler+0xdaa>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a30      	ldr	r2, [pc, #192]	@ (80053bc <HAL_DMA_IRQHandler+0xe40>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d013      	beq.n	8005326 <HAL_DMA_IRQHandler+0xdaa>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a2f      	ldr	r2, [pc, #188]	@ (80053c0 <HAL_DMA_IRQHandler+0xe44>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d00e      	beq.n	8005326 <HAL_DMA_IRQHandler+0xdaa>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a2d      	ldr	r2, [pc, #180]	@ (80053c4 <HAL_DMA_IRQHandler+0xe48>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d009      	beq.n	8005326 <HAL_DMA_IRQHandler+0xdaa>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a2c      	ldr	r2, [pc, #176]	@ (80053c8 <HAL_DMA_IRQHandler+0xe4c>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d004      	beq.n	8005326 <HAL_DMA_IRQHandler+0xdaa>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a2a      	ldr	r2, [pc, #168]	@ (80053cc <HAL_DMA_IRQHandler+0xe50>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d108      	bne.n	8005338 <HAL_DMA_IRQHandler+0xdbc>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f022 021c 	bic.w	r2, r2, #28
 8005334:	601a      	str	r2, [r3, #0]
 8005336:	e007      	b.n	8005348 <HAL_DMA_IRQHandler+0xdcc>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f022 020e 	bic.w	r2, r2, #14
 8005346:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800534c:	f003 031f 	and.w	r3, r3, #31
 8005350:	2201      	movs	r2, #1
 8005352:	409a      	lsls	r2, r3
 8005354:	69fb      	ldr	r3, [r7, #28]
 8005356:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2201      	movs	r2, #1
 8005362:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005372:	2b00      	cmp	r3, #0
 8005374:	d009      	beq.n	800538a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	4798      	blx	r3
 800537e:	e004      	b.n	800538a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005380:	bf00      	nop
 8005382:	e002      	b.n	800538a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005384:	bf00      	nop
 8005386:	e000      	b.n	800538a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005388:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800538a:	3728      	adds	r7, #40	@ 0x28
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}
 8005390:	40020010 	.word	0x40020010
 8005394:	40020028 	.word	0x40020028
 8005398:	40020040 	.word	0x40020040
 800539c:	40020058 	.word	0x40020058
 80053a0:	40020070 	.word	0x40020070
 80053a4:	40020088 	.word	0x40020088
 80053a8:	400200a0 	.word	0x400200a0
 80053ac:	400200b8 	.word	0x400200b8
 80053b0:	40020410 	.word	0x40020410
 80053b4:	40020428 	.word	0x40020428
 80053b8:	40020440 	.word	0x40020440
 80053bc:	40020458 	.word	0x40020458
 80053c0:	40020470 	.word	0x40020470
 80053c4:	40020488 	.word	0x40020488
 80053c8:	400204a0 	.word	0x400204a0
 80053cc:	400204b8 	.word	0x400204b8

080053d0 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80053dc:	4618      	mov	r0, r3
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b087      	sub	sp, #28
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	607a      	str	r2, [r7, #4]
 80053f4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053fa:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005400:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a7f      	ldr	r2, [pc, #508]	@ (8005604 <DMA_SetConfig+0x21c>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d072      	beq.n	80054f2 <DMA_SetConfig+0x10a>
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a7d      	ldr	r2, [pc, #500]	@ (8005608 <DMA_SetConfig+0x220>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d06d      	beq.n	80054f2 <DMA_SetConfig+0x10a>
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a7c      	ldr	r2, [pc, #496]	@ (800560c <DMA_SetConfig+0x224>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d068      	beq.n	80054f2 <DMA_SetConfig+0x10a>
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a7a      	ldr	r2, [pc, #488]	@ (8005610 <DMA_SetConfig+0x228>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d063      	beq.n	80054f2 <DMA_SetConfig+0x10a>
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a79      	ldr	r2, [pc, #484]	@ (8005614 <DMA_SetConfig+0x22c>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d05e      	beq.n	80054f2 <DMA_SetConfig+0x10a>
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a77      	ldr	r2, [pc, #476]	@ (8005618 <DMA_SetConfig+0x230>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d059      	beq.n	80054f2 <DMA_SetConfig+0x10a>
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a76      	ldr	r2, [pc, #472]	@ (800561c <DMA_SetConfig+0x234>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d054      	beq.n	80054f2 <DMA_SetConfig+0x10a>
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a74      	ldr	r2, [pc, #464]	@ (8005620 <DMA_SetConfig+0x238>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d04f      	beq.n	80054f2 <DMA_SetConfig+0x10a>
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a73      	ldr	r2, [pc, #460]	@ (8005624 <DMA_SetConfig+0x23c>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d04a      	beq.n	80054f2 <DMA_SetConfig+0x10a>
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a71      	ldr	r2, [pc, #452]	@ (8005628 <DMA_SetConfig+0x240>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d045      	beq.n	80054f2 <DMA_SetConfig+0x10a>
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a70      	ldr	r2, [pc, #448]	@ (800562c <DMA_SetConfig+0x244>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d040      	beq.n	80054f2 <DMA_SetConfig+0x10a>
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a6e      	ldr	r2, [pc, #440]	@ (8005630 <DMA_SetConfig+0x248>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d03b      	beq.n	80054f2 <DMA_SetConfig+0x10a>
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a6d      	ldr	r2, [pc, #436]	@ (8005634 <DMA_SetConfig+0x24c>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d036      	beq.n	80054f2 <DMA_SetConfig+0x10a>
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a6b      	ldr	r2, [pc, #428]	@ (8005638 <DMA_SetConfig+0x250>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d031      	beq.n	80054f2 <DMA_SetConfig+0x10a>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a6a      	ldr	r2, [pc, #424]	@ (800563c <DMA_SetConfig+0x254>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d02c      	beq.n	80054f2 <DMA_SetConfig+0x10a>
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a68      	ldr	r2, [pc, #416]	@ (8005640 <DMA_SetConfig+0x258>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d027      	beq.n	80054f2 <DMA_SetConfig+0x10a>
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a67      	ldr	r2, [pc, #412]	@ (8005644 <DMA_SetConfig+0x25c>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d022      	beq.n	80054f2 <DMA_SetConfig+0x10a>
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a65      	ldr	r2, [pc, #404]	@ (8005648 <DMA_SetConfig+0x260>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d01d      	beq.n	80054f2 <DMA_SetConfig+0x10a>
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a64      	ldr	r2, [pc, #400]	@ (800564c <DMA_SetConfig+0x264>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d018      	beq.n	80054f2 <DMA_SetConfig+0x10a>
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a62      	ldr	r2, [pc, #392]	@ (8005650 <DMA_SetConfig+0x268>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d013      	beq.n	80054f2 <DMA_SetConfig+0x10a>
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a61      	ldr	r2, [pc, #388]	@ (8005654 <DMA_SetConfig+0x26c>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d00e      	beq.n	80054f2 <DMA_SetConfig+0x10a>
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a5f      	ldr	r2, [pc, #380]	@ (8005658 <DMA_SetConfig+0x270>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d009      	beq.n	80054f2 <DMA_SetConfig+0x10a>
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a5e      	ldr	r2, [pc, #376]	@ (800565c <DMA_SetConfig+0x274>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d004      	beq.n	80054f2 <DMA_SetConfig+0x10a>
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a5c      	ldr	r2, [pc, #368]	@ (8005660 <DMA_SetConfig+0x278>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d101      	bne.n	80054f6 <DMA_SetConfig+0x10e>
 80054f2:	2301      	movs	r3, #1
 80054f4:	e000      	b.n	80054f8 <DMA_SetConfig+0x110>
 80054f6:	2300      	movs	r3, #0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d00d      	beq.n	8005518 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005500:	68fa      	ldr	r2, [r7, #12]
 8005502:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005504:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800550a:	2b00      	cmp	r3, #0
 800550c:	d004      	beq.n	8005518 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005512:	68fa      	ldr	r2, [r7, #12]
 8005514:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005516:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a39      	ldr	r2, [pc, #228]	@ (8005604 <DMA_SetConfig+0x21c>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d04a      	beq.n	80055b8 <DMA_SetConfig+0x1d0>
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a38      	ldr	r2, [pc, #224]	@ (8005608 <DMA_SetConfig+0x220>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d045      	beq.n	80055b8 <DMA_SetConfig+0x1d0>
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a36      	ldr	r2, [pc, #216]	@ (800560c <DMA_SetConfig+0x224>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d040      	beq.n	80055b8 <DMA_SetConfig+0x1d0>
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a35      	ldr	r2, [pc, #212]	@ (8005610 <DMA_SetConfig+0x228>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d03b      	beq.n	80055b8 <DMA_SetConfig+0x1d0>
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a33      	ldr	r2, [pc, #204]	@ (8005614 <DMA_SetConfig+0x22c>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d036      	beq.n	80055b8 <DMA_SetConfig+0x1d0>
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a32      	ldr	r2, [pc, #200]	@ (8005618 <DMA_SetConfig+0x230>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d031      	beq.n	80055b8 <DMA_SetConfig+0x1d0>
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a30      	ldr	r2, [pc, #192]	@ (800561c <DMA_SetConfig+0x234>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d02c      	beq.n	80055b8 <DMA_SetConfig+0x1d0>
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a2f      	ldr	r2, [pc, #188]	@ (8005620 <DMA_SetConfig+0x238>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d027      	beq.n	80055b8 <DMA_SetConfig+0x1d0>
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a2d      	ldr	r2, [pc, #180]	@ (8005624 <DMA_SetConfig+0x23c>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d022      	beq.n	80055b8 <DMA_SetConfig+0x1d0>
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a2c      	ldr	r2, [pc, #176]	@ (8005628 <DMA_SetConfig+0x240>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d01d      	beq.n	80055b8 <DMA_SetConfig+0x1d0>
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a2a      	ldr	r2, [pc, #168]	@ (800562c <DMA_SetConfig+0x244>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d018      	beq.n	80055b8 <DMA_SetConfig+0x1d0>
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a29      	ldr	r2, [pc, #164]	@ (8005630 <DMA_SetConfig+0x248>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d013      	beq.n	80055b8 <DMA_SetConfig+0x1d0>
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a27      	ldr	r2, [pc, #156]	@ (8005634 <DMA_SetConfig+0x24c>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d00e      	beq.n	80055b8 <DMA_SetConfig+0x1d0>
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a26      	ldr	r2, [pc, #152]	@ (8005638 <DMA_SetConfig+0x250>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d009      	beq.n	80055b8 <DMA_SetConfig+0x1d0>
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a24      	ldr	r2, [pc, #144]	@ (800563c <DMA_SetConfig+0x254>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d004      	beq.n	80055b8 <DMA_SetConfig+0x1d0>
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a23      	ldr	r2, [pc, #140]	@ (8005640 <DMA_SetConfig+0x258>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d101      	bne.n	80055bc <DMA_SetConfig+0x1d4>
 80055b8:	2301      	movs	r3, #1
 80055ba:	e000      	b.n	80055be <DMA_SetConfig+0x1d6>
 80055bc:	2300      	movs	r3, #0
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d059      	beq.n	8005676 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055c6:	f003 031f 	and.w	r3, r3, #31
 80055ca:	223f      	movs	r2, #63	@ 0x3f
 80055cc:	409a      	lsls	r2, r3
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80055e0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	683a      	ldr	r2, [r7, #0]
 80055e8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	2b40      	cmp	r3, #64	@ 0x40
 80055f0:	d138      	bne.n	8005664 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68ba      	ldr	r2, [r7, #8]
 8005600:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005602:	e086      	b.n	8005712 <DMA_SetConfig+0x32a>
 8005604:	40020010 	.word	0x40020010
 8005608:	40020028 	.word	0x40020028
 800560c:	40020040 	.word	0x40020040
 8005610:	40020058 	.word	0x40020058
 8005614:	40020070 	.word	0x40020070
 8005618:	40020088 	.word	0x40020088
 800561c:	400200a0 	.word	0x400200a0
 8005620:	400200b8 	.word	0x400200b8
 8005624:	40020410 	.word	0x40020410
 8005628:	40020428 	.word	0x40020428
 800562c:	40020440 	.word	0x40020440
 8005630:	40020458 	.word	0x40020458
 8005634:	40020470 	.word	0x40020470
 8005638:	40020488 	.word	0x40020488
 800563c:	400204a0 	.word	0x400204a0
 8005640:	400204b8 	.word	0x400204b8
 8005644:	58025408 	.word	0x58025408
 8005648:	5802541c 	.word	0x5802541c
 800564c:	58025430 	.word	0x58025430
 8005650:	58025444 	.word	0x58025444
 8005654:	58025458 	.word	0x58025458
 8005658:	5802546c 	.word	0x5802546c
 800565c:	58025480 	.word	0x58025480
 8005660:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68ba      	ldr	r2, [r7, #8]
 800566a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	60da      	str	r2, [r3, #12]
}
 8005674:	e04d      	b.n	8005712 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a29      	ldr	r2, [pc, #164]	@ (8005720 <DMA_SetConfig+0x338>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d022      	beq.n	80056c6 <DMA_SetConfig+0x2de>
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a27      	ldr	r2, [pc, #156]	@ (8005724 <DMA_SetConfig+0x33c>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d01d      	beq.n	80056c6 <DMA_SetConfig+0x2de>
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a26      	ldr	r2, [pc, #152]	@ (8005728 <DMA_SetConfig+0x340>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d018      	beq.n	80056c6 <DMA_SetConfig+0x2de>
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a24      	ldr	r2, [pc, #144]	@ (800572c <DMA_SetConfig+0x344>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d013      	beq.n	80056c6 <DMA_SetConfig+0x2de>
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a23      	ldr	r2, [pc, #140]	@ (8005730 <DMA_SetConfig+0x348>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d00e      	beq.n	80056c6 <DMA_SetConfig+0x2de>
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a21      	ldr	r2, [pc, #132]	@ (8005734 <DMA_SetConfig+0x34c>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d009      	beq.n	80056c6 <DMA_SetConfig+0x2de>
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a20      	ldr	r2, [pc, #128]	@ (8005738 <DMA_SetConfig+0x350>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d004      	beq.n	80056c6 <DMA_SetConfig+0x2de>
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a1e      	ldr	r2, [pc, #120]	@ (800573c <DMA_SetConfig+0x354>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d101      	bne.n	80056ca <DMA_SetConfig+0x2e2>
 80056c6:	2301      	movs	r3, #1
 80056c8:	e000      	b.n	80056cc <DMA_SetConfig+0x2e4>
 80056ca:	2300      	movs	r3, #0
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d020      	beq.n	8005712 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056d4:	f003 031f 	and.w	r3, r3, #31
 80056d8:	2201      	movs	r2, #1
 80056da:	409a      	lsls	r2, r3
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	683a      	ldr	r2, [r7, #0]
 80056e6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	2b40      	cmp	r3, #64	@ 0x40
 80056ee:	d108      	bne.n	8005702 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	68ba      	ldr	r2, [r7, #8]
 80056fe:	60da      	str	r2, [r3, #12]
}
 8005700:	e007      	b.n	8005712 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	68ba      	ldr	r2, [r7, #8]
 8005708:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	60da      	str	r2, [r3, #12]
}
 8005712:	bf00      	nop
 8005714:	371c      	adds	r7, #28
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr
 800571e:	bf00      	nop
 8005720:	58025408 	.word	0x58025408
 8005724:	5802541c 	.word	0x5802541c
 8005728:	58025430 	.word	0x58025430
 800572c:	58025444 	.word	0x58025444
 8005730:	58025458 	.word	0x58025458
 8005734:	5802546c 	.word	0x5802546c
 8005738:	58025480 	.word	0x58025480
 800573c:	58025494 	.word	0x58025494

08005740 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a42      	ldr	r2, [pc, #264]	@ (8005858 <DMA_CalcBaseAndBitshift+0x118>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d04a      	beq.n	80057e8 <DMA_CalcBaseAndBitshift+0xa8>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a41      	ldr	r2, [pc, #260]	@ (800585c <DMA_CalcBaseAndBitshift+0x11c>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d045      	beq.n	80057e8 <DMA_CalcBaseAndBitshift+0xa8>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a3f      	ldr	r2, [pc, #252]	@ (8005860 <DMA_CalcBaseAndBitshift+0x120>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d040      	beq.n	80057e8 <DMA_CalcBaseAndBitshift+0xa8>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a3e      	ldr	r2, [pc, #248]	@ (8005864 <DMA_CalcBaseAndBitshift+0x124>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d03b      	beq.n	80057e8 <DMA_CalcBaseAndBitshift+0xa8>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a3c      	ldr	r2, [pc, #240]	@ (8005868 <DMA_CalcBaseAndBitshift+0x128>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d036      	beq.n	80057e8 <DMA_CalcBaseAndBitshift+0xa8>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a3b      	ldr	r2, [pc, #236]	@ (800586c <DMA_CalcBaseAndBitshift+0x12c>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d031      	beq.n	80057e8 <DMA_CalcBaseAndBitshift+0xa8>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a39      	ldr	r2, [pc, #228]	@ (8005870 <DMA_CalcBaseAndBitshift+0x130>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d02c      	beq.n	80057e8 <DMA_CalcBaseAndBitshift+0xa8>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a38      	ldr	r2, [pc, #224]	@ (8005874 <DMA_CalcBaseAndBitshift+0x134>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d027      	beq.n	80057e8 <DMA_CalcBaseAndBitshift+0xa8>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a36      	ldr	r2, [pc, #216]	@ (8005878 <DMA_CalcBaseAndBitshift+0x138>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d022      	beq.n	80057e8 <DMA_CalcBaseAndBitshift+0xa8>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a35      	ldr	r2, [pc, #212]	@ (800587c <DMA_CalcBaseAndBitshift+0x13c>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d01d      	beq.n	80057e8 <DMA_CalcBaseAndBitshift+0xa8>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a33      	ldr	r2, [pc, #204]	@ (8005880 <DMA_CalcBaseAndBitshift+0x140>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d018      	beq.n	80057e8 <DMA_CalcBaseAndBitshift+0xa8>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a32      	ldr	r2, [pc, #200]	@ (8005884 <DMA_CalcBaseAndBitshift+0x144>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d013      	beq.n	80057e8 <DMA_CalcBaseAndBitshift+0xa8>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a30      	ldr	r2, [pc, #192]	@ (8005888 <DMA_CalcBaseAndBitshift+0x148>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d00e      	beq.n	80057e8 <DMA_CalcBaseAndBitshift+0xa8>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a2f      	ldr	r2, [pc, #188]	@ (800588c <DMA_CalcBaseAndBitshift+0x14c>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d009      	beq.n	80057e8 <DMA_CalcBaseAndBitshift+0xa8>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a2d      	ldr	r2, [pc, #180]	@ (8005890 <DMA_CalcBaseAndBitshift+0x150>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d004      	beq.n	80057e8 <DMA_CalcBaseAndBitshift+0xa8>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a2c      	ldr	r2, [pc, #176]	@ (8005894 <DMA_CalcBaseAndBitshift+0x154>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d101      	bne.n	80057ec <DMA_CalcBaseAndBitshift+0xac>
 80057e8:	2301      	movs	r3, #1
 80057ea:	e000      	b.n	80057ee <DMA_CalcBaseAndBitshift+0xae>
 80057ec:	2300      	movs	r3, #0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d024      	beq.n	800583c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	3b10      	subs	r3, #16
 80057fa:	4a27      	ldr	r2, [pc, #156]	@ (8005898 <DMA_CalcBaseAndBitshift+0x158>)
 80057fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005800:	091b      	lsrs	r3, r3, #4
 8005802:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f003 0307 	and.w	r3, r3, #7
 800580a:	4a24      	ldr	r2, [pc, #144]	@ (800589c <DMA_CalcBaseAndBitshift+0x15c>)
 800580c:	5cd3      	ldrb	r3, [r2, r3]
 800580e:	461a      	mov	r2, r3
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2b03      	cmp	r3, #3
 8005818:	d908      	bls.n	800582c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	461a      	mov	r2, r3
 8005820:	4b1f      	ldr	r3, [pc, #124]	@ (80058a0 <DMA_CalcBaseAndBitshift+0x160>)
 8005822:	4013      	ands	r3, r2
 8005824:	1d1a      	adds	r2, r3, #4
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	659a      	str	r2, [r3, #88]	@ 0x58
 800582a:	e00d      	b.n	8005848 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	461a      	mov	r2, r3
 8005832:	4b1b      	ldr	r3, [pc, #108]	@ (80058a0 <DMA_CalcBaseAndBitshift+0x160>)
 8005834:	4013      	ands	r3, r2
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	6593      	str	r3, [r2, #88]	@ 0x58
 800583a:	e005      	b.n	8005848 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800584c:	4618      	mov	r0, r3
 800584e:	3714      	adds	r7, #20
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr
 8005858:	40020010 	.word	0x40020010
 800585c:	40020028 	.word	0x40020028
 8005860:	40020040 	.word	0x40020040
 8005864:	40020058 	.word	0x40020058
 8005868:	40020070 	.word	0x40020070
 800586c:	40020088 	.word	0x40020088
 8005870:	400200a0 	.word	0x400200a0
 8005874:	400200b8 	.word	0x400200b8
 8005878:	40020410 	.word	0x40020410
 800587c:	40020428 	.word	0x40020428
 8005880:	40020440 	.word	0x40020440
 8005884:	40020458 	.word	0x40020458
 8005888:	40020470 	.word	0x40020470
 800588c:	40020488 	.word	0x40020488
 8005890:	400204a0 	.word	0x400204a0
 8005894:	400204b8 	.word	0x400204b8
 8005898:	aaaaaaab 	.word	0xaaaaaaab
 800589c:	0800d68c 	.word	0x0800d68c
 80058a0:	fffffc00 	.word	0xfffffc00

080058a4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b085      	sub	sp, #20
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058ac:	2300      	movs	r3, #0
 80058ae:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	699b      	ldr	r3, [r3, #24]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d120      	bne.n	80058fa <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058bc:	2b03      	cmp	r3, #3
 80058be:	d858      	bhi.n	8005972 <DMA_CheckFifoParam+0xce>
 80058c0:	a201      	add	r2, pc, #4	@ (adr r2, 80058c8 <DMA_CheckFifoParam+0x24>)
 80058c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058c6:	bf00      	nop
 80058c8:	080058d9 	.word	0x080058d9
 80058cc:	080058eb 	.word	0x080058eb
 80058d0:	080058d9 	.word	0x080058d9
 80058d4:	08005973 	.word	0x08005973
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d048      	beq.n	8005976 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80058e8:	e045      	b.n	8005976 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ee:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80058f2:	d142      	bne.n	800597a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80058f8:	e03f      	b.n	800597a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	699b      	ldr	r3, [r3, #24]
 80058fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005902:	d123      	bne.n	800594c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005908:	2b03      	cmp	r3, #3
 800590a:	d838      	bhi.n	800597e <DMA_CheckFifoParam+0xda>
 800590c:	a201      	add	r2, pc, #4	@ (adr r2, 8005914 <DMA_CheckFifoParam+0x70>)
 800590e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005912:	bf00      	nop
 8005914:	08005925 	.word	0x08005925
 8005918:	0800592b 	.word	0x0800592b
 800591c:	08005925 	.word	0x08005925
 8005920:	0800593d 	.word	0x0800593d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	73fb      	strb	r3, [r7, #15]
        break;
 8005928:	e030      	b.n	800598c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800592e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005932:	2b00      	cmp	r3, #0
 8005934:	d025      	beq.n	8005982 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800593a:	e022      	b.n	8005982 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005940:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005944:	d11f      	bne.n	8005986 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800594a:	e01c      	b.n	8005986 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005950:	2b02      	cmp	r3, #2
 8005952:	d902      	bls.n	800595a <DMA_CheckFifoParam+0xb6>
 8005954:	2b03      	cmp	r3, #3
 8005956:	d003      	beq.n	8005960 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005958:	e018      	b.n	800598c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	73fb      	strb	r3, [r7, #15]
        break;
 800595e:	e015      	b.n	800598c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005964:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005968:	2b00      	cmp	r3, #0
 800596a:	d00e      	beq.n	800598a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	73fb      	strb	r3, [r7, #15]
    break;
 8005970:	e00b      	b.n	800598a <DMA_CheckFifoParam+0xe6>
        break;
 8005972:	bf00      	nop
 8005974:	e00a      	b.n	800598c <DMA_CheckFifoParam+0xe8>
        break;
 8005976:	bf00      	nop
 8005978:	e008      	b.n	800598c <DMA_CheckFifoParam+0xe8>
        break;
 800597a:	bf00      	nop
 800597c:	e006      	b.n	800598c <DMA_CheckFifoParam+0xe8>
        break;
 800597e:	bf00      	nop
 8005980:	e004      	b.n	800598c <DMA_CheckFifoParam+0xe8>
        break;
 8005982:	bf00      	nop
 8005984:	e002      	b.n	800598c <DMA_CheckFifoParam+0xe8>
        break;
 8005986:	bf00      	nop
 8005988:	e000      	b.n	800598c <DMA_CheckFifoParam+0xe8>
    break;
 800598a:	bf00      	nop
    }
  }

  return status;
 800598c:	7bfb      	ldrb	r3, [r7, #15]
}
 800598e:	4618      	mov	r0, r3
 8005990:	3714      	adds	r7, #20
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr
 800599a:	bf00      	nop

0800599c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800599c:	b480      	push	{r7}
 800599e:	b085      	sub	sp, #20
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a38      	ldr	r2, [pc, #224]	@ (8005a90 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d022      	beq.n	80059fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a36      	ldr	r2, [pc, #216]	@ (8005a94 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d01d      	beq.n	80059fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a35      	ldr	r2, [pc, #212]	@ (8005a98 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d018      	beq.n	80059fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a33      	ldr	r2, [pc, #204]	@ (8005a9c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d013      	beq.n	80059fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a32      	ldr	r2, [pc, #200]	@ (8005aa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d00e      	beq.n	80059fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a30      	ldr	r2, [pc, #192]	@ (8005aa4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d009      	beq.n	80059fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a2f      	ldr	r2, [pc, #188]	@ (8005aa8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d004      	beq.n	80059fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a2d      	ldr	r2, [pc, #180]	@ (8005aac <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d101      	bne.n	80059fe <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80059fa:	2301      	movs	r3, #1
 80059fc:	e000      	b.n	8005a00 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80059fe:	2300      	movs	r3, #0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d01a      	beq.n	8005a3a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	3b08      	subs	r3, #8
 8005a0c:	4a28      	ldr	r2, [pc, #160]	@ (8005ab0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a12:	091b      	lsrs	r3, r3, #4
 8005a14:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005a16:	68fa      	ldr	r2, [r7, #12]
 8005a18:	4b26      	ldr	r3, [pc, #152]	@ (8005ab4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005a1a:	4413      	add	r3, r2
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	461a      	mov	r2, r3
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	4a24      	ldr	r2, [pc, #144]	@ (8005ab8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005a28:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f003 031f 	and.w	r3, r3, #31
 8005a30:	2201      	movs	r2, #1
 8005a32:	409a      	lsls	r2, r3
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005a38:	e024      	b.n	8005a84 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	3b10      	subs	r3, #16
 8005a42:	4a1e      	ldr	r2, [pc, #120]	@ (8005abc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005a44:	fba2 2303 	umull	r2, r3, r2, r3
 8005a48:	091b      	lsrs	r3, r3, #4
 8005a4a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	4a1c      	ldr	r2, [pc, #112]	@ (8005ac0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d806      	bhi.n	8005a62 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	4a1b      	ldr	r2, [pc, #108]	@ (8005ac4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d902      	bls.n	8005a62 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	3308      	adds	r3, #8
 8005a60:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	4b18      	ldr	r3, [pc, #96]	@ (8005ac8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005a66:	4413      	add	r3, r2
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4a16      	ldr	r2, [pc, #88]	@ (8005acc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005a74:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f003 031f 	and.w	r3, r3, #31
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	409a      	lsls	r2, r3
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005a84:	bf00      	nop
 8005a86:	3714      	adds	r7, #20
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr
 8005a90:	58025408 	.word	0x58025408
 8005a94:	5802541c 	.word	0x5802541c
 8005a98:	58025430 	.word	0x58025430
 8005a9c:	58025444 	.word	0x58025444
 8005aa0:	58025458 	.word	0x58025458
 8005aa4:	5802546c 	.word	0x5802546c
 8005aa8:	58025480 	.word	0x58025480
 8005aac:	58025494 	.word	0x58025494
 8005ab0:	cccccccd 	.word	0xcccccccd
 8005ab4:	16009600 	.word	0x16009600
 8005ab8:	58025880 	.word	0x58025880
 8005abc:	aaaaaaab 	.word	0xaaaaaaab
 8005ac0:	400204b8 	.word	0x400204b8
 8005ac4:	4002040f 	.word	0x4002040f
 8005ac8:	10008200 	.word	0x10008200
 8005acc:	40020880 	.word	0x40020880

08005ad0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b085      	sub	sp, #20
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d04a      	beq.n	8005b7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2b08      	cmp	r3, #8
 8005aea:	d847      	bhi.n	8005b7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a25      	ldr	r2, [pc, #148]	@ (8005b88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d022      	beq.n	8005b3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a24      	ldr	r2, [pc, #144]	@ (8005b8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d01d      	beq.n	8005b3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a22      	ldr	r2, [pc, #136]	@ (8005b90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d018      	beq.n	8005b3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a21      	ldr	r2, [pc, #132]	@ (8005b94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d013      	beq.n	8005b3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a1f      	ldr	r2, [pc, #124]	@ (8005b98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d00e      	beq.n	8005b3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a1e      	ldr	r2, [pc, #120]	@ (8005b9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d009      	beq.n	8005b3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a1c      	ldr	r2, [pc, #112]	@ (8005ba0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d004      	beq.n	8005b3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a1b      	ldr	r2, [pc, #108]	@ (8005ba4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d101      	bne.n	8005b40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e000      	b.n	8005b42 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005b40:	2300      	movs	r3, #0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d00a      	beq.n	8005b5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	4b17      	ldr	r3, [pc, #92]	@ (8005ba8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005b4a:	4413      	add	r3, r2
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	461a      	mov	r2, r3
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	4a15      	ldr	r2, [pc, #84]	@ (8005bac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005b58:	671a      	str	r2, [r3, #112]	@ 0x70
 8005b5a:	e009      	b.n	8005b70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005b5c:	68fa      	ldr	r2, [r7, #12]
 8005b5e:	4b14      	ldr	r3, [pc, #80]	@ (8005bb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005b60:	4413      	add	r3, r2
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	461a      	mov	r2, r3
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a11      	ldr	r2, [pc, #68]	@ (8005bb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005b6e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	3b01      	subs	r3, #1
 8005b74:	2201      	movs	r2, #1
 8005b76:	409a      	lsls	r2, r3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005b7c:	bf00      	nop
 8005b7e:	3714      	adds	r7, #20
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr
 8005b88:	58025408 	.word	0x58025408
 8005b8c:	5802541c 	.word	0x5802541c
 8005b90:	58025430 	.word	0x58025430
 8005b94:	58025444 	.word	0x58025444
 8005b98:	58025458 	.word	0x58025458
 8005b9c:	5802546c 	.word	0x5802546c
 8005ba0:	58025480 	.word	0x58025480
 8005ba4:	58025494 	.word	0x58025494
 8005ba8:	1600963f 	.word	0x1600963f
 8005bac:	58025940 	.word	0x58025940
 8005bb0:	1000823f 	.word	0x1000823f
 8005bb4:	40020940 	.word	0x40020940

08005bb8 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA Stream.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b085      	sub	sp, #20
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
  uint32_t syncSignalID = 0;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	60fb      	str	r3, [r7, #12]
  uint32_t syncPolarity = 0;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  if(pSyncConfig->SyncEnable == ENABLE)
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	7a1b      	ldrb	r3, [r3, #8]
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d154      	bne.n	8005c7c <HAL_DMAEx_ConfigMuxSync+0xc4>
  {
    assert_param(IS_DMAMUX_SYNC_POLARITY(pSyncConfig->SyncPolarity));

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a4b      	ldr	r2, [pc, #300]	@ (8005d04 <HAL_DMAEx_ConfigMuxSync+0x14c>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d049      	beq.n	8005c70 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a49      	ldr	r2, [pc, #292]	@ (8005d08 <HAL_DMAEx_ConfigMuxSync+0x150>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d044      	beq.n	8005c70 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a48      	ldr	r2, [pc, #288]	@ (8005d0c <HAL_DMAEx_ConfigMuxSync+0x154>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d03f      	beq.n	8005c70 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a46      	ldr	r2, [pc, #280]	@ (8005d10 <HAL_DMAEx_ConfigMuxSync+0x158>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d03a      	beq.n	8005c70 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a45      	ldr	r2, [pc, #276]	@ (8005d14 <HAL_DMAEx_ConfigMuxSync+0x15c>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d035      	beq.n	8005c70 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a43      	ldr	r2, [pc, #268]	@ (8005d18 <HAL_DMAEx_ConfigMuxSync+0x160>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d030      	beq.n	8005c70 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a42      	ldr	r2, [pc, #264]	@ (8005d1c <HAL_DMAEx_ConfigMuxSync+0x164>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d02b      	beq.n	8005c70 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a40      	ldr	r2, [pc, #256]	@ (8005d20 <HAL_DMAEx_ConfigMuxSync+0x168>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d026      	beq.n	8005c70 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a3f      	ldr	r2, [pc, #252]	@ (8005d24 <HAL_DMAEx_ConfigMuxSync+0x16c>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d021      	beq.n	8005c70 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a3d      	ldr	r2, [pc, #244]	@ (8005d28 <HAL_DMAEx_ConfigMuxSync+0x170>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d01c      	beq.n	8005c70 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a3c      	ldr	r2, [pc, #240]	@ (8005d2c <HAL_DMAEx_ConfigMuxSync+0x174>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d017      	beq.n	8005c70 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a3a      	ldr	r2, [pc, #232]	@ (8005d30 <HAL_DMAEx_ConfigMuxSync+0x178>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d012      	beq.n	8005c70 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a39      	ldr	r2, [pc, #228]	@ (8005d34 <HAL_DMAEx_ConfigMuxSync+0x17c>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d00d      	beq.n	8005c70 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a37      	ldr	r2, [pc, #220]	@ (8005d38 <HAL_DMAEx_ConfigMuxSync+0x180>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d008      	beq.n	8005c70 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a36      	ldr	r2, [pc, #216]	@ (8005d3c <HAL_DMAEx_ConfigMuxSync+0x184>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d003      	beq.n	8005c70 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a34      	ldr	r2, [pc, #208]	@ (8005d40 <HAL_DMAEx_ConfigMuxSync+0x188>)
 8005c6e:	4293      	cmp	r3, r2
    }
    else
    {
      assert_param(IS_BDMA_DMAMUX_SYNC_SIGNAL_ID(pSyncConfig->SyncSignalID));
    }
    syncSignalID = pSyncConfig->SyncSignalID;
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	60fb      	str	r3, [r7, #12]
    syncPolarity = pSyncConfig->SyncPolarity;
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	60bb      	str	r3, [r7, #8]
  }

  /*Check if the DMA state is ready */
  if(hdma->State == HAL_DMA_STATE_READY)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d131      	bne.n	8005cec <HAL_DMAEx_ConfigMuxSync+0x134>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d101      	bne.n	8005c96 <HAL_DMAEx_ConfigMuxSync+0xde>
 8005c92:	2302      	movs	r3, #2
 8005c94:	e02f      	b.n	8005cf6 <HAL_DMAEx_ConfigMuxSync+0x13e>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2201      	movs	r2, #1
 8005c9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the synchronization and event generation before applying a new config */
    CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ca8:	f422 3281 	bic.w	r2, r2, #66048	@ 0x10200
 8005cac:	601a      	str	r2, [r3, #0]

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	b2d9      	uxtb	r1, r3
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	061a      	lsls	r2, r3, #24
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	3b01      	subs	r3, #1
 8005cc0:	04db      	lsls	r3, r3, #19
 8005cc2:	431a      	orrs	r2, r3
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	431a      	orrs	r2, r3
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	7a1b      	ldrb	r3, [r3, #8]
 8005ccc:	041b      	lsls	r3, r3, #16
 8005cce:	431a      	orrs	r2, r3
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	7a5b      	ldrb	r3, [r3, #9]
 8005cd4:	025b      	lsls	r3, r3, #9
 8005cd6:	431a      	orrs	r2, r3
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cdc:	430a      	orrs	r2, r1
 8005cde:	601a      	str	r2, [r3, #0]
               ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               syncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)    | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

      /* Process Locked */
    __HAL_UNLOCK(hdma);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	e004      	b.n	8005cf6 <HAL_DMAEx_ConfigMuxSync+0x13e>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005cf2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return error status */
    return HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
  }
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3714      	adds	r7, #20
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr
 8005d02:	bf00      	nop
 8005d04:	40020010 	.word	0x40020010
 8005d08:	40020028 	.word	0x40020028
 8005d0c:	40020040 	.word	0x40020040
 8005d10:	40020058 	.word	0x40020058
 8005d14:	40020070 	.word	0x40020070
 8005d18:	40020088 	.word	0x40020088
 8005d1c:	400200a0 	.word	0x400200a0
 8005d20:	400200b8 	.word	0x400200b8
 8005d24:	40020410 	.word	0x40020410
 8005d28:	40020428 	.word	0x40020428
 8005d2c:	40020440 	.word	0x40020440
 8005d30:	40020458 	.word	0x40020458
 8005d34:	40020470 	.word	0x40020470
 8005d38:	40020488 	.word	0x40020488
 8005d3c:	400204a0 	.word	0x400204a0
 8005d40:	400204b8 	.word	0x400204b8

08005d44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b089      	sub	sp, #36	@ 0x24
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005d52:	4b89      	ldr	r3, [pc, #548]	@ (8005f78 <HAL_GPIO_Init+0x234>)
 8005d54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005d56:	e194      	b.n	8006082 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	2101      	movs	r1, #1
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	fa01 f303 	lsl.w	r3, r1, r3
 8005d64:	4013      	ands	r3, r2
 8005d66:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	f000 8186 	beq.w	800607c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	f003 0303 	and.w	r3, r3, #3
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d005      	beq.n	8005d88 <HAL_GPIO_Init+0x44>
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	f003 0303 	and.w	r3, r3, #3
 8005d84:	2b02      	cmp	r3, #2
 8005d86:	d130      	bne.n	8005dea <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005d8e:	69fb      	ldr	r3, [r7, #28]
 8005d90:	005b      	lsls	r3, r3, #1
 8005d92:	2203      	movs	r2, #3
 8005d94:	fa02 f303 	lsl.w	r3, r2, r3
 8005d98:	43db      	mvns	r3, r3
 8005d9a:	69ba      	ldr	r2, [r7, #24]
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	68da      	ldr	r2, [r3, #12]
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	005b      	lsls	r3, r3, #1
 8005da8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dac:	69ba      	ldr	r2, [r7, #24]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	69ba      	ldr	r2, [r7, #24]
 8005db6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	69fb      	ldr	r3, [r7, #28]
 8005dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc6:	43db      	mvns	r3, r3
 8005dc8:	69ba      	ldr	r2, [r7, #24]
 8005dca:	4013      	ands	r3, r2
 8005dcc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	091b      	lsrs	r3, r3, #4
 8005dd4:	f003 0201 	and.w	r2, r3, #1
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	fa02 f303 	lsl.w	r3, r2, r3
 8005dde:	69ba      	ldr	r2, [r7, #24]
 8005de0:	4313      	orrs	r3, r2
 8005de2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	69ba      	ldr	r2, [r7, #24]
 8005de8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	f003 0303 	and.w	r3, r3, #3
 8005df2:	2b03      	cmp	r3, #3
 8005df4:	d017      	beq.n	8005e26 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	68db      	ldr	r3, [r3, #12]
 8005dfa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	005b      	lsls	r3, r3, #1
 8005e00:	2203      	movs	r2, #3
 8005e02:	fa02 f303 	lsl.w	r3, r2, r3
 8005e06:	43db      	mvns	r3, r3
 8005e08:	69ba      	ldr	r2, [r7, #24]
 8005e0a:	4013      	ands	r3, r2
 8005e0c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	689a      	ldr	r2, [r3, #8]
 8005e12:	69fb      	ldr	r3, [r7, #28]
 8005e14:	005b      	lsls	r3, r3, #1
 8005e16:	fa02 f303 	lsl.w	r3, r2, r3
 8005e1a:	69ba      	ldr	r2, [r7, #24]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	69ba      	ldr	r2, [r7, #24]
 8005e24:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	f003 0303 	and.w	r3, r3, #3
 8005e2e:	2b02      	cmp	r3, #2
 8005e30:	d123      	bne.n	8005e7a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005e32:	69fb      	ldr	r3, [r7, #28]
 8005e34:	08da      	lsrs	r2, r3, #3
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	3208      	adds	r2, #8
 8005e3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	f003 0307 	and.w	r3, r3, #7
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	220f      	movs	r2, #15
 8005e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e4e:	43db      	mvns	r3, r3
 8005e50:	69ba      	ldr	r2, [r7, #24]
 8005e52:	4013      	ands	r3, r2
 8005e54:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	691a      	ldr	r2, [r3, #16]
 8005e5a:	69fb      	ldr	r3, [r7, #28]
 8005e5c:	f003 0307 	and.w	r3, r3, #7
 8005e60:	009b      	lsls	r3, r3, #2
 8005e62:	fa02 f303 	lsl.w	r3, r2, r3
 8005e66:	69ba      	ldr	r2, [r7, #24]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	08da      	lsrs	r2, r3, #3
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	3208      	adds	r2, #8
 8005e74:	69b9      	ldr	r1, [r7, #24]
 8005e76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	005b      	lsls	r3, r3, #1
 8005e84:	2203      	movs	r2, #3
 8005e86:	fa02 f303 	lsl.w	r3, r2, r3
 8005e8a:	43db      	mvns	r3, r3
 8005e8c:	69ba      	ldr	r2, [r7, #24]
 8005e8e:	4013      	ands	r3, r2
 8005e90:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	f003 0203 	and.w	r2, r3, #3
 8005e9a:	69fb      	ldr	r3, [r7, #28]
 8005e9c:	005b      	lsls	r3, r3, #1
 8005e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005ea2:	69ba      	ldr	r2, [r7, #24]
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	69ba      	ldr	r2, [r7, #24]
 8005eac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	f000 80e0 	beq.w	800607c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ebc:	4b2f      	ldr	r3, [pc, #188]	@ (8005f7c <HAL_GPIO_Init+0x238>)
 8005ebe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005ec2:	4a2e      	ldr	r2, [pc, #184]	@ (8005f7c <HAL_GPIO_Init+0x238>)
 8005ec4:	f043 0302 	orr.w	r3, r3, #2
 8005ec8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005ecc:	4b2b      	ldr	r3, [pc, #172]	@ (8005f7c <HAL_GPIO_Init+0x238>)
 8005ece:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005ed2:	f003 0302 	and.w	r3, r3, #2
 8005ed6:	60fb      	str	r3, [r7, #12]
 8005ed8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005eda:	4a29      	ldr	r2, [pc, #164]	@ (8005f80 <HAL_GPIO_Init+0x23c>)
 8005edc:	69fb      	ldr	r3, [r7, #28]
 8005ede:	089b      	lsrs	r3, r3, #2
 8005ee0:	3302      	adds	r3, #2
 8005ee2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005ee8:	69fb      	ldr	r3, [r7, #28]
 8005eea:	f003 0303 	and.w	r3, r3, #3
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	220f      	movs	r2, #15
 8005ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ef6:	43db      	mvns	r3, r3
 8005ef8:	69ba      	ldr	r2, [r7, #24]
 8005efa:	4013      	ands	r3, r2
 8005efc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4a20      	ldr	r2, [pc, #128]	@ (8005f84 <HAL_GPIO_Init+0x240>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d052      	beq.n	8005fac <HAL_GPIO_Init+0x268>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	4a1f      	ldr	r2, [pc, #124]	@ (8005f88 <HAL_GPIO_Init+0x244>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d031      	beq.n	8005f72 <HAL_GPIO_Init+0x22e>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a1e      	ldr	r2, [pc, #120]	@ (8005f8c <HAL_GPIO_Init+0x248>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d02b      	beq.n	8005f6e <HAL_GPIO_Init+0x22a>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a1d      	ldr	r2, [pc, #116]	@ (8005f90 <HAL_GPIO_Init+0x24c>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d025      	beq.n	8005f6a <HAL_GPIO_Init+0x226>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4a1c      	ldr	r2, [pc, #112]	@ (8005f94 <HAL_GPIO_Init+0x250>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d01f      	beq.n	8005f66 <HAL_GPIO_Init+0x222>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4a1b      	ldr	r2, [pc, #108]	@ (8005f98 <HAL_GPIO_Init+0x254>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d019      	beq.n	8005f62 <HAL_GPIO_Init+0x21e>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	4a1a      	ldr	r2, [pc, #104]	@ (8005f9c <HAL_GPIO_Init+0x258>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d013      	beq.n	8005f5e <HAL_GPIO_Init+0x21a>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4a19      	ldr	r2, [pc, #100]	@ (8005fa0 <HAL_GPIO_Init+0x25c>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d00d      	beq.n	8005f5a <HAL_GPIO_Init+0x216>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4a18      	ldr	r2, [pc, #96]	@ (8005fa4 <HAL_GPIO_Init+0x260>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d007      	beq.n	8005f56 <HAL_GPIO_Init+0x212>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4a17      	ldr	r2, [pc, #92]	@ (8005fa8 <HAL_GPIO_Init+0x264>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d101      	bne.n	8005f52 <HAL_GPIO_Init+0x20e>
 8005f4e:	2309      	movs	r3, #9
 8005f50:	e02d      	b.n	8005fae <HAL_GPIO_Init+0x26a>
 8005f52:	230a      	movs	r3, #10
 8005f54:	e02b      	b.n	8005fae <HAL_GPIO_Init+0x26a>
 8005f56:	2308      	movs	r3, #8
 8005f58:	e029      	b.n	8005fae <HAL_GPIO_Init+0x26a>
 8005f5a:	2307      	movs	r3, #7
 8005f5c:	e027      	b.n	8005fae <HAL_GPIO_Init+0x26a>
 8005f5e:	2306      	movs	r3, #6
 8005f60:	e025      	b.n	8005fae <HAL_GPIO_Init+0x26a>
 8005f62:	2305      	movs	r3, #5
 8005f64:	e023      	b.n	8005fae <HAL_GPIO_Init+0x26a>
 8005f66:	2304      	movs	r3, #4
 8005f68:	e021      	b.n	8005fae <HAL_GPIO_Init+0x26a>
 8005f6a:	2303      	movs	r3, #3
 8005f6c:	e01f      	b.n	8005fae <HAL_GPIO_Init+0x26a>
 8005f6e:	2302      	movs	r3, #2
 8005f70:	e01d      	b.n	8005fae <HAL_GPIO_Init+0x26a>
 8005f72:	2301      	movs	r3, #1
 8005f74:	e01b      	b.n	8005fae <HAL_GPIO_Init+0x26a>
 8005f76:	bf00      	nop
 8005f78:	58000080 	.word	0x58000080
 8005f7c:	58024400 	.word	0x58024400
 8005f80:	58000400 	.word	0x58000400
 8005f84:	58020000 	.word	0x58020000
 8005f88:	58020400 	.word	0x58020400
 8005f8c:	58020800 	.word	0x58020800
 8005f90:	58020c00 	.word	0x58020c00
 8005f94:	58021000 	.word	0x58021000
 8005f98:	58021400 	.word	0x58021400
 8005f9c:	58021800 	.word	0x58021800
 8005fa0:	58021c00 	.word	0x58021c00
 8005fa4:	58022000 	.word	0x58022000
 8005fa8:	58022400 	.word	0x58022400
 8005fac:	2300      	movs	r3, #0
 8005fae:	69fa      	ldr	r2, [r7, #28]
 8005fb0:	f002 0203 	and.w	r2, r2, #3
 8005fb4:	0092      	lsls	r2, r2, #2
 8005fb6:	4093      	lsls	r3, r2
 8005fb8:	69ba      	ldr	r2, [r7, #24]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005fbe:	4938      	ldr	r1, [pc, #224]	@ (80060a0 <HAL_GPIO_Init+0x35c>)
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	089b      	lsrs	r3, r3, #2
 8005fc4:	3302      	adds	r3, #2
 8005fc6:	69ba      	ldr	r2, [r7, #24]
 8005fc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005fcc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	43db      	mvns	r3, r3
 8005fd8:	69ba      	ldr	r2, [r7, #24]
 8005fda:	4013      	ands	r3, r2
 8005fdc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d003      	beq.n	8005ff2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005fea:	69ba      	ldr	r2, [r7, #24]
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005ff2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005ffa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	43db      	mvns	r3, r3
 8006006:	69ba      	ldr	r2, [r7, #24]
 8006008:	4013      	ands	r3, r2
 800600a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006014:	2b00      	cmp	r3, #0
 8006016:	d003      	beq.n	8006020 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006018:	69ba      	ldr	r2, [r7, #24]
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	4313      	orrs	r3, r2
 800601e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006020:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006024:	69bb      	ldr	r3, [r7, #24]
 8006026:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	43db      	mvns	r3, r3
 8006032:	69ba      	ldr	r2, [r7, #24]
 8006034:	4013      	ands	r3, r2
 8006036:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006040:	2b00      	cmp	r3, #0
 8006042:	d003      	beq.n	800604c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006044:	69ba      	ldr	r2, [r7, #24]
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	4313      	orrs	r3, r2
 800604a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	69ba      	ldr	r2, [r7, #24]
 8006050:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	43db      	mvns	r3, r3
 800605c:	69ba      	ldr	r2, [r7, #24]
 800605e:	4013      	ands	r3, r2
 8006060:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800606a:	2b00      	cmp	r3, #0
 800606c:	d003      	beq.n	8006076 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800606e:	69ba      	ldr	r2, [r7, #24]
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	4313      	orrs	r3, r2
 8006074:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	69ba      	ldr	r2, [r7, #24]
 800607a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800607c:	69fb      	ldr	r3, [r7, #28]
 800607e:	3301      	adds	r3, #1
 8006080:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	fa22 f303 	lsr.w	r3, r2, r3
 800608c:	2b00      	cmp	r3, #0
 800608e:	f47f ae63 	bne.w	8005d58 <HAL_GPIO_Init+0x14>
  }
}
 8006092:	bf00      	nop
 8006094:	bf00      	nop
 8006096:	3724      	adds	r7, #36	@ 0x24
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr
 80060a0:	58000400 	.word	0x58000400

080060a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b083      	sub	sp, #12
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
 80060ac:	460b      	mov	r3, r1
 80060ae:	807b      	strh	r3, [r7, #2]
 80060b0:	4613      	mov	r3, r2
 80060b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80060b4:	787b      	ldrb	r3, [r7, #1]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d003      	beq.n	80060c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80060ba:	887a      	ldrh	r2, [r7, #2]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80060c0:	e003      	b.n	80060ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80060c2:	887b      	ldrh	r3, [r7, #2]
 80060c4:	041a      	lsls	r2, r3, #16
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	619a      	str	r2, [r3, #24]
}
 80060ca:	bf00      	nop
 80060cc:	370c      	adds	r7, #12
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr
	...

080060d8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80060d8:	b480      	push	{r7}
 80060da:	b083      	sub	sp, #12
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80060e0:	4a08      	ldr	r2, [pc, #32]	@ (8006104 <HAL_HSEM_FastTake+0x2c>)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	3320      	adds	r3, #32
 80060e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060ea:	4a07      	ldr	r2, [pc, #28]	@ (8006108 <HAL_HSEM_FastTake+0x30>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d101      	bne.n	80060f4 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80060f0:	2300      	movs	r3, #0
 80060f2:	e000      	b.n	80060f6 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	370c      	adds	r7, #12
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr
 8006102:	bf00      	nop
 8006104:	58026400 	.word	0x58026400
 8006108:	80000300 	.word	0x80000300

0800610c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8006116:	4906      	ldr	r1, [pc, #24]	@ (8006130 <HAL_HSEM_Release+0x24>)
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8006124:	bf00      	nop
 8006126:	370c      	adds	r7, #12
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr
 8006130:	58026400 	.word	0x58026400

08006134 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b082      	sub	sp, #8
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d101      	bne.n	8006146 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	e08b      	b.n	800625e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800614c:	b2db      	uxtb	r3, r3
 800614e:	2b00      	cmp	r3, #0
 8006150:	d106      	bne.n	8006160 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2200      	movs	r2, #0
 8006156:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f7fd f81c 	bl	8003198 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2224      	movs	r2, #36	@ 0x24
 8006164:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f022 0201 	bic.w	r2, r2, #1
 8006176:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	685a      	ldr	r2, [r3, #4]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006184:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	689a      	ldr	r2, [r3, #8]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006194:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	2b01      	cmp	r3, #1
 800619c:	d107      	bne.n	80061ae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	689a      	ldr	r2, [r3, #8]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80061aa:	609a      	str	r2, [r3, #8]
 80061ac:	e006      	b.n	80061bc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	689a      	ldr	r2, [r3, #8]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80061ba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	2b02      	cmp	r3, #2
 80061c2:	d108      	bne.n	80061d6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	685a      	ldr	r2, [r3, #4]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80061d2:	605a      	str	r2, [r3, #4]
 80061d4:	e007      	b.n	80061e6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	685a      	ldr	r2, [r3, #4]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80061e4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	6859      	ldr	r1, [r3, #4]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681a      	ldr	r2, [r3, #0]
 80061f0:	4b1d      	ldr	r3, [pc, #116]	@ (8006268 <HAL_I2C_Init+0x134>)
 80061f2:	430b      	orrs	r3, r1
 80061f4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	68da      	ldr	r2, [r3, #12]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006204:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	691a      	ldr	r2, [r3, #16]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	695b      	ldr	r3, [r3, #20]
 800620e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	699b      	ldr	r3, [r3, #24]
 8006216:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	430a      	orrs	r2, r1
 800621e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	69d9      	ldr	r1, [r3, #28]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6a1a      	ldr	r2, [r3, #32]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	430a      	orrs	r2, r1
 800622e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f042 0201 	orr.w	r2, r2, #1
 800623e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2220      	movs	r2, #32
 800624a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2200      	movs	r2, #0
 8006252:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800625c:	2300      	movs	r3, #0
}
 800625e:	4618      	mov	r0, r3
 8006260:	3708      	adds	r7, #8
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}
 8006266:	bf00      	nop
 8006268:	02008000 	.word	0x02008000

0800626c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b088      	sub	sp, #32
 8006270:	af02      	add	r7, sp, #8
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	4608      	mov	r0, r1
 8006276:	4611      	mov	r1, r2
 8006278:	461a      	mov	r2, r3
 800627a:	4603      	mov	r3, r0
 800627c:	817b      	strh	r3, [r7, #10]
 800627e:	460b      	mov	r3, r1
 8006280:	813b      	strh	r3, [r7, #8]
 8006282:	4613      	mov	r3, r2
 8006284:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800628c:	b2db      	uxtb	r3, r3
 800628e:	2b20      	cmp	r3, #32
 8006290:	f040 80f9 	bne.w	8006486 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006294:	6a3b      	ldr	r3, [r7, #32]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d002      	beq.n	80062a0 <HAL_I2C_Mem_Write+0x34>
 800629a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800629c:	2b00      	cmp	r3, #0
 800629e:	d105      	bne.n	80062ac <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80062a6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80062a8:	2301      	movs	r3, #1
 80062aa:	e0ed      	b.n	8006488 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d101      	bne.n	80062ba <HAL_I2C_Mem_Write+0x4e>
 80062b6:	2302      	movs	r3, #2
 80062b8:	e0e6      	b.n	8006488 <HAL_I2C_Mem_Write+0x21c>
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2201      	movs	r2, #1
 80062be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80062c2:	f7fd fa49 	bl	8003758 <HAL_GetTick>
 80062c6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	9300      	str	r3, [sp, #0]
 80062cc:	2319      	movs	r3, #25
 80062ce:	2201      	movs	r2, #1
 80062d0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80062d4:	68f8      	ldr	r0, [r7, #12]
 80062d6:	f000 fac3 	bl	8006860 <I2C_WaitOnFlagUntilTimeout>
 80062da:	4603      	mov	r3, r0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d001      	beq.n	80062e4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	e0d1      	b.n	8006488 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2221      	movs	r2, #33	@ 0x21
 80062e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2240      	movs	r2, #64	@ 0x40
 80062f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2200      	movs	r2, #0
 80062f8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	6a3a      	ldr	r2, [r7, #32]
 80062fe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006304:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2200      	movs	r2, #0
 800630a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800630c:	88f8      	ldrh	r0, [r7, #6]
 800630e:	893a      	ldrh	r2, [r7, #8]
 8006310:	8979      	ldrh	r1, [r7, #10]
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	9301      	str	r3, [sp, #4]
 8006316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006318:	9300      	str	r3, [sp, #0]
 800631a:	4603      	mov	r3, r0
 800631c:	68f8      	ldr	r0, [r7, #12]
 800631e:	f000 f9d3 	bl	80066c8 <I2C_RequestMemoryWrite>
 8006322:	4603      	mov	r3, r0
 8006324:	2b00      	cmp	r3, #0
 8006326:	d005      	beq.n	8006334 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2200      	movs	r2, #0
 800632c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	e0a9      	b.n	8006488 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006338:	b29b      	uxth	r3, r3
 800633a:	2bff      	cmp	r3, #255	@ 0xff
 800633c:	d90e      	bls.n	800635c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	22ff      	movs	r2, #255	@ 0xff
 8006342:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006348:	b2da      	uxtb	r2, r3
 800634a:	8979      	ldrh	r1, [r7, #10]
 800634c:	2300      	movs	r3, #0
 800634e:	9300      	str	r3, [sp, #0]
 8006350:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006354:	68f8      	ldr	r0, [r7, #12]
 8006356:	f000 fc47 	bl	8006be8 <I2C_TransferConfig>
 800635a:	e00f      	b.n	800637c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006360:	b29a      	uxth	r2, r3
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800636a:	b2da      	uxtb	r2, r3
 800636c:	8979      	ldrh	r1, [r7, #10]
 800636e:	2300      	movs	r3, #0
 8006370:	9300      	str	r3, [sp, #0]
 8006372:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006376:	68f8      	ldr	r0, [r7, #12]
 8006378:	f000 fc36 	bl	8006be8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800637c:	697a      	ldr	r2, [r7, #20]
 800637e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006380:	68f8      	ldr	r0, [r7, #12]
 8006382:	f000 fac6 	bl	8006912 <I2C_WaitOnTXISFlagUntilTimeout>
 8006386:	4603      	mov	r3, r0
 8006388:	2b00      	cmp	r3, #0
 800638a:	d001      	beq.n	8006390 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800638c:	2301      	movs	r3, #1
 800638e:	e07b      	b.n	8006488 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006394:	781a      	ldrb	r2, [r3, #0]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063a0:	1c5a      	adds	r2, r3, #1
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	3b01      	subs	r3, #1
 80063ae:	b29a      	uxth	r2, r3
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063b8:	3b01      	subs	r3, #1
 80063ba:	b29a      	uxth	r2, r3
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d034      	beq.n	8006434 <HAL_I2C_Mem_Write+0x1c8>
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d130      	bne.n	8006434 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	9300      	str	r3, [sp, #0]
 80063d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063d8:	2200      	movs	r2, #0
 80063da:	2180      	movs	r1, #128	@ 0x80
 80063dc:	68f8      	ldr	r0, [r7, #12]
 80063de:	f000 fa3f 	bl	8006860 <I2C_WaitOnFlagUntilTimeout>
 80063e2:	4603      	mov	r3, r0
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d001      	beq.n	80063ec <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80063e8:	2301      	movs	r3, #1
 80063ea:	e04d      	b.n	8006488 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	2bff      	cmp	r3, #255	@ 0xff
 80063f4:	d90e      	bls.n	8006414 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	22ff      	movs	r2, #255	@ 0xff
 80063fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006400:	b2da      	uxtb	r2, r3
 8006402:	8979      	ldrh	r1, [r7, #10]
 8006404:	2300      	movs	r3, #0
 8006406:	9300      	str	r3, [sp, #0]
 8006408:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800640c:	68f8      	ldr	r0, [r7, #12]
 800640e:	f000 fbeb 	bl	8006be8 <I2C_TransferConfig>
 8006412:	e00f      	b.n	8006434 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006418:	b29a      	uxth	r2, r3
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006422:	b2da      	uxtb	r2, r3
 8006424:	8979      	ldrh	r1, [r7, #10]
 8006426:	2300      	movs	r3, #0
 8006428:	9300      	str	r3, [sp, #0]
 800642a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800642e:	68f8      	ldr	r0, [r7, #12]
 8006430:	f000 fbda 	bl	8006be8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006438:	b29b      	uxth	r3, r3
 800643a:	2b00      	cmp	r3, #0
 800643c:	d19e      	bne.n	800637c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800643e:	697a      	ldr	r2, [r7, #20]
 8006440:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006442:	68f8      	ldr	r0, [r7, #12]
 8006444:	f000 faac 	bl	80069a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006448:	4603      	mov	r3, r0
 800644a:	2b00      	cmp	r3, #0
 800644c:	d001      	beq.n	8006452 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	e01a      	b.n	8006488 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	2220      	movs	r2, #32
 8006458:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	6859      	ldr	r1, [r3, #4]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	4b0a      	ldr	r3, [pc, #40]	@ (8006490 <HAL_I2C_Mem_Write+0x224>)
 8006466:	400b      	ands	r3, r1
 8006468:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2220      	movs	r2, #32
 800646e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2200      	movs	r2, #0
 8006476:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2200      	movs	r2, #0
 800647e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006482:	2300      	movs	r3, #0
 8006484:	e000      	b.n	8006488 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006486:	2302      	movs	r3, #2
  }
}
 8006488:	4618      	mov	r0, r3
 800648a:	3718      	adds	r7, #24
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}
 8006490:	fe00e800 	.word	0xfe00e800

08006494 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b088      	sub	sp, #32
 8006498:	af02      	add	r7, sp, #8
 800649a:	60f8      	str	r0, [r7, #12]
 800649c:	4608      	mov	r0, r1
 800649e:	4611      	mov	r1, r2
 80064a0:	461a      	mov	r2, r3
 80064a2:	4603      	mov	r3, r0
 80064a4:	817b      	strh	r3, [r7, #10]
 80064a6:	460b      	mov	r3, r1
 80064a8:	813b      	strh	r3, [r7, #8]
 80064aa:	4613      	mov	r3, r2
 80064ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	2b20      	cmp	r3, #32
 80064b8:	f040 80fd 	bne.w	80066b6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80064bc:	6a3b      	ldr	r3, [r7, #32]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d002      	beq.n	80064c8 <HAL_I2C_Mem_Read+0x34>
 80064c2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d105      	bne.n	80064d4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80064ce:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	e0f1      	b.n	80066b8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d101      	bne.n	80064e2 <HAL_I2C_Mem_Read+0x4e>
 80064de:	2302      	movs	r3, #2
 80064e0:	e0ea      	b.n	80066b8 <HAL_I2C_Mem_Read+0x224>
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2201      	movs	r2, #1
 80064e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80064ea:	f7fd f935 	bl	8003758 <HAL_GetTick>
 80064ee:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	9300      	str	r3, [sp, #0]
 80064f4:	2319      	movs	r3, #25
 80064f6:	2201      	movs	r2, #1
 80064f8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80064fc:	68f8      	ldr	r0, [r7, #12]
 80064fe:	f000 f9af 	bl	8006860 <I2C_WaitOnFlagUntilTimeout>
 8006502:	4603      	mov	r3, r0
 8006504:	2b00      	cmp	r3, #0
 8006506:	d001      	beq.n	800650c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	e0d5      	b.n	80066b8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2222      	movs	r2, #34	@ 0x22
 8006510:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2240      	movs	r2, #64	@ 0x40
 8006518:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2200      	movs	r2, #0
 8006520:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	6a3a      	ldr	r2, [r7, #32]
 8006526:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800652c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2200      	movs	r2, #0
 8006532:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006534:	88f8      	ldrh	r0, [r7, #6]
 8006536:	893a      	ldrh	r2, [r7, #8]
 8006538:	8979      	ldrh	r1, [r7, #10]
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	9301      	str	r3, [sp, #4]
 800653e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006540:	9300      	str	r3, [sp, #0]
 8006542:	4603      	mov	r3, r0
 8006544:	68f8      	ldr	r0, [r7, #12]
 8006546:	f000 f913 	bl	8006770 <I2C_RequestMemoryRead>
 800654a:	4603      	mov	r3, r0
 800654c:	2b00      	cmp	r3, #0
 800654e:	d005      	beq.n	800655c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2200      	movs	r2, #0
 8006554:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	e0ad      	b.n	80066b8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006560:	b29b      	uxth	r3, r3
 8006562:	2bff      	cmp	r3, #255	@ 0xff
 8006564:	d90e      	bls.n	8006584 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	22ff      	movs	r2, #255	@ 0xff
 800656a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006570:	b2da      	uxtb	r2, r3
 8006572:	8979      	ldrh	r1, [r7, #10]
 8006574:	4b52      	ldr	r3, [pc, #328]	@ (80066c0 <HAL_I2C_Mem_Read+0x22c>)
 8006576:	9300      	str	r3, [sp, #0]
 8006578:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800657c:	68f8      	ldr	r0, [r7, #12]
 800657e:	f000 fb33 	bl	8006be8 <I2C_TransferConfig>
 8006582:	e00f      	b.n	80065a4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006588:	b29a      	uxth	r2, r3
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006592:	b2da      	uxtb	r2, r3
 8006594:	8979      	ldrh	r1, [r7, #10]
 8006596:	4b4a      	ldr	r3, [pc, #296]	@ (80066c0 <HAL_I2C_Mem_Read+0x22c>)
 8006598:	9300      	str	r3, [sp, #0]
 800659a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800659e:	68f8      	ldr	r0, [r7, #12]
 80065a0:	f000 fb22 	bl	8006be8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	9300      	str	r3, [sp, #0]
 80065a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065aa:	2200      	movs	r2, #0
 80065ac:	2104      	movs	r1, #4
 80065ae:	68f8      	ldr	r0, [r7, #12]
 80065b0:	f000 f956 	bl	8006860 <I2C_WaitOnFlagUntilTimeout>
 80065b4:	4603      	mov	r3, r0
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d001      	beq.n	80065be <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	e07c      	b.n	80066b8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065c8:	b2d2      	uxtb	r2, r2
 80065ca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065d0:	1c5a      	adds	r2, r3, #1
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065da:	3b01      	subs	r3, #1
 80065dc:	b29a      	uxth	r2, r3
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	3b01      	subs	r3, #1
 80065ea:	b29a      	uxth	r2, r3
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d034      	beq.n	8006664 <HAL_I2C_Mem_Read+0x1d0>
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d130      	bne.n	8006664 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	9300      	str	r3, [sp, #0]
 8006606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006608:	2200      	movs	r2, #0
 800660a:	2180      	movs	r1, #128	@ 0x80
 800660c:	68f8      	ldr	r0, [r7, #12]
 800660e:	f000 f927 	bl	8006860 <I2C_WaitOnFlagUntilTimeout>
 8006612:	4603      	mov	r3, r0
 8006614:	2b00      	cmp	r3, #0
 8006616:	d001      	beq.n	800661c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006618:	2301      	movs	r3, #1
 800661a:	e04d      	b.n	80066b8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006620:	b29b      	uxth	r3, r3
 8006622:	2bff      	cmp	r3, #255	@ 0xff
 8006624:	d90e      	bls.n	8006644 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	22ff      	movs	r2, #255	@ 0xff
 800662a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006630:	b2da      	uxtb	r2, r3
 8006632:	8979      	ldrh	r1, [r7, #10]
 8006634:	2300      	movs	r3, #0
 8006636:	9300      	str	r3, [sp, #0]
 8006638:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800663c:	68f8      	ldr	r0, [r7, #12]
 800663e:	f000 fad3 	bl	8006be8 <I2C_TransferConfig>
 8006642:	e00f      	b.n	8006664 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006648:	b29a      	uxth	r2, r3
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006652:	b2da      	uxtb	r2, r3
 8006654:	8979      	ldrh	r1, [r7, #10]
 8006656:	2300      	movs	r3, #0
 8006658:	9300      	str	r3, [sp, #0]
 800665a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800665e:	68f8      	ldr	r0, [r7, #12]
 8006660:	f000 fac2 	bl	8006be8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006668:	b29b      	uxth	r3, r3
 800666a:	2b00      	cmp	r3, #0
 800666c:	d19a      	bne.n	80065a4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800666e:	697a      	ldr	r2, [r7, #20]
 8006670:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006672:	68f8      	ldr	r0, [r7, #12]
 8006674:	f000 f994 	bl	80069a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006678:	4603      	mov	r3, r0
 800667a:	2b00      	cmp	r3, #0
 800667c:	d001      	beq.n	8006682 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	e01a      	b.n	80066b8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	2220      	movs	r2, #32
 8006688:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	6859      	ldr	r1, [r3, #4]
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	4b0b      	ldr	r3, [pc, #44]	@ (80066c4 <HAL_I2C_Mem_Read+0x230>)
 8006696:	400b      	ands	r3, r1
 8006698:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2220      	movs	r2, #32
 800669e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2200      	movs	r2, #0
 80066a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2200      	movs	r2, #0
 80066ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80066b2:	2300      	movs	r3, #0
 80066b4:	e000      	b.n	80066b8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80066b6:	2302      	movs	r3, #2
  }
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3718      	adds	r7, #24
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}
 80066c0:	80002400 	.word	0x80002400
 80066c4:	fe00e800 	.word	0xfe00e800

080066c8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b086      	sub	sp, #24
 80066cc:	af02      	add	r7, sp, #8
 80066ce:	60f8      	str	r0, [r7, #12]
 80066d0:	4608      	mov	r0, r1
 80066d2:	4611      	mov	r1, r2
 80066d4:	461a      	mov	r2, r3
 80066d6:	4603      	mov	r3, r0
 80066d8:	817b      	strh	r3, [r7, #10]
 80066da:	460b      	mov	r3, r1
 80066dc:	813b      	strh	r3, [r7, #8]
 80066de:	4613      	mov	r3, r2
 80066e0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80066e2:	88fb      	ldrh	r3, [r7, #6]
 80066e4:	b2da      	uxtb	r2, r3
 80066e6:	8979      	ldrh	r1, [r7, #10]
 80066e8:	4b20      	ldr	r3, [pc, #128]	@ (800676c <I2C_RequestMemoryWrite+0xa4>)
 80066ea:	9300      	str	r3, [sp, #0]
 80066ec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80066f0:	68f8      	ldr	r0, [r7, #12]
 80066f2:	f000 fa79 	bl	8006be8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066f6:	69fa      	ldr	r2, [r7, #28]
 80066f8:	69b9      	ldr	r1, [r7, #24]
 80066fa:	68f8      	ldr	r0, [r7, #12]
 80066fc:	f000 f909 	bl	8006912 <I2C_WaitOnTXISFlagUntilTimeout>
 8006700:	4603      	mov	r3, r0
 8006702:	2b00      	cmp	r3, #0
 8006704:	d001      	beq.n	800670a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	e02c      	b.n	8006764 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800670a:	88fb      	ldrh	r3, [r7, #6]
 800670c:	2b01      	cmp	r3, #1
 800670e:	d105      	bne.n	800671c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006710:	893b      	ldrh	r3, [r7, #8]
 8006712:	b2da      	uxtb	r2, r3
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	629a      	str	r2, [r3, #40]	@ 0x28
 800671a:	e015      	b.n	8006748 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800671c:	893b      	ldrh	r3, [r7, #8]
 800671e:	0a1b      	lsrs	r3, r3, #8
 8006720:	b29b      	uxth	r3, r3
 8006722:	b2da      	uxtb	r2, r3
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800672a:	69fa      	ldr	r2, [r7, #28]
 800672c:	69b9      	ldr	r1, [r7, #24]
 800672e:	68f8      	ldr	r0, [r7, #12]
 8006730:	f000 f8ef 	bl	8006912 <I2C_WaitOnTXISFlagUntilTimeout>
 8006734:	4603      	mov	r3, r0
 8006736:	2b00      	cmp	r3, #0
 8006738:	d001      	beq.n	800673e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	e012      	b.n	8006764 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800673e:	893b      	ldrh	r3, [r7, #8]
 8006740:	b2da      	uxtb	r2, r3
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006748:	69fb      	ldr	r3, [r7, #28]
 800674a:	9300      	str	r3, [sp, #0]
 800674c:	69bb      	ldr	r3, [r7, #24]
 800674e:	2200      	movs	r2, #0
 8006750:	2180      	movs	r1, #128	@ 0x80
 8006752:	68f8      	ldr	r0, [r7, #12]
 8006754:	f000 f884 	bl	8006860 <I2C_WaitOnFlagUntilTimeout>
 8006758:	4603      	mov	r3, r0
 800675a:	2b00      	cmp	r3, #0
 800675c:	d001      	beq.n	8006762 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	e000      	b.n	8006764 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006762:	2300      	movs	r3, #0
}
 8006764:	4618      	mov	r0, r3
 8006766:	3710      	adds	r7, #16
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}
 800676c:	80002000 	.word	0x80002000

08006770 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b086      	sub	sp, #24
 8006774:	af02      	add	r7, sp, #8
 8006776:	60f8      	str	r0, [r7, #12]
 8006778:	4608      	mov	r0, r1
 800677a:	4611      	mov	r1, r2
 800677c:	461a      	mov	r2, r3
 800677e:	4603      	mov	r3, r0
 8006780:	817b      	strh	r3, [r7, #10]
 8006782:	460b      	mov	r3, r1
 8006784:	813b      	strh	r3, [r7, #8]
 8006786:	4613      	mov	r3, r2
 8006788:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800678a:	88fb      	ldrh	r3, [r7, #6]
 800678c:	b2da      	uxtb	r2, r3
 800678e:	8979      	ldrh	r1, [r7, #10]
 8006790:	4b20      	ldr	r3, [pc, #128]	@ (8006814 <I2C_RequestMemoryRead+0xa4>)
 8006792:	9300      	str	r3, [sp, #0]
 8006794:	2300      	movs	r3, #0
 8006796:	68f8      	ldr	r0, [r7, #12]
 8006798:	f000 fa26 	bl	8006be8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800679c:	69fa      	ldr	r2, [r7, #28]
 800679e:	69b9      	ldr	r1, [r7, #24]
 80067a0:	68f8      	ldr	r0, [r7, #12]
 80067a2:	f000 f8b6 	bl	8006912 <I2C_WaitOnTXISFlagUntilTimeout>
 80067a6:	4603      	mov	r3, r0
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d001      	beq.n	80067b0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80067ac:	2301      	movs	r3, #1
 80067ae:	e02c      	b.n	800680a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80067b0:	88fb      	ldrh	r3, [r7, #6]
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d105      	bne.n	80067c2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80067b6:	893b      	ldrh	r3, [r7, #8]
 80067b8:	b2da      	uxtb	r2, r3
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	629a      	str	r2, [r3, #40]	@ 0x28
 80067c0:	e015      	b.n	80067ee <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80067c2:	893b      	ldrh	r3, [r7, #8]
 80067c4:	0a1b      	lsrs	r3, r3, #8
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	b2da      	uxtb	r2, r3
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80067d0:	69fa      	ldr	r2, [r7, #28]
 80067d2:	69b9      	ldr	r1, [r7, #24]
 80067d4:	68f8      	ldr	r0, [r7, #12]
 80067d6:	f000 f89c 	bl	8006912 <I2C_WaitOnTXISFlagUntilTimeout>
 80067da:	4603      	mov	r3, r0
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d001      	beq.n	80067e4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80067e0:	2301      	movs	r3, #1
 80067e2:	e012      	b.n	800680a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80067e4:	893b      	ldrh	r3, [r7, #8]
 80067e6:	b2da      	uxtb	r2, r3
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80067ee:	69fb      	ldr	r3, [r7, #28]
 80067f0:	9300      	str	r3, [sp, #0]
 80067f2:	69bb      	ldr	r3, [r7, #24]
 80067f4:	2200      	movs	r2, #0
 80067f6:	2140      	movs	r1, #64	@ 0x40
 80067f8:	68f8      	ldr	r0, [r7, #12]
 80067fa:	f000 f831 	bl	8006860 <I2C_WaitOnFlagUntilTimeout>
 80067fe:	4603      	mov	r3, r0
 8006800:	2b00      	cmp	r3, #0
 8006802:	d001      	beq.n	8006808 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006804:	2301      	movs	r3, #1
 8006806:	e000      	b.n	800680a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006808:	2300      	movs	r3, #0
}
 800680a:	4618      	mov	r0, r3
 800680c:	3710      	adds	r7, #16
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop
 8006814:	80002000 	.word	0x80002000

08006818 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006818:	b480      	push	{r7}
 800681a:	b083      	sub	sp, #12
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	699b      	ldr	r3, [r3, #24]
 8006826:	f003 0302 	and.w	r3, r3, #2
 800682a:	2b02      	cmp	r3, #2
 800682c:	d103      	bne.n	8006836 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	2200      	movs	r2, #0
 8006834:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	699b      	ldr	r3, [r3, #24]
 800683c:	f003 0301 	and.w	r3, r3, #1
 8006840:	2b01      	cmp	r3, #1
 8006842:	d007      	beq.n	8006854 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	699a      	ldr	r2, [r3, #24]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f042 0201 	orr.w	r2, r2, #1
 8006852:	619a      	str	r2, [r3, #24]
  }
}
 8006854:	bf00      	nop
 8006856:	370c      	adds	r7, #12
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr

08006860 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b084      	sub	sp, #16
 8006864:	af00      	add	r7, sp, #0
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	60b9      	str	r1, [r7, #8]
 800686a:	603b      	str	r3, [r7, #0]
 800686c:	4613      	mov	r3, r2
 800686e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006870:	e03b      	b.n	80068ea <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006872:	69ba      	ldr	r2, [r7, #24]
 8006874:	6839      	ldr	r1, [r7, #0]
 8006876:	68f8      	ldr	r0, [r7, #12]
 8006878:	f000 f8d6 	bl	8006a28 <I2C_IsErrorOccurred>
 800687c:	4603      	mov	r3, r0
 800687e:	2b00      	cmp	r3, #0
 8006880:	d001      	beq.n	8006886 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	e041      	b.n	800690a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800688c:	d02d      	beq.n	80068ea <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800688e:	f7fc ff63 	bl	8003758 <HAL_GetTick>
 8006892:	4602      	mov	r2, r0
 8006894:	69bb      	ldr	r3, [r7, #24]
 8006896:	1ad3      	subs	r3, r2, r3
 8006898:	683a      	ldr	r2, [r7, #0]
 800689a:	429a      	cmp	r2, r3
 800689c:	d302      	bcc.n	80068a4 <I2C_WaitOnFlagUntilTimeout+0x44>
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d122      	bne.n	80068ea <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	699a      	ldr	r2, [r3, #24]
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	4013      	ands	r3, r2
 80068ae:	68ba      	ldr	r2, [r7, #8]
 80068b0:	429a      	cmp	r2, r3
 80068b2:	bf0c      	ite	eq
 80068b4:	2301      	moveq	r3, #1
 80068b6:	2300      	movne	r3, #0
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	461a      	mov	r2, r3
 80068bc:	79fb      	ldrb	r3, [r7, #7]
 80068be:	429a      	cmp	r2, r3
 80068c0:	d113      	bne.n	80068ea <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068c6:	f043 0220 	orr.w	r2, r3, #32
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2220      	movs	r2, #32
 80068d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2200      	movs	r2, #0
 80068da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2200      	movs	r2, #0
 80068e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	e00f      	b.n	800690a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	699a      	ldr	r2, [r3, #24]
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	4013      	ands	r3, r2
 80068f4:	68ba      	ldr	r2, [r7, #8]
 80068f6:	429a      	cmp	r2, r3
 80068f8:	bf0c      	ite	eq
 80068fa:	2301      	moveq	r3, #1
 80068fc:	2300      	movne	r3, #0
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	461a      	mov	r2, r3
 8006902:	79fb      	ldrb	r3, [r7, #7]
 8006904:	429a      	cmp	r2, r3
 8006906:	d0b4      	beq.n	8006872 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006908:	2300      	movs	r3, #0
}
 800690a:	4618      	mov	r0, r3
 800690c:	3710      	adds	r7, #16
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}

08006912 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006912:	b580      	push	{r7, lr}
 8006914:	b084      	sub	sp, #16
 8006916:	af00      	add	r7, sp, #0
 8006918:	60f8      	str	r0, [r7, #12]
 800691a:	60b9      	str	r1, [r7, #8]
 800691c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800691e:	e033      	b.n	8006988 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	68b9      	ldr	r1, [r7, #8]
 8006924:	68f8      	ldr	r0, [r7, #12]
 8006926:	f000 f87f 	bl	8006a28 <I2C_IsErrorOccurred>
 800692a:	4603      	mov	r3, r0
 800692c:	2b00      	cmp	r3, #0
 800692e:	d001      	beq.n	8006934 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	e031      	b.n	8006998 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800693a:	d025      	beq.n	8006988 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800693c:	f7fc ff0c 	bl	8003758 <HAL_GetTick>
 8006940:	4602      	mov	r2, r0
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	1ad3      	subs	r3, r2, r3
 8006946:	68ba      	ldr	r2, [r7, #8]
 8006948:	429a      	cmp	r2, r3
 800694a:	d302      	bcc.n	8006952 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d11a      	bne.n	8006988 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	699b      	ldr	r3, [r3, #24]
 8006958:	f003 0302 	and.w	r3, r3, #2
 800695c:	2b02      	cmp	r3, #2
 800695e:	d013      	beq.n	8006988 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006964:	f043 0220 	orr.w	r2, r3, #32
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2220      	movs	r2, #32
 8006970:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2200      	movs	r2, #0
 8006978:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2200      	movs	r2, #0
 8006980:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006984:	2301      	movs	r3, #1
 8006986:	e007      	b.n	8006998 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	699b      	ldr	r3, [r3, #24]
 800698e:	f003 0302 	and.w	r3, r3, #2
 8006992:	2b02      	cmp	r3, #2
 8006994:	d1c4      	bne.n	8006920 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006996:	2300      	movs	r3, #0
}
 8006998:	4618      	mov	r0, r3
 800699a:	3710      	adds	r7, #16
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}

080069a0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b084      	sub	sp, #16
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	60f8      	str	r0, [r7, #12]
 80069a8:	60b9      	str	r1, [r7, #8]
 80069aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80069ac:	e02f      	b.n	8006a0e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	68b9      	ldr	r1, [r7, #8]
 80069b2:	68f8      	ldr	r0, [r7, #12]
 80069b4:	f000 f838 	bl	8006a28 <I2C_IsErrorOccurred>
 80069b8:	4603      	mov	r3, r0
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d001      	beq.n	80069c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	e02d      	b.n	8006a1e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069c2:	f7fc fec9 	bl	8003758 <HAL_GetTick>
 80069c6:	4602      	mov	r2, r0
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	1ad3      	subs	r3, r2, r3
 80069cc:	68ba      	ldr	r2, [r7, #8]
 80069ce:	429a      	cmp	r2, r3
 80069d0:	d302      	bcc.n	80069d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d11a      	bne.n	8006a0e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	699b      	ldr	r3, [r3, #24]
 80069de:	f003 0320 	and.w	r3, r3, #32
 80069e2:	2b20      	cmp	r3, #32
 80069e4:	d013      	beq.n	8006a0e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069ea:	f043 0220 	orr.w	r2, r3, #32
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2220      	movs	r2, #32
 80069f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2200      	movs	r2, #0
 80069fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2200      	movs	r2, #0
 8006a06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e007      	b.n	8006a1e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	699b      	ldr	r3, [r3, #24]
 8006a14:	f003 0320 	and.w	r3, r3, #32
 8006a18:	2b20      	cmp	r3, #32
 8006a1a:	d1c8      	bne.n	80069ae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006a1c:	2300      	movs	r3, #0
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3710      	adds	r7, #16
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}
	...

08006a28 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b08a      	sub	sp, #40	@ 0x28
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	60f8      	str	r0, [r7, #12]
 8006a30:	60b9      	str	r1, [r7, #8]
 8006a32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a34:	2300      	movs	r3, #0
 8006a36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	699b      	ldr	r3, [r3, #24]
 8006a40:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006a42:	2300      	movs	r3, #0
 8006a44:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006a4a:	69bb      	ldr	r3, [r7, #24]
 8006a4c:	f003 0310 	and.w	r3, r3, #16
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d068      	beq.n	8006b26 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	2210      	movs	r2, #16
 8006a5a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006a5c:	e049      	b.n	8006af2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a64:	d045      	beq.n	8006af2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006a66:	f7fc fe77 	bl	8003758 <HAL_GetTick>
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	69fb      	ldr	r3, [r7, #28]
 8006a6e:	1ad3      	subs	r3, r2, r3
 8006a70:	68ba      	ldr	r2, [r7, #8]
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d302      	bcc.n	8006a7c <I2C_IsErrorOccurred+0x54>
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d13a      	bne.n	8006af2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006a86:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006a8e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	699b      	ldr	r3, [r3, #24]
 8006a96:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006a9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a9e:	d121      	bne.n	8006ae4 <I2C_IsErrorOccurred+0xbc>
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006aa6:	d01d      	beq.n	8006ae4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006aa8:	7cfb      	ldrb	r3, [r7, #19]
 8006aaa:	2b20      	cmp	r3, #32
 8006aac:	d01a      	beq.n	8006ae4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	685a      	ldr	r2, [r3, #4]
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006abc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006abe:	f7fc fe4b 	bl	8003758 <HAL_GetTick>
 8006ac2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006ac4:	e00e      	b.n	8006ae4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006ac6:	f7fc fe47 	bl	8003758 <HAL_GetTick>
 8006aca:	4602      	mov	r2, r0
 8006acc:	69fb      	ldr	r3, [r7, #28]
 8006ace:	1ad3      	subs	r3, r2, r3
 8006ad0:	2b19      	cmp	r3, #25
 8006ad2:	d907      	bls.n	8006ae4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006ad4:	6a3b      	ldr	r3, [r7, #32]
 8006ad6:	f043 0320 	orr.w	r3, r3, #32
 8006ada:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006adc:	2301      	movs	r3, #1
 8006ade:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8006ae2:	e006      	b.n	8006af2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	699b      	ldr	r3, [r3, #24]
 8006aea:	f003 0320 	and.w	r3, r3, #32
 8006aee:	2b20      	cmp	r3, #32
 8006af0:	d1e9      	bne.n	8006ac6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	699b      	ldr	r3, [r3, #24]
 8006af8:	f003 0320 	and.w	r3, r3, #32
 8006afc:	2b20      	cmp	r3, #32
 8006afe:	d003      	beq.n	8006b08 <I2C_IsErrorOccurred+0xe0>
 8006b00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d0aa      	beq.n	8006a5e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006b08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d103      	bne.n	8006b18 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	2220      	movs	r2, #32
 8006b16:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006b18:	6a3b      	ldr	r3, [r7, #32]
 8006b1a:	f043 0304 	orr.w	r3, r3, #4
 8006b1e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006b20:	2301      	movs	r3, #1
 8006b22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	699b      	ldr	r3, [r3, #24]
 8006b2c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006b2e:	69bb      	ldr	r3, [r7, #24]
 8006b30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d00b      	beq.n	8006b50 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006b38:	6a3b      	ldr	r3, [r7, #32]
 8006b3a:	f043 0301 	orr.w	r3, r3, #1
 8006b3e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006b48:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006b50:	69bb      	ldr	r3, [r7, #24]
 8006b52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d00b      	beq.n	8006b72 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006b5a:	6a3b      	ldr	r3, [r7, #32]
 8006b5c:	f043 0308 	orr.w	r3, r3, #8
 8006b60:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006b6a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006b72:	69bb      	ldr	r3, [r7, #24]
 8006b74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d00b      	beq.n	8006b94 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006b7c:	6a3b      	ldr	r3, [r7, #32]
 8006b7e:	f043 0302 	orr.w	r3, r3, #2
 8006b82:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006b8c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006b94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d01c      	beq.n	8006bd6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006b9c:	68f8      	ldr	r0, [r7, #12]
 8006b9e:	f7ff fe3b 	bl	8006818 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	6859      	ldr	r1, [r3, #4]
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681a      	ldr	r2, [r3, #0]
 8006bac:	4b0d      	ldr	r3, [pc, #52]	@ (8006be4 <I2C_IsErrorOccurred+0x1bc>)
 8006bae:	400b      	ands	r3, r1
 8006bb0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006bb6:	6a3b      	ldr	r3, [r7, #32]
 8006bb8:	431a      	orrs	r2, r3
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2220      	movs	r2, #32
 8006bc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8006bd6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3728      	adds	r7, #40	@ 0x28
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}
 8006be2:	bf00      	nop
 8006be4:	fe00e800 	.word	0xfe00e800

08006be8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b087      	sub	sp, #28
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	60f8      	str	r0, [r7, #12]
 8006bf0:	607b      	str	r3, [r7, #4]
 8006bf2:	460b      	mov	r3, r1
 8006bf4:	817b      	strh	r3, [r7, #10]
 8006bf6:	4613      	mov	r3, r2
 8006bf8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006bfa:	897b      	ldrh	r3, [r7, #10]
 8006bfc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006c00:	7a7b      	ldrb	r3, [r7, #9]
 8006c02:	041b      	lsls	r3, r3, #16
 8006c04:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006c08:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006c0e:	6a3b      	ldr	r3, [r7, #32]
 8006c10:	4313      	orrs	r3, r2
 8006c12:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006c16:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	685a      	ldr	r2, [r3, #4]
 8006c1e:	6a3b      	ldr	r3, [r7, #32]
 8006c20:	0d5b      	lsrs	r3, r3, #21
 8006c22:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006c26:	4b08      	ldr	r3, [pc, #32]	@ (8006c48 <I2C_TransferConfig+0x60>)
 8006c28:	430b      	orrs	r3, r1
 8006c2a:	43db      	mvns	r3, r3
 8006c2c:	ea02 0103 	and.w	r1, r2, r3
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	697a      	ldr	r2, [r7, #20]
 8006c36:	430a      	orrs	r2, r1
 8006c38:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006c3a:	bf00      	nop
 8006c3c:	371c      	adds	r7, #28
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c44:	4770      	bx	lr
 8006c46:	bf00      	nop
 8006c48:	03ff63ff 	.word	0x03ff63ff

08006c4c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b083      	sub	sp, #12
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	2b20      	cmp	r3, #32
 8006c60:	d138      	bne.n	8006cd4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d101      	bne.n	8006c70 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006c6c:	2302      	movs	r3, #2
 8006c6e:	e032      	b.n	8006cd6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2224      	movs	r2, #36	@ 0x24
 8006c7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f022 0201 	bic.w	r2, r2, #1
 8006c8e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006c9e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	6819      	ldr	r1, [r3, #0]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	683a      	ldr	r2, [r7, #0]
 8006cac:	430a      	orrs	r2, r1
 8006cae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f042 0201 	orr.w	r2, r2, #1
 8006cbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2220      	movs	r2, #32
 8006cc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	e000      	b.n	8006cd6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006cd4:	2302      	movs	r3, #2
  }
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	370c      	adds	r7, #12
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr

08006ce2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006ce2:	b480      	push	{r7}
 8006ce4:	b085      	sub	sp, #20
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	6078      	str	r0, [r7, #4]
 8006cea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	2b20      	cmp	r3, #32
 8006cf6:	d139      	bne.n	8006d6c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d101      	bne.n	8006d06 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006d02:	2302      	movs	r3, #2
 8006d04:	e033      	b.n	8006d6e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2201      	movs	r2, #1
 8006d0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2224      	movs	r2, #36	@ 0x24
 8006d12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f022 0201 	bic.w	r2, r2, #1
 8006d24:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006d34:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	021b      	lsls	r3, r3, #8
 8006d3a:	68fa      	ldr	r2, [r7, #12]
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	68fa      	ldr	r2, [r7, #12]
 8006d46:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	681a      	ldr	r2, [r3, #0]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f042 0201 	orr.w	r2, r2, #1
 8006d56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2220      	movs	r2, #32
 8006d5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2200      	movs	r2, #0
 8006d64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	e000      	b.n	8006d6e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006d6c:	2302      	movs	r3, #2
  }
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3714      	adds	r7, #20
 8006d72:	46bd      	mov	sp, r7
 8006d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d78:	4770      	bx	lr

08006d7a <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8006d7a:	b580      	push	{r7, lr}
 8006d7c:	b084      	sub	sp, #16
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006d82:	f7fc fce9 	bl	8003758 <HAL_GetTick>
 8006d86:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d101      	bne.n	8006d92 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e03b      	b.n	8006e0a <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2202      	movs	r2, #2
 8006d9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	68da      	ldr	r2, [r3, #12]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f022 0201 	bic.w	r2, r2, #1
 8006db0:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8006db2:	e00f      	b.n	8006dd4 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8006db4:	f7fc fcd0 	bl	8003758 <HAL_GetTick>
 8006db8:	4602      	mov	r2, r0
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	1ad3      	subs	r3, r2, r3
 8006dbe:	2b05      	cmp	r3, #5
 8006dc0:	d908      	bls.n	8006dd4 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2240      	movs	r2, #64	@ 0x40
 8006dc6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2203      	movs	r2, #3
 8006dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      return HAL_ERROR;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	e01a      	b.n	8006e0a <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	68db      	ldr	r3, [r3, #12]
 8006dda:	f003 0301 	and.w	r3, r3, #1
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d1e8      	bne.n	8006db4 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f000 fcd2 	bl	800778c <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2200      	movs	r2, #0
 8006dec:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2200      	movs	r2, #0
 8006df2:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2200      	movs	r2, #0
 8006df8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2201      	movs	r2, #1
 8006e04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006e08:	2300      	movs	r3, #0
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3710      	adds	r7, #16
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
	...

08006e14 <HAL_MDMA_RegisterCallback>:
  * @param  CallbackID:           User Callback identifier
  * @param  pCallback:            pointer to callbacsk function.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_RegisterCallback(MDMA_HandleTypeDef *hmdma, HAL_MDMA_CallbackIDTypeDef CallbackID, void (* pCallback)(MDMA_HandleTypeDef *_hmdma))
{
 8006e14:	b480      	push	{r7}
 8006e16:	b087      	sub	sp, #28
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	60f8      	str	r0, [r7, #12]
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	607a      	str	r2, [r7, #4]
 8006e20:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8006e22:	2300      	movs	r3, #0
 8006e24:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d101      	bne.n	8006e30 <HAL_MDMA_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	e044      	b.n	8006eba <HAL_MDMA_RegisterCallback+0xa6>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d101      	bne.n	8006e3e <HAL_MDMA_RegisterCallback+0x2a>
 8006e3a:	2302      	movs	r3, #2
 8006e3c:	e03d      	b.n	8006eba <HAL_MDMA_RegisterCallback+0xa6>
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2201      	movs	r2, #1
 8006e42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e4c:	b2db      	uxtb	r3, r3
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d12a      	bne.n	8006ea8 <HAL_MDMA_RegisterCallback+0x94>
  {
    switch (CallbackID)
 8006e52:	7afb      	ldrb	r3, [r7, #11]
 8006e54:	2b05      	cmp	r3, #5
 8006e56:	d82a      	bhi.n	8006eae <HAL_MDMA_RegisterCallback+0x9a>
 8006e58:	a201      	add	r2, pc, #4	@ (adr r2, 8006e60 <HAL_MDMA_RegisterCallback+0x4c>)
 8006e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e5e:	bf00      	nop
 8006e60:	08006e79 	.word	0x08006e79
 8006e64:	08006e81 	.word	0x08006e81
 8006e68:	08006e89 	.word	0x08006e89
 8006e6c:	08006e91 	.word	0x08006e91
 8006e70:	08006e99 	.word	0x08006e99
 8006e74:	08006ea1 	.word	0x08006ea1
    {
    case  HAL_MDMA_XFER_CPLT_CB_ID:
      hmdma->XferCpltCallback = pCallback;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	645a      	str	r2, [r3, #68]	@ 0x44
      break;
 8006e7e:	e017      	b.n	8006eb0 <HAL_MDMA_RegisterCallback+0x9c>

    case  HAL_MDMA_XFER_BUFFERCPLT_CB_ID:
      hmdma->XferBufferCpltCallback = pCallback;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	687a      	ldr	r2, [r7, #4]
 8006e84:	649a      	str	r2, [r3, #72]	@ 0x48
      break;
 8006e86:	e013      	b.n	8006eb0 <HAL_MDMA_RegisterCallback+0x9c>

    case  HAL_MDMA_XFER_BLOCKCPLT_CB_ID:
      hmdma->XferBlockCpltCallback = pCallback;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	64da      	str	r2, [r3, #76]	@ 0x4c
      break;
 8006e8e:	e00f      	b.n	8006eb0 <HAL_MDMA_RegisterCallback+0x9c>

    case  HAL_MDMA_XFER_REPBLOCKCPLT_CB_ID:
      hmdma->XferRepeatBlockCpltCallback = pCallback;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006e96:	e00b      	b.n	8006eb0 <HAL_MDMA_RegisterCallback+0x9c>

    case  HAL_MDMA_XFER_ERROR_CB_ID:
      hmdma->XferErrorCallback = pCallback;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	687a      	ldr	r2, [r7, #4]
 8006e9c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006e9e:	e007      	b.n	8006eb0 <HAL_MDMA_RegisterCallback+0x9c>

    case  HAL_MDMA_XFER_ABORT_CB_ID:
      hmdma->XferAbortCallback = pCallback;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8006ea6:	e003      	b.n	8006eb0 <HAL_MDMA_RegisterCallback+0x9c>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	75fb      	strb	r3, [r7, #23]
 8006eac:	e000      	b.n	8006eb0 <HAL_MDMA_RegisterCallback+0x9c>
      break;
 8006eae:	bf00      	nop
  }

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006eb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	371c      	adds	r7, #28
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec4:	4770      	bx	lr
 8006ec6:	bf00      	nop

08006ec8 <HAL_MDMA_LinkedList_CreateNode>:
  * @param  pNodeConfig: Pointer to a MDMA_LinkNodeConfTypeDef structure that contains
  *               the configuration information for the specified MDMA Linked List Node.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_LinkedList_CreateNode(MDMA_LinkNodeTypeDef *pNode, MDMA_LinkNodeConfTypeDef *pNodeConfig)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b085      	sub	sp, #20
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	6039      	str	r1, [r7, #0]
  uint32_t addressMask;
  uint32_t blockoffset;

  /* Check the MDMA peripheral state */
  if((pNode == NULL) || (pNodeConfig == NULL))
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d002      	beq.n	8006ede <HAL_MDMA_LinkedList_CreateNode+0x16>
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d101      	bne.n	8006ee2 <HAL_MDMA_LinkedList_CreateNode+0x1a>
  {
    return HAL_ERROR;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	e0c8      	b.n	8007074 <HAL_MDMA_LinkedList_CreateNode+0x1ac>
  assert_param(IS_MDMA_TRANSFER_LENGTH(pNodeConfig->BlockDataLength));
  assert_param(IS_MDMA_BLOCK_COUNT(pNodeConfig->BlockCount));


  /* Configure next Link node Address Register to zero */
  pNode->CLAR =  0;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	615a      	str	r2, [r3, #20]

  /* Configure the Link Node registers*/
  pNode->CTBR   = 0;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2200      	movs	r2, #0
 8006eec:	619a      	str	r2, [r3, #24]
  pNode->CMAR   = 0;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	621a      	str	r2, [r3, #32]
  pNode->CMDR   = 0;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	625a      	str	r2, [r3, #36]	@ 0x24
  pNode->Reserved = 0;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2200      	movs	r2, #0
 8006efe:	61da      	str	r2, [r3, #28]

  /* Write new CTCR Register value */
  pNode->CTCR =  pNodeConfig->Init.SourceInc | pNodeConfig->Init.DestinationInc | \
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	691a      	ldr	r2, [r3, #16]
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	695b      	ldr	r3, [r3, #20]
 8006f08:	431a      	orrs	r2, r3
    pNodeConfig->Init.SourceDataSize | pNodeConfig->Init.DestDataSize           | \
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	699b      	ldr	r3, [r3, #24]
  pNode->CTCR =  pNodeConfig->Init.SourceInc | pNodeConfig->Init.DestinationInc | \
 8006f0e:	431a      	orrs	r2, r3
    pNodeConfig->Init.SourceDataSize | pNodeConfig->Init.DestDataSize           | \
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	69db      	ldr	r3, [r3, #28]
 8006f14:	431a      	orrs	r2, r3
      pNodeConfig->Init.DataAlignment| pNodeConfig->Init.SourceBurst            | \
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	6a1b      	ldr	r3, [r3, #32]
    pNodeConfig->Init.SourceDataSize | pNodeConfig->Init.DestDataSize           | \
 8006f1a:	431a      	orrs	r2, r3
      pNodeConfig->Init.DataAlignment| pNodeConfig->Init.SourceBurst            | \
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f20:	431a      	orrs	r2, r3
        pNodeConfig->Init.DestBurst                                             | \
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      pNodeConfig->Init.DataAlignment| pNodeConfig->Init.SourceBurst            | \
 8006f26:	431a      	orrs	r2, r3
          ((pNodeConfig->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f2c:	3b01      	subs	r3, #1
 8006f2e:	049b      	lsls	r3, r3, #18
        pNodeConfig->Init.DestBurst                                             | \
 8006f30:	431a      	orrs	r2, r3
            pNodeConfig->Init.TransferTriggerMode;
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	685b      	ldr	r3, [r3, #4]
          ((pNodeConfig->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8006f36:	431a      	orrs	r2, r3
  pNode->CTCR =  pNodeConfig->Init.SourceInc | pNodeConfig->Init.DestinationInc | \
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	601a      	str	r2, [r3, #0]

  /* If SW request set the CTCR register to SW Request Mode*/
  if(pNodeConfig->Init.Request == MDMA_REQUEST_SW)
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f44:	d105      	bne.n	8006f52 <HAL_MDMA_LinkedList_CreateNode+0x8a>
  {
    pNode->CTCR |= MDMA_CTCR_SWRM;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	601a      	str	r2, [r3, #0]
  -If the request is done by SW : BWM could be set to 1 or 0.
  -If the request is done by a peripheral :
     If mask address not set (0) => BWM must be set to 0
     If mask address set (different than 0) => BWM could be set to 1 or 0
  */
  if((pNodeConfig->Init.Request == MDMA_REQUEST_SW) || (pNodeConfig->PostRequestMaskAddress != 0U))
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f5a:	d003      	beq.n	8006f64 <HAL_MDMA_LinkedList_CreateNode+0x9c>
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d005      	beq.n	8006f70 <HAL_MDMA_LinkedList_CreateNode+0xa8>
  {
    pNode->CTCR |=  MDMA_CTCR_BWM;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	601a      	str	r2, [r3, #0]
  }

  /* Set the new CBNDTR Register value */
  pNode->CBNDTR = ((pNodeConfig->BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC;
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f74:	3b01      	subs	r3, #1
 8006f76:	051a      	lsls	r2, r3, #20
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	605a      	str	r2, [r3, #4]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(pNodeConfig->Init.SourceBlockAddressOffset < 0)
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	da0e      	bge.n	8006fa2 <HAL_MDMA_LinkedList_CreateNode+0xda>
  {
    pNode->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	605a      	str	r2, [r3, #4]
    /*write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- pNodeConfig->Init.SourceBlockAddressOffset);
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f94:	425b      	negs	r3, r3
 8006f96:	60fb      	str	r3, [r7, #12]
    pNode->CBRUR = blockoffset & 0x0000FFFFU;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	b29a      	uxth	r2, r3
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	611a      	str	r2, [r3, #16]
 8006fa0:	e004      	b.n	8006fac <HAL_MDMA_LinkedList_CreateNode+0xe4>
  }
  else
  {
    /*write new CBRUR Register value : source repeat block offset */
    pNode->CBRUR = (((uint32_t) pNodeConfig->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fa6:	b29a      	uxth	r2, r3
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	611a      	str	r2, [r3, #16]
  }

  /* if block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(pNodeConfig->Init.DestBlockAddressOffset < 0)
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	da11      	bge.n	8006fd8 <HAL_MDMA_LinkedList_CreateNode+0x110>
  {
    pNode->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	605a      	str	r2, [r3, #4]
    /*write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- pNodeConfig->Init.DestBlockAddressOffset);
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fc4:	425b      	negs	r3, r3
 8006fc6:	60fb      	str	r3, [r7, #12]
    pNode->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	691a      	ldr	r2, [r3, #16]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	041b      	lsls	r3, r3, #16
 8006fd0:	431a      	orrs	r2, r3
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	611a      	str	r2, [r3, #16]
 8006fd6:	e007      	b.n	8006fe8 <HAL_MDMA_LinkedList_CreateNode+0x120>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    pNode->CBRUR |= ((((uint32_t)pNodeConfig->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	691a      	ldr	r2, [r3, #16]
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fe0:	041b      	lsls	r3, r3, #16
 8006fe2:	431a      	orrs	r2, r3
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	611a      	str	r2, [r3, #16]
  }

  /* Configure MDMA Link Node data length */
  pNode->CBNDTR |=  pNodeConfig->BlockDataLength;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	685a      	ldr	r2, [r3, #4]
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ff0:	431a      	orrs	r2, r3
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	605a      	str	r2, [r3, #4]

  /* Configure MDMA Link Node destination address */
  pNode->CDAR = pNodeConfig->DstAddress;
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	60da      	str	r2, [r3, #12]

  /* Configure MDMA Link Node Source address */
  pNode->CSAR = pNodeConfig->SrcAddress;
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	609a      	str	r2, [r3, #8]

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData,  */
  if(pNodeConfig->Init.Request != MDMA_REQUEST_SW)
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800700e:	d00c      	beq.n	800702a <HAL_MDMA_LinkedList_CreateNode+0x162>
  {
    /* Set the HW request in CTBR register  */
    pNode->CTBR = pNodeConfig->Init.Request & MDMA_CTBR_TSEL;
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	b2da      	uxtb	r2, r3
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	619a      	str	r2, [r3, #24]
    /* Set the HW request clear Mask and Data */
    pNode->CMAR = pNodeConfig->PostRequestMaskAddress;
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	621a      	str	r2, [r3, #32]
    pNode->CMDR = pNodeConfig->PostRequestMaskData;
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  addressMask = pNodeConfig->SrcAddress & 0xFF000000U;
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800702e:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8007032:	60bb      	str	r3, [r7, #8]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800703a:	d002      	beq.n	8007042 <HAL_MDMA_LinkedList_CreateNode+0x17a>
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d105      	bne.n	800704e <HAL_MDMA_LinkedList_CreateNode+0x186>
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    pNode->CTBR |= MDMA_CTBR_SBUS;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	699b      	ldr	r3, [r3, #24]
 8007046:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	619a      	str	r2, [r3, #24]
  }

  addressMask = pNodeConfig->DstAddress & 0xFF000000U;
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007052:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8007056:	60bb      	str	r3, [r7, #8]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800705e:	d002      	beq.n	8007066 <HAL_MDMA_LinkedList_CreateNode+0x19e>
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d105      	bne.n	8007072 <HAL_MDMA_LinkedList_CreateNode+0x1aa>
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    pNode->CTBR |= MDMA_CTBR_DBUS;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	699b      	ldr	r3, [r3, #24]
 800706a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	619a      	str	r2, [r3, #24]
  }

  return HAL_OK;
 8007072:	2300      	movs	r3, #0
}
 8007074:	4618      	mov	r0, r3
 8007076:	3714      	adds	r7, #20
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr

08007080 <HAL_MDMA_LinkedList_AddNode>:
  *                    at the end of the list
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_LinkedList_AddNode(MDMA_HandleTypeDef *hmdma, MDMA_LinkNodeTypeDef *pNewNode, const MDMA_LinkNodeTypeDef *pPrevNode)
{
 8007080:	b480      	push	{r7}
 8007082:	b089      	sub	sp, #36	@ 0x24
 8007084:	af00      	add	r7, sp, #0
 8007086:	60f8      	str	r0, [r7, #12]
 8007088:	60b9      	str	r1, [r7, #8]
 800708a:	607a      	str	r2, [r7, #4]
  MDMA_LinkNodeTypeDef *pNode;
  uint32_t counter = 0, nodeInserted = 0;
 800708c:	2300      	movs	r3, #0
 800708e:	61bb      	str	r3, [r7, #24]
 8007090:	2300      	movs	r3, #0
 8007092:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007094:	2300      	movs	r3, #0
 8007096:	74fb      	strb	r3, [r7, #19]

  /* Check the MDMA peripheral handle */
  if((hmdma == NULL) || (pNewNode == NULL))
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d002      	beq.n	80070a4 <HAL_MDMA_LinkedList_AddNode+0x24>
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d101      	bne.n	80070a8 <HAL_MDMA_LinkedList_AddNode+0x28>
  {
    return HAL_ERROR;
 80070a4:	2301      	movs	r3, #1
 80070a6:	e0a9      	b.n	80071fc <HAL_MDMA_LinkedList_AddNode+0x17c>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d101      	bne.n	80070b6 <HAL_MDMA_LinkedList_AddNode+0x36>
 80070b2:	2302      	movs	r3, #2
 80070b4:	e0a2      	b.n	80071fc <HAL_MDMA_LinkedList_AddNode+0x17c>
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2201      	movs	r2, #1
 80070ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070c4:	b2db      	uxtb	r3, r3
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	f040 8093 	bne.w	80071f2 <HAL_MDMA_LinkedList_AddNode+0x172>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2202      	movs	r2, #2
 80070d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Check if this is the first node (after the Inititlization node) */
    if((uint32_t)hmdma->FirstLinkedListNodeAddress == 0U)
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d116      	bne.n	800710a <HAL_MDMA_LinkedList_AddNode+0x8a>
    {
      if(pPrevNode == NULL)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d110      	bne.n	8007104 <HAL_MDMA_LinkedList_AddNode+0x84>
      {
        /* if this is the first node after the initialization
        connect this node to the node 0 by updating
        the MDMA channel CLAR register to this node address */
        hmdma->Instance->CLAR = (uint32_t)pNewNode;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	68ba      	ldr	r2, [r7, #8]
 80070e8:	625a      	str	r2, [r3, #36]	@ 0x24
        /* Set the MDMA handle First linked List node*/
        hmdma->FirstLinkedListNodeAddress = pNewNode;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	68ba      	ldr	r2, [r7, #8]
 80070ee:	65da      	str	r2, [r3, #92]	@ 0x5c

        /*reset New node link */
        pNewNode->CLAR = 0;
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	2200      	movs	r2, #0
 80070f4:	615a      	str	r2, [r3, #20]

        /* Update the Handle last node address */
        hmdma->LastLinkedListNodeAddress = pNewNode;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	68ba      	ldr	r2, [r7, #8]
 80070fa:	661a      	str	r2, [r3, #96]	@ 0x60

        hmdma->LinkedListNodeCounter = 1;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2201      	movs	r2, #1
 8007100:	665a      	str	r2, [r3, #100]	@ 0x64
 8007102:	e06c      	b.n	80071de <HAL_MDMA_LinkedList_AddNode+0x15e>
      }
      else
      {
        hal_status = HAL_ERROR;
 8007104:	2301      	movs	r3, #1
 8007106:	74fb      	strb	r3, [r7, #19]
 8007108:	e069      	b.n	80071de <HAL_MDMA_LinkedList_AddNode+0x15e>
      }
    }
    else if(hmdma->FirstLinkedListNodeAddress != pNewNode)
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800710e:	68ba      	ldr	r2, [r7, #8]
 8007110:	429a      	cmp	r2, r3
 8007112:	d062      	beq.n	80071da <HAL_MDMA_LinkedList_AddNode+0x15a>
    {
      /* Check if the node to insert already exists*/
      pNode = hmdma->FirstLinkedListNodeAddress;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007118:	61fb      	str	r3, [r7, #28]
      while((counter < hmdma->LinkedListNodeCounter) && (hal_status == HAL_OK))
 800711a:	e00c      	b.n	8007136 <HAL_MDMA_LinkedList_AddNode+0xb6>
      {
        if(pNode->CLAR == (uint32_t)pNewNode)
 800711c:	69fb      	ldr	r3, [r7, #28]
 800711e:	695a      	ldr	r2, [r3, #20]
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	429a      	cmp	r2, r3
 8007124:	d101      	bne.n	800712a <HAL_MDMA_LinkedList_AddNode+0xaa>
        {
          hal_status = HAL_ERROR; /* error this node already exist in the linked list and it is not first node */
 8007126:	2301      	movs	r3, #1
 8007128:	74fb      	strb	r3, [r7, #19]
        }
        pNode = (MDMA_LinkNodeTypeDef *)pNode->CLAR;
 800712a:	69fb      	ldr	r3, [r7, #28]
 800712c:	695b      	ldr	r3, [r3, #20]
 800712e:	61fb      	str	r3, [r7, #28]
        counter++;
 8007130:	69bb      	ldr	r3, [r7, #24]
 8007132:	3301      	adds	r3, #1
 8007134:	61bb      	str	r3, [r7, #24]
      while((counter < hmdma->LinkedListNodeCounter) && (hal_status == HAL_OK))
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800713a:	69ba      	ldr	r2, [r7, #24]
 800713c:	429a      	cmp	r2, r3
 800713e:	d202      	bcs.n	8007146 <HAL_MDMA_LinkedList_AddNode+0xc6>
 8007140:	7cfb      	ldrb	r3, [r7, #19]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d0ea      	beq.n	800711c <HAL_MDMA_LinkedList_AddNode+0x9c>
      }

      if(hal_status == HAL_OK)
 8007146:	7cfb      	ldrb	r3, [r7, #19]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d148      	bne.n	80071de <HAL_MDMA_LinkedList_AddNode+0x15e>
      {
        /* Check if the previous node is the last one in the current list or zero */
        if((pPrevNode == hmdma->LastLinkedListNodeAddress) || (pPrevNode == NULL))
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	429a      	cmp	r2, r3
 8007154:	d002      	beq.n	800715c <HAL_MDMA_LinkedList_AddNode+0xdc>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d111      	bne.n	8007180 <HAL_MDMA_LinkedList_AddNode+0x100>
        {
          /* insert the new node at the end of the list */
          pNewNode->CLAR = hmdma->LastLinkedListNodeAddress->CLAR;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007160:	695a      	ldr	r2, [r3, #20]
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	615a      	str	r2, [r3, #20]
          hmdma->LastLinkedListNodeAddress->CLAR = (uint32_t)pNewNode;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800716a:	68ba      	ldr	r2, [r7, #8]
 800716c:	615a      	str	r2, [r3, #20]
          /* Update the Handle last node address */
          hmdma->LastLinkedListNodeAddress = pNewNode;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	68ba      	ldr	r2, [r7, #8]
 8007172:	661a      	str	r2, [r3, #96]	@ 0x60
          /* Increment the linked list node counter */
          hmdma->LinkedListNodeCounter++;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007178:	1c5a      	adds	r2, r3, #1
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	665a      	str	r2, [r3, #100]	@ 0x64
 800717e:	e02e      	b.n	80071de <HAL_MDMA_LinkedList_AddNode+0x15e>
        }
        else
        {
          /*insert the new node after the pPreviousNode node */
          pNode = hmdma->FirstLinkedListNodeAddress;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007184:	61fb      	str	r3, [r7, #28]
          counter = 0;
 8007186:	2300      	movs	r3, #0
 8007188:	61bb      	str	r3, [r7, #24]
          while((counter < hmdma->LinkedListNodeCounter) && (nodeInserted == 0U))
 800718a:	e018      	b.n	80071be <HAL_MDMA_LinkedList_AddNode+0x13e>
          {
            counter++;
 800718c:	69bb      	ldr	r3, [r7, #24]
 800718e:	3301      	adds	r3, #1
 8007190:	61bb      	str	r3, [r7, #24]
            if(pNode == pPrevNode)
 8007192:	69fa      	ldr	r2, [r7, #28]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	429a      	cmp	r2, r3
 8007198:	d10e      	bne.n	80071b8 <HAL_MDMA_LinkedList_AddNode+0x138>
            {
              /*Insert the new node after the previous one */
              pNewNode->CLAR = pNode->CLAR;
 800719a:	69fb      	ldr	r3, [r7, #28]
 800719c:	695a      	ldr	r2, [r3, #20]
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	615a      	str	r2, [r3, #20]
              pNode->CLAR = (uint32_t)pNewNode;
 80071a2:	68ba      	ldr	r2, [r7, #8]
 80071a4:	69fb      	ldr	r3, [r7, #28]
 80071a6:	615a      	str	r2, [r3, #20]
              /* Increment the linked list node counter */
              hmdma->LinkedListNodeCounter++;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071ac:	1c5a      	adds	r2, r3, #1
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	665a      	str	r2, [r3, #100]	@ 0x64
              nodeInserted = 1;
 80071b2:	2301      	movs	r3, #1
 80071b4:	617b      	str	r3, [r7, #20]
 80071b6:	e002      	b.n	80071be <HAL_MDMA_LinkedList_AddNode+0x13e>
            }
            else
            {
              pNode = (MDMA_LinkNodeTypeDef *)pNode->CLAR;
 80071b8:	69fb      	ldr	r3, [r7, #28]
 80071ba:	695b      	ldr	r3, [r3, #20]
 80071bc:	61fb      	str	r3, [r7, #28]
          while((counter < hmdma->LinkedListNodeCounter) && (nodeInserted == 0U))
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071c2:	69ba      	ldr	r2, [r7, #24]
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d202      	bcs.n	80071ce <HAL_MDMA_LinkedList_AddNode+0x14e>
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d0de      	beq.n	800718c <HAL_MDMA_LinkedList_AddNode+0x10c>
            }
          }

          if(nodeInserted == 0U)
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d104      	bne.n	80071de <HAL_MDMA_LinkedList_AddNode+0x15e>
          {
            hal_status = HAL_ERROR;
 80071d4:	2301      	movs	r3, #1
 80071d6:	74fb      	strb	r3, [r7, #19]
 80071d8:	e001      	b.n	80071de <HAL_MDMA_LinkedList_AddNode+0x15e>
        }
      }
    }
    else
    {
      hal_status = HAL_ERROR;
 80071da:	2301      	movs	r3, #1
 80071dc:	74fb      	strb	r3, [r7, #19]
    }

    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2200      	movs	r2, #0
 80071e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    hmdma->State = HAL_MDMA_STATE_READY;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2201      	movs	r2, #1
 80071ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return hal_status;
 80071ee:	7cfb      	ldrb	r3, [r7, #19]
 80071f0:	e004      	b.n	80071fc <HAL_MDMA_LinkedList_AddNode+0x17c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2200      	movs	r2, #0
 80071f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Return error status */
    return HAL_BUSY;
 80071fa:	2302      	movs	r3, #2
  }
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3724      	adds	r7, #36	@ 0x24
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr

08007208 <HAL_MDMA_LinkedList_EnableCircularMode>:
  * @param  hmdma : Pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_LinkedList_EnableCircularMode(MDMA_HandleTypeDef *hmdma)
{
 8007208:	b480      	push	{r7}
 800720a:	b085      	sub	sp, #20
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007210:	2300      	movs	r3, #0
 8007212:	73fb      	strb	r3, [r7, #15]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d101      	bne.n	800721e <HAL_MDMA_LinkedList_EnableCircularMode+0x16>
  {
    return HAL_ERROR;
 800721a:	2301      	movs	r3, #1
 800721c:	e031      	b.n	8007282 <HAL_MDMA_LinkedList_EnableCircularMode+0x7a>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007224:	2b01      	cmp	r3, #1
 8007226:	d101      	bne.n	800722c <HAL_MDMA_LinkedList_EnableCircularMode+0x24>
 8007228:	2302      	movs	r3, #2
 800722a:	e02a      	b.n	8007282 <HAL_MDMA_LinkedList_EnableCircularMode+0x7a>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2201      	movs	r2, #1
 8007230:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800723a:	b2db      	uxtb	r3, r3
 800723c:	2b01      	cmp	r3, #1
 800723e:	d117      	bne.n	8007270 <HAL_MDMA_LinkedList_EnableCircularMode+0x68>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2202      	movs	r2, #2
 8007244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* If first and last node are null (no nodes in the list) : return error*/
    if(((uint32_t)hmdma->FirstLinkedListNodeAddress == 0U) || ((uint32_t)hmdma->LastLinkedListNodeAddress == 0U) || (hmdma->LinkedListNodeCounter == 0U))
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800724c:	2b00      	cmp	r3, #0
 800724e:	d007      	beq.n	8007260 <HAL_MDMA_LinkedList_EnableCircularMode+0x58>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007254:	2b00      	cmp	r3, #0
 8007256:	d003      	beq.n	8007260 <HAL_MDMA_LinkedList_EnableCircularMode+0x58>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800725c:	2b00      	cmp	r3, #0
 800725e:	d102      	bne.n	8007266 <HAL_MDMA_LinkedList_EnableCircularMode+0x5e>
    {
      hal_status = HAL_ERROR;
 8007260:	2301      	movs	r3, #1
 8007262:	73fb      	strb	r3, [r7, #15]
 8007264:	e004      	b.n	8007270 <HAL_MDMA_LinkedList_EnableCircularMode+0x68>
    }
    else
    {
      /* to enable circular mode Last Node should be connected to first node */
      hmdma->LastLinkedListNodeAddress->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800726e:	615a      	str	r2, [r3, #20]
    }

  }
  /* Process unlocked */
  __HAL_UNLOCK(hmdma);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2200      	movs	r2, #0
 8007274:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  hmdma->State = HAL_MDMA_STATE_READY;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2201      	movs	r2, #1
 800727c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return hal_status;
 8007280:	7bfb      	ldrb	r3, [r7, #15]
}
 8007282:	4618      	mov	r0, r3
 8007284:	3714      	adds	r7, #20
 8007286:	46bd      	mov	sp, r7
 8007288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728c:	4770      	bx	lr

0800728e <HAL_MDMA_Start_IT>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount      : The number of a blocks to be transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Start_IT(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 800728e:	b580      	push	{r7, lr}
 8007290:	b086      	sub	sp, #24
 8007292:	af02      	add	r7, sp, #8
 8007294:	60f8      	str	r0, [r7, #12]
 8007296:	60b9      	str	r1, [r7, #8]
 8007298:	607a      	str	r2, [r7, #4]
 800729a:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_MDMA_TRANSFER_LENGTH(BlockDataLength));
  assert_param(IS_MDMA_BLOCK_COUNT(BlockCount));

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d101      	bne.n	80072a6 <HAL_MDMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 80072a2:	2301      	movs	r3, #1
 80072a4:	e070      	b.n	8007388 <HAL_MDMA_Start_IT+0xfa>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d101      	bne.n	80072b4 <HAL_MDMA_Start_IT+0x26>
 80072b0:	2302      	movs	r3, #2
 80072b2:	e069      	b.n	8007388 <HAL_MDMA_Start_IT+0xfa>
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2201      	movs	r2, #1
 80072b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d158      	bne.n	800737a <HAL_MDMA_Start_IT+0xec>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2202      	movs	r2, #2
 80072cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Initialize the error code */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2200      	movs	r2, #0
 80072d4:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Disable the peripheral */
    __HAL_MDMA_DISABLE(hmdma);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	68da      	ldr	r2, [r3, #12]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f022 0201 	bic.w	r2, r2, #1
 80072e4:	60da      	str	r2, [r3, #12]

    /* Configure the source, destination address and the data length */
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
 80072e6:	69bb      	ldr	r3, [r7, #24]
 80072e8:	9300      	str	r3, [sp, #0]
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	687a      	ldr	r2, [r7, #4]
 80072ee:	68b9      	ldr	r1, [r7, #8]
 80072f0:	68f8      	ldr	r0, [r7, #12]
 80072f2:	f000 f9db 	bl	80076ac <MDMA_SetConfig>

    /* Enable Common interrupts i.e Transfer Error IT and Channel Transfer Complete IT*/
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	68da      	ldr	r2, [r3, #12]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f042 0206 	orr.w	r2, r2, #6
 8007304:	60da      	str	r2, [r3, #12]

    if(hmdma->XferBlockCpltCallback != NULL)
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800730a:	2b00      	cmp	r3, #0
 800730c:	d007      	beq.n	800731e <HAL_MDMA_Start_IT+0x90>
    {
      /* if Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	68da      	ldr	r2, [r3, #12]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f042 0210 	orr.w	r2, r2, #16
 800731c:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007322:	2b00      	cmp	r3, #0
 8007324:	d007      	beq.n	8007336 <HAL_MDMA_Start_IT+0xa8>
    {
      /* if Repeated Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	68da      	ldr	r2, [r3, #12]
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f042 0208 	orr.w	r2, r2, #8
 8007334:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferBufferCpltCallback != NULL)
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800733a:	2b00      	cmp	r3, #0
 800733c:	d007      	beq.n	800734e <HAL_MDMA_Start_IT+0xc0>
    {
      /* if buffer transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	68da      	ldr	r2, [r3, #12]
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f042 0220 	orr.w	r2, r2, #32
 800734c:	60da      	str	r2, [r3, #12]
    }

    /* Enable the Peripheral */
    __HAL_MDMA_ENABLE(hmdma);
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	68da      	ldr	r2, [r3, #12]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f042 0201 	orr.w	r2, r2, #1
 800735c:	60da      	str	r2, [r3, #12]

    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007366:	d10e      	bne.n	8007386 <HAL_MDMA_Start_IT+0xf8>
    {
      /* activate If SW request mode*/
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	68da      	ldr	r2, [r3, #12]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8007376:	60da      	str	r2, [r3, #12]
 8007378:	e005      	b.n	8007386 <HAL_MDMA_Start_IT+0xf8>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2200      	movs	r2, #0
 800737e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Return error status */
    return HAL_BUSY;
 8007382:	2302      	movs	r3, #2
 8007384:	e000      	b.n	8007388 <HAL_MDMA_Start_IT+0xfa>
  }

  return HAL_OK;
 8007386:	2300      	movs	r3, #0
}
 8007388:	4618      	mov	r0, r3
 800738a:	3710      	adds	r7, #16
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}

08007390 <HAL_MDMA_GenerateSWRequest>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_GenerateSWRequest(MDMA_HandleTypeDef *hmdma)
{
 8007390:	b480      	push	{r7}
 8007392:	b085      	sub	sp, #20
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  uint32_t request_mode;

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d101      	bne.n	80073a2 <HAL_MDMA_GenerateSWRequest+0x12>
  {
    return HAL_ERROR;
 800739e:	2301      	movs	r3, #1
 80073a0:	e02a      	b.n	80073f8 <HAL_MDMA_GenerateSWRequest+0x68>
  }

  /* Get the softawre request mode */
  request_mode = hmdma->Instance->CTCR & MDMA_CTCR_SWRM;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	691b      	ldr	r3, [r3, #16]
 80073a8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80073ac:	60fb      	str	r3, [r7, #12]

  if((hmdma->Instance->CCR &  MDMA_CCR_EN) == 0U)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	68db      	ldr	r3, [r3, #12]
 80073b4:	f003 0301 	and.w	r3, r3, #1
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d104      	bne.n	80073c6 <HAL_MDMA_GenerateSWRequest+0x36>
  {
    /* if no Transfer on going (MDMA enable bit not set) return error */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2280      	movs	r2, #128	@ 0x80
 80073c0:	669a      	str	r2, [r3, #104]	@ 0x68

    return HAL_ERROR;
 80073c2:	2301      	movs	r3, #1
 80073c4:	e018      	b.n	80073f8 <HAL_MDMA_GenerateSWRequest+0x68>
  }
  else if(((hmdma->Instance->CISR &  MDMA_CISR_CRQA) != 0U) || (request_mode == 0U))
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d102      	bne.n	80073da <HAL_MDMA_GenerateSWRequest+0x4a>
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d105      	bne.n	80073e6 <HAL_MDMA_GenerateSWRequest+0x56>
  {
    /* if an MDMA ongoing request has not yet end or if request mode is not SW request return error */
    hmdma->ErrorCode = HAL_MDMA_ERROR_BUSY;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80073e0:	669a      	str	r2, [r3, #104]	@ 0x68

    return HAL_ERROR;
 80073e2:	2301      	movs	r3, #1
 80073e4:	e008      	b.n	80073f8 <HAL_MDMA_GenerateSWRequest+0x68>
  }
  else
  {
    /* Set the SW request bit to activate the request on the Channel */
    hmdma->Instance->CCR |= MDMA_CCR_SWRQ;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	68da      	ldr	r2, [r3, #12]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80073f4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80073f6:	2300      	movs	r3, #0
  }
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3714      	adds	r7, #20
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr

08007404 <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b086      	sub	sp, #24
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 800740c:	2300      	movs	r3, #0
 800740e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007410:	4b91      	ldr	r3, [pc, #580]	@ (8007658 <HAL_MDMA_IRQHandler+0x254>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a91      	ldr	r2, [pc, #580]	@ (800765c <HAL_MDMA_IRQHandler+0x258>)
 8007416:	fba2 2303 	umull	r2, r3, r2, r3
 800741a:	0a9b      	lsrs	r3, r3, #10
 800741c:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	461a      	mov	r2, r3
 8007424:	4b8e      	ldr	r3, [pc, #568]	@ (8007660 <HAL_MDMA_IRQHandler+0x25c>)
 8007426:	4413      	add	r3, r2
 8007428:	099b      	lsrs	r3, r3, #6
 800742a:	f003 031f 	and.w	r3, r3, #31
 800742e:	2201      	movs	r2, #1
 8007430:	fa02 f303 	lsl.w	r3, r2, r3
 8007434:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8007436:	f04f 43a4 	mov.w	r3, #1375731712	@ 0x52000000
 800743a:	681a      	ldr	r2, [r3, #0]
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	4013      	ands	r3, r2
 8007440:	2b00      	cmp	r3, #0
 8007442:	f000 812d 	beq.w	80076a0 <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f003 0301 	and.w	r3, r3, #1
 8007450:	2b00      	cmp	r3, #0
 8007452:	d054      	beq.n	80074fe <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	68db      	ldr	r3, [r3, #12]
 800745a:	f003 0302 	and.w	r3, r3, #2
 800745e:	2b00      	cmp	r3, #0
 8007460:	d04d      	beq.n	80074fe <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	68da      	ldr	r2, [r3, #12]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f022 0202 	bic.w	r2, r2, #2
 8007470:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007480:	2b00      	cmp	r3, #0
 8007482:	d106      	bne.n	8007492 <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007488:	f043 0201 	orr.w	r2, r3, #1
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	669a      	str	r2, [r3, #104]	@ 0x68
 8007490:	e005      	b.n	800749e <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007496:	f043 0202 	orr.w	r2, r3, #2
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d005      	beq.n	80074b4 <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80074ac:	f043 0204 	orr.w	r2, r3, #4
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d005      	beq.n	80074ca <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80074c2:	f043 0208 	orr.w	r2, r3, #8
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d005      	beq.n	80074e0 <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80074d8:	f043 0210 	orr.w	r2, r3, #16
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d005      	beq.n	80074f6 <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80074ee:	f043 0220 	orr.w	r2, r3, #32
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	2201      	movs	r2, #1
 80074fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f003 0310 	and.w	r3, r3, #16
 8007508:	2b00      	cmp	r3, #0
 800750a:	d012      	beq.n	8007532 <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	68db      	ldr	r3, [r3, #12]
 8007512:	f003 0320 	and.w	r3, r3, #32
 8007516:	2b00      	cmp	r3, #0
 8007518:	d00b      	beq.n	8007532 <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	2210      	movs	r2, #16
 8007520:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007526:	2b00      	cmp	r3, #0
 8007528:	d003      	beq.n	8007532 <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f003 0308 	and.w	r3, r3, #8
 800753c:	2b00      	cmp	r3, #0
 800753e:	d012      	beq.n	8007566 <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	68db      	ldr	r3, [r3, #12]
 8007546:	f003 0310 	and.w	r3, r3, #16
 800754a:	2b00      	cmp	r3, #0
 800754c:	d00b      	beq.n	8007566 <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	2208      	movs	r2, #8
 8007554:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800755a:	2b00      	cmp	r3, #0
 800755c:	d003      	beq.n	8007566 <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f003 0304 	and.w	r3, r3, #4
 8007570:	2b00      	cmp	r3, #0
 8007572:	d012      	beq.n	800759a <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	68db      	ldr	r3, [r3, #12]
 800757a:	f003 0308 	and.w	r3, r3, #8
 800757e:	2b00      	cmp	r3, #0
 8007580:	d00b      	beq.n	800759a <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	2204      	movs	r2, #4
 8007588:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800758e:	2b00      	cmp	r3, #0
 8007590:	d003      	beq.n	800759a <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f003 0302 	and.w	r3, r3, #2
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d039      	beq.n	800761c <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	68db      	ldr	r3, [r3, #12]
 80075ae:	f003 0304 	and.w	r3, r3, #4
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d032      	beq.n	800761c <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	68da      	ldr	r2, [r3, #12]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 80075c4:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80075cc:	b2db      	uxtb	r3, r3
 80075ce:	2b04      	cmp	r3, #4
 80075d0:	d110      	bne.n	80075f4 <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2201      	movs	r2, #1
 80075de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        if(hmdma->XferAbortCallback != NULL)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d05c      	beq.n	80076a4 <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	4798      	blx	r3
        }
        return;
 80075f2:	e057      	b.n	80076a4 <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	2202      	movs	r2, #2
 80075fa:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2200      	movs	r2, #0
 8007600:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2201      	movs	r2, #1
 8007608:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if(hmdma->XferCpltCallback != NULL)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007610:	2b00      	cmp	r3, #0
 8007612:	d003      	beq.n	800761c <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007620:	2b00      	cmp	r3, #0
 8007622:	d040      	beq.n	80076a6 <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2204      	movs	r2, #4
 8007628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	68da      	ldr	r2, [r3, #12]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f022 0201 	bic.w	r2, r2, #1
 800763a:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	3301      	adds	r3, #1
 8007640:	60bb      	str	r3, [r7, #8]
 8007642:	697a      	ldr	r2, [r7, #20]
 8007644:	429a      	cmp	r2, r3
 8007646:	d30d      	bcc.n	8007664 <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	68db      	ldr	r3, [r3, #12]
 800764e:	f003 0301 	and.w	r3, r3, #1
 8007652:	2b00      	cmp	r3, #0
 8007654:	d1f2      	bne.n	800763c <HAL_MDMA_IRQHandler+0x238>
 8007656:	e006      	b.n	8007666 <HAL_MDMA_IRQHandler+0x262>
 8007658:	24000000 	.word	0x24000000
 800765c:	1b4e81b5 	.word	0x1b4e81b5
 8007660:	adffffc0 	.word	0xadffffc0
        break;
 8007664:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2200      	movs	r2, #0
 800766a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	68db      	ldr	r3, [r3, #12]
 8007674:	f003 0301 	and.w	r3, r3, #1
 8007678:	2b00      	cmp	r3, #0
 800767a:	d004      	beq.n	8007686 <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2203      	movs	r2, #3
 8007680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8007684:	e003      	b.n	800768e <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2201      	movs	r2, #1
 800768a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007692:	2b00      	cmp	r3, #0
 8007694:	d007      	beq.n	80076a6 <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	4798      	blx	r3
 800769e:	e002      	b.n	80076a6 <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 80076a0:	bf00      	nop
 80076a2:	e000      	b.n	80076a6 <HAL_MDMA_IRQHandler+0x2a2>
        return;
 80076a4:	bf00      	nop
    }
  }
}
 80076a6:	3718      	adds	r7, #24
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}

080076ac <MDMA_SetConfig>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount: The number of blocks to be transferred
  * @retval HAL status
  */
static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b087      	sub	sp, #28
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	60f8      	str	r0, [r7, #12]
 80076b4:	60b9      	str	r1, [r7, #8]
 80076b6:	607a      	str	r2, [r7, #4]
 80076b8:	603b      	str	r3, [r7, #0]
  uint32_t addressMask;

  /* Configure the MDMA Channel data length */
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	695a      	ldr	r2, [r3, #20]
 80076c0:	4b31      	ldr	r3, [pc, #196]	@ (8007788 <MDMA_SetConfig+0xdc>)
 80076c2:	4013      	ands	r3, r2
 80076c4:	683a      	ldr	r2, [r7, #0]
 80076c6:	f3c2 0110 	ubfx	r1, r2, #0, #17
 80076ca:	68fa      	ldr	r2, [r7, #12]
 80076cc:	6812      	ldr	r2, [r2, #0]
 80076ce:	430b      	orrs	r3, r1
 80076d0:	6153      	str	r3, [r2, #20]

  /* Configure the MDMA block repeat count */
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	695b      	ldr	r3, [r3, #20]
 80076d8:	f3c3 0113 	ubfx	r1, r3, #0, #20
 80076dc:	6a3b      	ldr	r3, [r7, #32]
 80076de:	3b01      	subs	r3, #1
 80076e0:	051a      	lsls	r2, r3, #20
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	430a      	orrs	r2, r1
 80076e8:	615a      	str	r2, [r3, #20]

  /* Clear all interrupt flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	221f      	movs	r2, #31
 80076f0:	605a      	str	r2, [r3, #4]

  /* Configure MDMA Channel destination address */
  hmdma->Instance->CDAR = DstAddress;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	687a      	ldr	r2, [r7, #4]
 80076f8:	61da      	str	r2, [r3, #28]

  /* Configure MDMA Channel Source address */
  hmdma->Instance->CSAR = SrcAddress;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	68ba      	ldr	r2, [r7, #8]
 8007700:	619a      	str	r2, [r3, #24]

  addressMask = SrcAddress & 0xFF000000U;
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8007708:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007710:	d002      	beq.n	8007718 <MDMA_SetConfig+0x6c>
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d108      	bne.n	800772a <MDMA_SetConfig+0x7e>
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8007726:	629a      	str	r2, [r3, #40]	@ 0x28
 8007728:	e007      	b.n	800773a <MDMA_SetConfig+0x8e>
  }
  else
  {
    /*The AXI bus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8007738:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  addressMask = DstAddress & 0xFF000000U;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8007740:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007748:	d002      	beq.n	8007750 <MDMA_SetConfig+0xa4>
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d108      	bne.n	8007762 <MDMA_SetConfig+0xb6>
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800775e:	629a      	str	r2, [r3, #40]	@ 0x28
 8007760:	e007      	b.n	8007772 <MDMA_SetConfig+0xc6>
  }
  else
  {
    /*The AXI bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8007770:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Set the linked list register to the first node of the list */
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800777c:	bf00      	nop
 800777e:	371c      	adds	r7, #28
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr
 8007788:	fffe0000 	.word	0xfffe0000

0800778c <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800778c:	b480      	push	{r7}
 800778e:	b085      	sub	sp, #20
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	68d9      	ldr	r1, [r3, #12]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	691a      	ldr	r2, [r3, #16]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	430a      	orrs	r2, r1
 80077a2:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	695a      	ldr	r2, [r3, #20]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	699b      	ldr	r3, [r3, #24]
 80077ac:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80077b2:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6a1b      	ldr	r3, [r3, #32]
 80077b8:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 80077be:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077c4:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 80077ca:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077d0:	3b01      	subs	r3, #1
 80077d2:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 80077d4:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80077e0:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80077e2:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077ec:	d107      	bne.n	80077fe <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	691a      	ldr	r2, [r3, #16]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 80077fc:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	2200      	movs	r2, #0
 8007804:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800780a:	2b00      	cmp	r3, #0
 800780c:	da11      	bge.n	8007832 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	695a      	ldr	r2, [r3, #20]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800781c:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007822:	425b      	negs	r3, r3
 8007824:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	68fa      	ldr	r2, [r7, #12]
 800782c:	b292      	uxth	r2, r2
 800782e:	621a      	str	r2, [r3, #32]
 8007830:	e006      	b.n	8007840 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007836:	461a      	mov	r2, r3
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	b292      	uxth	r2, r2
 800783e:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007844:	2b00      	cmp	r3, #0
 8007846:	da15      	bge.n	8007874 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	695a      	ldr	r2, [r3, #20]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8007856:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800785c:	425b      	negs	r3, r3
 800785e:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	6a19      	ldr	r1, [r3, #32]
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	041a      	lsls	r2, r3, #16
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	430a      	orrs	r2, r1
 8007870:	621a      	str	r2, [r3, #32]
 8007872:	e009      	b.n	8007888 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	6a19      	ldr	r1, [r3, #32]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800787e:	041a      	lsls	r2, r3, #16
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	430a      	orrs	r2, r1
 8007886:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007890:	d006      	beq.n	80078a0 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	685a      	ldr	r2, [r3, #4]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	b2d2      	uxtb	r2, r2
 800789c:	629a      	str	r2, [r3, #40]	@ 0x28
 800789e:	e003      	b.n	80078a8 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	2200      	movs	r2, #0
 80078a6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	2200      	movs	r2, #0
 80078ae:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80078b0:	bf00      	nop
 80078b2:	3714      	adds	r7, #20
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr

080078bc <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b084      	sub	sp, #16
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80078c4:	4b29      	ldr	r3, [pc, #164]	@ (800796c <HAL_PWREx_ConfigSupply+0xb0>)
 80078c6:	68db      	ldr	r3, [r3, #12]
 80078c8:	f003 0307 	and.w	r3, r3, #7
 80078cc:	2b06      	cmp	r3, #6
 80078ce:	d00a      	beq.n	80078e6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80078d0:	4b26      	ldr	r3, [pc, #152]	@ (800796c <HAL_PWREx_ConfigSupply+0xb0>)
 80078d2:	68db      	ldr	r3, [r3, #12]
 80078d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80078d8:	687a      	ldr	r2, [r7, #4]
 80078da:	429a      	cmp	r2, r3
 80078dc:	d001      	beq.n	80078e2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80078de:	2301      	movs	r3, #1
 80078e0:	e040      	b.n	8007964 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80078e2:	2300      	movs	r3, #0
 80078e4:	e03e      	b.n	8007964 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80078e6:	4b21      	ldr	r3, [pc, #132]	@ (800796c <HAL_PWREx_ConfigSupply+0xb0>)
 80078e8:	68db      	ldr	r3, [r3, #12]
 80078ea:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80078ee:	491f      	ldr	r1, [pc, #124]	@ (800796c <HAL_PWREx_ConfigSupply+0xb0>)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	4313      	orrs	r3, r2
 80078f4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80078f6:	f7fb ff2f 	bl	8003758 <HAL_GetTick>
 80078fa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80078fc:	e009      	b.n	8007912 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80078fe:	f7fb ff2b 	bl	8003758 <HAL_GetTick>
 8007902:	4602      	mov	r2, r0
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	1ad3      	subs	r3, r2, r3
 8007908:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800790c:	d901      	bls.n	8007912 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800790e:	2301      	movs	r3, #1
 8007910:	e028      	b.n	8007964 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007912:	4b16      	ldr	r3, [pc, #88]	@ (800796c <HAL_PWREx_ConfigSupply+0xb0>)
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800791a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800791e:	d1ee      	bne.n	80078fe <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2b1e      	cmp	r3, #30
 8007924:	d008      	beq.n	8007938 <HAL_PWREx_ConfigSupply+0x7c>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2b2e      	cmp	r3, #46	@ 0x2e
 800792a:	d005      	beq.n	8007938 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2b1d      	cmp	r3, #29
 8007930:	d002      	beq.n	8007938 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2b2d      	cmp	r3, #45	@ 0x2d
 8007936:	d114      	bne.n	8007962 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8007938:	f7fb ff0e 	bl	8003758 <HAL_GetTick>
 800793c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800793e:	e009      	b.n	8007954 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007940:	f7fb ff0a 	bl	8003758 <HAL_GetTick>
 8007944:	4602      	mov	r2, r0
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	1ad3      	subs	r3, r2, r3
 800794a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800794e:	d901      	bls.n	8007954 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8007950:	2301      	movs	r3, #1
 8007952:	e007      	b.n	8007964 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8007954:	4b05      	ldr	r3, [pc, #20]	@ (800796c <HAL_PWREx_ConfigSupply+0xb0>)
 8007956:	68db      	ldr	r3, [r3, #12]
 8007958:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800795c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007960:	d1ee      	bne.n	8007940 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007962:	2300      	movs	r3, #0
}
 8007964:	4618      	mov	r0, r3
 8007966:	3710      	adds	r7, #16
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}
 800796c:	58024800 	.word	0x58024800

08007970 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b08c      	sub	sp, #48	@ 0x30
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d102      	bne.n	8007984 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800797e:	2301      	movs	r3, #1
 8007980:	f000 bc48 	b.w	8008214 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f003 0301 	and.w	r3, r3, #1
 800798c:	2b00      	cmp	r3, #0
 800798e:	f000 8088 	beq.w	8007aa2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007992:	4b99      	ldr	r3, [pc, #612]	@ (8007bf8 <HAL_RCC_OscConfig+0x288>)
 8007994:	691b      	ldr	r3, [r3, #16]
 8007996:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800799a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800799c:	4b96      	ldr	r3, [pc, #600]	@ (8007bf8 <HAL_RCC_OscConfig+0x288>)
 800799e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80079a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079a4:	2b10      	cmp	r3, #16
 80079a6:	d007      	beq.n	80079b8 <HAL_RCC_OscConfig+0x48>
 80079a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079aa:	2b18      	cmp	r3, #24
 80079ac:	d111      	bne.n	80079d2 <HAL_RCC_OscConfig+0x62>
 80079ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079b0:	f003 0303 	and.w	r3, r3, #3
 80079b4:	2b02      	cmp	r3, #2
 80079b6:	d10c      	bne.n	80079d2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80079b8:	4b8f      	ldr	r3, [pc, #572]	@ (8007bf8 <HAL_RCC_OscConfig+0x288>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d06d      	beq.n	8007aa0 <HAL_RCC_OscConfig+0x130>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d169      	bne.n	8007aa0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80079cc:	2301      	movs	r3, #1
 80079ce:	f000 bc21 	b.w	8008214 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	685b      	ldr	r3, [r3, #4]
 80079d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079da:	d106      	bne.n	80079ea <HAL_RCC_OscConfig+0x7a>
 80079dc:	4b86      	ldr	r3, [pc, #536]	@ (8007bf8 <HAL_RCC_OscConfig+0x288>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a85      	ldr	r2, [pc, #532]	@ (8007bf8 <HAL_RCC_OscConfig+0x288>)
 80079e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80079e6:	6013      	str	r3, [r2, #0]
 80079e8:	e02e      	b.n	8007a48 <HAL_RCC_OscConfig+0xd8>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d10c      	bne.n	8007a0c <HAL_RCC_OscConfig+0x9c>
 80079f2:	4b81      	ldr	r3, [pc, #516]	@ (8007bf8 <HAL_RCC_OscConfig+0x288>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4a80      	ldr	r2, [pc, #512]	@ (8007bf8 <HAL_RCC_OscConfig+0x288>)
 80079f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80079fc:	6013      	str	r3, [r2, #0]
 80079fe:	4b7e      	ldr	r3, [pc, #504]	@ (8007bf8 <HAL_RCC_OscConfig+0x288>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4a7d      	ldr	r2, [pc, #500]	@ (8007bf8 <HAL_RCC_OscConfig+0x288>)
 8007a04:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007a08:	6013      	str	r3, [r2, #0]
 8007a0a:	e01d      	b.n	8007a48 <HAL_RCC_OscConfig+0xd8>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007a14:	d10c      	bne.n	8007a30 <HAL_RCC_OscConfig+0xc0>
 8007a16:	4b78      	ldr	r3, [pc, #480]	@ (8007bf8 <HAL_RCC_OscConfig+0x288>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a77      	ldr	r2, [pc, #476]	@ (8007bf8 <HAL_RCC_OscConfig+0x288>)
 8007a1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007a20:	6013      	str	r3, [r2, #0]
 8007a22:	4b75      	ldr	r3, [pc, #468]	@ (8007bf8 <HAL_RCC_OscConfig+0x288>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a74      	ldr	r2, [pc, #464]	@ (8007bf8 <HAL_RCC_OscConfig+0x288>)
 8007a28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a2c:	6013      	str	r3, [r2, #0]
 8007a2e:	e00b      	b.n	8007a48 <HAL_RCC_OscConfig+0xd8>
 8007a30:	4b71      	ldr	r3, [pc, #452]	@ (8007bf8 <HAL_RCC_OscConfig+0x288>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a70      	ldr	r2, [pc, #448]	@ (8007bf8 <HAL_RCC_OscConfig+0x288>)
 8007a36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007a3a:	6013      	str	r3, [r2, #0]
 8007a3c:	4b6e      	ldr	r3, [pc, #440]	@ (8007bf8 <HAL_RCC_OscConfig+0x288>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a6d      	ldr	r2, [pc, #436]	@ (8007bf8 <HAL_RCC_OscConfig+0x288>)
 8007a42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007a46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d013      	beq.n	8007a78 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a50:	f7fb fe82 	bl	8003758 <HAL_GetTick>
 8007a54:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007a56:	e008      	b.n	8007a6a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007a58:	f7fb fe7e 	bl	8003758 <HAL_GetTick>
 8007a5c:	4602      	mov	r2, r0
 8007a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a60:	1ad3      	subs	r3, r2, r3
 8007a62:	2b64      	cmp	r3, #100	@ 0x64
 8007a64:	d901      	bls.n	8007a6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007a66:	2303      	movs	r3, #3
 8007a68:	e3d4      	b.n	8008214 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007a6a:	4b63      	ldr	r3, [pc, #396]	@ (8007bf8 <HAL_RCC_OscConfig+0x288>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d0f0      	beq.n	8007a58 <HAL_RCC_OscConfig+0xe8>
 8007a76:	e014      	b.n	8007aa2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a78:	f7fb fe6e 	bl	8003758 <HAL_GetTick>
 8007a7c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007a7e:	e008      	b.n	8007a92 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007a80:	f7fb fe6a 	bl	8003758 <HAL_GetTick>
 8007a84:	4602      	mov	r2, r0
 8007a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a88:	1ad3      	subs	r3, r2, r3
 8007a8a:	2b64      	cmp	r3, #100	@ 0x64
 8007a8c:	d901      	bls.n	8007a92 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007a8e:	2303      	movs	r3, #3
 8007a90:	e3c0      	b.n	8008214 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007a92:	4b59      	ldr	r3, [pc, #356]	@ (8007bf8 <HAL_RCC_OscConfig+0x288>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d1f0      	bne.n	8007a80 <HAL_RCC_OscConfig+0x110>
 8007a9e:	e000      	b.n	8007aa2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007aa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f003 0302 	and.w	r3, r3, #2
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	f000 80ca 	beq.w	8007c44 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007ab0:	4b51      	ldr	r3, [pc, #324]	@ (8007bf8 <HAL_RCC_OscConfig+0x288>)
 8007ab2:	691b      	ldr	r3, [r3, #16]
 8007ab4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007ab8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007aba:	4b4f      	ldr	r3, [pc, #316]	@ (8007bf8 <HAL_RCC_OscConfig+0x288>)
 8007abc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007abe:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007ac0:	6a3b      	ldr	r3, [r7, #32]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d007      	beq.n	8007ad6 <HAL_RCC_OscConfig+0x166>
 8007ac6:	6a3b      	ldr	r3, [r7, #32]
 8007ac8:	2b18      	cmp	r3, #24
 8007aca:	d156      	bne.n	8007b7a <HAL_RCC_OscConfig+0x20a>
 8007acc:	69fb      	ldr	r3, [r7, #28]
 8007ace:	f003 0303 	and.w	r3, r3, #3
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d151      	bne.n	8007b7a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007ad6:	4b48      	ldr	r3, [pc, #288]	@ (8007bf8 <HAL_RCC_OscConfig+0x288>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f003 0304 	and.w	r3, r3, #4
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d005      	beq.n	8007aee <HAL_RCC_OscConfig+0x17e>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	68db      	ldr	r3, [r3, #12]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d101      	bne.n	8007aee <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8007aea:	2301      	movs	r3, #1
 8007aec:	e392      	b.n	8008214 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007aee:	4b42      	ldr	r3, [pc, #264]	@ (8007bf8 <HAL_RCC_OscConfig+0x288>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f023 0219 	bic.w	r2, r3, #25
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	68db      	ldr	r3, [r3, #12]
 8007afa:	493f      	ldr	r1, [pc, #252]	@ (8007bf8 <HAL_RCC_OscConfig+0x288>)
 8007afc:	4313      	orrs	r3, r2
 8007afe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b00:	f7fb fe2a 	bl	8003758 <HAL_GetTick>
 8007b04:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007b06:	e008      	b.n	8007b1a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b08:	f7fb fe26 	bl	8003758 <HAL_GetTick>
 8007b0c:	4602      	mov	r2, r0
 8007b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b10:	1ad3      	subs	r3, r2, r3
 8007b12:	2b02      	cmp	r3, #2
 8007b14:	d901      	bls.n	8007b1a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007b16:	2303      	movs	r3, #3
 8007b18:	e37c      	b.n	8008214 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007b1a:	4b37      	ldr	r3, [pc, #220]	@ (8007bf8 <HAL_RCC_OscConfig+0x288>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f003 0304 	and.w	r3, r3, #4
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d0f0      	beq.n	8007b08 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b26:	f7fb fe47 	bl	80037b8 <HAL_GetREVID>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d817      	bhi.n	8007b64 <HAL_RCC_OscConfig+0x1f4>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	691b      	ldr	r3, [r3, #16]
 8007b38:	2b40      	cmp	r3, #64	@ 0x40
 8007b3a:	d108      	bne.n	8007b4e <HAL_RCC_OscConfig+0x1de>
 8007b3c:	4b2e      	ldr	r3, [pc, #184]	@ (8007bf8 <HAL_RCC_OscConfig+0x288>)
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8007b44:	4a2c      	ldr	r2, [pc, #176]	@ (8007bf8 <HAL_RCC_OscConfig+0x288>)
 8007b46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b4a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007b4c:	e07a      	b.n	8007c44 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b4e:	4b2a      	ldr	r3, [pc, #168]	@ (8007bf8 <HAL_RCC_OscConfig+0x288>)
 8007b50:	685b      	ldr	r3, [r3, #4]
 8007b52:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	691b      	ldr	r3, [r3, #16]
 8007b5a:	031b      	lsls	r3, r3, #12
 8007b5c:	4926      	ldr	r1, [pc, #152]	@ (8007bf8 <HAL_RCC_OscConfig+0x288>)
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007b62:	e06f      	b.n	8007c44 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b64:	4b24      	ldr	r3, [pc, #144]	@ (8007bf8 <HAL_RCC_OscConfig+0x288>)
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	691b      	ldr	r3, [r3, #16]
 8007b70:	061b      	lsls	r3, r3, #24
 8007b72:	4921      	ldr	r1, [pc, #132]	@ (8007bf8 <HAL_RCC_OscConfig+0x288>)
 8007b74:	4313      	orrs	r3, r2
 8007b76:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007b78:	e064      	b.n	8007c44 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	68db      	ldr	r3, [r3, #12]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d047      	beq.n	8007c12 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007b82:	4b1d      	ldr	r3, [pc, #116]	@ (8007bf8 <HAL_RCC_OscConfig+0x288>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f023 0219 	bic.w	r2, r3, #25
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	68db      	ldr	r3, [r3, #12]
 8007b8e:	491a      	ldr	r1, [pc, #104]	@ (8007bf8 <HAL_RCC_OscConfig+0x288>)
 8007b90:	4313      	orrs	r3, r2
 8007b92:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b94:	f7fb fde0 	bl	8003758 <HAL_GetTick>
 8007b98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007b9a:	e008      	b.n	8007bae <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b9c:	f7fb fddc 	bl	8003758 <HAL_GetTick>
 8007ba0:	4602      	mov	r2, r0
 8007ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ba4:	1ad3      	subs	r3, r2, r3
 8007ba6:	2b02      	cmp	r3, #2
 8007ba8:	d901      	bls.n	8007bae <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8007baa:	2303      	movs	r3, #3
 8007bac:	e332      	b.n	8008214 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007bae:	4b12      	ldr	r3, [pc, #72]	@ (8007bf8 <HAL_RCC_OscConfig+0x288>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f003 0304 	and.w	r3, r3, #4
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d0f0      	beq.n	8007b9c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007bba:	f7fb fdfd 	bl	80037b8 <HAL_GetREVID>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d819      	bhi.n	8007bfc <HAL_RCC_OscConfig+0x28c>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	691b      	ldr	r3, [r3, #16]
 8007bcc:	2b40      	cmp	r3, #64	@ 0x40
 8007bce:	d108      	bne.n	8007be2 <HAL_RCC_OscConfig+0x272>
 8007bd0:	4b09      	ldr	r3, [pc, #36]	@ (8007bf8 <HAL_RCC_OscConfig+0x288>)
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8007bd8:	4a07      	ldr	r2, [pc, #28]	@ (8007bf8 <HAL_RCC_OscConfig+0x288>)
 8007bda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007bde:	6053      	str	r3, [r2, #4]
 8007be0:	e030      	b.n	8007c44 <HAL_RCC_OscConfig+0x2d4>
 8007be2:	4b05      	ldr	r3, [pc, #20]	@ (8007bf8 <HAL_RCC_OscConfig+0x288>)
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	691b      	ldr	r3, [r3, #16]
 8007bee:	031b      	lsls	r3, r3, #12
 8007bf0:	4901      	ldr	r1, [pc, #4]	@ (8007bf8 <HAL_RCC_OscConfig+0x288>)
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	604b      	str	r3, [r1, #4]
 8007bf6:	e025      	b.n	8007c44 <HAL_RCC_OscConfig+0x2d4>
 8007bf8:	58024400 	.word	0x58024400
 8007bfc:	4b9a      	ldr	r3, [pc, #616]	@ (8007e68 <HAL_RCC_OscConfig+0x4f8>)
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	691b      	ldr	r3, [r3, #16]
 8007c08:	061b      	lsls	r3, r3, #24
 8007c0a:	4997      	ldr	r1, [pc, #604]	@ (8007e68 <HAL_RCC_OscConfig+0x4f8>)
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	604b      	str	r3, [r1, #4]
 8007c10:	e018      	b.n	8007c44 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007c12:	4b95      	ldr	r3, [pc, #596]	@ (8007e68 <HAL_RCC_OscConfig+0x4f8>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a94      	ldr	r2, [pc, #592]	@ (8007e68 <HAL_RCC_OscConfig+0x4f8>)
 8007c18:	f023 0301 	bic.w	r3, r3, #1
 8007c1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c1e:	f7fb fd9b 	bl	8003758 <HAL_GetTick>
 8007c22:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007c24:	e008      	b.n	8007c38 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007c26:	f7fb fd97 	bl	8003758 <HAL_GetTick>
 8007c2a:	4602      	mov	r2, r0
 8007c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c2e:	1ad3      	subs	r3, r2, r3
 8007c30:	2b02      	cmp	r3, #2
 8007c32:	d901      	bls.n	8007c38 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8007c34:	2303      	movs	r3, #3
 8007c36:	e2ed      	b.n	8008214 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007c38:	4b8b      	ldr	r3, [pc, #556]	@ (8007e68 <HAL_RCC_OscConfig+0x4f8>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f003 0304 	and.w	r3, r3, #4
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d1f0      	bne.n	8007c26 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f003 0310 	and.w	r3, r3, #16
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	f000 80a9 	beq.w	8007da4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007c52:	4b85      	ldr	r3, [pc, #532]	@ (8007e68 <HAL_RCC_OscConfig+0x4f8>)
 8007c54:	691b      	ldr	r3, [r3, #16]
 8007c56:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007c5a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007c5c:	4b82      	ldr	r3, [pc, #520]	@ (8007e68 <HAL_RCC_OscConfig+0x4f8>)
 8007c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c60:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007c62:	69bb      	ldr	r3, [r7, #24]
 8007c64:	2b08      	cmp	r3, #8
 8007c66:	d007      	beq.n	8007c78 <HAL_RCC_OscConfig+0x308>
 8007c68:	69bb      	ldr	r3, [r7, #24]
 8007c6a:	2b18      	cmp	r3, #24
 8007c6c:	d13a      	bne.n	8007ce4 <HAL_RCC_OscConfig+0x374>
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	f003 0303 	and.w	r3, r3, #3
 8007c74:	2b01      	cmp	r3, #1
 8007c76:	d135      	bne.n	8007ce4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007c78:	4b7b      	ldr	r3, [pc, #492]	@ (8007e68 <HAL_RCC_OscConfig+0x4f8>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d005      	beq.n	8007c90 <HAL_RCC_OscConfig+0x320>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	69db      	ldr	r3, [r3, #28]
 8007c88:	2b80      	cmp	r3, #128	@ 0x80
 8007c8a:	d001      	beq.n	8007c90 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	e2c1      	b.n	8008214 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007c90:	f7fb fd92 	bl	80037b8 <HAL_GetREVID>
 8007c94:	4603      	mov	r3, r0
 8007c96:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d817      	bhi.n	8007cce <HAL_RCC_OscConfig+0x35e>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6a1b      	ldr	r3, [r3, #32]
 8007ca2:	2b20      	cmp	r3, #32
 8007ca4:	d108      	bne.n	8007cb8 <HAL_RCC_OscConfig+0x348>
 8007ca6:	4b70      	ldr	r3, [pc, #448]	@ (8007e68 <HAL_RCC_OscConfig+0x4f8>)
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8007cae:	4a6e      	ldr	r2, [pc, #440]	@ (8007e68 <HAL_RCC_OscConfig+0x4f8>)
 8007cb0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007cb4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007cb6:	e075      	b.n	8007da4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007cb8:	4b6b      	ldr	r3, [pc, #428]	@ (8007e68 <HAL_RCC_OscConfig+0x4f8>)
 8007cba:	685b      	ldr	r3, [r3, #4]
 8007cbc:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6a1b      	ldr	r3, [r3, #32]
 8007cc4:	069b      	lsls	r3, r3, #26
 8007cc6:	4968      	ldr	r1, [pc, #416]	@ (8007e68 <HAL_RCC_OscConfig+0x4f8>)
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007ccc:	e06a      	b.n	8007da4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007cce:	4b66      	ldr	r3, [pc, #408]	@ (8007e68 <HAL_RCC_OscConfig+0x4f8>)
 8007cd0:	68db      	ldr	r3, [r3, #12]
 8007cd2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6a1b      	ldr	r3, [r3, #32]
 8007cda:	061b      	lsls	r3, r3, #24
 8007cdc:	4962      	ldr	r1, [pc, #392]	@ (8007e68 <HAL_RCC_OscConfig+0x4f8>)
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007ce2:	e05f      	b.n	8007da4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	69db      	ldr	r3, [r3, #28]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d042      	beq.n	8007d72 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007cec:	4b5e      	ldr	r3, [pc, #376]	@ (8007e68 <HAL_RCC_OscConfig+0x4f8>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a5d      	ldr	r2, [pc, #372]	@ (8007e68 <HAL_RCC_OscConfig+0x4f8>)
 8007cf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007cf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cf8:	f7fb fd2e 	bl	8003758 <HAL_GetTick>
 8007cfc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007cfe:	e008      	b.n	8007d12 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007d00:	f7fb fd2a 	bl	8003758 <HAL_GetTick>
 8007d04:	4602      	mov	r2, r0
 8007d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d08:	1ad3      	subs	r3, r2, r3
 8007d0a:	2b02      	cmp	r3, #2
 8007d0c:	d901      	bls.n	8007d12 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007d0e:	2303      	movs	r3, #3
 8007d10:	e280      	b.n	8008214 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007d12:	4b55      	ldr	r3, [pc, #340]	@ (8007e68 <HAL_RCC_OscConfig+0x4f8>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d0f0      	beq.n	8007d00 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007d1e:	f7fb fd4b 	bl	80037b8 <HAL_GetREVID>
 8007d22:	4603      	mov	r3, r0
 8007d24:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d817      	bhi.n	8007d5c <HAL_RCC_OscConfig+0x3ec>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6a1b      	ldr	r3, [r3, #32]
 8007d30:	2b20      	cmp	r3, #32
 8007d32:	d108      	bne.n	8007d46 <HAL_RCC_OscConfig+0x3d6>
 8007d34:	4b4c      	ldr	r3, [pc, #304]	@ (8007e68 <HAL_RCC_OscConfig+0x4f8>)
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8007d3c:	4a4a      	ldr	r2, [pc, #296]	@ (8007e68 <HAL_RCC_OscConfig+0x4f8>)
 8007d3e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007d42:	6053      	str	r3, [r2, #4]
 8007d44:	e02e      	b.n	8007da4 <HAL_RCC_OscConfig+0x434>
 8007d46:	4b48      	ldr	r3, [pc, #288]	@ (8007e68 <HAL_RCC_OscConfig+0x4f8>)
 8007d48:	685b      	ldr	r3, [r3, #4]
 8007d4a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6a1b      	ldr	r3, [r3, #32]
 8007d52:	069b      	lsls	r3, r3, #26
 8007d54:	4944      	ldr	r1, [pc, #272]	@ (8007e68 <HAL_RCC_OscConfig+0x4f8>)
 8007d56:	4313      	orrs	r3, r2
 8007d58:	604b      	str	r3, [r1, #4]
 8007d5a:	e023      	b.n	8007da4 <HAL_RCC_OscConfig+0x434>
 8007d5c:	4b42      	ldr	r3, [pc, #264]	@ (8007e68 <HAL_RCC_OscConfig+0x4f8>)
 8007d5e:	68db      	ldr	r3, [r3, #12]
 8007d60:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6a1b      	ldr	r3, [r3, #32]
 8007d68:	061b      	lsls	r3, r3, #24
 8007d6a:	493f      	ldr	r1, [pc, #252]	@ (8007e68 <HAL_RCC_OscConfig+0x4f8>)
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	60cb      	str	r3, [r1, #12]
 8007d70:	e018      	b.n	8007da4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007d72:	4b3d      	ldr	r3, [pc, #244]	@ (8007e68 <HAL_RCC_OscConfig+0x4f8>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a3c      	ldr	r2, [pc, #240]	@ (8007e68 <HAL_RCC_OscConfig+0x4f8>)
 8007d78:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007d7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d7e:	f7fb fceb 	bl	8003758 <HAL_GetTick>
 8007d82:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007d84:	e008      	b.n	8007d98 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007d86:	f7fb fce7 	bl	8003758 <HAL_GetTick>
 8007d8a:	4602      	mov	r2, r0
 8007d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d8e:	1ad3      	subs	r3, r2, r3
 8007d90:	2b02      	cmp	r3, #2
 8007d92:	d901      	bls.n	8007d98 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007d94:	2303      	movs	r3, #3
 8007d96:	e23d      	b.n	8008214 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007d98:	4b33      	ldr	r3, [pc, #204]	@ (8007e68 <HAL_RCC_OscConfig+0x4f8>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d1f0      	bne.n	8007d86 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f003 0308 	and.w	r3, r3, #8
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d036      	beq.n	8007e1e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	695b      	ldr	r3, [r3, #20]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d019      	beq.n	8007dec <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007db8:	4b2b      	ldr	r3, [pc, #172]	@ (8007e68 <HAL_RCC_OscConfig+0x4f8>)
 8007dba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007dbc:	4a2a      	ldr	r2, [pc, #168]	@ (8007e68 <HAL_RCC_OscConfig+0x4f8>)
 8007dbe:	f043 0301 	orr.w	r3, r3, #1
 8007dc2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007dc4:	f7fb fcc8 	bl	8003758 <HAL_GetTick>
 8007dc8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007dca:	e008      	b.n	8007dde <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007dcc:	f7fb fcc4 	bl	8003758 <HAL_GetTick>
 8007dd0:	4602      	mov	r2, r0
 8007dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dd4:	1ad3      	subs	r3, r2, r3
 8007dd6:	2b02      	cmp	r3, #2
 8007dd8:	d901      	bls.n	8007dde <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8007dda:	2303      	movs	r3, #3
 8007ddc:	e21a      	b.n	8008214 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007dde:	4b22      	ldr	r3, [pc, #136]	@ (8007e68 <HAL_RCC_OscConfig+0x4f8>)
 8007de0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007de2:	f003 0302 	and.w	r3, r3, #2
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d0f0      	beq.n	8007dcc <HAL_RCC_OscConfig+0x45c>
 8007dea:	e018      	b.n	8007e1e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007dec:	4b1e      	ldr	r3, [pc, #120]	@ (8007e68 <HAL_RCC_OscConfig+0x4f8>)
 8007dee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007df0:	4a1d      	ldr	r2, [pc, #116]	@ (8007e68 <HAL_RCC_OscConfig+0x4f8>)
 8007df2:	f023 0301 	bic.w	r3, r3, #1
 8007df6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007df8:	f7fb fcae 	bl	8003758 <HAL_GetTick>
 8007dfc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007dfe:	e008      	b.n	8007e12 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007e00:	f7fb fcaa 	bl	8003758 <HAL_GetTick>
 8007e04:	4602      	mov	r2, r0
 8007e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e08:	1ad3      	subs	r3, r2, r3
 8007e0a:	2b02      	cmp	r3, #2
 8007e0c:	d901      	bls.n	8007e12 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007e0e:	2303      	movs	r3, #3
 8007e10:	e200      	b.n	8008214 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007e12:	4b15      	ldr	r3, [pc, #84]	@ (8007e68 <HAL_RCC_OscConfig+0x4f8>)
 8007e14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e16:	f003 0302 	and.w	r3, r3, #2
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d1f0      	bne.n	8007e00 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f003 0320 	and.w	r3, r3, #32
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d039      	beq.n	8007e9e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	699b      	ldr	r3, [r3, #24]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d01c      	beq.n	8007e6c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007e32:	4b0d      	ldr	r3, [pc, #52]	@ (8007e68 <HAL_RCC_OscConfig+0x4f8>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a0c      	ldr	r2, [pc, #48]	@ (8007e68 <HAL_RCC_OscConfig+0x4f8>)
 8007e38:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007e3c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007e3e:	f7fb fc8b 	bl	8003758 <HAL_GetTick>
 8007e42:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007e44:	e008      	b.n	8007e58 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007e46:	f7fb fc87 	bl	8003758 <HAL_GetTick>
 8007e4a:	4602      	mov	r2, r0
 8007e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e4e:	1ad3      	subs	r3, r2, r3
 8007e50:	2b02      	cmp	r3, #2
 8007e52:	d901      	bls.n	8007e58 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8007e54:	2303      	movs	r3, #3
 8007e56:	e1dd      	b.n	8008214 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007e58:	4b03      	ldr	r3, [pc, #12]	@ (8007e68 <HAL_RCC_OscConfig+0x4f8>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d0f0      	beq.n	8007e46 <HAL_RCC_OscConfig+0x4d6>
 8007e64:	e01b      	b.n	8007e9e <HAL_RCC_OscConfig+0x52e>
 8007e66:	bf00      	nop
 8007e68:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007e6c:	4b9b      	ldr	r3, [pc, #620]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a9a      	ldr	r2, [pc, #616]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 8007e72:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007e76:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007e78:	f7fb fc6e 	bl	8003758 <HAL_GetTick>
 8007e7c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007e7e:	e008      	b.n	8007e92 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007e80:	f7fb fc6a 	bl	8003758 <HAL_GetTick>
 8007e84:	4602      	mov	r2, r0
 8007e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e88:	1ad3      	subs	r3, r2, r3
 8007e8a:	2b02      	cmp	r3, #2
 8007e8c:	d901      	bls.n	8007e92 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8007e8e:	2303      	movs	r3, #3
 8007e90:	e1c0      	b.n	8008214 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007e92:	4b92      	ldr	r3, [pc, #584]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d1f0      	bne.n	8007e80 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f003 0304 	and.w	r3, r3, #4
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	f000 8081 	beq.w	8007fae <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007eac:	4b8c      	ldr	r3, [pc, #560]	@ (80080e0 <HAL_RCC_OscConfig+0x770>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a8b      	ldr	r2, [pc, #556]	@ (80080e0 <HAL_RCC_OscConfig+0x770>)
 8007eb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007eb6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007eb8:	f7fb fc4e 	bl	8003758 <HAL_GetTick>
 8007ebc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007ebe:	e008      	b.n	8007ed2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ec0:	f7fb fc4a 	bl	8003758 <HAL_GetTick>
 8007ec4:	4602      	mov	r2, r0
 8007ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ec8:	1ad3      	subs	r3, r2, r3
 8007eca:	2b64      	cmp	r3, #100	@ 0x64
 8007ecc:	d901      	bls.n	8007ed2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007ece:	2303      	movs	r3, #3
 8007ed0:	e1a0      	b.n	8008214 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007ed2:	4b83      	ldr	r3, [pc, #524]	@ (80080e0 <HAL_RCC_OscConfig+0x770>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d0f0      	beq.n	8007ec0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	689b      	ldr	r3, [r3, #8]
 8007ee2:	2b01      	cmp	r3, #1
 8007ee4:	d106      	bne.n	8007ef4 <HAL_RCC_OscConfig+0x584>
 8007ee6:	4b7d      	ldr	r3, [pc, #500]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 8007ee8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007eea:	4a7c      	ldr	r2, [pc, #496]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 8007eec:	f043 0301 	orr.w	r3, r3, #1
 8007ef0:	6713      	str	r3, [r2, #112]	@ 0x70
 8007ef2:	e02d      	b.n	8007f50 <HAL_RCC_OscConfig+0x5e0>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	689b      	ldr	r3, [r3, #8]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d10c      	bne.n	8007f16 <HAL_RCC_OscConfig+0x5a6>
 8007efc:	4b77      	ldr	r3, [pc, #476]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 8007efe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f00:	4a76      	ldr	r2, [pc, #472]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 8007f02:	f023 0301 	bic.w	r3, r3, #1
 8007f06:	6713      	str	r3, [r2, #112]	@ 0x70
 8007f08:	4b74      	ldr	r3, [pc, #464]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 8007f0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f0c:	4a73      	ldr	r2, [pc, #460]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 8007f0e:	f023 0304 	bic.w	r3, r3, #4
 8007f12:	6713      	str	r3, [r2, #112]	@ 0x70
 8007f14:	e01c      	b.n	8007f50 <HAL_RCC_OscConfig+0x5e0>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	689b      	ldr	r3, [r3, #8]
 8007f1a:	2b05      	cmp	r3, #5
 8007f1c:	d10c      	bne.n	8007f38 <HAL_RCC_OscConfig+0x5c8>
 8007f1e:	4b6f      	ldr	r3, [pc, #444]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 8007f20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f22:	4a6e      	ldr	r2, [pc, #440]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 8007f24:	f043 0304 	orr.w	r3, r3, #4
 8007f28:	6713      	str	r3, [r2, #112]	@ 0x70
 8007f2a:	4b6c      	ldr	r3, [pc, #432]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 8007f2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f2e:	4a6b      	ldr	r2, [pc, #428]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 8007f30:	f043 0301 	orr.w	r3, r3, #1
 8007f34:	6713      	str	r3, [r2, #112]	@ 0x70
 8007f36:	e00b      	b.n	8007f50 <HAL_RCC_OscConfig+0x5e0>
 8007f38:	4b68      	ldr	r3, [pc, #416]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 8007f3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f3c:	4a67      	ldr	r2, [pc, #412]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 8007f3e:	f023 0301 	bic.w	r3, r3, #1
 8007f42:	6713      	str	r3, [r2, #112]	@ 0x70
 8007f44:	4b65      	ldr	r3, [pc, #404]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 8007f46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f48:	4a64      	ldr	r2, [pc, #400]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 8007f4a:	f023 0304 	bic.w	r3, r3, #4
 8007f4e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	689b      	ldr	r3, [r3, #8]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d015      	beq.n	8007f84 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f58:	f7fb fbfe 	bl	8003758 <HAL_GetTick>
 8007f5c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007f5e:	e00a      	b.n	8007f76 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f60:	f7fb fbfa 	bl	8003758 <HAL_GetTick>
 8007f64:	4602      	mov	r2, r0
 8007f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f68:	1ad3      	subs	r3, r2, r3
 8007f6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d901      	bls.n	8007f76 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8007f72:	2303      	movs	r3, #3
 8007f74:	e14e      	b.n	8008214 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007f76:	4b59      	ldr	r3, [pc, #356]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 8007f78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f7a:	f003 0302 	and.w	r3, r3, #2
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d0ee      	beq.n	8007f60 <HAL_RCC_OscConfig+0x5f0>
 8007f82:	e014      	b.n	8007fae <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f84:	f7fb fbe8 	bl	8003758 <HAL_GetTick>
 8007f88:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007f8a:	e00a      	b.n	8007fa2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f8c:	f7fb fbe4 	bl	8003758 <HAL_GetTick>
 8007f90:	4602      	mov	r2, r0
 8007f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f94:	1ad3      	subs	r3, r2, r3
 8007f96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d901      	bls.n	8007fa2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8007f9e:	2303      	movs	r3, #3
 8007fa0:	e138      	b.n	8008214 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007fa2:	4b4e      	ldr	r3, [pc, #312]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 8007fa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fa6:	f003 0302 	and.w	r3, r3, #2
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d1ee      	bne.n	8007f8c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	f000 812d 	beq.w	8008212 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007fb8:	4b48      	ldr	r3, [pc, #288]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 8007fba:	691b      	ldr	r3, [r3, #16]
 8007fbc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007fc0:	2b18      	cmp	r3, #24
 8007fc2:	f000 80bd 	beq.w	8008140 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fca:	2b02      	cmp	r3, #2
 8007fcc:	f040 809e 	bne.w	800810c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007fd0:	4b42      	ldr	r3, [pc, #264]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4a41      	ldr	r2, [pc, #260]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 8007fd6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007fda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fdc:	f7fb fbbc 	bl	8003758 <HAL_GetTick>
 8007fe0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007fe2:	e008      	b.n	8007ff6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007fe4:	f7fb fbb8 	bl	8003758 <HAL_GetTick>
 8007fe8:	4602      	mov	r2, r0
 8007fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fec:	1ad3      	subs	r3, r2, r3
 8007fee:	2b02      	cmp	r3, #2
 8007ff0:	d901      	bls.n	8007ff6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8007ff2:	2303      	movs	r3, #3
 8007ff4:	e10e      	b.n	8008214 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007ff6:	4b39      	ldr	r3, [pc, #228]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d1f0      	bne.n	8007fe4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008002:	4b36      	ldr	r3, [pc, #216]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 8008004:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008006:	4b37      	ldr	r3, [pc, #220]	@ (80080e4 <HAL_RCC_OscConfig+0x774>)
 8008008:	4013      	ands	r3, r2
 800800a:	687a      	ldr	r2, [r7, #4]
 800800c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800800e:	687a      	ldr	r2, [r7, #4]
 8008010:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008012:	0112      	lsls	r2, r2, #4
 8008014:	430a      	orrs	r2, r1
 8008016:	4931      	ldr	r1, [pc, #196]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 8008018:	4313      	orrs	r3, r2
 800801a:	628b      	str	r3, [r1, #40]	@ 0x28
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008020:	3b01      	subs	r3, #1
 8008022:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800802a:	3b01      	subs	r3, #1
 800802c:	025b      	lsls	r3, r3, #9
 800802e:	b29b      	uxth	r3, r3
 8008030:	431a      	orrs	r2, r3
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008036:	3b01      	subs	r3, #1
 8008038:	041b      	lsls	r3, r3, #16
 800803a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800803e:	431a      	orrs	r2, r3
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008044:	3b01      	subs	r3, #1
 8008046:	061b      	lsls	r3, r3, #24
 8008048:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800804c:	4923      	ldr	r1, [pc, #140]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 800804e:	4313      	orrs	r3, r2
 8008050:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008052:	4b22      	ldr	r3, [pc, #136]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 8008054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008056:	4a21      	ldr	r2, [pc, #132]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 8008058:	f023 0301 	bic.w	r3, r3, #1
 800805c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800805e:	4b1f      	ldr	r3, [pc, #124]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 8008060:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008062:	4b21      	ldr	r3, [pc, #132]	@ (80080e8 <HAL_RCC_OscConfig+0x778>)
 8008064:	4013      	ands	r3, r2
 8008066:	687a      	ldr	r2, [r7, #4]
 8008068:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800806a:	00d2      	lsls	r2, r2, #3
 800806c:	491b      	ldr	r1, [pc, #108]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 800806e:	4313      	orrs	r3, r2
 8008070:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008072:	4b1a      	ldr	r3, [pc, #104]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 8008074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008076:	f023 020c 	bic.w	r2, r3, #12
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800807e:	4917      	ldr	r1, [pc, #92]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 8008080:	4313      	orrs	r3, r2
 8008082:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008084:	4b15      	ldr	r3, [pc, #84]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 8008086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008088:	f023 0202 	bic.w	r2, r3, #2
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008090:	4912      	ldr	r1, [pc, #72]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 8008092:	4313      	orrs	r3, r2
 8008094:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008096:	4b11      	ldr	r3, [pc, #68]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 8008098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800809a:	4a10      	ldr	r2, [pc, #64]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 800809c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80080a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080a2:	4b0e      	ldr	r3, [pc, #56]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 80080a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080a6:	4a0d      	ldr	r2, [pc, #52]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 80080a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80080ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80080ae:	4b0b      	ldr	r3, [pc, #44]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 80080b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080b2:	4a0a      	ldr	r2, [pc, #40]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 80080b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80080b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80080ba:	4b08      	ldr	r3, [pc, #32]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 80080bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080be:	4a07      	ldr	r2, [pc, #28]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 80080c0:	f043 0301 	orr.w	r3, r3, #1
 80080c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80080c6:	4b05      	ldr	r3, [pc, #20]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4a04      	ldr	r2, [pc, #16]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 80080cc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80080d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080d2:	f7fb fb41 	bl	8003758 <HAL_GetTick>
 80080d6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80080d8:	e011      	b.n	80080fe <HAL_RCC_OscConfig+0x78e>
 80080da:	bf00      	nop
 80080dc:	58024400 	.word	0x58024400
 80080e0:	58024800 	.word	0x58024800
 80080e4:	fffffc0c 	.word	0xfffffc0c
 80080e8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80080ec:	f7fb fb34 	bl	8003758 <HAL_GetTick>
 80080f0:	4602      	mov	r2, r0
 80080f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080f4:	1ad3      	subs	r3, r2, r3
 80080f6:	2b02      	cmp	r3, #2
 80080f8:	d901      	bls.n	80080fe <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80080fa:	2303      	movs	r3, #3
 80080fc:	e08a      	b.n	8008214 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80080fe:	4b47      	ldr	r3, [pc, #284]	@ (800821c <HAL_RCC_OscConfig+0x8ac>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008106:	2b00      	cmp	r3, #0
 8008108:	d0f0      	beq.n	80080ec <HAL_RCC_OscConfig+0x77c>
 800810a:	e082      	b.n	8008212 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800810c:	4b43      	ldr	r3, [pc, #268]	@ (800821c <HAL_RCC_OscConfig+0x8ac>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4a42      	ldr	r2, [pc, #264]	@ (800821c <HAL_RCC_OscConfig+0x8ac>)
 8008112:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008116:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008118:	f7fb fb1e 	bl	8003758 <HAL_GetTick>
 800811c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800811e:	e008      	b.n	8008132 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008120:	f7fb fb1a 	bl	8003758 <HAL_GetTick>
 8008124:	4602      	mov	r2, r0
 8008126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008128:	1ad3      	subs	r3, r2, r3
 800812a:	2b02      	cmp	r3, #2
 800812c:	d901      	bls.n	8008132 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800812e:	2303      	movs	r3, #3
 8008130:	e070      	b.n	8008214 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008132:	4b3a      	ldr	r3, [pc, #232]	@ (800821c <HAL_RCC_OscConfig+0x8ac>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800813a:	2b00      	cmp	r3, #0
 800813c:	d1f0      	bne.n	8008120 <HAL_RCC_OscConfig+0x7b0>
 800813e:	e068      	b.n	8008212 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008140:	4b36      	ldr	r3, [pc, #216]	@ (800821c <HAL_RCC_OscConfig+0x8ac>)
 8008142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008144:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008146:	4b35      	ldr	r3, [pc, #212]	@ (800821c <HAL_RCC_OscConfig+0x8ac>)
 8008148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800814a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008150:	2b01      	cmp	r3, #1
 8008152:	d031      	beq.n	80081b8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008154:	693b      	ldr	r3, [r7, #16]
 8008156:	f003 0203 	and.w	r2, r3, #3
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800815e:	429a      	cmp	r2, r3
 8008160:	d12a      	bne.n	80081b8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	091b      	lsrs	r3, r3, #4
 8008166:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800816e:	429a      	cmp	r2, r3
 8008170:	d122      	bne.n	80081b8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800817c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800817e:	429a      	cmp	r2, r3
 8008180:	d11a      	bne.n	80081b8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	0a5b      	lsrs	r3, r3, #9
 8008186:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800818e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008190:	429a      	cmp	r2, r3
 8008192:	d111      	bne.n	80081b8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	0c1b      	lsrs	r3, r3, #16
 8008198:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081a0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80081a2:	429a      	cmp	r2, r3
 80081a4:	d108      	bne.n	80081b8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	0e1b      	lsrs	r3, r3, #24
 80081aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081b2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80081b4:	429a      	cmp	r2, r3
 80081b6:	d001      	beq.n	80081bc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80081b8:	2301      	movs	r3, #1
 80081ba:	e02b      	b.n	8008214 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80081bc:	4b17      	ldr	r3, [pc, #92]	@ (800821c <HAL_RCC_OscConfig+0x8ac>)
 80081be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081c0:	08db      	lsrs	r3, r3, #3
 80081c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80081c6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80081cc:	693a      	ldr	r2, [r7, #16]
 80081ce:	429a      	cmp	r2, r3
 80081d0:	d01f      	beq.n	8008212 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80081d2:	4b12      	ldr	r3, [pc, #72]	@ (800821c <HAL_RCC_OscConfig+0x8ac>)
 80081d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081d6:	4a11      	ldr	r2, [pc, #68]	@ (800821c <HAL_RCC_OscConfig+0x8ac>)
 80081d8:	f023 0301 	bic.w	r3, r3, #1
 80081dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80081de:	f7fb fabb 	bl	8003758 <HAL_GetTick>
 80081e2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80081e4:	bf00      	nop
 80081e6:	f7fb fab7 	bl	8003758 <HAL_GetTick>
 80081ea:	4602      	mov	r2, r0
 80081ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d0f9      	beq.n	80081e6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80081f2:	4b0a      	ldr	r3, [pc, #40]	@ (800821c <HAL_RCC_OscConfig+0x8ac>)
 80081f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80081f6:	4b0a      	ldr	r3, [pc, #40]	@ (8008220 <HAL_RCC_OscConfig+0x8b0>)
 80081f8:	4013      	ands	r3, r2
 80081fa:	687a      	ldr	r2, [r7, #4]
 80081fc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80081fe:	00d2      	lsls	r2, r2, #3
 8008200:	4906      	ldr	r1, [pc, #24]	@ (800821c <HAL_RCC_OscConfig+0x8ac>)
 8008202:	4313      	orrs	r3, r2
 8008204:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008206:	4b05      	ldr	r3, [pc, #20]	@ (800821c <HAL_RCC_OscConfig+0x8ac>)
 8008208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800820a:	4a04      	ldr	r2, [pc, #16]	@ (800821c <HAL_RCC_OscConfig+0x8ac>)
 800820c:	f043 0301 	orr.w	r3, r3, #1
 8008210:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008212:	2300      	movs	r3, #0
}
 8008214:	4618      	mov	r0, r3
 8008216:	3730      	adds	r7, #48	@ 0x30
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}
 800821c:	58024400 	.word	0x58024400
 8008220:	ffff0007 	.word	0xffff0007

08008224 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b086      	sub	sp, #24
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d101      	bne.n	8008238 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008234:	2301      	movs	r3, #1
 8008236:	e19c      	b.n	8008572 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008238:	4b8a      	ldr	r3, [pc, #552]	@ (8008464 <HAL_RCC_ClockConfig+0x240>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f003 030f 	and.w	r3, r3, #15
 8008240:	683a      	ldr	r2, [r7, #0]
 8008242:	429a      	cmp	r2, r3
 8008244:	d910      	bls.n	8008268 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008246:	4b87      	ldr	r3, [pc, #540]	@ (8008464 <HAL_RCC_ClockConfig+0x240>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f023 020f 	bic.w	r2, r3, #15
 800824e:	4985      	ldr	r1, [pc, #532]	@ (8008464 <HAL_RCC_ClockConfig+0x240>)
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	4313      	orrs	r3, r2
 8008254:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008256:	4b83      	ldr	r3, [pc, #524]	@ (8008464 <HAL_RCC_ClockConfig+0x240>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f003 030f 	and.w	r3, r3, #15
 800825e:	683a      	ldr	r2, [r7, #0]
 8008260:	429a      	cmp	r2, r3
 8008262:	d001      	beq.n	8008268 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008264:	2301      	movs	r3, #1
 8008266:	e184      	b.n	8008572 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f003 0304 	and.w	r3, r3, #4
 8008270:	2b00      	cmp	r3, #0
 8008272:	d010      	beq.n	8008296 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	691a      	ldr	r2, [r3, #16]
 8008278:	4b7b      	ldr	r3, [pc, #492]	@ (8008468 <HAL_RCC_ClockConfig+0x244>)
 800827a:	699b      	ldr	r3, [r3, #24]
 800827c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008280:	429a      	cmp	r2, r3
 8008282:	d908      	bls.n	8008296 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008284:	4b78      	ldr	r3, [pc, #480]	@ (8008468 <HAL_RCC_ClockConfig+0x244>)
 8008286:	699b      	ldr	r3, [r3, #24]
 8008288:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	691b      	ldr	r3, [r3, #16]
 8008290:	4975      	ldr	r1, [pc, #468]	@ (8008468 <HAL_RCC_ClockConfig+0x244>)
 8008292:	4313      	orrs	r3, r2
 8008294:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f003 0308 	and.w	r3, r3, #8
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d010      	beq.n	80082c4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	695a      	ldr	r2, [r3, #20]
 80082a6:	4b70      	ldr	r3, [pc, #448]	@ (8008468 <HAL_RCC_ClockConfig+0x244>)
 80082a8:	69db      	ldr	r3, [r3, #28]
 80082aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80082ae:	429a      	cmp	r2, r3
 80082b0:	d908      	bls.n	80082c4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80082b2:	4b6d      	ldr	r3, [pc, #436]	@ (8008468 <HAL_RCC_ClockConfig+0x244>)
 80082b4:	69db      	ldr	r3, [r3, #28]
 80082b6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	695b      	ldr	r3, [r3, #20]
 80082be:	496a      	ldr	r1, [pc, #424]	@ (8008468 <HAL_RCC_ClockConfig+0x244>)
 80082c0:	4313      	orrs	r3, r2
 80082c2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f003 0310 	and.w	r3, r3, #16
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d010      	beq.n	80082f2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	699a      	ldr	r2, [r3, #24]
 80082d4:	4b64      	ldr	r3, [pc, #400]	@ (8008468 <HAL_RCC_ClockConfig+0x244>)
 80082d6:	69db      	ldr	r3, [r3, #28]
 80082d8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80082dc:	429a      	cmp	r2, r3
 80082de:	d908      	bls.n	80082f2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80082e0:	4b61      	ldr	r3, [pc, #388]	@ (8008468 <HAL_RCC_ClockConfig+0x244>)
 80082e2:	69db      	ldr	r3, [r3, #28]
 80082e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	699b      	ldr	r3, [r3, #24]
 80082ec:	495e      	ldr	r1, [pc, #376]	@ (8008468 <HAL_RCC_ClockConfig+0x244>)
 80082ee:	4313      	orrs	r3, r2
 80082f0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f003 0320 	and.w	r3, r3, #32
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d010      	beq.n	8008320 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	69da      	ldr	r2, [r3, #28]
 8008302:	4b59      	ldr	r3, [pc, #356]	@ (8008468 <HAL_RCC_ClockConfig+0x244>)
 8008304:	6a1b      	ldr	r3, [r3, #32]
 8008306:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800830a:	429a      	cmp	r2, r3
 800830c:	d908      	bls.n	8008320 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800830e:	4b56      	ldr	r3, [pc, #344]	@ (8008468 <HAL_RCC_ClockConfig+0x244>)
 8008310:	6a1b      	ldr	r3, [r3, #32]
 8008312:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	69db      	ldr	r3, [r3, #28]
 800831a:	4953      	ldr	r1, [pc, #332]	@ (8008468 <HAL_RCC_ClockConfig+0x244>)
 800831c:	4313      	orrs	r3, r2
 800831e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f003 0302 	and.w	r3, r3, #2
 8008328:	2b00      	cmp	r3, #0
 800832a:	d010      	beq.n	800834e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	68da      	ldr	r2, [r3, #12]
 8008330:	4b4d      	ldr	r3, [pc, #308]	@ (8008468 <HAL_RCC_ClockConfig+0x244>)
 8008332:	699b      	ldr	r3, [r3, #24]
 8008334:	f003 030f 	and.w	r3, r3, #15
 8008338:	429a      	cmp	r2, r3
 800833a:	d908      	bls.n	800834e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800833c:	4b4a      	ldr	r3, [pc, #296]	@ (8008468 <HAL_RCC_ClockConfig+0x244>)
 800833e:	699b      	ldr	r3, [r3, #24]
 8008340:	f023 020f 	bic.w	r2, r3, #15
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	68db      	ldr	r3, [r3, #12]
 8008348:	4947      	ldr	r1, [pc, #284]	@ (8008468 <HAL_RCC_ClockConfig+0x244>)
 800834a:	4313      	orrs	r3, r2
 800834c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f003 0301 	and.w	r3, r3, #1
 8008356:	2b00      	cmp	r3, #0
 8008358:	d055      	beq.n	8008406 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800835a:	4b43      	ldr	r3, [pc, #268]	@ (8008468 <HAL_RCC_ClockConfig+0x244>)
 800835c:	699b      	ldr	r3, [r3, #24]
 800835e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	689b      	ldr	r3, [r3, #8]
 8008366:	4940      	ldr	r1, [pc, #256]	@ (8008468 <HAL_RCC_ClockConfig+0x244>)
 8008368:	4313      	orrs	r3, r2
 800836a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	2b02      	cmp	r3, #2
 8008372:	d107      	bne.n	8008384 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008374:	4b3c      	ldr	r3, [pc, #240]	@ (8008468 <HAL_RCC_ClockConfig+0x244>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800837c:	2b00      	cmp	r3, #0
 800837e:	d121      	bne.n	80083c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008380:	2301      	movs	r3, #1
 8008382:	e0f6      	b.n	8008572 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	685b      	ldr	r3, [r3, #4]
 8008388:	2b03      	cmp	r3, #3
 800838a:	d107      	bne.n	800839c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800838c:	4b36      	ldr	r3, [pc, #216]	@ (8008468 <HAL_RCC_ClockConfig+0x244>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008394:	2b00      	cmp	r3, #0
 8008396:	d115      	bne.n	80083c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008398:	2301      	movs	r3, #1
 800839a:	e0ea      	b.n	8008572 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	685b      	ldr	r3, [r3, #4]
 80083a0:	2b01      	cmp	r3, #1
 80083a2:	d107      	bne.n	80083b4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80083a4:	4b30      	ldr	r3, [pc, #192]	@ (8008468 <HAL_RCC_ClockConfig+0x244>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d109      	bne.n	80083c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80083b0:	2301      	movs	r3, #1
 80083b2:	e0de      	b.n	8008572 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80083b4:	4b2c      	ldr	r3, [pc, #176]	@ (8008468 <HAL_RCC_ClockConfig+0x244>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f003 0304 	and.w	r3, r3, #4
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d101      	bne.n	80083c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80083c0:	2301      	movs	r3, #1
 80083c2:	e0d6      	b.n	8008572 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80083c4:	4b28      	ldr	r3, [pc, #160]	@ (8008468 <HAL_RCC_ClockConfig+0x244>)
 80083c6:	691b      	ldr	r3, [r3, #16]
 80083c8:	f023 0207 	bic.w	r2, r3, #7
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	685b      	ldr	r3, [r3, #4]
 80083d0:	4925      	ldr	r1, [pc, #148]	@ (8008468 <HAL_RCC_ClockConfig+0x244>)
 80083d2:	4313      	orrs	r3, r2
 80083d4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083d6:	f7fb f9bf 	bl	8003758 <HAL_GetTick>
 80083da:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80083dc:	e00a      	b.n	80083f4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80083de:	f7fb f9bb 	bl	8003758 <HAL_GetTick>
 80083e2:	4602      	mov	r2, r0
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	1ad3      	subs	r3, r2, r3
 80083e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d901      	bls.n	80083f4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80083f0:	2303      	movs	r3, #3
 80083f2:	e0be      	b.n	8008572 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80083f4:	4b1c      	ldr	r3, [pc, #112]	@ (8008468 <HAL_RCC_ClockConfig+0x244>)
 80083f6:	691b      	ldr	r3, [r3, #16]
 80083f8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	685b      	ldr	r3, [r3, #4]
 8008400:	00db      	lsls	r3, r3, #3
 8008402:	429a      	cmp	r2, r3
 8008404:	d1eb      	bne.n	80083de <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f003 0302 	and.w	r3, r3, #2
 800840e:	2b00      	cmp	r3, #0
 8008410:	d010      	beq.n	8008434 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	68da      	ldr	r2, [r3, #12]
 8008416:	4b14      	ldr	r3, [pc, #80]	@ (8008468 <HAL_RCC_ClockConfig+0x244>)
 8008418:	699b      	ldr	r3, [r3, #24]
 800841a:	f003 030f 	and.w	r3, r3, #15
 800841e:	429a      	cmp	r2, r3
 8008420:	d208      	bcs.n	8008434 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008422:	4b11      	ldr	r3, [pc, #68]	@ (8008468 <HAL_RCC_ClockConfig+0x244>)
 8008424:	699b      	ldr	r3, [r3, #24]
 8008426:	f023 020f 	bic.w	r2, r3, #15
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	68db      	ldr	r3, [r3, #12]
 800842e:	490e      	ldr	r1, [pc, #56]	@ (8008468 <HAL_RCC_ClockConfig+0x244>)
 8008430:	4313      	orrs	r3, r2
 8008432:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008434:	4b0b      	ldr	r3, [pc, #44]	@ (8008464 <HAL_RCC_ClockConfig+0x240>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f003 030f 	and.w	r3, r3, #15
 800843c:	683a      	ldr	r2, [r7, #0]
 800843e:	429a      	cmp	r2, r3
 8008440:	d214      	bcs.n	800846c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008442:	4b08      	ldr	r3, [pc, #32]	@ (8008464 <HAL_RCC_ClockConfig+0x240>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f023 020f 	bic.w	r2, r3, #15
 800844a:	4906      	ldr	r1, [pc, #24]	@ (8008464 <HAL_RCC_ClockConfig+0x240>)
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	4313      	orrs	r3, r2
 8008450:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008452:	4b04      	ldr	r3, [pc, #16]	@ (8008464 <HAL_RCC_ClockConfig+0x240>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f003 030f 	and.w	r3, r3, #15
 800845a:	683a      	ldr	r2, [r7, #0]
 800845c:	429a      	cmp	r2, r3
 800845e:	d005      	beq.n	800846c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008460:	2301      	movs	r3, #1
 8008462:	e086      	b.n	8008572 <HAL_RCC_ClockConfig+0x34e>
 8008464:	52002000 	.word	0x52002000
 8008468:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f003 0304 	and.w	r3, r3, #4
 8008474:	2b00      	cmp	r3, #0
 8008476:	d010      	beq.n	800849a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	691a      	ldr	r2, [r3, #16]
 800847c:	4b3f      	ldr	r3, [pc, #252]	@ (800857c <HAL_RCC_ClockConfig+0x358>)
 800847e:	699b      	ldr	r3, [r3, #24]
 8008480:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008484:	429a      	cmp	r2, r3
 8008486:	d208      	bcs.n	800849a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008488:	4b3c      	ldr	r3, [pc, #240]	@ (800857c <HAL_RCC_ClockConfig+0x358>)
 800848a:	699b      	ldr	r3, [r3, #24]
 800848c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	691b      	ldr	r3, [r3, #16]
 8008494:	4939      	ldr	r1, [pc, #228]	@ (800857c <HAL_RCC_ClockConfig+0x358>)
 8008496:	4313      	orrs	r3, r2
 8008498:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f003 0308 	and.w	r3, r3, #8
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d010      	beq.n	80084c8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	695a      	ldr	r2, [r3, #20]
 80084aa:	4b34      	ldr	r3, [pc, #208]	@ (800857c <HAL_RCC_ClockConfig+0x358>)
 80084ac:	69db      	ldr	r3, [r3, #28]
 80084ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80084b2:	429a      	cmp	r2, r3
 80084b4:	d208      	bcs.n	80084c8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80084b6:	4b31      	ldr	r3, [pc, #196]	@ (800857c <HAL_RCC_ClockConfig+0x358>)
 80084b8:	69db      	ldr	r3, [r3, #28]
 80084ba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	695b      	ldr	r3, [r3, #20]
 80084c2:	492e      	ldr	r1, [pc, #184]	@ (800857c <HAL_RCC_ClockConfig+0x358>)
 80084c4:	4313      	orrs	r3, r2
 80084c6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f003 0310 	and.w	r3, r3, #16
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d010      	beq.n	80084f6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	699a      	ldr	r2, [r3, #24]
 80084d8:	4b28      	ldr	r3, [pc, #160]	@ (800857c <HAL_RCC_ClockConfig+0x358>)
 80084da:	69db      	ldr	r3, [r3, #28]
 80084dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80084e0:	429a      	cmp	r2, r3
 80084e2:	d208      	bcs.n	80084f6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80084e4:	4b25      	ldr	r3, [pc, #148]	@ (800857c <HAL_RCC_ClockConfig+0x358>)
 80084e6:	69db      	ldr	r3, [r3, #28]
 80084e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	699b      	ldr	r3, [r3, #24]
 80084f0:	4922      	ldr	r1, [pc, #136]	@ (800857c <HAL_RCC_ClockConfig+0x358>)
 80084f2:	4313      	orrs	r3, r2
 80084f4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f003 0320 	and.w	r3, r3, #32
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d010      	beq.n	8008524 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	69da      	ldr	r2, [r3, #28]
 8008506:	4b1d      	ldr	r3, [pc, #116]	@ (800857c <HAL_RCC_ClockConfig+0x358>)
 8008508:	6a1b      	ldr	r3, [r3, #32]
 800850a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800850e:	429a      	cmp	r2, r3
 8008510:	d208      	bcs.n	8008524 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008512:	4b1a      	ldr	r3, [pc, #104]	@ (800857c <HAL_RCC_ClockConfig+0x358>)
 8008514:	6a1b      	ldr	r3, [r3, #32]
 8008516:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	69db      	ldr	r3, [r3, #28]
 800851e:	4917      	ldr	r1, [pc, #92]	@ (800857c <HAL_RCC_ClockConfig+0x358>)
 8008520:	4313      	orrs	r3, r2
 8008522:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008524:	f000 f834 	bl	8008590 <HAL_RCC_GetSysClockFreq>
 8008528:	4602      	mov	r2, r0
 800852a:	4b14      	ldr	r3, [pc, #80]	@ (800857c <HAL_RCC_ClockConfig+0x358>)
 800852c:	699b      	ldr	r3, [r3, #24]
 800852e:	0a1b      	lsrs	r3, r3, #8
 8008530:	f003 030f 	and.w	r3, r3, #15
 8008534:	4912      	ldr	r1, [pc, #72]	@ (8008580 <HAL_RCC_ClockConfig+0x35c>)
 8008536:	5ccb      	ldrb	r3, [r1, r3]
 8008538:	f003 031f 	and.w	r3, r3, #31
 800853c:	fa22 f303 	lsr.w	r3, r2, r3
 8008540:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008542:	4b0e      	ldr	r3, [pc, #56]	@ (800857c <HAL_RCC_ClockConfig+0x358>)
 8008544:	699b      	ldr	r3, [r3, #24]
 8008546:	f003 030f 	and.w	r3, r3, #15
 800854a:	4a0d      	ldr	r2, [pc, #52]	@ (8008580 <HAL_RCC_ClockConfig+0x35c>)
 800854c:	5cd3      	ldrb	r3, [r2, r3]
 800854e:	f003 031f 	and.w	r3, r3, #31
 8008552:	693a      	ldr	r2, [r7, #16]
 8008554:	fa22 f303 	lsr.w	r3, r2, r3
 8008558:	4a0a      	ldr	r2, [pc, #40]	@ (8008584 <HAL_RCC_ClockConfig+0x360>)
 800855a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800855c:	4a0a      	ldr	r2, [pc, #40]	@ (8008588 <HAL_RCC_ClockConfig+0x364>)
 800855e:	693b      	ldr	r3, [r7, #16]
 8008560:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008562:	4b0a      	ldr	r3, [pc, #40]	@ (800858c <HAL_RCC_ClockConfig+0x368>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	4618      	mov	r0, r3
 8008568:	f7fb f8ac 	bl	80036c4 <HAL_InitTick>
 800856c:	4603      	mov	r3, r0
 800856e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008570:	7bfb      	ldrb	r3, [r7, #15]
}
 8008572:	4618      	mov	r0, r3
 8008574:	3718      	adds	r7, #24
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}
 800857a:	bf00      	nop
 800857c:	58024400 	.word	0x58024400
 8008580:	0800d63c 	.word	0x0800d63c
 8008584:	24000004 	.word	0x24000004
 8008588:	24000000 	.word	0x24000000
 800858c:	24000008 	.word	0x24000008

08008590 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008590:	b480      	push	{r7}
 8008592:	b089      	sub	sp, #36	@ 0x24
 8008594:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008596:	4bb3      	ldr	r3, [pc, #716]	@ (8008864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008598:	691b      	ldr	r3, [r3, #16]
 800859a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800859e:	2b18      	cmp	r3, #24
 80085a0:	f200 8155 	bhi.w	800884e <HAL_RCC_GetSysClockFreq+0x2be>
 80085a4:	a201      	add	r2, pc, #4	@ (adr r2, 80085ac <HAL_RCC_GetSysClockFreq+0x1c>)
 80085a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085aa:	bf00      	nop
 80085ac:	08008611 	.word	0x08008611
 80085b0:	0800884f 	.word	0x0800884f
 80085b4:	0800884f 	.word	0x0800884f
 80085b8:	0800884f 	.word	0x0800884f
 80085bc:	0800884f 	.word	0x0800884f
 80085c0:	0800884f 	.word	0x0800884f
 80085c4:	0800884f 	.word	0x0800884f
 80085c8:	0800884f 	.word	0x0800884f
 80085cc:	08008637 	.word	0x08008637
 80085d0:	0800884f 	.word	0x0800884f
 80085d4:	0800884f 	.word	0x0800884f
 80085d8:	0800884f 	.word	0x0800884f
 80085dc:	0800884f 	.word	0x0800884f
 80085e0:	0800884f 	.word	0x0800884f
 80085e4:	0800884f 	.word	0x0800884f
 80085e8:	0800884f 	.word	0x0800884f
 80085ec:	0800863d 	.word	0x0800863d
 80085f0:	0800884f 	.word	0x0800884f
 80085f4:	0800884f 	.word	0x0800884f
 80085f8:	0800884f 	.word	0x0800884f
 80085fc:	0800884f 	.word	0x0800884f
 8008600:	0800884f 	.word	0x0800884f
 8008604:	0800884f 	.word	0x0800884f
 8008608:	0800884f 	.word	0x0800884f
 800860c:	08008643 	.word	0x08008643
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008610:	4b94      	ldr	r3, [pc, #592]	@ (8008864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f003 0320 	and.w	r3, r3, #32
 8008618:	2b00      	cmp	r3, #0
 800861a:	d009      	beq.n	8008630 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800861c:	4b91      	ldr	r3, [pc, #580]	@ (8008864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	08db      	lsrs	r3, r3, #3
 8008622:	f003 0303 	and.w	r3, r3, #3
 8008626:	4a90      	ldr	r2, [pc, #576]	@ (8008868 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008628:	fa22 f303 	lsr.w	r3, r2, r3
 800862c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800862e:	e111      	b.n	8008854 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008630:	4b8d      	ldr	r3, [pc, #564]	@ (8008868 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008632:	61bb      	str	r3, [r7, #24]
      break;
 8008634:	e10e      	b.n	8008854 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008636:	4b8d      	ldr	r3, [pc, #564]	@ (800886c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008638:	61bb      	str	r3, [r7, #24]
      break;
 800863a:	e10b      	b.n	8008854 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800863c:	4b8c      	ldr	r3, [pc, #560]	@ (8008870 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800863e:	61bb      	str	r3, [r7, #24]
      break;
 8008640:	e108      	b.n	8008854 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008642:	4b88      	ldr	r3, [pc, #544]	@ (8008864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008646:	f003 0303 	and.w	r3, r3, #3
 800864a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800864c:	4b85      	ldr	r3, [pc, #532]	@ (8008864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800864e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008650:	091b      	lsrs	r3, r3, #4
 8008652:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008656:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008658:	4b82      	ldr	r3, [pc, #520]	@ (8008864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800865a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800865c:	f003 0301 	and.w	r3, r3, #1
 8008660:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008662:	4b80      	ldr	r3, [pc, #512]	@ (8008864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008664:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008666:	08db      	lsrs	r3, r3, #3
 8008668:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800866c:	68fa      	ldr	r2, [r7, #12]
 800866e:	fb02 f303 	mul.w	r3, r2, r3
 8008672:	ee07 3a90 	vmov	s15, r3
 8008676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800867a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800867e:	693b      	ldr	r3, [r7, #16]
 8008680:	2b00      	cmp	r3, #0
 8008682:	f000 80e1 	beq.w	8008848 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	2b02      	cmp	r3, #2
 800868a:	f000 8083 	beq.w	8008794 <HAL_RCC_GetSysClockFreq+0x204>
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	2b02      	cmp	r3, #2
 8008692:	f200 80a1 	bhi.w	80087d8 <HAL_RCC_GetSysClockFreq+0x248>
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d003      	beq.n	80086a4 <HAL_RCC_GetSysClockFreq+0x114>
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	2b01      	cmp	r3, #1
 80086a0:	d056      	beq.n	8008750 <HAL_RCC_GetSysClockFreq+0x1c0>
 80086a2:	e099      	b.n	80087d8 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80086a4:	4b6f      	ldr	r3, [pc, #444]	@ (8008864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f003 0320 	and.w	r3, r3, #32
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d02d      	beq.n	800870c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80086b0:	4b6c      	ldr	r3, [pc, #432]	@ (8008864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	08db      	lsrs	r3, r3, #3
 80086b6:	f003 0303 	and.w	r3, r3, #3
 80086ba:	4a6b      	ldr	r2, [pc, #428]	@ (8008868 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80086bc:	fa22 f303 	lsr.w	r3, r2, r3
 80086c0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	ee07 3a90 	vmov	s15, r3
 80086c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	ee07 3a90 	vmov	s15, r3
 80086d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086da:	4b62      	ldr	r3, [pc, #392]	@ (8008864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086e2:	ee07 3a90 	vmov	s15, r3
 80086e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80086ee:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8008874 <HAL_RCC_GetSysClockFreq+0x2e4>
 80086f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80086fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008702:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008706:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800870a:	e087      	b.n	800881c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	ee07 3a90 	vmov	s15, r3
 8008712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008716:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8008878 <HAL_RCC_GetSysClockFreq+0x2e8>
 800871a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800871e:	4b51      	ldr	r3, [pc, #324]	@ (8008864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008722:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008726:	ee07 3a90 	vmov	s15, r3
 800872a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800872e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008732:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8008874 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008736:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800873a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800873e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008742:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800874a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800874e:	e065      	b.n	800881c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	ee07 3a90 	vmov	s15, r3
 8008756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800875a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800887c <HAL_RCC_GetSysClockFreq+0x2ec>
 800875e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008762:	4b40      	ldr	r3, [pc, #256]	@ (8008864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800876a:	ee07 3a90 	vmov	s15, r3
 800876e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008772:	ed97 6a02 	vldr	s12, [r7, #8]
 8008776:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8008874 <HAL_RCC_GetSysClockFreq+0x2e4>
 800877a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800877e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008782:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008786:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800878a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800878e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008792:	e043      	b.n	800881c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008794:	693b      	ldr	r3, [r7, #16]
 8008796:	ee07 3a90 	vmov	s15, r3
 800879a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800879e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8008880 <HAL_RCC_GetSysClockFreq+0x2f0>
 80087a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087a6:	4b2f      	ldr	r3, [pc, #188]	@ (8008864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087ae:	ee07 3a90 	vmov	s15, r3
 80087b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80087ba:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8008874 <HAL_RCC_GetSysClockFreq+0x2e4>
 80087be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80087ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80087d6:	e021      	b.n	800881c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	ee07 3a90 	vmov	s15, r3
 80087de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087e2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800887c <HAL_RCC_GetSysClockFreq+0x2ec>
 80087e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087ea:	4b1e      	ldr	r3, [pc, #120]	@ (8008864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087f2:	ee07 3a90 	vmov	s15, r3
 80087f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80087fe:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8008874 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008802:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008806:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800880a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800880e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008812:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008816:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800881a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800881c:	4b11      	ldr	r3, [pc, #68]	@ (8008864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800881e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008820:	0a5b      	lsrs	r3, r3, #9
 8008822:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008826:	3301      	adds	r3, #1
 8008828:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	ee07 3a90 	vmov	s15, r3
 8008830:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008834:	edd7 6a07 	vldr	s13, [r7, #28]
 8008838:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800883c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008840:	ee17 3a90 	vmov	r3, s15
 8008844:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008846:	e005      	b.n	8008854 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008848:	2300      	movs	r3, #0
 800884a:	61bb      	str	r3, [r7, #24]
      break;
 800884c:	e002      	b.n	8008854 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800884e:	4b07      	ldr	r3, [pc, #28]	@ (800886c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008850:	61bb      	str	r3, [r7, #24]
      break;
 8008852:	bf00      	nop
  }

  return sysclockfreq;
 8008854:	69bb      	ldr	r3, [r7, #24]
}
 8008856:	4618      	mov	r0, r3
 8008858:	3724      	adds	r7, #36	@ 0x24
 800885a:	46bd      	mov	sp, r7
 800885c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008860:	4770      	bx	lr
 8008862:	bf00      	nop
 8008864:	58024400 	.word	0x58024400
 8008868:	03d09000 	.word	0x03d09000
 800886c:	003d0900 	.word	0x003d0900
 8008870:	017d7840 	.word	0x017d7840
 8008874:	46000000 	.word	0x46000000
 8008878:	4c742400 	.word	0x4c742400
 800887c:	4a742400 	.word	0x4a742400
 8008880:	4bbebc20 	.word	0x4bbebc20

08008884 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b082      	sub	sp, #8
 8008888:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800888a:	f7ff fe81 	bl	8008590 <HAL_RCC_GetSysClockFreq>
 800888e:	4602      	mov	r2, r0
 8008890:	4b10      	ldr	r3, [pc, #64]	@ (80088d4 <HAL_RCC_GetHCLKFreq+0x50>)
 8008892:	699b      	ldr	r3, [r3, #24]
 8008894:	0a1b      	lsrs	r3, r3, #8
 8008896:	f003 030f 	and.w	r3, r3, #15
 800889a:	490f      	ldr	r1, [pc, #60]	@ (80088d8 <HAL_RCC_GetHCLKFreq+0x54>)
 800889c:	5ccb      	ldrb	r3, [r1, r3]
 800889e:	f003 031f 	and.w	r3, r3, #31
 80088a2:	fa22 f303 	lsr.w	r3, r2, r3
 80088a6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80088a8:	4b0a      	ldr	r3, [pc, #40]	@ (80088d4 <HAL_RCC_GetHCLKFreq+0x50>)
 80088aa:	699b      	ldr	r3, [r3, #24]
 80088ac:	f003 030f 	and.w	r3, r3, #15
 80088b0:	4a09      	ldr	r2, [pc, #36]	@ (80088d8 <HAL_RCC_GetHCLKFreq+0x54>)
 80088b2:	5cd3      	ldrb	r3, [r2, r3]
 80088b4:	f003 031f 	and.w	r3, r3, #31
 80088b8:	687a      	ldr	r2, [r7, #4]
 80088ba:	fa22 f303 	lsr.w	r3, r2, r3
 80088be:	4a07      	ldr	r2, [pc, #28]	@ (80088dc <HAL_RCC_GetHCLKFreq+0x58>)
 80088c0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80088c2:	4a07      	ldr	r2, [pc, #28]	@ (80088e0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80088c8:	4b04      	ldr	r3, [pc, #16]	@ (80088dc <HAL_RCC_GetHCLKFreq+0x58>)
 80088ca:	681b      	ldr	r3, [r3, #0]
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3708      	adds	r7, #8
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}
 80088d4:	58024400 	.word	0x58024400
 80088d8:	0800d63c 	.word	0x0800d63c
 80088dc:	24000004 	.word	0x24000004
 80088e0:	24000000 	.word	0x24000000

080088e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80088e8:	f7ff ffcc 	bl	8008884 <HAL_RCC_GetHCLKFreq>
 80088ec:	4602      	mov	r2, r0
 80088ee:	4b06      	ldr	r3, [pc, #24]	@ (8008908 <HAL_RCC_GetPCLK1Freq+0x24>)
 80088f0:	69db      	ldr	r3, [r3, #28]
 80088f2:	091b      	lsrs	r3, r3, #4
 80088f4:	f003 0307 	and.w	r3, r3, #7
 80088f8:	4904      	ldr	r1, [pc, #16]	@ (800890c <HAL_RCC_GetPCLK1Freq+0x28>)
 80088fa:	5ccb      	ldrb	r3, [r1, r3]
 80088fc:	f003 031f 	and.w	r3, r3, #31
 8008900:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008904:	4618      	mov	r0, r3
 8008906:	bd80      	pop	{r7, pc}
 8008908:	58024400 	.word	0x58024400
 800890c:	0800d63c 	.word	0x0800d63c

08008910 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008914:	f7ff ffb6 	bl	8008884 <HAL_RCC_GetHCLKFreq>
 8008918:	4602      	mov	r2, r0
 800891a:	4b06      	ldr	r3, [pc, #24]	@ (8008934 <HAL_RCC_GetPCLK2Freq+0x24>)
 800891c:	69db      	ldr	r3, [r3, #28]
 800891e:	0a1b      	lsrs	r3, r3, #8
 8008920:	f003 0307 	and.w	r3, r3, #7
 8008924:	4904      	ldr	r1, [pc, #16]	@ (8008938 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008926:	5ccb      	ldrb	r3, [r1, r3]
 8008928:	f003 031f 	and.w	r3, r3, #31
 800892c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008930:	4618      	mov	r0, r3
 8008932:	bd80      	pop	{r7, pc}
 8008934:	58024400 	.word	0x58024400
 8008938:	0800d63c 	.word	0x0800d63c

0800893c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800893c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008940:	b0ca      	sub	sp, #296	@ 0x128
 8008942:	af00      	add	r7, sp, #0
 8008944:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008948:	2300      	movs	r3, #0
 800894a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800894e:	2300      	movs	r3, #0
 8008950:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008954:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800895c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8008960:	2500      	movs	r5, #0
 8008962:	ea54 0305 	orrs.w	r3, r4, r5
 8008966:	d049      	beq.n	80089fc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008968:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800896c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800896e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008972:	d02f      	beq.n	80089d4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008974:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008978:	d828      	bhi.n	80089cc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800897a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800897e:	d01a      	beq.n	80089b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008980:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008984:	d822      	bhi.n	80089cc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008986:	2b00      	cmp	r3, #0
 8008988:	d003      	beq.n	8008992 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800898a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800898e:	d007      	beq.n	80089a0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008990:	e01c      	b.n	80089cc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008992:	4bb8      	ldr	r3, [pc, #736]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008996:	4ab7      	ldr	r2, [pc, #732]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008998:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800899c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800899e:	e01a      	b.n	80089d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80089a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089a4:	3308      	adds	r3, #8
 80089a6:	2102      	movs	r1, #2
 80089a8:	4618      	mov	r0, r3
 80089aa:	f002 fb61 	bl	800b070 <RCCEx_PLL2_Config>
 80089ae:	4603      	mov	r3, r0
 80089b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80089b4:	e00f      	b.n	80089d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80089b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089ba:	3328      	adds	r3, #40	@ 0x28
 80089bc:	2102      	movs	r1, #2
 80089be:	4618      	mov	r0, r3
 80089c0:	f002 fc08 	bl	800b1d4 <RCCEx_PLL3_Config>
 80089c4:	4603      	mov	r3, r0
 80089c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80089ca:	e004      	b.n	80089d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80089cc:	2301      	movs	r3, #1
 80089ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80089d2:	e000      	b.n	80089d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80089d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d10a      	bne.n	80089f4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80089de:	4ba5      	ldr	r3, [pc, #660]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80089e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089e2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80089e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80089ec:	4aa1      	ldr	r2, [pc, #644]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80089ee:	430b      	orrs	r3, r1
 80089f0:	6513      	str	r3, [r2, #80]	@ 0x50
 80089f2:	e003      	b.n	80089fc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80089f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80089fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a04:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8008a08:	f04f 0900 	mov.w	r9, #0
 8008a0c:	ea58 0309 	orrs.w	r3, r8, r9
 8008a10:	d047      	beq.n	8008aa2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a18:	2b04      	cmp	r3, #4
 8008a1a:	d82a      	bhi.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008a1c:	a201      	add	r2, pc, #4	@ (adr r2, 8008a24 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a22:	bf00      	nop
 8008a24:	08008a39 	.word	0x08008a39
 8008a28:	08008a47 	.word	0x08008a47
 8008a2c:	08008a5d 	.word	0x08008a5d
 8008a30:	08008a7b 	.word	0x08008a7b
 8008a34:	08008a7b 	.word	0x08008a7b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a38:	4b8e      	ldr	r3, [pc, #568]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a3c:	4a8d      	ldr	r2, [pc, #564]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008a3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008a42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008a44:	e01a      	b.n	8008a7c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a4a:	3308      	adds	r3, #8
 8008a4c:	2100      	movs	r1, #0
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f002 fb0e 	bl	800b070 <RCCEx_PLL2_Config>
 8008a54:	4603      	mov	r3, r0
 8008a56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008a5a:	e00f      	b.n	8008a7c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008a5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a60:	3328      	adds	r3, #40	@ 0x28
 8008a62:	2100      	movs	r1, #0
 8008a64:	4618      	mov	r0, r3
 8008a66:	f002 fbb5 	bl	800b1d4 <RCCEx_PLL3_Config>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008a70:	e004      	b.n	8008a7c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a72:	2301      	movs	r3, #1
 8008a74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008a78:	e000      	b.n	8008a7c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008a7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d10a      	bne.n	8008a9a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008a84:	4b7b      	ldr	r3, [pc, #492]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008a86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a88:	f023 0107 	bic.w	r1, r3, #7
 8008a8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a92:	4a78      	ldr	r2, [pc, #480]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008a94:	430b      	orrs	r3, r1
 8008a96:	6513      	str	r3, [r2, #80]	@ 0x50
 8008a98:	e003      	b.n	8008aa2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aaa:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8008aae:	f04f 0b00 	mov.w	fp, #0
 8008ab2:	ea5a 030b 	orrs.w	r3, sl, fp
 8008ab6:	d04c      	beq.n	8008b52 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8008ab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008abc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008abe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ac2:	d030      	beq.n	8008b26 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8008ac4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ac8:	d829      	bhi.n	8008b1e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008aca:	2bc0      	cmp	r3, #192	@ 0xc0
 8008acc:	d02d      	beq.n	8008b2a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008ace:	2bc0      	cmp	r3, #192	@ 0xc0
 8008ad0:	d825      	bhi.n	8008b1e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008ad2:	2b80      	cmp	r3, #128	@ 0x80
 8008ad4:	d018      	beq.n	8008b08 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8008ad6:	2b80      	cmp	r3, #128	@ 0x80
 8008ad8:	d821      	bhi.n	8008b1e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d002      	beq.n	8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8008ade:	2b40      	cmp	r3, #64	@ 0x40
 8008ae0:	d007      	beq.n	8008af2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8008ae2:	e01c      	b.n	8008b1e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ae4:	4b63      	ldr	r3, [pc, #396]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ae8:	4a62      	ldr	r2, [pc, #392]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008aea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008aee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008af0:	e01c      	b.n	8008b2c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008af6:	3308      	adds	r3, #8
 8008af8:	2100      	movs	r1, #0
 8008afa:	4618      	mov	r0, r3
 8008afc:	f002 fab8 	bl	800b070 <RCCEx_PLL2_Config>
 8008b00:	4603      	mov	r3, r0
 8008b02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008b06:	e011      	b.n	8008b2c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b0c:	3328      	adds	r3, #40	@ 0x28
 8008b0e:	2100      	movs	r1, #0
 8008b10:	4618      	mov	r0, r3
 8008b12:	f002 fb5f 	bl	800b1d4 <RCCEx_PLL3_Config>
 8008b16:	4603      	mov	r3, r0
 8008b18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008b1c:	e006      	b.n	8008b2c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b1e:	2301      	movs	r3, #1
 8008b20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008b24:	e002      	b.n	8008b2c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008b26:	bf00      	nop
 8008b28:	e000      	b.n	8008b2c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008b2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d10a      	bne.n	8008b4a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008b34:	4b4f      	ldr	r3, [pc, #316]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008b36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b38:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8008b3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b42:	4a4c      	ldr	r2, [pc, #304]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008b44:	430b      	orrs	r3, r1
 8008b46:	6513      	str	r3, [r2, #80]	@ 0x50
 8008b48:	e003      	b.n	8008b52 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b4e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b5a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8008b5e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8008b62:	2300      	movs	r3, #0
 8008b64:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8008b68:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8008b6c:	460b      	mov	r3, r1
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	d053      	beq.n	8008c1a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b76:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008b7a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008b7e:	d035      	beq.n	8008bec <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8008b80:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008b84:	d82e      	bhi.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008b86:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008b8a:	d031      	beq.n	8008bf0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8008b8c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008b90:	d828      	bhi.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008b92:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008b96:	d01a      	beq.n	8008bce <HAL_RCCEx_PeriphCLKConfig+0x292>
 8008b98:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008b9c:	d822      	bhi.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d003      	beq.n	8008baa <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8008ba2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008ba6:	d007      	beq.n	8008bb8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8008ba8:	e01c      	b.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008baa:	4b32      	ldr	r3, [pc, #200]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bae:	4a31      	ldr	r2, [pc, #196]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008bb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008bb4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008bb6:	e01c      	b.n	8008bf2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008bb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bbc:	3308      	adds	r3, #8
 8008bbe:	2100      	movs	r1, #0
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f002 fa55 	bl	800b070 <RCCEx_PLL2_Config>
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008bcc:	e011      	b.n	8008bf2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bd2:	3328      	adds	r3, #40	@ 0x28
 8008bd4:	2100      	movs	r1, #0
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f002 fafc 	bl	800b1d4 <RCCEx_PLL3_Config>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008be2:	e006      	b.n	8008bf2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008be4:	2301      	movs	r3, #1
 8008be6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008bea:	e002      	b.n	8008bf2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008bec:	bf00      	nop
 8008bee:	e000      	b.n	8008bf2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008bf0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008bf2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d10b      	bne.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008bfa:	4b1e      	ldr	r3, [pc, #120]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008bfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bfe:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8008c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c06:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008c0a:	4a1a      	ldr	r2, [pc, #104]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008c0c:	430b      	orrs	r3, r1
 8008c0e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008c10:	e003      	b.n	8008c1a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c22:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8008c26:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008c30:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8008c34:	460b      	mov	r3, r1
 8008c36:	4313      	orrs	r3, r2
 8008c38:	d056      	beq.n	8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c3e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008c42:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008c46:	d038      	beq.n	8008cba <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008c48:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008c4c:	d831      	bhi.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008c4e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008c52:	d034      	beq.n	8008cbe <HAL_RCCEx_PeriphCLKConfig+0x382>
 8008c54:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008c58:	d82b      	bhi.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008c5a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008c5e:	d01d      	beq.n	8008c9c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8008c60:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008c64:	d825      	bhi.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d006      	beq.n	8008c78 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8008c6a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008c6e:	d00a      	beq.n	8008c86 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008c70:	e01f      	b.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008c72:	bf00      	nop
 8008c74:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c78:	4ba2      	ldr	r3, [pc, #648]	@ (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c7c:	4aa1      	ldr	r2, [pc, #644]	@ (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008c7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008c82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008c84:	e01c      	b.n	8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c8a:	3308      	adds	r3, #8
 8008c8c:	2100      	movs	r1, #0
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f002 f9ee 	bl	800b070 <RCCEx_PLL2_Config>
 8008c94:	4603      	mov	r3, r0
 8008c96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008c9a:	e011      	b.n	8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008c9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ca0:	3328      	adds	r3, #40	@ 0x28
 8008ca2:	2100      	movs	r1, #0
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	f002 fa95 	bl	800b1d4 <RCCEx_PLL3_Config>
 8008caa:	4603      	mov	r3, r0
 8008cac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008cb0:	e006      	b.n	8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008cb8:	e002      	b.n	8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008cba:	bf00      	nop
 8008cbc:	e000      	b.n	8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008cbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008cc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d10b      	bne.n	8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008cc8:	4b8e      	ldr	r3, [pc, #568]	@ (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008cca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ccc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8008cd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cd4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008cd8:	4a8a      	ldr	r2, [pc, #552]	@ (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008cda:	430b      	orrs	r3, r1
 8008cdc:	6593      	str	r3, [r2, #88]	@ 0x58
 8008cde:	e003      	b.n	8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ce0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ce4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008ce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008cf4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008cfe:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8008d02:	460b      	mov	r3, r1
 8008d04:	4313      	orrs	r3, r2
 8008d06:	d03a      	beq.n	8008d7e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8008d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d0e:	2b30      	cmp	r3, #48	@ 0x30
 8008d10:	d01f      	beq.n	8008d52 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8008d12:	2b30      	cmp	r3, #48	@ 0x30
 8008d14:	d819      	bhi.n	8008d4a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008d16:	2b20      	cmp	r3, #32
 8008d18:	d00c      	beq.n	8008d34 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8008d1a:	2b20      	cmp	r3, #32
 8008d1c:	d815      	bhi.n	8008d4a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d019      	beq.n	8008d56 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8008d22:	2b10      	cmp	r3, #16
 8008d24:	d111      	bne.n	8008d4a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d26:	4b77      	ldr	r3, [pc, #476]	@ (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d2a:	4a76      	ldr	r2, [pc, #472]	@ (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008d2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008d30:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008d32:	e011      	b.n	8008d58 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008d34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d38:	3308      	adds	r3, #8
 8008d3a:	2102      	movs	r1, #2
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	f002 f997 	bl	800b070 <RCCEx_PLL2_Config>
 8008d42:	4603      	mov	r3, r0
 8008d44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008d48:	e006      	b.n	8008d58 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008d50:	e002      	b.n	8008d58 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008d52:	bf00      	nop
 8008d54:	e000      	b.n	8008d58 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008d56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d10a      	bne.n	8008d76 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008d60:	4b68      	ldr	r3, [pc, #416]	@ (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008d62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d64:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008d68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d6e:	4a65      	ldr	r2, [pc, #404]	@ (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008d70:	430b      	orrs	r3, r1
 8008d72:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008d74:	e003      	b.n	8008d7e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d86:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8008d8a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008d8e:	2300      	movs	r3, #0
 8008d90:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008d94:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8008d98:	460b      	mov	r3, r1
 8008d9a:	4313      	orrs	r3, r2
 8008d9c:	d051      	beq.n	8008e42 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008da2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008da4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008da8:	d035      	beq.n	8008e16 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8008daa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008dae:	d82e      	bhi.n	8008e0e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008db0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008db4:	d031      	beq.n	8008e1a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8008db6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008dba:	d828      	bhi.n	8008e0e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008dbc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008dc0:	d01a      	beq.n	8008df8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8008dc2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008dc6:	d822      	bhi.n	8008e0e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d003      	beq.n	8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8008dcc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008dd0:	d007      	beq.n	8008de2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8008dd2:	e01c      	b.n	8008e0e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008dd4:	4b4b      	ldr	r3, [pc, #300]	@ (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dd8:	4a4a      	ldr	r2, [pc, #296]	@ (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008dda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008dde:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008de0:	e01c      	b.n	8008e1c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008de6:	3308      	adds	r3, #8
 8008de8:	2100      	movs	r1, #0
 8008dea:	4618      	mov	r0, r3
 8008dec:	f002 f940 	bl	800b070 <RCCEx_PLL2_Config>
 8008df0:	4603      	mov	r3, r0
 8008df2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008df6:	e011      	b.n	8008e1c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dfc:	3328      	adds	r3, #40	@ 0x28
 8008dfe:	2100      	movs	r1, #0
 8008e00:	4618      	mov	r0, r3
 8008e02:	f002 f9e7 	bl	800b1d4 <RCCEx_PLL3_Config>
 8008e06:	4603      	mov	r3, r0
 8008e08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008e0c:	e006      	b.n	8008e1c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e0e:	2301      	movs	r3, #1
 8008e10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008e14:	e002      	b.n	8008e1c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008e16:	bf00      	nop
 8008e18:	e000      	b.n	8008e1c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008e1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d10a      	bne.n	8008e3a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008e24:	4b37      	ldr	r3, [pc, #220]	@ (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008e26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e28:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008e32:	4a34      	ldr	r2, [pc, #208]	@ (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008e34:	430b      	orrs	r3, r1
 8008e36:	6513      	str	r3, [r2, #80]	@ 0x50
 8008e38:	e003      	b.n	8008e42 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e4a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8008e4e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008e52:	2300      	movs	r3, #0
 8008e54:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008e58:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8008e5c:	460b      	mov	r3, r1
 8008e5e:	4313      	orrs	r3, r2
 8008e60:	d056      	beq.n	8008f10 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008e6c:	d033      	beq.n	8008ed6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8008e6e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008e72:	d82c      	bhi.n	8008ece <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008e74:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008e78:	d02f      	beq.n	8008eda <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8008e7a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008e7e:	d826      	bhi.n	8008ece <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008e80:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008e84:	d02b      	beq.n	8008ede <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8008e86:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008e8a:	d820      	bhi.n	8008ece <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008e8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008e90:	d012      	beq.n	8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8008e92:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008e96:	d81a      	bhi.n	8008ece <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d022      	beq.n	8008ee2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8008e9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ea0:	d115      	bne.n	8008ece <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ea6:	3308      	adds	r3, #8
 8008ea8:	2101      	movs	r1, #1
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f002 f8e0 	bl	800b070 <RCCEx_PLL2_Config>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008eb6:	e015      	b.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008eb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ebc:	3328      	adds	r3, #40	@ 0x28
 8008ebe:	2101      	movs	r1, #1
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	f002 f987 	bl	800b1d4 <RCCEx_PLL3_Config>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008ecc:	e00a      	b.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ece:	2301      	movs	r3, #1
 8008ed0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008ed4:	e006      	b.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008ed6:	bf00      	nop
 8008ed8:	e004      	b.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008eda:	bf00      	nop
 8008edc:	e002      	b.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008ede:	bf00      	nop
 8008ee0:	e000      	b.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008ee2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ee4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d10d      	bne.n	8008f08 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008eec:	4b05      	ldr	r3, [pc, #20]	@ (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008eee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ef0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8008ef4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ef8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008efa:	4a02      	ldr	r2, [pc, #8]	@ (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008efc:	430b      	orrs	r3, r1
 8008efe:	6513      	str	r3, [r2, #80]	@ 0x50
 8008f00:	e006      	b.n	8008f10 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8008f02:	bf00      	nop
 8008f04:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f18:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8008f1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008f20:	2300      	movs	r3, #0
 8008f22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008f26:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8008f2a:	460b      	mov	r3, r1
 8008f2c:	4313      	orrs	r3, r2
 8008f2e:	d055      	beq.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008f30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f34:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008f38:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008f3c:	d033      	beq.n	8008fa6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8008f3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008f42:	d82c      	bhi.n	8008f9e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008f44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f48:	d02f      	beq.n	8008faa <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8008f4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f4e:	d826      	bhi.n	8008f9e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008f50:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008f54:	d02b      	beq.n	8008fae <HAL_RCCEx_PeriphCLKConfig+0x672>
 8008f56:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008f5a:	d820      	bhi.n	8008f9e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008f5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f60:	d012      	beq.n	8008f88 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8008f62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f66:	d81a      	bhi.n	8008f9e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d022      	beq.n	8008fb2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8008f6c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008f70:	d115      	bne.n	8008f9e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f76:	3308      	adds	r3, #8
 8008f78:	2101      	movs	r1, #1
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f002 f878 	bl	800b070 <RCCEx_PLL2_Config>
 8008f80:	4603      	mov	r3, r0
 8008f82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008f86:	e015      	b.n	8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008f88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f8c:	3328      	adds	r3, #40	@ 0x28
 8008f8e:	2101      	movs	r1, #1
 8008f90:	4618      	mov	r0, r3
 8008f92:	f002 f91f 	bl	800b1d4 <RCCEx_PLL3_Config>
 8008f96:	4603      	mov	r3, r0
 8008f98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008f9c:	e00a      	b.n	8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008fa4:	e006      	b.n	8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008fa6:	bf00      	nop
 8008fa8:	e004      	b.n	8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008faa:	bf00      	nop
 8008fac:	e002      	b.n	8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008fae:	bf00      	nop
 8008fb0:	e000      	b.n	8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008fb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008fb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d10b      	bne.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008fbc:	4ba3      	ldr	r3, [pc, #652]	@ (800924c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008fbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008fc0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008fc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fc8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008fcc:	4a9f      	ldr	r2, [pc, #636]	@ (800924c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008fce:	430b      	orrs	r3, r1
 8008fd0:	6593      	str	r3, [r2, #88]	@ 0x58
 8008fd2:	e003      	b.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008fd8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008fdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8008fe8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008fec:	2300      	movs	r3, #0
 8008fee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008ff2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008ff6:	460b      	mov	r3, r1
 8008ff8:	4313      	orrs	r3, r2
 8008ffa:	d037      	beq.n	800906c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008ffc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009000:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009002:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009006:	d00e      	beq.n	8009026 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8009008:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800900c:	d816      	bhi.n	800903c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800900e:	2b00      	cmp	r3, #0
 8009010:	d018      	beq.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8009012:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009016:	d111      	bne.n	800903c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009018:	4b8c      	ldr	r3, [pc, #560]	@ (800924c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800901a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800901c:	4a8b      	ldr	r2, [pc, #556]	@ (800924c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800901e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009022:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009024:	e00f      	b.n	8009046 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009026:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800902a:	3308      	adds	r3, #8
 800902c:	2101      	movs	r1, #1
 800902e:	4618      	mov	r0, r3
 8009030:	f002 f81e 	bl	800b070 <RCCEx_PLL2_Config>
 8009034:	4603      	mov	r3, r0
 8009036:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800903a:	e004      	b.n	8009046 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800903c:	2301      	movs	r3, #1
 800903e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009042:	e000      	b.n	8009046 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8009044:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009046:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800904a:	2b00      	cmp	r3, #0
 800904c:	d10a      	bne.n	8009064 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800904e:	4b7f      	ldr	r3, [pc, #508]	@ (800924c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009050:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009052:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009056:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800905a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800905c:	4a7b      	ldr	r2, [pc, #492]	@ (800924c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800905e:	430b      	orrs	r3, r1
 8009060:	6513      	str	r3, [r2, #80]	@ 0x50
 8009062:	e003      	b.n	800906c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009064:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009068:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800906c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009074:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8009078:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800907c:	2300      	movs	r3, #0
 800907e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009082:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8009086:	460b      	mov	r3, r1
 8009088:	4313      	orrs	r3, r2
 800908a:	d039      	beq.n	8009100 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800908c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009090:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009092:	2b03      	cmp	r3, #3
 8009094:	d81c      	bhi.n	80090d0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8009096:	a201      	add	r2, pc, #4	@ (adr r2, 800909c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8009098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800909c:	080090d9 	.word	0x080090d9
 80090a0:	080090ad 	.word	0x080090ad
 80090a4:	080090bb 	.word	0x080090bb
 80090a8:	080090d9 	.word	0x080090d9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090ac:	4b67      	ldr	r3, [pc, #412]	@ (800924c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80090ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090b0:	4a66      	ldr	r2, [pc, #408]	@ (800924c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80090b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80090b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80090b8:	e00f      	b.n	80090da <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80090ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090be:	3308      	adds	r3, #8
 80090c0:	2102      	movs	r1, #2
 80090c2:	4618      	mov	r0, r3
 80090c4:	f001 ffd4 	bl	800b070 <RCCEx_PLL2_Config>
 80090c8:	4603      	mov	r3, r0
 80090ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80090ce:	e004      	b.n	80090da <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80090d0:	2301      	movs	r3, #1
 80090d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80090d6:	e000      	b.n	80090da <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80090d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d10a      	bne.n	80090f8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80090e2:	4b5a      	ldr	r3, [pc, #360]	@ (800924c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80090e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80090e6:	f023 0103 	bic.w	r1, r3, #3
 80090ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80090f0:	4a56      	ldr	r2, [pc, #344]	@ (800924c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80090f2:	430b      	orrs	r3, r1
 80090f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80090f6:	e003      	b.n	8009100 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80090fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009100:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009108:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800910c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009110:	2300      	movs	r3, #0
 8009112:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009116:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800911a:	460b      	mov	r3, r1
 800911c:	4313      	orrs	r3, r2
 800911e:	f000 809f 	beq.w	8009260 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009122:	4b4b      	ldr	r3, [pc, #300]	@ (8009250 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	4a4a      	ldr	r2, [pc, #296]	@ (8009250 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009128:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800912c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800912e:	f7fa fb13 	bl	8003758 <HAL_GetTick>
 8009132:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009136:	e00b      	b.n	8009150 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009138:	f7fa fb0e 	bl	8003758 <HAL_GetTick>
 800913c:	4602      	mov	r2, r0
 800913e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8009142:	1ad3      	subs	r3, r2, r3
 8009144:	2b64      	cmp	r3, #100	@ 0x64
 8009146:	d903      	bls.n	8009150 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8009148:	2303      	movs	r3, #3
 800914a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800914e:	e005      	b.n	800915c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009150:	4b3f      	ldr	r3, [pc, #252]	@ (8009250 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009158:	2b00      	cmp	r3, #0
 800915a:	d0ed      	beq.n	8009138 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800915c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009160:	2b00      	cmp	r3, #0
 8009162:	d179      	bne.n	8009258 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009164:	4b39      	ldr	r3, [pc, #228]	@ (800924c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009166:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009168:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800916c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009170:	4053      	eors	r3, r2
 8009172:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009176:	2b00      	cmp	r3, #0
 8009178:	d015      	beq.n	80091a6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800917a:	4b34      	ldr	r3, [pc, #208]	@ (800924c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800917c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800917e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009182:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009186:	4b31      	ldr	r3, [pc, #196]	@ (800924c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009188:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800918a:	4a30      	ldr	r2, [pc, #192]	@ (800924c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800918c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009190:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009192:	4b2e      	ldr	r3, [pc, #184]	@ (800924c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009194:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009196:	4a2d      	ldr	r2, [pc, #180]	@ (800924c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009198:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800919c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800919e:	4a2b      	ldr	r2, [pc, #172]	@ (800924c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80091a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80091a4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80091a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80091ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80091b2:	d118      	bne.n	80091e6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091b4:	f7fa fad0 	bl	8003758 <HAL_GetTick>
 80091b8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80091bc:	e00d      	b.n	80091da <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80091be:	f7fa facb 	bl	8003758 <HAL_GetTick>
 80091c2:	4602      	mov	r2, r0
 80091c4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80091c8:	1ad2      	subs	r2, r2, r3
 80091ca:	f241 3388 	movw	r3, #5000	@ 0x1388
 80091ce:	429a      	cmp	r2, r3
 80091d0:	d903      	bls.n	80091da <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80091d2:	2303      	movs	r3, #3
 80091d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80091d8:	e005      	b.n	80091e6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80091da:	4b1c      	ldr	r3, [pc, #112]	@ (800924c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80091dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80091de:	f003 0302 	and.w	r3, r3, #2
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d0eb      	beq.n	80091be <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80091e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d129      	bne.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80091ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80091f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80091fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80091fe:	d10e      	bne.n	800921e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8009200:	4b12      	ldr	r3, [pc, #72]	@ (800924c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009202:	691b      	ldr	r3, [r3, #16]
 8009204:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8009208:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800920c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009210:	091a      	lsrs	r2, r3, #4
 8009212:	4b10      	ldr	r3, [pc, #64]	@ (8009254 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8009214:	4013      	ands	r3, r2
 8009216:	4a0d      	ldr	r2, [pc, #52]	@ (800924c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009218:	430b      	orrs	r3, r1
 800921a:	6113      	str	r3, [r2, #16]
 800921c:	e005      	b.n	800922a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800921e:	4b0b      	ldr	r3, [pc, #44]	@ (800924c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009220:	691b      	ldr	r3, [r3, #16]
 8009222:	4a0a      	ldr	r2, [pc, #40]	@ (800924c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009224:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009228:	6113      	str	r3, [r2, #16]
 800922a:	4b08      	ldr	r3, [pc, #32]	@ (800924c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800922c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800922e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009232:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009236:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800923a:	4a04      	ldr	r2, [pc, #16]	@ (800924c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800923c:	430b      	orrs	r3, r1
 800923e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009240:	e00e      	b.n	8009260 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009242:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009246:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800924a:	e009      	b.n	8009260 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800924c:	58024400 	.word	0x58024400
 8009250:	58024800 	.word	0x58024800
 8009254:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009258:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800925c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009260:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009268:	f002 0301 	and.w	r3, r2, #1
 800926c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009270:	2300      	movs	r3, #0
 8009272:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009276:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800927a:	460b      	mov	r3, r1
 800927c:	4313      	orrs	r3, r2
 800927e:	f000 8089 	beq.w	8009394 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009282:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009286:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009288:	2b28      	cmp	r3, #40	@ 0x28
 800928a:	d86b      	bhi.n	8009364 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800928c:	a201      	add	r2, pc, #4	@ (adr r2, 8009294 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800928e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009292:	bf00      	nop
 8009294:	0800936d 	.word	0x0800936d
 8009298:	08009365 	.word	0x08009365
 800929c:	08009365 	.word	0x08009365
 80092a0:	08009365 	.word	0x08009365
 80092a4:	08009365 	.word	0x08009365
 80092a8:	08009365 	.word	0x08009365
 80092ac:	08009365 	.word	0x08009365
 80092b0:	08009365 	.word	0x08009365
 80092b4:	08009339 	.word	0x08009339
 80092b8:	08009365 	.word	0x08009365
 80092bc:	08009365 	.word	0x08009365
 80092c0:	08009365 	.word	0x08009365
 80092c4:	08009365 	.word	0x08009365
 80092c8:	08009365 	.word	0x08009365
 80092cc:	08009365 	.word	0x08009365
 80092d0:	08009365 	.word	0x08009365
 80092d4:	0800934f 	.word	0x0800934f
 80092d8:	08009365 	.word	0x08009365
 80092dc:	08009365 	.word	0x08009365
 80092e0:	08009365 	.word	0x08009365
 80092e4:	08009365 	.word	0x08009365
 80092e8:	08009365 	.word	0x08009365
 80092ec:	08009365 	.word	0x08009365
 80092f0:	08009365 	.word	0x08009365
 80092f4:	0800936d 	.word	0x0800936d
 80092f8:	08009365 	.word	0x08009365
 80092fc:	08009365 	.word	0x08009365
 8009300:	08009365 	.word	0x08009365
 8009304:	08009365 	.word	0x08009365
 8009308:	08009365 	.word	0x08009365
 800930c:	08009365 	.word	0x08009365
 8009310:	08009365 	.word	0x08009365
 8009314:	0800936d 	.word	0x0800936d
 8009318:	08009365 	.word	0x08009365
 800931c:	08009365 	.word	0x08009365
 8009320:	08009365 	.word	0x08009365
 8009324:	08009365 	.word	0x08009365
 8009328:	08009365 	.word	0x08009365
 800932c:	08009365 	.word	0x08009365
 8009330:	08009365 	.word	0x08009365
 8009334:	0800936d 	.word	0x0800936d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009338:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800933c:	3308      	adds	r3, #8
 800933e:	2101      	movs	r1, #1
 8009340:	4618      	mov	r0, r3
 8009342:	f001 fe95 	bl	800b070 <RCCEx_PLL2_Config>
 8009346:	4603      	mov	r3, r0
 8009348:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800934c:	e00f      	b.n	800936e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800934e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009352:	3328      	adds	r3, #40	@ 0x28
 8009354:	2101      	movs	r1, #1
 8009356:	4618      	mov	r0, r3
 8009358:	f001 ff3c 	bl	800b1d4 <RCCEx_PLL3_Config>
 800935c:	4603      	mov	r3, r0
 800935e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009362:	e004      	b.n	800936e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009364:	2301      	movs	r3, #1
 8009366:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800936a:	e000      	b.n	800936e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800936c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800936e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009372:	2b00      	cmp	r3, #0
 8009374:	d10a      	bne.n	800938c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009376:	4bbf      	ldr	r3, [pc, #764]	@ (8009674 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009378:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800937a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800937e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009382:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009384:	4abb      	ldr	r2, [pc, #748]	@ (8009674 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009386:	430b      	orrs	r3, r1
 8009388:	6553      	str	r3, [r2, #84]	@ 0x54
 800938a:	e003      	b.n	8009394 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800938c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009390:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009394:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800939c:	f002 0302 	and.w	r3, r2, #2
 80093a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80093a4:	2300      	movs	r3, #0
 80093a6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80093aa:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80093ae:	460b      	mov	r3, r1
 80093b0:	4313      	orrs	r3, r2
 80093b2:	d041      	beq.n	8009438 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80093b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80093ba:	2b05      	cmp	r3, #5
 80093bc:	d824      	bhi.n	8009408 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80093be:	a201      	add	r2, pc, #4	@ (adr r2, 80093c4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80093c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093c4:	08009411 	.word	0x08009411
 80093c8:	080093dd 	.word	0x080093dd
 80093cc:	080093f3 	.word	0x080093f3
 80093d0:	08009411 	.word	0x08009411
 80093d4:	08009411 	.word	0x08009411
 80093d8:	08009411 	.word	0x08009411
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80093dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093e0:	3308      	adds	r3, #8
 80093e2:	2101      	movs	r1, #1
 80093e4:	4618      	mov	r0, r3
 80093e6:	f001 fe43 	bl	800b070 <RCCEx_PLL2_Config>
 80093ea:	4603      	mov	r3, r0
 80093ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80093f0:	e00f      	b.n	8009412 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80093f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093f6:	3328      	adds	r3, #40	@ 0x28
 80093f8:	2101      	movs	r1, #1
 80093fa:	4618      	mov	r0, r3
 80093fc:	f001 feea 	bl	800b1d4 <RCCEx_PLL3_Config>
 8009400:	4603      	mov	r3, r0
 8009402:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009406:	e004      	b.n	8009412 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009408:	2301      	movs	r3, #1
 800940a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800940e:	e000      	b.n	8009412 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8009410:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009412:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009416:	2b00      	cmp	r3, #0
 8009418:	d10a      	bne.n	8009430 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800941a:	4b96      	ldr	r3, [pc, #600]	@ (8009674 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800941c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800941e:	f023 0107 	bic.w	r1, r3, #7
 8009422:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009426:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009428:	4a92      	ldr	r2, [pc, #584]	@ (8009674 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800942a:	430b      	orrs	r3, r1
 800942c:	6553      	str	r3, [r2, #84]	@ 0x54
 800942e:	e003      	b.n	8009438 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009430:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009434:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009438:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800943c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009440:	f002 0304 	and.w	r3, r2, #4
 8009444:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009448:	2300      	movs	r3, #0
 800944a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800944e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8009452:	460b      	mov	r3, r1
 8009454:	4313      	orrs	r3, r2
 8009456:	d044      	beq.n	80094e2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009458:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800945c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009460:	2b05      	cmp	r3, #5
 8009462:	d825      	bhi.n	80094b0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8009464:	a201      	add	r2, pc, #4	@ (adr r2, 800946c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8009466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800946a:	bf00      	nop
 800946c:	080094b9 	.word	0x080094b9
 8009470:	08009485 	.word	0x08009485
 8009474:	0800949b 	.word	0x0800949b
 8009478:	080094b9 	.word	0x080094b9
 800947c:	080094b9 	.word	0x080094b9
 8009480:	080094b9 	.word	0x080094b9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009484:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009488:	3308      	adds	r3, #8
 800948a:	2101      	movs	r1, #1
 800948c:	4618      	mov	r0, r3
 800948e:	f001 fdef 	bl	800b070 <RCCEx_PLL2_Config>
 8009492:	4603      	mov	r3, r0
 8009494:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009498:	e00f      	b.n	80094ba <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800949a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800949e:	3328      	adds	r3, #40	@ 0x28
 80094a0:	2101      	movs	r1, #1
 80094a2:	4618      	mov	r0, r3
 80094a4:	f001 fe96 	bl	800b1d4 <RCCEx_PLL3_Config>
 80094a8:	4603      	mov	r3, r0
 80094aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80094ae:	e004      	b.n	80094ba <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80094b0:	2301      	movs	r3, #1
 80094b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80094b6:	e000      	b.n	80094ba <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80094b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d10b      	bne.n	80094da <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80094c2:	4b6c      	ldr	r3, [pc, #432]	@ (8009674 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80094c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094c6:	f023 0107 	bic.w	r1, r3, #7
 80094ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80094d2:	4a68      	ldr	r2, [pc, #416]	@ (8009674 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80094d4:	430b      	orrs	r3, r1
 80094d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80094d8:	e003      	b.n	80094e2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80094de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80094e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ea:	f002 0320 	and.w	r3, r2, #32
 80094ee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80094f2:	2300      	movs	r3, #0
 80094f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80094f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80094fc:	460b      	mov	r3, r1
 80094fe:	4313      	orrs	r3, r2
 8009500:	d055      	beq.n	80095ae <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009502:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009506:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800950a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800950e:	d033      	beq.n	8009578 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8009510:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009514:	d82c      	bhi.n	8009570 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009516:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800951a:	d02f      	beq.n	800957c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800951c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009520:	d826      	bhi.n	8009570 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009522:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009526:	d02b      	beq.n	8009580 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8009528:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800952c:	d820      	bhi.n	8009570 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800952e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009532:	d012      	beq.n	800955a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009534:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009538:	d81a      	bhi.n	8009570 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800953a:	2b00      	cmp	r3, #0
 800953c:	d022      	beq.n	8009584 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800953e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009542:	d115      	bne.n	8009570 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009544:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009548:	3308      	adds	r3, #8
 800954a:	2100      	movs	r1, #0
 800954c:	4618      	mov	r0, r3
 800954e:	f001 fd8f 	bl	800b070 <RCCEx_PLL2_Config>
 8009552:	4603      	mov	r3, r0
 8009554:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009558:	e015      	b.n	8009586 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800955a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800955e:	3328      	adds	r3, #40	@ 0x28
 8009560:	2102      	movs	r1, #2
 8009562:	4618      	mov	r0, r3
 8009564:	f001 fe36 	bl	800b1d4 <RCCEx_PLL3_Config>
 8009568:	4603      	mov	r3, r0
 800956a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800956e:	e00a      	b.n	8009586 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009570:	2301      	movs	r3, #1
 8009572:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009576:	e006      	b.n	8009586 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009578:	bf00      	nop
 800957a:	e004      	b.n	8009586 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800957c:	bf00      	nop
 800957e:	e002      	b.n	8009586 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009580:	bf00      	nop
 8009582:	e000      	b.n	8009586 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009584:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009586:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800958a:	2b00      	cmp	r3, #0
 800958c:	d10b      	bne.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800958e:	4b39      	ldr	r3, [pc, #228]	@ (8009674 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009590:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009592:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009596:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800959a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800959e:	4a35      	ldr	r2, [pc, #212]	@ (8009674 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80095a0:	430b      	orrs	r3, r1
 80095a2:	6553      	str	r3, [r2, #84]	@ 0x54
 80095a4:	e003      	b.n	80095ae <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80095aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80095ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095b6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80095ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80095be:	2300      	movs	r3, #0
 80095c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80095c4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80095c8:	460b      	mov	r3, r1
 80095ca:	4313      	orrs	r3, r2
 80095cc:	d058      	beq.n	8009680 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80095ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80095d6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80095da:	d033      	beq.n	8009644 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80095dc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80095e0:	d82c      	bhi.n	800963c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80095e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80095e6:	d02f      	beq.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80095e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80095ec:	d826      	bhi.n	800963c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80095ee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80095f2:	d02b      	beq.n	800964c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80095f4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80095f8:	d820      	bhi.n	800963c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80095fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80095fe:	d012      	beq.n	8009626 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8009600:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009604:	d81a      	bhi.n	800963c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009606:	2b00      	cmp	r3, #0
 8009608:	d022      	beq.n	8009650 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800960a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800960e:	d115      	bne.n	800963c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009610:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009614:	3308      	adds	r3, #8
 8009616:	2100      	movs	r1, #0
 8009618:	4618      	mov	r0, r3
 800961a:	f001 fd29 	bl	800b070 <RCCEx_PLL2_Config>
 800961e:	4603      	mov	r3, r0
 8009620:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009624:	e015      	b.n	8009652 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009626:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800962a:	3328      	adds	r3, #40	@ 0x28
 800962c:	2102      	movs	r1, #2
 800962e:	4618      	mov	r0, r3
 8009630:	f001 fdd0 	bl	800b1d4 <RCCEx_PLL3_Config>
 8009634:	4603      	mov	r3, r0
 8009636:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800963a:	e00a      	b.n	8009652 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800963c:	2301      	movs	r3, #1
 800963e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009642:	e006      	b.n	8009652 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009644:	bf00      	nop
 8009646:	e004      	b.n	8009652 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009648:	bf00      	nop
 800964a:	e002      	b.n	8009652 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800964c:	bf00      	nop
 800964e:	e000      	b.n	8009652 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009650:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009652:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009656:	2b00      	cmp	r3, #0
 8009658:	d10e      	bne.n	8009678 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800965a:	4b06      	ldr	r3, [pc, #24]	@ (8009674 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800965c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800965e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8009662:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009666:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800966a:	4a02      	ldr	r2, [pc, #8]	@ (8009674 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800966c:	430b      	orrs	r3, r1
 800966e:	6593      	str	r3, [r2, #88]	@ 0x58
 8009670:	e006      	b.n	8009680 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8009672:	bf00      	nop
 8009674:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009678:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800967c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009680:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009688:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800968c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009690:	2300      	movs	r3, #0
 8009692:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009696:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800969a:	460b      	mov	r3, r1
 800969c:	4313      	orrs	r3, r2
 800969e:	d055      	beq.n	800974c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80096a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80096a8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80096ac:	d033      	beq.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80096ae:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80096b2:	d82c      	bhi.n	800970e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80096b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80096b8:	d02f      	beq.n	800971a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80096ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80096be:	d826      	bhi.n	800970e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80096c0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80096c4:	d02b      	beq.n	800971e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80096c6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80096ca:	d820      	bhi.n	800970e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80096cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80096d0:	d012      	beq.n	80096f8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80096d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80096d6:	d81a      	bhi.n	800970e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d022      	beq.n	8009722 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80096dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80096e0:	d115      	bne.n	800970e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80096e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096e6:	3308      	adds	r3, #8
 80096e8:	2100      	movs	r1, #0
 80096ea:	4618      	mov	r0, r3
 80096ec:	f001 fcc0 	bl	800b070 <RCCEx_PLL2_Config>
 80096f0:	4603      	mov	r3, r0
 80096f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80096f6:	e015      	b.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80096f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096fc:	3328      	adds	r3, #40	@ 0x28
 80096fe:	2102      	movs	r1, #2
 8009700:	4618      	mov	r0, r3
 8009702:	f001 fd67 	bl	800b1d4 <RCCEx_PLL3_Config>
 8009706:	4603      	mov	r3, r0
 8009708:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800970c:	e00a      	b.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800970e:	2301      	movs	r3, #1
 8009710:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009714:	e006      	b.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009716:	bf00      	nop
 8009718:	e004      	b.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800971a:	bf00      	nop
 800971c:	e002      	b.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800971e:	bf00      	nop
 8009720:	e000      	b.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009722:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009724:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009728:	2b00      	cmp	r3, #0
 800972a:	d10b      	bne.n	8009744 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800972c:	4ba1      	ldr	r3, [pc, #644]	@ (80099b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800972e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009730:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8009734:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009738:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800973c:	4a9d      	ldr	r2, [pc, #628]	@ (80099b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800973e:	430b      	orrs	r3, r1
 8009740:	6593      	str	r3, [r2, #88]	@ 0x58
 8009742:	e003      	b.n	800974c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009744:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009748:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800974c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009754:	f002 0308 	and.w	r3, r2, #8
 8009758:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800975c:	2300      	movs	r3, #0
 800975e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009762:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8009766:	460b      	mov	r3, r1
 8009768:	4313      	orrs	r3, r2
 800976a:	d01e      	beq.n	80097aa <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800976c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009770:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009774:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009778:	d10c      	bne.n	8009794 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800977a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800977e:	3328      	adds	r3, #40	@ 0x28
 8009780:	2102      	movs	r1, #2
 8009782:	4618      	mov	r0, r3
 8009784:	f001 fd26 	bl	800b1d4 <RCCEx_PLL3_Config>
 8009788:	4603      	mov	r3, r0
 800978a:	2b00      	cmp	r3, #0
 800978c:	d002      	beq.n	8009794 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800978e:	2301      	movs	r3, #1
 8009790:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009794:	4b87      	ldr	r3, [pc, #540]	@ (80099b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009796:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009798:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800979c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80097a4:	4a83      	ldr	r2, [pc, #524]	@ (80099b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80097a6:	430b      	orrs	r3, r1
 80097a8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80097aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097b2:	f002 0310 	and.w	r3, r2, #16
 80097b6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80097ba:	2300      	movs	r3, #0
 80097bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80097c0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80097c4:	460b      	mov	r3, r1
 80097c6:	4313      	orrs	r3, r2
 80097c8:	d01e      	beq.n	8009808 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80097ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80097d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80097d6:	d10c      	bne.n	80097f2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80097d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097dc:	3328      	adds	r3, #40	@ 0x28
 80097de:	2102      	movs	r1, #2
 80097e0:	4618      	mov	r0, r3
 80097e2:	f001 fcf7 	bl	800b1d4 <RCCEx_PLL3_Config>
 80097e6:	4603      	mov	r3, r0
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d002      	beq.n	80097f2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80097ec:	2301      	movs	r3, #1
 80097ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80097f2:	4b70      	ldr	r3, [pc, #448]	@ (80099b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80097f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097f6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80097fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009802:	4a6c      	ldr	r2, [pc, #432]	@ (80099b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009804:	430b      	orrs	r3, r1
 8009806:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009808:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800980c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009810:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8009814:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009818:	2300      	movs	r3, #0
 800981a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800981e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8009822:	460b      	mov	r3, r1
 8009824:	4313      	orrs	r3, r2
 8009826:	d03e      	beq.n	80098a6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009828:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800982c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009830:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009834:	d022      	beq.n	800987c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8009836:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800983a:	d81b      	bhi.n	8009874 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800983c:	2b00      	cmp	r3, #0
 800983e:	d003      	beq.n	8009848 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8009840:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009844:	d00b      	beq.n	800985e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8009846:	e015      	b.n	8009874 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009848:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800984c:	3308      	adds	r3, #8
 800984e:	2100      	movs	r1, #0
 8009850:	4618      	mov	r0, r3
 8009852:	f001 fc0d 	bl	800b070 <RCCEx_PLL2_Config>
 8009856:	4603      	mov	r3, r0
 8009858:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800985c:	e00f      	b.n	800987e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800985e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009862:	3328      	adds	r3, #40	@ 0x28
 8009864:	2102      	movs	r1, #2
 8009866:	4618      	mov	r0, r3
 8009868:	f001 fcb4 	bl	800b1d4 <RCCEx_PLL3_Config>
 800986c:	4603      	mov	r3, r0
 800986e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009872:	e004      	b.n	800987e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009874:	2301      	movs	r3, #1
 8009876:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800987a:	e000      	b.n	800987e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800987c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800987e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009882:	2b00      	cmp	r3, #0
 8009884:	d10b      	bne.n	800989e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009886:	4b4b      	ldr	r3, [pc, #300]	@ (80099b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800988a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800988e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009892:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009896:	4a47      	ldr	r2, [pc, #284]	@ (80099b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009898:	430b      	orrs	r3, r1
 800989a:	6593      	str	r3, [r2, #88]	@ 0x58
 800989c:	e003      	b.n	80098a6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800989e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80098a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80098a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ae:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80098b2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80098b4:	2300      	movs	r3, #0
 80098b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80098b8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80098bc:	460b      	mov	r3, r1
 80098be:	4313      	orrs	r3, r2
 80098c0:	d03b      	beq.n	800993a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80098c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80098ca:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80098ce:	d01f      	beq.n	8009910 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80098d0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80098d4:	d818      	bhi.n	8009908 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80098d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80098da:	d003      	beq.n	80098e4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80098dc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80098e0:	d007      	beq.n	80098f2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80098e2:	e011      	b.n	8009908 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098e4:	4b33      	ldr	r3, [pc, #204]	@ (80099b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80098e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098e8:	4a32      	ldr	r2, [pc, #200]	@ (80099b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80098ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80098ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80098f0:	e00f      	b.n	8009912 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80098f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098f6:	3328      	adds	r3, #40	@ 0x28
 80098f8:	2101      	movs	r1, #1
 80098fa:	4618      	mov	r0, r3
 80098fc:	f001 fc6a 	bl	800b1d4 <RCCEx_PLL3_Config>
 8009900:	4603      	mov	r3, r0
 8009902:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8009906:	e004      	b.n	8009912 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009908:	2301      	movs	r3, #1
 800990a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800990e:	e000      	b.n	8009912 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8009910:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009912:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009916:	2b00      	cmp	r3, #0
 8009918:	d10b      	bne.n	8009932 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800991a:	4b26      	ldr	r3, [pc, #152]	@ (80099b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800991c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800991e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009922:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009926:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800992a:	4a22      	ldr	r2, [pc, #136]	@ (80099b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800992c:	430b      	orrs	r3, r1
 800992e:	6553      	str	r3, [r2, #84]	@ 0x54
 8009930:	e003      	b.n	800993a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009932:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009936:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800993a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800993e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009942:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8009946:	673b      	str	r3, [r7, #112]	@ 0x70
 8009948:	2300      	movs	r3, #0
 800994a:	677b      	str	r3, [r7, #116]	@ 0x74
 800994c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8009950:	460b      	mov	r3, r1
 8009952:	4313      	orrs	r3, r2
 8009954:	d034      	beq.n	80099c0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009956:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800995a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800995c:	2b00      	cmp	r3, #0
 800995e:	d003      	beq.n	8009968 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8009960:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009964:	d007      	beq.n	8009976 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8009966:	e011      	b.n	800998c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009968:	4b12      	ldr	r3, [pc, #72]	@ (80099b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800996a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800996c:	4a11      	ldr	r2, [pc, #68]	@ (80099b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800996e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009972:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009974:	e00e      	b.n	8009994 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009976:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800997a:	3308      	adds	r3, #8
 800997c:	2102      	movs	r1, #2
 800997e:	4618      	mov	r0, r3
 8009980:	f001 fb76 	bl	800b070 <RCCEx_PLL2_Config>
 8009984:	4603      	mov	r3, r0
 8009986:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800998a:	e003      	b.n	8009994 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800998c:	2301      	movs	r3, #1
 800998e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009992:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009994:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009998:	2b00      	cmp	r3, #0
 800999a:	d10d      	bne.n	80099b8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800999c:	4b05      	ldr	r3, [pc, #20]	@ (80099b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800999e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80099a0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80099a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80099aa:	4a02      	ldr	r2, [pc, #8]	@ (80099b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80099ac:	430b      	orrs	r3, r1
 80099ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80099b0:	e006      	b.n	80099c0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80099b2:	bf00      	nop
 80099b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80099bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80099c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80099cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80099ce:	2300      	movs	r3, #0
 80099d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80099d2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80099d6:	460b      	mov	r3, r1
 80099d8:	4313      	orrs	r3, r2
 80099da:	d00c      	beq.n	80099f6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80099dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099e0:	3328      	adds	r3, #40	@ 0x28
 80099e2:	2102      	movs	r1, #2
 80099e4:	4618      	mov	r0, r3
 80099e6:	f001 fbf5 	bl	800b1d4 <RCCEx_PLL3_Config>
 80099ea:	4603      	mov	r3, r0
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d002      	beq.n	80099f6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80099f0:	2301      	movs	r3, #1
 80099f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80099f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099fe:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8009a02:	663b      	str	r3, [r7, #96]	@ 0x60
 8009a04:	2300      	movs	r3, #0
 8009a06:	667b      	str	r3, [r7, #100]	@ 0x64
 8009a08:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8009a0c:	460b      	mov	r3, r1
 8009a0e:	4313      	orrs	r3, r2
 8009a10:	d038      	beq.n	8009a84 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a1a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009a1e:	d018      	beq.n	8009a52 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8009a20:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009a24:	d811      	bhi.n	8009a4a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009a26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009a2a:	d014      	beq.n	8009a56 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8009a2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009a30:	d80b      	bhi.n	8009a4a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d011      	beq.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8009a36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009a3a:	d106      	bne.n	8009a4a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a3c:	4bc3      	ldr	r3, [pc, #780]	@ (8009d4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a40:	4ac2      	ldr	r2, [pc, #776]	@ (8009d4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009a42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009a46:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009a48:	e008      	b.n	8009a5c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009a50:	e004      	b.n	8009a5c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009a52:	bf00      	nop
 8009a54:	e002      	b.n	8009a5c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009a56:	bf00      	nop
 8009a58:	e000      	b.n	8009a5c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009a5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d10b      	bne.n	8009a7c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009a64:	4bb9      	ldr	r3, [pc, #740]	@ (8009d4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009a66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a68:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009a6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a74:	4ab5      	ldr	r2, [pc, #724]	@ (8009d4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009a76:	430b      	orrs	r3, r1
 8009a78:	6553      	str	r3, [r2, #84]	@ 0x54
 8009a7a:	e003      	b.n	8009a84 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a8c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8009a90:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009a92:	2300      	movs	r3, #0
 8009a94:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009a96:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8009a9a:	460b      	mov	r3, r1
 8009a9c:	4313      	orrs	r3, r2
 8009a9e:	d009      	beq.n	8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009aa0:	4baa      	ldr	r3, [pc, #680]	@ (8009d4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009aa2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009aa4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009aa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009aac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009aae:	4aa7      	ldr	r2, [pc, #668]	@ (8009d4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009ab0:	430b      	orrs	r3, r1
 8009ab2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009ab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009abc:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8009ac0:	653b      	str	r3, [r7, #80]	@ 0x50
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	657b      	str	r3, [r7, #84]	@ 0x54
 8009ac6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8009aca:	460b      	mov	r3, r1
 8009acc:	4313      	orrs	r3, r2
 8009ace:	d00a      	beq.n	8009ae6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009ad0:	4b9e      	ldr	r3, [pc, #632]	@ (8009d4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009ad2:	691b      	ldr	r3, [r3, #16]
 8009ad4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8009ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009adc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009ae0:	4a9a      	ldr	r2, [pc, #616]	@ (8009d4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009ae2:	430b      	orrs	r3, r1
 8009ae4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aee:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8009af2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009af4:	2300      	movs	r3, #0
 8009af6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009af8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8009afc:	460b      	mov	r3, r1
 8009afe:	4313      	orrs	r3, r2
 8009b00:	d009      	beq.n	8009b16 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009b02:	4b92      	ldr	r3, [pc, #584]	@ (8009d4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009b04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b06:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8009b0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b10:	4a8e      	ldr	r2, [pc, #568]	@ (8009d4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009b12:	430b      	orrs	r3, r1
 8009b14:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b1e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8009b22:	643b      	str	r3, [r7, #64]	@ 0x40
 8009b24:	2300      	movs	r3, #0
 8009b26:	647b      	str	r3, [r7, #68]	@ 0x44
 8009b28:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009b2c:	460b      	mov	r3, r1
 8009b2e:	4313      	orrs	r3, r2
 8009b30:	d00e      	beq.n	8009b50 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009b32:	4b86      	ldr	r3, [pc, #536]	@ (8009d4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009b34:	691b      	ldr	r3, [r3, #16]
 8009b36:	4a85      	ldr	r2, [pc, #532]	@ (8009d4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009b38:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009b3c:	6113      	str	r3, [r2, #16]
 8009b3e:	4b83      	ldr	r3, [pc, #524]	@ (8009d4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009b40:	6919      	ldr	r1, [r3, #16]
 8009b42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b46:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009b4a:	4a80      	ldr	r2, [pc, #512]	@ (8009d4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009b4c:	430b      	orrs	r3, r1
 8009b4e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009b50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b58:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8009b5c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009b5e:	2300      	movs	r3, #0
 8009b60:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009b62:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8009b66:	460b      	mov	r3, r1
 8009b68:	4313      	orrs	r3, r2
 8009b6a:	d009      	beq.n	8009b80 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009b6c:	4b77      	ldr	r3, [pc, #476]	@ (8009d4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009b6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b70:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b7a:	4a74      	ldr	r2, [pc, #464]	@ (8009d4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009b7c:	430b      	orrs	r3, r1
 8009b7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b88:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8009b8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8009b8e:	2300      	movs	r3, #0
 8009b90:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b92:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8009b96:	460b      	mov	r3, r1
 8009b98:	4313      	orrs	r3, r2
 8009b9a:	d00a      	beq.n	8009bb2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009b9c:	4b6b      	ldr	r3, [pc, #428]	@ (8009d4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009b9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ba0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8009ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ba8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009bac:	4a67      	ldr	r2, [pc, #412]	@ (8009d4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009bae:	430b      	orrs	r3, r1
 8009bb0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bba:	2100      	movs	r1, #0
 8009bbc:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009bbe:	f003 0301 	and.w	r3, r3, #1
 8009bc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009bc4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8009bc8:	460b      	mov	r3, r1
 8009bca:	4313      	orrs	r3, r2
 8009bcc:	d011      	beq.n	8009bf2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bd2:	3308      	adds	r3, #8
 8009bd4:	2100      	movs	r1, #0
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	f001 fa4a 	bl	800b070 <RCCEx_PLL2_Config>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009be2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d003      	beq.n	8009bf2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009bee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bfa:	2100      	movs	r1, #0
 8009bfc:	6239      	str	r1, [r7, #32]
 8009bfe:	f003 0302 	and.w	r3, r3, #2
 8009c02:	627b      	str	r3, [r7, #36]	@ 0x24
 8009c04:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009c08:	460b      	mov	r3, r1
 8009c0a:	4313      	orrs	r3, r2
 8009c0c:	d011      	beq.n	8009c32 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c12:	3308      	adds	r3, #8
 8009c14:	2101      	movs	r1, #1
 8009c16:	4618      	mov	r0, r3
 8009c18:	f001 fa2a 	bl	800b070 <RCCEx_PLL2_Config>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009c22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d003      	beq.n	8009c32 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c3a:	2100      	movs	r1, #0
 8009c3c:	61b9      	str	r1, [r7, #24]
 8009c3e:	f003 0304 	and.w	r3, r3, #4
 8009c42:	61fb      	str	r3, [r7, #28]
 8009c44:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009c48:	460b      	mov	r3, r1
 8009c4a:	4313      	orrs	r3, r2
 8009c4c:	d011      	beq.n	8009c72 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c52:	3308      	adds	r3, #8
 8009c54:	2102      	movs	r1, #2
 8009c56:	4618      	mov	r0, r3
 8009c58:	f001 fa0a 	bl	800b070 <RCCEx_PLL2_Config>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009c62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d003      	beq.n	8009c72 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c7a:	2100      	movs	r1, #0
 8009c7c:	6139      	str	r1, [r7, #16]
 8009c7e:	f003 0308 	and.w	r3, r3, #8
 8009c82:	617b      	str	r3, [r7, #20]
 8009c84:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009c88:	460b      	mov	r3, r1
 8009c8a:	4313      	orrs	r3, r2
 8009c8c:	d011      	beq.n	8009cb2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c92:	3328      	adds	r3, #40	@ 0x28
 8009c94:	2100      	movs	r1, #0
 8009c96:	4618      	mov	r0, r3
 8009c98:	f001 fa9c 	bl	800b1d4 <RCCEx_PLL3_Config>
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8009ca2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d003      	beq.n	8009cb2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009caa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009cae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cba:	2100      	movs	r1, #0
 8009cbc:	60b9      	str	r1, [r7, #8]
 8009cbe:	f003 0310 	and.w	r3, r3, #16
 8009cc2:	60fb      	str	r3, [r7, #12]
 8009cc4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009cc8:	460b      	mov	r3, r1
 8009cca:	4313      	orrs	r3, r2
 8009ccc:	d011      	beq.n	8009cf2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cd2:	3328      	adds	r3, #40	@ 0x28
 8009cd4:	2101      	movs	r1, #1
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	f001 fa7c 	bl	800b1d4 <RCCEx_PLL3_Config>
 8009cdc:	4603      	mov	r3, r0
 8009cde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009ce2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d003      	beq.n	8009cf2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009cee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cfa:	2100      	movs	r1, #0
 8009cfc:	6039      	str	r1, [r7, #0]
 8009cfe:	f003 0320 	and.w	r3, r3, #32
 8009d02:	607b      	str	r3, [r7, #4]
 8009d04:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009d08:	460b      	mov	r3, r1
 8009d0a:	4313      	orrs	r3, r2
 8009d0c:	d011      	beq.n	8009d32 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d12:	3328      	adds	r3, #40	@ 0x28
 8009d14:	2102      	movs	r1, #2
 8009d16:	4618      	mov	r0, r3
 8009d18:	f001 fa5c 	bl	800b1d4 <RCCEx_PLL3_Config>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009d22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d003      	beq.n	8009d32 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8009d32:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d101      	bne.n	8009d3e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	e000      	b.n	8009d40 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8009d3e:	2301      	movs	r3, #1
}
 8009d40:	4618      	mov	r0, r3
 8009d42:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8009d46:	46bd      	mov	sp, r7
 8009d48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009d4c:	58024400 	.word	0x58024400

08009d50 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b090      	sub	sp, #64	@ 0x40
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009d5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d5e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8009d62:	430b      	orrs	r3, r1
 8009d64:	f040 8094 	bne.w	8009e90 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8009d68:	4b9e      	ldr	r3, [pc, #632]	@ (8009fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009d6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d6c:	f003 0307 	and.w	r3, r3, #7
 8009d70:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d74:	2b04      	cmp	r3, #4
 8009d76:	f200 8087 	bhi.w	8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8009d7a:	a201      	add	r2, pc, #4	@ (adr r2, 8009d80 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8009d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d80:	08009d95 	.word	0x08009d95
 8009d84:	08009dbd 	.word	0x08009dbd
 8009d88:	08009de5 	.word	0x08009de5
 8009d8c:	08009e81 	.word	0x08009e81
 8009d90:	08009e0d 	.word	0x08009e0d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009d94:	4b93      	ldr	r3, [pc, #588]	@ (8009fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009d9c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009da0:	d108      	bne.n	8009db4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009da2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009da6:	4618      	mov	r0, r3
 8009da8:	f001 f810 	bl	800adcc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009db0:	f000 bd45 	b.w	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009db4:	2300      	movs	r3, #0
 8009db6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009db8:	f000 bd41 	b.w	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009dbc:	4b89      	ldr	r3, [pc, #548]	@ (8009fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009dc4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009dc8:	d108      	bne.n	8009ddc <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009dca:	f107 0318 	add.w	r3, r7, #24
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f000 fd54 	bl	800a87c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009dd4:	69bb      	ldr	r3, [r7, #24]
 8009dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009dd8:	f000 bd31 	b.w	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009ddc:	2300      	movs	r3, #0
 8009dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009de0:	f000 bd2d 	b.w	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009de4:	4b7f      	ldr	r3, [pc, #508]	@ (8009fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009dec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009df0:	d108      	bne.n	8009e04 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009df2:	f107 030c 	add.w	r3, r7, #12
 8009df6:	4618      	mov	r0, r3
 8009df8:	f000 fe94 	bl	800ab24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e00:	f000 bd1d 	b.w	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009e04:	2300      	movs	r3, #0
 8009e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e08:	f000 bd19 	b.w	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009e0c:	4b75      	ldr	r3, [pc, #468]	@ (8009fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009e0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e10:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009e14:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009e16:	4b73      	ldr	r3, [pc, #460]	@ (8009fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	f003 0304 	and.w	r3, r3, #4
 8009e1e:	2b04      	cmp	r3, #4
 8009e20:	d10c      	bne.n	8009e3c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8009e22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d109      	bne.n	8009e3c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009e28:	4b6e      	ldr	r3, [pc, #440]	@ (8009fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	08db      	lsrs	r3, r3, #3
 8009e2e:	f003 0303 	and.w	r3, r3, #3
 8009e32:	4a6d      	ldr	r2, [pc, #436]	@ (8009fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009e34:	fa22 f303 	lsr.w	r3, r2, r3
 8009e38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009e3a:	e01f      	b.n	8009e7c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009e3c:	4b69      	ldr	r3, [pc, #420]	@ (8009fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e48:	d106      	bne.n	8009e58 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8009e4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e4c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009e50:	d102      	bne.n	8009e58 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009e52:	4b66      	ldr	r3, [pc, #408]	@ (8009fec <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009e54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009e56:	e011      	b.n	8009e7c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009e58:	4b62      	ldr	r3, [pc, #392]	@ (8009fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009e60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009e64:	d106      	bne.n	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8009e66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009e6c:	d102      	bne.n	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009e6e:	4b60      	ldr	r3, [pc, #384]	@ (8009ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009e70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009e72:	e003      	b.n	8009e7c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009e74:	2300      	movs	r3, #0
 8009e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009e78:	f000 bce1 	b.w	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009e7c:	f000 bcdf 	b.w	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009e80:	4b5c      	ldr	r3, [pc, #368]	@ (8009ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009e82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e84:	f000 bcdb 	b.w	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009e88:	2300      	movs	r3, #0
 8009e8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e8c:	f000 bcd7 	b.w	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8009e90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e94:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8009e98:	430b      	orrs	r3, r1
 8009e9a:	f040 80ad 	bne.w	8009ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8009e9e:	4b51      	ldr	r3, [pc, #324]	@ (8009fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009ea0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ea2:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8009ea6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eaa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009eae:	d056      	beq.n	8009f5e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8009eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009eb6:	f200 8090 	bhi.w	8009fda <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ebc:	2bc0      	cmp	r3, #192	@ 0xc0
 8009ebe:	f000 8088 	beq.w	8009fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8009ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ec4:	2bc0      	cmp	r3, #192	@ 0xc0
 8009ec6:	f200 8088 	bhi.w	8009fda <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ecc:	2b80      	cmp	r3, #128	@ 0x80
 8009ece:	d032      	beq.n	8009f36 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8009ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ed2:	2b80      	cmp	r3, #128	@ 0x80
 8009ed4:	f200 8081 	bhi.w	8009fda <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d003      	beq.n	8009ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8009ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ee0:	2b40      	cmp	r3, #64	@ 0x40
 8009ee2:	d014      	beq.n	8009f0e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8009ee4:	e079      	b.n	8009fda <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009ee6:	4b3f      	ldr	r3, [pc, #252]	@ (8009fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009eee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009ef2:	d108      	bne.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009ef4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009ef8:	4618      	mov	r0, r3
 8009efa:	f000 ff67 	bl	800adcc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f02:	f000 bc9c 	b.w	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f06:	2300      	movs	r3, #0
 8009f08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f0a:	f000 bc98 	b.w	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009f0e:	4b35      	ldr	r3, [pc, #212]	@ (8009fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009f16:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009f1a:	d108      	bne.n	8009f2e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f1c:	f107 0318 	add.w	r3, r7, #24
 8009f20:	4618      	mov	r0, r3
 8009f22:	f000 fcab 	bl	800a87c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009f26:	69bb      	ldr	r3, [r7, #24]
 8009f28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f2a:	f000 bc88 	b.w	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f2e:	2300      	movs	r3, #0
 8009f30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f32:	f000 bc84 	b.w	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009f36:	4b2b      	ldr	r3, [pc, #172]	@ (8009fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009f3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009f42:	d108      	bne.n	8009f56 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f44:	f107 030c 	add.w	r3, r7, #12
 8009f48:	4618      	mov	r0, r3
 8009f4a:	f000 fdeb 	bl	800ab24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f52:	f000 bc74 	b.w	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f56:	2300      	movs	r3, #0
 8009f58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f5a:	f000 bc70 	b.w	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009f5e:	4b21      	ldr	r3, [pc, #132]	@ (8009fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009f60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009f62:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009f66:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009f68:	4b1e      	ldr	r3, [pc, #120]	@ (8009fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f003 0304 	and.w	r3, r3, #4
 8009f70:	2b04      	cmp	r3, #4
 8009f72:	d10c      	bne.n	8009f8e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8009f74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d109      	bne.n	8009f8e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009f7a:	4b1a      	ldr	r3, [pc, #104]	@ (8009fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	08db      	lsrs	r3, r3, #3
 8009f80:	f003 0303 	and.w	r3, r3, #3
 8009f84:	4a18      	ldr	r2, [pc, #96]	@ (8009fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009f86:	fa22 f303 	lsr.w	r3, r2, r3
 8009f8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009f8c:	e01f      	b.n	8009fce <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009f8e:	4b15      	ldr	r3, [pc, #84]	@ (8009fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f9a:	d106      	bne.n	8009faa <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8009f9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f9e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009fa2:	d102      	bne.n	8009faa <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009fa4:	4b11      	ldr	r3, [pc, #68]	@ (8009fec <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009fa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009fa8:	e011      	b.n	8009fce <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009faa:	4b0e      	ldr	r3, [pc, #56]	@ (8009fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009fb2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009fb6:	d106      	bne.n	8009fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8009fb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009fbe:	d102      	bne.n	8009fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009fc0:	4b0b      	ldr	r3, [pc, #44]	@ (8009ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009fc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009fc4:	e003      	b.n	8009fce <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009fca:	f000 bc38 	b.w	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009fce:	f000 bc36 	b.w	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009fd2:	4b08      	ldr	r3, [pc, #32]	@ (8009ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009fd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009fd6:	f000 bc32 	b.w	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009fda:	2300      	movs	r3, #0
 8009fdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009fde:	f000 bc2e 	b.w	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009fe2:	bf00      	nop
 8009fe4:	58024400 	.word	0x58024400
 8009fe8:	03d09000 	.word	0x03d09000
 8009fec:	003d0900 	.word	0x003d0900
 8009ff0:	017d7840 	.word	0x017d7840
 8009ff4:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009ff8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ffc:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800a000:	430b      	orrs	r3, r1
 800a002:	f040 809c 	bne.w	800a13e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a006:	4b9e      	ldr	r3, [pc, #632]	@ (800a280 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a008:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a00a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800a00e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a012:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a016:	d054      	beq.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800a018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a01a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a01e:	f200 808b 	bhi.w	800a138 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a024:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a028:	f000 8083 	beq.w	800a132 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800a02c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a02e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a032:	f200 8081 	bhi.w	800a138 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a038:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a03c:	d02f      	beq.n	800a09e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800a03e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a040:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a044:	d878      	bhi.n	800a138 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d004      	beq.n	800a056 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800a04c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a04e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a052:	d012      	beq.n	800a07a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800a054:	e070      	b.n	800a138 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a056:	4b8a      	ldr	r3, [pc, #552]	@ (800a280 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a05e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a062:	d107      	bne.n	800a074 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a064:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a068:	4618      	mov	r0, r3
 800a06a:	f000 feaf 	bl	800adcc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a06e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a070:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a072:	e3e4      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a074:	2300      	movs	r3, #0
 800a076:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a078:	e3e1      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a07a:	4b81      	ldr	r3, [pc, #516]	@ (800a280 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a082:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a086:	d107      	bne.n	800a098 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a088:	f107 0318 	add.w	r3, r7, #24
 800a08c:	4618      	mov	r0, r3
 800a08e:	f000 fbf5 	bl	800a87c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a092:	69bb      	ldr	r3, [r7, #24]
 800a094:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a096:	e3d2      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a098:	2300      	movs	r3, #0
 800a09a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a09c:	e3cf      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a09e:	4b78      	ldr	r3, [pc, #480]	@ (800a280 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a0a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a0aa:	d107      	bne.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a0ac:	f107 030c 	add.w	r3, r7, #12
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	f000 fd37 	bl	800ab24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0ba:	e3c0      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a0bc:	2300      	movs	r3, #0
 800a0be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0c0:	e3bd      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a0c2:	4b6f      	ldr	r3, [pc, #444]	@ (800a280 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a0c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a0c6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a0ca:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a0cc:	4b6c      	ldr	r3, [pc, #432]	@ (800a280 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f003 0304 	and.w	r3, r3, #4
 800a0d4:	2b04      	cmp	r3, #4
 800a0d6:	d10c      	bne.n	800a0f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800a0d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d109      	bne.n	800a0f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a0de:	4b68      	ldr	r3, [pc, #416]	@ (800a280 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	08db      	lsrs	r3, r3, #3
 800a0e4:	f003 0303 	and.w	r3, r3, #3
 800a0e8:	4a66      	ldr	r2, [pc, #408]	@ (800a284 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a0ea:	fa22 f303 	lsr.w	r3, r2, r3
 800a0ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a0f0:	e01e      	b.n	800a130 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a0f2:	4b63      	ldr	r3, [pc, #396]	@ (800a280 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a0fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a0fe:	d106      	bne.n	800a10e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800a100:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a102:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a106:	d102      	bne.n	800a10e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a108:	4b5f      	ldr	r3, [pc, #380]	@ (800a288 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a10a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a10c:	e010      	b.n	800a130 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a10e:	4b5c      	ldr	r3, [pc, #368]	@ (800a280 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a116:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a11a:	d106      	bne.n	800a12a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800a11c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a11e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a122:	d102      	bne.n	800a12a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a124:	4b59      	ldr	r3, [pc, #356]	@ (800a28c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a126:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a128:	e002      	b.n	800a130 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a12a:	2300      	movs	r3, #0
 800a12c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a12e:	e386      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a130:	e385      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a132:	4b57      	ldr	r3, [pc, #348]	@ (800a290 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a134:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a136:	e382      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a138:	2300      	movs	r3, #0
 800a13a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a13c:	e37f      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a13e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a142:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800a146:	430b      	orrs	r3, r1
 800a148:	f040 80a7 	bne.w	800a29a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a14c:	4b4c      	ldr	r3, [pc, #304]	@ (800a280 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a14e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a150:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800a154:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a158:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a15c:	d055      	beq.n	800a20a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800a15e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a160:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a164:	f200 8096 	bhi.w	800a294 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a16a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a16e:	f000 8084 	beq.w	800a27a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800a172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a174:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a178:	f200 808c 	bhi.w	800a294 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a17c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a17e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a182:	d030      	beq.n	800a1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800a184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a186:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a18a:	f200 8083 	bhi.w	800a294 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a18e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a190:	2b00      	cmp	r3, #0
 800a192:	d004      	beq.n	800a19e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800a194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a196:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a19a:	d012      	beq.n	800a1c2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800a19c:	e07a      	b.n	800a294 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a19e:	4b38      	ldr	r3, [pc, #224]	@ (800a280 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a1a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a1aa:	d107      	bne.n	800a1bc <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a1ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	f000 fe0b 	bl	800adcc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a1b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a1ba:	e340      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a1bc:	2300      	movs	r3, #0
 800a1be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1c0:	e33d      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a1c2:	4b2f      	ldr	r3, [pc, #188]	@ (800a280 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a1ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a1ce:	d107      	bne.n	800a1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a1d0:	f107 0318 	add.w	r3, r7, #24
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	f000 fb51 	bl	800a87c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a1da:	69bb      	ldr	r3, [r7, #24]
 800a1dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a1de:	e32e      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1e4:	e32b      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a1e6:	4b26      	ldr	r3, [pc, #152]	@ (800a280 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a1ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a1f2:	d107      	bne.n	800a204 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a1f4:	f107 030c 	add.w	r3, r7, #12
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	f000 fc93 	bl	800ab24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a202:	e31c      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a204:	2300      	movs	r3, #0
 800a206:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a208:	e319      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a20a:	4b1d      	ldr	r3, [pc, #116]	@ (800a280 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a20c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a20e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a212:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a214:	4b1a      	ldr	r3, [pc, #104]	@ (800a280 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	f003 0304 	and.w	r3, r3, #4
 800a21c:	2b04      	cmp	r3, #4
 800a21e:	d10c      	bne.n	800a23a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800a220:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a222:	2b00      	cmp	r3, #0
 800a224:	d109      	bne.n	800a23a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a226:	4b16      	ldr	r3, [pc, #88]	@ (800a280 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	08db      	lsrs	r3, r3, #3
 800a22c:	f003 0303 	and.w	r3, r3, #3
 800a230:	4a14      	ldr	r2, [pc, #80]	@ (800a284 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a232:	fa22 f303 	lsr.w	r3, r2, r3
 800a236:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a238:	e01e      	b.n	800a278 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a23a:	4b11      	ldr	r3, [pc, #68]	@ (800a280 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a242:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a246:	d106      	bne.n	800a256 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800a248:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a24a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a24e:	d102      	bne.n	800a256 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a250:	4b0d      	ldr	r3, [pc, #52]	@ (800a288 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a252:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a254:	e010      	b.n	800a278 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a256:	4b0a      	ldr	r3, [pc, #40]	@ (800a280 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a25e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a262:	d106      	bne.n	800a272 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800a264:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a266:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a26a:	d102      	bne.n	800a272 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a26c:	4b07      	ldr	r3, [pc, #28]	@ (800a28c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a26e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a270:	e002      	b.n	800a278 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a272:	2300      	movs	r3, #0
 800a274:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a276:	e2e2      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a278:	e2e1      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a27a:	4b05      	ldr	r3, [pc, #20]	@ (800a290 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a27c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a27e:	e2de      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a280:	58024400 	.word	0x58024400
 800a284:	03d09000 	.word	0x03d09000
 800a288:	003d0900 	.word	0x003d0900
 800a28c:	017d7840 	.word	0x017d7840
 800a290:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800a294:	2300      	movs	r3, #0
 800a296:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a298:	e2d1      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a29a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a29e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800a2a2:	430b      	orrs	r3, r1
 800a2a4:	f040 809c 	bne.w	800a3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a2a8:	4b93      	ldr	r3, [pc, #588]	@ (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a2aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a2ac:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a2b0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a2b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a2b8:	d054      	beq.n	800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800a2ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a2c0:	f200 808b 	bhi.w	800a3da <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a2c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2c6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a2ca:	f000 8083 	beq.w	800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800a2ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2d0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a2d4:	f200 8081 	bhi.w	800a3da <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a2d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a2de:	d02f      	beq.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800a2e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a2e6:	d878      	bhi.n	800a3da <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a2e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d004      	beq.n	800a2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800a2ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a2f4:	d012      	beq.n	800a31c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800a2f6:	e070      	b.n	800a3da <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a2f8:	4b7f      	ldr	r3, [pc, #508]	@ (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a300:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a304:	d107      	bne.n	800a316 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a306:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a30a:	4618      	mov	r0, r3
 800a30c:	f000 fd5e 	bl	800adcc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a312:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a314:	e293      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a316:	2300      	movs	r3, #0
 800a318:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a31a:	e290      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a31c:	4b76      	ldr	r3, [pc, #472]	@ (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a324:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a328:	d107      	bne.n	800a33a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a32a:	f107 0318 	add.w	r3, r7, #24
 800a32e:	4618      	mov	r0, r3
 800a330:	f000 faa4 	bl	800a87c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a334:	69bb      	ldr	r3, [r7, #24]
 800a336:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a338:	e281      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a33a:	2300      	movs	r3, #0
 800a33c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a33e:	e27e      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a340:	4b6d      	ldr	r3, [pc, #436]	@ (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a348:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a34c:	d107      	bne.n	800a35e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a34e:	f107 030c 	add.w	r3, r7, #12
 800a352:	4618      	mov	r0, r3
 800a354:	f000 fbe6 	bl	800ab24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a35c:	e26f      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a35e:	2300      	movs	r3, #0
 800a360:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a362:	e26c      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a364:	4b64      	ldr	r3, [pc, #400]	@ (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a366:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a368:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a36c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a36e:	4b62      	ldr	r3, [pc, #392]	@ (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	f003 0304 	and.w	r3, r3, #4
 800a376:	2b04      	cmp	r3, #4
 800a378:	d10c      	bne.n	800a394 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800a37a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d109      	bne.n	800a394 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a380:	4b5d      	ldr	r3, [pc, #372]	@ (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	08db      	lsrs	r3, r3, #3
 800a386:	f003 0303 	and.w	r3, r3, #3
 800a38a:	4a5c      	ldr	r2, [pc, #368]	@ (800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a38c:	fa22 f303 	lsr.w	r3, r2, r3
 800a390:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a392:	e01e      	b.n	800a3d2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a394:	4b58      	ldr	r3, [pc, #352]	@ (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a39c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a3a0:	d106      	bne.n	800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800a3a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a3a8:	d102      	bne.n	800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a3aa:	4b55      	ldr	r3, [pc, #340]	@ (800a500 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a3ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a3ae:	e010      	b.n	800a3d2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a3b0:	4b51      	ldr	r3, [pc, #324]	@ (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a3b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a3bc:	d106      	bne.n	800a3cc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800a3be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a3c4:	d102      	bne.n	800a3cc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a3c6:	4b4f      	ldr	r3, [pc, #316]	@ (800a504 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a3c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a3ca:	e002      	b.n	800a3d2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a3d0:	e235      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a3d2:	e234      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a3d4:	4b4c      	ldr	r3, [pc, #304]	@ (800a508 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800a3d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3d8:	e231      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a3da:	2300      	movs	r3, #0
 800a3dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3de:	e22e      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800a3e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3e4:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800a3e8:	430b      	orrs	r3, r1
 800a3ea:	f040 808f 	bne.w	800a50c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800a3ee:	4b42      	ldr	r3, [pc, #264]	@ (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a3f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a3f2:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800a3f6:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800a3f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3fa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a3fe:	d06b      	beq.n	800a4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800a400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a402:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a406:	d874      	bhi.n	800a4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a40a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a40e:	d056      	beq.n	800a4be <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800a410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a412:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a416:	d86c      	bhi.n	800a4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a41a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a41e:	d03b      	beq.n	800a498 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800a420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a422:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a426:	d864      	bhi.n	800a4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a42a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a42e:	d021      	beq.n	800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800a430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a432:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a436:	d85c      	bhi.n	800a4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d004      	beq.n	800a448 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800a43e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a440:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a444:	d004      	beq.n	800a450 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800a446:	e054      	b.n	800a4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800a448:	f7fe fa4c 	bl	80088e4 <HAL_RCC_GetPCLK1Freq>
 800a44c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a44e:	e1f6      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a450:	4b29      	ldr	r3, [pc, #164]	@ (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a458:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a45c:	d107      	bne.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a45e:	f107 0318 	add.w	r3, r7, #24
 800a462:	4618      	mov	r0, r3
 800a464:	f000 fa0a 	bl	800a87c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a468:	69fb      	ldr	r3, [r7, #28]
 800a46a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a46c:	e1e7      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a46e:	2300      	movs	r3, #0
 800a470:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a472:	e1e4      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a474:	4b20      	ldr	r3, [pc, #128]	@ (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a47c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a480:	d107      	bne.n	800a492 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a482:	f107 030c 	add.w	r3, r7, #12
 800a486:	4618      	mov	r0, r3
 800a488:	f000 fb4c 	bl	800ab24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a48c:	693b      	ldr	r3, [r7, #16]
 800a48e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a490:	e1d5      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a492:	2300      	movs	r3, #0
 800a494:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a496:	e1d2      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a498:	4b17      	ldr	r3, [pc, #92]	@ (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	f003 0304 	and.w	r3, r3, #4
 800a4a0:	2b04      	cmp	r3, #4
 800a4a2:	d109      	bne.n	800a4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a4a4:	4b14      	ldr	r3, [pc, #80]	@ (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	08db      	lsrs	r3, r3, #3
 800a4aa:	f003 0303 	and.w	r3, r3, #3
 800a4ae:	4a13      	ldr	r2, [pc, #76]	@ (800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a4b0:	fa22 f303 	lsr.w	r3, r2, r3
 800a4b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4b6:	e1c2      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4bc:	e1bf      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a4be:	4b0e      	ldr	r3, [pc, #56]	@ (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a4c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a4ca:	d102      	bne.n	800a4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800a4cc:	4b0c      	ldr	r3, [pc, #48]	@ (800a500 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a4ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4d0:	e1b5      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4d6:	e1b2      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a4d8:	4b07      	ldr	r3, [pc, #28]	@ (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a4e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a4e4:	d102      	bne.n	800a4ec <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800a4e6:	4b07      	ldr	r3, [pc, #28]	@ (800a504 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a4e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4ea:	e1a8      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4f0:	e1a5      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4f6:	e1a2      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a4f8:	58024400 	.word	0x58024400
 800a4fc:	03d09000 	.word	0x03d09000
 800a500:	003d0900 	.word	0x003d0900
 800a504:	017d7840 	.word	0x017d7840
 800a508:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a50c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a510:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800a514:	430b      	orrs	r3, r1
 800a516:	d173      	bne.n	800a600 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a518:	4b9c      	ldr	r3, [pc, #624]	@ (800a78c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a51a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a51c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a520:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a524:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a528:	d02f      	beq.n	800a58a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800a52a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a52c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a530:	d863      	bhi.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800a532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a534:	2b00      	cmp	r3, #0
 800a536:	d004      	beq.n	800a542 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800a538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a53a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a53e:	d012      	beq.n	800a566 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800a540:	e05b      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a542:	4b92      	ldr	r3, [pc, #584]	@ (800a78c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a54a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a54e:	d107      	bne.n	800a560 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a550:	f107 0318 	add.w	r3, r7, #24
 800a554:	4618      	mov	r0, r3
 800a556:	f000 f991 	bl	800a87c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a55a:	69bb      	ldr	r3, [r7, #24]
 800a55c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a55e:	e16e      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a560:	2300      	movs	r3, #0
 800a562:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a564:	e16b      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a566:	4b89      	ldr	r3, [pc, #548]	@ (800a78c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a56e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a572:	d107      	bne.n	800a584 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a574:	f107 030c 	add.w	r3, r7, #12
 800a578:	4618      	mov	r0, r3
 800a57a:	f000 fad3 	bl	800ab24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a57e:	697b      	ldr	r3, [r7, #20]
 800a580:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a582:	e15c      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a584:	2300      	movs	r3, #0
 800a586:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a588:	e159      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a58a:	4b80      	ldr	r3, [pc, #512]	@ (800a78c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a58c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a58e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a592:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a594:	4b7d      	ldr	r3, [pc, #500]	@ (800a78c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f003 0304 	and.w	r3, r3, #4
 800a59c:	2b04      	cmp	r3, #4
 800a59e:	d10c      	bne.n	800a5ba <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800a5a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d109      	bne.n	800a5ba <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a5a6:	4b79      	ldr	r3, [pc, #484]	@ (800a78c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	08db      	lsrs	r3, r3, #3
 800a5ac:	f003 0303 	and.w	r3, r3, #3
 800a5b0:	4a77      	ldr	r2, [pc, #476]	@ (800a790 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a5b2:	fa22 f303 	lsr.w	r3, r2, r3
 800a5b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a5b8:	e01e      	b.n	800a5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a5ba:	4b74      	ldr	r3, [pc, #464]	@ (800a78c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a5c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a5c6:	d106      	bne.n	800a5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800a5c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a5ce:	d102      	bne.n	800a5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a5d0:	4b70      	ldr	r3, [pc, #448]	@ (800a794 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a5d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a5d4:	e010      	b.n	800a5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a5d6:	4b6d      	ldr	r3, [pc, #436]	@ (800a78c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a5de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a5e2:	d106      	bne.n	800a5f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800a5e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a5ea:	d102      	bne.n	800a5f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a5ec:	4b6a      	ldr	r3, [pc, #424]	@ (800a798 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a5ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a5f0:	e002      	b.n	800a5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a5f6:	e122      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a5f8:	e121      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5fe:	e11e      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a600:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a604:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800a608:	430b      	orrs	r3, r1
 800a60a:	d133      	bne.n	800a674 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a60c:	4b5f      	ldr	r3, [pc, #380]	@ (800a78c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a60e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a610:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a614:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d004      	beq.n	800a626 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800a61c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a61e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a622:	d012      	beq.n	800a64a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800a624:	e023      	b.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a626:	4b59      	ldr	r3, [pc, #356]	@ (800a78c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a62e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a632:	d107      	bne.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a634:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a638:	4618      	mov	r0, r3
 800a63a:	f000 fbc7 	bl	800adcc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a63e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a640:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a642:	e0fc      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a644:	2300      	movs	r3, #0
 800a646:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a648:	e0f9      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a64a:	4b50      	ldr	r3, [pc, #320]	@ (800a78c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a652:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a656:	d107      	bne.n	800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a658:	f107 0318 	add.w	r3, r7, #24
 800a65c:	4618      	mov	r0, r3
 800a65e:	f000 f90d 	bl	800a87c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a662:	6a3b      	ldr	r3, [r7, #32]
 800a664:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a666:	e0ea      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a668:	2300      	movs	r3, #0
 800a66a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a66c:	e0e7      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a66e:	2300      	movs	r3, #0
 800a670:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a672:	e0e4      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a674:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a678:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800a67c:	430b      	orrs	r3, r1
 800a67e:	f040 808d 	bne.w	800a79c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800a682:	4b42      	ldr	r3, [pc, #264]	@ (800a78c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a684:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a686:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800a68a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a68c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a68e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a692:	d06b      	beq.n	800a76c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800a694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a696:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a69a:	d874      	bhi.n	800a786 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a69c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a69e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a6a2:	d056      	beq.n	800a752 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800a6a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a6aa:	d86c      	bhi.n	800a786 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a6ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6ae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a6b2:	d03b      	beq.n	800a72c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800a6b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6b6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a6ba:	d864      	bhi.n	800a786 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a6bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a6c2:	d021      	beq.n	800a708 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800a6c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a6ca:	d85c      	bhi.n	800a786 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a6cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d004      	beq.n	800a6dc <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800a6d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a6d8:	d004      	beq.n	800a6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800a6da:	e054      	b.n	800a786 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a6dc:	f000 f8b8 	bl	800a850 <HAL_RCCEx_GetD3PCLK1Freq>
 800a6e0:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a6e2:	e0ac      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a6e4:	4b29      	ldr	r3, [pc, #164]	@ (800a78c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a6ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a6f0:	d107      	bne.n	800a702 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6f2:	f107 0318 	add.w	r3, r7, #24
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f000 f8c0 	bl	800a87c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a6fc:	69fb      	ldr	r3, [r7, #28]
 800a6fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a700:	e09d      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a702:	2300      	movs	r3, #0
 800a704:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a706:	e09a      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a708:	4b20      	ldr	r3, [pc, #128]	@ (800a78c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a710:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a714:	d107      	bne.n	800a726 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a716:	f107 030c 	add.w	r3, r7, #12
 800a71a:	4618      	mov	r0, r3
 800a71c:	f000 fa02 	bl	800ab24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a720:	693b      	ldr	r3, [r7, #16]
 800a722:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a724:	e08b      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a726:	2300      	movs	r3, #0
 800a728:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a72a:	e088      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a72c:	4b17      	ldr	r3, [pc, #92]	@ (800a78c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	f003 0304 	and.w	r3, r3, #4
 800a734:	2b04      	cmp	r3, #4
 800a736:	d109      	bne.n	800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a738:	4b14      	ldr	r3, [pc, #80]	@ (800a78c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	08db      	lsrs	r3, r3, #3
 800a73e:	f003 0303 	and.w	r3, r3, #3
 800a742:	4a13      	ldr	r2, [pc, #76]	@ (800a790 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a744:	fa22 f303 	lsr.w	r3, r2, r3
 800a748:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a74a:	e078      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a74c:	2300      	movs	r3, #0
 800a74e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a750:	e075      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a752:	4b0e      	ldr	r3, [pc, #56]	@ (800a78c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a75a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a75e:	d102      	bne.n	800a766 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800a760:	4b0c      	ldr	r3, [pc, #48]	@ (800a794 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a762:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a764:	e06b      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a766:	2300      	movs	r3, #0
 800a768:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a76a:	e068      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a76c:	4b07      	ldr	r3, [pc, #28]	@ (800a78c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a774:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a778:	d102      	bne.n	800a780 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800a77a:	4b07      	ldr	r3, [pc, #28]	@ (800a798 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a77c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a77e:	e05e      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a780:	2300      	movs	r3, #0
 800a782:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a784:	e05b      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800a786:	2300      	movs	r3, #0
 800a788:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a78a:	e058      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a78c:	58024400 	.word	0x58024400
 800a790:	03d09000 	.word	0x03d09000
 800a794:	003d0900 	.word	0x003d0900
 800a798:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a79c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7a0:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800a7a4:	430b      	orrs	r3, r1
 800a7a6:	d148      	bne.n	800a83a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800a7a8:	4b27      	ldr	r3, [pc, #156]	@ (800a848 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a7aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a7ac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a7b0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a7b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a7b8:	d02a      	beq.n	800a810 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800a7ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a7c0:	d838      	bhi.n	800a834 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800a7c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d004      	beq.n	800a7d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800a7c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a7ce:	d00d      	beq.n	800a7ec <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800a7d0:	e030      	b.n	800a834 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a7d2:	4b1d      	ldr	r3, [pc, #116]	@ (800a848 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a7da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a7de:	d102      	bne.n	800a7e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800a7e0:	4b1a      	ldr	r3, [pc, #104]	@ (800a84c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800a7e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7e4:	e02b      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7ea:	e028      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a7ec:	4b16      	ldr	r3, [pc, #88]	@ (800a848 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a7f4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a7f8:	d107      	bne.n	800a80a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a7fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a7fe:	4618      	mov	r0, r3
 800a800:	f000 fae4 	bl	800adcc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a806:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a808:	e019      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a80a:	2300      	movs	r3, #0
 800a80c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a80e:	e016      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a810:	4b0d      	ldr	r3, [pc, #52]	@ (800a848 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a818:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a81c:	d107      	bne.n	800a82e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a81e:	f107 0318 	add.w	r3, r7, #24
 800a822:	4618      	mov	r0, r3
 800a824:	f000 f82a 	bl	800a87c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a828:	69fb      	ldr	r3, [r7, #28]
 800a82a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a82c:	e007      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a82e:	2300      	movs	r3, #0
 800a830:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a832:	e004      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a834:	2300      	movs	r3, #0
 800a836:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a838:	e001      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800a83a:	2300      	movs	r3, #0
 800a83c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800a83e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a840:	4618      	mov	r0, r3
 800a842:	3740      	adds	r7, #64	@ 0x40
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}
 800a848:	58024400 	.word	0x58024400
 800a84c:	017d7840 	.word	0x017d7840

0800a850 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a850:	b580      	push	{r7, lr}
 800a852:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a854:	f7fe f816 	bl	8008884 <HAL_RCC_GetHCLKFreq>
 800a858:	4602      	mov	r2, r0
 800a85a:	4b06      	ldr	r3, [pc, #24]	@ (800a874 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a85c:	6a1b      	ldr	r3, [r3, #32]
 800a85e:	091b      	lsrs	r3, r3, #4
 800a860:	f003 0307 	and.w	r3, r3, #7
 800a864:	4904      	ldr	r1, [pc, #16]	@ (800a878 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a866:	5ccb      	ldrb	r3, [r1, r3]
 800a868:	f003 031f 	and.w	r3, r3, #31
 800a86c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a870:	4618      	mov	r0, r3
 800a872:	bd80      	pop	{r7, pc}
 800a874:	58024400 	.word	0x58024400
 800a878:	0800d63c 	.word	0x0800d63c

0800a87c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a87c:	b480      	push	{r7}
 800a87e:	b089      	sub	sp, #36	@ 0x24
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a884:	4ba1      	ldr	r3, [pc, #644]	@ (800ab0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a888:	f003 0303 	and.w	r3, r3, #3
 800a88c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a88e:	4b9f      	ldr	r3, [pc, #636]	@ (800ab0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a892:	0b1b      	lsrs	r3, r3, #12
 800a894:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a898:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a89a:	4b9c      	ldr	r3, [pc, #624]	@ (800ab0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a89c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a89e:	091b      	lsrs	r3, r3, #4
 800a8a0:	f003 0301 	and.w	r3, r3, #1
 800a8a4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a8a6:	4b99      	ldr	r3, [pc, #612]	@ (800ab0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a8a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8aa:	08db      	lsrs	r3, r3, #3
 800a8ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a8b0:	693a      	ldr	r2, [r7, #16]
 800a8b2:	fb02 f303 	mul.w	r3, r2, r3
 800a8b6:	ee07 3a90 	vmov	s15, r3
 800a8ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a8c2:	697b      	ldr	r3, [r7, #20]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	f000 8111 	beq.w	800aaec <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a8ca:	69bb      	ldr	r3, [r7, #24]
 800a8cc:	2b02      	cmp	r3, #2
 800a8ce:	f000 8083 	beq.w	800a9d8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a8d2:	69bb      	ldr	r3, [r7, #24]
 800a8d4:	2b02      	cmp	r3, #2
 800a8d6:	f200 80a1 	bhi.w	800aa1c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a8da:	69bb      	ldr	r3, [r7, #24]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d003      	beq.n	800a8e8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a8e0:	69bb      	ldr	r3, [r7, #24]
 800a8e2:	2b01      	cmp	r3, #1
 800a8e4:	d056      	beq.n	800a994 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a8e6:	e099      	b.n	800aa1c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a8e8:	4b88      	ldr	r3, [pc, #544]	@ (800ab0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	f003 0320 	and.w	r3, r3, #32
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d02d      	beq.n	800a950 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a8f4:	4b85      	ldr	r3, [pc, #532]	@ (800ab0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	08db      	lsrs	r3, r3, #3
 800a8fa:	f003 0303 	and.w	r3, r3, #3
 800a8fe:	4a84      	ldr	r2, [pc, #528]	@ (800ab10 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a900:	fa22 f303 	lsr.w	r3, r2, r3
 800a904:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a906:	68bb      	ldr	r3, [r7, #8]
 800a908:	ee07 3a90 	vmov	s15, r3
 800a90c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a910:	697b      	ldr	r3, [r7, #20]
 800a912:	ee07 3a90 	vmov	s15, r3
 800a916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a91a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a91e:	4b7b      	ldr	r3, [pc, #492]	@ (800ab0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a920:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a926:	ee07 3a90 	vmov	s15, r3
 800a92a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a92e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a932:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800ab14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a936:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a93a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a93e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a942:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a94a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a94e:	e087      	b.n	800aa60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a950:	697b      	ldr	r3, [r7, #20]
 800a952:	ee07 3a90 	vmov	s15, r3
 800a956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a95a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800ab18 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a95e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a962:	4b6a      	ldr	r3, [pc, #424]	@ (800ab0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a964:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a96a:	ee07 3a90 	vmov	s15, r3
 800a96e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a972:	ed97 6a03 	vldr	s12, [r7, #12]
 800a976:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800ab14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a97a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a97e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a982:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a986:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a98a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a98e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a992:	e065      	b.n	800aa60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a994:	697b      	ldr	r3, [r7, #20]
 800a996:	ee07 3a90 	vmov	s15, r3
 800a99a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a99e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800ab1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a9a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9a6:	4b59      	ldr	r3, [pc, #356]	@ (800ab0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9ae:	ee07 3a90 	vmov	s15, r3
 800a9b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a9ba:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800ab14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a9be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a9ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a9ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a9d6:	e043      	b.n	800aa60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a9d8:	697b      	ldr	r3, [r7, #20]
 800a9da:	ee07 3a90 	vmov	s15, r3
 800a9de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9e2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800ab20 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a9e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9ea:	4b48      	ldr	r3, [pc, #288]	@ (800ab0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9f2:	ee07 3a90 	vmov	s15, r3
 800a9f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9fa:	ed97 6a03 	vldr	s12, [r7, #12]
 800a9fe:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800ab14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aa02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aa0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa12:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aa1a:	e021      	b.n	800aa60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aa1c:	697b      	ldr	r3, [r7, #20]
 800aa1e:	ee07 3a90 	vmov	s15, r3
 800aa22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa26:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800ab1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800aa2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa2e:	4b37      	ldr	r3, [pc, #220]	@ (800ab0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa36:	ee07 3a90 	vmov	s15, r3
 800aa3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa3e:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa42:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800ab14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aa46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aa52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aa5e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800aa60:	4b2a      	ldr	r3, [pc, #168]	@ (800ab0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa64:	0a5b      	lsrs	r3, r3, #9
 800aa66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aa6a:	ee07 3a90 	vmov	s15, r3
 800aa6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa72:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aa76:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aa7a:	edd7 6a07 	vldr	s13, [r7, #28]
 800aa7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa86:	ee17 2a90 	vmov	r2, s15
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800aa8e:	4b1f      	ldr	r3, [pc, #124]	@ (800ab0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa92:	0c1b      	lsrs	r3, r3, #16
 800aa94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aa98:	ee07 3a90 	vmov	s15, r3
 800aa9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aaa0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aaa4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aaa8:	edd7 6a07 	vldr	s13, [r7, #28]
 800aaac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aab0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aab4:	ee17 2a90 	vmov	r2, s15
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800aabc:	4b13      	ldr	r3, [pc, #76]	@ (800ab0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aabe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aac0:	0e1b      	lsrs	r3, r3, #24
 800aac2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aac6:	ee07 3a90 	vmov	s15, r3
 800aaca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aace:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aad2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aad6:	edd7 6a07 	vldr	s13, [r7, #28]
 800aada:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aade:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aae2:	ee17 2a90 	vmov	r2, s15
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800aaea:	e008      	b.n	800aafe <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2200      	movs	r2, #0
 800aaf0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2200      	movs	r2, #0
 800aafc:	609a      	str	r2, [r3, #8]
}
 800aafe:	bf00      	nop
 800ab00:	3724      	adds	r7, #36	@ 0x24
 800ab02:	46bd      	mov	sp, r7
 800ab04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab08:	4770      	bx	lr
 800ab0a:	bf00      	nop
 800ab0c:	58024400 	.word	0x58024400
 800ab10:	03d09000 	.word	0x03d09000
 800ab14:	46000000 	.word	0x46000000
 800ab18:	4c742400 	.word	0x4c742400
 800ab1c:	4a742400 	.word	0x4a742400
 800ab20:	4bbebc20 	.word	0x4bbebc20

0800ab24 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800ab24:	b480      	push	{r7}
 800ab26:	b089      	sub	sp, #36	@ 0x24
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ab2c:	4ba1      	ldr	r3, [pc, #644]	@ (800adb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab30:	f003 0303 	and.w	r3, r3, #3
 800ab34:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800ab36:	4b9f      	ldr	r3, [pc, #636]	@ (800adb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab3a:	0d1b      	lsrs	r3, r3, #20
 800ab3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ab40:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ab42:	4b9c      	ldr	r3, [pc, #624]	@ (800adb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab46:	0a1b      	lsrs	r3, r3, #8
 800ab48:	f003 0301 	and.w	r3, r3, #1
 800ab4c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800ab4e:	4b99      	ldr	r3, [pc, #612]	@ (800adb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab52:	08db      	lsrs	r3, r3, #3
 800ab54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ab58:	693a      	ldr	r2, [r7, #16]
 800ab5a:	fb02 f303 	mul.w	r3, r2, r3
 800ab5e:	ee07 3a90 	vmov	s15, r3
 800ab62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab66:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ab6a:	697b      	ldr	r3, [r7, #20]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	f000 8111 	beq.w	800ad94 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ab72:	69bb      	ldr	r3, [r7, #24]
 800ab74:	2b02      	cmp	r3, #2
 800ab76:	f000 8083 	beq.w	800ac80 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ab7a:	69bb      	ldr	r3, [r7, #24]
 800ab7c:	2b02      	cmp	r3, #2
 800ab7e:	f200 80a1 	bhi.w	800acc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ab82:	69bb      	ldr	r3, [r7, #24]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d003      	beq.n	800ab90 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ab88:	69bb      	ldr	r3, [r7, #24]
 800ab8a:	2b01      	cmp	r3, #1
 800ab8c:	d056      	beq.n	800ac3c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ab8e:	e099      	b.n	800acc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ab90:	4b88      	ldr	r3, [pc, #544]	@ (800adb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	f003 0320 	and.w	r3, r3, #32
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d02d      	beq.n	800abf8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ab9c:	4b85      	ldr	r3, [pc, #532]	@ (800adb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	08db      	lsrs	r3, r3, #3
 800aba2:	f003 0303 	and.w	r3, r3, #3
 800aba6:	4a84      	ldr	r2, [pc, #528]	@ (800adb8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800aba8:	fa22 f303 	lsr.w	r3, r2, r3
 800abac:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800abae:	68bb      	ldr	r3, [r7, #8]
 800abb0:	ee07 3a90 	vmov	s15, r3
 800abb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abb8:	697b      	ldr	r3, [r7, #20]
 800abba:	ee07 3a90 	vmov	s15, r3
 800abbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abc6:	4b7b      	ldr	r3, [pc, #492]	@ (800adb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800abc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abce:	ee07 3a90 	vmov	s15, r3
 800abd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abd6:	ed97 6a03 	vldr	s12, [r7, #12]
 800abda:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800adbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800abde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abe2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abe6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800abea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abf2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800abf6:	e087      	b.n	800ad08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800abf8:	697b      	ldr	r3, [r7, #20]
 800abfa:	ee07 3a90 	vmov	s15, r3
 800abfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac02:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800adc0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ac06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac0a:	4b6a      	ldr	r3, [pc, #424]	@ (800adb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac12:	ee07 3a90 	vmov	s15, r3
 800ac16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac1a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac1e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800adbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ac22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ac2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac32:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ac3a:	e065      	b.n	800ad08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ac3c:	697b      	ldr	r3, [r7, #20]
 800ac3e:	ee07 3a90 	vmov	s15, r3
 800ac42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac46:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800adc4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ac4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac4e:	4b59      	ldr	r3, [pc, #356]	@ (800adb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac56:	ee07 3a90 	vmov	s15, r3
 800ac5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac5e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac62:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800adbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ac66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ac72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac76:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ac7e:	e043      	b.n	800ad08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ac80:	697b      	ldr	r3, [r7, #20]
 800ac82:	ee07 3a90 	vmov	s15, r3
 800ac86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac8a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800adc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ac8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac92:	4b48      	ldr	r3, [pc, #288]	@ (800adb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac9a:	ee07 3a90 	vmov	s15, r3
 800ac9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aca2:	ed97 6a03 	vldr	s12, [r7, #12]
 800aca6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800adbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800acaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800acb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800acc2:	e021      	b.n	800ad08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800acc4:	697b      	ldr	r3, [r7, #20]
 800acc6:	ee07 3a90 	vmov	s15, r3
 800acca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acce:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800adc4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800acd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acd6:	4b37      	ldr	r3, [pc, #220]	@ (800adb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acde:	ee07 3a90 	vmov	s15, r3
 800ace2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ace6:	ed97 6a03 	vldr	s12, [r7, #12]
 800acea:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800adbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800acee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acf6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800acfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad06:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800ad08:	4b2a      	ldr	r3, [pc, #168]	@ (800adb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad0c:	0a5b      	lsrs	r3, r3, #9
 800ad0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad12:	ee07 3a90 	vmov	s15, r3
 800ad16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad1a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ad1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad22:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad2e:	ee17 2a90 	vmov	r2, s15
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800ad36:	4b1f      	ldr	r3, [pc, #124]	@ (800adb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad3a:	0c1b      	lsrs	r3, r3, #16
 800ad3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad40:	ee07 3a90 	vmov	s15, r3
 800ad44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad48:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ad4c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad50:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad5c:	ee17 2a90 	vmov	r2, s15
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800ad64:	4b13      	ldr	r3, [pc, #76]	@ (800adb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad68:	0e1b      	lsrs	r3, r3, #24
 800ad6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad6e:	ee07 3a90 	vmov	s15, r3
 800ad72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad76:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ad7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad7e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad8a:	ee17 2a90 	vmov	r2, s15
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ad92:	e008      	b.n	800ada6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2200      	movs	r2, #0
 800ad98:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2200      	movs	r2, #0
 800ada4:	609a      	str	r2, [r3, #8]
}
 800ada6:	bf00      	nop
 800ada8:	3724      	adds	r7, #36	@ 0x24
 800adaa:	46bd      	mov	sp, r7
 800adac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb0:	4770      	bx	lr
 800adb2:	bf00      	nop
 800adb4:	58024400 	.word	0x58024400
 800adb8:	03d09000 	.word	0x03d09000
 800adbc:	46000000 	.word	0x46000000
 800adc0:	4c742400 	.word	0x4c742400
 800adc4:	4a742400 	.word	0x4a742400
 800adc8:	4bbebc20 	.word	0x4bbebc20

0800adcc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800adcc:	b480      	push	{r7}
 800adce:	b089      	sub	sp, #36	@ 0x24
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800add4:	4ba0      	ldr	r3, [pc, #640]	@ (800b058 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800add6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800add8:	f003 0303 	and.w	r3, r3, #3
 800addc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800adde:	4b9e      	ldr	r3, [pc, #632]	@ (800b058 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ade0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ade2:	091b      	lsrs	r3, r3, #4
 800ade4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ade8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800adea:	4b9b      	ldr	r3, [pc, #620]	@ (800b058 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800adec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adee:	f003 0301 	and.w	r3, r3, #1
 800adf2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800adf4:	4b98      	ldr	r3, [pc, #608]	@ (800b058 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800adf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800adf8:	08db      	lsrs	r3, r3, #3
 800adfa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800adfe:	693a      	ldr	r2, [r7, #16]
 800ae00:	fb02 f303 	mul.w	r3, r2, r3
 800ae04:	ee07 3a90 	vmov	s15, r3
 800ae08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae0c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800ae10:	697b      	ldr	r3, [r7, #20]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	f000 8111 	beq.w	800b03a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800ae18:	69bb      	ldr	r3, [r7, #24]
 800ae1a:	2b02      	cmp	r3, #2
 800ae1c:	f000 8083 	beq.w	800af26 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800ae20:	69bb      	ldr	r3, [r7, #24]
 800ae22:	2b02      	cmp	r3, #2
 800ae24:	f200 80a1 	bhi.w	800af6a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800ae28:	69bb      	ldr	r3, [r7, #24]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d003      	beq.n	800ae36 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800ae2e:	69bb      	ldr	r3, [r7, #24]
 800ae30:	2b01      	cmp	r3, #1
 800ae32:	d056      	beq.n	800aee2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800ae34:	e099      	b.n	800af6a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae36:	4b88      	ldr	r3, [pc, #544]	@ (800b058 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	f003 0320 	and.w	r3, r3, #32
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d02d      	beq.n	800ae9e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ae42:	4b85      	ldr	r3, [pc, #532]	@ (800b058 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	08db      	lsrs	r3, r3, #3
 800ae48:	f003 0303 	and.w	r3, r3, #3
 800ae4c:	4a83      	ldr	r2, [pc, #524]	@ (800b05c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800ae4e:	fa22 f303 	lsr.w	r3, r2, r3
 800ae52:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ae54:	68bb      	ldr	r3, [r7, #8]
 800ae56:	ee07 3a90 	vmov	s15, r3
 800ae5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae5e:	697b      	ldr	r3, [r7, #20]
 800ae60:	ee07 3a90 	vmov	s15, r3
 800ae64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae6c:	4b7a      	ldr	r3, [pc, #488]	@ (800b058 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ae6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae74:	ee07 3a90 	vmov	s15, r3
 800ae78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae7c:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae80:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800b060 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ae84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae8c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ae90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae94:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae98:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ae9c:	e087      	b.n	800afae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ae9e:	697b      	ldr	r3, [r7, #20]
 800aea0:	ee07 3a90 	vmov	s15, r3
 800aea4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aea8:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800b064 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800aeac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aeb0:	4b69      	ldr	r3, [pc, #420]	@ (800b058 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aeb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aeb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aeb8:	ee07 3a90 	vmov	s15, r3
 800aebc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aec0:	ed97 6a03 	vldr	s12, [r7, #12]
 800aec4:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800b060 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800aec8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aecc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aed0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aed4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aed8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aedc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aee0:	e065      	b.n	800afae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aee2:	697b      	ldr	r3, [r7, #20]
 800aee4:	ee07 3a90 	vmov	s15, r3
 800aee8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aeec:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800b068 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800aef0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aef4:	4b58      	ldr	r3, [pc, #352]	@ (800b058 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aef8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aefc:	ee07 3a90 	vmov	s15, r3
 800af00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af04:	ed97 6a03 	vldr	s12, [r7, #12]
 800af08:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800b060 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800af0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af14:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af20:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800af24:	e043      	b.n	800afae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800af26:	697b      	ldr	r3, [r7, #20]
 800af28:	ee07 3a90 	vmov	s15, r3
 800af2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af30:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800b06c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800af34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af38:	4b47      	ldr	r3, [pc, #284]	@ (800b058 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af40:	ee07 3a90 	vmov	s15, r3
 800af44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af48:	ed97 6a03 	vldr	s12, [r7, #12]
 800af4c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800b060 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800af50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af58:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af60:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af64:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800af68:	e021      	b.n	800afae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800af6a:	697b      	ldr	r3, [r7, #20]
 800af6c:	ee07 3a90 	vmov	s15, r3
 800af70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af74:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800b064 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800af78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af7c:	4b36      	ldr	r3, [pc, #216]	@ (800b058 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af84:	ee07 3a90 	vmov	s15, r3
 800af88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af8c:	ed97 6a03 	vldr	s12, [r7, #12]
 800af90:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800b060 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800af94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af9c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800afa0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afa8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800afac:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800afae:	4b2a      	ldr	r3, [pc, #168]	@ (800b058 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800afb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800afb2:	0a5b      	lsrs	r3, r3, #9
 800afb4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800afb8:	ee07 3a90 	vmov	s15, r3
 800afbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afc0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800afc4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800afc8:	edd7 6a07 	vldr	s13, [r7, #28]
 800afcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800afd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800afd4:	ee17 2a90 	vmov	r2, s15
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800afdc:	4b1e      	ldr	r3, [pc, #120]	@ (800b058 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800afde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800afe0:	0c1b      	lsrs	r3, r3, #16
 800afe2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800afe6:	ee07 3a90 	vmov	s15, r3
 800afea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aff2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aff6:	edd7 6a07 	vldr	s13, [r7, #28]
 800affa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800affe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b002:	ee17 2a90 	vmov	r2, s15
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b00a:	4b13      	ldr	r3, [pc, #76]	@ (800b058 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b00c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b00e:	0e1b      	lsrs	r3, r3, #24
 800b010:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b014:	ee07 3a90 	vmov	s15, r3
 800b018:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b01c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b020:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b024:	edd7 6a07 	vldr	s13, [r7, #28]
 800b028:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b02c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b030:	ee17 2a90 	vmov	r2, s15
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b038:	e008      	b.n	800b04c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	2200      	movs	r2, #0
 800b03e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2200      	movs	r2, #0
 800b044:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	2200      	movs	r2, #0
 800b04a:	609a      	str	r2, [r3, #8]
}
 800b04c:	bf00      	nop
 800b04e:	3724      	adds	r7, #36	@ 0x24
 800b050:	46bd      	mov	sp, r7
 800b052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b056:	4770      	bx	lr
 800b058:	58024400 	.word	0x58024400
 800b05c:	03d09000 	.word	0x03d09000
 800b060:	46000000 	.word	0x46000000
 800b064:	4c742400 	.word	0x4c742400
 800b068:	4a742400 	.word	0x4a742400
 800b06c:	4bbebc20 	.word	0x4bbebc20

0800b070 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b084      	sub	sp, #16
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
 800b078:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b07a:	2300      	movs	r3, #0
 800b07c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b07e:	4b53      	ldr	r3, [pc, #332]	@ (800b1cc <RCCEx_PLL2_Config+0x15c>)
 800b080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b082:	f003 0303 	and.w	r3, r3, #3
 800b086:	2b03      	cmp	r3, #3
 800b088:	d101      	bne.n	800b08e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b08a:	2301      	movs	r3, #1
 800b08c:	e099      	b.n	800b1c2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b08e:	4b4f      	ldr	r3, [pc, #316]	@ (800b1cc <RCCEx_PLL2_Config+0x15c>)
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	4a4e      	ldr	r2, [pc, #312]	@ (800b1cc <RCCEx_PLL2_Config+0x15c>)
 800b094:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b098:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b09a:	f7f8 fb5d 	bl	8003758 <HAL_GetTick>
 800b09e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b0a0:	e008      	b.n	800b0b4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b0a2:	f7f8 fb59 	bl	8003758 <HAL_GetTick>
 800b0a6:	4602      	mov	r2, r0
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	1ad3      	subs	r3, r2, r3
 800b0ac:	2b02      	cmp	r3, #2
 800b0ae:	d901      	bls.n	800b0b4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b0b0:	2303      	movs	r3, #3
 800b0b2:	e086      	b.n	800b1c2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b0b4:	4b45      	ldr	r3, [pc, #276]	@ (800b1cc <RCCEx_PLL2_Config+0x15c>)
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d1f0      	bne.n	800b0a2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b0c0:	4b42      	ldr	r3, [pc, #264]	@ (800b1cc <RCCEx_PLL2_Config+0x15c>)
 800b0c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0c4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	031b      	lsls	r3, r3, #12
 800b0ce:	493f      	ldr	r1, [pc, #252]	@ (800b1cc <RCCEx_PLL2_Config+0x15c>)
 800b0d0:	4313      	orrs	r3, r2
 800b0d2:	628b      	str	r3, [r1, #40]	@ 0x28
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	685b      	ldr	r3, [r3, #4]
 800b0d8:	3b01      	subs	r3, #1
 800b0da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	689b      	ldr	r3, [r3, #8]
 800b0e2:	3b01      	subs	r3, #1
 800b0e4:	025b      	lsls	r3, r3, #9
 800b0e6:	b29b      	uxth	r3, r3
 800b0e8:	431a      	orrs	r2, r3
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	68db      	ldr	r3, [r3, #12]
 800b0ee:	3b01      	subs	r3, #1
 800b0f0:	041b      	lsls	r3, r3, #16
 800b0f2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b0f6:	431a      	orrs	r2, r3
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	691b      	ldr	r3, [r3, #16]
 800b0fc:	3b01      	subs	r3, #1
 800b0fe:	061b      	lsls	r3, r3, #24
 800b100:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b104:	4931      	ldr	r1, [pc, #196]	@ (800b1cc <RCCEx_PLL2_Config+0x15c>)
 800b106:	4313      	orrs	r3, r2
 800b108:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b10a:	4b30      	ldr	r3, [pc, #192]	@ (800b1cc <RCCEx_PLL2_Config+0x15c>)
 800b10c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b10e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	695b      	ldr	r3, [r3, #20]
 800b116:	492d      	ldr	r1, [pc, #180]	@ (800b1cc <RCCEx_PLL2_Config+0x15c>)
 800b118:	4313      	orrs	r3, r2
 800b11a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b11c:	4b2b      	ldr	r3, [pc, #172]	@ (800b1cc <RCCEx_PLL2_Config+0x15c>)
 800b11e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b120:	f023 0220 	bic.w	r2, r3, #32
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	699b      	ldr	r3, [r3, #24]
 800b128:	4928      	ldr	r1, [pc, #160]	@ (800b1cc <RCCEx_PLL2_Config+0x15c>)
 800b12a:	4313      	orrs	r3, r2
 800b12c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b12e:	4b27      	ldr	r3, [pc, #156]	@ (800b1cc <RCCEx_PLL2_Config+0x15c>)
 800b130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b132:	4a26      	ldr	r2, [pc, #152]	@ (800b1cc <RCCEx_PLL2_Config+0x15c>)
 800b134:	f023 0310 	bic.w	r3, r3, #16
 800b138:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b13a:	4b24      	ldr	r3, [pc, #144]	@ (800b1cc <RCCEx_PLL2_Config+0x15c>)
 800b13c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b13e:	4b24      	ldr	r3, [pc, #144]	@ (800b1d0 <RCCEx_PLL2_Config+0x160>)
 800b140:	4013      	ands	r3, r2
 800b142:	687a      	ldr	r2, [r7, #4]
 800b144:	69d2      	ldr	r2, [r2, #28]
 800b146:	00d2      	lsls	r2, r2, #3
 800b148:	4920      	ldr	r1, [pc, #128]	@ (800b1cc <RCCEx_PLL2_Config+0x15c>)
 800b14a:	4313      	orrs	r3, r2
 800b14c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b14e:	4b1f      	ldr	r3, [pc, #124]	@ (800b1cc <RCCEx_PLL2_Config+0x15c>)
 800b150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b152:	4a1e      	ldr	r2, [pc, #120]	@ (800b1cc <RCCEx_PLL2_Config+0x15c>)
 800b154:	f043 0310 	orr.w	r3, r3, #16
 800b158:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b15a:	683b      	ldr	r3, [r7, #0]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d106      	bne.n	800b16e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b160:	4b1a      	ldr	r3, [pc, #104]	@ (800b1cc <RCCEx_PLL2_Config+0x15c>)
 800b162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b164:	4a19      	ldr	r2, [pc, #100]	@ (800b1cc <RCCEx_PLL2_Config+0x15c>)
 800b166:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b16a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b16c:	e00f      	b.n	800b18e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	2b01      	cmp	r3, #1
 800b172:	d106      	bne.n	800b182 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b174:	4b15      	ldr	r3, [pc, #84]	@ (800b1cc <RCCEx_PLL2_Config+0x15c>)
 800b176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b178:	4a14      	ldr	r2, [pc, #80]	@ (800b1cc <RCCEx_PLL2_Config+0x15c>)
 800b17a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b17e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b180:	e005      	b.n	800b18e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b182:	4b12      	ldr	r3, [pc, #72]	@ (800b1cc <RCCEx_PLL2_Config+0x15c>)
 800b184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b186:	4a11      	ldr	r2, [pc, #68]	@ (800b1cc <RCCEx_PLL2_Config+0x15c>)
 800b188:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b18c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b18e:	4b0f      	ldr	r3, [pc, #60]	@ (800b1cc <RCCEx_PLL2_Config+0x15c>)
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	4a0e      	ldr	r2, [pc, #56]	@ (800b1cc <RCCEx_PLL2_Config+0x15c>)
 800b194:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b198:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b19a:	f7f8 fadd 	bl	8003758 <HAL_GetTick>
 800b19e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b1a0:	e008      	b.n	800b1b4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b1a2:	f7f8 fad9 	bl	8003758 <HAL_GetTick>
 800b1a6:	4602      	mov	r2, r0
 800b1a8:	68bb      	ldr	r3, [r7, #8]
 800b1aa:	1ad3      	subs	r3, r2, r3
 800b1ac:	2b02      	cmp	r3, #2
 800b1ae:	d901      	bls.n	800b1b4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b1b0:	2303      	movs	r3, #3
 800b1b2:	e006      	b.n	800b1c2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b1b4:	4b05      	ldr	r3, [pc, #20]	@ (800b1cc <RCCEx_PLL2_Config+0x15c>)
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d0f0      	beq.n	800b1a2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b1c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	3710      	adds	r7, #16
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	bd80      	pop	{r7, pc}
 800b1ca:	bf00      	nop
 800b1cc:	58024400 	.word	0x58024400
 800b1d0:	ffff0007 	.word	0xffff0007

0800b1d4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b084      	sub	sp, #16
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
 800b1dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b1de:	2300      	movs	r3, #0
 800b1e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b1e2:	4b53      	ldr	r3, [pc, #332]	@ (800b330 <RCCEx_PLL3_Config+0x15c>)
 800b1e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1e6:	f003 0303 	and.w	r3, r3, #3
 800b1ea:	2b03      	cmp	r3, #3
 800b1ec:	d101      	bne.n	800b1f2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b1ee:	2301      	movs	r3, #1
 800b1f0:	e099      	b.n	800b326 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b1f2:	4b4f      	ldr	r3, [pc, #316]	@ (800b330 <RCCEx_PLL3_Config+0x15c>)
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	4a4e      	ldr	r2, [pc, #312]	@ (800b330 <RCCEx_PLL3_Config+0x15c>)
 800b1f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b1fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b1fe:	f7f8 faab 	bl	8003758 <HAL_GetTick>
 800b202:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b204:	e008      	b.n	800b218 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b206:	f7f8 faa7 	bl	8003758 <HAL_GetTick>
 800b20a:	4602      	mov	r2, r0
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	1ad3      	subs	r3, r2, r3
 800b210:	2b02      	cmp	r3, #2
 800b212:	d901      	bls.n	800b218 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b214:	2303      	movs	r3, #3
 800b216:	e086      	b.n	800b326 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b218:	4b45      	ldr	r3, [pc, #276]	@ (800b330 <RCCEx_PLL3_Config+0x15c>)
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b220:	2b00      	cmp	r3, #0
 800b222:	d1f0      	bne.n	800b206 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b224:	4b42      	ldr	r3, [pc, #264]	@ (800b330 <RCCEx_PLL3_Config+0x15c>)
 800b226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b228:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	051b      	lsls	r3, r3, #20
 800b232:	493f      	ldr	r1, [pc, #252]	@ (800b330 <RCCEx_PLL3_Config+0x15c>)
 800b234:	4313      	orrs	r3, r2
 800b236:	628b      	str	r3, [r1, #40]	@ 0x28
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	685b      	ldr	r3, [r3, #4]
 800b23c:	3b01      	subs	r3, #1
 800b23e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	689b      	ldr	r3, [r3, #8]
 800b246:	3b01      	subs	r3, #1
 800b248:	025b      	lsls	r3, r3, #9
 800b24a:	b29b      	uxth	r3, r3
 800b24c:	431a      	orrs	r2, r3
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	68db      	ldr	r3, [r3, #12]
 800b252:	3b01      	subs	r3, #1
 800b254:	041b      	lsls	r3, r3, #16
 800b256:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b25a:	431a      	orrs	r2, r3
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	691b      	ldr	r3, [r3, #16]
 800b260:	3b01      	subs	r3, #1
 800b262:	061b      	lsls	r3, r3, #24
 800b264:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b268:	4931      	ldr	r1, [pc, #196]	@ (800b330 <RCCEx_PLL3_Config+0x15c>)
 800b26a:	4313      	orrs	r3, r2
 800b26c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b26e:	4b30      	ldr	r3, [pc, #192]	@ (800b330 <RCCEx_PLL3_Config+0x15c>)
 800b270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b272:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	695b      	ldr	r3, [r3, #20]
 800b27a:	492d      	ldr	r1, [pc, #180]	@ (800b330 <RCCEx_PLL3_Config+0x15c>)
 800b27c:	4313      	orrs	r3, r2
 800b27e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b280:	4b2b      	ldr	r3, [pc, #172]	@ (800b330 <RCCEx_PLL3_Config+0x15c>)
 800b282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b284:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	699b      	ldr	r3, [r3, #24]
 800b28c:	4928      	ldr	r1, [pc, #160]	@ (800b330 <RCCEx_PLL3_Config+0x15c>)
 800b28e:	4313      	orrs	r3, r2
 800b290:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b292:	4b27      	ldr	r3, [pc, #156]	@ (800b330 <RCCEx_PLL3_Config+0x15c>)
 800b294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b296:	4a26      	ldr	r2, [pc, #152]	@ (800b330 <RCCEx_PLL3_Config+0x15c>)
 800b298:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b29c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b29e:	4b24      	ldr	r3, [pc, #144]	@ (800b330 <RCCEx_PLL3_Config+0x15c>)
 800b2a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b2a2:	4b24      	ldr	r3, [pc, #144]	@ (800b334 <RCCEx_PLL3_Config+0x160>)
 800b2a4:	4013      	ands	r3, r2
 800b2a6:	687a      	ldr	r2, [r7, #4]
 800b2a8:	69d2      	ldr	r2, [r2, #28]
 800b2aa:	00d2      	lsls	r2, r2, #3
 800b2ac:	4920      	ldr	r1, [pc, #128]	@ (800b330 <RCCEx_PLL3_Config+0x15c>)
 800b2ae:	4313      	orrs	r3, r2
 800b2b0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b2b2:	4b1f      	ldr	r3, [pc, #124]	@ (800b330 <RCCEx_PLL3_Config+0x15c>)
 800b2b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2b6:	4a1e      	ldr	r2, [pc, #120]	@ (800b330 <RCCEx_PLL3_Config+0x15c>)
 800b2b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b2bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b2be:	683b      	ldr	r3, [r7, #0]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d106      	bne.n	800b2d2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b2c4:	4b1a      	ldr	r3, [pc, #104]	@ (800b330 <RCCEx_PLL3_Config+0x15c>)
 800b2c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2c8:	4a19      	ldr	r2, [pc, #100]	@ (800b330 <RCCEx_PLL3_Config+0x15c>)
 800b2ca:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b2ce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b2d0:	e00f      	b.n	800b2f2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b2d2:	683b      	ldr	r3, [r7, #0]
 800b2d4:	2b01      	cmp	r3, #1
 800b2d6:	d106      	bne.n	800b2e6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b2d8:	4b15      	ldr	r3, [pc, #84]	@ (800b330 <RCCEx_PLL3_Config+0x15c>)
 800b2da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2dc:	4a14      	ldr	r2, [pc, #80]	@ (800b330 <RCCEx_PLL3_Config+0x15c>)
 800b2de:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b2e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b2e4:	e005      	b.n	800b2f2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b2e6:	4b12      	ldr	r3, [pc, #72]	@ (800b330 <RCCEx_PLL3_Config+0x15c>)
 800b2e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2ea:	4a11      	ldr	r2, [pc, #68]	@ (800b330 <RCCEx_PLL3_Config+0x15c>)
 800b2ec:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b2f0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b2f2:	4b0f      	ldr	r3, [pc, #60]	@ (800b330 <RCCEx_PLL3_Config+0x15c>)
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	4a0e      	ldr	r2, [pc, #56]	@ (800b330 <RCCEx_PLL3_Config+0x15c>)
 800b2f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b2fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b2fe:	f7f8 fa2b 	bl	8003758 <HAL_GetTick>
 800b302:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b304:	e008      	b.n	800b318 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b306:	f7f8 fa27 	bl	8003758 <HAL_GetTick>
 800b30a:	4602      	mov	r2, r0
 800b30c:	68bb      	ldr	r3, [r7, #8]
 800b30e:	1ad3      	subs	r3, r2, r3
 800b310:	2b02      	cmp	r3, #2
 800b312:	d901      	bls.n	800b318 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b314:	2303      	movs	r3, #3
 800b316:	e006      	b.n	800b326 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b318:	4b05      	ldr	r3, [pc, #20]	@ (800b330 <RCCEx_PLL3_Config+0x15c>)
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b320:	2b00      	cmp	r3, #0
 800b322:	d0f0      	beq.n	800b306 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b324:	7bfb      	ldrb	r3, [r7, #15]
}
 800b326:	4618      	mov	r0, r3
 800b328:	3710      	adds	r7, #16
 800b32a:	46bd      	mov	sp, r7
 800b32c:	bd80      	pop	{r7, pc}
 800b32e:	bf00      	nop
 800b330:	58024400 	.word	0x58024400
 800b334:	ffff0007 	.word	0xffff0007

0800b338 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b086      	sub	sp, #24
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	60f8      	str	r0, [r7, #12]
 800b340:	60b9      	str	r1, [r7, #8]
 800b342:	607a      	str	r2, [r7, #4]
 800b344:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800b346:	68bb      	ldr	r3, [r7, #8]
 800b348:	2b02      	cmp	r3, #2
 800b34a:	d904      	bls.n	800b356 <HAL_SAI_InitProtocol+0x1e>
 800b34c:	68bb      	ldr	r3, [r7, #8]
 800b34e:	3b03      	subs	r3, #3
 800b350:	2b01      	cmp	r3, #1
 800b352:	d812      	bhi.n	800b37a <HAL_SAI_InitProtocol+0x42>
 800b354:	e008      	b.n	800b368 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	687a      	ldr	r2, [r7, #4]
 800b35a:	68b9      	ldr	r1, [r7, #8]
 800b35c:	68f8      	ldr	r0, [r7, #12]
 800b35e:	f000 fc2f 	bl	800bbc0 <SAI_InitI2S>
 800b362:	4603      	mov	r3, r0
 800b364:	75fb      	strb	r3, [r7, #23]
      break;
 800b366:	e00b      	b.n	800b380 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	687a      	ldr	r2, [r7, #4]
 800b36c:	68b9      	ldr	r1, [r7, #8]
 800b36e:	68f8      	ldr	r0, [r7, #12]
 800b370:	f000 fcd8 	bl	800bd24 <SAI_InitPCM>
 800b374:	4603      	mov	r3, r0
 800b376:	75fb      	strb	r3, [r7, #23]
      break;
 800b378:	e002      	b.n	800b380 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800b37a:	2301      	movs	r3, #1
 800b37c:	75fb      	strb	r3, [r7, #23]
      break;
 800b37e:	bf00      	nop
  }

  if (status == HAL_OK)
 800b380:	7dfb      	ldrb	r3, [r7, #23]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d104      	bne.n	800b390 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800b386:	68f8      	ldr	r0, [r7, #12]
 800b388:	f000 f808 	bl	800b39c <HAL_SAI_Init>
 800b38c:	4603      	mov	r3, r0
 800b38e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800b390:	7dfb      	ldrb	r3, [r7, #23]
}
 800b392:	4618      	mov	r0, r3
 800b394:	3718      	adds	r7, #24
 800b396:	46bd      	mov	sp, r7
 800b398:	bd80      	pop	{r7, pc}
	...

0800b39c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b08a      	sub	sp, #40	@ 0x28
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d101      	bne.n	800b3ae <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800b3aa:	2301      	movs	r3, #1
 800b3ac:	e28e      	b.n	800b8cc <HAL_SAI_Init+0x530>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800b3ae:	f7f8 fa03 	bl	80037b8 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b3b8:	2b01      	cmp	r3, #1
 800b3ba:	d113      	bne.n	800b3e4 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	4a96      	ldr	r2, [pc, #600]	@ (800b61c <HAL_SAI_Init+0x280>)
 800b3c2:	4293      	cmp	r3, r2
 800b3c4:	d004      	beq.n	800b3d0 <HAL_SAI_Init+0x34>
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	4a95      	ldr	r2, [pc, #596]	@ (800b620 <HAL_SAI_Init+0x284>)
 800b3cc:	4293      	cmp	r3, r2
 800b3ce:	d107      	bne.n	800b3e0 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800b3d4:	2b01      	cmp	r3, #1
 800b3d6:	d103      	bne.n	800b3e0 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d001      	beq.n	800b3e4 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 800b3e0:	2301      	movs	r3, #1
 800b3e2:	e273      	b.n	800b8cc <HAL_SAI_Init+0x530>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	4a8c      	ldr	r2, [pc, #560]	@ (800b61c <HAL_SAI_Init+0x280>)
 800b3ea:	4293      	cmp	r3, r2
 800b3ec:	d004      	beq.n	800b3f8 <HAL_SAI_Init+0x5c>
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	4a8c      	ldr	r2, [pc, #560]	@ (800b624 <HAL_SAI_Init+0x288>)
 800b3f4:	4293      	cmp	r3, r2
 800b3f6:	d102      	bne.n	800b3fe <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 800b3f8:	4b8b      	ldr	r3, [pc, #556]	@ (800b628 <HAL_SAI_Init+0x28c>)
 800b3fa:	61bb      	str	r3, [r7, #24]
 800b3fc:	e028      	b.n	800b450 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	4a8a      	ldr	r2, [pc, #552]	@ (800b62c <HAL_SAI_Init+0x290>)
 800b404:	4293      	cmp	r3, r2
 800b406:	d004      	beq.n	800b412 <HAL_SAI_Init+0x76>
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	4a88      	ldr	r2, [pc, #544]	@ (800b630 <HAL_SAI_Init+0x294>)
 800b40e:	4293      	cmp	r3, r2
 800b410:	d102      	bne.n	800b418 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 800b412:	4b88      	ldr	r3, [pc, #544]	@ (800b634 <HAL_SAI_Init+0x298>)
 800b414:	61bb      	str	r3, [r7, #24]
 800b416:	e01b      	b.n	800b450 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	4a86      	ldr	r2, [pc, #536]	@ (800b638 <HAL_SAI_Init+0x29c>)
 800b41e:	4293      	cmp	r3, r2
 800b420:	d004      	beq.n	800b42c <HAL_SAI_Init+0x90>
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	4a85      	ldr	r2, [pc, #532]	@ (800b63c <HAL_SAI_Init+0x2a0>)
 800b428:	4293      	cmp	r3, r2
 800b42a:	d102      	bne.n	800b432 <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 800b42c:	4b84      	ldr	r3, [pc, #528]	@ (800b640 <HAL_SAI_Init+0x2a4>)
 800b42e:	61bb      	str	r3, [r7, #24]
 800b430:	e00e      	b.n	800b450 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	4a7a      	ldr	r2, [pc, #488]	@ (800b620 <HAL_SAI_Init+0x284>)
 800b438:	4293      	cmp	r3, r2
 800b43a:	d004      	beq.n	800b446 <HAL_SAI_Init+0xaa>
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	4a80      	ldr	r2, [pc, #512]	@ (800b644 <HAL_SAI_Init+0x2a8>)
 800b442:	4293      	cmp	r3, r2
 800b444:	d102      	bne.n	800b44c <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 800b446:	4b80      	ldr	r3, [pc, #512]	@ (800b648 <HAL_SAI_Init+0x2ac>)
 800b448:	61bb      	str	r3, [r7, #24]
 800b44a:	e001      	b.n	800b450 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800b44c:	2301      	movs	r3, #1
 800b44e:	e23d      	b.n	800b8cc <HAL_SAI_Init+0x530>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800b456:	b2db      	uxtb	r3, r3
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d106      	bne.n	800b46a <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2200      	movs	r2, #0
 800b460:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800b464:	6878      	ldr	r0, [r7, #4]
 800b466:	f7f7 ff5d 	bl	8003324 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 800b46a:	6878      	ldr	r0, [r7, #4]
 800b46c:	f000 fd14 	bl	800be98 <SAI_Disable>
 800b470:	4603      	mov	r3, r0
 800b472:	2b00      	cmp	r3, #0
 800b474:	d001      	beq.n	800b47a <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 800b476:	2301      	movs	r3, #1
 800b478:	e228      	b.n	800b8cc <HAL_SAI_Init+0x530>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	2202      	movs	r2, #2
 800b47e:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	68db      	ldr	r3, [r3, #12]
 800b486:	2b02      	cmp	r3, #2
 800b488:	d00c      	beq.n	800b4a4 <HAL_SAI_Init+0x108>
 800b48a:	2b02      	cmp	r3, #2
 800b48c:	d80d      	bhi.n	800b4aa <HAL_SAI_Init+0x10e>
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d002      	beq.n	800b498 <HAL_SAI_Init+0xfc>
 800b492:	2b01      	cmp	r3, #1
 800b494:	d003      	beq.n	800b49e <HAL_SAI_Init+0x102>
 800b496:	e008      	b.n	800b4aa <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800b498:	2300      	movs	r3, #0
 800b49a:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800b49c:	e008      	b.n	800b4b0 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800b49e:	2310      	movs	r3, #16
 800b4a0:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800b4a2:	e005      	b.n	800b4b0 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800b4a4:	2320      	movs	r3, #32
 800b4a6:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800b4a8:	e002      	b.n	800b4b0 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800b4ae:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	689b      	ldr	r3, [r3, #8]
 800b4b4:	2b05      	cmp	r3, #5
 800b4b6:	d832      	bhi.n	800b51e <HAL_SAI_Init+0x182>
 800b4b8:	a201      	add	r2, pc, #4	@ (adr r2, 800b4c0 <HAL_SAI_Init+0x124>)
 800b4ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4be:	bf00      	nop
 800b4c0:	0800b4d9 	.word	0x0800b4d9
 800b4c4:	0800b4df 	.word	0x0800b4df
 800b4c8:	0800b4e7 	.word	0x0800b4e7
 800b4cc:	0800b4ef 	.word	0x0800b4ef
 800b4d0:	0800b4ff 	.word	0x0800b4ff
 800b4d4:	0800b50f 	.word	0x0800b50f
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800b4d8:	2300      	movs	r3, #0
 800b4da:	61fb      	str	r3, [r7, #28]
      break;
 800b4dc:	e022      	b.n	800b524 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800b4de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b4e2:	61fb      	str	r3, [r7, #28]
      break;
 800b4e4:	e01e      	b.n	800b524 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800b4e6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b4ea:	61fb      	str	r3, [r7, #28]
      break;
 800b4ec:	e01a      	b.n	800b524 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800b4ee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b4f2:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800b4f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4f6:	f043 0301 	orr.w	r3, r3, #1
 800b4fa:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800b4fc:	e012      	b.n	800b524 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800b4fe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b502:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 800b504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b506:	f043 0302 	orr.w	r3, r3, #2
 800b50a:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800b50c:	e00a      	b.n	800b524 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800b50e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b512:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 800b514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b516:	f043 0303 	orr.w	r3, r3, #3
 800b51a:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800b51c:	e002      	b.n	800b524 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800b51e:	2300      	movs	r3, #0
 800b520:	61fb      	str	r3, [r7, #28]
      break;
 800b522:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 800b524:	69bb      	ldr	r3, [r7, #24]
 800b526:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b528:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	6a1b      	ldr	r3, [r3, #32]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	f000 80c5 	beq.w	800b6be <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 800b534:	2300      	movs	r3, #0
 800b536:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	4a37      	ldr	r2, [pc, #220]	@ (800b61c <HAL_SAI_Init+0x280>)
 800b53e:	4293      	cmp	r3, r2
 800b540:	d004      	beq.n	800b54c <HAL_SAI_Init+0x1b0>
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	4a37      	ldr	r2, [pc, #220]	@ (800b624 <HAL_SAI_Init+0x288>)
 800b548:	4293      	cmp	r3, r2
 800b54a:	d106      	bne.n	800b55a <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800b54c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800b550:	f04f 0100 	mov.w	r1, #0
 800b554:	f7fe fbfc 	bl	8009d50 <HAL_RCCEx_GetPeriphCLKFreq>
 800b558:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	4a33      	ldr	r2, [pc, #204]	@ (800b62c <HAL_SAI_Init+0x290>)
 800b560:	4293      	cmp	r3, r2
 800b562:	d004      	beq.n	800b56e <HAL_SAI_Init+0x1d2>
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	4a31      	ldr	r2, [pc, #196]	@ (800b630 <HAL_SAI_Init+0x294>)
 800b56a:	4293      	cmp	r3, r2
 800b56c:	d106      	bne.n	800b57c <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800b56e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800b572:	f04f 0100 	mov.w	r1, #0
 800b576:	f7fe fbeb 	bl	8009d50 <HAL_RCCEx_GetPeriphCLKFreq>
 800b57a:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	4a2d      	ldr	r2, [pc, #180]	@ (800b638 <HAL_SAI_Init+0x29c>)
 800b582:	4293      	cmp	r3, r2
 800b584:	d004      	beq.n	800b590 <HAL_SAI_Init+0x1f4>
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	4a2c      	ldr	r2, [pc, #176]	@ (800b63c <HAL_SAI_Init+0x2a0>)
 800b58c:	4293      	cmp	r3, r2
 800b58e:	d106      	bne.n	800b59e <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 800b590:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800b594:	f04f 0100 	mov.w	r1, #0
 800b598:	f7fe fbda 	bl	8009d50 <HAL_RCCEx_GetPeriphCLKFreq>
 800b59c:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	4a1f      	ldr	r2, [pc, #124]	@ (800b620 <HAL_SAI_Init+0x284>)
 800b5a4:	4293      	cmp	r3, r2
 800b5a6:	d106      	bne.n	800b5b6 <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800b5a8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800b5ac:	f04f 0100 	mov.w	r1, #0
 800b5b0:	f7fe fbce 	bl	8009d50 <HAL_RCCEx_GetPeriphCLKFreq>
 800b5b4:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	4a22      	ldr	r2, [pc, #136]	@ (800b644 <HAL_SAI_Init+0x2a8>)
 800b5bc:	4293      	cmp	r3, r2
 800b5be:	d106      	bne.n	800b5ce <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800b5c0:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800b5c4:	f04f 0100 	mov.w	r1, #0
 800b5c8:	f7fe fbc2 	bl	8009d50 <HAL_RCCEx_GetPeriphCLKFreq>
 800b5cc:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	699b      	ldr	r3, [r3, #24]
 800b5d2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800b5d6:	d139      	bne.n	800b64c <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b5dc:	2b04      	cmp	r3, #4
 800b5de:	d102      	bne.n	800b5e6 <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800b5e0:	2340      	movs	r3, #64	@ 0x40
 800b5e2:	60fb      	str	r3, [r7, #12]
 800b5e4:	e00a      	b.n	800b5fc <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b5ea:	2b08      	cmp	r3, #8
 800b5ec:	d103      	bne.n	800b5f6 <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800b5ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b5f2:	60fb      	str	r3, [r7, #12]
 800b5f4:	e002      	b.n	800b5fc <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b5fa:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800b5fc:	697a      	ldr	r2, [r7, #20]
 800b5fe:	4613      	mov	r3, r2
 800b600:	009b      	lsls	r3, r3, #2
 800b602:	4413      	add	r3, r2
 800b604:	005b      	lsls	r3, r3, #1
 800b606:	4619      	mov	r1, r3
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	6a1b      	ldr	r3, [r3, #32]
 800b60c:	68fa      	ldr	r2, [r7, #12]
 800b60e:	fb02 f303 	mul.w	r3, r2, r3
 800b612:	fbb1 f3f3 	udiv	r3, r1, r3
 800b616:	613b      	str	r3, [r7, #16]
 800b618:	e030      	b.n	800b67c <HAL_SAI_Init+0x2e0>
 800b61a:	bf00      	nop
 800b61c:	40015804 	.word	0x40015804
 800b620:	58005404 	.word	0x58005404
 800b624:	40015824 	.word	0x40015824
 800b628:	40015800 	.word	0x40015800
 800b62c:	40015c04 	.word	0x40015c04
 800b630:	40015c24 	.word	0x40015c24
 800b634:	40015c00 	.word	0x40015c00
 800b638:	40016004 	.word	0x40016004
 800b63c:	40016024 	.word	0x40016024
 800b640:	40016000 	.word	0x40016000
 800b644:	58005424 	.word	0x58005424
 800b648:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b650:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b654:	d101      	bne.n	800b65a <HAL_SAI_Init+0x2be>
 800b656:	2302      	movs	r3, #2
 800b658:	e000      	b.n	800b65c <HAL_SAI_Init+0x2c0>
 800b65a:	2301      	movs	r3, #1
 800b65c:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800b65e:	697a      	ldr	r2, [r7, #20]
 800b660:	4613      	mov	r3, r2
 800b662:	009b      	lsls	r3, r3, #2
 800b664:	4413      	add	r3, r2
 800b666:	005b      	lsls	r3, r3, #1
 800b668:	4619      	mov	r1, r3
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	6a1b      	ldr	r3, [r3, #32]
 800b66e:	68ba      	ldr	r2, [r7, #8]
 800b670:	fb02 f303 	mul.w	r3, r2, r3
 800b674:	021b      	lsls	r3, r3, #8
 800b676:	fbb1 f3f3 	udiv	r3, r1, r3
 800b67a:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800b67c:	693b      	ldr	r3, [r7, #16]
 800b67e:	4a95      	ldr	r2, [pc, #596]	@ (800b8d4 <HAL_SAI_Init+0x538>)
 800b680:	fba2 2303 	umull	r2, r3, r2, r3
 800b684:	08da      	lsrs	r2, r3, #3
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800b68a:	6939      	ldr	r1, [r7, #16]
 800b68c:	4b91      	ldr	r3, [pc, #580]	@ (800b8d4 <HAL_SAI_Init+0x538>)
 800b68e:	fba3 2301 	umull	r2, r3, r3, r1
 800b692:	08da      	lsrs	r2, r3, #3
 800b694:	4613      	mov	r3, r2
 800b696:	009b      	lsls	r3, r3, #2
 800b698:	4413      	add	r3, r2
 800b69a:	005b      	lsls	r3, r3, #1
 800b69c:	1aca      	subs	r2, r1, r3
 800b69e:	2a08      	cmp	r2, #8
 800b6a0:	d904      	bls.n	800b6ac <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6a6:	1c5a      	adds	r2, r3, #1
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b6b0:	2b04      	cmp	r3, #4
 800b6b2:	d104      	bne.n	800b6be <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6b8:	085a      	lsrs	r2, r3, #1
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	685b      	ldr	r3, [r3, #4]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d003      	beq.n	800b6ce <HAL_SAI_Init+0x332>
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	685b      	ldr	r3, [r3, #4]
 800b6ca:	2b02      	cmp	r3, #2
 800b6cc:	d109      	bne.n	800b6e2 <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b6d2:	2b01      	cmp	r3, #1
 800b6d4:	d101      	bne.n	800b6da <HAL_SAI_Init+0x33e>
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	e001      	b.n	800b6de <HAL_SAI_Init+0x342>
 800b6da:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b6de:	623b      	str	r3, [r7, #32]
 800b6e0:	e008      	b.n	800b6f4 <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b6e6:	2b01      	cmp	r3, #1
 800b6e8:	d102      	bne.n	800b6f0 <HAL_SAI_Init+0x354>
 800b6ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b6ee:	e000      	b.n	800b6f2 <HAL_SAI_Init+0x356>
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800b6f4:	f7f8 f860 	bl	80037b8 <HAL_GetREVID>
 800b6f8:	4603      	mov	r3, r0
 800b6fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b6fe:	d331      	bcc.n	800b764 <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	6819      	ldr	r1, [r3, #0]
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681a      	ldr	r2, [r3, #0]
 800b70a:	4b73      	ldr	r3, [pc, #460]	@ (800b8d8 <HAL_SAI_Init+0x53c>)
 800b70c:	400b      	ands	r3, r1
 800b70e:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	6819      	ldr	r1, [r3, #0]
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	685a      	ldr	r2, [r3, #4]
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b71e:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b724:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b72a:	431a      	orrs	r2, r3
 800b72c:	6a3b      	ldr	r3, [r7, #32]
 800b72e:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800b730:	69fb      	ldr	r3, [r7, #28]
 800b732:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            ckstr_bits | syncen_bits |                             \
 800b738:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	695b      	ldr	r3, [r3, #20]
 800b73e:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b744:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b74a:	051b      	lsls	r3, r3, #20
 800b74c:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800b752:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	691b      	ldr	r3, [r3, #16]
 800b758:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	430a      	orrs	r2, r1
 800b760:	601a      	str	r2, [r3, #0]
 800b762:	e02d      	b.n	800b7c0 <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	6819      	ldr	r1, [r3, #0]
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681a      	ldr	r2, [r3, #0]
 800b76e:	4b5b      	ldr	r3, [pc, #364]	@ (800b8dc <HAL_SAI_Init+0x540>)
 800b770:	400b      	ands	r3, r1
 800b772:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	6819      	ldr	r1, [r3, #0]
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	685a      	ldr	r2, [r3, #4]
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b782:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b788:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b78e:	431a      	orrs	r2, r3
 800b790:	6a3b      	ldr	r3, [r7, #32]
 800b792:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800b794:	69fb      	ldr	r3, [r7, #28]
 800b796:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            ckstr_bits | syncen_bits |                             \
 800b79c:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	695b      	ldr	r3, [r3, #20]
 800b7a2:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b7a8:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7ae:	051b      	lsls	r3, r3, #20
 800b7b0:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800b7b6:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	430a      	orrs	r2, r1
 800b7be:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	6859      	ldr	r1, [r3, #4]
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681a      	ldr	r2, [r3, #0]
 800b7ca:	4b45      	ldr	r3, [pc, #276]	@ (800b8e0 <HAL_SAI_Init+0x544>)
 800b7cc:	400b      	ands	r3, r1
 800b7ce:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	6859      	ldr	r1, [r3, #4]
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	69da      	ldr	r2, [r3, #28]
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b7de:	431a      	orrs	r2, r3
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b7e4:	431a      	orrs	r2, r3
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	430a      	orrs	r2, r1
 800b7ec:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	6899      	ldr	r1, [r3, #8]
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681a      	ldr	r2, [r3, #0]
 800b7f8:	4b3a      	ldr	r3, [pc, #232]	@ (800b8e4 <HAL_SAI_Init+0x548>)
 800b7fa:	400b      	ands	r3, r1
 800b7fc:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	6899      	ldr	r1, [r3, #8]
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b808:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800b80e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 800b814:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 800b81a:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b820:	3b01      	subs	r3, #1
 800b822:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800b824:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	430a      	orrs	r2, r1
 800b82c:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	68d9      	ldr	r1, [r3, #12]
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681a      	ldr	r2, [r3, #0]
 800b838:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800b83c:	400b      	ands	r3, r1
 800b83e:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	68d9      	ldr	r1, [r3, #12]
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b84e:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b854:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800b856:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b85c:	3b01      	subs	r3, #1
 800b85e:	021b      	lsls	r3, r3, #8
 800b860:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	430a      	orrs	r2, r1
 800b868:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	4a1e      	ldr	r2, [pc, #120]	@ (800b8e8 <HAL_SAI_Init+0x54c>)
 800b870:	4293      	cmp	r3, r2
 800b872:	d004      	beq.n	800b87e <HAL_SAI_Init+0x4e2>
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	4a1c      	ldr	r2, [pc, #112]	@ (800b8ec <HAL_SAI_Init+0x550>)
 800b87a:	4293      	cmp	r3, r2
 800b87c:	d119      	bne.n	800b8b2 <HAL_SAI_Init+0x516>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800b87e:	69bb      	ldr	r3, [r7, #24]
 800b880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b882:	f023 0201 	bic.w	r2, r3, #1
 800b886:	69bb      	ldr	r3, [r7, #24]
 800b888:	645a      	str	r2, [r3, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b890:	2b01      	cmp	r3, #1
 800b892:	d10e      	bne.n	800b8b2 <HAL_SAI_Init+0x516>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b89c:	3b01      	subs	r3, #1
 800b89e:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800b8a0:	431a      	orrs	r2, r3
 800b8a2:	69bb      	ldr	r3, [r7, #24]
 800b8a4:	645a      	str	r2, [r3, #68]	@ 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800b8a6:	69bb      	ldr	r3, [r7, #24]
 800b8a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b8aa:	f043 0201 	orr.w	r2, r3, #1
 800b8ae:	69bb      	ldr	r3, [r7, #24]
 800b8b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	2201      	movs	r2, #1
 800b8be:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 800b8ca:	2300      	movs	r3, #0
}
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	3728      	adds	r7, #40	@ 0x28
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bd80      	pop	{r7, pc}
 800b8d4:	cccccccd 	.word	0xcccccccd
 800b8d8:	f005c010 	.word	0xf005c010
 800b8dc:	f805c010 	.word	0xf805c010
 800b8e0:	ffff1ff0 	.word	0xffff1ff0
 800b8e4:	fff88000 	.word	0xfff88000
 800b8e8:	40015804 	.word	0x40015804
 800b8ec:	58005404 	.word	0x58005404

0800b8f0 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b086      	sub	sp, #24
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	60f8      	str	r0, [r7, #12]
 800b8f8:	60b9      	str	r1, [r7, #8]
 800b8fa:	4613      	mov	r3, r2
 800b8fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800b8fe:	f7f7 ff2b 	bl	8003758 <HAL_GetTick>
 800b902:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800b904:	68bb      	ldr	r3, [r7, #8]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d002      	beq.n	800b910 <HAL_SAI_Transmit_DMA+0x20>
 800b90a:	88fb      	ldrh	r3, [r7, #6]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d101      	bne.n	800b914 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800b910:	2301      	movs	r3, #1
 800b912:	e098      	b.n	800ba46 <HAL_SAI_Transmit_DMA+0x156>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800b91a:	b2db      	uxtb	r3, r3
 800b91c:	2b01      	cmp	r3, #1
 800b91e:	f040 8091 	bne.w	800ba44 <HAL_SAI_Transmit_DMA+0x154>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800b928:	2b01      	cmp	r3, #1
 800b92a:	d101      	bne.n	800b930 <HAL_SAI_Transmit_DMA+0x40>
 800b92c:	2302      	movs	r3, #2
 800b92e:	e08a      	b.n	800ba46 <HAL_SAI_Transmit_DMA+0x156>
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	2201      	movs	r2, #1
 800b934:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->pBuffPtr = pData;
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	68ba      	ldr	r2, [r7, #8]
 800b93c:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->XferSize = Size;
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	88fa      	ldrh	r2, [r7, #6]
 800b942:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	88fa      	ldrh	r2, [r7, #6]
 800b94a:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	2200      	movs	r2, #0
 800b952:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	2212      	movs	r2, #18
 800b95a:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b964:	4a3a      	ldr	r2, [pc, #232]	@ (800ba50 <HAL_SAI_Transmit_DMA+0x160>)
 800b966:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b96e:	4a39      	ldr	r2, [pc, #228]	@ (800ba54 <HAL_SAI_Transmit_DMA+0x164>)
 800b970:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b978:	4a37      	ldr	r2, [pc, #220]	@ (800ba58 <HAL_SAI_Transmit_DMA+0x168>)
 800b97a:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b982:	2200      	movs	r2, #0
 800b984:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b990:	4619      	mov	r1, r3
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	331c      	adds	r3, #28
 800b998:	461a      	mov	r2, r3
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 800b9a0:	f7f8 fb82 	bl	80040a8 <HAL_DMA_Start_IT>
 800b9a4:	4603      	mov	r3, r0
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d005      	beq.n	800b9b6 <HAL_SAI_Transmit_DMA+0xc6>
    {
      __HAL_UNLOCK(hsai);
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      return  HAL_ERROR;
 800b9b2:	2301      	movs	r3, #1
 800b9b4:	e047      	b.n	800ba46 <HAL_SAI_Transmit_DMA+0x156>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800b9b6:	2100      	movs	r1, #0
 800b9b8:	68f8      	ldr	r0, [r7, #12]
 800b9ba:	f000 fa35 	bl	800be28 <SAI_InterruptFlag>
 800b9be:	4601      	mov	r1, r0
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	691a      	ldr	r2, [r3, #16]
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	430a      	orrs	r2, r1
 800b9cc:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	681a      	ldr	r2, [r3, #0]
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800b9dc:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800b9de:	e015      	b.n	800ba0c <HAL_SAI_Transmit_DMA+0x11c>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800b9e0:	f7f7 feba 	bl	8003758 <HAL_GetTick>
 800b9e4:	4602      	mov	r2, r0
 800b9e6:	697b      	ldr	r3, [r7, #20]
 800b9e8:	1ad3      	subs	r3, r2, r3
 800b9ea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b9ee:	d90d      	bls.n	800ba0c <HAL_SAI_Transmit_DMA+0x11c>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b9f6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	2200      	movs	r2, #0
 800ba04:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

        return HAL_TIMEOUT;
 800ba08:	2303      	movs	r3, #3
 800ba0a:	e01c      	b.n	800ba46 <HAL_SAI_Transmit_DMA+0x156>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	695b      	ldr	r3, [r3, #20]
 800ba12:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d0e2      	beq.n	800b9e0 <HAL_SAI_Transmit_DMA+0xf0>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d107      	bne.n	800ba38 <HAL_SAI_Transmit_DMA+0x148>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	681a      	ldr	r2, [r3, #0]
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800ba36:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 800ba40:	2300      	movs	r3, #0
 800ba42:	e000      	b.n	800ba46 <HAL_SAI_Transmit_DMA+0x156>
  }
  else
  {
    return HAL_BUSY;
 800ba44:	2302      	movs	r3, #2
  }
}
 800ba46:	4618      	mov	r0, r3
 800ba48:	3718      	adds	r7, #24
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bd80      	pop	{r7, pc}
 800ba4e:	bf00      	nop
 800ba50:	0800bf6d 	.word	0x0800bf6d
 800ba54:	0800bf0d 	.word	0x0800bf0d
 800ba58:	0800c005 	.word	0x0800c005

0800ba5c <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b084      	sub	sp, #16
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	60f8      	str	r0, [r7, #12]
 800ba64:	60b9      	str	r1, [r7, #8]
 800ba66:	4613      	mov	r3, r2
 800ba68:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 800ba6a:	68bb      	ldr	r3, [r7, #8]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d002      	beq.n	800ba76 <HAL_SAI_Receive_DMA+0x1a>
 800ba70:	88fb      	ldrh	r3, [r7, #6]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d101      	bne.n	800ba7a <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800ba76:	2301      	movs	r3, #1
 800ba78:	e079      	b.n	800bb6e <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800ba80:	b2db      	uxtb	r3, r3
 800ba82:	2b01      	cmp	r3, #1
 800ba84:	d172      	bne.n	800bb6c <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800ba8c:	2b01      	cmp	r3, #1
 800ba8e:	d101      	bne.n	800ba94 <HAL_SAI_Receive_DMA+0x38>
 800ba90:	2302      	movs	r3, #2
 800ba92:	e06c      	b.n	800bb6e <HAL_SAI_Receive_DMA+0x112>
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	2201      	movs	r2, #1
 800ba98:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->pBuffPtr = pData;
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	68ba      	ldr	r2, [r7, #8]
 800baa0:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->XferSize = Size;
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	88fa      	ldrh	r2, [r7, #6]
 800baa6:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	88fa      	ldrh	r2, [r7, #6]
 800baae:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	2200      	movs	r2, #0
 800bab6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	2222      	movs	r2, #34	@ 0x22
 800babe:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bac8:	4a2b      	ldr	r2, [pc, #172]	@ (800bb78 <HAL_SAI_Receive_DMA+0x11c>)
 800baca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bad2:	4a2a      	ldr	r2, [pc, #168]	@ (800bb7c <HAL_SAI_Receive_DMA+0x120>)
 800bad4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800badc:	4a28      	ldr	r2, [pc, #160]	@ (800bb80 <HAL_SAI_Receive_DMA+0x124>)
 800bade:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bae6:	2200      	movs	r2, #0
 800bae8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	331c      	adds	r3, #28
 800baf6:	4619      	mov	r1, r3
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bafc:	461a      	mov	r2, r3
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 800bb04:	f7f8 fad0 	bl	80040a8 <HAL_DMA_Start_IT>
 800bb08:	4603      	mov	r3, r0
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d005      	beq.n	800bb1a <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	2200      	movs	r2, #0
 800bb12:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      return  HAL_ERROR;
 800bb16:	2301      	movs	r3, #1
 800bb18:	e029      	b.n	800bb6e <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800bb1a:	2100      	movs	r1, #0
 800bb1c:	68f8      	ldr	r0, [r7, #12]
 800bb1e:	f000 f983 	bl	800be28 <SAI_InterruptFlag>
 800bb22:	4601      	mov	r1, r0
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	691a      	ldr	r2, [r3, #16]
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	430a      	orrs	r2, r1
 800bb30:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	681a      	ldr	r2, [r3, #0]
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800bb40:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d107      	bne.n	800bb60 <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	681a      	ldr	r2, [r3, #0]
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800bb5e:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	2200      	movs	r2, #0
 800bb64:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 800bb68:	2300      	movs	r3, #0
 800bb6a:	e000      	b.n	800bb6e <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 800bb6c:	2302      	movs	r3, #2
  }
}
 800bb6e:	4618      	mov	r0, r3
 800bb70:	3710      	adds	r7, #16
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd80      	pop	{r7, pc}
 800bb76:	bf00      	nop
 800bb78:	0800bfe9 	.word	0x0800bfe9
 800bb7c:	0800bf89 	.word	0x0800bf89
 800bb80:	0800c005 	.word	0x0800c005

0800bb84 <HAL_SAI_TxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 800bb84:	b480      	push	{r7}
 800bb86:	b083      	sub	sp, #12
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxCpltCallback could be implemented in the user file
   */
}
 800bb8c:	bf00      	nop
 800bb8e:	370c      	adds	r7, #12
 800bb90:	46bd      	mov	sp, r7
 800bb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb96:	4770      	bx	lr

0800bb98 <HAL_SAI_TxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 800bb98:	b480      	push	{r7}
 800bb9a:	b083      	sub	sp, #12
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxHalfCpltCallback could be implemented in the user file
   */
}
 800bba0:	bf00      	nop
 800bba2:	370c      	adds	r7, #12
 800bba4:	46bd      	mov	sp, r7
 800bba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbaa:	4770      	bx	lr

0800bbac <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800bbac:	b480      	push	{r7}
 800bbae:	b083      	sub	sp, #12
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 800bbb4:	bf00      	nop
 800bbb6:	370c      	adds	r7, #12
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbbe:	4770      	bx	lr

0800bbc0 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800bbc0:	b480      	push	{r7}
 800bbc2:	b087      	sub	sp, #28
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	60f8      	str	r0, [r7, #12]
 800bbc8:	60b9      	str	r1, [r7, #8]
 800bbca:	607a      	str	r2, [r7, #4]
 800bbcc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bbce:	2300      	movs	r3, #0
 800bbd0:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	2200      	movs	r2, #0
 800bbdc:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	685b      	ldr	r3, [r3, #4]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d003      	beq.n	800bbee <SAI_InitI2S+0x2e>
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	685b      	ldr	r3, [r3, #4]
 800bbea:	2b02      	cmp	r3, #2
 800bbec:	d103      	bne.n	800bbf6 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	651a      	str	r2, [r3, #80]	@ 0x50
 800bbf4:	e002      	b.n	800bbfc <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	2201      	movs	r2, #1
 800bbfa:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800bc02:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800bc0a:	675a      	str	r2, [r3, #116]	@ 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	2200      	movs	r2, #0
 800bc10:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	683a      	ldr	r2, [r7, #0]
 800bc16:	671a      	str	r2, [r3, #112]	@ 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800bc18:	683b      	ldr	r3, [r7, #0]
 800bc1a:	f003 0301 	and.w	r3, r3, #1
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d001      	beq.n	800bc26 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800bc22:	2301      	movs	r3, #1
 800bc24:	e077      	b.n	800bd16 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800bc26:	68bb      	ldr	r3, [r7, #8]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d107      	bne.n	800bc3c <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	2200      	movs	r2, #0
 800bc30:	661a      	str	r2, [r3, #96]	@ 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800bc38:	665a      	str	r2, [r3, #100]	@ 0x64
 800bc3a:	e006      	b.n	800bc4a <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800bc42:	661a      	str	r2, [r3, #96]	@ 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	2200      	movs	r2, #0
 800bc48:	665a      	str	r2, [r3, #100]	@ 0x64
  }

  /* Frame definition */
  switch (datasize)
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	2b03      	cmp	r3, #3
 800bc4e:	d84f      	bhi.n	800bcf0 <SAI_InitI2S+0x130>
 800bc50:	a201      	add	r2, pc, #4	@ (adr r2, 800bc58 <SAI_InitI2S+0x98>)
 800bc52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc56:	bf00      	nop
 800bc58:	0800bc69 	.word	0x0800bc69
 800bc5c:	0800bc8b 	.word	0x0800bc8b
 800bc60:	0800bcad 	.word	0x0800bcad
 800bc64:	0800bccf 	.word	0x0800bccf
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	2280      	movs	r2, #128	@ 0x80
 800bc6c:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800bc6e:	683b      	ldr	r3, [r7, #0]
 800bc70:	085b      	lsrs	r3, r3, #1
 800bc72:	015a      	lsls	r2, r3, #5
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800bc78:	683b      	ldr	r3, [r7, #0]
 800bc7a:	085b      	lsrs	r3, r3, #1
 800bc7c:	011a      	lsls	r2, r3, #4
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	2240      	movs	r2, #64	@ 0x40
 800bc86:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800bc88:	e035      	b.n	800bcf6 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	2280      	movs	r2, #128	@ 0x80
 800bc8e:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800bc90:	683b      	ldr	r3, [r7, #0]
 800bc92:	085b      	lsrs	r3, r3, #1
 800bc94:	019a      	lsls	r2, r3, #6
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	085b      	lsrs	r3, r3, #1
 800bc9e:	015a      	lsls	r2, r3, #5
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	2280      	movs	r2, #128	@ 0x80
 800bca8:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800bcaa:	e024      	b.n	800bcf6 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	22c0      	movs	r2, #192	@ 0xc0
 800bcb0:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800bcb2:	683b      	ldr	r3, [r7, #0]
 800bcb4:	085b      	lsrs	r3, r3, #1
 800bcb6:	019a      	lsls	r2, r3, #6
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800bcbc:	683b      	ldr	r3, [r7, #0]
 800bcbe:	085b      	lsrs	r3, r3, #1
 800bcc0:	015a      	lsls	r2, r3, #5
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	2280      	movs	r2, #128	@ 0x80
 800bcca:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800bccc:	e013      	b.n	800bcf6 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	22e0      	movs	r2, #224	@ 0xe0
 800bcd2:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	085b      	lsrs	r3, r3, #1
 800bcd8:	019a      	lsls	r2, r3, #6
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800bcde:	683b      	ldr	r3, [r7, #0]
 800bce0:	085b      	lsrs	r3, r3, #1
 800bce2:	015a      	lsls	r2, r3, #5
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	2280      	movs	r2, #128	@ 0x80
 800bcec:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800bcee:	e002      	b.n	800bcf6 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800bcf0:	2301      	movs	r3, #1
 800bcf2:	75fb      	strb	r3, [r7, #23]
      break;
 800bcf4:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800bcf6:	68bb      	ldr	r3, [r7, #8]
 800bcf8:	2b02      	cmp	r3, #2
 800bcfa:	d10b      	bne.n	800bd14 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	2b01      	cmp	r3, #1
 800bd00:	d102      	bne.n	800bd08 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	2210      	movs	r2, #16
 800bd06:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	2b02      	cmp	r3, #2
 800bd0c:	d102      	bne.n	800bd14 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	2208      	movs	r2, #8
 800bd12:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }
  return status;
 800bd14:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd16:	4618      	mov	r0, r3
 800bd18:	371c      	adds	r7, #28
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd20:	4770      	bx	lr
 800bd22:	bf00      	nop

0800bd24 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800bd24:	b480      	push	{r7}
 800bd26:	b087      	sub	sp, #28
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	60f8      	str	r0, [r7, #12]
 800bd2c:	60b9      	str	r1, [r7, #8]
 800bd2e:	607a      	str	r2, [r7, #4]
 800bd30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bd32:	2300      	movs	r3, #0
 800bd34:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	2200      	movs	r2, #0
 800bd3a:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	2200      	movs	r2, #0
 800bd40:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	685b      	ldr	r3, [r3, #4]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d003      	beq.n	800bd52 <SAI_InitPCM+0x2e>
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	685b      	ldr	r3, [r3, #4]
 800bd4e:	2b02      	cmp	r3, #2
 800bd50:	d103      	bne.n	800bd5a <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	2201      	movs	r2, #1
 800bd56:	651a      	str	r2, [r3, #80]	@ 0x50
 800bd58:	e002      	b.n	800bd60 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	2200      	movs	r2, #0
 800bd64:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800bd6c:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800bd74:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	2200      	movs	r2, #0
 800bd7a:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	683a      	ldr	r2, [r7, #0]
 800bd80:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800bd88:	675a      	str	r2, [r3, #116]	@ 0x74

  if (protocol == SAI_PCM_SHORT)
 800bd8a:	68bb      	ldr	r3, [r7, #8]
 800bd8c:	2b04      	cmp	r3, #4
 800bd8e:	d103      	bne.n	800bd98 <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	2201      	movs	r2, #1
 800bd94:	659a      	str	r2, [r3, #88]	@ 0x58
 800bd96:	e002      	b.n	800bd9e <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	220d      	movs	r2, #13
 800bd9c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  switch (datasize)
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	2b03      	cmp	r3, #3
 800bda2:	d837      	bhi.n	800be14 <SAI_InitPCM+0xf0>
 800bda4:	a201      	add	r2, pc, #4	@ (adr r2, 800bdac <SAI_InitPCM+0x88>)
 800bda6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdaa:	bf00      	nop
 800bdac:	0800bdbd 	.word	0x0800bdbd
 800bdb0:	0800bdd3 	.word	0x0800bdd3
 800bdb4:	0800bde9 	.word	0x0800bde9
 800bdb8:	0800bdff 	.word	0x0800bdff
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	2280      	movs	r2, #128	@ 0x80
 800bdc0:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	011a      	lsls	r2, r3, #4
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	2240      	movs	r2, #64	@ 0x40
 800bdce:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800bdd0:	e023      	b.n	800be1a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	2280      	movs	r2, #128	@ 0x80
 800bdd6:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	015a      	lsls	r2, r3, #5
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	2280      	movs	r2, #128	@ 0x80
 800bde4:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800bde6:	e018      	b.n	800be1a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	22c0      	movs	r2, #192	@ 0xc0
 800bdec:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	015a      	lsls	r2, r3, #5
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	2280      	movs	r2, #128	@ 0x80
 800bdfa:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800bdfc:	e00d      	b.n	800be1a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	22e0      	movs	r2, #224	@ 0xe0
 800be02:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	015a      	lsls	r2, r3, #5
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	2280      	movs	r2, #128	@ 0x80
 800be10:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800be12:	e002      	b.n	800be1a <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800be14:	2301      	movs	r3, #1
 800be16:	75fb      	strb	r3, [r7, #23]
      break;
 800be18:	bf00      	nop
  }

  return status;
 800be1a:	7dfb      	ldrb	r3, [r7, #23]
}
 800be1c:	4618      	mov	r0, r3
 800be1e:	371c      	adds	r7, #28
 800be20:	46bd      	mov	sp, r7
 800be22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be26:	4770      	bx	lr

0800be28 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 800be28:	b480      	push	{r7}
 800be2a:	b085      	sub	sp, #20
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
 800be30:	460b      	mov	r3, r1
 800be32:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800be34:	2301      	movs	r3, #1
 800be36:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800be38:	78fb      	ldrb	r3, [r7, #3]
 800be3a:	2b01      	cmp	r3, #1
 800be3c:	d103      	bne.n	800be46 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	f043 0308 	orr.w	r3, r3, #8
 800be44:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be4a:	2b08      	cmp	r3, #8
 800be4c:	d10b      	bne.n	800be66 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800be52:	2b03      	cmp	r3, #3
 800be54:	d003      	beq.n	800be5e <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	685b      	ldr	r3, [r3, #4]
 800be5a:	2b01      	cmp	r3, #1
 800be5c:	d103      	bne.n	800be66 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	f043 0310 	orr.w	r3, r3, #16
 800be64:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	685b      	ldr	r3, [r3, #4]
 800be6a:	2b03      	cmp	r3, #3
 800be6c:	d003      	beq.n	800be76 <SAI_InterruptFlag+0x4e>
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	685b      	ldr	r3, [r3, #4]
 800be72:	2b02      	cmp	r3, #2
 800be74:	d104      	bne.n	800be80 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800be7c:	60fb      	str	r3, [r7, #12]
 800be7e:	e003      	b.n	800be88 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	f043 0304 	orr.w	r3, r3, #4
 800be86:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800be88:	68fb      	ldr	r3, [r7, #12]
}
 800be8a:	4618      	mov	r0, r3
 800be8c:	3714      	adds	r7, #20
 800be8e:	46bd      	mov	sp, r7
 800be90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be94:	4770      	bx	lr
	...

0800be98 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800be98:	b480      	push	{r7}
 800be9a:	b085      	sub	sp, #20
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800bea0:	4b18      	ldr	r3, [pc, #96]	@ (800bf04 <SAI_Disable+0x6c>)
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	4a18      	ldr	r2, [pc, #96]	@ (800bf08 <SAI_Disable+0x70>)
 800bea6:	fba2 2303 	umull	r2, r3, r2, r3
 800beaa:	0b1b      	lsrs	r3, r3, #12
 800beac:	009b      	lsls	r3, r3, #2
 800beae:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800beb0:	2300      	movs	r3, #0
 800beb2:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	681a      	ldr	r2, [r3, #0]
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800bec2:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d10a      	bne.n	800bee0 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bed0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 800beda:	2303      	movs	r3, #3
 800bedc:	72fb      	strb	r3, [r7, #11]
      break;
 800bede:	e009      	b.n	800bef4 <SAI_Disable+0x5c>
    }
    count--;
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	3b01      	subs	r3, #1
 800bee4:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d1e7      	bne.n	800bec4 <SAI_Disable+0x2c>

  return status;
 800bef4:	7afb      	ldrb	r3, [r7, #11]
}
 800bef6:	4618      	mov	r0, r3
 800bef8:	3714      	adds	r7, #20
 800befa:	46bd      	mov	sp, r7
 800befc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf00:	4770      	bx	lr
 800bf02:	bf00      	nop
 800bf04:	24000000 	.word	0x24000000
 800bf08:	95cbec1b 	.word	0x95cbec1b

0800bf0c <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b084      	sub	sp, #16
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf18:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	69db      	ldr	r3, [r3, #28]
 800bf1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bf22:	d01c      	beq.n	800bf5e <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	2200      	movs	r2, #0
 800bf28:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	681a      	ldr	r2, [r3, #0]
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800bf3a:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800bf3c:	2100      	movs	r1, #0
 800bf3e:	68f8      	ldr	r0, [r7, #12]
 800bf40:	f7ff ff72 	bl	800be28 <SAI_InterruptFlag>
 800bf44:	4603      	mov	r3, r0
 800bf46:	43d9      	mvns	r1, r3
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	691a      	ldr	r2, [r3, #16]
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	400a      	ands	r2, r1
 800bf54:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	2201      	movs	r2, #1
 800bf5a:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800bf5e:	68f8      	ldr	r0, [r7, #12]
 800bf60:	f7ff fe10 	bl	800bb84 <HAL_SAI_TxCpltCallback>
#endif
}
 800bf64:	bf00      	nop
 800bf66:	3710      	adds	r7, #16
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	bd80      	pop	{r7, pc}

0800bf6c <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	b084      	sub	sp, #16
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf78:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800bf7a:	68f8      	ldr	r0, [r7, #12]
 800bf7c:	f7ff fe0c 	bl	800bb98 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 800bf80:	bf00      	nop
 800bf82:	3710      	adds	r7, #16
 800bf84:	46bd      	mov	sp, r7
 800bf86:	bd80      	pop	{r7, pc}

0800bf88 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	b084      	sub	sp, #16
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf94:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	69db      	ldr	r3, [r3, #28]
 800bf9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bf9e:	d01c      	beq.n	800bfda <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	681a      	ldr	r2, [r3, #0]
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800bfae:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800bfb8:	2100      	movs	r1, #0
 800bfba:	68f8      	ldr	r0, [r7, #12]
 800bfbc:	f7ff ff34 	bl	800be28 <SAI_InterruptFlag>
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	43d9      	mvns	r1, r3
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	691a      	ldr	r2, [r3, #16]
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	400a      	ands	r2, r1
 800bfd0:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	2201      	movs	r2, #1
 800bfd6:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800bfda:	68f8      	ldr	r0, [r7, #12]
 800bfdc:	f7f6 fa40 	bl	8002460 <HAL_SAI_RxCpltCallback>
#endif
}
 800bfe0:	bf00      	nop
 800bfe2:	3710      	adds	r7, #16
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	bd80      	pop	{r7, pc}

0800bfe8 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b084      	sub	sp, #16
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bff4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800bff6:	68f8      	ldr	r0, [r7, #12]
 800bff8:	f7f6 f9ce 	bl	8002398 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 800bffc:	bf00      	nop
 800bffe:	3710      	adds	r7, #16
 800c000:	46bd      	mov	sp, r7
 800c002:	bd80      	pop	{r7, pc}

0800c004 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b084      	sub	sp, #16
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c010:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800c012:	6878      	ldr	r0, [r7, #4]
 800c014:	f7f9 f9dc 	bl	80053d0 <HAL_DMA_GetError>
 800c018:	4603      	mov	r3, r0
 800c01a:	2b02      	cmp	r3, #2
 800c01c:	d01d      	beq.n	800c05a <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c024:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	681a      	ldr	r2, [r3, #0]
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800c03c:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 800c03e:	68f8      	ldr	r0, [r7, #12]
 800c040:	f7ff ff2a 	bl	800be98 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	2201      	movs	r2, #1
 800c048:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	2200      	movs	r2, #0
 800c050:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 800c054:	68f8      	ldr	r0, [r7, #12]
 800c056:	f7ff fda9 	bl	800bbac <HAL_SAI_ErrorCallback>
#endif
  }
}
 800c05a:	bf00      	nop
 800c05c:	3710      	adds	r7, #16
 800c05e:	46bd      	mov	sp, r7
 800c060:	bd80      	pop	{r7, pc}

0800c062 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c062:	b580      	push	{r7, lr}
 800c064:	b082      	sub	sp, #8
 800c066:	af00      	add	r7, sp, #0
 800c068:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d101      	bne.n	800c074 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c070:	2301      	movs	r3, #1
 800c072:	e042      	b.n	800c0fa <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d106      	bne.n	800c08c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	2200      	movs	r2, #0
 800c082:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c086:	6878      	ldr	r0, [r7, #4]
 800c088:	f7f7 f902 	bl	8003290 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	2224      	movs	r2, #36	@ 0x24
 800c090:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	681a      	ldr	r2, [r3, #0]
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	f022 0201 	bic.w	r2, r2, #1
 800c0a2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d002      	beq.n	800c0b2 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800c0ac:	6878      	ldr	r0, [r7, #4]
 800c0ae:	f000 fd91 	bl	800cbd4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c0b2:	6878      	ldr	r0, [r7, #4]
 800c0b4:	f000 f826 	bl	800c104 <UART_SetConfig>
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	2b01      	cmp	r3, #1
 800c0bc:	d101      	bne.n	800c0c2 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800c0be:	2301      	movs	r3, #1
 800c0c0:	e01b      	b.n	800c0fa <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	685a      	ldr	r2, [r3, #4]
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c0d0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	689a      	ldr	r2, [r3, #8]
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c0e0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	681a      	ldr	r2, [r3, #0]
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	f042 0201 	orr.w	r2, r2, #1
 800c0f0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c0f2:	6878      	ldr	r0, [r7, #4]
 800c0f4:	f000 fe10 	bl	800cd18 <UART_CheckIdleState>
 800c0f8:	4603      	mov	r3, r0
}
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	3708      	adds	r7, #8
 800c0fe:	46bd      	mov	sp, r7
 800c100:	bd80      	pop	{r7, pc}
	...

0800c104 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c104:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c108:	b092      	sub	sp, #72	@ 0x48
 800c10a:	af00      	add	r7, sp, #0
 800c10c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c10e:	2300      	movs	r3, #0
 800c110:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c114:	697b      	ldr	r3, [r7, #20]
 800c116:	689a      	ldr	r2, [r3, #8]
 800c118:	697b      	ldr	r3, [r7, #20]
 800c11a:	691b      	ldr	r3, [r3, #16]
 800c11c:	431a      	orrs	r2, r3
 800c11e:	697b      	ldr	r3, [r7, #20]
 800c120:	695b      	ldr	r3, [r3, #20]
 800c122:	431a      	orrs	r2, r3
 800c124:	697b      	ldr	r3, [r7, #20]
 800c126:	69db      	ldr	r3, [r3, #28]
 800c128:	4313      	orrs	r3, r2
 800c12a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c12c:	697b      	ldr	r3, [r7, #20]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	681a      	ldr	r2, [r3, #0]
 800c132:	4bbe      	ldr	r3, [pc, #760]	@ (800c42c <UART_SetConfig+0x328>)
 800c134:	4013      	ands	r3, r2
 800c136:	697a      	ldr	r2, [r7, #20]
 800c138:	6812      	ldr	r2, [r2, #0]
 800c13a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c13c:	430b      	orrs	r3, r1
 800c13e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c140:	697b      	ldr	r3, [r7, #20]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	685b      	ldr	r3, [r3, #4]
 800c146:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c14a:	697b      	ldr	r3, [r7, #20]
 800c14c:	68da      	ldr	r2, [r3, #12]
 800c14e:	697b      	ldr	r3, [r7, #20]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	430a      	orrs	r2, r1
 800c154:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c156:	697b      	ldr	r3, [r7, #20]
 800c158:	699b      	ldr	r3, [r3, #24]
 800c15a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c15c:	697b      	ldr	r3, [r7, #20]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	4ab3      	ldr	r2, [pc, #716]	@ (800c430 <UART_SetConfig+0x32c>)
 800c162:	4293      	cmp	r3, r2
 800c164:	d004      	beq.n	800c170 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c166:	697b      	ldr	r3, [r7, #20]
 800c168:	6a1b      	ldr	r3, [r3, #32]
 800c16a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c16c:	4313      	orrs	r3, r2
 800c16e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c170:	697b      	ldr	r3, [r7, #20]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	689a      	ldr	r2, [r3, #8]
 800c176:	4baf      	ldr	r3, [pc, #700]	@ (800c434 <UART_SetConfig+0x330>)
 800c178:	4013      	ands	r3, r2
 800c17a:	697a      	ldr	r2, [r7, #20]
 800c17c:	6812      	ldr	r2, [r2, #0]
 800c17e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c180:	430b      	orrs	r3, r1
 800c182:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c184:	697b      	ldr	r3, [r7, #20]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c18a:	f023 010f 	bic.w	r1, r3, #15
 800c18e:	697b      	ldr	r3, [r7, #20]
 800c190:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c192:	697b      	ldr	r3, [r7, #20]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	430a      	orrs	r2, r1
 800c198:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c19a:	697b      	ldr	r3, [r7, #20]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	4aa6      	ldr	r2, [pc, #664]	@ (800c438 <UART_SetConfig+0x334>)
 800c1a0:	4293      	cmp	r3, r2
 800c1a2:	d177      	bne.n	800c294 <UART_SetConfig+0x190>
 800c1a4:	4ba5      	ldr	r3, [pc, #660]	@ (800c43c <UART_SetConfig+0x338>)
 800c1a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c1a8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c1ac:	2b28      	cmp	r3, #40	@ 0x28
 800c1ae:	d86d      	bhi.n	800c28c <UART_SetConfig+0x188>
 800c1b0:	a201      	add	r2, pc, #4	@ (adr r2, 800c1b8 <UART_SetConfig+0xb4>)
 800c1b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1b6:	bf00      	nop
 800c1b8:	0800c25d 	.word	0x0800c25d
 800c1bc:	0800c28d 	.word	0x0800c28d
 800c1c0:	0800c28d 	.word	0x0800c28d
 800c1c4:	0800c28d 	.word	0x0800c28d
 800c1c8:	0800c28d 	.word	0x0800c28d
 800c1cc:	0800c28d 	.word	0x0800c28d
 800c1d0:	0800c28d 	.word	0x0800c28d
 800c1d4:	0800c28d 	.word	0x0800c28d
 800c1d8:	0800c265 	.word	0x0800c265
 800c1dc:	0800c28d 	.word	0x0800c28d
 800c1e0:	0800c28d 	.word	0x0800c28d
 800c1e4:	0800c28d 	.word	0x0800c28d
 800c1e8:	0800c28d 	.word	0x0800c28d
 800c1ec:	0800c28d 	.word	0x0800c28d
 800c1f0:	0800c28d 	.word	0x0800c28d
 800c1f4:	0800c28d 	.word	0x0800c28d
 800c1f8:	0800c26d 	.word	0x0800c26d
 800c1fc:	0800c28d 	.word	0x0800c28d
 800c200:	0800c28d 	.word	0x0800c28d
 800c204:	0800c28d 	.word	0x0800c28d
 800c208:	0800c28d 	.word	0x0800c28d
 800c20c:	0800c28d 	.word	0x0800c28d
 800c210:	0800c28d 	.word	0x0800c28d
 800c214:	0800c28d 	.word	0x0800c28d
 800c218:	0800c275 	.word	0x0800c275
 800c21c:	0800c28d 	.word	0x0800c28d
 800c220:	0800c28d 	.word	0x0800c28d
 800c224:	0800c28d 	.word	0x0800c28d
 800c228:	0800c28d 	.word	0x0800c28d
 800c22c:	0800c28d 	.word	0x0800c28d
 800c230:	0800c28d 	.word	0x0800c28d
 800c234:	0800c28d 	.word	0x0800c28d
 800c238:	0800c27d 	.word	0x0800c27d
 800c23c:	0800c28d 	.word	0x0800c28d
 800c240:	0800c28d 	.word	0x0800c28d
 800c244:	0800c28d 	.word	0x0800c28d
 800c248:	0800c28d 	.word	0x0800c28d
 800c24c:	0800c28d 	.word	0x0800c28d
 800c250:	0800c28d 	.word	0x0800c28d
 800c254:	0800c28d 	.word	0x0800c28d
 800c258:	0800c285 	.word	0x0800c285
 800c25c:	2301      	movs	r3, #1
 800c25e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c262:	e222      	b.n	800c6aa <UART_SetConfig+0x5a6>
 800c264:	2304      	movs	r3, #4
 800c266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c26a:	e21e      	b.n	800c6aa <UART_SetConfig+0x5a6>
 800c26c:	2308      	movs	r3, #8
 800c26e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c272:	e21a      	b.n	800c6aa <UART_SetConfig+0x5a6>
 800c274:	2310      	movs	r3, #16
 800c276:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c27a:	e216      	b.n	800c6aa <UART_SetConfig+0x5a6>
 800c27c:	2320      	movs	r3, #32
 800c27e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c282:	e212      	b.n	800c6aa <UART_SetConfig+0x5a6>
 800c284:	2340      	movs	r3, #64	@ 0x40
 800c286:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c28a:	e20e      	b.n	800c6aa <UART_SetConfig+0x5a6>
 800c28c:	2380      	movs	r3, #128	@ 0x80
 800c28e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c292:	e20a      	b.n	800c6aa <UART_SetConfig+0x5a6>
 800c294:	697b      	ldr	r3, [r7, #20]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	4a69      	ldr	r2, [pc, #420]	@ (800c440 <UART_SetConfig+0x33c>)
 800c29a:	4293      	cmp	r3, r2
 800c29c:	d130      	bne.n	800c300 <UART_SetConfig+0x1fc>
 800c29e:	4b67      	ldr	r3, [pc, #412]	@ (800c43c <UART_SetConfig+0x338>)
 800c2a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c2a2:	f003 0307 	and.w	r3, r3, #7
 800c2a6:	2b05      	cmp	r3, #5
 800c2a8:	d826      	bhi.n	800c2f8 <UART_SetConfig+0x1f4>
 800c2aa:	a201      	add	r2, pc, #4	@ (adr r2, 800c2b0 <UART_SetConfig+0x1ac>)
 800c2ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2b0:	0800c2c9 	.word	0x0800c2c9
 800c2b4:	0800c2d1 	.word	0x0800c2d1
 800c2b8:	0800c2d9 	.word	0x0800c2d9
 800c2bc:	0800c2e1 	.word	0x0800c2e1
 800c2c0:	0800c2e9 	.word	0x0800c2e9
 800c2c4:	0800c2f1 	.word	0x0800c2f1
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2ce:	e1ec      	b.n	800c6aa <UART_SetConfig+0x5a6>
 800c2d0:	2304      	movs	r3, #4
 800c2d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2d6:	e1e8      	b.n	800c6aa <UART_SetConfig+0x5a6>
 800c2d8:	2308      	movs	r3, #8
 800c2da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2de:	e1e4      	b.n	800c6aa <UART_SetConfig+0x5a6>
 800c2e0:	2310      	movs	r3, #16
 800c2e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2e6:	e1e0      	b.n	800c6aa <UART_SetConfig+0x5a6>
 800c2e8:	2320      	movs	r3, #32
 800c2ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2ee:	e1dc      	b.n	800c6aa <UART_SetConfig+0x5a6>
 800c2f0:	2340      	movs	r3, #64	@ 0x40
 800c2f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2f6:	e1d8      	b.n	800c6aa <UART_SetConfig+0x5a6>
 800c2f8:	2380      	movs	r3, #128	@ 0x80
 800c2fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2fe:	e1d4      	b.n	800c6aa <UART_SetConfig+0x5a6>
 800c300:	697b      	ldr	r3, [r7, #20]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	4a4f      	ldr	r2, [pc, #316]	@ (800c444 <UART_SetConfig+0x340>)
 800c306:	4293      	cmp	r3, r2
 800c308:	d130      	bne.n	800c36c <UART_SetConfig+0x268>
 800c30a:	4b4c      	ldr	r3, [pc, #304]	@ (800c43c <UART_SetConfig+0x338>)
 800c30c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c30e:	f003 0307 	and.w	r3, r3, #7
 800c312:	2b05      	cmp	r3, #5
 800c314:	d826      	bhi.n	800c364 <UART_SetConfig+0x260>
 800c316:	a201      	add	r2, pc, #4	@ (adr r2, 800c31c <UART_SetConfig+0x218>)
 800c318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c31c:	0800c335 	.word	0x0800c335
 800c320:	0800c33d 	.word	0x0800c33d
 800c324:	0800c345 	.word	0x0800c345
 800c328:	0800c34d 	.word	0x0800c34d
 800c32c:	0800c355 	.word	0x0800c355
 800c330:	0800c35d 	.word	0x0800c35d
 800c334:	2300      	movs	r3, #0
 800c336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c33a:	e1b6      	b.n	800c6aa <UART_SetConfig+0x5a6>
 800c33c:	2304      	movs	r3, #4
 800c33e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c342:	e1b2      	b.n	800c6aa <UART_SetConfig+0x5a6>
 800c344:	2308      	movs	r3, #8
 800c346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c34a:	e1ae      	b.n	800c6aa <UART_SetConfig+0x5a6>
 800c34c:	2310      	movs	r3, #16
 800c34e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c352:	e1aa      	b.n	800c6aa <UART_SetConfig+0x5a6>
 800c354:	2320      	movs	r3, #32
 800c356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c35a:	e1a6      	b.n	800c6aa <UART_SetConfig+0x5a6>
 800c35c:	2340      	movs	r3, #64	@ 0x40
 800c35e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c362:	e1a2      	b.n	800c6aa <UART_SetConfig+0x5a6>
 800c364:	2380      	movs	r3, #128	@ 0x80
 800c366:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c36a:	e19e      	b.n	800c6aa <UART_SetConfig+0x5a6>
 800c36c:	697b      	ldr	r3, [r7, #20]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	4a35      	ldr	r2, [pc, #212]	@ (800c448 <UART_SetConfig+0x344>)
 800c372:	4293      	cmp	r3, r2
 800c374:	d130      	bne.n	800c3d8 <UART_SetConfig+0x2d4>
 800c376:	4b31      	ldr	r3, [pc, #196]	@ (800c43c <UART_SetConfig+0x338>)
 800c378:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c37a:	f003 0307 	and.w	r3, r3, #7
 800c37e:	2b05      	cmp	r3, #5
 800c380:	d826      	bhi.n	800c3d0 <UART_SetConfig+0x2cc>
 800c382:	a201      	add	r2, pc, #4	@ (adr r2, 800c388 <UART_SetConfig+0x284>)
 800c384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c388:	0800c3a1 	.word	0x0800c3a1
 800c38c:	0800c3a9 	.word	0x0800c3a9
 800c390:	0800c3b1 	.word	0x0800c3b1
 800c394:	0800c3b9 	.word	0x0800c3b9
 800c398:	0800c3c1 	.word	0x0800c3c1
 800c39c:	0800c3c9 	.word	0x0800c3c9
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3a6:	e180      	b.n	800c6aa <UART_SetConfig+0x5a6>
 800c3a8:	2304      	movs	r3, #4
 800c3aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3ae:	e17c      	b.n	800c6aa <UART_SetConfig+0x5a6>
 800c3b0:	2308      	movs	r3, #8
 800c3b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3b6:	e178      	b.n	800c6aa <UART_SetConfig+0x5a6>
 800c3b8:	2310      	movs	r3, #16
 800c3ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3be:	e174      	b.n	800c6aa <UART_SetConfig+0x5a6>
 800c3c0:	2320      	movs	r3, #32
 800c3c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3c6:	e170      	b.n	800c6aa <UART_SetConfig+0x5a6>
 800c3c8:	2340      	movs	r3, #64	@ 0x40
 800c3ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3ce:	e16c      	b.n	800c6aa <UART_SetConfig+0x5a6>
 800c3d0:	2380      	movs	r3, #128	@ 0x80
 800c3d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3d6:	e168      	b.n	800c6aa <UART_SetConfig+0x5a6>
 800c3d8:	697b      	ldr	r3, [r7, #20]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	4a1b      	ldr	r2, [pc, #108]	@ (800c44c <UART_SetConfig+0x348>)
 800c3de:	4293      	cmp	r3, r2
 800c3e0:	d142      	bne.n	800c468 <UART_SetConfig+0x364>
 800c3e2:	4b16      	ldr	r3, [pc, #88]	@ (800c43c <UART_SetConfig+0x338>)
 800c3e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c3e6:	f003 0307 	and.w	r3, r3, #7
 800c3ea:	2b05      	cmp	r3, #5
 800c3ec:	d838      	bhi.n	800c460 <UART_SetConfig+0x35c>
 800c3ee:	a201      	add	r2, pc, #4	@ (adr r2, 800c3f4 <UART_SetConfig+0x2f0>)
 800c3f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3f4:	0800c40d 	.word	0x0800c40d
 800c3f8:	0800c415 	.word	0x0800c415
 800c3fc:	0800c41d 	.word	0x0800c41d
 800c400:	0800c425 	.word	0x0800c425
 800c404:	0800c451 	.word	0x0800c451
 800c408:	0800c459 	.word	0x0800c459
 800c40c:	2300      	movs	r3, #0
 800c40e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c412:	e14a      	b.n	800c6aa <UART_SetConfig+0x5a6>
 800c414:	2304      	movs	r3, #4
 800c416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c41a:	e146      	b.n	800c6aa <UART_SetConfig+0x5a6>
 800c41c:	2308      	movs	r3, #8
 800c41e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c422:	e142      	b.n	800c6aa <UART_SetConfig+0x5a6>
 800c424:	2310      	movs	r3, #16
 800c426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c42a:	e13e      	b.n	800c6aa <UART_SetConfig+0x5a6>
 800c42c:	cfff69f3 	.word	0xcfff69f3
 800c430:	58000c00 	.word	0x58000c00
 800c434:	11fff4ff 	.word	0x11fff4ff
 800c438:	40011000 	.word	0x40011000
 800c43c:	58024400 	.word	0x58024400
 800c440:	40004400 	.word	0x40004400
 800c444:	40004800 	.word	0x40004800
 800c448:	40004c00 	.word	0x40004c00
 800c44c:	40005000 	.word	0x40005000
 800c450:	2320      	movs	r3, #32
 800c452:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c456:	e128      	b.n	800c6aa <UART_SetConfig+0x5a6>
 800c458:	2340      	movs	r3, #64	@ 0x40
 800c45a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c45e:	e124      	b.n	800c6aa <UART_SetConfig+0x5a6>
 800c460:	2380      	movs	r3, #128	@ 0x80
 800c462:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c466:	e120      	b.n	800c6aa <UART_SetConfig+0x5a6>
 800c468:	697b      	ldr	r3, [r7, #20]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	4acb      	ldr	r2, [pc, #812]	@ (800c79c <UART_SetConfig+0x698>)
 800c46e:	4293      	cmp	r3, r2
 800c470:	d176      	bne.n	800c560 <UART_SetConfig+0x45c>
 800c472:	4bcb      	ldr	r3, [pc, #812]	@ (800c7a0 <UART_SetConfig+0x69c>)
 800c474:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c476:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c47a:	2b28      	cmp	r3, #40	@ 0x28
 800c47c:	d86c      	bhi.n	800c558 <UART_SetConfig+0x454>
 800c47e:	a201      	add	r2, pc, #4	@ (adr r2, 800c484 <UART_SetConfig+0x380>)
 800c480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c484:	0800c529 	.word	0x0800c529
 800c488:	0800c559 	.word	0x0800c559
 800c48c:	0800c559 	.word	0x0800c559
 800c490:	0800c559 	.word	0x0800c559
 800c494:	0800c559 	.word	0x0800c559
 800c498:	0800c559 	.word	0x0800c559
 800c49c:	0800c559 	.word	0x0800c559
 800c4a0:	0800c559 	.word	0x0800c559
 800c4a4:	0800c531 	.word	0x0800c531
 800c4a8:	0800c559 	.word	0x0800c559
 800c4ac:	0800c559 	.word	0x0800c559
 800c4b0:	0800c559 	.word	0x0800c559
 800c4b4:	0800c559 	.word	0x0800c559
 800c4b8:	0800c559 	.word	0x0800c559
 800c4bc:	0800c559 	.word	0x0800c559
 800c4c0:	0800c559 	.word	0x0800c559
 800c4c4:	0800c539 	.word	0x0800c539
 800c4c8:	0800c559 	.word	0x0800c559
 800c4cc:	0800c559 	.word	0x0800c559
 800c4d0:	0800c559 	.word	0x0800c559
 800c4d4:	0800c559 	.word	0x0800c559
 800c4d8:	0800c559 	.word	0x0800c559
 800c4dc:	0800c559 	.word	0x0800c559
 800c4e0:	0800c559 	.word	0x0800c559
 800c4e4:	0800c541 	.word	0x0800c541
 800c4e8:	0800c559 	.word	0x0800c559
 800c4ec:	0800c559 	.word	0x0800c559
 800c4f0:	0800c559 	.word	0x0800c559
 800c4f4:	0800c559 	.word	0x0800c559
 800c4f8:	0800c559 	.word	0x0800c559
 800c4fc:	0800c559 	.word	0x0800c559
 800c500:	0800c559 	.word	0x0800c559
 800c504:	0800c549 	.word	0x0800c549
 800c508:	0800c559 	.word	0x0800c559
 800c50c:	0800c559 	.word	0x0800c559
 800c510:	0800c559 	.word	0x0800c559
 800c514:	0800c559 	.word	0x0800c559
 800c518:	0800c559 	.word	0x0800c559
 800c51c:	0800c559 	.word	0x0800c559
 800c520:	0800c559 	.word	0x0800c559
 800c524:	0800c551 	.word	0x0800c551
 800c528:	2301      	movs	r3, #1
 800c52a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c52e:	e0bc      	b.n	800c6aa <UART_SetConfig+0x5a6>
 800c530:	2304      	movs	r3, #4
 800c532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c536:	e0b8      	b.n	800c6aa <UART_SetConfig+0x5a6>
 800c538:	2308      	movs	r3, #8
 800c53a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c53e:	e0b4      	b.n	800c6aa <UART_SetConfig+0x5a6>
 800c540:	2310      	movs	r3, #16
 800c542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c546:	e0b0      	b.n	800c6aa <UART_SetConfig+0x5a6>
 800c548:	2320      	movs	r3, #32
 800c54a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c54e:	e0ac      	b.n	800c6aa <UART_SetConfig+0x5a6>
 800c550:	2340      	movs	r3, #64	@ 0x40
 800c552:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c556:	e0a8      	b.n	800c6aa <UART_SetConfig+0x5a6>
 800c558:	2380      	movs	r3, #128	@ 0x80
 800c55a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c55e:	e0a4      	b.n	800c6aa <UART_SetConfig+0x5a6>
 800c560:	697b      	ldr	r3, [r7, #20]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	4a8f      	ldr	r2, [pc, #572]	@ (800c7a4 <UART_SetConfig+0x6a0>)
 800c566:	4293      	cmp	r3, r2
 800c568:	d130      	bne.n	800c5cc <UART_SetConfig+0x4c8>
 800c56a:	4b8d      	ldr	r3, [pc, #564]	@ (800c7a0 <UART_SetConfig+0x69c>)
 800c56c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c56e:	f003 0307 	and.w	r3, r3, #7
 800c572:	2b05      	cmp	r3, #5
 800c574:	d826      	bhi.n	800c5c4 <UART_SetConfig+0x4c0>
 800c576:	a201      	add	r2, pc, #4	@ (adr r2, 800c57c <UART_SetConfig+0x478>)
 800c578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c57c:	0800c595 	.word	0x0800c595
 800c580:	0800c59d 	.word	0x0800c59d
 800c584:	0800c5a5 	.word	0x0800c5a5
 800c588:	0800c5ad 	.word	0x0800c5ad
 800c58c:	0800c5b5 	.word	0x0800c5b5
 800c590:	0800c5bd 	.word	0x0800c5bd
 800c594:	2300      	movs	r3, #0
 800c596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c59a:	e086      	b.n	800c6aa <UART_SetConfig+0x5a6>
 800c59c:	2304      	movs	r3, #4
 800c59e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5a2:	e082      	b.n	800c6aa <UART_SetConfig+0x5a6>
 800c5a4:	2308      	movs	r3, #8
 800c5a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5aa:	e07e      	b.n	800c6aa <UART_SetConfig+0x5a6>
 800c5ac:	2310      	movs	r3, #16
 800c5ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5b2:	e07a      	b.n	800c6aa <UART_SetConfig+0x5a6>
 800c5b4:	2320      	movs	r3, #32
 800c5b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5ba:	e076      	b.n	800c6aa <UART_SetConfig+0x5a6>
 800c5bc:	2340      	movs	r3, #64	@ 0x40
 800c5be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5c2:	e072      	b.n	800c6aa <UART_SetConfig+0x5a6>
 800c5c4:	2380      	movs	r3, #128	@ 0x80
 800c5c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5ca:	e06e      	b.n	800c6aa <UART_SetConfig+0x5a6>
 800c5cc:	697b      	ldr	r3, [r7, #20]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	4a75      	ldr	r2, [pc, #468]	@ (800c7a8 <UART_SetConfig+0x6a4>)
 800c5d2:	4293      	cmp	r3, r2
 800c5d4:	d130      	bne.n	800c638 <UART_SetConfig+0x534>
 800c5d6:	4b72      	ldr	r3, [pc, #456]	@ (800c7a0 <UART_SetConfig+0x69c>)
 800c5d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c5da:	f003 0307 	and.w	r3, r3, #7
 800c5de:	2b05      	cmp	r3, #5
 800c5e0:	d826      	bhi.n	800c630 <UART_SetConfig+0x52c>
 800c5e2:	a201      	add	r2, pc, #4	@ (adr r2, 800c5e8 <UART_SetConfig+0x4e4>)
 800c5e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5e8:	0800c601 	.word	0x0800c601
 800c5ec:	0800c609 	.word	0x0800c609
 800c5f0:	0800c611 	.word	0x0800c611
 800c5f4:	0800c619 	.word	0x0800c619
 800c5f8:	0800c621 	.word	0x0800c621
 800c5fc:	0800c629 	.word	0x0800c629
 800c600:	2300      	movs	r3, #0
 800c602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c606:	e050      	b.n	800c6aa <UART_SetConfig+0x5a6>
 800c608:	2304      	movs	r3, #4
 800c60a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c60e:	e04c      	b.n	800c6aa <UART_SetConfig+0x5a6>
 800c610:	2308      	movs	r3, #8
 800c612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c616:	e048      	b.n	800c6aa <UART_SetConfig+0x5a6>
 800c618:	2310      	movs	r3, #16
 800c61a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c61e:	e044      	b.n	800c6aa <UART_SetConfig+0x5a6>
 800c620:	2320      	movs	r3, #32
 800c622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c626:	e040      	b.n	800c6aa <UART_SetConfig+0x5a6>
 800c628:	2340      	movs	r3, #64	@ 0x40
 800c62a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c62e:	e03c      	b.n	800c6aa <UART_SetConfig+0x5a6>
 800c630:	2380      	movs	r3, #128	@ 0x80
 800c632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c636:	e038      	b.n	800c6aa <UART_SetConfig+0x5a6>
 800c638:	697b      	ldr	r3, [r7, #20]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	4a5b      	ldr	r2, [pc, #364]	@ (800c7ac <UART_SetConfig+0x6a8>)
 800c63e:	4293      	cmp	r3, r2
 800c640:	d130      	bne.n	800c6a4 <UART_SetConfig+0x5a0>
 800c642:	4b57      	ldr	r3, [pc, #348]	@ (800c7a0 <UART_SetConfig+0x69c>)
 800c644:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c646:	f003 0307 	and.w	r3, r3, #7
 800c64a:	2b05      	cmp	r3, #5
 800c64c:	d826      	bhi.n	800c69c <UART_SetConfig+0x598>
 800c64e:	a201      	add	r2, pc, #4	@ (adr r2, 800c654 <UART_SetConfig+0x550>)
 800c650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c654:	0800c66d 	.word	0x0800c66d
 800c658:	0800c675 	.word	0x0800c675
 800c65c:	0800c67d 	.word	0x0800c67d
 800c660:	0800c685 	.word	0x0800c685
 800c664:	0800c68d 	.word	0x0800c68d
 800c668:	0800c695 	.word	0x0800c695
 800c66c:	2302      	movs	r3, #2
 800c66e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c672:	e01a      	b.n	800c6aa <UART_SetConfig+0x5a6>
 800c674:	2304      	movs	r3, #4
 800c676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c67a:	e016      	b.n	800c6aa <UART_SetConfig+0x5a6>
 800c67c:	2308      	movs	r3, #8
 800c67e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c682:	e012      	b.n	800c6aa <UART_SetConfig+0x5a6>
 800c684:	2310      	movs	r3, #16
 800c686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c68a:	e00e      	b.n	800c6aa <UART_SetConfig+0x5a6>
 800c68c:	2320      	movs	r3, #32
 800c68e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c692:	e00a      	b.n	800c6aa <UART_SetConfig+0x5a6>
 800c694:	2340      	movs	r3, #64	@ 0x40
 800c696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c69a:	e006      	b.n	800c6aa <UART_SetConfig+0x5a6>
 800c69c:	2380      	movs	r3, #128	@ 0x80
 800c69e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c6a2:	e002      	b.n	800c6aa <UART_SetConfig+0x5a6>
 800c6a4:	2380      	movs	r3, #128	@ 0x80
 800c6a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c6aa:	697b      	ldr	r3, [r7, #20]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	4a3f      	ldr	r2, [pc, #252]	@ (800c7ac <UART_SetConfig+0x6a8>)
 800c6b0:	4293      	cmp	r3, r2
 800c6b2:	f040 80f8 	bne.w	800c8a6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c6b6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c6ba:	2b20      	cmp	r3, #32
 800c6bc:	dc46      	bgt.n	800c74c <UART_SetConfig+0x648>
 800c6be:	2b02      	cmp	r3, #2
 800c6c0:	f2c0 8082 	blt.w	800c7c8 <UART_SetConfig+0x6c4>
 800c6c4:	3b02      	subs	r3, #2
 800c6c6:	2b1e      	cmp	r3, #30
 800c6c8:	d87e      	bhi.n	800c7c8 <UART_SetConfig+0x6c4>
 800c6ca:	a201      	add	r2, pc, #4	@ (adr r2, 800c6d0 <UART_SetConfig+0x5cc>)
 800c6cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6d0:	0800c753 	.word	0x0800c753
 800c6d4:	0800c7c9 	.word	0x0800c7c9
 800c6d8:	0800c75b 	.word	0x0800c75b
 800c6dc:	0800c7c9 	.word	0x0800c7c9
 800c6e0:	0800c7c9 	.word	0x0800c7c9
 800c6e4:	0800c7c9 	.word	0x0800c7c9
 800c6e8:	0800c76b 	.word	0x0800c76b
 800c6ec:	0800c7c9 	.word	0x0800c7c9
 800c6f0:	0800c7c9 	.word	0x0800c7c9
 800c6f4:	0800c7c9 	.word	0x0800c7c9
 800c6f8:	0800c7c9 	.word	0x0800c7c9
 800c6fc:	0800c7c9 	.word	0x0800c7c9
 800c700:	0800c7c9 	.word	0x0800c7c9
 800c704:	0800c7c9 	.word	0x0800c7c9
 800c708:	0800c77b 	.word	0x0800c77b
 800c70c:	0800c7c9 	.word	0x0800c7c9
 800c710:	0800c7c9 	.word	0x0800c7c9
 800c714:	0800c7c9 	.word	0x0800c7c9
 800c718:	0800c7c9 	.word	0x0800c7c9
 800c71c:	0800c7c9 	.word	0x0800c7c9
 800c720:	0800c7c9 	.word	0x0800c7c9
 800c724:	0800c7c9 	.word	0x0800c7c9
 800c728:	0800c7c9 	.word	0x0800c7c9
 800c72c:	0800c7c9 	.word	0x0800c7c9
 800c730:	0800c7c9 	.word	0x0800c7c9
 800c734:	0800c7c9 	.word	0x0800c7c9
 800c738:	0800c7c9 	.word	0x0800c7c9
 800c73c:	0800c7c9 	.word	0x0800c7c9
 800c740:	0800c7c9 	.word	0x0800c7c9
 800c744:	0800c7c9 	.word	0x0800c7c9
 800c748:	0800c7bb 	.word	0x0800c7bb
 800c74c:	2b40      	cmp	r3, #64	@ 0x40
 800c74e:	d037      	beq.n	800c7c0 <UART_SetConfig+0x6bc>
 800c750:	e03a      	b.n	800c7c8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c752:	f7fe f87d 	bl	800a850 <HAL_RCCEx_GetD3PCLK1Freq>
 800c756:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c758:	e03c      	b.n	800c7d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c75a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c75e:	4618      	mov	r0, r3
 800c760:	f7fe f88c 	bl	800a87c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c766:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c768:	e034      	b.n	800c7d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c76a:	f107 0318 	add.w	r3, r7, #24
 800c76e:	4618      	mov	r0, r3
 800c770:	f7fe f9d8 	bl	800ab24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c774:	69fb      	ldr	r3, [r7, #28]
 800c776:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c778:	e02c      	b.n	800c7d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c77a:	4b09      	ldr	r3, [pc, #36]	@ (800c7a0 <UART_SetConfig+0x69c>)
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	f003 0320 	and.w	r3, r3, #32
 800c782:	2b00      	cmp	r3, #0
 800c784:	d016      	beq.n	800c7b4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c786:	4b06      	ldr	r3, [pc, #24]	@ (800c7a0 <UART_SetConfig+0x69c>)
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	08db      	lsrs	r3, r3, #3
 800c78c:	f003 0303 	and.w	r3, r3, #3
 800c790:	4a07      	ldr	r2, [pc, #28]	@ (800c7b0 <UART_SetConfig+0x6ac>)
 800c792:	fa22 f303 	lsr.w	r3, r2, r3
 800c796:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c798:	e01c      	b.n	800c7d4 <UART_SetConfig+0x6d0>
 800c79a:	bf00      	nop
 800c79c:	40011400 	.word	0x40011400
 800c7a0:	58024400 	.word	0x58024400
 800c7a4:	40007800 	.word	0x40007800
 800c7a8:	40007c00 	.word	0x40007c00
 800c7ac:	58000c00 	.word	0x58000c00
 800c7b0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800c7b4:	4b9d      	ldr	r3, [pc, #628]	@ (800ca2c <UART_SetConfig+0x928>)
 800c7b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c7b8:	e00c      	b.n	800c7d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c7ba:	4b9d      	ldr	r3, [pc, #628]	@ (800ca30 <UART_SetConfig+0x92c>)
 800c7bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c7be:	e009      	b.n	800c7d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c7c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c7c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c7c6:	e005      	b.n	800c7d4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c7cc:	2301      	movs	r3, #1
 800c7ce:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c7d2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c7d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	f000 81de 	beq.w	800cb98 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c7dc:	697b      	ldr	r3, [r7, #20]
 800c7de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7e0:	4a94      	ldr	r2, [pc, #592]	@ (800ca34 <UART_SetConfig+0x930>)
 800c7e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c7e6:	461a      	mov	r2, r3
 800c7e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c7ea:	fbb3 f3f2 	udiv	r3, r3, r2
 800c7ee:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c7f0:	697b      	ldr	r3, [r7, #20]
 800c7f2:	685a      	ldr	r2, [r3, #4]
 800c7f4:	4613      	mov	r3, r2
 800c7f6:	005b      	lsls	r3, r3, #1
 800c7f8:	4413      	add	r3, r2
 800c7fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c7fc:	429a      	cmp	r2, r3
 800c7fe:	d305      	bcc.n	800c80c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c800:	697b      	ldr	r3, [r7, #20]
 800c802:	685b      	ldr	r3, [r3, #4]
 800c804:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c806:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c808:	429a      	cmp	r2, r3
 800c80a:	d903      	bls.n	800c814 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800c80c:	2301      	movs	r3, #1
 800c80e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c812:	e1c1      	b.n	800cb98 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c814:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c816:	2200      	movs	r2, #0
 800c818:	60bb      	str	r3, [r7, #8]
 800c81a:	60fa      	str	r2, [r7, #12]
 800c81c:	697b      	ldr	r3, [r7, #20]
 800c81e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c820:	4a84      	ldr	r2, [pc, #528]	@ (800ca34 <UART_SetConfig+0x930>)
 800c822:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c826:	b29b      	uxth	r3, r3
 800c828:	2200      	movs	r2, #0
 800c82a:	603b      	str	r3, [r7, #0]
 800c82c:	607a      	str	r2, [r7, #4]
 800c82e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c832:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c836:	f7f3 fd4f 	bl	80002d8 <__aeabi_uldivmod>
 800c83a:	4602      	mov	r2, r0
 800c83c:	460b      	mov	r3, r1
 800c83e:	4610      	mov	r0, r2
 800c840:	4619      	mov	r1, r3
 800c842:	f04f 0200 	mov.w	r2, #0
 800c846:	f04f 0300 	mov.w	r3, #0
 800c84a:	020b      	lsls	r3, r1, #8
 800c84c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c850:	0202      	lsls	r2, r0, #8
 800c852:	6979      	ldr	r1, [r7, #20]
 800c854:	6849      	ldr	r1, [r1, #4]
 800c856:	0849      	lsrs	r1, r1, #1
 800c858:	2000      	movs	r0, #0
 800c85a:	460c      	mov	r4, r1
 800c85c:	4605      	mov	r5, r0
 800c85e:	eb12 0804 	adds.w	r8, r2, r4
 800c862:	eb43 0905 	adc.w	r9, r3, r5
 800c866:	697b      	ldr	r3, [r7, #20]
 800c868:	685b      	ldr	r3, [r3, #4]
 800c86a:	2200      	movs	r2, #0
 800c86c:	469a      	mov	sl, r3
 800c86e:	4693      	mov	fp, r2
 800c870:	4652      	mov	r2, sl
 800c872:	465b      	mov	r3, fp
 800c874:	4640      	mov	r0, r8
 800c876:	4649      	mov	r1, r9
 800c878:	f7f3 fd2e 	bl	80002d8 <__aeabi_uldivmod>
 800c87c:	4602      	mov	r2, r0
 800c87e:	460b      	mov	r3, r1
 800c880:	4613      	mov	r3, r2
 800c882:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c884:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c886:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c88a:	d308      	bcc.n	800c89e <UART_SetConfig+0x79a>
 800c88c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c88e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c892:	d204      	bcs.n	800c89e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800c894:	697b      	ldr	r3, [r7, #20]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c89a:	60da      	str	r2, [r3, #12]
 800c89c:	e17c      	b.n	800cb98 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800c89e:	2301      	movs	r3, #1
 800c8a0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c8a4:	e178      	b.n	800cb98 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c8a6:	697b      	ldr	r3, [r7, #20]
 800c8a8:	69db      	ldr	r3, [r3, #28]
 800c8aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c8ae:	f040 80c5 	bne.w	800ca3c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800c8b2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c8b6:	2b20      	cmp	r3, #32
 800c8b8:	dc48      	bgt.n	800c94c <UART_SetConfig+0x848>
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	db7b      	blt.n	800c9b6 <UART_SetConfig+0x8b2>
 800c8be:	2b20      	cmp	r3, #32
 800c8c0:	d879      	bhi.n	800c9b6 <UART_SetConfig+0x8b2>
 800c8c2:	a201      	add	r2, pc, #4	@ (adr r2, 800c8c8 <UART_SetConfig+0x7c4>)
 800c8c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8c8:	0800c953 	.word	0x0800c953
 800c8cc:	0800c95b 	.word	0x0800c95b
 800c8d0:	0800c9b7 	.word	0x0800c9b7
 800c8d4:	0800c9b7 	.word	0x0800c9b7
 800c8d8:	0800c963 	.word	0x0800c963
 800c8dc:	0800c9b7 	.word	0x0800c9b7
 800c8e0:	0800c9b7 	.word	0x0800c9b7
 800c8e4:	0800c9b7 	.word	0x0800c9b7
 800c8e8:	0800c973 	.word	0x0800c973
 800c8ec:	0800c9b7 	.word	0x0800c9b7
 800c8f0:	0800c9b7 	.word	0x0800c9b7
 800c8f4:	0800c9b7 	.word	0x0800c9b7
 800c8f8:	0800c9b7 	.word	0x0800c9b7
 800c8fc:	0800c9b7 	.word	0x0800c9b7
 800c900:	0800c9b7 	.word	0x0800c9b7
 800c904:	0800c9b7 	.word	0x0800c9b7
 800c908:	0800c983 	.word	0x0800c983
 800c90c:	0800c9b7 	.word	0x0800c9b7
 800c910:	0800c9b7 	.word	0x0800c9b7
 800c914:	0800c9b7 	.word	0x0800c9b7
 800c918:	0800c9b7 	.word	0x0800c9b7
 800c91c:	0800c9b7 	.word	0x0800c9b7
 800c920:	0800c9b7 	.word	0x0800c9b7
 800c924:	0800c9b7 	.word	0x0800c9b7
 800c928:	0800c9b7 	.word	0x0800c9b7
 800c92c:	0800c9b7 	.word	0x0800c9b7
 800c930:	0800c9b7 	.word	0x0800c9b7
 800c934:	0800c9b7 	.word	0x0800c9b7
 800c938:	0800c9b7 	.word	0x0800c9b7
 800c93c:	0800c9b7 	.word	0x0800c9b7
 800c940:	0800c9b7 	.word	0x0800c9b7
 800c944:	0800c9b7 	.word	0x0800c9b7
 800c948:	0800c9a9 	.word	0x0800c9a9
 800c94c:	2b40      	cmp	r3, #64	@ 0x40
 800c94e:	d02e      	beq.n	800c9ae <UART_SetConfig+0x8aa>
 800c950:	e031      	b.n	800c9b6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c952:	f7fb ffc7 	bl	80088e4 <HAL_RCC_GetPCLK1Freq>
 800c956:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c958:	e033      	b.n	800c9c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c95a:	f7fb ffd9 	bl	8008910 <HAL_RCC_GetPCLK2Freq>
 800c95e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c960:	e02f      	b.n	800c9c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c962:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c966:	4618      	mov	r0, r3
 800c968:	f7fd ff88 	bl	800a87c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c96c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c96e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c970:	e027      	b.n	800c9c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c972:	f107 0318 	add.w	r3, r7, #24
 800c976:	4618      	mov	r0, r3
 800c978:	f7fe f8d4 	bl	800ab24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c97c:	69fb      	ldr	r3, [r7, #28]
 800c97e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c980:	e01f      	b.n	800c9c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c982:	4b2d      	ldr	r3, [pc, #180]	@ (800ca38 <UART_SetConfig+0x934>)
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	f003 0320 	and.w	r3, r3, #32
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d009      	beq.n	800c9a2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c98e:	4b2a      	ldr	r3, [pc, #168]	@ (800ca38 <UART_SetConfig+0x934>)
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	08db      	lsrs	r3, r3, #3
 800c994:	f003 0303 	and.w	r3, r3, #3
 800c998:	4a24      	ldr	r2, [pc, #144]	@ (800ca2c <UART_SetConfig+0x928>)
 800c99a:	fa22 f303 	lsr.w	r3, r2, r3
 800c99e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c9a0:	e00f      	b.n	800c9c2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c9a2:	4b22      	ldr	r3, [pc, #136]	@ (800ca2c <UART_SetConfig+0x928>)
 800c9a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c9a6:	e00c      	b.n	800c9c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c9a8:	4b21      	ldr	r3, [pc, #132]	@ (800ca30 <UART_SetConfig+0x92c>)
 800c9aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c9ac:	e009      	b.n	800c9c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c9ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c9b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c9b4:	e005      	b.n	800c9c2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c9ba:	2301      	movs	r3, #1
 800c9bc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c9c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c9c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	f000 80e7 	beq.w	800cb98 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c9ca:	697b      	ldr	r3, [r7, #20]
 800c9cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9ce:	4a19      	ldr	r2, [pc, #100]	@ (800ca34 <UART_SetConfig+0x930>)
 800c9d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c9d4:	461a      	mov	r2, r3
 800c9d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9d8:	fbb3 f3f2 	udiv	r3, r3, r2
 800c9dc:	005a      	lsls	r2, r3, #1
 800c9de:	697b      	ldr	r3, [r7, #20]
 800c9e0:	685b      	ldr	r3, [r3, #4]
 800c9e2:	085b      	lsrs	r3, r3, #1
 800c9e4:	441a      	add	r2, r3
 800c9e6:	697b      	ldr	r3, [r7, #20]
 800c9e8:	685b      	ldr	r3, [r3, #4]
 800c9ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9ee:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c9f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9f2:	2b0f      	cmp	r3, #15
 800c9f4:	d916      	bls.n	800ca24 <UART_SetConfig+0x920>
 800c9f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c9fc:	d212      	bcs.n	800ca24 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c9fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca00:	b29b      	uxth	r3, r3
 800ca02:	f023 030f 	bic.w	r3, r3, #15
 800ca06:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ca08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca0a:	085b      	lsrs	r3, r3, #1
 800ca0c:	b29b      	uxth	r3, r3
 800ca0e:	f003 0307 	and.w	r3, r3, #7
 800ca12:	b29a      	uxth	r2, r3
 800ca14:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ca16:	4313      	orrs	r3, r2
 800ca18:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800ca1a:	697b      	ldr	r3, [r7, #20]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800ca20:	60da      	str	r2, [r3, #12]
 800ca22:	e0b9      	b.n	800cb98 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ca24:	2301      	movs	r3, #1
 800ca26:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ca2a:	e0b5      	b.n	800cb98 <UART_SetConfig+0xa94>
 800ca2c:	03d09000 	.word	0x03d09000
 800ca30:	003d0900 	.word	0x003d0900
 800ca34:	0800d694 	.word	0x0800d694
 800ca38:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800ca3c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ca40:	2b20      	cmp	r3, #32
 800ca42:	dc49      	bgt.n	800cad8 <UART_SetConfig+0x9d4>
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	db7c      	blt.n	800cb42 <UART_SetConfig+0xa3e>
 800ca48:	2b20      	cmp	r3, #32
 800ca4a:	d87a      	bhi.n	800cb42 <UART_SetConfig+0xa3e>
 800ca4c:	a201      	add	r2, pc, #4	@ (adr r2, 800ca54 <UART_SetConfig+0x950>)
 800ca4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca52:	bf00      	nop
 800ca54:	0800cadf 	.word	0x0800cadf
 800ca58:	0800cae7 	.word	0x0800cae7
 800ca5c:	0800cb43 	.word	0x0800cb43
 800ca60:	0800cb43 	.word	0x0800cb43
 800ca64:	0800caef 	.word	0x0800caef
 800ca68:	0800cb43 	.word	0x0800cb43
 800ca6c:	0800cb43 	.word	0x0800cb43
 800ca70:	0800cb43 	.word	0x0800cb43
 800ca74:	0800caff 	.word	0x0800caff
 800ca78:	0800cb43 	.word	0x0800cb43
 800ca7c:	0800cb43 	.word	0x0800cb43
 800ca80:	0800cb43 	.word	0x0800cb43
 800ca84:	0800cb43 	.word	0x0800cb43
 800ca88:	0800cb43 	.word	0x0800cb43
 800ca8c:	0800cb43 	.word	0x0800cb43
 800ca90:	0800cb43 	.word	0x0800cb43
 800ca94:	0800cb0f 	.word	0x0800cb0f
 800ca98:	0800cb43 	.word	0x0800cb43
 800ca9c:	0800cb43 	.word	0x0800cb43
 800caa0:	0800cb43 	.word	0x0800cb43
 800caa4:	0800cb43 	.word	0x0800cb43
 800caa8:	0800cb43 	.word	0x0800cb43
 800caac:	0800cb43 	.word	0x0800cb43
 800cab0:	0800cb43 	.word	0x0800cb43
 800cab4:	0800cb43 	.word	0x0800cb43
 800cab8:	0800cb43 	.word	0x0800cb43
 800cabc:	0800cb43 	.word	0x0800cb43
 800cac0:	0800cb43 	.word	0x0800cb43
 800cac4:	0800cb43 	.word	0x0800cb43
 800cac8:	0800cb43 	.word	0x0800cb43
 800cacc:	0800cb43 	.word	0x0800cb43
 800cad0:	0800cb43 	.word	0x0800cb43
 800cad4:	0800cb35 	.word	0x0800cb35
 800cad8:	2b40      	cmp	r3, #64	@ 0x40
 800cada:	d02e      	beq.n	800cb3a <UART_SetConfig+0xa36>
 800cadc:	e031      	b.n	800cb42 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cade:	f7fb ff01 	bl	80088e4 <HAL_RCC_GetPCLK1Freq>
 800cae2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800cae4:	e033      	b.n	800cb4e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cae6:	f7fb ff13 	bl	8008910 <HAL_RCC_GetPCLK2Freq>
 800caea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800caec:	e02f      	b.n	800cb4e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800caee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800caf2:	4618      	mov	r0, r3
 800caf4:	f7fd fec2 	bl	800a87c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800caf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cafa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cafc:	e027      	b.n	800cb4e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cafe:	f107 0318 	add.w	r3, r7, #24
 800cb02:	4618      	mov	r0, r3
 800cb04:	f7fe f80e 	bl	800ab24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cb08:	69fb      	ldr	r3, [r7, #28]
 800cb0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cb0c:	e01f      	b.n	800cb4e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cb0e:	4b2d      	ldr	r3, [pc, #180]	@ (800cbc4 <UART_SetConfig+0xac0>)
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	f003 0320 	and.w	r3, r3, #32
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d009      	beq.n	800cb2e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cb1a:	4b2a      	ldr	r3, [pc, #168]	@ (800cbc4 <UART_SetConfig+0xac0>)
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	08db      	lsrs	r3, r3, #3
 800cb20:	f003 0303 	and.w	r3, r3, #3
 800cb24:	4a28      	ldr	r2, [pc, #160]	@ (800cbc8 <UART_SetConfig+0xac4>)
 800cb26:	fa22 f303 	lsr.w	r3, r2, r3
 800cb2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cb2c:	e00f      	b.n	800cb4e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800cb2e:	4b26      	ldr	r3, [pc, #152]	@ (800cbc8 <UART_SetConfig+0xac4>)
 800cb30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cb32:	e00c      	b.n	800cb4e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cb34:	4b25      	ldr	r3, [pc, #148]	@ (800cbcc <UART_SetConfig+0xac8>)
 800cb36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cb38:	e009      	b.n	800cb4e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cb3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cb3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cb40:	e005      	b.n	800cb4e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800cb42:	2300      	movs	r3, #0
 800cb44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800cb46:	2301      	movs	r3, #1
 800cb48:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800cb4c:	bf00      	nop
    }

    if (pclk != 0U)
 800cb4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d021      	beq.n	800cb98 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cb54:	697b      	ldr	r3, [r7, #20]
 800cb56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb58:	4a1d      	ldr	r2, [pc, #116]	@ (800cbd0 <UART_SetConfig+0xacc>)
 800cb5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cb5e:	461a      	mov	r2, r3
 800cb60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb62:	fbb3 f2f2 	udiv	r2, r3, r2
 800cb66:	697b      	ldr	r3, [r7, #20]
 800cb68:	685b      	ldr	r3, [r3, #4]
 800cb6a:	085b      	lsrs	r3, r3, #1
 800cb6c:	441a      	add	r2, r3
 800cb6e:	697b      	ldr	r3, [r7, #20]
 800cb70:	685b      	ldr	r3, [r3, #4]
 800cb72:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb76:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cb78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb7a:	2b0f      	cmp	r3, #15
 800cb7c:	d909      	bls.n	800cb92 <UART_SetConfig+0xa8e>
 800cb7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cb84:	d205      	bcs.n	800cb92 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cb86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb88:	b29a      	uxth	r2, r3
 800cb8a:	697b      	ldr	r3, [r7, #20]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	60da      	str	r2, [r3, #12]
 800cb90:	e002      	b.n	800cb98 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800cb92:	2301      	movs	r3, #1
 800cb94:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cb98:	697b      	ldr	r3, [r7, #20]
 800cb9a:	2201      	movs	r2, #1
 800cb9c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800cba0:	697b      	ldr	r3, [r7, #20]
 800cba2:	2201      	movs	r2, #1
 800cba4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cba8:	697b      	ldr	r3, [r7, #20]
 800cbaa:	2200      	movs	r2, #0
 800cbac:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800cbae:	697b      	ldr	r3, [r7, #20]
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800cbb4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800cbb8:	4618      	mov	r0, r3
 800cbba:	3748      	adds	r7, #72	@ 0x48
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cbc2:	bf00      	nop
 800cbc4:	58024400 	.word	0x58024400
 800cbc8:	03d09000 	.word	0x03d09000
 800cbcc:	003d0900 	.word	0x003d0900
 800cbd0:	0800d694 	.word	0x0800d694

0800cbd4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cbd4:	b480      	push	{r7}
 800cbd6:	b083      	sub	sp, #12
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbe0:	f003 0308 	and.w	r3, r3, #8
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d00a      	beq.n	800cbfe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	685b      	ldr	r3, [r3, #4]
 800cbee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	430a      	orrs	r2, r1
 800cbfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc02:	f003 0301 	and.w	r3, r3, #1
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d00a      	beq.n	800cc20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	685b      	ldr	r3, [r3, #4]
 800cc10:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	430a      	orrs	r2, r1
 800cc1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc24:	f003 0302 	and.w	r3, r3, #2
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d00a      	beq.n	800cc42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	685b      	ldr	r3, [r3, #4]
 800cc32:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	430a      	orrs	r2, r1
 800cc40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc46:	f003 0304 	and.w	r3, r3, #4
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d00a      	beq.n	800cc64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	685b      	ldr	r3, [r3, #4]
 800cc54:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	430a      	orrs	r2, r1
 800cc62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc68:	f003 0310 	and.w	r3, r3, #16
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d00a      	beq.n	800cc86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	689b      	ldr	r3, [r3, #8]
 800cc76:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	430a      	orrs	r2, r1
 800cc84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc8a:	f003 0320 	and.w	r3, r3, #32
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d00a      	beq.n	800cca8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	689b      	ldr	r3, [r3, #8]
 800cc98:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	430a      	orrs	r2, r1
 800cca6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ccac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d01a      	beq.n	800ccea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	685b      	ldr	r3, [r3, #4]
 800ccba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	430a      	orrs	r2, r1
 800ccc8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ccce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ccd2:	d10a      	bne.n	800ccea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	685b      	ldr	r3, [r3, #4]
 800ccda:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	430a      	orrs	r2, r1
 800cce8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ccee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d00a      	beq.n	800cd0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	685b      	ldr	r3, [r3, #4]
 800ccfc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	430a      	orrs	r2, r1
 800cd0a:	605a      	str	r2, [r3, #4]
  }
}
 800cd0c:	bf00      	nop
 800cd0e:	370c      	adds	r7, #12
 800cd10:	46bd      	mov	sp, r7
 800cd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd16:	4770      	bx	lr

0800cd18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b098      	sub	sp, #96	@ 0x60
 800cd1c:	af02      	add	r7, sp, #8
 800cd1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	2200      	movs	r2, #0
 800cd24:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cd28:	f7f6 fd16 	bl	8003758 <HAL_GetTick>
 800cd2c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	f003 0308 	and.w	r3, r3, #8
 800cd38:	2b08      	cmp	r3, #8
 800cd3a:	d12f      	bne.n	800cd9c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cd3c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cd40:	9300      	str	r3, [sp, #0]
 800cd42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cd44:	2200      	movs	r2, #0
 800cd46:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800cd4a:	6878      	ldr	r0, [r7, #4]
 800cd4c:	f000 f88e 	bl	800ce6c <UART_WaitOnFlagUntilTimeout>
 800cd50:	4603      	mov	r3, r0
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d022      	beq.n	800cd9c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd5e:	e853 3f00 	ldrex	r3, [r3]
 800cd62:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cd64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cd6a:	653b      	str	r3, [r7, #80]	@ 0x50
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	461a      	mov	r2, r3
 800cd72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd74:	647b      	str	r3, [r7, #68]	@ 0x44
 800cd76:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd78:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cd7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cd7c:	e841 2300 	strex	r3, r2, [r1]
 800cd80:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cd82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d1e6      	bne.n	800cd56 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	2220      	movs	r2, #32
 800cd8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	2200      	movs	r2, #0
 800cd94:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cd98:	2303      	movs	r3, #3
 800cd9a:	e063      	b.n	800ce64 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	f003 0304 	and.w	r3, r3, #4
 800cda6:	2b04      	cmp	r3, #4
 800cda8:	d149      	bne.n	800ce3e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cdaa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cdae:	9300      	str	r3, [sp, #0]
 800cdb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800cdb8:	6878      	ldr	r0, [r7, #4]
 800cdba:	f000 f857 	bl	800ce6c <UART_WaitOnFlagUntilTimeout>
 800cdbe:	4603      	mov	r3, r0
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d03c      	beq.n	800ce3e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdcc:	e853 3f00 	ldrex	r3, [r3]
 800cdd0:	623b      	str	r3, [r7, #32]
   return(result);
 800cdd2:	6a3b      	ldr	r3, [r7, #32]
 800cdd4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cdd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	461a      	mov	r2, r3
 800cde0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cde2:	633b      	str	r3, [r7, #48]	@ 0x30
 800cde4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cde6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cde8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cdea:	e841 2300 	strex	r3, r2, [r1]
 800cdee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cdf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d1e6      	bne.n	800cdc4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	3308      	adds	r3, #8
 800cdfc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdfe:	693b      	ldr	r3, [r7, #16]
 800ce00:	e853 3f00 	ldrex	r3, [r3]
 800ce04:	60fb      	str	r3, [r7, #12]
   return(result);
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	f023 0301 	bic.w	r3, r3, #1
 800ce0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	3308      	adds	r3, #8
 800ce14:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ce16:	61fa      	str	r2, [r7, #28]
 800ce18:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce1a:	69b9      	ldr	r1, [r7, #24]
 800ce1c:	69fa      	ldr	r2, [r7, #28]
 800ce1e:	e841 2300 	strex	r3, r2, [r1]
 800ce22:	617b      	str	r3, [r7, #20]
   return(result);
 800ce24:	697b      	ldr	r3, [r7, #20]
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d1e5      	bne.n	800cdf6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	2220      	movs	r2, #32
 800ce2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	2200      	movs	r2, #0
 800ce36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ce3a:	2303      	movs	r3, #3
 800ce3c:	e012      	b.n	800ce64 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	2220      	movs	r2, #32
 800ce42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	2220      	movs	r2, #32
 800ce4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	2200      	movs	r2, #0
 800ce52:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	2200      	movs	r2, #0
 800ce58:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	2200      	movs	r2, #0
 800ce5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ce62:	2300      	movs	r3, #0
}
 800ce64:	4618      	mov	r0, r3
 800ce66:	3758      	adds	r7, #88	@ 0x58
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	bd80      	pop	{r7, pc}

0800ce6c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	b084      	sub	sp, #16
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	60f8      	str	r0, [r7, #12]
 800ce74:	60b9      	str	r1, [r7, #8]
 800ce76:	603b      	str	r3, [r7, #0]
 800ce78:	4613      	mov	r3, r2
 800ce7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ce7c:	e04f      	b.n	800cf1e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ce7e:	69bb      	ldr	r3, [r7, #24]
 800ce80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce84:	d04b      	beq.n	800cf1e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ce86:	f7f6 fc67 	bl	8003758 <HAL_GetTick>
 800ce8a:	4602      	mov	r2, r0
 800ce8c:	683b      	ldr	r3, [r7, #0]
 800ce8e:	1ad3      	subs	r3, r2, r3
 800ce90:	69ba      	ldr	r2, [r7, #24]
 800ce92:	429a      	cmp	r2, r3
 800ce94:	d302      	bcc.n	800ce9c <UART_WaitOnFlagUntilTimeout+0x30>
 800ce96:	69bb      	ldr	r3, [r7, #24]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d101      	bne.n	800cea0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ce9c:	2303      	movs	r3, #3
 800ce9e:	e04e      	b.n	800cf3e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	f003 0304 	and.w	r3, r3, #4
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d037      	beq.n	800cf1e <UART_WaitOnFlagUntilTimeout+0xb2>
 800ceae:	68bb      	ldr	r3, [r7, #8]
 800ceb0:	2b80      	cmp	r3, #128	@ 0x80
 800ceb2:	d034      	beq.n	800cf1e <UART_WaitOnFlagUntilTimeout+0xb2>
 800ceb4:	68bb      	ldr	r3, [r7, #8]
 800ceb6:	2b40      	cmp	r3, #64	@ 0x40
 800ceb8:	d031      	beq.n	800cf1e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	69db      	ldr	r3, [r3, #28]
 800cec0:	f003 0308 	and.w	r3, r3, #8
 800cec4:	2b08      	cmp	r3, #8
 800cec6:	d110      	bne.n	800ceea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	2208      	movs	r2, #8
 800cece:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ced0:	68f8      	ldr	r0, [r7, #12]
 800ced2:	f000 f839 	bl	800cf48 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	2208      	movs	r2, #8
 800ceda:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	2200      	movs	r2, #0
 800cee2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800cee6:	2301      	movs	r3, #1
 800cee8:	e029      	b.n	800cf3e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	69db      	ldr	r3, [r3, #28]
 800cef0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cef4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cef8:	d111      	bne.n	800cf1e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cf02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cf04:	68f8      	ldr	r0, [r7, #12]
 800cf06:	f000 f81f 	bl	800cf48 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	2220      	movs	r2, #32
 800cf0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	2200      	movs	r2, #0
 800cf16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800cf1a:	2303      	movs	r3, #3
 800cf1c:	e00f      	b.n	800cf3e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	69da      	ldr	r2, [r3, #28]
 800cf24:	68bb      	ldr	r3, [r7, #8]
 800cf26:	4013      	ands	r3, r2
 800cf28:	68ba      	ldr	r2, [r7, #8]
 800cf2a:	429a      	cmp	r2, r3
 800cf2c:	bf0c      	ite	eq
 800cf2e:	2301      	moveq	r3, #1
 800cf30:	2300      	movne	r3, #0
 800cf32:	b2db      	uxtb	r3, r3
 800cf34:	461a      	mov	r2, r3
 800cf36:	79fb      	ldrb	r3, [r7, #7]
 800cf38:	429a      	cmp	r2, r3
 800cf3a:	d0a0      	beq.n	800ce7e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cf3c:	2300      	movs	r3, #0
}
 800cf3e:	4618      	mov	r0, r3
 800cf40:	3710      	adds	r7, #16
 800cf42:	46bd      	mov	sp, r7
 800cf44:	bd80      	pop	{r7, pc}
	...

0800cf48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cf48:	b480      	push	{r7}
 800cf4a:	b095      	sub	sp, #84	@ 0x54
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf58:	e853 3f00 	ldrex	r3, [r3]
 800cf5c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cf5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf60:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cf64:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	461a      	mov	r2, r3
 800cf6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cf6e:	643b      	str	r3, [r7, #64]	@ 0x40
 800cf70:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf72:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cf74:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cf76:	e841 2300 	strex	r3, r2, [r1]
 800cf7a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cf7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d1e6      	bne.n	800cf50 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	3308      	adds	r3, #8
 800cf88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf8a:	6a3b      	ldr	r3, [r7, #32]
 800cf8c:	e853 3f00 	ldrex	r3, [r3]
 800cf90:	61fb      	str	r3, [r7, #28]
   return(result);
 800cf92:	69fa      	ldr	r2, [r7, #28]
 800cf94:	4b1e      	ldr	r3, [pc, #120]	@ (800d010 <UART_EndRxTransfer+0xc8>)
 800cf96:	4013      	ands	r3, r2
 800cf98:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	3308      	adds	r3, #8
 800cfa0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cfa2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cfa4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfa6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cfa8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cfaa:	e841 2300 	strex	r3, r2, [r1]
 800cfae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cfb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d1e5      	bne.n	800cf82 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cfba:	2b01      	cmp	r3, #1
 800cfbc:	d118      	bne.n	800cff0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	e853 3f00 	ldrex	r3, [r3]
 800cfca:	60bb      	str	r3, [r7, #8]
   return(result);
 800cfcc:	68bb      	ldr	r3, [r7, #8]
 800cfce:	f023 0310 	bic.w	r3, r3, #16
 800cfd2:	647b      	str	r3, [r7, #68]	@ 0x44
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	461a      	mov	r2, r3
 800cfda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cfdc:	61bb      	str	r3, [r7, #24]
 800cfde:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfe0:	6979      	ldr	r1, [r7, #20]
 800cfe2:	69ba      	ldr	r2, [r7, #24]
 800cfe4:	e841 2300 	strex	r3, r2, [r1]
 800cfe8:	613b      	str	r3, [r7, #16]
   return(result);
 800cfea:	693b      	ldr	r3, [r7, #16]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d1e6      	bne.n	800cfbe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	2220      	movs	r2, #32
 800cff4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	2200      	movs	r2, #0
 800cffc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	2200      	movs	r2, #0
 800d002:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d004:	bf00      	nop
 800d006:	3754      	adds	r7, #84	@ 0x54
 800d008:	46bd      	mov	sp, r7
 800d00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00e:	4770      	bx	lr
 800d010:	effffffe 	.word	0xeffffffe

0800d014 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d014:	b480      	push	{r7}
 800d016:	b085      	sub	sp, #20
 800d018:	af00      	add	r7, sp, #0
 800d01a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d022:	2b01      	cmp	r3, #1
 800d024:	d101      	bne.n	800d02a <HAL_UARTEx_DisableFifoMode+0x16>
 800d026:	2302      	movs	r3, #2
 800d028:	e027      	b.n	800d07a <HAL_UARTEx_DisableFifoMode+0x66>
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	2201      	movs	r2, #1
 800d02e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	2224      	movs	r2, #36	@ 0x24
 800d036:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	681a      	ldr	r2, [r3, #0]
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	f022 0201 	bic.w	r2, r2, #1
 800d050:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800d058:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	2200      	movs	r2, #0
 800d05e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	68fa      	ldr	r2, [r7, #12]
 800d066:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	2220      	movs	r2, #32
 800d06c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	2200      	movs	r2, #0
 800d074:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d078:	2300      	movs	r3, #0
}
 800d07a:	4618      	mov	r0, r3
 800d07c:	3714      	adds	r7, #20
 800d07e:	46bd      	mov	sp, r7
 800d080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d084:	4770      	bx	lr

0800d086 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d086:	b580      	push	{r7, lr}
 800d088:	b084      	sub	sp, #16
 800d08a:	af00      	add	r7, sp, #0
 800d08c:	6078      	str	r0, [r7, #4]
 800d08e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d096:	2b01      	cmp	r3, #1
 800d098:	d101      	bne.n	800d09e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d09a:	2302      	movs	r3, #2
 800d09c:	e02d      	b.n	800d0fa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	2201      	movs	r2, #1
 800d0a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	2224      	movs	r2, #36	@ 0x24
 800d0aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	681a      	ldr	r2, [r3, #0]
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	f022 0201 	bic.w	r2, r2, #1
 800d0c4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	689b      	ldr	r3, [r3, #8]
 800d0cc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	683a      	ldr	r2, [r7, #0]
 800d0d6:	430a      	orrs	r2, r1
 800d0d8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d0da:	6878      	ldr	r0, [r7, #4]
 800d0dc:	f000 f850 	bl	800d180 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	68fa      	ldr	r2, [r7, #12]
 800d0e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	2220      	movs	r2, #32
 800d0ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	2200      	movs	r2, #0
 800d0f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d0f8:	2300      	movs	r3, #0
}
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	3710      	adds	r7, #16
 800d0fe:	46bd      	mov	sp, r7
 800d100:	bd80      	pop	{r7, pc}

0800d102 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d102:	b580      	push	{r7, lr}
 800d104:	b084      	sub	sp, #16
 800d106:	af00      	add	r7, sp, #0
 800d108:	6078      	str	r0, [r7, #4]
 800d10a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d112:	2b01      	cmp	r3, #1
 800d114:	d101      	bne.n	800d11a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d116:	2302      	movs	r3, #2
 800d118:	e02d      	b.n	800d176 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	2201      	movs	r2, #1
 800d11e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	2224      	movs	r2, #36	@ 0x24
 800d126:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	681a      	ldr	r2, [r3, #0]
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	f022 0201 	bic.w	r2, r2, #1
 800d140:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	689b      	ldr	r3, [r3, #8]
 800d148:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	683a      	ldr	r2, [r7, #0]
 800d152:	430a      	orrs	r2, r1
 800d154:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d156:	6878      	ldr	r0, [r7, #4]
 800d158:	f000 f812 	bl	800d180 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	68fa      	ldr	r2, [r7, #12]
 800d162:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	2220      	movs	r2, #32
 800d168:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	2200      	movs	r2, #0
 800d170:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d174:	2300      	movs	r3, #0
}
 800d176:	4618      	mov	r0, r3
 800d178:	3710      	adds	r7, #16
 800d17a:	46bd      	mov	sp, r7
 800d17c:	bd80      	pop	{r7, pc}
	...

0800d180 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d180:	b480      	push	{r7}
 800d182:	b085      	sub	sp, #20
 800d184:	af00      	add	r7, sp, #0
 800d186:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d108      	bne.n	800d1a2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	2201      	movs	r2, #1
 800d194:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	2201      	movs	r2, #1
 800d19c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d1a0:	e031      	b.n	800d206 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d1a2:	2310      	movs	r3, #16
 800d1a4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d1a6:	2310      	movs	r3, #16
 800d1a8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	689b      	ldr	r3, [r3, #8]
 800d1b0:	0e5b      	lsrs	r3, r3, #25
 800d1b2:	b2db      	uxtb	r3, r3
 800d1b4:	f003 0307 	and.w	r3, r3, #7
 800d1b8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	689b      	ldr	r3, [r3, #8]
 800d1c0:	0f5b      	lsrs	r3, r3, #29
 800d1c2:	b2db      	uxtb	r3, r3
 800d1c4:	f003 0307 	and.w	r3, r3, #7
 800d1c8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d1ca:	7bbb      	ldrb	r3, [r7, #14]
 800d1cc:	7b3a      	ldrb	r2, [r7, #12]
 800d1ce:	4911      	ldr	r1, [pc, #68]	@ (800d214 <UARTEx_SetNbDataToProcess+0x94>)
 800d1d0:	5c8a      	ldrb	r2, [r1, r2]
 800d1d2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d1d6:	7b3a      	ldrb	r2, [r7, #12]
 800d1d8:	490f      	ldr	r1, [pc, #60]	@ (800d218 <UARTEx_SetNbDataToProcess+0x98>)
 800d1da:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d1dc:	fb93 f3f2 	sdiv	r3, r3, r2
 800d1e0:	b29a      	uxth	r2, r3
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d1e8:	7bfb      	ldrb	r3, [r7, #15]
 800d1ea:	7b7a      	ldrb	r2, [r7, #13]
 800d1ec:	4909      	ldr	r1, [pc, #36]	@ (800d214 <UARTEx_SetNbDataToProcess+0x94>)
 800d1ee:	5c8a      	ldrb	r2, [r1, r2]
 800d1f0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d1f4:	7b7a      	ldrb	r2, [r7, #13]
 800d1f6:	4908      	ldr	r1, [pc, #32]	@ (800d218 <UARTEx_SetNbDataToProcess+0x98>)
 800d1f8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d1fa:	fb93 f3f2 	sdiv	r3, r3, r2
 800d1fe:	b29a      	uxth	r2, r3
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800d206:	bf00      	nop
 800d208:	3714      	adds	r7, #20
 800d20a:	46bd      	mov	sp, r7
 800d20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d210:	4770      	bx	lr
 800d212:	bf00      	nop
 800d214:	0800d6ac 	.word	0x0800d6ac
 800d218:	0800d6b4 	.word	0x0800d6b4

0800d21c <arm_fir_q15>:
 800d21c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d220:	b09b      	sub	sp, #108	@ 0x6c
 800d222:	4605      	mov	r5, r0
 800d224:	f06f 4e00 	mvn.w	lr, #2147483648	@ 0x80000000
 800d228:	9017      	str	r0, [sp, #92]	@ 0x5c
 800d22a:	8800      	ldrh	r0, [r0, #0]
 800d22c:	686e      	ldr	r6, [r5, #4]
 800d22e:	4486      	add	lr, r0
 800d230:	68af      	ldr	r7, [r5, #8]
 800d232:	9318      	str	r3, [sp, #96]	@ 0x60
 800d234:	089b      	lsrs	r3, r3, #2
 800d236:	eb06 054e 	add.w	r5, r6, lr, lsl #1
 800d23a:	9114      	str	r1, [sp, #80]	@ 0x50
 800d23c:	9611      	str	r6, [sp, #68]	@ 0x44
 800d23e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800d240:	9513      	str	r5, [sp, #76]	@ 0x4c
 800d242:	9319      	str	r3, [sp, #100]	@ 0x64
 800d244:	e9cd 2015 	strd	r2, r0, [sp, #84]	@ 0x54
 800d248:	f000 80f5 	beq.w	800d436 <arm_fir_q15+0x21a>
 800d24c:	4634      	mov	r4, r6
 800d24e:	0886      	lsrs	r6, r0, #2
 800d250:	4694      	mov	ip, r2
 800d252:	f000 0003 	and.w	r0, r0, #3
 800d256:	1c72      	adds	r2, r6, #1
 800d258:	3108      	adds	r1, #8
 800d25a:	9010      	str	r0, [sp, #64]	@ 0x40
 800d25c:	4620      	mov	r0, r4
 800d25e:	00d2      	lsls	r2, r2, #3
 800d260:	9108      	str	r1, [sp, #32]
 800d262:	f105 0108 	add.w	r1, r5, #8
 800d266:	960e      	str	r6, [sp, #56]	@ 0x38
 800d268:	e9cd c30a 	strd	ip, r3, [sp, #40]	@ 0x28
 800d26c:	f1a2 0308 	sub.w	r3, r2, #8
 800d270:	18a2      	adds	r2, r4, r2
 800d272:	9109      	str	r1, [sp, #36]	@ 0x24
 800d274:	18fb      	adds	r3, r7, r3
 800d276:	9205      	str	r2, [sp, #20]
 800d278:	9312      	str	r3, [sp, #72]	@ 0x48
 800d27a:	9a08      	ldr	r2, [sp, #32]
 800d27c:	f100 0508 	add.w	r5, r0, #8
 800d280:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d282:	f932 3c08 	ldrsh.w	r3, [r2, #-8]
 800d286:	46a9      	mov	r9, r5
 800d288:	950c      	str	r5, [sp, #48]	@ 0x30
 800d28a:	f821 3c08 	strh.w	r3, [r1, #-8]
 800d28e:	f932 3c06 	ldrsh.w	r3, [r2, #-6]
 800d292:	f821 3c06 	strh.w	r3, [r1, #-6]
 800d296:	f932 3c04 	ldrsh.w	r3, [r2, #-4]
 800d29a:	f821 3c04 	strh.w	r3, [r1, #-4]
 800d29e:	f932 3c02 	ldrsh.w	r3, [r2, #-2]
 800d2a2:	f821 3c02 	strh.w	r3, [r1, #-2]
 800d2a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d2a8:	f8d0 c000 	ldr.w	ip, [r0]
 800d2ac:	f8d0 e004 	ldr.w	lr, [r0, #4]
 800d2b0:	4664      	mov	r4, ip
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	f000 8140 	beq.w	800d538 <arm_fir_q15+0x31c>
 800d2b8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	f8cd 9008 	str.w	r9, [sp, #8]
 800d2c0:	fa1f f88e 	uxth.w	r8, lr
 800d2c4:	9201      	str	r2, [sp, #4]
 800d2c6:	469b      	mov	fp, r3
 800d2c8:	9a05      	ldr	r2, [sp, #20]
 800d2ca:	461d      	mov	r5, r3
 800d2cc:	461f      	mov	r7, r3
 800d2ce:	4699      	mov	r9, r3
 800d2d0:	920d      	str	r2, [sp, #52]	@ 0x34
 800d2d2:	461a      	mov	r2, r3
 800d2d4:	9303      	str	r3, [sp, #12]
 800d2d6:	9304      	str	r3, [sp, #16]
 800d2d8:	9901      	ldr	r1, [sp, #4]
 800d2da:	9804      	ldr	r0, [sp, #16]
 800d2dc:	680e      	ldr	r6, [r1, #0]
 800d2de:	fbcc 70c6 	smlald	r7, r0, ip, r6
 800d2e2:	9903      	ldr	r1, [sp, #12]
 800d2e4:	fbce b1c6 	smlald	fp, r1, lr, r6
 800d2e8:	0c24      	lsrs	r4, r4, #16
 800d2ea:	4692      	mov	sl, r2
 800d2ec:	9a02      	ldr	r2, [sp, #8]
 800d2ee:	0424      	lsls	r4, r4, #16
 800d2f0:	f8d2 c000 	ldr.w	ip, [r2]
 800d2f4:	4652      	mov	r2, sl
 800d2f6:	ea48 0804 	orr.w	r8, r8, r4
 800d2fa:	fbc8 52d6 	smlaldx	r5, r2, r8, r6
 800d2fe:	4ca2      	ldr	r4, [pc, #648]	@ (800d588 <arm_fir_q15+0x36c>)
 800d300:	fa1f f88c 	uxth.w	r8, ip
 800d304:	469a      	mov	sl, r3
 800d306:	9203      	str	r2, [sp, #12]
 800d308:	ea0e 0404 	and.w	r4, lr, r4
 800d30c:	ea48 0304 	orr.w	r3, r8, r4
 800d310:	fbc3 a9d6 	smlaldx	sl, r9, r3, r6
 800d314:	9e01      	ldr	r6, [sp, #4]
 800d316:	6874      	ldr	r4, [r6, #4]
 800d318:	3608      	adds	r6, #8
 800d31a:	9601      	str	r6, [sp, #4]
 800d31c:	fbce 70c4 	smlald	r7, r0, lr, r4
 800d320:	9006      	str	r0, [sp, #24]
 800d322:	9004      	str	r0, [sp, #16]
 800d324:	9802      	ldr	r0, [sp, #8]
 800d326:	4602      	mov	r2, r0
 800d328:	f8d0 e004 	ldr.w	lr, [r0, #4]
 800d32c:	3208      	adds	r2, #8
 800d32e:	4610      	mov	r0, r2
 800d330:	9202      	str	r2, [sp, #8]
 800d332:	fbcc b1c4 	smlald	fp, r1, ip, r4
 800d336:	9a03      	ldr	r2, [sp, #12]
 800d338:	9103      	str	r1, [sp, #12]
 800d33a:	fbc3 52d4 	smlaldx	r5, r2, r3, r4
 800d33e:	4b92      	ldr	r3, [pc, #584]	@ (800d588 <arm_fir_q15+0x36c>)
 800d340:	fa1f f88e 	uxth.w	r8, lr
 800d344:	9207      	str	r2, [sp, #28]
 800d346:	ea0c 0303 	and.w	r3, ip, r3
 800d34a:	461e      	mov	r6, r3
 800d34c:	4653      	mov	r3, sl
 800d34e:	46ca      	mov	sl, r9
 800d350:	ea48 0906 	orr.w	r9, r8, r6
 800d354:	fbc9 3ad4 	smlaldx	r3, sl, r9, r4
 800d358:	9e05      	ldr	r6, [sp, #20]
 800d35a:	4664      	mov	r4, ip
 800d35c:	46d1      	mov	r9, sl
 800d35e:	42b0      	cmp	r0, r6
 800d360:	d1ba      	bne.n	800d2d8 <arm_fir_q15+0xbc>
 800d362:	46d0      	mov	r8, sl
 800d364:	9806      	ldr	r0, [sp, #24]
 800d366:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 800d368:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800d36a:	b31e      	cbz	r6, 800d3b4 <arm_fir_q15+0x198>
 800d36c:	f8d4 8000 	ldr.w	r8, [r4]
 800d370:	fbcc 70c8 	smlald	r7, r0, ip, r8
 800d374:	9004      	str	r0, [sp, #16]
 800d376:	465e      	mov	r6, fp
 800d378:	fbce 61c8 	smlald	r6, r1, lr, r8
 800d37c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800d380:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d382:	fa1f f08e 	uxth.w	r0, lr
 800d386:	9103      	str	r1, [sp, #12]
 800d388:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 800d38c:	6811      	ldr	r1, [r2, #0]
 800d38e:	46b3      	mov	fp, r6
 800d390:	9a07      	ldr	r2, [sp, #28]
 800d392:	ea40 0c0c 	orr.w	ip, r0, ip
 800d396:	fbcc 52d8 	smlaldx	r5, r2, ip, r8
 800d39a:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 800d39e:	461c      	mov	r4, r3
 800d3a0:	b289      	uxth	r1, r1
 800d3a2:	4650      	mov	r0, sl
 800d3a4:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
 800d3a8:	ea41 010e 	orr.w	r1, r1, lr
 800d3ac:	fbc1 40d8 	smlaldx	r4, r0, r1, r8
 800d3b0:	4623      	mov	r3, r4
 800d3b2:	4680      	mov	r8, r0
 800d3b4:	9908      	ldr	r1, [sp, #32]
 800d3b6:	0bff      	lsrs	r7, r7, #15
 800d3b8:	ea4f 36db 	mov.w	r6, fp, lsr #15
 800d3bc:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800d3be:	3108      	adds	r1, #8
 800d3c0:	0bdc      	lsrs	r4, r3, #15
 800d3c2:	0bed      	lsrs	r5, r5, #15
 800d3c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d3c6:	9108      	str	r1, [sp, #32]
 800d3c8:	ea44 4448 	orr.w	r4, r4, r8, lsl #17
 800d3cc:	9904      	ldr	r1, [sp, #16]
 800d3ce:	ea45 4542 	orr.w	r5, r5, r2, lsl #17
 800d3d2:	f304 040f 	ssat	r4, #16, r4
 800d3d6:	ea47 4741 	orr.w	r7, r7, r1, lsl #17
 800d3da:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d3dc:	f307 070f 	ssat	r7, #16, r7
 800d3e0:	3108      	adds	r1, #8
 800d3e2:	b2bf      	uxth	r7, r7
 800d3e4:	f305 050f 	ssat	r5, #16, r5
 800d3e8:	9109      	str	r1, [sp, #36]	@ 0x24
 800d3ea:	ea47 4705 	orr.w	r7, r7, r5, lsl #16
 800d3ee:	9903      	ldr	r1, [sp, #12]
 800d3f0:	3308      	adds	r3, #8
 800d3f2:	f843 7c08 	str.w	r7, [r3, #-8]
 800d3f6:	ea46 4641 	orr.w	r6, r6, r1, lsl #17
 800d3fa:	9905      	ldr	r1, [sp, #20]
 800d3fc:	f306 060f 	ssat	r6, #16, r6
 800d400:	b2b6      	uxth	r6, r6
 800d402:	3108      	adds	r1, #8
 800d404:	ea46 4604 	orr.w	r6, r6, r4, lsl #16
 800d408:	9105      	str	r1, [sp, #20]
 800d40a:	f843 6c04 	str.w	r6, [r3, #-4]
 800d40e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d410:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d412:	3b01      	subs	r3, #1
 800d414:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d416:	f47f af30 	bne.w	800d27a <arm_fir_q15+0x5e>
 800d41a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d41c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d41e:	00db      	lsls	r3, r3, #3
 800d420:	441a      	add	r2, r3
 800d422:	9214      	str	r2, [sp, #80]	@ 0x50
 800d424:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d426:	441a      	add	r2, r3
 800d428:	9211      	str	r2, [sp, #68]	@ 0x44
 800d42a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d42c:	441a      	add	r2, r3
 800d42e:	9213      	str	r2, [sp, #76]	@ 0x4c
 800d430:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800d432:	441a      	add	r2, r3
 800d434:	9215      	str	r2, [sp, #84]	@ 0x54
 800d436:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800d438:	f013 0c03 	ands.w	ip, r3, #3
 800d43c:	d03e      	beq.n	800d4bc <arm_fir_q15+0x2a0>
 800d43e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d440:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800d444:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d446:	f1a3 0e02 	sub.w	lr, r3, #2
 800d44a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d44c:	f8cd c008 	str.w	ip, [sp, #8]
 800d450:	1c96      	adds	r6, r2, #2
 800d452:	085f      	lsrs	r7, r3, #1
 800d454:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d456:	f8dd b054 	ldr.w	fp, [sp, #84]	@ 0x54
 800d45a:	1c9c      	adds	r4, r3, #2
 800d45c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d45e:	eb03 080c 	add.w	r8, r3, ip
 800d462:	4699      	mov	r9, r3
 800d464:	4694      	mov	ip, r2
 800d466:	f939 2b02 	ldrsh.w	r2, [r9], #2
 800d46a:	1ea5      	subs	r5, r4, #2
 800d46c:	2300      	movs	r3, #0
 800d46e:	2000      	movs	r0, #0
 800d470:	2100      	movs	r1, #0
 800d472:	f82e 2f02 	strh.w	r2, [lr, #2]!
 800d476:	f8cd e004 	str.w	lr, [sp, #4]
 800d47a:	f83c a023 	ldrh.w	sl, [ip, r3, lsl #2]
 800d47e:	f835 e023 	ldrh.w	lr, [r5, r3, lsl #2]
 800d482:	f834 2023 	ldrh.w	r2, [r4, r3, lsl #2]
 800d486:	fbce 018a 	smlalbb	r0, r1, lr, sl
 800d48a:	f836 a023 	ldrh.w	sl, [r6, r3, lsl #2]
 800d48e:	3301      	adds	r3, #1
 800d490:	fbc2 018a 	smlalbb	r0, r1, r2, sl
 800d494:	429f      	cmp	r7, r3
 800d496:	d1f0      	bne.n	800d47a <arm_fir_q15+0x25e>
 800d498:	0bc3      	lsrs	r3, r0, #15
 800d49a:	45c1      	cmp	r9, r8
 800d49c:	f8dd e004 	ldr.w	lr, [sp, #4]
 800d4a0:	f104 0402 	add.w	r4, r4, #2
 800d4a4:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 800d4a8:	f303 030f 	ssat	r3, #16, r3
 800d4ac:	f82b 3b02 	strh.w	r3, [fp], #2
 800d4b0:	d1d9      	bne.n	800d466 <arm_fir_q15+0x24a>
 800d4b2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d4b4:	f8dd c008 	ldr.w	ip, [sp, #8]
 800d4b8:	4463      	add	r3, ip
 800d4ba:	9311      	str	r3, [sp, #68]	@ 0x44
 800d4bc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d4be:	1e5f      	subs	r7, r3, #1
 800d4c0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d4c2:	08be      	lsrs	r6, r7, #2
 800d4c4:	f8d3 c004 	ldr.w	ip, [r3, #4]
 800d4c8:	d01f      	beq.n	800d50a <arm_fir_q15+0x2ee>
 800d4ca:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800d4cc:	f10c 0208 	add.w	r2, ip, #8
 800d4d0:	4603      	mov	r3, r0
 800d4d2:	3308      	adds	r3, #8
 800d4d4:	4290      	cmp	r0, r2
 800d4d6:	bf38      	it	cc
 800d4d8:	459c      	cmpcc	ip, r3
 800d4da:	d33d      	bcc.n	800d558 <arm_fir_q15+0x33c>
 800d4dc:	1e71      	subs	r1, r6, #1
 800d4de:	2901      	cmp	r1, #1
 800d4e0:	d93a      	bls.n	800d558 <arm_fir_q15+0x33c>
 800d4e2:	4663      	mov	r3, ip
 800d4e4:	1d01      	adds	r1, r0, #4
 800d4e6:	2200      	movs	r2, #0
 800d4e8:	3201      	adds	r2, #1
 800d4ea:	f850 5b08 	ldr.w	r5, [r0], #8
 800d4ee:	f851 4b08 	ldr.w	r4, [r1], #8
 800d4f2:	3308      	adds	r3, #8
 800d4f4:	4296      	cmp	r6, r2
 800d4f6:	f843 5c08 	str.w	r5, [r3, #-8]
 800d4fa:	f843 4c04 	str.w	r4, [r3, #-4]
 800d4fe:	d1f3      	bne.n	800d4e8 <arm_fir_q15+0x2cc>
 800d500:	00f6      	lsls	r6, r6, #3
 800d502:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d504:	44b4      	add	ip, r6
 800d506:	4433      	add	r3, r6
 800d508:	9311      	str	r3, [sp, #68]	@ 0x44
 800d50a:	f017 0703 	ands.w	r7, r7, #3
 800d50e:	d010      	beq.n	800d532 <arm_fir_q15+0x316>
 800d510:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d512:	3f01      	subs	r7, #1
 800d514:	f9b2 3000 	ldrsh.w	r3, [r2]
 800d518:	f8ac 3000 	strh.w	r3, [ip]
 800d51c:	d009      	beq.n	800d532 <arm_fir_q15+0x316>
 800d51e:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 800d522:	2f01      	cmp	r7, #1
 800d524:	f8ac 3002 	strh.w	r3, [ip, #2]
 800d528:	d003      	beq.n	800d532 <arm_fir_q15+0x316>
 800d52a:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 800d52e:	f8ac 3004 	strh.w	r3, [ip, #4]
 800d532:	b01b      	add	sp, #108	@ 0x6c
 800d534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d538:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 800d53a:	950d      	str	r5, [sp, #52]	@ 0x34
 800d53c:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 800d53e:	46b2      	mov	sl, r6
 800d540:	4633      	mov	r3, r6
 800d542:	9607      	str	r6, [sp, #28]
 800d544:	4631      	mov	r1, r6
 800d546:	4630      	mov	r0, r6
 800d548:	4632      	mov	r2, r6
 800d54a:	46b0      	mov	r8, r6
 800d54c:	46b3      	mov	fp, r6
 800d54e:	9603      	str	r6, [sp, #12]
 800d550:	4635      	mov	r5, r6
 800d552:	4637      	mov	r7, r6
 800d554:	9604      	str	r6, [sp, #16]
 800d556:	e707      	b.n	800d368 <arm_fir_q15+0x14c>
 800d558:	4631      	mov	r1, r6
 800d55a:	f933 0c08 	ldrsh.w	r0, [r3, #-8]
 800d55e:	3901      	subs	r1, #1
 800d560:	f103 0308 	add.w	r3, r3, #8
 800d564:	f102 0208 	add.w	r2, r2, #8
 800d568:	f822 0c10 	strh.w	r0, [r2, #-16]
 800d56c:	f933 0c0e 	ldrsh.w	r0, [r3, #-14]
 800d570:	f822 0c0e 	strh.w	r0, [r2, #-14]
 800d574:	f933 0c0c 	ldrsh.w	r0, [r3, #-12]
 800d578:	f822 0c0c 	strh.w	r0, [r2, #-12]
 800d57c:	f933 0c0a 	ldrsh.w	r0, [r3, #-10]
 800d580:	f822 0c0a 	strh.w	r0, [r2, #-10]
 800d584:	d1e9      	bne.n	800d55a <arm_fir_q15+0x33e>
 800d586:	e7bb      	b.n	800d500 <arm_fir_q15+0x2e4>
 800d588:	ffff0000 	.word	0xffff0000

0800d58c <arm_fir_init_q15>:
 800d58c:	b538      	push	{r3, r4, r5, lr}
 800d58e:	f011 0501 	ands.w	r5, r1, #1
 800d592:	d10c      	bne.n	800d5ae <arm_fir_init_q15+0x22>
 800d594:	4604      	mov	r4, r0
 800d596:	9804      	ldr	r0, [sp, #16]
 800d598:	1808      	adds	r0, r1, r0
 800d59a:	8021      	strh	r1, [r4, #0]
 800d59c:	60a2      	str	r2, [r4, #8]
 800d59e:	4629      	mov	r1, r5
 800d5a0:	0042      	lsls	r2, r0, #1
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	f000 f806 	bl	800d5b4 <memset>
 800d5a8:	6060      	str	r0, [r4, #4]
 800d5aa:	4628      	mov	r0, r5
 800d5ac:	bd38      	pop	{r3, r4, r5, pc}
 800d5ae:	f04f 30ff 	mov.w	r0, #4294967295
 800d5b2:	bd38      	pop	{r3, r4, r5, pc}

0800d5b4 <memset>:
 800d5b4:	4402      	add	r2, r0
 800d5b6:	4603      	mov	r3, r0
 800d5b8:	4293      	cmp	r3, r2
 800d5ba:	d100      	bne.n	800d5be <memset+0xa>
 800d5bc:	4770      	bx	lr
 800d5be:	f803 1b01 	strb.w	r1, [r3], #1
 800d5c2:	e7f9      	b.n	800d5b8 <memset+0x4>

0800d5c4 <__libc_init_array>:
 800d5c4:	b570      	push	{r4, r5, r6, lr}
 800d5c6:	4d0d      	ldr	r5, [pc, #52]	@ (800d5fc <__libc_init_array+0x38>)
 800d5c8:	4c0d      	ldr	r4, [pc, #52]	@ (800d600 <__libc_init_array+0x3c>)
 800d5ca:	1b64      	subs	r4, r4, r5
 800d5cc:	10a4      	asrs	r4, r4, #2
 800d5ce:	2600      	movs	r6, #0
 800d5d0:	42a6      	cmp	r6, r4
 800d5d2:	d109      	bne.n	800d5e8 <__libc_init_array+0x24>
 800d5d4:	4d0b      	ldr	r5, [pc, #44]	@ (800d604 <__libc_init_array+0x40>)
 800d5d6:	4c0c      	ldr	r4, [pc, #48]	@ (800d608 <__libc_init_array+0x44>)
 800d5d8:	f000 f818 	bl	800d60c <_init>
 800d5dc:	1b64      	subs	r4, r4, r5
 800d5de:	10a4      	asrs	r4, r4, #2
 800d5e0:	2600      	movs	r6, #0
 800d5e2:	42a6      	cmp	r6, r4
 800d5e4:	d105      	bne.n	800d5f2 <__libc_init_array+0x2e>
 800d5e6:	bd70      	pop	{r4, r5, r6, pc}
 800d5e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800d5ec:	4798      	blx	r3
 800d5ee:	3601      	adds	r6, #1
 800d5f0:	e7ee      	b.n	800d5d0 <__libc_init_array+0xc>
 800d5f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800d5f6:	4798      	blx	r3
 800d5f8:	3601      	adds	r6, #1
 800d5fa:	e7f2      	b.n	800d5e2 <__libc_init_array+0x1e>
 800d5fc:	0800d6c4 	.word	0x0800d6c4
 800d600:	0800d6c4 	.word	0x0800d6c4
 800d604:	0800d6c4 	.word	0x0800d6c4
 800d608:	0800d6c8 	.word	0x0800d6c8

0800d60c <_init>:
 800d60c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d60e:	bf00      	nop
 800d610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d612:	bc08      	pop	{r3}
 800d614:	469e      	mov	lr, r3
 800d616:	4770      	bx	lr

0800d618 <_fini>:
 800d618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d61a:	bf00      	nop
 800d61c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d61e:	bc08      	pop	{r3}
 800d620:	469e      	mov	lr, r3
 800d622:	4770      	bx	lr
