
Audio_Matrix_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ce00  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  0800d098  0800d098  0000e098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d130  0800d130  0000f010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d130  0800d130  0000e130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d138  0800d138  0000f010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d138  0800d138  0000e138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d13c  0800d13c  0000e13c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  24000000  0800d140  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fb8  24000010  0800d150  0000f010  2**3
                  ALLOC
 10 .audiobuffer  00000800  20000000  20000000  00010000  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  24000fc8  24000fc8  0000ffc8  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0000f010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001dbbb  00000000  00000000  0000f03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d8b  00000000  00000000  0002cbf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001398  00000000  00000000  00030988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f77  00000000  00000000  00031d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003c193  00000000  00000000  00032c97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f5bf  00000000  00000000  0006ee2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001837ec  00000000  00000000  0008e3e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000b8  00000000  00000000  00211bd5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005118  00000000  00000000  00211c90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  00216da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00000fad  00000000  00000000  00216e0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 00000280  00000000  00000000  00217dbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800d080 	.word	0x0800d080

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	0800d080 	.word	0x0800d080

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b988 	b.w	8000600 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	468e      	mov	lr, r1
 8000310:	4604      	mov	r4, r0
 8000312:	4688      	mov	r8, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d962      	bls.n	80003e4 <__udivmoddi4+0xdc>
 800031e:	fab2 f682 	clz	r6, r2
 8000322:	b14e      	cbz	r6, 8000338 <__udivmoddi4+0x30>
 8000324:	f1c6 0320 	rsb	r3, r6, #32
 8000328:	fa01 f806 	lsl.w	r8, r1, r6
 800032c:	fa20 f303 	lsr.w	r3, r0, r3
 8000330:	40b7      	lsls	r7, r6
 8000332:	ea43 0808 	orr.w	r8, r3, r8
 8000336:	40b4      	lsls	r4, r6
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	fbb8 f1fe 	udiv	r1, r8, lr
 8000344:	0c23      	lsrs	r3, r4, #16
 8000346:	fb0e 8811 	mls	r8, lr, r1, r8
 800034a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034e:	fb01 f20c 	mul.w	r2, r1, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d909      	bls.n	800036a <__udivmoddi4+0x62>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f101 30ff 	add.w	r0, r1, #4294967295
 800035c:	f080 80ea 	bcs.w	8000534 <__udivmoddi4+0x22c>
 8000360:	429a      	cmp	r2, r3
 8000362:	f240 80e7 	bls.w	8000534 <__udivmoddi4+0x22c>
 8000366:	3902      	subs	r1, #2
 8000368:	443b      	add	r3, r7
 800036a:	1a9a      	subs	r2, r3, r2
 800036c:	b2a3      	uxth	r3, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800037a:	fb00 fc0c 	mul.w	ip, r0, ip
 800037e:	459c      	cmp	ip, r3
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x8e>
 8000382:	18fb      	adds	r3, r7, r3
 8000384:	f100 32ff 	add.w	r2, r0, #4294967295
 8000388:	f080 80d6 	bcs.w	8000538 <__udivmoddi4+0x230>
 800038c:	459c      	cmp	ip, r3
 800038e:	f240 80d3 	bls.w	8000538 <__udivmoddi4+0x230>
 8000392:	443b      	add	r3, r7
 8000394:	3802      	subs	r0, #2
 8000396:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039a:	eba3 030c 	sub.w	r3, r3, ip
 800039e:	2100      	movs	r1, #0
 80003a0:	b11d      	cbz	r5, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40f3      	lsrs	r3, r6
 80003a4:	2200      	movs	r2, #0
 80003a6:	e9c5 3200 	strd	r3, r2, [r5]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d905      	bls.n	80003be <__udivmoddi4+0xb6>
 80003b2:	b10d      	cbz	r5, 80003b8 <__udivmoddi4+0xb0>
 80003b4:	e9c5 0100 	strd	r0, r1, [r5]
 80003b8:	2100      	movs	r1, #0
 80003ba:	4608      	mov	r0, r1
 80003bc:	e7f5      	b.n	80003aa <__udivmoddi4+0xa2>
 80003be:	fab3 f183 	clz	r1, r3
 80003c2:	2900      	cmp	r1, #0
 80003c4:	d146      	bne.n	8000454 <__udivmoddi4+0x14c>
 80003c6:	4573      	cmp	r3, lr
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0xc8>
 80003ca:	4282      	cmp	r2, r0
 80003cc:	f200 8105 	bhi.w	80005da <__udivmoddi4+0x2d2>
 80003d0:	1a84      	subs	r4, r0, r2
 80003d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	4690      	mov	r8, r2
 80003da:	2d00      	cmp	r5, #0
 80003dc:	d0e5      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003de:	e9c5 4800 	strd	r4, r8, [r5]
 80003e2:	e7e2      	b.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	2a00      	cmp	r2, #0
 80003e6:	f000 8090 	beq.w	800050a <__udivmoddi4+0x202>
 80003ea:	fab2 f682 	clz	r6, r2
 80003ee:	2e00      	cmp	r6, #0
 80003f0:	f040 80a4 	bne.w	800053c <__udivmoddi4+0x234>
 80003f4:	1a8a      	subs	r2, r1, r2
 80003f6:	0c03      	lsrs	r3, r0, #16
 80003f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fc:	b280      	uxth	r0, r0
 80003fe:	b2bc      	uxth	r4, r7
 8000400:	2101      	movs	r1, #1
 8000402:	fbb2 fcfe 	udiv	ip, r2, lr
 8000406:	fb0e 221c 	mls	r2, lr, ip, r2
 800040a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800040e:	fb04 f20c 	mul.w	r2, r4, ip
 8000412:	429a      	cmp	r2, r3
 8000414:	d907      	bls.n	8000426 <__udivmoddi4+0x11e>
 8000416:	18fb      	adds	r3, r7, r3
 8000418:	f10c 38ff 	add.w	r8, ip, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x11c>
 800041e:	429a      	cmp	r2, r3
 8000420:	f200 80e0 	bhi.w	80005e4 <__udivmoddi4+0x2dc>
 8000424:	46c4      	mov	ip, r8
 8000426:	1a9b      	subs	r3, r3, r2
 8000428:	fbb3 f2fe 	udiv	r2, r3, lr
 800042c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000430:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000434:	fb02 f404 	mul.w	r4, r2, r4
 8000438:	429c      	cmp	r4, r3
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x144>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x142>
 8000444:	429c      	cmp	r4, r3
 8000446:	f200 80ca 	bhi.w	80005de <__udivmoddi4+0x2d6>
 800044a:	4602      	mov	r2, r0
 800044c:	1b1b      	subs	r3, r3, r4
 800044e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000452:	e7a5      	b.n	80003a0 <__udivmoddi4+0x98>
 8000454:	f1c1 0620 	rsb	r6, r1, #32
 8000458:	408b      	lsls	r3, r1
 800045a:	fa22 f706 	lsr.w	r7, r2, r6
 800045e:	431f      	orrs	r7, r3
 8000460:	fa0e f401 	lsl.w	r4, lr, r1
 8000464:	fa20 f306 	lsr.w	r3, r0, r6
 8000468:	fa2e fe06 	lsr.w	lr, lr, r6
 800046c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000470:	4323      	orrs	r3, r4
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	fa1f fc87 	uxth.w	ip, r7
 800047a:	fbbe f0f9 	udiv	r0, lr, r9
 800047e:	0c1c      	lsrs	r4, r3, #16
 8000480:	fb09 ee10 	mls	lr, r9, r0, lr
 8000484:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000488:	fb00 fe0c 	mul.w	lr, r0, ip
 800048c:	45a6      	cmp	lr, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	d909      	bls.n	80004a8 <__udivmoddi4+0x1a0>
 8000494:	193c      	adds	r4, r7, r4
 8000496:	f100 3aff 	add.w	sl, r0, #4294967295
 800049a:	f080 809c 	bcs.w	80005d6 <__udivmoddi4+0x2ce>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f240 8099 	bls.w	80005d6 <__udivmoddi4+0x2ce>
 80004a4:	3802      	subs	r0, #2
 80004a6:	443c      	add	r4, r7
 80004a8:	eba4 040e 	sub.w	r4, r4, lr
 80004ac:	fa1f fe83 	uxth.w	lr, r3
 80004b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b4:	fb09 4413 	mls	r4, r9, r3, r4
 80004b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c0:	45a4      	cmp	ip, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x1ce>
 80004c4:	193c      	adds	r4, r7, r4
 80004c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80004ca:	f080 8082 	bcs.w	80005d2 <__udivmoddi4+0x2ca>
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d97f      	bls.n	80005d2 <__udivmoddi4+0x2ca>
 80004d2:	3b02      	subs	r3, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	fba0 ec02 	umull	lr, ip, r0, r2
 80004e2:	4564      	cmp	r4, ip
 80004e4:	4673      	mov	r3, lr
 80004e6:	46e1      	mov	r9, ip
 80004e8:	d362      	bcc.n	80005b0 <__udivmoddi4+0x2a8>
 80004ea:	d05f      	beq.n	80005ac <__udivmoddi4+0x2a4>
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x1fe>
 80004ee:	ebb8 0203 	subs.w	r2, r8, r3
 80004f2:	eb64 0409 	sbc.w	r4, r4, r9
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	fa22 f301 	lsr.w	r3, r2, r1
 80004fe:	431e      	orrs	r6, r3
 8000500:	40cc      	lsrs	r4, r1
 8000502:	e9c5 6400 	strd	r6, r4, [r5]
 8000506:	2100      	movs	r1, #0
 8000508:	e74f      	b.n	80003aa <__udivmoddi4+0xa2>
 800050a:	fbb1 fcf2 	udiv	ip, r1, r2
 800050e:	0c01      	lsrs	r1, r0, #16
 8000510:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000514:	b280      	uxth	r0, r0
 8000516:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800051a:	463b      	mov	r3, r7
 800051c:	4638      	mov	r0, r7
 800051e:	463c      	mov	r4, r7
 8000520:	46b8      	mov	r8, r7
 8000522:	46be      	mov	lr, r7
 8000524:	2620      	movs	r6, #32
 8000526:	fbb1 f1f7 	udiv	r1, r1, r7
 800052a:	eba2 0208 	sub.w	r2, r2, r8
 800052e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000532:	e766      	b.n	8000402 <__udivmoddi4+0xfa>
 8000534:	4601      	mov	r1, r0
 8000536:	e718      	b.n	800036a <__udivmoddi4+0x62>
 8000538:	4610      	mov	r0, r2
 800053a:	e72c      	b.n	8000396 <__udivmoddi4+0x8e>
 800053c:	f1c6 0220 	rsb	r2, r6, #32
 8000540:	fa2e f302 	lsr.w	r3, lr, r2
 8000544:	40b7      	lsls	r7, r6
 8000546:	40b1      	lsls	r1, r6
 8000548:	fa20 f202 	lsr.w	r2, r0, r2
 800054c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000550:	430a      	orrs	r2, r1
 8000552:	fbb3 f8fe 	udiv	r8, r3, lr
 8000556:	b2bc      	uxth	r4, r7
 8000558:	fb0e 3318 	mls	r3, lr, r8, r3
 800055c:	0c11      	lsrs	r1, r2, #16
 800055e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000562:	fb08 f904 	mul.w	r9, r8, r4
 8000566:	40b0      	lsls	r0, r6
 8000568:	4589      	cmp	r9, r1
 800056a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800056e:	b280      	uxth	r0, r0
 8000570:	d93e      	bls.n	80005f0 <__udivmoddi4+0x2e8>
 8000572:	1879      	adds	r1, r7, r1
 8000574:	f108 3cff 	add.w	ip, r8, #4294967295
 8000578:	d201      	bcs.n	800057e <__udivmoddi4+0x276>
 800057a:	4589      	cmp	r9, r1
 800057c:	d81f      	bhi.n	80005be <__udivmoddi4+0x2b6>
 800057e:	eba1 0109 	sub.w	r1, r1, r9
 8000582:	fbb1 f9fe 	udiv	r9, r1, lr
 8000586:	fb09 f804 	mul.w	r8, r9, r4
 800058a:	fb0e 1119 	mls	r1, lr, r9, r1
 800058e:	b292      	uxth	r2, r2
 8000590:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000594:	4542      	cmp	r2, r8
 8000596:	d229      	bcs.n	80005ec <__udivmoddi4+0x2e4>
 8000598:	18ba      	adds	r2, r7, r2
 800059a:	f109 31ff 	add.w	r1, r9, #4294967295
 800059e:	d2c4      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a0:	4542      	cmp	r2, r8
 80005a2:	d2c2      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a4:	f1a9 0102 	sub.w	r1, r9, #2
 80005a8:	443a      	add	r2, r7
 80005aa:	e7be      	b.n	800052a <__udivmoddi4+0x222>
 80005ac:	45f0      	cmp	r8, lr
 80005ae:	d29d      	bcs.n	80004ec <__udivmoddi4+0x1e4>
 80005b0:	ebbe 0302 	subs.w	r3, lr, r2
 80005b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005b8:	3801      	subs	r0, #1
 80005ba:	46e1      	mov	r9, ip
 80005bc:	e796      	b.n	80004ec <__udivmoddi4+0x1e4>
 80005be:	eba7 0909 	sub.w	r9, r7, r9
 80005c2:	4449      	add	r1, r9
 80005c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80005c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80005cc:	fb09 f804 	mul.w	r8, r9, r4
 80005d0:	e7db      	b.n	800058a <__udivmoddi4+0x282>
 80005d2:	4673      	mov	r3, lr
 80005d4:	e77f      	b.n	80004d6 <__udivmoddi4+0x1ce>
 80005d6:	4650      	mov	r0, sl
 80005d8:	e766      	b.n	80004a8 <__udivmoddi4+0x1a0>
 80005da:	4608      	mov	r0, r1
 80005dc:	e6fd      	b.n	80003da <__udivmoddi4+0xd2>
 80005de:	443b      	add	r3, r7
 80005e0:	3a02      	subs	r2, #2
 80005e2:	e733      	b.n	800044c <__udivmoddi4+0x144>
 80005e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e8:	443b      	add	r3, r7
 80005ea:	e71c      	b.n	8000426 <__udivmoddi4+0x11e>
 80005ec:	4649      	mov	r1, r9
 80005ee:	e79c      	b.n	800052a <__udivmoddi4+0x222>
 80005f0:	eba1 0109 	sub.w	r1, r1, r9
 80005f4:	46c4      	mov	ip, r8
 80005f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80005fa:	fb09 f804 	mul.w	r8, r9, r4
 80005fe:	e7c4      	b.n	800058a <__udivmoddi4+0x282>

08000600 <__aeabi_idiv0>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000608:	4b49      	ldr	r3, [pc, #292]	@ (8000730 <SystemInit+0x12c>)
 800060a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800060e:	4a48      	ldr	r2, [pc, #288]	@ (8000730 <SystemInit+0x12c>)
 8000610:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000614:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000618:	4b45      	ldr	r3, [pc, #276]	@ (8000730 <SystemInit+0x12c>)
 800061a:	691b      	ldr	r3, [r3, #16]
 800061c:	4a44      	ldr	r2, [pc, #272]	@ (8000730 <SystemInit+0x12c>)
 800061e:	f043 0310 	orr.w	r3, r3, #16
 8000622:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000624:	4b43      	ldr	r3, [pc, #268]	@ (8000734 <SystemInit+0x130>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f003 030f 	and.w	r3, r3, #15
 800062c:	2b06      	cmp	r3, #6
 800062e:	d807      	bhi.n	8000640 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000630:	4b40      	ldr	r3, [pc, #256]	@ (8000734 <SystemInit+0x130>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f023 030f 	bic.w	r3, r3, #15
 8000638:	4a3e      	ldr	r2, [pc, #248]	@ (8000734 <SystemInit+0x130>)
 800063a:	f043 0307 	orr.w	r3, r3, #7
 800063e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000640:	4b3d      	ldr	r3, [pc, #244]	@ (8000738 <SystemInit+0x134>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a3c      	ldr	r2, [pc, #240]	@ (8000738 <SystemInit+0x134>)
 8000646:	f043 0301 	orr.w	r3, r3, #1
 800064a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800064c:	4b3a      	ldr	r3, [pc, #232]	@ (8000738 <SystemInit+0x134>)
 800064e:	2200      	movs	r2, #0
 8000650:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000652:	4b39      	ldr	r3, [pc, #228]	@ (8000738 <SystemInit+0x134>)
 8000654:	681a      	ldr	r2, [r3, #0]
 8000656:	4938      	ldr	r1, [pc, #224]	@ (8000738 <SystemInit+0x134>)
 8000658:	4b38      	ldr	r3, [pc, #224]	@ (800073c <SystemInit+0x138>)
 800065a:	4013      	ands	r3, r2
 800065c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800065e:	4b35      	ldr	r3, [pc, #212]	@ (8000734 <SystemInit+0x130>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	f003 0308 	and.w	r3, r3, #8
 8000666:	2b00      	cmp	r3, #0
 8000668:	d007      	beq.n	800067a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800066a:	4b32      	ldr	r3, [pc, #200]	@ (8000734 <SystemInit+0x130>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	f023 030f 	bic.w	r3, r3, #15
 8000672:	4a30      	ldr	r2, [pc, #192]	@ (8000734 <SystemInit+0x130>)
 8000674:	f043 0307 	orr.w	r3, r3, #7
 8000678:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800067a:	4b2f      	ldr	r3, [pc, #188]	@ (8000738 <SystemInit+0x134>)
 800067c:	2200      	movs	r2, #0
 800067e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000680:	4b2d      	ldr	r3, [pc, #180]	@ (8000738 <SystemInit+0x134>)
 8000682:	2200      	movs	r2, #0
 8000684:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000686:	4b2c      	ldr	r3, [pc, #176]	@ (8000738 <SystemInit+0x134>)
 8000688:	2200      	movs	r2, #0
 800068a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800068c:	4b2a      	ldr	r3, [pc, #168]	@ (8000738 <SystemInit+0x134>)
 800068e:	4a2c      	ldr	r2, [pc, #176]	@ (8000740 <SystemInit+0x13c>)
 8000690:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000692:	4b29      	ldr	r3, [pc, #164]	@ (8000738 <SystemInit+0x134>)
 8000694:	4a2b      	ldr	r2, [pc, #172]	@ (8000744 <SystemInit+0x140>)
 8000696:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000698:	4b27      	ldr	r3, [pc, #156]	@ (8000738 <SystemInit+0x134>)
 800069a:	4a2b      	ldr	r2, [pc, #172]	@ (8000748 <SystemInit+0x144>)
 800069c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800069e:	4b26      	ldr	r3, [pc, #152]	@ (8000738 <SystemInit+0x134>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80006a4:	4b24      	ldr	r3, [pc, #144]	@ (8000738 <SystemInit+0x134>)
 80006a6:	4a28      	ldr	r2, [pc, #160]	@ (8000748 <SystemInit+0x144>)
 80006a8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80006aa:	4b23      	ldr	r3, [pc, #140]	@ (8000738 <SystemInit+0x134>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80006b0:	4b21      	ldr	r3, [pc, #132]	@ (8000738 <SystemInit+0x134>)
 80006b2:	4a25      	ldr	r2, [pc, #148]	@ (8000748 <SystemInit+0x144>)
 80006b4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80006b6:	4b20      	ldr	r3, [pc, #128]	@ (8000738 <SystemInit+0x134>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80006bc:	4b1e      	ldr	r3, [pc, #120]	@ (8000738 <SystemInit+0x134>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a1d      	ldr	r2, [pc, #116]	@ (8000738 <SystemInit+0x134>)
 80006c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80006c6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000738 <SystemInit+0x134>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006ce:	4b1f      	ldr	r3, [pc, #124]	@ (800074c <SystemInit+0x148>)
 80006d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006d2:	4a1e      	ldr	r2, [pc, #120]	@ (800074c <SystemInit+0x148>)
 80006d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006d8:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006da:	4b1d      	ldr	r3, [pc, #116]	@ (8000750 <SystemInit+0x14c>)
 80006dc:	681a      	ldr	r2, [r3, #0]
 80006de:	4b1d      	ldr	r3, [pc, #116]	@ (8000754 <SystemInit+0x150>)
 80006e0:	4013      	ands	r3, r2
 80006e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80006e6:	d202      	bcs.n	80006ee <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000758 <SystemInit+0x154>)
 80006ea:	2201      	movs	r2, #1
 80006ec:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80006ee:	4b12      	ldr	r3, [pc, #72]	@ (8000738 <SystemInit+0x134>)
 80006f0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80006f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d113      	bne.n	8000724 <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80006fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000738 <SystemInit+0x134>)
 80006fe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000702:	4a0d      	ldr	r2, [pc, #52]	@ (8000738 <SystemInit+0x134>)
 8000704:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000708:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800070c:	4b13      	ldr	r3, [pc, #76]	@ (800075c <SystemInit+0x158>)
 800070e:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000712:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000714:	4b08      	ldr	r3, [pc, #32]	@ (8000738 <SystemInit+0x134>)
 8000716:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800071a:	4a07      	ldr	r2, [pc, #28]	@ (8000738 <SystemInit+0x134>)
 800071c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000720:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	e000ed00 	.word	0xe000ed00
 8000734:	52002000 	.word	0x52002000
 8000738:	58024400 	.word	0x58024400
 800073c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000740:	02020200 	.word	0x02020200
 8000744:	01ff0000 	.word	0x01ff0000
 8000748:	01010280 	.word	0x01010280
 800074c:	580000c0 	.word	0x580000c0
 8000750:	5c001000 	.word	0x5c001000
 8000754:	ffff0000 	.word	0xffff0000
 8000758:	51008108 	.word	0x51008108
 800075c:	52004000 	.word	0x52004000

08000760 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8000764:	4b09      	ldr	r3, [pc, #36]	@ (800078c <ExitRun0Mode+0x2c>)
 8000766:	68db      	ldr	r3, [r3, #12]
 8000768:	4a08      	ldr	r2, [pc, #32]	@ (800078c <ExitRun0Mode+0x2c>)
 800076a:	f023 0302 	bic.w	r3, r3, #2
 800076e:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000770:	bf00      	nop
 8000772:	4b06      	ldr	r3, [pc, #24]	@ (800078c <ExitRun0Mode+0x2c>)
 8000774:	685b      	ldr	r3, [r3, #4]
 8000776:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800077a:	2b00      	cmp	r3, #0
 800077c:	d0f9      	beq.n	8000772 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800077e:	bf00      	nop
 8000780:	bf00      	nop
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	58024800 	.word	0x58024800

08000790 <AIC3X_Init>:
 *
 * @param haic3x Pointer to a AIC3X_HandleTypeDef structure that contains
 *  the configuration information for the specified AIC3X
 * @retval Hal Status
 */
HAL_StatusTypeDef AIC3X_Init(AIC3X_HandleTypeDef *haic3x) {
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]

	if (haic3x == NULL) {
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d101      	bne.n	80007a2 <AIC3X_Init+0x12>
		return HAL_ERROR;
 800079e:	2301      	movs	r3, #1
 80007a0:	e006      	b.n	80007b0 <AIC3X_Init+0x20>
	}

	AIC3X_HwReset(haic3x);
 80007a2:	6878      	ldr	r0, [r7, #4]
 80007a4:	f000 f808 	bl	80007b8 <AIC3X_HwReset>
	return AIC3X_SwReset(haic3x);
 80007a8:	6878      	ldr	r0, [r7, #4]
 80007aa:	f000 f829 	bl	8000800 <AIC3X_SwReset>
 80007ae:	4603      	mov	r3, r0
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <AIC3X_HwReset>:
 *
 * @param haic3x Pointer to a AIC3X_HandleTypeDef structure that contains
 *  the configuration information for the specified AIC3X.
 * @retval Hal Status
 */
HAL_StatusTypeDef AIC3X_HwReset(AIC3X_HandleTypeDef *haic3x) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]

	if (haic3x == NULL) {
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d101      	bne.n	80007ca <AIC3X_HwReset+0x12>
		return HAL_ERROR;
 80007c6:	2301      	movs	r3, #1
 80007c8:	e016      	b.n	80007f8 <AIC3X_HwReset+0x40>
	}

	HAL_GPIO_WritePin(haic3x->rst_port, haic3x->rst_pin, GPIO_PIN_RESET);
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	6858      	ldr	r0, [r3, #4]
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	891b      	ldrh	r3, [r3, #8]
 80007d2:	2200      	movs	r2, #0
 80007d4:	4619      	mov	r1, r3
 80007d6:	f005 fbe3 	bl	8005fa0 <HAL_GPIO_WritePin>
	HAL_Delay(AIC3X_RESET_TIME_LOW);
 80007da:	20c8      	movs	r0, #200	@ 0xc8
 80007dc:	f002 ff46 	bl	800366c <HAL_Delay>

	HAL_GPIO_WritePin(haic3x->rst_port, haic3x->rst_pin, GPIO_PIN_SET);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	6858      	ldr	r0, [r3, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	891b      	ldrh	r3, [r3, #8]
 80007e8:	2201      	movs	r2, #1
 80007ea:	4619      	mov	r1, r3
 80007ec:	f005 fbd8 	bl	8005fa0 <HAL_GPIO_WritePin>
	HAL_Delay(AIC3X_RESET_TIME_HIGH);
 80007f0:	2000      	movs	r0, #0
 80007f2:	f002 ff3b 	bl	800366c <HAL_Delay>
	return HAL_OK;
 80007f6:	2300      	movs	r3, #0
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	3708      	adds	r7, #8
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}

08000800 <AIC3X_SwReset>:
 *
 * @param haic3x Pointer to a AIC3X_HandleTypeDef structure that contains
 *  the configuration information for the specified AIC3X.
 * @return Hal Status
 */
HAL_StatusTypeDef AIC3X_SwReset(AIC3X_HandleTypeDef *haic3x) {
 8000800:	b580      	push	{r7, lr}
 8000802:	b088      	sub	sp, #32
 8000804:	af04      	add	r7, sp, #16
 8000806:	6078      	str	r0, [r7, #4]

	if (haic3x == NULL) {
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d101      	bne.n	8000812 <AIC3X_SwReset+0x12>
		return HAL_ERROR;
 800080e:	2301      	movs	r3, #1
 8000810:	e010      	b.n	8000834 <AIC3X_SwReset+0x34>
	}

	uint8_t writeBuffer = 0x80u;
 8000812:	2380      	movs	r3, #128	@ 0x80
 8000814:	73fb      	strb	r3, [r7, #15]
	return HAL_I2C_Mem_Write(haic3x->hi2c, (uint16_t) AIC3x_ADDRESS << 1,
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	6818      	ldr	r0, [r3, #0]
 800081a:	230a      	movs	r3, #10
 800081c:	9302      	str	r3, [sp, #8]
 800081e:	2301      	movs	r3, #1
 8000820:	9301      	str	r3, [sp, #4]
 8000822:	f107 030f 	add.w	r3, r7, #15
 8000826:	9300      	str	r3, [sp, #0]
 8000828:	2301      	movs	r3, #1
 800082a:	2201      	movs	r2, #1
 800082c:	2130      	movs	r1, #48	@ 0x30
 800082e:	f005 fc9b 	bl	8006168 <HAL_I2C_Mem_Write>
 8000832:	4603      	mov	r3, r0
	AIC3X_RESET, I2C_MEMADD_SIZE_8BIT, &writeBuffer, 1U, 10);
}
 8000834:	4618      	mov	r0, r3
 8000836:	3710      	adds	r7, #16
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}

0800083c <AIC3X_ReadData>:

HAL_StatusTypeDef AIC3X_ReadData(AIC3X_HandleTypeDef *haic3x, uint8_t reg,
		uint8_t *data, uint8_t dataSize) {
 800083c:	b580      	push	{r7, lr}
 800083e:	b088      	sub	sp, #32
 8000840:	af04      	add	r7, sp, #16
 8000842:	60f8      	str	r0, [r7, #12]
 8000844:	607a      	str	r2, [r7, #4]
 8000846:	461a      	mov	r2, r3
 8000848:	460b      	mov	r3, r1
 800084a:	72fb      	strb	r3, [r7, #11]
 800084c:	4613      	mov	r3, r2
 800084e:	72bb      	strb	r3, [r7, #10]
	if (haic3x == NULL) {
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d101      	bne.n	800085a <AIC3X_ReadData+0x1e>
		return HAL_ERROR;
 8000856:	2301      	movs	r3, #1
 8000858:	e014      	b.n	8000884 <AIC3X_ReadData+0x48>
	}

	if (data == NULL) {
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d101      	bne.n	8000864 <AIC3X_ReadData+0x28>
		return HAL_ERROR;
 8000860:	2301      	movs	r3, #1
 8000862:	e00f      	b.n	8000884 <AIC3X_ReadData+0x48>
	}

	return HAL_I2C_Mem_Read(haic3x->hi2c, (uint16_t) AIC3x_ADDRESS << 1, reg,
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	6818      	ldr	r0, [r3, #0]
 8000868:	7afb      	ldrb	r3, [r7, #11]
 800086a:	b29a      	uxth	r2, r3
 800086c:	7abb      	ldrb	r3, [r7, #10]
 800086e:	b29b      	uxth	r3, r3
 8000870:	210a      	movs	r1, #10
 8000872:	9102      	str	r1, [sp, #8]
 8000874:	9301      	str	r3, [sp, #4]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	9300      	str	r3, [sp, #0]
 800087a:	2301      	movs	r3, #1
 800087c:	2130      	movs	r1, #48	@ 0x30
 800087e:	f005 fd87 	bl	8006390 <HAL_I2C_Mem_Read>
 8000882:	4603      	mov	r3, r0
	I2C_MEMADD_SIZE_8BIT, data, dataSize, 10);
}
 8000884:	4618      	mov	r0, r3
 8000886:	3710      	adds	r7, #16
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}

0800088c <AIC3X_WriteData>:

HAL_StatusTypeDef AIC3X_WriteData(AIC3X_HandleTypeDef *haic3x, uint8_t reg,
		uint8_t *data, uint8_t dataSize) {
 800088c:	b580      	push	{r7, lr}
 800088e:	b088      	sub	sp, #32
 8000890:	af04      	add	r7, sp, #16
 8000892:	60f8      	str	r0, [r7, #12]
 8000894:	607a      	str	r2, [r7, #4]
 8000896:	461a      	mov	r2, r3
 8000898:	460b      	mov	r3, r1
 800089a:	72fb      	strb	r3, [r7, #11]
 800089c:	4613      	mov	r3, r2
 800089e:	72bb      	strb	r3, [r7, #10]
	if (haic3x == NULL) {
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d101      	bne.n	80008aa <AIC3X_WriteData+0x1e>
		return HAL_ERROR;
 80008a6:	2301      	movs	r3, #1
 80008a8:	e014      	b.n	80008d4 <AIC3X_WriteData+0x48>
	}

	if (data == NULL) {
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d101      	bne.n	80008b4 <AIC3X_WriteData+0x28>
		return HAL_ERROR;
 80008b0:	2301      	movs	r3, #1
 80008b2:	e00f      	b.n	80008d4 <AIC3X_WriteData+0x48>
	}

	return HAL_I2C_Mem_Write(haic3x->hi2c, (uint16_t) AIC3x_ADDRESS << 1, reg,
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	6818      	ldr	r0, [r3, #0]
 80008b8:	7afb      	ldrb	r3, [r7, #11]
 80008ba:	b29a      	uxth	r2, r3
 80008bc:	7abb      	ldrb	r3, [r7, #10]
 80008be:	b29b      	uxth	r3, r3
 80008c0:	210a      	movs	r1, #10
 80008c2:	9102      	str	r1, [sp, #8]
 80008c4:	9301      	str	r3, [sp, #4]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	9300      	str	r3, [sp, #0]
 80008ca:	2301      	movs	r3, #1
 80008cc:	2130      	movs	r1, #48	@ 0x30
 80008ce:	f005 fc4b 	bl	8006168 <HAL_I2C_Mem_Write>
 80008d2:	4603      	mov	r3, r0
	I2C_MEMADD_SIZE_8BIT, data, dataSize, 10);
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	3710      	adds	r7, #16
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}

080008dc <AIC3X_WriteDataPathControl>:

	return HAL_OK;
}

HAL_StatusTypeDef AIC3X_WriteDataPathControl(AIC3X_HandleTypeDef *haic3x,
		AIC3X_DataPathControl_TypeDef *pDataPathControl) {
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	6039      	str	r1, [r7, #0]
	if (haic3x == NULL) {
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d101      	bne.n	80008f0 <AIC3X_WriteDataPathControl+0x14>
		return HAL_ERROR;
 80008ec:	2301      	movs	r3, #1
 80008ee:	e030      	b.n	8000952 <AIC3X_WriteDataPathControl+0x76>
	}

	if (pDataPathControl == NULL) {
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d101      	bne.n	80008fa <AIC3X_WriteDataPathControl+0x1e>
		return HAL_ERROR;
 80008f6:	2301      	movs	r3, #1
 80008f8:	e02b      	b.n	8000952 <AIC3X_WriteDataPathControl+0x76>
	}

	uint8_t readBuffer;
	uint8_t writeBuffer;

	readBuffer = AIC3X_ReadData(haic3x, AIC3X_CODEC_DATAPATH_REG, &readBuffer,
 80008fa:	f107 020f 	add.w	r2, r7, #15
 80008fe:	2301      	movs	r3, #1
 8000900:	2107      	movs	r1, #7
 8000902:	6878      	ldr	r0, [r7, #4]
 8000904:	f7ff ff9a 	bl	800083c <AIC3X_ReadData>
 8000908:	4603      	mov	r3, r0
 800090a:	73fb      	strb	r3, [r7, #15]
			sizeof(readBuffer));

	writeBuffer = readBuffer
			& (~(AIC3X_DATAPATH_LEFT_MASK | AIC3X_DATAPATH_RIGHT_MASK));
 800090c:	7bfb      	ldrb	r3, [r7, #15]
 800090e:	f023 031e 	bic.w	r3, r3, #30
 8000912:	b2db      	uxtb	r3, r3
	writeBuffer = readBuffer
 8000914:	73bb      	strb	r3, [r7, #14]

	writeBuffer |= (uint8_t) pDataPathControl->LeftDACDataPath << 3;
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	b25b      	sxtb	r3, r3
 800091c:	00db      	lsls	r3, r3, #3
 800091e:	b25a      	sxtb	r2, r3
 8000920:	7bbb      	ldrb	r3, [r7, #14]
 8000922:	b25b      	sxtb	r3, r3
 8000924:	4313      	orrs	r3, r2
 8000926:	b25b      	sxtb	r3, r3
 8000928:	b2db      	uxtb	r3, r3
 800092a:	73bb      	strb	r3, [r7, #14]
	writeBuffer |= (uint8_t) pDataPathControl->RightDACDataPath << 1;
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	785b      	ldrb	r3, [r3, #1]
 8000930:	b25b      	sxtb	r3, r3
 8000932:	005b      	lsls	r3, r3, #1
 8000934:	b25a      	sxtb	r2, r3
 8000936:	7bbb      	ldrb	r3, [r7, #14]
 8000938:	b25b      	sxtb	r3, r3
 800093a:	4313      	orrs	r3, r2
 800093c:	b25b      	sxtb	r3, r3
 800093e:	b2db      	uxtb	r3, r3
 8000940:	73bb      	strb	r3, [r7, #14]

	return AIC3X_WriteData(haic3x, AIC3X_CODEC_DATAPATH_REG, &writeBuffer,
 8000942:	f107 020e 	add.w	r2, r7, #14
 8000946:	2301      	movs	r3, #1
 8000948:	2107      	movs	r1, #7
 800094a:	6878      	ldr	r0, [r7, #4]
 800094c:	f7ff ff9e 	bl	800088c <AIC3X_WriteData>
 8000950:	4603      	mov	r3, r0
			sizeof(writeBuffer));
}
 8000952:	4618      	mov	r0, r3
 8000954:	3710      	adds	r7, #16
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}

0800095a <AIC3X_WriteASDataIntfControl>:
 *
 * @warning The size of the sent data is not calculated with sizeof() but set
 * 	with a constant value of 3u because the registers have a length of 24 bits.
 */
HAL_StatusTypeDef AIC3X_WriteASDataIntfControl(AIC3X_HandleTypeDef *haic3x,
		AIC3X_ASDIntCtrl_TypeDef *pASDIntfCtrl) {
 800095a:	b580      	push	{r7, lr}
 800095c:	b088      	sub	sp, #32
 800095e:	af04      	add	r7, sp, #16
 8000960:	6078      	str	r0, [r7, #4]
 8000962:	6039      	str	r1, [r7, #0]

	if (haic3x == NULL) {
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d101      	bne.n	800096e <AIC3X_WriteASDataIntfControl+0x14>
		return HAL_ERROR;
 800096a:	2301      	movs	r3, #1
 800096c:	e060      	b.n	8000a30 <AIC3X_WriteASDataIntfControl+0xd6>
	}

	if (pASDIntfCtrl == NULL) {
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d101      	bne.n	8000978 <AIC3X_WriteASDataIntfControl+0x1e>
		return HAL_ERROR;
 8000974:	2301      	movs	r3, #1
 8000976:	e05b      	b.n	8000a30 <AIC3X_WriteASDataIntfControl+0xd6>
	}

	uint32_t writeBuffer = 0;
 8000978:	2300      	movs	r3, #0
 800097a:	60fb      	str	r3, [r7, #12]

	/*Set corresponding bits for the values in pASDIntfCtrl */
	writeBuffer |= pASDIntfCtrl->BclkOutput << 24;
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	061a      	lsls	r2, r3, #24
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	4313      	orrs	r3, r2
 8000986:	60fb      	str	r3, [r7, #12]
	writeBuffer |= pASDIntfCtrl->WclkOutput << 23;
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	785b      	ldrb	r3, [r3, #1]
 800098c:	05da      	lsls	r2, r3, #23
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	4313      	orrs	r3, r2
 8000992:	60fb      	str	r3, [r7, #12]
	writeBuffer |= pASDIntfCtrl->DoutTristate << 22;
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	789b      	ldrb	r3, [r3, #2]
 8000998:	059a      	lsls	r2, r3, #22
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	4313      	orrs	r3, r2
 800099e:	60fb      	str	r3, [r7, #12]
	writeBuffer |= pASDIntfCtrl->ClkDriveCtrl << 21;
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	78db      	ldrb	r3, [r3, #3]
 80009a4:	055a      	lsls	r2, r3, #21
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	4313      	orrs	r3, r2
 80009aa:	60fb      	str	r3, [r7, #12]
	writeBuffer |= pASDIntfCtrl->Effect3D << 19;
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	791b      	ldrb	r3, [r3, #4]
 80009b0:	04da      	lsls	r2, r3, #19
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	4313      	orrs	r3, r2
 80009b6:	60fb      	str	r3, [r7, #12]
	writeBuffer |= pASDIntfCtrl->TransferMode << 14;
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	795b      	ldrb	r3, [r3, #5]
 80009bc:	039a      	lsls	r2, r3, #14
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	4313      	orrs	r3, r2
 80009c2:	60fb      	str	r3, [r7, #12]
	writeBuffer |= pASDIntfCtrl->WordLength << 12;
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	799b      	ldrb	r3, [r3, #6]
 80009c8:	031a      	lsls	r2, r3, #12
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	4313      	orrs	r3, r2
 80009ce:	60fb      	str	r3, [r7, #12]
	writeBuffer |= pASDIntfCtrl->Bclk265ClockMode << 11;
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	79db      	ldrb	r3, [r3, #7]
 80009d4:	02da      	lsls	r2, r3, #11
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	4313      	orrs	r3, r2
 80009da:	60fb      	str	r3, [r7, #12]
	writeBuffer |= pASDIntfCtrl->DACResync << 10;
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	7a1b      	ldrb	r3, [r3, #8]
 80009e0:	029a      	lsls	r2, r3, #10
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	4313      	orrs	r3, r2
 80009e6:	60fb      	str	r3, [r7, #12]
	writeBuffer |= pASDIntfCtrl->ADCResync << 9;
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	7a5b      	ldrb	r3, [r3, #9]
 80009ec:	025a      	lsls	r2, r3, #9
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	4313      	orrs	r3, r2
 80009f2:	60fb      	str	r3, [r7, #12]
	writeBuffer |= pASDIntfCtrl->ReSyncMute << 8;
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	7a9b      	ldrb	r3, [r3, #10]
 80009f8:	021a      	lsls	r2, r3, #8
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	4313      	orrs	r3, r2
 80009fe:	60fb      	str	r3, [r7, #12]
	writeBuffer |= pASDIntfCtrl->WordOffset;
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	7adb      	ldrb	r3, [r3, #11]
 8000a04:	461a      	mov	r2, r3
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	60fb      	str	r3, [r7, #12]

	/* Shift the writeBuffer to the left by 8 bits to make place for the bits of the ASD overflow control register*/
	writeBuffer = writeBuffer << 8;
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	021b      	lsls	r3, r3, #8
 8000a10:	60fb      	str	r3, [r7, #12]

	/* Write the ASD interface control register */
	return HAL_I2C_Mem_Write(haic3x->hi2c, (uint16_t) AIC3x_ADDRESS << 1,
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	6818      	ldr	r0, [r3, #0]
 8000a16:	230a      	movs	r3, #10
 8000a18:	9302      	str	r3, [sp, #8]
 8000a1a:	2303      	movs	r3, #3
 8000a1c:	9301      	str	r3, [sp, #4]
 8000a1e:	f107 030c 	add.w	r3, r7, #12
 8000a22:	9300      	str	r3, [sp, #0]
 8000a24:	2301      	movs	r3, #1
 8000a26:	2208      	movs	r2, #8
 8000a28:	2130      	movs	r1, #48	@ 0x30
 8000a2a:	f005 fb9d 	bl	8006168 <HAL_I2C_Mem_Write>
 8000a2e:	4603      	mov	r3, r0
	AIC3X_ASD_INTF_CTRLA, I2C_MEMADD_SIZE_8BIT, (uint8_t*) &writeBuffer, 3u, 10);

}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3710      	adds	r7, #16
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <AIC3X_WritePGAGainControl>:

	return HAL_OK;
}

HAL_StatusTypeDef AIC3X_WritePGAGainControl(AIC3X_HandleTypeDef *haic3x,
		AIC3X_PGAGainControl_TypeDef *pPGAGainControl) {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	6039      	str	r1, [r7, #0]
	if (haic3x == NULL) {
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d101      	bne.n	8000a4c <AIC3X_WritePGAGainControl+0x14>
		return HAL_ERROR;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	e038      	b.n	8000abe <AIC3X_WritePGAGainControl+0x86>
	}

	if (pPGAGainControl == NULL) {
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d101      	bne.n	8000a56 <AIC3X_WritePGAGainControl+0x1e>
		return HAL_ERROR;
 8000a52:	2301      	movs	r3, #1
 8000a54:	e033      	b.n	8000abe <AIC3X_WritePGAGainControl+0x86>
	}

	uint16_t writeBuffer = 0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	81fb      	strh	r3, [r7, #14]

	writeBuffer |= pPGAGainControl->LADCMuted << 15;
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	b21b      	sxth	r3, r3
 8000a60:	03db      	lsls	r3, r3, #15
 8000a62:	b21a      	sxth	r2, r3
 8000a64:	89fb      	ldrh	r3, [r7, #14]
 8000a66:	b21b      	sxth	r3, r3
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	b21b      	sxth	r3, r3
 8000a6c:	b29b      	uxth	r3, r3
 8000a6e:	81fb      	strh	r3, [r7, #14]
	writeBuffer |= (pPGAGainControl->LADCGain & AIC3X_PGA_GAIN_MASK) << 8;
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	785b      	ldrb	r3, [r3, #1]
 8000a74:	021b      	lsls	r3, r3, #8
 8000a76:	b29b      	uxth	r3, r3
 8000a78:	f403 43fe 	and.w	r3, r3, #32512	@ 0x7f00
 8000a7c:	b29a      	uxth	r2, r3
 8000a7e:	89fb      	ldrh	r3, [r7, #14]
 8000a80:	4313      	orrs	r3, r2
 8000a82:	b29b      	uxth	r3, r3
 8000a84:	81fb      	strh	r3, [r7, #14]
	writeBuffer |= pPGAGainControl->RADCMuted << 7;
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	789b      	ldrb	r3, [r3, #2]
 8000a8a:	b21b      	sxth	r3, r3
 8000a8c:	01db      	lsls	r3, r3, #7
 8000a8e:	b21a      	sxth	r2, r3
 8000a90:	89fb      	ldrh	r3, [r7, #14]
 8000a92:	b21b      	sxth	r3, r3
 8000a94:	4313      	orrs	r3, r2
 8000a96:	b21b      	sxth	r3, r3
 8000a98:	b29b      	uxth	r3, r3
 8000a9a:	81fb      	strh	r3, [r7, #14]
	writeBuffer |= pPGAGainControl->RADCGain & AIC3X_PGA_GAIN_MASK;
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	78db      	ldrb	r3, [r3, #3]
 8000aa0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000aa4:	b29a      	uxth	r2, r3
 8000aa6:	89fb      	ldrh	r3, [r7, #14]
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	b29b      	uxth	r3, r3
 8000aac:	81fb      	strh	r3, [r7, #14]

	return AIC3X_WriteData(haic3x, LADC_VOL, (uint8_t*) &writeBuffer,
 8000aae:	f107 020e 	add.w	r2, r7, #14
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	210f      	movs	r1, #15
 8000ab6:	6878      	ldr	r0, [r7, #4]
 8000ab8:	f7ff fee8 	bl	800088c <AIC3X_WriteData>
 8000abc:	4603      	mov	r3, r0
			sizeof(writeBuffer));
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3710      	adds	r7, #16
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <AIC3X_WriteADCMixControl>:

	return HAL_OK;
}

HAL_StatusTypeDef AIC3X_WriteADCMixControl(AIC3X_HandleTypeDef *haic3x,
		AIC3X_ADCMixControl_TypeDef *pADCMixControl) {
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b086      	sub	sp, #24
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
 8000ace:	6039      	str	r1, [r7, #0]
	if (haic3x == NULL) {
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d101      	bne.n	8000ada <AIC3X_WriteADCMixControl+0x14>
		return HAL_ERROR;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	e12f      	b.n	8000d3a <AIC3X_WriteADCMixControl+0x274>
	}

	if (pADCMixControl == NULL) {
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d101      	bne.n	8000ae4 <AIC3X_WriteADCMixControl+0x1e>
		return HAL_ERROR;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	e12a      	b.n	8000d3a <AIC3X_WriteADCMixControl+0x274>
	}

	if ((pADCMixControl->LeftADC_MIC2LGain > 8
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	2b08      	cmp	r3, #8
 8000aea:	d903      	bls.n	8000af4 <AIC3X_WriteADCMixControl+0x2e>
			&& pADCMixControl->LeftADC_MIC2LGain < 15)
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	2b0e      	cmp	r3, #14
 8000af2:	d937      	bls.n	8000b64 <AIC3X_WriteADCMixControl+0x9e>
			|| (pADCMixControl->LeftADC_MIC2RGain > 8
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	785b      	ldrb	r3, [r3, #1]
 8000af8:	2b08      	cmp	r3, #8
 8000afa:	d903      	bls.n	8000b04 <AIC3X_WriteADCMixControl+0x3e>
					&& pADCMixControl->LeftADC_MIC2RGain < 15)
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	785b      	ldrb	r3, [r3, #1]
 8000b00:	2b0e      	cmp	r3, #14
 8000b02:	d92f      	bls.n	8000b64 <AIC3X_WriteADCMixControl+0x9e>
			|| (pADCMixControl->RightADC_MIC2LGain > 8
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	789b      	ldrb	r3, [r3, #2]
 8000b08:	2b08      	cmp	r3, #8
 8000b0a:	d903      	bls.n	8000b14 <AIC3X_WriteADCMixControl+0x4e>
					&& pADCMixControl->RightADC_MIC2LGain < 15)
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	789b      	ldrb	r3, [r3, #2]
 8000b10:	2b0e      	cmp	r3, #14
 8000b12:	d927      	bls.n	8000b64 <AIC3X_WriteADCMixControl+0x9e>
			|| (pADCMixControl->RightADC_MIC2RGain > 8
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	78db      	ldrb	r3, [r3, #3]
 8000b18:	2b08      	cmp	r3, #8
 8000b1a:	d903      	bls.n	8000b24 <AIC3X_WriteADCMixControl+0x5e>
					&& pADCMixControl->RightADC_MIC2RGain < 15)
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	78db      	ldrb	r3, [r3, #3]
 8000b20:	2b0e      	cmp	r3, #14
 8000b22:	d91f      	bls.n	8000b64 <AIC3X_WriteADCMixControl+0x9e>
			|| (pADCMixControl->LeftADC_MIC1LPGain > 8
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	795b      	ldrb	r3, [r3, #5]
 8000b28:	2b08      	cmp	r3, #8
 8000b2a:	d903      	bls.n	8000b34 <AIC3X_WriteADCMixControl+0x6e>
					&& pADCMixControl->LeftADC_MIC1LPGain < 15)
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	795b      	ldrb	r3, [r3, #5]
 8000b30:	2b0e      	cmp	r3, #14
 8000b32:	d917      	bls.n	8000b64 <AIC3X_WriteADCMixControl+0x9e>
			|| (pADCMixControl->LeftADC_MIC1RPGain > 8
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	7a5b      	ldrb	r3, [r3, #9]
 8000b38:	2b08      	cmp	r3, #8
 8000b3a:	d903      	bls.n	8000b44 <AIC3X_WriteADCMixControl+0x7e>
					&& pADCMixControl->LeftADC_MIC1RPGain < 15)
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	7a5b      	ldrb	r3, [r3, #9]
 8000b40:	2b0e      	cmp	r3, #14
 8000b42:	d90f      	bls.n	8000b64 <AIC3X_WriteADCMixControl+0x9e>
			|| (pADCMixControl->RightADC_MIC1LPGain > 8
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	7bdb      	ldrb	r3, [r3, #15]
 8000b48:	2b08      	cmp	r3, #8
 8000b4a:	d903      	bls.n	8000b54 <AIC3X_WriteADCMixControl+0x8e>
					&& pADCMixControl->RightADC_MIC1LPGain < 15)
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	7bdb      	ldrb	r3, [r3, #15]
 8000b50:	2b0e      	cmp	r3, #14
 8000b52:	d907      	bls.n	8000b64 <AIC3X_WriteADCMixControl+0x9e>
			|| (pADCMixControl->RightADC_MIC1RPGain > 8
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	7adb      	ldrb	r3, [r3, #11]
 8000b58:	2b08      	cmp	r3, #8
 8000b5a:	d905      	bls.n	8000b68 <AIC3X_WriteADCMixControl+0xa2>
					&& pADCMixControl->RightADC_MIC1RPGain < 15)) {
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	7adb      	ldrb	r3, [r3, #11]
 8000b60:	2b0e      	cmp	r3, #14
 8000b62:	d801      	bhi.n	8000b68 <AIC3X_WriteADCMixControl+0xa2>
		return HAL_ERROR;
 8000b64:	2301      	movs	r3, #1
 8000b66:	e0e8      	b.n	8000d3a <AIC3X_WriteADCMixControl+0x274>
	}

uint16_t writeBufferMIC2 = 0;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	82bb      	strh	r3, [r7, #20]
uint8_t writeBufferLeftADCMIC1LP = 0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	74fb      	strb	r3, [r7, #19]
uint16_t writeBufferMIC1RP = 0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	823b      	strh	r3, [r7, #16]
uint8_t writeBufferRightADCMIC1LP = 0;
 8000b74:	2300      	movs	r3, #0
 8000b76:	73fb      	strb	r3, [r7, #15]

writeBufferMIC2 |= pADCMixControl->LeftADC_MIC2LGain << 12;
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	b21b      	sxth	r3, r3
 8000b7e:	031b      	lsls	r3, r3, #12
 8000b80:	b21a      	sxth	r2, r3
 8000b82:	8abb      	ldrh	r3, [r7, #20]
 8000b84:	b21b      	sxth	r3, r3
 8000b86:	4313      	orrs	r3, r2
 8000b88:	b21b      	sxth	r3, r3
 8000b8a:	b29b      	uxth	r3, r3
 8000b8c:	82bb      	strh	r3, [r7, #20]
writeBufferMIC2 |= pADCMixControl->LeftADC_MIC2RGain << 8;
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	785b      	ldrb	r3, [r3, #1]
 8000b92:	b21b      	sxth	r3, r3
 8000b94:	021b      	lsls	r3, r3, #8
 8000b96:	b21a      	sxth	r2, r3
 8000b98:	8abb      	ldrh	r3, [r7, #20]
 8000b9a:	b21b      	sxth	r3, r3
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	b21b      	sxth	r3, r3
 8000ba0:	b29b      	uxth	r3, r3
 8000ba2:	82bb      	strh	r3, [r7, #20]
writeBufferMIC2 |= pADCMixControl->RightADC_MIC2LGain << 4;
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	789b      	ldrb	r3, [r3, #2]
 8000ba8:	b21b      	sxth	r3, r3
 8000baa:	011b      	lsls	r3, r3, #4
 8000bac:	b21a      	sxth	r2, r3
 8000bae:	8abb      	ldrh	r3, [r7, #20]
 8000bb0:	b21b      	sxth	r3, r3
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	b21b      	sxth	r3, r3
 8000bb6:	b29b      	uxth	r3, r3
 8000bb8:	82bb      	strh	r3, [r7, #20]
writeBufferMIC2 |= pADCMixControl->RightADC_MIC2RGain;
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	78db      	ldrb	r3, [r3, #3]
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	8abb      	ldrh	r3, [r7, #20]
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	b29b      	uxth	r3, r3
 8000bc6:	82bb      	strh	r3, [r7, #20]

writeBufferLeftADCMIC1LP |= pADCMixControl->LeftADC_MIC1LPDifferential << 7;
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	791b      	ldrb	r3, [r3, #4]
 8000bcc:	b25b      	sxtb	r3, r3
 8000bce:	01db      	lsls	r3, r3, #7
 8000bd0:	b25a      	sxtb	r2, r3
 8000bd2:	7cfb      	ldrb	r3, [r7, #19]
 8000bd4:	b25b      	sxtb	r3, r3
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	b25b      	sxtb	r3, r3
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	74fb      	strb	r3, [r7, #19]
writeBufferLeftADCMIC1LP |= pADCMixControl->LeftADC_MIC1LPGain << 3;
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	795b      	ldrb	r3, [r3, #5]
 8000be2:	b25b      	sxtb	r3, r3
 8000be4:	00db      	lsls	r3, r3, #3
 8000be6:	b25a      	sxtb	r2, r3
 8000be8:	7cfb      	ldrb	r3, [r7, #19]
 8000bea:	b25b      	sxtb	r3, r3
 8000bec:	4313      	orrs	r3, r2
 8000bee:	b25b      	sxtb	r3, r3
 8000bf0:	b2db      	uxtb	r3, r3
 8000bf2:	74fb      	strb	r3, [r7, #19]
writeBufferLeftADCMIC1LP |= pADCMixControl->LeftADC_PowerUp << 2;
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	799b      	ldrb	r3, [r3, #6]
 8000bf8:	b25b      	sxtb	r3, r3
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	b25a      	sxtb	r2, r3
 8000bfe:	7cfb      	ldrb	r3, [r7, #19]
 8000c00:	b25b      	sxtb	r3, r3
 8000c02:	4313      	orrs	r3, r2
 8000c04:	b25b      	sxtb	r3, r3
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	74fb      	strb	r3, [r7, #19]
writeBufferLeftADCMIC1LP |= pADCMixControl->LeftADC_PGASoftStepping & AIC3X_LEFT_ADC_MIC1LP_SOFT_STEPPING_MASK;
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	79db      	ldrb	r3, [r3, #7]
 8000c0e:	f003 0303 	and.w	r3, r3, #3
 8000c12:	b2da      	uxtb	r2, r3
 8000c14:	7cfb      	ldrb	r3, [r7, #19]
 8000c16:	4313      	orrs	r3, r2
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	74fb      	strb	r3, [r7, #19]

writeBufferMIC1RP |= pADCMixControl->LeftADC_MIC1RPDifferential << 15;
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	7a1b      	ldrb	r3, [r3, #8]
 8000c20:	b21b      	sxth	r3, r3
 8000c22:	03db      	lsls	r3, r3, #15
 8000c24:	b21a      	sxth	r2, r3
 8000c26:	8a3b      	ldrh	r3, [r7, #16]
 8000c28:	b21b      	sxth	r3, r3
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	b21b      	sxth	r3, r3
 8000c2e:	b29b      	uxth	r3, r3
 8000c30:	823b      	strh	r3, [r7, #16]
writeBufferMIC1RP |= pADCMixControl->LeftADC_MIC1RPGain << 11;
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	7a5b      	ldrb	r3, [r3, #9]
 8000c36:	b21b      	sxth	r3, r3
 8000c38:	02db      	lsls	r3, r3, #11
 8000c3a:	b21a      	sxth	r2, r3
 8000c3c:	8a3b      	ldrh	r3, [r7, #16]
 8000c3e:	b21b      	sxth	r3, r3
 8000c40:	4313      	orrs	r3, r2
 8000c42:	b21b      	sxth	r3, r3
 8000c44:	b29b      	uxth	r3, r3
 8000c46:	823b      	strh	r3, [r7, #16]
writeBufferMIC1RP |= pADCMixControl->RightADC_MIC1RPDifferential << 7;
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	7a9b      	ldrb	r3, [r3, #10]
 8000c4c:	b21b      	sxth	r3, r3
 8000c4e:	01db      	lsls	r3, r3, #7
 8000c50:	b21a      	sxth	r2, r3
 8000c52:	8a3b      	ldrh	r3, [r7, #16]
 8000c54:	b21b      	sxth	r3, r3
 8000c56:	4313      	orrs	r3, r2
 8000c58:	b21b      	sxth	r3, r3
 8000c5a:	b29b      	uxth	r3, r3
 8000c5c:	823b      	strh	r3, [r7, #16]
writeBufferMIC1RP |= pADCMixControl->RightADC_MIC1RPGain << 3;
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	7adb      	ldrb	r3, [r3, #11]
 8000c62:	b21b      	sxth	r3, r3
 8000c64:	00db      	lsls	r3, r3, #3
 8000c66:	b21a      	sxth	r2, r3
 8000c68:	8a3b      	ldrh	r3, [r7, #16]
 8000c6a:	b21b      	sxth	r3, r3
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	b21b      	sxth	r3, r3
 8000c70:	b29b      	uxth	r3, r3
 8000c72:	823b      	strh	r3, [r7, #16]
writeBufferMIC1RP |= pADCMixControl->RightADC_PowerUp << 2;
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	7b1b      	ldrb	r3, [r3, #12]
 8000c78:	b21b      	sxth	r3, r3
 8000c7a:	009b      	lsls	r3, r3, #2
 8000c7c:	b21a      	sxth	r2, r3
 8000c7e:	8a3b      	ldrh	r3, [r7, #16]
 8000c80:	b21b      	sxth	r3, r3
 8000c82:	4313      	orrs	r3, r2
 8000c84:	b21b      	sxth	r3, r3
 8000c86:	b29b      	uxth	r3, r3
 8000c88:	823b      	strh	r3, [r7, #16]
writeBufferMIC1RP |= pADCMixControl->RightADC_PGASoftStepping & AIC3X_RIGHT_ADC_MIC1RP_SOFT_STEPPING_MASK;
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	7b5b      	ldrb	r3, [r3, #13]
 8000c8e:	f003 0303 	and.w	r3, r3, #3
 8000c92:	b29a      	uxth	r2, r3
 8000c94:	8a3b      	ldrh	r3, [r7, #16]
 8000c96:	4313      	orrs	r3, r2
 8000c98:	b29b      	uxth	r3, r3
 8000c9a:	823b      	strh	r3, [r7, #16]

writeBufferRightADCMIC1LP |= pADCMixControl->RightADC_MIC1LPDifferential
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	7b9b      	ldrb	r3, [r3, #14]
 8000ca0:	b25b      	sxtb	r3, r3
 8000ca2:	01db      	lsls	r3, r3, #7
 8000ca4:	b25a      	sxtb	r2, r3
 8000ca6:	7bfb      	ldrb	r3, [r7, #15]
 8000ca8:	b25b      	sxtb	r3, r3
 8000caa:	4313      	orrs	r3, r2
 8000cac:	b25b      	sxtb	r3, r3
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	73fb      	strb	r3, [r7, #15]
<< 7;
writeBufferRightADCMIC1LP |= pADCMixControl->RightADC_MIC1LPGain << 3;
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	7bdb      	ldrb	r3, [r3, #15]
 8000cb6:	b25b      	sxtb	r3, r3
 8000cb8:	00db      	lsls	r3, r3, #3
 8000cba:	b25a      	sxtb	r2, r3
 8000cbc:	7bfb      	ldrb	r3, [r7, #15]
 8000cbe:	b25b      	sxtb	r3, r3
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	b25b      	sxtb	r3, r3
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	73fb      	strb	r3, [r7, #15]

HAL_StatusTypeDef status;

status = AIC3X_WriteData(haic3x, MIC2LR_LADC_CTRL, (uint8_t*) &writeBufferMIC2,
 8000cc8:	f107 0214 	add.w	r2, r7, #20
 8000ccc:	2302      	movs	r3, #2
 8000cce:	2111      	movs	r1, #17
 8000cd0:	6878      	ldr	r0, [r7, #4]
 8000cd2:	f7ff fddb 	bl	800088c <AIC3X_WriteData>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	75fb      	strb	r3, [r7, #23]
		sizeof(writeBufferMIC2));

if (status != HAL_OK) {
 8000cda:	7dfb      	ldrb	r3, [r7, #23]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <AIC3X_WriteADCMixControl+0x21e>
	return status;
 8000ce0:	7dfb      	ldrb	r3, [r7, #23]
 8000ce2:	e02a      	b.n	8000d3a <AIC3X_WriteADCMixControl+0x274>
}

status = AIC3X_WriteData(haic3x, MIC1L_LADC_CTRL, &writeBufferLeftADCMIC1LP,
 8000ce4:	f107 0213 	add.w	r2, r7, #19
 8000ce8:	2301      	movs	r3, #1
 8000cea:	2113      	movs	r1, #19
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f7ff fdcd 	bl	800088c <AIC3X_WriteData>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	75fb      	strb	r3, [r7, #23]
		sizeof(writeBufferLeftADCMIC1LP));

if (status != HAL_OK) {
 8000cf6:	7dfb      	ldrb	r3, [r7, #23]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <AIC3X_WriteADCMixControl+0x23a>
	return status;
 8000cfc:	7dfb      	ldrb	r3, [r7, #23]
 8000cfe:	e01c      	b.n	8000d3a <AIC3X_WriteADCMixControl+0x274>
}

status = AIC3X_WriteData(haic3x, MIC1R_LADC_CTRL, (uint8_t*) &writeBufferMIC1RP,
 8000d00:	f107 0210 	add.w	r2, r7, #16
 8000d04:	2302      	movs	r3, #2
 8000d06:	2115      	movs	r1, #21
 8000d08:	6878      	ldr	r0, [r7, #4]
 8000d0a:	f7ff fdbf 	bl	800088c <AIC3X_WriteData>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	75fb      	strb	r3, [r7, #23]
		sizeof(writeBufferMIC1RP));

if (status != HAL_OK) {
 8000d12:	7dfb      	ldrb	r3, [r7, #23]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <AIC3X_WriteADCMixControl+0x256>
	return status;
 8000d18:	7dfb      	ldrb	r3, [r7, #23]
 8000d1a:	e00e      	b.n	8000d3a <AIC3X_WriteADCMixControl+0x274>
}

status = AIC3X_WriteData(haic3x, MIC1L_RADC_CTRL, &writeBufferRightADCMIC1LP,
 8000d1c:	f107 020f 	add.w	r2, r7, #15
 8000d20:	2301      	movs	r3, #1
 8000d22:	2118      	movs	r1, #24
 8000d24:	6878      	ldr	r0, [r7, #4]
 8000d26:	f7ff fdb1 	bl	800088c <AIC3X_WriteData>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	75fb      	strb	r3, [r7, #23]
		sizeof(writeBufferRightADCMIC1LP));

if (status != HAL_OK) {
 8000d2e:	7dfb      	ldrb	r3, [r7, #23]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <AIC3X_WriteADCMixControl+0x272>
	return status;
 8000d34:	7dfb      	ldrb	r3, [r7, #23]
 8000d36:	e000      	b.n	8000d3a <AIC3X_WriteADCMixControl+0x274>
}

return HAL_OK;
 8000d38:	2300      	movs	r3, #0
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3718      	adds	r7, #24
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <AIC3X_WriteDACPowerControl>:

return HAL_OK;
}

HAL_StatusTypeDef AIC3X_WriteDACPowerControl(AIC3X_HandleTypeDef *haic3x,
	AIC3X_DACPowerControl_TypeDef *pDACPowerControl) {
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b084      	sub	sp, #16
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	6078      	str	r0, [r7, #4]
 8000d4a:	6039      	str	r1, [r7, #0]
if (haic3x == NULL) {
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d101      	bne.n	8000d56 <AIC3X_WriteDACPowerControl+0x14>
	return HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	e035      	b.n	8000dc2 <AIC3X_WriteDACPowerControl+0x80>
}

if (pDACPowerControl == NULL) {
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d101      	bne.n	8000d60 <AIC3X_WriteDACPowerControl+0x1e>
	return HAL_ERROR;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	e030      	b.n	8000dc2 <AIC3X_WriteDACPowerControl+0x80>
}

uint8_t readBuffer;
HAL_StatusTypeDef status;

status = AIC3X_ReadData(haic3x, DAC_PWR, &readBuffer, sizeof(readBuffer));
 8000d60:	f107 020e 	add.w	r2, r7, #14
 8000d64:	2301      	movs	r3, #1
 8000d66:	2125      	movs	r1, #37	@ 0x25
 8000d68:	6878      	ldr	r0, [r7, #4]
 8000d6a:	f7ff fd67 	bl	800083c <AIC3X_ReadData>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	73fb      	strb	r3, [r7, #15]

if (status != HAL_OK) {
 8000d72:	7bfb      	ldrb	r3, [r7, #15]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <AIC3X_WriteDACPowerControl+0x3a>
	return status;
 8000d78:	7bfb      	ldrb	r3, [r7, #15]
 8000d7a:	e022      	b.n	8000dc2 <AIC3X_WriteDACPowerControl+0x80>
}

uint8_t writeBuffer = readBuffer
		& (~(AIC3X_LEFT_DAC_POWER_MASK | AIC3X_RIGHT_DAC_POWER_MASK));
 8000d7c:	7bbb      	ldrb	r3, [r7, #14]
 8000d7e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000d82:	b2db      	uxtb	r3, r3
uint8_t writeBuffer = readBuffer
 8000d84:	737b      	strb	r3, [r7, #13]

writeBuffer |= pDACPowerControl->LeftDACPoweredUp << 7;
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	b25b      	sxtb	r3, r3
 8000d8c:	01db      	lsls	r3, r3, #7
 8000d8e:	b25a      	sxtb	r2, r3
 8000d90:	7b7b      	ldrb	r3, [r7, #13]
 8000d92:	b25b      	sxtb	r3, r3
 8000d94:	4313      	orrs	r3, r2
 8000d96:	b25b      	sxtb	r3, r3
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	737b      	strb	r3, [r7, #13]
writeBuffer |= pDACPowerControl->RightDACPoweredUp << 6;
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	785b      	ldrb	r3, [r3, #1]
 8000da0:	b25b      	sxtb	r3, r3
 8000da2:	019b      	lsls	r3, r3, #6
 8000da4:	b25a      	sxtb	r2, r3
 8000da6:	7b7b      	ldrb	r3, [r7, #13]
 8000da8:	b25b      	sxtb	r3, r3
 8000daa:	4313      	orrs	r3, r2
 8000dac:	b25b      	sxtb	r3, r3
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	737b      	strb	r3, [r7, #13]

return AIC3X_WriteData(haic3x, DAC_PWR, &writeBuffer, sizeof(writeBuffer));
 8000db2:	f107 020d 	add.w	r2, r7, #13
 8000db6:	2301      	movs	r3, #1
 8000db8:	2125      	movs	r1, #37	@ 0x25
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	f7ff fd66 	bl	800088c <AIC3X_WriteData>
 8000dc0:	4603      	mov	r3, r0
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3710      	adds	r7, #16
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <AIC3X_WriteVolControl>:

return HAL_OK;
}

HAL_StatusTypeDef AIC3X_WriteVolControl(AIC3X_HandleTypeDef *haic3x,
	uint8_t reg, AIC3X_VolControl_TypeDef *pVolControl) {
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b086      	sub	sp, #24
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	60f8      	str	r0, [r7, #12]
 8000dd2:	460b      	mov	r3, r1
 8000dd4:	607a      	str	r2, [r7, #4]
 8000dd6:	72fb      	strb	r3, [r7, #11]
if (haic3x == NULL) {
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d101      	bne.n	8000de2 <AIC3X_WriteVolControl+0x18>
	return HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
 8000de0:	e03e      	b.n	8000e60 <AIC3X_WriteVolControl+0x96>
}

if (pVolControl == NULL) {
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d101      	bne.n	8000dec <AIC3X_WriteVolControl+0x22>
	return HAL_ERROR;
 8000de8:	2301      	movs	r3, #1
 8000dea:	e039      	b.n	8000e60 <AIC3X_WriteVolControl+0x96>
}

if (pVolControl->Volume > 127) {
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	785b      	ldrb	r3, [r3, #1]
 8000df0:	b25b      	sxtb	r3, r3
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	da01      	bge.n	8000dfa <AIC3X_WriteVolControl+0x30>
	return HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
 8000df8:	e032      	b.n	8000e60 <AIC3X_WriteVolControl+0x96>
}

uint8_t writeBuffer = 0;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	75fb      	strb	r3, [r7, #23]
if(reg == LDAC_VOL || reg == RDAC_VOL)
 8000dfe:	7afb      	ldrb	r3, [r7, #11]
 8000e00:	2b2b      	cmp	r3, #43	@ 0x2b
 8000e02:	d002      	beq.n	8000e0a <AIC3X_WriteVolControl+0x40>
 8000e04:	7afb      	ldrb	r3, [r7, #11]
 8000e06:	2b2c      	cmp	r3, #44	@ 0x2c
 8000e08:	d10b      	bne.n	8000e22 <AIC3X_WriteVolControl+0x58>
{
	writeBuffer |= pVolControl->Muted << 7;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	b25b      	sxtb	r3, r3
 8000e10:	01db      	lsls	r3, r3, #7
 8000e12:	b25a      	sxtb	r2, r3
 8000e14:	7dfb      	ldrb	r3, [r7, #23]
 8000e16:	b25b      	sxtb	r3, r3
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	b25b      	sxtb	r3, r3
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	75fb      	strb	r3, [r7, #23]
 8000e20:	e00d      	b.n	8000e3e <AIC3X_WriteVolControl+0x74>
}
else
{
	writeBuffer |= ((!pVolControl->Muted ) << 7) & AIC3X_VOL_MUTED_MASK ;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	f083 0301 	eor.w	r3, r3, #1
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <AIC3X_WriteVolControl+0x6a>
 8000e30:	2280      	movs	r2, #128	@ 0x80
 8000e32:	e000      	b.n	8000e36 <AIC3X_WriteVolControl+0x6c>
 8000e34:	2200      	movs	r2, #0
 8000e36:	7dfb      	ldrb	r3, [r7, #23]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	75fb      	strb	r3, [r7, #23]
}
writeBuffer |= pVolControl->Volume & AIC3X_VOL_MASK;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	785b      	ldrb	r3, [r3, #1]
 8000e42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000e46:	b2da      	uxtb	r2, r3
 8000e48:	7dfb      	ldrb	r3, [r7, #23]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	75fb      	strb	r3, [r7, #23]

return AIC3X_WriteData(haic3x, reg, (uint8_t*) &writeBuffer,
 8000e50:	f107 0217 	add.w	r2, r7, #23
 8000e54:	7af9      	ldrb	r1, [r7, #11]
 8000e56:	2301      	movs	r3, #1
 8000e58:	68f8      	ldr	r0, [r7, #12]
 8000e5a:	f7ff fd17 	bl	800088c <AIC3X_WriteData>
 8000e5e:	4603      	mov	r3, r0
		sizeof(writeBuffer));
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3718      	adds	r7, #24
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <AIC3X_WriteOutputLevelControl>:

return HAL_OK;
}

HAL_StatusTypeDef AIC3X_WriteOutputLevelControl(AIC3X_HandleTypeDef *haic3x,
	uint8_t reg, AIC3X_OutputLevelControl_TypeDef *pOutputLevelControl) {
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	460b      	mov	r3, r1
 8000e72:	607a      	str	r2, [r7, #4]
 8000e74:	72fb      	strb	r3, [r7, #11]
if (haic3x == NULL) {
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d101      	bne.n	8000e80 <AIC3X_WriteOutputLevelControl+0x18>
	return HAL_ERROR;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	e04a      	b.n	8000f16 <AIC3X_WriteOutputLevelControl+0xae>
}

if (pOutputLevelControl == NULL) {
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d101      	bne.n	8000e8a <AIC3X_WriteOutputLevelControl+0x22>
	return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	e045      	b.n	8000f16 <AIC3X_WriteOutputLevelControl+0xae>
}

if(pOutputLevelControl->Level > 9)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	2b09      	cmp	r3, #9
 8000e90:	d901      	bls.n	8000e96 <AIC3X_WriteOutputLevelControl+0x2e>
{
	return HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
 8000e94:	e03f      	b.n	8000f16 <AIC3X_WriteOutputLevelControl+0xae>
}

uint8_t writeBuffer = 0;
 8000e96:	2300      	movs	r3, #0
 8000e98:	75fb      	strb	r3, [r7, #23]

writeBuffer |= pOutputLevelControl->Level << 4;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	b25b      	sxtb	r3, r3
 8000ea0:	011b      	lsls	r3, r3, #4
 8000ea2:	b25a      	sxtb	r2, r3
 8000ea4:	7dfb      	ldrb	r3, [r7, #23]
 8000ea6:	b25b      	sxtb	r3, r3
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	b25b      	sxtb	r3, r3
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	75fb      	strb	r3, [r7, #23]
writeBuffer |= (!pOutputLevelControl->Muted) << 3;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	785b      	ldrb	r3, [r3, #1]
 8000eb4:	f083 0301 	eor.w	r3, r3, #1
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	b25b      	sxtb	r3, r3
 8000ebc:	00db      	lsls	r3, r3, #3
 8000ebe:	b25a      	sxtb	r2, r3
 8000ec0:	7dfb      	ldrb	r3, [r7, #23]
 8000ec2:	b25b      	sxtb	r3, r3
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	b25b      	sxtb	r3, r3
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	75fb      	strb	r3, [r7, #23]
writeBuffer |= pOutputLevelControl->PowerDownDriveControl << 2;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	789b      	ldrb	r3, [r3, #2]
 8000ed0:	b25b      	sxtb	r3, r3
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	b25a      	sxtb	r2, r3
 8000ed6:	7dfb      	ldrb	r3, [r7, #23]
 8000ed8:	b25b      	sxtb	r3, r3
 8000eda:	4313      	orrs	r3, r2
 8000edc:	b25b      	sxtb	r3, r3
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	75fb      	strb	r3, [r7, #23]
writeBuffer |= pOutputLevelControl->VolumeControlStatus << 1;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	78db      	ldrb	r3, [r3, #3]
 8000ee6:	b25b      	sxtb	r3, r3
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	b25a      	sxtb	r2, r3
 8000eec:	7dfb      	ldrb	r3, [r7, #23]
 8000eee:	b25b      	sxtb	r3, r3
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	b25b      	sxtb	r3, r3
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	75fb      	strb	r3, [r7, #23]
writeBuffer |= pOutputLevelControl->PowerControl;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	791b      	ldrb	r3, [r3, #4]
 8000efc:	461a      	mov	r2, r3
 8000efe:	7dfb      	ldrb	r3, [r7, #23]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	75fb      	strb	r3, [r7, #23]

return AIC3X_WriteData(haic3x, reg, (uint8_t*) &writeBuffer,
 8000f06:	f107 0217 	add.w	r2, r7, #23
 8000f0a:	7af9      	ldrb	r1, [r7, #11]
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	68f8      	ldr	r0, [r7, #12]
 8000f10:	f7ff fcbc 	bl	800088c <AIC3X_WriteData>
 8000f14:	4603      	mov	r3, r0
		sizeof(writeBuffer));
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3718      	adds	r7, #24
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
	...

08000f20 <ABUF_init>:
__attribute__((section(".audiobuffer"), aligned(8), used))
static ABUF_stereoBuffer_t ABUF_audioBuffers[AUDIO_STEREO_CHANNEL_COUNT];

ABUF_stereoBufferPtr_t ABUF_audioBufferPtrs[AUDIO_STEREO_CHANNEL_COUNT];

void ABUF_init(void){
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
	for(size_t i = 0;i<AUDIO_STEREO_CHANNEL_COUNT;i++){
 8000f26:	2300      	movs	r3, #0
 8000f28:	607b      	str	r3, [r7, #4]
 8000f2a:	e0ec      	b.n	8001106 <ABUF_init+0x1e6>
		for(size_t j = 0; j< AUDIO_BUFFER_LENGTH; j++){
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	603b      	str	r3, [r7, #0]
 8000f30:	e028      	b.n	8000f84 <ABUF_init+0x64>
			ABUF_audioBuffers[i].leftRx[j] = 0;
 8000f32:	497a      	ldr	r1, [pc, #488]	@ (800111c <ABUF_init+0x1fc>)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	029a      	lsls	r2, r3, #10
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			ABUF_audioBuffers[i].rightRx[j] = 0;
 8000f42:	4976      	ldr	r1, [pc, #472]	@ (800111c <ABUF_init+0x1fc>)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	029a      	lsls	r2, r3, #10
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000f50:	2200      	movs	r2, #0
 8000f52:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			ABUF_audioBuffers[i].leftTx[j] = 0;
 8000f56:	4971      	ldr	r1, [pc, #452]	@ (800111c <ABUF_init+0x1fc>)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	029a      	lsls	r2, r3, #10
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	4413      	add	r3, r2
 8000f60:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000f64:	2200      	movs	r2, #0
 8000f66:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			ABUF_audioBuffers[i].rightRx[j] = 0;
 8000f6a:	496c      	ldr	r1, [pc, #432]	@ (800111c <ABUF_init+0x1fc>)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	029a      	lsls	r2, r3, #10
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	4413      	add	r3, r2
 8000f74:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000f78:	2200      	movs	r2, #0
 8000f7a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(size_t j = 0; j< AUDIO_BUFFER_LENGTH; j++){
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	3301      	adds	r3, #1
 8000f82:	603b      	str	r3, [r7, #0]
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	2bff      	cmp	r3, #255	@ 0xff
 8000f88:	d9d3      	bls.n	8000f32 <ABUF_init+0x12>
		}
		ABUF_saiBufferPtrs[i].leftRxFirstHalf = &ABUF_saiBufferRx[i*2];
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	4a63      	ldr	r2, [pc, #396]	@ (8001120 <ABUF_init+0x200>)
 8000f92:	441a      	add	r2, r3
 8000f94:	4963      	ldr	r1, [pc, #396]	@ (8001124 <ABUF_init+0x204>)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	015b      	lsls	r3, r3, #5
 8000f9a:	440b      	add	r3, r1
 8000f9c:	601a      	str	r2, [r3, #0]
		ABUF_saiBufferPtrs[i].rightRxFirstHalf = &ABUF_saiBufferRx[i*2+1];
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	4a5e      	ldr	r2, [pc, #376]	@ (8001120 <ABUF_init+0x200>)
 8000fa8:	441a      	add	r2, r3
 8000faa:	495e      	ldr	r1, [pc, #376]	@ (8001124 <ABUF_init+0x204>)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	015b      	lsls	r3, r3, #5
 8000fb0:	440b      	add	r3, r1
 8000fb2:	3304      	adds	r3, #4
 8000fb4:	601a      	str	r2, [r3, #0]
		ABUF_saiBufferPtrs[i].leftRxSecHalf = &ABUF_saiBufferRx[SAI_BUFFER_LENGTH_HALF + i*2];
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	3380      	adds	r3, #128	@ 0x80
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	4a58      	ldr	r2, [pc, #352]	@ (8001120 <ABUF_init+0x200>)
 8000fc0:	441a      	add	r2, r3
 8000fc2:	4958      	ldr	r1, [pc, #352]	@ (8001124 <ABUF_init+0x204>)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	015b      	lsls	r3, r3, #5
 8000fc8:	440b      	add	r3, r1
 8000fca:	3308      	adds	r3, #8
 8000fcc:	601a      	str	r2, [r3, #0]
		ABUF_saiBufferPtrs[i].rightRxSecHalf = &ABUF_saiBufferRx[SAI_BUFFER_LENGTH_HALF + i*2 + 1];
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	f203 1301 	addw	r3, r3, #257	@ 0x101
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	4a51      	ldr	r2, [pc, #324]	@ (8001120 <ABUF_init+0x200>)
 8000fda:	441a      	add	r2, r3
 8000fdc:	4951      	ldr	r1, [pc, #324]	@ (8001124 <ABUF_init+0x204>)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	015b      	lsls	r3, r3, #5
 8000fe2:	440b      	add	r3, r1
 8000fe4:	330c      	adds	r3, #12
 8000fe6:	601a      	str	r2, [r3, #0]
		ABUF_saiBufferPtrs[i].leftTxFirstHalf = &ABUF_saiBufferTx[i*2];
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	4a4e      	ldr	r2, [pc, #312]	@ (8001128 <ABUF_init+0x208>)
 8000ff0:	441a      	add	r2, r3
 8000ff2:	494c      	ldr	r1, [pc, #304]	@ (8001124 <ABUF_init+0x204>)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	015b      	lsls	r3, r3, #5
 8000ff8:	440b      	add	r3, r1
 8000ffa:	3310      	adds	r3, #16
 8000ffc:	601a      	str	r2, [r3, #0]
		ABUF_saiBufferPtrs[i].rightTxFirstHalf = &ABUF_saiBufferTx[i*2+1];
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	3301      	adds	r3, #1
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	4a48      	ldr	r2, [pc, #288]	@ (8001128 <ABUF_init+0x208>)
 8001008:	441a      	add	r2, r3
 800100a:	4946      	ldr	r1, [pc, #280]	@ (8001124 <ABUF_init+0x204>)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	015b      	lsls	r3, r3, #5
 8001010:	440b      	add	r3, r1
 8001012:	3314      	adds	r3, #20
 8001014:	601a      	str	r2, [r3, #0]
		ABUF_saiBufferPtrs[i].leftTxSecHalf = &ABUF_saiBufferTx[SAI_BUFFER_LENGTH_HALF + i*2];
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	3380      	adds	r3, #128	@ 0x80
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	4a42      	ldr	r2, [pc, #264]	@ (8001128 <ABUF_init+0x208>)
 8001020:	441a      	add	r2, r3
 8001022:	4940      	ldr	r1, [pc, #256]	@ (8001124 <ABUF_init+0x204>)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	015b      	lsls	r3, r3, #5
 8001028:	440b      	add	r3, r1
 800102a:	3318      	adds	r3, #24
 800102c:	601a      	str	r2, [r3, #0]
		ABUF_saiBufferPtrs[i].rightTxSecHalf = &ABUF_saiBufferTx[SAI_BUFFER_LENGTH_HALF + i*2 + 1];
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	f203 1301 	addw	r3, r3, #257	@ 0x101
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	4a3b      	ldr	r2, [pc, #236]	@ (8001128 <ABUF_init+0x208>)
 800103a:	441a      	add	r2, r3
 800103c:	4939      	ldr	r1, [pc, #228]	@ (8001124 <ABUF_init+0x204>)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	015b      	lsls	r3, r3, #5
 8001042:	440b      	add	r3, r1
 8001044:	331c      	adds	r3, #28
 8001046:	601a      	str	r2, [r3, #0]

		ABUF_audioBufferPtrs[i].leftRxFirstHalf = &ABUF_audioBuffers[i].leftRx[0];
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	02db      	lsls	r3, r3, #11
 800104c:	4a33      	ldr	r2, [pc, #204]	@ (800111c <ABUF_init+0x1fc>)
 800104e:	441a      	add	r2, r3
 8001050:	4936      	ldr	r1, [pc, #216]	@ (800112c <ABUF_init+0x20c>)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	015b      	lsls	r3, r3, #5
 8001056:	440b      	add	r3, r1
 8001058:	601a      	str	r2, [r3, #0]
		ABUF_audioBufferPtrs[i].rightRxFirstHalf = &ABUF_audioBuffers[i].rightRx[0];
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	02db      	lsls	r3, r3, #11
 800105e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001062:	4a2e      	ldr	r2, [pc, #184]	@ (800111c <ABUF_init+0x1fc>)
 8001064:	441a      	add	r2, r3
 8001066:	4931      	ldr	r1, [pc, #196]	@ (800112c <ABUF_init+0x20c>)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	015b      	lsls	r3, r3, #5
 800106c:	440b      	add	r3, r1
 800106e:	3304      	adds	r3, #4
 8001070:	601a      	str	r2, [r3, #0]
		ABUF_audioBufferPtrs[i].leftRxSecHalf = &ABUF_audioBuffers[i].leftRx[AUDIO_BUFFER_LENGTH];
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	02db      	lsls	r3, r3, #11
 8001076:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800107a:	4a28      	ldr	r2, [pc, #160]	@ (800111c <ABUF_init+0x1fc>)
 800107c:	441a      	add	r2, r3
 800107e:	492b      	ldr	r1, [pc, #172]	@ (800112c <ABUF_init+0x20c>)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	015b      	lsls	r3, r3, #5
 8001084:	440b      	add	r3, r1
 8001086:	3308      	adds	r3, #8
 8001088:	601a      	str	r2, [r3, #0]
		ABUF_audioBufferPtrs[i].rightRxSecHalf = &ABUF_audioBuffers[i].rightRx[AUDIO_BUFFER_LENGTH];
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	02db      	lsls	r3, r3, #11
 800108e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001092:	4a22      	ldr	r2, [pc, #136]	@ (800111c <ABUF_init+0x1fc>)
 8001094:	441a      	add	r2, r3
 8001096:	4925      	ldr	r1, [pc, #148]	@ (800112c <ABUF_init+0x20c>)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	015b      	lsls	r3, r3, #5
 800109c:	440b      	add	r3, r1
 800109e:	330c      	adds	r3, #12
 80010a0:	601a      	str	r2, [r3, #0]
		ABUF_audioBufferPtrs[i].leftTxFirstHalf = &ABUF_audioBuffers[i].leftTx[0];
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	02db      	lsls	r3, r3, #11
 80010a6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80010aa:	4a1c      	ldr	r2, [pc, #112]	@ (800111c <ABUF_init+0x1fc>)
 80010ac:	441a      	add	r2, r3
 80010ae:	491f      	ldr	r1, [pc, #124]	@ (800112c <ABUF_init+0x20c>)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	015b      	lsls	r3, r3, #5
 80010b4:	440b      	add	r3, r1
 80010b6:	3310      	adds	r3, #16
 80010b8:	601a      	str	r2, [r3, #0]
		ABUF_audioBufferPtrs[i].rightTxFirstHalf = &ABUF_audioBuffers[i].rightTx[0];
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	02db      	lsls	r3, r3, #11
 80010be:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 80010c2:	4a16      	ldr	r2, [pc, #88]	@ (800111c <ABUF_init+0x1fc>)
 80010c4:	441a      	add	r2, r3
 80010c6:	4919      	ldr	r1, [pc, #100]	@ (800112c <ABUF_init+0x20c>)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	015b      	lsls	r3, r3, #5
 80010cc:	440b      	add	r3, r1
 80010ce:	3314      	adds	r3, #20
 80010d0:	601a      	str	r2, [r3, #0]
		ABUF_audioBufferPtrs[i].leftTxSecHalf = &ABUF_audioBuffers[i].leftTx[AUDIO_BUFFER_LENGTH];
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	02db      	lsls	r3, r3, #11
 80010d6:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 80010da:	4a10      	ldr	r2, [pc, #64]	@ (800111c <ABUF_init+0x1fc>)
 80010dc:	441a      	add	r2, r3
 80010de:	4913      	ldr	r1, [pc, #76]	@ (800112c <ABUF_init+0x20c>)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	015b      	lsls	r3, r3, #5
 80010e4:	440b      	add	r3, r1
 80010e6:	3318      	adds	r3, #24
 80010e8:	601a      	str	r2, [r3, #0]
		ABUF_audioBufferPtrs[i].rightTxSecHalf = &ABUF_audioBuffers[i].rightTx[AUDIO_BUFFER_LENGTH];
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	3301      	adds	r3, #1
 80010ee:	02db      	lsls	r3, r3, #11
 80010f0:	4a0a      	ldr	r2, [pc, #40]	@ (800111c <ABUF_init+0x1fc>)
 80010f2:	441a      	add	r2, r3
 80010f4:	490d      	ldr	r1, [pc, #52]	@ (800112c <ABUF_init+0x20c>)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	015b      	lsls	r3, r3, #5
 80010fa:	440b      	add	r3, r1
 80010fc:	331c      	adds	r3, #28
 80010fe:	601a      	str	r2, [r3, #0]
	for(size_t i = 0;i<AUDIO_STEREO_CHANNEL_COUNT;i++){
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	3301      	adds	r3, #1
 8001104:	607b      	str	r3, [r7, #4]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2b00      	cmp	r3, #0
 800110a:	f43f af0f 	beq.w	8000f2c <ABUF_init+0xc>


	}
}
 800110e:	bf00      	nop
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	20000000 	.word	0x20000000
 8001120:	24000030 	.word	0x24000030
 8001124:	24000830 	.word	0x24000830
 8001128:	24000430 	.word	0x24000430
 800112c:	24000850 	.word	0x24000850

08001130 <ASTAT_init>:

volatile bool ASTAT_isRxTransferComplete = false;
volatile bool ASTAT_isTxTransferComplete = false;

void ASTAT_init(MDMA_HandleTypeDef *hmdma_rx, MDMA_HandleTypeDef *hmdma_tx)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
	ASTAT_hmdmaRxInstance = hmdma_rx;
 800113a:	4a06      	ldr	r2, [pc, #24]	@ (8001154 <ASTAT_init+0x24>)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6013      	str	r3, [r2, #0]
	ASTAT_hmdmaTxInstance = hmdma_tx;
 8001140:	4a05      	ldr	r2, [pc, #20]	@ (8001158 <ASTAT_init+0x28>)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	6013      	str	r3, [r2, #0]

	ASTAT_reset();
 8001146:	f000 f809 	bl	800115c <ASTAT_reset>
}
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	2400087c 	.word	0x2400087c
 8001158:	24000880 	.word	0x24000880

0800115c <ASTAT_reset>:

void ASTAT_reset(void)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
	for (size_t i = 0; i < AUDIO_STEREO_CHANNEL_COUNT; i++)
 8001162:	2300      	movs	r3, #0
 8001164:	607b      	str	r3, [r7, #4]
 8001166:	e01e      	b.n	80011a6 <ASTAT_reset+0x4a>
	{
		ASTAT_rxStatus[i] = 0;
 8001168:	4a15      	ldr	r2, [pc, #84]	@ (80011c0 <ASTAT_reset+0x64>)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4413      	add	r3, r2
 800116e:	2200      	movs	r2, #0
 8001170:	701a      	strb	r2, [r3, #0]
		ASTAT_dspStatus[i] = 0;
 8001172:	4a14      	ldr	r2, [pc, #80]	@ (80011c4 <ASTAT_reset+0x68>)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4413      	add	r3, r2
 8001178:	2200      	movs	r2, #0
 800117a:	701a      	strb	r2, [r3, #0]
		ASTAT_txStatus[i] = 0;
 800117c:	4a12      	ldr	r2, [pc, #72]	@ (80011c8 <ASTAT_reset+0x6c>)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4413      	add	r3, r2
 8001182:	2200      	movs	r2, #0
 8001184:	701a      	strb	r2, [r3, #0]

		SET_BIT(ASTAT_rxStatus[i], AUDIO_STATUS_L_HALF_PENDING);
 8001186:	4a0e      	ldr	r2, [pc, #56]	@ (80011c0 <ASTAT_reset+0x64>)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	4413      	add	r3, r2
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	b2db      	uxtb	r3, r3
 8001190:	f043 0301 	orr.w	r3, r3, #1
 8001194:	b2d9      	uxtb	r1, r3
 8001196:	4a0a      	ldr	r2, [pc, #40]	@ (80011c0 <ASTAT_reset+0x64>)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	4413      	add	r3, r2
 800119c:	460a      	mov	r2, r1
 800119e:	701a      	strb	r2, [r3, #0]
	for (size_t i = 0; i < AUDIO_STEREO_CHANNEL_COUNT; i++)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	3301      	adds	r3, #1
 80011a4:	607b      	str	r3, [r7, #4]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d0dd      	beq.n	8001168 <ASTAT_reset+0xc>
	}

	ASTAT_saiStatus = 0;
 80011ac:	4b07      	ldr	r3, [pc, #28]	@ (80011cc <ASTAT_reset+0x70>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	701a      	strb	r2, [r3, #0]

}
 80011b2:	bf00      	nop
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	24000870 	.word	0x24000870
 80011c4:	24000874 	.word	0x24000874
 80011c8:	24000878 	.word	0x24000878
 80011cc:	24000879 	.word	0x24000879

080011d0 <ASTAT_rxXferRequestHandler>:

void ASTAT_rxXferRequestHandler(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0

	for (size_t i = 0; i < AUDIO_STEREO_CHANNEL_COUNT; i++)
 80011d6:	2300      	movs	r3, #0
 80011d8:	607b      	str	r3, [r7, #4]
 80011da:	e0c7      	b.n	800136c <ASTAT_rxXferRequestHandler+0x19c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011dc:	b672      	cpsid	i
}
 80011de:	bf00      	nop
	{

		__disable_irq();

		if (READ_BIT(ASTAT_saiStatus,
 80011e0:	4b67      	ldr	r3, [pc, #412]	@ (8001380 <ASTAT_rxXferRequestHandler+0x1b0>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	f003 0302 	and.w	r3, r3, #2
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d019      	beq.n	8001222 <ASTAT_rxXferRequestHandler+0x52>
				SAI_STATUS_RX_HALF_CPLT) && READ_BIT(ASTAT_rxStatus[i], AUDIO_STATUS_L_HALF_PENDING) == false
 80011ee:	4a65      	ldr	r2, [pc, #404]	@ (8001384 <ASTAT_rxXferRequestHandler+0x1b4>)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	4413      	add	r3, r2
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	f003 0301 	and.w	r3, r3, #1
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d110      	bne.n	8001222 <ASTAT_rxXferRequestHandler+0x52>
				&& READ_BIT(ASTAT_rxStatus[i], AUDIO_STATUS_L_HALF_CPLT) == false)
 8001200:	4a60      	ldr	r2, [pc, #384]	@ (8001384 <ASTAT_rxXferRequestHandler+0x1b4>)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4413      	add	r3, r2
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	b2db      	uxtb	r3, r3
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	2b00      	cmp	r3, #0
 8001210:	d107      	bne.n	8001222 <ASTAT_rxXferRequestHandler+0x52>
  __ASM volatile ("cpsie i" : : : "memory");
 8001212:	b662      	cpsie	i
}
 8001214:	bf00      	nop
		{
			//TODO Check if previous TX was completed
			__enable_irq();

			HAL_MDMA_GenerateSWRequest(ASTAT_hmdmaRxInstance);
 8001216:	4b5c      	ldr	r3, [pc, #368]	@ (8001388 <ASTAT_rxXferRequestHandler+0x1b8>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4618      	mov	r0, r3
 800121c:	f005 ffb5 	bl	800718a <HAL_MDMA_GenerateSWRequest>
 8001220:	e0a1      	b.n	8001366 <ASTAT_rxXferRequestHandler+0x196>

		}
		else if (READ_BIT(ASTAT_rxStatus[i],
 8001222:	4a58      	ldr	r2, [pc, #352]	@ (8001384 <ASTAT_rxXferRequestHandler+0x1b4>)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	4413      	add	r3, r2
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	b2db      	uxtb	r3, r3
 800122c:	f003 0302 	and.w	r3, r3, #2
 8001230:	2b00      	cmp	r3, #0
 8001232:	d026      	beq.n	8001282 <ASTAT_rxXferRequestHandler+0xb2>
				AUDIO_STATUS_L_HALF_CPLT) && READ_BIT(ASTAT_rxStatus[i], AUDIO_STATUS_R_HALF_PENDING) == false
 8001234:	4a53      	ldr	r2, [pc, #332]	@ (8001384 <ASTAT_rxXferRequestHandler+0x1b4>)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4413      	add	r3, r2
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	b2db      	uxtb	r3, r3
 800123e:	f003 0304 	and.w	r3, r3, #4
 8001242:	2b00      	cmp	r3, #0
 8001244:	d11d      	bne.n	8001282 <ASTAT_rxXferRequestHandler+0xb2>
				&& READ_BIT(ASTAT_rxStatus[i], AUDIO_STATUS_R_HALF_CPLT) == false)
 8001246:	4a4f      	ldr	r2, [pc, #316]	@ (8001384 <ASTAT_rxXferRequestHandler+0x1b4>)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	4413      	add	r3, r2
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	b2db      	uxtb	r3, r3
 8001250:	f003 0308 	and.w	r3, r3, #8
 8001254:	2b00      	cmp	r3, #0
 8001256:	d114      	bne.n	8001282 <ASTAT_rxXferRequestHandler+0xb2>
  __ASM volatile ("cpsie i" : : : "memory");
 8001258:	b662      	cpsie	i
}
 800125a:	bf00      	nop
		{
			__enable_irq();

			SET_BIT(ASTAT_rxStatus[i], AUDIO_STATUS_R_HALF_PENDING);
 800125c:	4a49      	ldr	r2, [pc, #292]	@ (8001384 <ASTAT_rxXferRequestHandler+0x1b4>)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4413      	add	r3, r2
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	b2db      	uxtb	r3, r3
 8001266:	f043 0304 	orr.w	r3, r3, #4
 800126a:	b2d9      	uxtb	r1, r3
 800126c:	4a45      	ldr	r2, [pc, #276]	@ (8001384 <ASTAT_rxXferRequestHandler+0x1b4>)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4413      	add	r3, r2
 8001272:	460a      	mov	r2, r1
 8001274:	701a      	strb	r2, [r3, #0]

			HAL_MDMA_GenerateSWRequest(ASTAT_hmdmaRxInstance);
 8001276:	4b44      	ldr	r3, [pc, #272]	@ (8001388 <ASTAT_rxXferRequestHandler+0x1b8>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4618      	mov	r0, r3
 800127c:	f005 ff85 	bl	800718a <HAL_MDMA_GenerateSWRequest>
 8001280:	e071      	b.n	8001366 <ASTAT_rxXferRequestHandler+0x196>
		}
		else if (READ_BIT(ASTAT_saiStatus,
 8001282:	4b3f      	ldr	r3, [pc, #252]	@ (8001380 <ASTAT_rxXferRequestHandler+0x1b0>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	b2db      	uxtb	r3, r3
 8001288:	f003 0308 	and.w	r3, r3, #8
 800128c:	2b00      	cmp	r3, #0
 800128e:	d039      	beq.n	8001304 <ASTAT_rxXferRequestHandler+0x134>
				SAI_STATUS_RX_FULL_CPLT) && READ_BIT(ASTAT_rxStatus[i], AUDIO_STATUS_L_PENDING) == false
 8001290:	4a3c      	ldr	r2, [pc, #240]	@ (8001384 <ASTAT_rxXferRequestHandler+0x1b4>)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4413      	add	r3, r2
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	b2db      	uxtb	r3, r3
 800129a:	f003 0310 	and.w	r3, r3, #16
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d130      	bne.n	8001304 <ASTAT_rxXferRequestHandler+0x134>
				&& READ_BIT(ASTAT_rxStatus[i], AUDIO_STATUS_L_CPLT) == false)
 80012a2:	4a38      	ldr	r2, [pc, #224]	@ (8001384 <ASTAT_rxXferRequestHandler+0x1b4>)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	4413      	add	r3, r2
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	f003 0320 	and.w	r3, r3, #32
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d127      	bne.n	8001304 <ASTAT_rxXferRequestHandler+0x134>
  __ASM volatile ("cpsie i" : : : "memory");
 80012b4:	b662      	cpsie	i
}
 80012b6:	bf00      	nop
		{
			//TODO Check if previous TX was completed
			__enable_irq();

			if (READ_BIT(ASTAT_txStatus[i], AUDIO_STATUS_L_HALF_CPLT) == false
 80012b8:	4a34      	ldr	r2, [pc, #208]	@ (800138c <ASTAT_rxXferRequestHandler+0x1bc>)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4413      	add	r3, r2
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	f003 0302 	and.w	r3, r3, #2
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d109      	bne.n	80012de <ASTAT_rxXferRequestHandler+0x10e>
					&& READ_BIT(ASTAT_txStatus[i], AUDIO_STATUS_R_HALF_CPLT)
 80012ca:	4a30      	ldr	r2, [pc, #192]	@ (800138c <ASTAT_rxXferRequestHandler+0x1bc>)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4413      	add	r3, r2
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	f003 0308 	and.w	r3, r3, #8
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d100      	bne.n	80012de <ASTAT_rxXferRequestHandler+0x10e>
							== false)
			{
				__BKPT();
 80012dc:	be00      	bkpt	0x0000
			}
			SET_BIT(ASTAT_rxStatus[i], AUDIO_STATUS_L_PENDING);
 80012de:	4a29      	ldr	r2, [pc, #164]	@ (8001384 <ASTAT_rxXferRequestHandler+0x1b4>)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4413      	add	r3, r2
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	f043 0310 	orr.w	r3, r3, #16
 80012ec:	b2d9      	uxtb	r1, r3
 80012ee:	4a25      	ldr	r2, [pc, #148]	@ (8001384 <ASTAT_rxXferRequestHandler+0x1b4>)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4413      	add	r3, r2
 80012f4:	460a      	mov	r2, r1
 80012f6:	701a      	strb	r2, [r3, #0]

			HAL_MDMA_GenerateSWRequest(ASTAT_hmdmaRxInstance);
 80012f8:	4b23      	ldr	r3, [pc, #140]	@ (8001388 <ASTAT_rxXferRequestHandler+0x1b8>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f005 ff44 	bl	800718a <HAL_MDMA_GenerateSWRequest>
 8001302:	e030      	b.n	8001366 <ASTAT_rxXferRequestHandler+0x196>
		}
		else if (READ_BIT(ASTAT_rxStatus[i],
 8001304:	4a1f      	ldr	r2, [pc, #124]	@ (8001384 <ASTAT_rxXferRequestHandler+0x1b4>)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4413      	add	r3, r2
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	b2db      	uxtb	r3, r3
 800130e:	f003 0320 	and.w	r3, r3, #32
 8001312:	2b00      	cmp	r3, #0
 8001314:	d025      	beq.n	8001362 <ASTAT_rxXferRequestHandler+0x192>
				AUDIO_STATUS_L_CPLT) && READ_BIT(ASTAT_rxStatus[i], AUDIO_STATUS_R_PENDING) == false
 8001316:	4a1b      	ldr	r2, [pc, #108]	@ (8001384 <ASTAT_rxXferRequestHandler+0x1b4>)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4413      	add	r3, r2
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	b2db      	uxtb	r3, r3
 8001320:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001324:	2b00      	cmp	r3, #0
 8001326:	d11c      	bne.n	8001362 <ASTAT_rxXferRequestHandler+0x192>
				&& READ_BIT(ASTAT_rxStatus[i], AUDIO_STATUS_R_CPLT) == false)
 8001328:	4a16      	ldr	r2, [pc, #88]	@ (8001384 <ASTAT_rxXferRequestHandler+0x1b4>)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4413      	add	r3, r2
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	b2db      	uxtb	r3, r3
 8001332:	b25b      	sxtb	r3, r3
 8001334:	2b00      	cmp	r3, #0
 8001336:	db14      	blt.n	8001362 <ASTAT_rxXferRequestHandler+0x192>
  __ASM volatile ("cpsie i" : : : "memory");
 8001338:	b662      	cpsie	i
}
 800133a:	bf00      	nop
		{
			__enable_irq();

			SET_BIT(ASTAT_rxStatus[i], AUDIO_STATUS_R_PENDING);
 800133c:	4a11      	ldr	r2, [pc, #68]	@ (8001384 <ASTAT_rxXferRequestHandler+0x1b4>)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4413      	add	r3, r2
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	b2db      	uxtb	r3, r3
 8001346:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800134a:	b2d9      	uxtb	r1, r3
 800134c:	4a0d      	ldr	r2, [pc, #52]	@ (8001384 <ASTAT_rxXferRequestHandler+0x1b4>)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4413      	add	r3, r2
 8001352:	460a      	mov	r2, r1
 8001354:	701a      	strb	r2, [r3, #0]

			HAL_MDMA_GenerateSWRequest(ASTAT_hmdmaRxInstance);
 8001356:	4b0c      	ldr	r3, [pc, #48]	@ (8001388 <ASTAT_rxXferRequestHandler+0x1b8>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4618      	mov	r0, r3
 800135c:	f005 ff15 	bl	800718a <HAL_MDMA_GenerateSWRequest>
 8001360:	e001      	b.n	8001366 <ASTAT_rxXferRequestHandler+0x196>
  __ASM volatile ("cpsie i" : : : "memory");
 8001362:	b662      	cpsie	i
}
 8001364:	bf00      	nop
	for (size_t i = 0; i < AUDIO_STEREO_CHANNEL_COUNT; i++)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	3301      	adds	r3, #1
 800136a:	607b      	str	r3, [r7, #4]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2b00      	cmp	r3, #0
 8001370:	f43f af34 	beq.w	80011dc <ASTAT_rxXferRequestHandler+0xc>
		else
		{
			__enable_irq();
		}
	}
}
 8001374:	bf00      	nop
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	24000879 	.word	0x24000879
 8001384:	24000870 	.word	0x24000870
 8001388:	2400087c 	.word	0x2400087c
 800138c:	24000878 	.word	0x24000878

08001390 <ASTAT_DspRequestHandler>:

void ASTAT_DspRequestHandler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
	for (size_t i = 0; i < AUDIO_STEREO_CHANNEL_COUNT; i++)
 8001396:	2300      	movs	r3, #0
 8001398:	607b      	str	r3, [r7, #4]
 800139a:	e0e4      	b.n	8001566 <ASTAT_DspRequestHandler+0x1d6>
  __ASM volatile ("cpsid i" : : : "memory");
 800139c:	b672      	cpsid	i
}
 800139e:	bf00      	nop
	{

		__disable_irq();
		if (READ_BIT(ASTAT_rxStatus[i],
 80013a0:	4a76      	ldr	r2, [pc, #472]	@ (800157c <ASTAT_DspRequestHandler+0x1ec>)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4413      	add	r3, r2
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	f003 0302 	and.w	r3, r3, #2
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d02e      	beq.n	8001410 <ASTAT_DspRequestHandler+0x80>
				AUDIO_STATUS_L_HALF_CPLT) && READ_BIT(ASTAT_dspStatus[i], AUDIO_STATUS_L_HALF_PENDING) == false
 80013b2:	4a73      	ldr	r2, [pc, #460]	@ (8001580 <ASTAT_DspRequestHandler+0x1f0>)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	4413      	add	r3, r2
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	f003 0301 	and.w	r3, r3, #1
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d125      	bne.n	8001410 <ASTAT_DspRequestHandler+0x80>
				&& READ_BIT(ASTAT_dspStatus[i], AUDIO_STATUS_L_HALF_CPLT) == false)
 80013c4:	4a6e      	ldr	r2, [pc, #440]	@ (8001580 <ASTAT_DspRequestHandler+0x1f0>)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4413      	add	r3, r2
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d11c      	bne.n	8001410 <ASTAT_DspRequestHandler+0x80>
  __ASM volatile ("cpsie i" : : : "memory");
 80013d6:	b662      	cpsie	i
}
 80013d8:	bf00      	nop
		{
			__enable_irq();
			SET_BIT(ASTAT_dspStatus[i], AUDIO_STATUS_L_HALF_PENDING);
 80013da:	4a69      	ldr	r2, [pc, #420]	@ (8001580 <ASTAT_DspRequestHandler+0x1f0>)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4413      	add	r3, r2
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	f043 0301 	orr.w	r3, r3, #1
 80013e8:	b2d9      	uxtb	r1, r3
 80013ea:	4a65      	ldr	r2, [pc, #404]	@ (8001580 <ASTAT_DspRequestHandler+0x1f0>)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	4413      	add	r3, r2
 80013f0:	460a      	mov	r2, r1
 80013f2:	701a      	strb	r2, [r3, #0]
			CLEAR_BIT(ASTAT_dspStatus[i], AUDIO_STATUS_L_HALF_CPLT);
 80013f4:	4a62      	ldr	r2, [pc, #392]	@ (8001580 <ASTAT_DspRequestHandler+0x1f0>)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4413      	add	r3, r2
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	f023 0302 	bic.w	r3, r3, #2
 8001402:	b2d9      	uxtb	r1, r3
 8001404:	4a5e      	ldr	r2, [pc, #376]	@ (8001580 <ASTAT_DspRequestHandler+0x1f0>)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4413      	add	r3, r2
 800140a:	460a      	mov	r2, r1
 800140c:	701a      	strb	r2, [r3, #0]
 800140e:	e0a7      	b.n	8001560 <ASTAT_DspRequestHandler+0x1d0>

		}
		else if (READ_BIT(ASTAT_rxStatus[i],
 8001410:	4a5a      	ldr	r2, [pc, #360]	@ (800157c <ASTAT_DspRequestHandler+0x1ec>)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4413      	add	r3, r2
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	b2db      	uxtb	r3, r3
 800141a:	f003 0308 	and.w	r3, r3, #8
 800141e:	2b00      	cmp	r3, #0
 8001420:	d02e      	beq.n	8001480 <ASTAT_DspRequestHandler+0xf0>
				AUDIO_STATUS_R_HALF_CPLT) && READ_BIT(ASTAT_dspStatus[i], AUDIO_STATUS_R_HALF_PENDING) == false
 8001422:	4a57      	ldr	r2, [pc, #348]	@ (8001580 <ASTAT_DspRequestHandler+0x1f0>)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4413      	add	r3, r2
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	b2db      	uxtb	r3, r3
 800142c:	f003 0304 	and.w	r3, r3, #4
 8001430:	2b00      	cmp	r3, #0
 8001432:	d125      	bne.n	8001480 <ASTAT_DspRequestHandler+0xf0>
				&& READ_BIT(ASTAT_dspStatus[i], AUDIO_STATUS_R_HALF_CPLT) == false)
 8001434:	4a52      	ldr	r2, [pc, #328]	@ (8001580 <ASTAT_DspRequestHandler+0x1f0>)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4413      	add	r3, r2
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	b2db      	uxtb	r3, r3
 800143e:	f003 0308 	and.w	r3, r3, #8
 8001442:	2b00      	cmp	r3, #0
 8001444:	d11c      	bne.n	8001480 <ASTAT_DspRequestHandler+0xf0>
  __ASM volatile ("cpsie i" : : : "memory");
 8001446:	b662      	cpsie	i
}
 8001448:	bf00      	nop
		{
			__enable_irq();

			SET_BIT(ASTAT_dspStatus[i], AUDIO_STATUS_R_HALF_PENDING);
 800144a:	4a4d      	ldr	r2, [pc, #308]	@ (8001580 <ASTAT_DspRequestHandler+0x1f0>)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	4413      	add	r3, r2
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	b2db      	uxtb	r3, r3
 8001454:	f043 0304 	orr.w	r3, r3, #4
 8001458:	b2d9      	uxtb	r1, r3
 800145a:	4a49      	ldr	r2, [pc, #292]	@ (8001580 <ASTAT_DspRequestHandler+0x1f0>)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	4413      	add	r3, r2
 8001460:	460a      	mov	r2, r1
 8001462:	701a      	strb	r2, [r3, #0]
			CLEAR_BIT(ASTAT_dspStatus[i], AUDIO_STATUS_R_HALF_CPLT);
 8001464:	4a46      	ldr	r2, [pc, #280]	@ (8001580 <ASTAT_DspRequestHandler+0x1f0>)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4413      	add	r3, r2
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	b2db      	uxtb	r3, r3
 800146e:	f023 0308 	bic.w	r3, r3, #8
 8001472:	b2d9      	uxtb	r1, r3
 8001474:	4a42      	ldr	r2, [pc, #264]	@ (8001580 <ASTAT_DspRequestHandler+0x1f0>)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4413      	add	r3, r2
 800147a:	460a      	mov	r2, r1
 800147c:	701a      	strb	r2, [r3, #0]
 800147e:	e06f      	b.n	8001560 <ASTAT_DspRequestHandler+0x1d0>

		}
		else if (READ_BIT(ASTAT_rxStatus[i],
 8001480:	4a3e      	ldr	r2, [pc, #248]	@ (800157c <ASTAT_DspRequestHandler+0x1ec>)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4413      	add	r3, r2
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	b2db      	uxtb	r3, r3
 800148a:	f003 0320 	and.w	r3, r3, #32
 800148e:	2b00      	cmp	r3, #0
 8001490:	d02e      	beq.n	80014f0 <ASTAT_DspRequestHandler+0x160>
				AUDIO_STATUS_L_CPLT) && READ_BIT(ASTAT_dspStatus[i], AUDIO_STATUS_L_PENDING) == false
 8001492:	4a3b      	ldr	r2, [pc, #236]	@ (8001580 <ASTAT_DspRequestHandler+0x1f0>)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4413      	add	r3, r2
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	b2db      	uxtb	r3, r3
 800149c:	f003 0310 	and.w	r3, r3, #16
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d125      	bne.n	80014f0 <ASTAT_DspRequestHandler+0x160>
				&& READ_BIT(ASTAT_dspStatus[i], AUDIO_STATUS_L_CPLT) == false)
 80014a4:	4a36      	ldr	r2, [pc, #216]	@ (8001580 <ASTAT_DspRequestHandler+0x1f0>)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4413      	add	r3, r2
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	f003 0320 	and.w	r3, r3, #32
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d11c      	bne.n	80014f0 <ASTAT_DspRequestHandler+0x160>
  __ASM volatile ("cpsie i" : : : "memory");
 80014b6:	b662      	cpsie	i
}
 80014b8:	bf00      	nop
		{
			__enable_irq();

			SET_BIT(ASTAT_dspStatus[i], AUDIO_STATUS_L_PENDING);
 80014ba:	4a31      	ldr	r2, [pc, #196]	@ (8001580 <ASTAT_DspRequestHandler+0x1f0>)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	4413      	add	r3, r2
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	f043 0310 	orr.w	r3, r3, #16
 80014c8:	b2d9      	uxtb	r1, r3
 80014ca:	4a2d      	ldr	r2, [pc, #180]	@ (8001580 <ASTAT_DspRequestHandler+0x1f0>)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	4413      	add	r3, r2
 80014d0:	460a      	mov	r2, r1
 80014d2:	701a      	strb	r2, [r3, #0]
			CLEAR_BIT(ASTAT_dspStatus[i], AUDIO_STATUS_L_CPLT);
 80014d4:	4a2a      	ldr	r2, [pc, #168]	@ (8001580 <ASTAT_DspRequestHandler+0x1f0>)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4413      	add	r3, r2
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	f023 0320 	bic.w	r3, r3, #32
 80014e2:	b2d9      	uxtb	r1, r3
 80014e4:	4a26      	ldr	r2, [pc, #152]	@ (8001580 <ASTAT_DspRequestHandler+0x1f0>)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4413      	add	r3, r2
 80014ea:	460a      	mov	r2, r1
 80014ec:	701a      	strb	r2, [r3, #0]
 80014ee:	e037      	b.n	8001560 <ASTAT_DspRequestHandler+0x1d0>

		}
		else if (READ_BIT(ASTAT_rxStatus[i],
 80014f0:	4a22      	ldr	r2, [pc, #136]	@ (800157c <ASTAT_DspRequestHandler+0x1ec>)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4413      	add	r3, r2
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	b25b      	sxtb	r3, r3
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	da2d      	bge.n	800155c <ASTAT_DspRequestHandler+0x1cc>
				AUDIO_STATUS_R_CPLT) && READ_BIT(ASTAT_dspStatus[i], AUDIO_STATUS_R_PENDING) == false
 8001500:	4a1f      	ldr	r2, [pc, #124]	@ (8001580 <ASTAT_DspRequestHandler+0x1f0>)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4413      	add	r3, r2
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	b2db      	uxtb	r3, r3
 800150a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800150e:	2b00      	cmp	r3, #0
 8001510:	d124      	bne.n	800155c <ASTAT_DspRequestHandler+0x1cc>
				&& READ_BIT(ASTAT_dspStatus[i], AUDIO_STATUS_R_CPLT) == false)
 8001512:	4a1b      	ldr	r2, [pc, #108]	@ (8001580 <ASTAT_DspRequestHandler+0x1f0>)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	4413      	add	r3, r2
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	b2db      	uxtb	r3, r3
 800151c:	b25b      	sxtb	r3, r3
 800151e:	2b00      	cmp	r3, #0
 8001520:	db1c      	blt.n	800155c <ASTAT_DspRequestHandler+0x1cc>
  __ASM volatile ("cpsie i" : : : "memory");
 8001522:	b662      	cpsie	i
}
 8001524:	bf00      	nop
		{
			__enable_irq();

			SET_BIT(ASTAT_dspStatus[i], AUDIO_STATUS_R_PENDING);
 8001526:	4a16      	ldr	r2, [pc, #88]	@ (8001580 <ASTAT_DspRequestHandler+0x1f0>)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	4413      	add	r3, r2
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	b2db      	uxtb	r3, r3
 8001530:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001534:	b2d9      	uxtb	r1, r3
 8001536:	4a12      	ldr	r2, [pc, #72]	@ (8001580 <ASTAT_DspRequestHandler+0x1f0>)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	4413      	add	r3, r2
 800153c:	460a      	mov	r2, r1
 800153e:	701a      	strb	r2, [r3, #0]
			CLEAR_BIT(ASTAT_dspStatus[i], AUDIO_STATUS_R_CPLT);
 8001540:	4a0f      	ldr	r2, [pc, #60]	@ (8001580 <ASTAT_DspRequestHandler+0x1f0>)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4413      	add	r3, r2
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	b2db      	uxtb	r3, r3
 800154a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800154e:	b2d9      	uxtb	r1, r3
 8001550:	4a0b      	ldr	r2, [pc, #44]	@ (8001580 <ASTAT_DspRequestHandler+0x1f0>)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4413      	add	r3, r2
 8001556:	460a      	mov	r2, r1
 8001558:	701a      	strb	r2, [r3, #0]
 800155a:	e001      	b.n	8001560 <ASTAT_DspRequestHandler+0x1d0>
  __ASM volatile ("cpsie i" : : : "memory");
 800155c:	b662      	cpsie	i
}
 800155e:	bf00      	nop
	for (size_t i = 0; i < AUDIO_STEREO_CHANNEL_COUNT; i++)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	3301      	adds	r3, #1
 8001564:	607b      	str	r3, [r7, #4]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2b00      	cmp	r3, #0
 800156a:	f43f af17 	beq.w	800139c <ASTAT_DspRequestHandler+0xc>
		else
		{
			__enable_irq();
		}
	}
}
 800156e:	bf00      	nop
 8001570:	bf00      	nop
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	24000870 	.word	0x24000870
 8001580:	24000874 	.word	0x24000874

08001584 <ASTAT_TxXferRequestHandler>:

void ASTAT_TxXferRequestHandler(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
	for (size_t i = 0; i < AUDIO_STEREO_CHANNEL_COUNT; i++)
 800158a:	2300      	movs	r3, #0
 800158c:	607b      	str	r3, [r7, #4]
 800158e:	e11b      	b.n	80017c8 <ASTAT_TxXferRequestHandler+0x244>
  __ASM volatile ("cpsid i" : : : "memory");
 8001590:	b672      	cpsid	i
}
 8001592:	bf00      	nop
	{
		__disable_irq();
		if (READ_BIT(ASTAT_dspStatus[i],
 8001594:	4a91      	ldr	r2, [pc, #580]	@ (80017dc <ASTAT_TxXferRequestHandler+0x258>)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4413      	add	r3, r2
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	b2db      	uxtb	r3, r3
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d03c      	beq.n	8001620 <ASTAT_TxXferRequestHandler+0x9c>
				AUDIO_STATUS_L_HALF_CPLT) && READ_BIT(ASTAT_rxStatus[i], AUDIO_STATUS_R_HALF_CPLT)
 80015a6:	4a8e      	ldr	r2, [pc, #568]	@ (80017e0 <ASTAT_TxXferRequestHandler+0x25c>)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	4413      	add	r3, r2
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	f003 0308 	and.w	r3, r3, #8
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d033      	beq.n	8001620 <ASTAT_TxXferRequestHandler+0x9c>
				&& READ_BIT(ASTAT_txStatus[i], AUDIO_STATUS_L_HALF_PENDING) == false
 80015b8:	4a8a      	ldr	r2, [pc, #552]	@ (80017e4 <ASTAT_TxXferRequestHandler+0x260>)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4413      	add	r3, r2
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d12a      	bne.n	8001620 <ASTAT_TxXferRequestHandler+0x9c>
				&& READ_BIT(ASTAT_txStatus[i], AUDIO_STATUS_L_HALF_CPLT) == false)
 80015ca:	4a86      	ldr	r2, [pc, #536]	@ (80017e4 <ASTAT_TxXferRequestHandler+0x260>)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	4413      	add	r3, r2
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	f003 0302 	and.w	r3, r3, #2
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d121      	bne.n	8001620 <ASTAT_TxXferRequestHandler+0x9c>
  __ASM volatile ("cpsie i" : : : "memory");
 80015dc:	b662      	cpsie	i
}
 80015de:	bf00      	nop
		{
			__enable_irq();

			SET_BIT(ASTAT_txStatus[i], AUDIO_STATUS_L_HALF_PENDING);
 80015e0:	4a80      	ldr	r2, [pc, #512]	@ (80017e4 <ASTAT_TxXferRequestHandler+0x260>)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4413      	add	r3, r2
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	f043 0301 	orr.w	r3, r3, #1
 80015ee:	b2d9      	uxtb	r1, r3
 80015f0:	4a7c      	ldr	r2, [pc, #496]	@ (80017e4 <ASTAT_TxXferRequestHandler+0x260>)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4413      	add	r3, r2
 80015f6:	460a      	mov	r2, r1
 80015f8:	701a      	strb	r2, [r3, #0]
			CLEAR_BIT(ASTAT_txStatus[i], AUDIO_STATUS_L_HALF_CPLT);
 80015fa:	4a7a      	ldr	r2, [pc, #488]	@ (80017e4 <ASTAT_TxXferRequestHandler+0x260>)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4413      	add	r3, r2
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	b2db      	uxtb	r3, r3
 8001604:	f023 0302 	bic.w	r3, r3, #2
 8001608:	b2d9      	uxtb	r1, r3
 800160a:	4a76      	ldr	r2, [pc, #472]	@ (80017e4 <ASTAT_TxXferRequestHandler+0x260>)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4413      	add	r3, r2
 8001610:	460a      	mov	r2, r1
 8001612:	701a      	strb	r2, [r3, #0]

			HAL_MDMA_GenerateSWRequest(ASTAT_hmdmaTxInstance);
 8001614:	4b74      	ldr	r3, [pc, #464]	@ (80017e8 <ASTAT_TxXferRequestHandler+0x264>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4618      	mov	r0, r3
 800161a:	f005 fdb6 	bl	800718a <HAL_MDMA_GenerateSWRequest>
 800161e:	e0d0      	b.n	80017c2 <ASTAT_TxXferRequestHandler+0x23e>
		}
		else if (READ_BIT(ASTAT_dspStatus[i],
 8001620:	4a6e      	ldr	r2, [pc, #440]	@ (80017dc <ASTAT_TxXferRequestHandler+0x258>)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4413      	add	r3, r2
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	b2db      	uxtb	r3, r3
 800162a:	f003 0308 	and.w	r3, r3, #8
 800162e:	2b00      	cmp	r3, #0
 8001630:	d03c      	beq.n	80016ac <ASTAT_TxXferRequestHandler+0x128>
				AUDIO_STATUS_R_HALF_CPLT) && READ_BIT(ASTAT_txStatus[i], AUDIO_STATUS_L_HALF_CPLT)
 8001632:	4a6c      	ldr	r2, [pc, #432]	@ (80017e4 <ASTAT_TxXferRequestHandler+0x260>)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4413      	add	r3, r2
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	b2db      	uxtb	r3, r3
 800163c:	f003 0302 	and.w	r3, r3, #2
 8001640:	2b00      	cmp	r3, #0
 8001642:	d033      	beq.n	80016ac <ASTAT_TxXferRequestHandler+0x128>
				&& READ_BIT(ASTAT_txStatus[i], AUDIO_STATUS_R_HALF_PENDING) == false
 8001644:	4a67      	ldr	r2, [pc, #412]	@ (80017e4 <ASTAT_TxXferRequestHandler+0x260>)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4413      	add	r3, r2
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	b2db      	uxtb	r3, r3
 800164e:	f003 0304 	and.w	r3, r3, #4
 8001652:	2b00      	cmp	r3, #0
 8001654:	d12a      	bne.n	80016ac <ASTAT_TxXferRequestHandler+0x128>
				&& READ_BIT(ASTAT_txStatus[i], AUDIO_STATUS_R_HALF_CPLT) == false)
 8001656:	4a63      	ldr	r2, [pc, #396]	@ (80017e4 <ASTAT_TxXferRequestHandler+0x260>)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	4413      	add	r3, r2
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	b2db      	uxtb	r3, r3
 8001660:	f003 0308 	and.w	r3, r3, #8
 8001664:	2b00      	cmp	r3, #0
 8001666:	d121      	bne.n	80016ac <ASTAT_TxXferRequestHandler+0x128>
  __ASM volatile ("cpsie i" : : : "memory");
 8001668:	b662      	cpsie	i
}
 800166a:	bf00      	nop
		{
			__enable_irq();

			SET_BIT(ASTAT_txStatus[i], AUDIO_STATUS_R_HALF_PENDING);
 800166c:	4a5d      	ldr	r2, [pc, #372]	@ (80017e4 <ASTAT_TxXferRequestHandler+0x260>)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4413      	add	r3, r2
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	b2db      	uxtb	r3, r3
 8001676:	f043 0304 	orr.w	r3, r3, #4
 800167a:	b2d9      	uxtb	r1, r3
 800167c:	4a59      	ldr	r2, [pc, #356]	@ (80017e4 <ASTAT_TxXferRequestHandler+0x260>)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4413      	add	r3, r2
 8001682:	460a      	mov	r2, r1
 8001684:	701a      	strb	r2, [r3, #0]
			CLEAR_BIT(ASTAT_txStatus[i], AUDIO_STATUS_R_HALF_CPLT);
 8001686:	4a57      	ldr	r2, [pc, #348]	@ (80017e4 <ASTAT_TxXferRequestHandler+0x260>)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	4413      	add	r3, r2
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	b2db      	uxtb	r3, r3
 8001690:	f023 0308 	bic.w	r3, r3, #8
 8001694:	b2d9      	uxtb	r1, r3
 8001696:	4a53      	ldr	r2, [pc, #332]	@ (80017e4 <ASTAT_TxXferRequestHandler+0x260>)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	4413      	add	r3, r2
 800169c:	460a      	mov	r2, r1
 800169e:	701a      	strb	r2, [r3, #0]
			HAL_MDMA_GenerateSWRequest(ASTAT_hmdmaTxInstance);
 80016a0:	4b51      	ldr	r3, [pc, #324]	@ (80017e8 <ASTAT_TxXferRequestHandler+0x264>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f005 fd70 	bl	800718a <HAL_MDMA_GenerateSWRequest>
 80016aa:	e08a      	b.n	80017c2 <ASTAT_TxXferRequestHandler+0x23e>
		}
		else if (READ_BIT(ASTAT_dspStatus[i],
 80016ac:	4a4b      	ldr	r2, [pc, #300]	@ (80017dc <ASTAT_TxXferRequestHandler+0x258>)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4413      	add	r3, r2
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	f003 0320 	and.w	r3, r3, #32
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d03b      	beq.n	8001736 <ASTAT_TxXferRequestHandler+0x1b2>
				AUDIO_STATUS_L_CPLT) && READ_BIT(ASTAT_rxStatus[i], AUDIO_STATUS_R_CPLT)
 80016be:	4a48      	ldr	r2, [pc, #288]	@ (80017e0 <ASTAT_TxXferRequestHandler+0x25c>)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	4413      	add	r3, r2
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	b25b      	sxtb	r3, r3
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	da33      	bge.n	8001736 <ASTAT_TxXferRequestHandler+0x1b2>
				&& READ_BIT(ASTAT_txStatus[i], AUDIO_STATUS_L_PENDING) == false
 80016ce:	4a45      	ldr	r2, [pc, #276]	@ (80017e4 <ASTAT_TxXferRequestHandler+0x260>)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	4413      	add	r3, r2
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	f003 0310 	and.w	r3, r3, #16
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d12a      	bne.n	8001736 <ASTAT_TxXferRequestHandler+0x1b2>
				&& READ_BIT(ASTAT_txStatus[i], AUDIO_STATUS_L_CPLT) == false)
 80016e0:	4a40      	ldr	r2, [pc, #256]	@ (80017e4 <ASTAT_TxXferRequestHandler+0x260>)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4413      	add	r3, r2
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	f003 0320 	and.w	r3, r3, #32
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d121      	bne.n	8001736 <ASTAT_TxXferRequestHandler+0x1b2>
  __ASM volatile ("cpsie i" : : : "memory");
 80016f2:	b662      	cpsie	i
}
 80016f4:	bf00      	nop
		{
			__enable_irq();

			SET_BIT(ASTAT_txStatus[i], AUDIO_STATUS_L_PENDING);
 80016f6:	4a3b      	ldr	r2, [pc, #236]	@ (80017e4 <ASTAT_TxXferRequestHandler+0x260>)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	4413      	add	r3, r2
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	f043 0310 	orr.w	r3, r3, #16
 8001704:	b2d9      	uxtb	r1, r3
 8001706:	4a37      	ldr	r2, [pc, #220]	@ (80017e4 <ASTAT_TxXferRequestHandler+0x260>)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	4413      	add	r3, r2
 800170c:	460a      	mov	r2, r1
 800170e:	701a      	strb	r2, [r3, #0]
			CLEAR_BIT(ASTAT_txStatus[i], AUDIO_STATUS_L_CPLT);
 8001710:	4a34      	ldr	r2, [pc, #208]	@ (80017e4 <ASTAT_TxXferRequestHandler+0x260>)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4413      	add	r3, r2
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	b2db      	uxtb	r3, r3
 800171a:	f023 0320 	bic.w	r3, r3, #32
 800171e:	b2d9      	uxtb	r1, r3
 8001720:	4a30      	ldr	r2, [pc, #192]	@ (80017e4 <ASTAT_TxXferRequestHandler+0x260>)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4413      	add	r3, r2
 8001726:	460a      	mov	r2, r1
 8001728:	701a      	strb	r2, [r3, #0]
			HAL_MDMA_GenerateSWRequest(ASTAT_hmdmaTxInstance);
 800172a:	4b2f      	ldr	r3, [pc, #188]	@ (80017e8 <ASTAT_TxXferRequestHandler+0x264>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4618      	mov	r0, r3
 8001730:	f005 fd2b 	bl	800718a <HAL_MDMA_GenerateSWRequest>
 8001734:	e045      	b.n	80017c2 <ASTAT_TxXferRequestHandler+0x23e>
		}
		else if (READ_BIT(ASTAT_dspStatus[i],
 8001736:	4a29      	ldr	r2, [pc, #164]	@ (80017dc <ASTAT_TxXferRequestHandler+0x258>)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	4413      	add	r3, r2
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	b2db      	uxtb	r3, r3
 8001740:	b25b      	sxtb	r3, r3
 8001742:	2b00      	cmp	r3, #0
 8001744:	da3b      	bge.n	80017be <ASTAT_TxXferRequestHandler+0x23a>
				AUDIO_STATUS_R_CPLT) && READ_BIT(ASTAT_txStatus[i], AUDIO_STATUS_L_CPLT)
 8001746:	4a27      	ldr	r2, [pc, #156]	@ (80017e4 <ASTAT_TxXferRequestHandler+0x260>)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	4413      	add	r3, r2
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	b2db      	uxtb	r3, r3
 8001750:	f003 0320 	and.w	r3, r3, #32
 8001754:	2b00      	cmp	r3, #0
 8001756:	d032      	beq.n	80017be <ASTAT_TxXferRequestHandler+0x23a>
				&& READ_BIT(ASTAT_txStatus[i], AUDIO_STATUS_R_PENDING) == false
 8001758:	4a22      	ldr	r2, [pc, #136]	@ (80017e4 <ASTAT_TxXferRequestHandler+0x260>)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4413      	add	r3, r2
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	b2db      	uxtb	r3, r3
 8001762:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001766:	2b00      	cmp	r3, #0
 8001768:	d129      	bne.n	80017be <ASTAT_TxXferRequestHandler+0x23a>
				&& READ_BIT(ASTAT_txStatus[i], AUDIO_STATUS_R_CPLT) == false)
 800176a:	4a1e      	ldr	r2, [pc, #120]	@ (80017e4 <ASTAT_TxXferRequestHandler+0x260>)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	4413      	add	r3, r2
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	b2db      	uxtb	r3, r3
 8001774:	b25b      	sxtb	r3, r3
 8001776:	2b00      	cmp	r3, #0
 8001778:	db21      	blt.n	80017be <ASTAT_TxXferRequestHandler+0x23a>
  __ASM volatile ("cpsie i" : : : "memory");
 800177a:	b662      	cpsie	i
}
 800177c:	bf00      	nop
		{
			__enable_irq();

			SET_BIT(ASTAT_txStatus[i], AUDIO_STATUS_R_PENDING);
 800177e:	4a19      	ldr	r2, [pc, #100]	@ (80017e4 <ASTAT_TxXferRequestHandler+0x260>)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	4413      	add	r3, r2
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	b2db      	uxtb	r3, r3
 8001788:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800178c:	b2d9      	uxtb	r1, r3
 800178e:	4a15      	ldr	r2, [pc, #84]	@ (80017e4 <ASTAT_TxXferRequestHandler+0x260>)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	4413      	add	r3, r2
 8001794:	460a      	mov	r2, r1
 8001796:	701a      	strb	r2, [r3, #0]
			CLEAR_BIT(ASTAT_txStatus[i], AUDIO_STATUS_R_CPLT);
 8001798:	4a12      	ldr	r2, [pc, #72]	@ (80017e4 <ASTAT_TxXferRequestHandler+0x260>)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4413      	add	r3, r2
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80017a6:	b2d9      	uxtb	r1, r3
 80017a8:	4a0e      	ldr	r2, [pc, #56]	@ (80017e4 <ASTAT_TxXferRequestHandler+0x260>)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4413      	add	r3, r2
 80017ae:	460a      	mov	r2, r1
 80017b0:	701a      	strb	r2, [r3, #0]
			HAL_MDMA_GenerateSWRequest(ASTAT_hmdmaTxInstance);
 80017b2:	4b0d      	ldr	r3, [pc, #52]	@ (80017e8 <ASTAT_TxXferRequestHandler+0x264>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f005 fce7 	bl	800718a <HAL_MDMA_GenerateSWRequest>
 80017bc:	e001      	b.n	80017c2 <ASTAT_TxXferRequestHandler+0x23e>
  __ASM volatile ("cpsie i" : : : "memory");
 80017be:	b662      	cpsie	i
}
 80017c0:	bf00      	nop
	for (size_t i = 0; i < AUDIO_STEREO_CHANNEL_COUNT; i++)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	3301      	adds	r3, #1
 80017c6:	607b      	str	r3, [r7, #4]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	f43f aee0 	beq.w	8001590 <ASTAT_TxXferRequestHandler+0xc>
		else
		{
			__enable_irq();
		}
	}
}
 80017d0:	bf00      	nop
 80017d2:	bf00      	nop
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	24000874 	.word	0x24000874
 80017e0:	24000870 	.word	0x24000870
 80017e4:	24000878 	.word	0x24000878
 80017e8:	24000880 	.word	0x24000880

080017ec <ASTAT_RxXferBlockCpltHandler>:

void ASTAT_RxXferBlockCpltHandler(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
	if (ASTAT_isRxTransferComplete)
 80017f2:	4b5a      	ldr	r3, [pc, #360]	@ (800195c <ASTAT_RxXferBlockCpltHandler+0x170>)
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	f000 80aa 	beq.w	8001952 <ASTAT_RxXferBlockCpltHandler+0x166>
	{
		ASTAT_isRxTransferComplete = false;
 80017fe:	4b57      	ldr	r3, [pc, #348]	@ (800195c <ASTAT_RxXferBlockCpltHandler+0x170>)
 8001800:	2200      	movs	r2, #0
 8001802:	701a      	strb	r2, [r3, #0]

		uint8_t currNodeIndex = MDMA_getCurrentRxChIndex();
 8001804:	f001 fbee 	bl	8002fe4 <MDMA_getCurrentRxChIndex>
 8001808:	4603      	mov	r3, r0
 800180a:	717b      	strb	r3, [r7, #5]

		bool isFirstHalf = false;
 800180c:	2300      	movs	r3, #0
 800180e:	71fb      	strb	r3, [r7, #7]
		uint8_t currChIndex;
		if (currNodeIndex / 2 < AUDIO_STEREO_CHANNEL_COUNT)
 8001810:	797b      	ldrb	r3, [r7, #5]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d805      	bhi.n	8001822 <ASTAT_RxXferBlockCpltHandler+0x36>
		{
			currChIndex = currNodeIndex / 2;
 8001816:	797b      	ldrb	r3, [r7, #5]
 8001818:	085b      	lsrs	r3, r3, #1
 800181a:	71bb      	strb	r3, [r7, #6]
			isFirstHalf = true;
 800181c:	2301      	movs	r3, #1
 800181e:	71fb      	strb	r3, [r7, #7]
 8001820:	e006      	b.n	8001830 <ASTAT_RxXferBlockCpltHandler+0x44>
		}
		else
		{
			currChIndex = (currNodeIndex - AUDIO_STEREO_CHANNEL_COUNT) / 2;
 8001822:	797b      	ldrb	r3, [r7, #5]
 8001824:	3b01      	subs	r3, #1
 8001826:	2b00      	cmp	r3, #0
 8001828:	da00      	bge.n	800182c <ASTAT_RxXferBlockCpltHandler+0x40>
 800182a:	3301      	adds	r3, #1
 800182c:	105b      	asrs	r3, r3, #1
 800182e:	71bb      	strb	r3, [r7, #6]
		}

		bool isLeft = (currNodeIndex % 2) == 0;
 8001830:	797b      	ldrb	r3, [r7, #5]
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	b2db      	uxtb	r3, r3
 8001838:	2b00      	cmp	r3, #0
 800183a:	bf0c      	ite	eq
 800183c:	2301      	moveq	r3, #1
 800183e:	2300      	movne	r3, #0
 8001840:	713b      	strb	r3, [r7, #4]

		if (isFirstHalf)
 8001842:	79fb      	ldrb	r3, [r7, #7]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d042      	beq.n	80018ce <ASTAT_RxXferBlockCpltHandler+0xe2>
		{
			if (isLeft)
 8001848:	793b      	ldrb	r3, [r7, #4]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d01f      	beq.n	800188e <ASTAT_RxXferBlockCpltHandler+0xa2>
			{
				if (READ_BIT(ASTAT_rxStatus[currChIndex],
 800184e:	79bb      	ldrb	r3, [r7, #6]
 8001850:	4a43      	ldr	r2, [pc, #268]	@ (8001960 <ASTAT_RxXferBlockCpltHandler+0x174>)
 8001852:	5cd3      	ldrb	r3, [r2, r3]
 8001854:	b2db      	uxtb	r3, r3
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	2b00      	cmp	r3, #0
 800185c:	d014      	beq.n	8001888 <ASTAT_RxXferBlockCpltHandler+0x9c>
						AUDIO_STATUS_L_HALF_PENDING))
				{
					SET_BIT(ASTAT_rxStatus[currChIndex],
 800185e:	79bb      	ldrb	r3, [r7, #6]
 8001860:	4a3f      	ldr	r2, [pc, #252]	@ (8001960 <ASTAT_RxXferBlockCpltHandler+0x174>)
 8001862:	5cd3      	ldrb	r3, [r2, r3]
 8001864:	b2da      	uxtb	r2, r3
 8001866:	79bb      	ldrb	r3, [r7, #6]
 8001868:	f042 0202 	orr.w	r2, r2, #2
 800186c:	b2d1      	uxtb	r1, r2
 800186e:	4a3c      	ldr	r2, [pc, #240]	@ (8001960 <ASTAT_RxXferBlockCpltHandler+0x174>)
 8001870:	54d1      	strb	r1, [r2, r3]
							AUDIO_STATUS_L_HALF_CPLT);
					CLEAR_BIT(ASTAT_rxStatus[currChIndex],
 8001872:	79bb      	ldrb	r3, [r7, #6]
 8001874:	4a3a      	ldr	r2, [pc, #232]	@ (8001960 <ASTAT_RxXferBlockCpltHandler+0x174>)
 8001876:	5cd3      	ldrb	r3, [r2, r3]
 8001878:	b2da      	uxtb	r2, r3
 800187a:	79bb      	ldrb	r3, [r7, #6]
 800187c:	f022 0201 	bic.w	r2, r2, #1
 8001880:	b2d1      	uxtb	r1, r2
 8001882:	4a37      	ldr	r2, [pc, #220]	@ (8001960 <ASTAT_RxXferBlockCpltHandler+0x174>)
 8001884:	54d1      	strb	r1, [r2, r3]
				}
			}
		}

	}
}
 8001886:	e064      	b.n	8001952 <ASTAT_RxXferBlockCpltHandler+0x166>
					Error_Handler();
 8001888:	f000 ff84 	bl	8002794 <Error_Handler>
}
 800188c:	e061      	b.n	8001952 <ASTAT_RxXferBlockCpltHandler+0x166>
				if (READ_BIT(ASTAT_rxStatus[currChIndex],
 800188e:	79bb      	ldrb	r3, [r7, #6]
 8001890:	4a33      	ldr	r2, [pc, #204]	@ (8001960 <ASTAT_RxXferBlockCpltHandler+0x174>)
 8001892:	5cd3      	ldrb	r3, [r2, r3]
 8001894:	b2db      	uxtb	r3, r3
 8001896:	f003 0304 	and.w	r3, r3, #4
 800189a:	2b00      	cmp	r3, #0
 800189c:	d014      	beq.n	80018c8 <ASTAT_RxXferBlockCpltHandler+0xdc>
					SET_BIT(ASTAT_rxStatus[currChIndex],
 800189e:	79bb      	ldrb	r3, [r7, #6]
 80018a0:	4a2f      	ldr	r2, [pc, #188]	@ (8001960 <ASTAT_RxXferBlockCpltHandler+0x174>)
 80018a2:	5cd3      	ldrb	r3, [r2, r3]
 80018a4:	b2da      	uxtb	r2, r3
 80018a6:	79bb      	ldrb	r3, [r7, #6]
 80018a8:	f042 0208 	orr.w	r2, r2, #8
 80018ac:	b2d1      	uxtb	r1, r2
 80018ae:	4a2c      	ldr	r2, [pc, #176]	@ (8001960 <ASTAT_RxXferBlockCpltHandler+0x174>)
 80018b0:	54d1      	strb	r1, [r2, r3]
					CLEAR_BIT(ASTAT_rxStatus[currChIndex],
 80018b2:	79bb      	ldrb	r3, [r7, #6]
 80018b4:	4a2a      	ldr	r2, [pc, #168]	@ (8001960 <ASTAT_RxXferBlockCpltHandler+0x174>)
 80018b6:	5cd3      	ldrb	r3, [r2, r3]
 80018b8:	b2da      	uxtb	r2, r3
 80018ba:	79bb      	ldrb	r3, [r7, #6]
 80018bc:	f022 0204 	bic.w	r2, r2, #4
 80018c0:	b2d1      	uxtb	r1, r2
 80018c2:	4a27      	ldr	r2, [pc, #156]	@ (8001960 <ASTAT_RxXferBlockCpltHandler+0x174>)
 80018c4:	54d1      	strb	r1, [r2, r3]
}
 80018c6:	e044      	b.n	8001952 <ASTAT_RxXferBlockCpltHandler+0x166>
					Error_Handler();
 80018c8:	f000 ff64 	bl	8002794 <Error_Handler>
}
 80018cc:	e041      	b.n	8001952 <ASTAT_RxXferBlockCpltHandler+0x166>
			if (isLeft)
 80018ce:	793b      	ldrb	r3, [r7, #4]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d01f      	beq.n	8001914 <ASTAT_RxXferBlockCpltHandler+0x128>
				if (READ_BIT(ASTAT_rxStatus[currChIndex],
 80018d4:	79bb      	ldrb	r3, [r7, #6]
 80018d6:	4a22      	ldr	r2, [pc, #136]	@ (8001960 <ASTAT_RxXferBlockCpltHandler+0x174>)
 80018d8:	5cd3      	ldrb	r3, [r2, r3]
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	f003 0310 	and.w	r3, r3, #16
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d014      	beq.n	800190e <ASTAT_RxXferBlockCpltHandler+0x122>
					SET_BIT(ASTAT_rxStatus[currChIndex], AUDIO_STATUS_L_CPLT);
 80018e4:	79bb      	ldrb	r3, [r7, #6]
 80018e6:	4a1e      	ldr	r2, [pc, #120]	@ (8001960 <ASTAT_RxXferBlockCpltHandler+0x174>)
 80018e8:	5cd3      	ldrb	r3, [r2, r3]
 80018ea:	b2da      	uxtb	r2, r3
 80018ec:	79bb      	ldrb	r3, [r7, #6]
 80018ee:	f042 0220 	orr.w	r2, r2, #32
 80018f2:	b2d1      	uxtb	r1, r2
 80018f4:	4a1a      	ldr	r2, [pc, #104]	@ (8001960 <ASTAT_RxXferBlockCpltHandler+0x174>)
 80018f6:	54d1      	strb	r1, [r2, r3]
					CLEAR_BIT(ASTAT_rxStatus[currChIndex],
 80018f8:	79bb      	ldrb	r3, [r7, #6]
 80018fa:	4a19      	ldr	r2, [pc, #100]	@ (8001960 <ASTAT_RxXferBlockCpltHandler+0x174>)
 80018fc:	5cd3      	ldrb	r3, [r2, r3]
 80018fe:	b2da      	uxtb	r2, r3
 8001900:	79bb      	ldrb	r3, [r7, #6]
 8001902:	f022 0210 	bic.w	r2, r2, #16
 8001906:	b2d1      	uxtb	r1, r2
 8001908:	4a15      	ldr	r2, [pc, #84]	@ (8001960 <ASTAT_RxXferBlockCpltHandler+0x174>)
 800190a:	54d1      	strb	r1, [r2, r3]
}
 800190c:	e021      	b.n	8001952 <ASTAT_RxXferBlockCpltHandler+0x166>
					Error_Handler();
 800190e:	f000 ff41 	bl	8002794 <Error_Handler>
}
 8001912:	e01e      	b.n	8001952 <ASTAT_RxXferBlockCpltHandler+0x166>
				if (READ_BIT(ASTAT_rxStatus[currChIndex],
 8001914:	79bb      	ldrb	r3, [r7, #6]
 8001916:	4a12      	ldr	r2, [pc, #72]	@ (8001960 <ASTAT_RxXferBlockCpltHandler+0x174>)
 8001918:	5cd3      	ldrb	r3, [r2, r3]
 800191a:	b2db      	uxtb	r3, r3
 800191c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001920:	2b00      	cmp	r3, #0
 8001922:	d014      	beq.n	800194e <ASTAT_RxXferBlockCpltHandler+0x162>
					SET_BIT(ASTAT_rxStatus[currChIndex], AUDIO_STATUS_R_CPLT);
 8001924:	79bb      	ldrb	r3, [r7, #6]
 8001926:	4a0e      	ldr	r2, [pc, #56]	@ (8001960 <ASTAT_RxXferBlockCpltHandler+0x174>)
 8001928:	5cd3      	ldrb	r3, [r2, r3]
 800192a:	b2da      	uxtb	r2, r3
 800192c:	79bb      	ldrb	r3, [r7, #6]
 800192e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001932:	b2d1      	uxtb	r1, r2
 8001934:	4a0a      	ldr	r2, [pc, #40]	@ (8001960 <ASTAT_RxXferBlockCpltHandler+0x174>)
 8001936:	54d1      	strb	r1, [r2, r3]
					CLEAR_BIT(ASTAT_rxStatus[currChIndex],
 8001938:	79bb      	ldrb	r3, [r7, #6]
 800193a:	4a09      	ldr	r2, [pc, #36]	@ (8001960 <ASTAT_RxXferBlockCpltHandler+0x174>)
 800193c:	5cd3      	ldrb	r3, [r2, r3]
 800193e:	b2da      	uxtb	r2, r3
 8001940:	79bb      	ldrb	r3, [r7, #6]
 8001942:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001946:	b2d1      	uxtb	r1, r2
 8001948:	4a05      	ldr	r2, [pc, #20]	@ (8001960 <ASTAT_RxXferBlockCpltHandler+0x174>)
 800194a:	54d1      	strb	r1, [r2, r3]
}
 800194c:	e001      	b.n	8001952 <ASTAT_RxXferBlockCpltHandler+0x166>
					Error_Handler();
 800194e:	f000 ff21 	bl	8002794 <Error_Handler>
}
 8001952:	bf00      	nop
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	24000884 	.word	0x24000884
 8001960:	24000870 	.word	0x24000870

08001964 <ASTAT_TxXferBlockCpltHandler>:

void ASTAT_TxXferBlockCpltHandler(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
	if (ASTAT_isTxTransferComplete)
 800196a:	4b5a      	ldr	r3, [pc, #360]	@ (8001ad4 <ASTAT_TxXferBlockCpltHandler+0x170>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	b2db      	uxtb	r3, r3
 8001970:	2b00      	cmp	r3, #0
 8001972:	f000 80aa 	beq.w	8001aca <ASTAT_TxXferBlockCpltHandler+0x166>
	{
		ASTAT_isTxTransferComplete = false;
 8001976:	4b57      	ldr	r3, [pc, #348]	@ (8001ad4 <ASTAT_TxXferBlockCpltHandler+0x170>)
 8001978:	2200      	movs	r2, #0
 800197a:	701a      	strb	r2, [r3, #0]

		uint8_t currNodeIndex = MDMA_getCurrentTxChIndex();
 800197c:	f001 fb5a 	bl	8003034 <MDMA_getCurrentTxChIndex>
 8001980:	4603      	mov	r3, r0
 8001982:	717b      	strb	r3, [r7, #5]

		bool isFirstHalf = false;
 8001984:	2300      	movs	r3, #0
 8001986:	71fb      	strb	r3, [r7, #7]
		uint8_t currChIndex;
		if (currNodeIndex / 2 < AUDIO_STEREO_CHANNEL_COUNT)
 8001988:	797b      	ldrb	r3, [r7, #5]
 800198a:	2b01      	cmp	r3, #1
 800198c:	d805      	bhi.n	800199a <ASTAT_TxXferBlockCpltHandler+0x36>
		{
			currChIndex = currNodeIndex / 2;
 800198e:	797b      	ldrb	r3, [r7, #5]
 8001990:	085b      	lsrs	r3, r3, #1
 8001992:	71bb      	strb	r3, [r7, #6]
			isFirstHalf = true;
 8001994:	2301      	movs	r3, #1
 8001996:	71fb      	strb	r3, [r7, #7]
 8001998:	e006      	b.n	80019a8 <ASTAT_TxXferBlockCpltHandler+0x44>
		}
		else
		{
			currChIndex = (currNodeIndex - AUDIO_STEREO_CHANNEL_COUNT) / 2;
 800199a:	797b      	ldrb	r3, [r7, #5]
 800199c:	3b01      	subs	r3, #1
 800199e:	2b00      	cmp	r3, #0
 80019a0:	da00      	bge.n	80019a4 <ASTAT_TxXferBlockCpltHandler+0x40>
 80019a2:	3301      	adds	r3, #1
 80019a4:	105b      	asrs	r3, r3, #1
 80019a6:	71bb      	strb	r3, [r7, #6]
		}

		bool isLeft = (currNodeIndex % 2) == 0;
 80019a8:	797b      	ldrb	r3, [r7, #5]
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	bf0c      	ite	eq
 80019b4:	2301      	moveq	r3, #1
 80019b6:	2300      	movne	r3, #0
 80019b8:	713b      	strb	r3, [r7, #4]

		if (isFirstHalf)
 80019ba:	79fb      	ldrb	r3, [r7, #7]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d042      	beq.n	8001a46 <ASTAT_TxXferBlockCpltHandler+0xe2>
		{
			if (isLeft)
 80019c0:	793b      	ldrb	r3, [r7, #4]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d01f      	beq.n	8001a06 <ASTAT_TxXferBlockCpltHandler+0xa2>
			{
				if (READ_BIT(ASTAT_txStatus[currChIndex],
 80019c6:	79bb      	ldrb	r3, [r7, #6]
 80019c8:	4a43      	ldr	r2, [pc, #268]	@ (8001ad8 <ASTAT_TxXferBlockCpltHandler+0x174>)
 80019ca:	5cd3      	ldrb	r3, [r2, r3]
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d014      	beq.n	8001a00 <ASTAT_TxXferBlockCpltHandler+0x9c>
						AUDIO_STATUS_L_HALF_PENDING))
				{
					SET_BIT(ASTAT_txStatus[currChIndex],
 80019d6:	79bb      	ldrb	r3, [r7, #6]
 80019d8:	4a3f      	ldr	r2, [pc, #252]	@ (8001ad8 <ASTAT_TxXferBlockCpltHandler+0x174>)
 80019da:	5cd3      	ldrb	r3, [r2, r3]
 80019dc:	b2da      	uxtb	r2, r3
 80019de:	79bb      	ldrb	r3, [r7, #6]
 80019e0:	f042 0202 	orr.w	r2, r2, #2
 80019e4:	b2d1      	uxtb	r1, r2
 80019e6:	4a3c      	ldr	r2, [pc, #240]	@ (8001ad8 <ASTAT_TxXferBlockCpltHandler+0x174>)
 80019e8:	54d1      	strb	r1, [r2, r3]
							AUDIO_STATUS_L_HALF_CPLT);
					CLEAR_BIT(ASTAT_txStatus[currChIndex],
 80019ea:	79bb      	ldrb	r3, [r7, #6]
 80019ec:	4a3a      	ldr	r2, [pc, #232]	@ (8001ad8 <ASTAT_TxXferBlockCpltHandler+0x174>)
 80019ee:	5cd3      	ldrb	r3, [r2, r3]
 80019f0:	b2da      	uxtb	r2, r3
 80019f2:	79bb      	ldrb	r3, [r7, #6]
 80019f4:	f022 0201 	bic.w	r2, r2, #1
 80019f8:	b2d1      	uxtb	r1, r2
 80019fa:	4a37      	ldr	r2, [pc, #220]	@ (8001ad8 <ASTAT_TxXferBlockCpltHandler+0x174>)
 80019fc:	54d1      	strb	r1, [r2, r3]
				}
			}

		}
	}
}
 80019fe:	e064      	b.n	8001aca <ASTAT_TxXferBlockCpltHandler+0x166>
					Error_Handler();
 8001a00:	f000 fec8 	bl	8002794 <Error_Handler>
}
 8001a04:	e061      	b.n	8001aca <ASTAT_TxXferBlockCpltHandler+0x166>
				if (READ_BIT(ASTAT_txStatus[currChIndex],
 8001a06:	79bb      	ldrb	r3, [r7, #6]
 8001a08:	4a33      	ldr	r2, [pc, #204]	@ (8001ad8 <ASTAT_TxXferBlockCpltHandler+0x174>)
 8001a0a:	5cd3      	ldrb	r3, [r2, r3]
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	f003 0304 	and.w	r3, r3, #4
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d014      	beq.n	8001a40 <ASTAT_TxXferBlockCpltHandler+0xdc>
					SET_BIT(ASTAT_txStatus[currChIndex],
 8001a16:	79bb      	ldrb	r3, [r7, #6]
 8001a18:	4a2f      	ldr	r2, [pc, #188]	@ (8001ad8 <ASTAT_TxXferBlockCpltHandler+0x174>)
 8001a1a:	5cd3      	ldrb	r3, [r2, r3]
 8001a1c:	b2da      	uxtb	r2, r3
 8001a1e:	79bb      	ldrb	r3, [r7, #6]
 8001a20:	f042 0208 	orr.w	r2, r2, #8
 8001a24:	b2d1      	uxtb	r1, r2
 8001a26:	4a2c      	ldr	r2, [pc, #176]	@ (8001ad8 <ASTAT_TxXferBlockCpltHandler+0x174>)
 8001a28:	54d1      	strb	r1, [r2, r3]
					CLEAR_BIT(ASTAT_txStatus[currChIndex],
 8001a2a:	79bb      	ldrb	r3, [r7, #6]
 8001a2c:	4a2a      	ldr	r2, [pc, #168]	@ (8001ad8 <ASTAT_TxXferBlockCpltHandler+0x174>)
 8001a2e:	5cd3      	ldrb	r3, [r2, r3]
 8001a30:	b2da      	uxtb	r2, r3
 8001a32:	79bb      	ldrb	r3, [r7, #6]
 8001a34:	f022 0204 	bic.w	r2, r2, #4
 8001a38:	b2d1      	uxtb	r1, r2
 8001a3a:	4a27      	ldr	r2, [pc, #156]	@ (8001ad8 <ASTAT_TxXferBlockCpltHandler+0x174>)
 8001a3c:	54d1      	strb	r1, [r2, r3]
}
 8001a3e:	e044      	b.n	8001aca <ASTAT_TxXferBlockCpltHandler+0x166>
					Error_Handler();
 8001a40:	f000 fea8 	bl	8002794 <Error_Handler>
}
 8001a44:	e041      	b.n	8001aca <ASTAT_TxXferBlockCpltHandler+0x166>
			if (isLeft)
 8001a46:	793b      	ldrb	r3, [r7, #4]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d01f      	beq.n	8001a8c <ASTAT_TxXferBlockCpltHandler+0x128>
				if (READ_BIT(ASTAT_txStatus[currChIndex],
 8001a4c:	79bb      	ldrb	r3, [r7, #6]
 8001a4e:	4a22      	ldr	r2, [pc, #136]	@ (8001ad8 <ASTAT_TxXferBlockCpltHandler+0x174>)
 8001a50:	5cd3      	ldrb	r3, [r2, r3]
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	f003 0310 	and.w	r3, r3, #16
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d014      	beq.n	8001a86 <ASTAT_TxXferBlockCpltHandler+0x122>
					SET_BIT(ASTAT_txStatus[currChIndex], AUDIO_STATUS_L_CPLT);
 8001a5c:	79bb      	ldrb	r3, [r7, #6]
 8001a5e:	4a1e      	ldr	r2, [pc, #120]	@ (8001ad8 <ASTAT_TxXferBlockCpltHandler+0x174>)
 8001a60:	5cd3      	ldrb	r3, [r2, r3]
 8001a62:	b2da      	uxtb	r2, r3
 8001a64:	79bb      	ldrb	r3, [r7, #6]
 8001a66:	f042 0220 	orr.w	r2, r2, #32
 8001a6a:	b2d1      	uxtb	r1, r2
 8001a6c:	4a1a      	ldr	r2, [pc, #104]	@ (8001ad8 <ASTAT_TxXferBlockCpltHandler+0x174>)
 8001a6e:	54d1      	strb	r1, [r2, r3]
					CLEAR_BIT(ASTAT_txStatus[currChIndex],
 8001a70:	79bb      	ldrb	r3, [r7, #6]
 8001a72:	4a19      	ldr	r2, [pc, #100]	@ (8001ad8 <ASTAT_TxXferBlockCpltHandler+0x174>)
 8001a74:	5cd3      	ldrb	r3, [r2, r3]
 8001a76:	b2da      	uxtb	r2, r3
 8001a78:	79bb      	ldrb	r3, [r7, #6]
 8001a7a:	f022 0210 	bic.w	r2, r2, #16
 8001a7e:	b2d1      	uxtb	r1, r2
 8001a80:	4a15      	ldr	r2, [pc, #84]	@ (8001ad8 <ASTAT_TxXferBlockCpltHandler+0x174>)
 8001a82:	54d1      	strb	r1, [r2, r3]
}
 8001a84:	e021      	b.n	8001aca <ASTAT_TxXferBlockCpltHandler+0x166>
					Error_Handler();
 8001a86:	f000 fe85 	bl	8002794 <Error_Handler>
}
 8001a8a:	e01e      	b.n	8001aca <ASTAT_TxXferBlockCpltHandler+0x166>
				if (READ_BIT(ASTAT_txStatus[currChIndex],
 8001a8c:	79bb      	ldrb	r3, [r7, #6]
 8001a8e:	4a12      	ldr	r2, [pc, #72]	@ (8001ad8 <ASTAT_TxXferBlockCpltHandler+0x174>)
 8001a90:	5cd3      	ldrb	r3, [r2, r3]
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d014      	beq.n	8001ac6 <ASTAT_TxXferBlockCpltHandler+0x162>
					SET_BIT(ASTAT_txStatus[currChIndex], AUDIO_STATUS_R_CPLT);
 8001a9c:	79bb      	ldrb	r3, [r7, #6]
 8001a9e:	4a0e      	ldr	r2, [pc, #56]	@ (8001ad8 <ASTAT_TxXferBlockCpltHandler+0x174>)
 8001aa0:	5cd3      	ldrb	r3, [r2, r3]
 8001aa2:	b2da      	uxtb	r2, r3
 8001aa4:	79bb      	ldrb	r3, [r7, #6]
 8001aa6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001aaa:	b2d1      	uxtb	r1, r2
 8001aac:	4a0a      	ldr	r2, [pc, #40]	@ (8001ad8 <ASTAT_TxXferBlockCpltHandler+0x174>)
 8001aae:	54d1      	strb	r1, [r2, r3]
					CLEAR_BIT(ASTAT_txStatus[currChIndex],
 8001ab0:	79bb      	ldrb	r3, [r7, #6]
 8001ab2:	4a09      	ldr	r2, [pc, #36]	@ (8001ad8 <ASTAT_TxXferBlockCpltHandler+0x174>)
 8001ab4:	5cd3      	ldrb	r3, [r2, r3]
 8001ab6:	b2da      	uxtb	r2, r3
 8001ab8:	79bb      	ldrb	r3, [r7, #6]
 8001aba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001abe:	b2d1      	uxtb	r1, r2
 8001ac0:	4a05      	ldr	r2, [pc, #20]	@ (8001ad8 <ASTAT_TxXferBlockCpltHandler+0x174>)
 8001ac2:	54d1      	strb	r1, [r2, r3]
}
 8001ac4:	e001      	b.n	8001aca <ASTAT_TxXferBlockCpltHandler+0x166>
					Error_Handler();
 8001ac6:	f000 fe65 	bl	8002794 <Error_Handler>
}
 8001aca:	bf00      	nop
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	24000885 	.word	0x24000885
 8001ad8:	24000878 	.word	0x24000878

08001adc <DSP_init>:
{ 0, -3, -8, 21, 70, 0, -221, -222, 345, 842, 0, -1848, -1737, 2851, 9745,
		13100, 9745, 2851, -1737, -1848, 0, 842, 345, -222, -221, 0, 70, 21, -8,
		-3, 0, 0 };

arm_status DSP_init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af02      	add	r7, sp, #8
	// Initialize DSP related components here
	arm_status filterStatus;
	for (size_t i = 0; i < AUDIO_STEREO_CHANNEL_COUNT; i++)
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	603b      	str	r3, [r7, #0]
 8001ae6:	e042      	b.n	8001b6e <DSP_init+0x92>
	{
		filterStatus = arm_fir_init_q15(&DSP_filters[i].firInstanceQ15_l,
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8001aee:	fb02 f303 	mul.w	r3, r2, r3
 8001af2:	4a23      	ldr	r2, [pc, #140]	@ (8001b80 <DSP_init+0xa4>)
 8001af4:	1898      	adds	r0, r3, r2
		NUM_TAPS, firCoeffsQ15, DSP_filters[i].firStateQ15_l,
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8001afc:	fb02 f303 	mul.w	r3, r2, r3
 8001b00:	3318      	adds	r3, #24
 8001b02:	4a1f      	ldr	r2, [pc, #124]	@ (8001b80 <DSP_init+0xa4>)
 8001b04:	4413      	add	r3, r2
		filterStatus = arm_fir_init_q15(&DSP_filters[i].firInstanceQ15_l,
 8001b06:	2280      	movs	r2, #128	@ 0x80
 8001b08:	9200      	str	r2, [sp, #0]
 8001b0a:	4a1e      	ldr	r2, [pc, #120]	@ (8001b84 <DSP_init+0xa8>)
 8001b0c:	2120      	movs	r1, #32
 8001b0e:	f00b fa77 	bl	800d000 <arm_fir_init_q15>
 8001b12:	4603      	mov	r3, r0
 8001b14:	71fb      	strb	r3, [r7, #7]
		AUDIO_BUFFER_LENGTH_HALF);

		if (filterStatus != ARM_MATH_SUCCESS)
 8001b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d002      	beq.n	8001b24 <DSP_init+0x48>
		{
			return filterStatus;
 8001b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b22:	e029      	b.n	8001b78 <DSP_init+0x9c>
		}

		filterStatus = arm_fir_init_q15(&DSP_filters[i].firInstanceQ15_r,
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8001b2a:	fb02 f303 	mul.w	r3, r2, r3
 8001b2e:	3308      	adds	r3, #8
 8001b30:	4a13      	ldr	r2, [pc, #76]	@ (8001b80 <DSP_init+0xa4>)
 8001b32:	4413      	add	r3, r2
 8001b34:	1d18      	adds	r0, r3, #4
		NUM_TAPS, firCoeffsQ15, DSP_filters[i].firStateQ15_r,
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8001b3c:	fb02 f303 	mul.w	r3, r2, r3
 8001b40:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001b44:	4a0e      	ldr	r2, [pc, #56]	@ (8001b80 <DSP_init+0xa4>)
 8001b46:	4413      	add	r3, r2
 8001b48:	3306      	adds	r3, #6
		filterStatus = arm_fir_init_q15(&DSP_filters[i].firInstanceQ15_r,
 8001b4a:	2280      	movs	r2, #128	@ 0x80
 8001b4c:	9200      	str	r2, [sp, #0]
 8001b4e:	4a0d      	ldr	r2, [pc, #52]	@ (8001b84 <DSP_init+0xa8>)
 8001b50:	2120      	movs	r1, #32
 8001b52:	f00b fa55 	bl	800d000 <arm_fir_init_q15>
 8001b56:	4603      	mov	r3, r0
 8001b58:	71fb      	strb	r3, [r7, #7]
		AUDIO_BUFFER_LENGTH_HALF);
		if (filterStatus != ARM_MATH_SUCCESS)
 8001b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d002      	beq.n	8001b68 <DSP_init+0x8c>
		{
			return filterStatus;
 8001b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b66:	e007      	b.n	8001b78 <DSP_init+0x9c>
	for (size_t i = 0; i < AUDIO_STEREO_CHANNEL_COUNT; i++)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	603b      	str	r3, [r7, #0]
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d0b9      	beq.n	8001ae8 <DSP_init+0xc>
		}
	}
	return filterStatus;
 8001b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3708      	adds	r7, #8
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	24000888 	.word	0x24000888
 8001b84:	0800d0c0 	.word	0x0800d0c0

08001b88 <DSP_process>:

void DSP_process(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
	for (size_t i = 0; i < AUDIO_STEREO_CHANNEL_COUNT; i++)
 8001b8e:	2300      	movs	r3, #0
 8001b90:	607b      	str	r3, [r7, #4]
 8001b92:	e0ec      	b.n	8001d6e <DSP_process+0x1e6>
	{
		if (READ_BIT(ASTAT_dspStatus[i], AUDIO_STATUS_L_HALF_PENDING))
 8001b94:	4a7a      	ldr	r2, [pc, #488]	@ (8001d80 <DSP_process+0x1f8>)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4413      	add	r3, r2
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d02f      	beq.n	8001c06 <DSP_process+0x7e>
		{

			arm_fir_q15(&DSP_filters[i].firInstanceQ15_l,
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8001bac:	fb02 f303 	mul.w	r3, r2, r3
 8001bb0:	4a74      	ldr	r2, [pc, #464]	@ (8001d84 <DSP_process+0x1fc>)
 8001bb2:	1898      	adds	r0, r3, r2
					(q15_t*) ABUF_audioBufferPtrs[i].leftRxFirstHalf,
 8001bb4:	4a74      	ldr	r2, [pc, #464]	@ (8001d88 <DSP_process+0x200>)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	015b      	lsls	r3, r3, #5
 8001bba:	4413      	add	r3, r2
 8001bbc:	6819      	ldr	r1, [r3, #0]
					(q15_t*) ABUF_audioBufferPtrs[i].leftTxFirstHalf,
 8001bbe:	4a72      	ldr	r2, [pc, #456]	@ (8001d88 <DSP_process+0x200>)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	015b      	lsls	r3, r3, #5
 8001bc4:	4413      	add	r3, r2
 8001bc6:	3310      	adds	r3, #16
 8001bc8:	681a      	ldr	r2, [r3, #0]
			arm_fir_q15(&DSP_filters[i].firInstanceQ15_l,
 8001bca:	2380      	movs	r3, #128	@ 0x80
 8001bcc:	f00b f860 	bl	800cc90 <arm_fir_q15>
					AUDIO_BUFFER_LENGTH_HALF);

			CLEAR_BIT(ASTAT_dspStatus[i], AUDIO_STATUS_L_HALF_PENDING);
 8001bd0:	4a6b      	ldr	r2, [pc, #428]	@ (8001d80 <DSP_process+0x1f8>)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	f023 0301 	bic.w	r3, r3, #1
 8001bde:	b2d9      	uxtb	r1, r3
 8001be0:	4a67      	ldr	r2, [pc, #412]	@ (8001d80 <DSP_process+0x1f8>)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4413      	add	r3, r2
 8001be6:	460a      	mov	r2, r1
 8001be8:	701a      	strb	r2, [r3, #0]
			SET_BIT(ASTAT_dspStatus[i], AUDIO_STATUS_L_HALF_CPLT);
 8001bea:	4a65      	ldr	r2, [pc, #404]	@ (8001d80 <DSP_process+0x1f8>)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	4413      	add	r3, r2
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	f043 0302 	orr.w	r3, r3, #2
 8001bf8:	b2d9      	uxtb	r1, r3
 8001bfa:	4a61      	ldr	r2, [pc, #388]	@ (8001d80 <DSP_process+0x1f8>)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	4413      	add	r3, r2
 8001c00:	460a      	mov	r2, r1
 8001c02:	701a      	strb	r2, [r3, #0]
 8001c04:	e0b0      	b.n	8001d68 <DSP_process+0x1e0>
		}
		else if (READ_BIT(ASTAT_dspStatus[i], AUDIO_STATUS_R_HALF_PENDING))
 8001c06:	4a5e      	ldr	r2, [pc, #376]	@ (8001d80 <DSP_process+0x1f8>)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	f003 0304 	and.w	r3, r3, #4
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d032      	beq.n	8001c7e <DSP_process+0xf6>
		{

			arm_fir_q15(&DSP_filters[i].firInstanceQ15_r,
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8001c1e:	fb02 f303 	mul.w	r3, r2, r3
 8001c22:	3308      	adds	r3, #8
 8001c24:	4a57      	ldr	r2, [pc, #348]	@ (8001d84 <DSP_process+0x1fc>)
 8001c26:	4413      	add	r3, r2
 8001c28:	1d18      	adds	r0, r3, #4
					(q15_t*) ABUF_audioBufferPtrs[i].rightRxFirstHalf,
 8001c2a:	4a57      	ldr	r2, [pc, #348]	@ (8001d88 <DSP_process+0x200>)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	015b      	lsls	r3, r3, #5
 8001c30:	4413      	add	r3, r2
 8001c32:	3304      	adds	r3, #4
 8001c34:	6819      	ldr	r1, [r3, #0]
					(q15_t*) ABUF_audioBufferPtrs[i].rightTxFirstHalf,
 8001c36:	4a54      	ldr	r2, [pc, #336]	@ (8001d88 <DSP_process+0x200>)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	015b      	lsls	r3, r3, #5
 8001c3c:	4413      	add	r3, r2
 8001c3e:	3314      	adds	r3, #20
 8001c40:	681a      	ldr	r2, [r3, #0]
			arm_fir_q15(&DSP_filters[i].firInstanceQ15_r,
 8001c42:	2380      	movs	r3, #128	@ 0x80
 8001c44:	f00b f824 	bl	800cc90 <arm_fir_q15>
					AUDIO_BUFFER_LENGTH_HALF);

			CLEAR_BIT(ASTAT_dspStatus[i], AUDIO_STATUS_R_HALF_PENDING);
 8001c48:	4a4d      	ldr	r2, [pc, #308]	@ (8001d80 <DSP_process+0x1f8>)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	f023 0304 	bic.w	r3, r3, #4
 8001c56:	b2d9      	uxtb	r1, r3
 8001c58:	4a49      	ldr	r2, [pc, #292]	@ (8001d80 <DSP_process+0x1f8>)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	460a      	mov	r2, r1
 8001c60:	701a      	strb	r2, [r3, #0]
			SET_BIT(ASTAT_dspStatus[i], AUDIO_STATUS_R_HALF_CPLT);
 8001c62:	4a47      	ldr	r2, [pc, #284]	@ (8001d80 <DSP_process+0x1f8>)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	4413      	add	r3, r2
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	f043 0308 	orr.w	r3, r3, #8
 8001c70:	b2d9      	uxtb	r1, r3
 8001c72:	4a43      	ldr	r2, [pc, #268]	@ (8001d80 <DSP_process+0x1f8>)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	4413      	add	r3, r2
 8001c78:	460a      	mov	r2, r1
 8001c7a:	701a      	strb	r2, [r3, #0]
 8001c7c:	e074      	b.n	8001d68 <DSP_process+0x1e0>
		}
		else if (READ_BIT(ASTAT_dspStatus[i], AUDIO_STATUS_L_PENDING))
 8001c7e:	4a40      	ldr	r2, [pc, #256]	@ (8001d80 <DSP_process+0x1f8>)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	4413      	add	r3, r2
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	f003 0310 	and.w	r3, r3, #16
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d030      	beq.n	8001cf2 <DSP_process+0x16a>
		{

			arm_fir_q15(&DSP_filters[i].firInstanceQ15_l,
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8001c96:	fb02 f303 	mul.w	r3, r2, r3
 8001c9a:	4a3a      	ldr	r2, [pc, #232]	@ (8001d84 <DSP_process+0x1fc>)
 8001c9c:	1898      	adds	r0, r3, r2
					(q15_t*) ABUF_audioBufferPtrs[i].leftRxSecHalf,
 8001c9e:	4a3a      	ldr	r2, [pc, #232]	@ (8001d88 <DSP_process+0x200>)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	015b      	lsls	r3, r3, #5
 8001ca4:	4413      	add	r3, r2
 8001ca6:	3308      	adds	r3, #8
 8001ca8:	6819      	ldr	r1, [r3, #0]
					(q15_t*) ABUF_audioBufferPtrs[i].leftTxSecHalf,
 8001caa:	4a37      	ldr	r2, [pc, #220]	@ (8001d88 <DSP_process+0x200>)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	015b      	lsls	r3, r3, #5
 8001cb0:	4413      	add	r3, r2
 8001cb2:	3318      	adds	r3, #24
 8001cb4:	681a      	ldr	r2, [r3, #0]
			arm_fir_q15(&DSP_filters[i].firInstanceQ15_l,
 8001cb6:	2380      	movs	r3, #128	@ 0x80
 8001cb8:	f00a ffea 	bl	800cc90 <arm_fir_q15>
					AUDIO_BUFFER_LENGTH_HALF);

			CLEAR_BIT(ASTAT_dspStatus[i], AUDIO_STATUS_L_PENDING);
 8001cbc:	4a30      	ldr	r2, [pc, #192]	@ (8001d80 <DSP_process+0x1f8>)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	f023 0310 	bic.w	r3, r3, #16
 8001cca:	b2d9      	uxtb	r1, r3
 8001ccc:	4a2c      	ldr	r2, [pc, #176]	@ (8001d80 <DSP_process+0x1f8>)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	460a      	mov	r2, r1
 8001cd4:	701a      	strb	r2, [r3, #0]
			SET_BIT(ASTAT_dspStatus[i], AUDIO_STATUS_L_CPLT);
 8001cd6:	4a2a      	ldr	r2, [pc, #168]	@ (8001d80 <DSP_process+0x1f8>)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4413      	add	r3, r2
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	f043 0320 	orr.w	r3, r3, #32
 8001ce4:	b2d9      	uxtb	r1, r3
 8001ce6:	4a26      	ldr	r2, [pc, #152]	@ (8001d80 <DSP_process+0x1f8>)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4413      	add	r3, r2
 8001cec:	460a      	mov	r2, r1
 8001cee:	701a      	strb	r2, [r3, #0]
 8001cf0:	e03a      	b.n	8001d68 <DSP_process+0x1e0>
		}
		else if (READ_BIT(ASTAT_dspStatus[i], AUDIO_STATUS_R_PENDING))
 8001cf2:	4a23      	ldr	r2, [pc, #140]	@ (8001d80 <DSP_process+0x1f8>)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d031      	beq.n	8001d68 <DSP_process+0x1e0>
		{

			arm_fir_q15(&DSP_filters[i].firInstanceQ15_r,
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8001d0a:	fb02 f303 	mul.w	r3, r2, r3
 8001d0e:	3308      	adds	r3, #8
 8001d10:	4a1c      	ldr	r2, [pc, #112]	@ (8001d84 <DSP_process+0x1fc>)
 8001d12:	4413      	add	r3, r2
 8001d14:	1d18      	adds	r0, r3, #4
					(q15_t*) ABUF_audioBufferPtrs[i].rightRxFirstHalf,
 8001d16:	4a1c      	ldr	r2, [pc, #112]	@ (8001d88 <DSP_process+0x200>)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	015b      	lsls	r3, r3, #5
 8001d1c:	4413      	add	r3, r2
 8001d1e:	3304      	adds	r3, #4
 8001d20:	6819      	ldr	r1, [r3, #0]
					(q15_t*) ABUF_audioBufferPtrs[i].rightTxFirstHalf,
 8001d22:	4a19      	ldr	r2, [pc, #100]	@ (8001d88 <DSP_process+0x200>)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	015b      	lsls	r3, r3, #5
 8001d28:	4413      	add	r3, r2
 8001d2a:	3314      	adds	r3, #20
 8001d2c:	681a      	ldr	r2, [r3, #0]
			arm_fir_q15(&DSP_filters[i].firInstanceQ15_r,
 8001d2e:	2380      	movs	r3, #128	@ 0x80
 8001d30:	f00a ffae 	bl	800cc90 <arm_fir_q15>
					AUDIO_BUFFER_LENGTH_HALF);

			CLEAR_BIT(ASTAT_dspStatus[i], AUDIO_STATUS_R_PENDING);
 8001d34:	4a12      	ldr	r2, [pc, #72]	@ (8001d80 <DSP_process+0x1f8>)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4413      	add	r3, r2
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001d42:	b2d9      	uxtb	r1, r3
 8001d44:	4a0e      	ldr	r2, [pc, #56]	@ (8001d80 <DSP_process+0x1f8>)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4413      	add	r3, r2
 8001d4a:	460a      	mov	r2, r1
 8001d4c:	701a      	strb	r2, [r3, #0]
			SET_BIT(ASTAT_dspStatus[i], AUDIO_STATUS_R_CPLT);
 8001d4e:	4a0c      	ldr	r2, [pc, #48]	@ (8001d80 <DSP_process+0x1f8>)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4413      	add	r3, r2
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001d5c:	b2d9      	uxtb	r1, r3
 8001d5e:	4a08      	ldr	r2, [pc, #32]	@ (8001d80 <DSP_process+0x1f8>)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4413      	add	r3, r2
 8001d64:	460a      	mov	r2, r1
 8001d66:	701a      	strb	r2, [r3, #0]
	for (size_t i = 0; i < AUDIO_STEREO_CHANNEL_COUNT; i++)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	607b      	str	r3, [r7, #4]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	f43f af0f 	beq.w	8001b94 <DSP_process+0xc>
		}
	}
}
 8001d76:	bf00      	nop
 8001d78:	bf00      	nop
 8001d7a:	3708      	adds	r7, #8
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	24000874 	.word	0x24000874
 8001d84:	24000888 	.word	0x24000888
 8001d88:	24000850 	.word	0x24000850

08001d8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/

	timeout = 0xFFFF;
 8001d92:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001d96:	60fb      	str	r3, [r7, #12]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0))
 8001d98:	bf00      	nop
 8001d9a:	4b54      	ldr	r3, [pc, #336]	@ (8001eec <main+0x160>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d004      	beq.n	8001db0 <main+0x24>
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	1e5a      	subs	r2, r3, #1
 8001daa:	60fa      	str	r2, [r7, #12]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	dcf4      	bgt.n	8001d9a <main+0xe>
		;
	if (timeout < 0) {
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	da01      	bge.n	8001dba <main+0x2e>
		Error_Handler();
 8001db6:	f000 fced 	bl	8002794 <Error_Handler>
	}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001dba:	f001 fbc5 	bl	8003548 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dbe:	f000 f8a9 	bl	8001f14 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001dc2:	f000 f925 	bl	8002010 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
	 HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8001dc6:	4b49      	ldr	r3, [pc, #292]	@ (8001eec <main+0x160>)
 8001dc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dcc:	4a47      	ldr	r2, [pc, #284]	@ (8001eec <main+0x160>)
 8001dce:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001dd2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001dd6:	4b45      	ldr	r3, [pc, #276]	@ (8001eec <main+0x160>)
 8001dd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ddc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001de0:	607b      	str	r3, [r7, #4]
 8001de2:	687b      	ldr	r3, [r7, #4]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8001de4:	2000      	movs	r0, #0
 8001de6:	f004 f8f5 	bl	8005fd4 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0, 0);
 8001dea:	2100      	movs	r1, #0
 8001dec:	2000      	movs	r0, #0
 8001dee:	f004 f90b 	bl	8006008 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 8001df2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001df6:	60fb      	str	r3, [r7, #12]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0))
 8001df8:	bf00      	nop
 8001dfa:	4b3c      	ldr	r3, [pc, #240]	@ (8001eec <main+0x160>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d104      	bne.n	8001e10 <main+0x84>
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	1e5a      	subs	r2, r3, #1
 8001e0a:	60fa      	str	r2, [r7, #12]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	dcf4      	bgt.n	8001dfa <main+0x6e>
		;
	if (timeout < 0) {
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	da01      	bge.n	8001e1a <main+0x8e>
		Error_Handler();
 8001e16:	f000 fcbd 	bl	8002794 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_DMA_Init();
 8001e1a:	f000 fa15 	bl	8002248 <MX_DMA_Init>
  MX_GPIO_Init();
 8001e1e:	f000 fa3b 	bl	8002298 <MX_GPIO_Init>
  MX_SAI1_Init();
 8001e22:	f000 f963 	bl	80020ec <MX_SAI1_Init>
  MX_I2C2_Init();
 8001e26:	f000 f923 	bl	8002070 <MX_I2C2_Init>
  MX_USART3_UART_Init();
 8001e2a:	f000 f9c1 	bl	80021b0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* Initialize the sai and audio buffers */
  ABUF_init();
 8001e2e:	f7ff f877 	bl	8000f20 <ABUF_init>

  /* Initialize the MDMA */
  MDMA_init();
 8001e32:	f000 fcb5 	bl	80027a0 <MDMA_init>
  MDMA_registerRxCallbacks(MDMA_RxXferBlockCpltCallback, MDMA_RxErrorCallback);
 8001e36:	492e      	ldr	r1, [pc, #184]	@ (8001ef0 <main+0x164>)
 8001e38:	482e      	ldr	r0, [pc, #184]	@ (8001ef4 <main+0x168>)
 8001e3a:	f001 f897 	bl	8002f6c <MDMA_registerRxCallbacks>
  MDMA_registerTxCallbacks(MDMA_TxXferBlockCpltCallback, MDMA_TxErrorCallback);
 8001e3e:	492e      	ldr	r1, [pc, #184]	@ (8001ef8 <main+0x16c>)
 8001e40:	482e      	ldr	r0, [pc, #184]	@ (8001efc <main+0x170>)
 8001e42:	f001 f8b1 	bl	8002fa8 <MDMA_registerTxCallbacks>

  /* Initialize the audio status */
  ASTAT_init(MDMA_hmdmaRxInstance, MDMA_hmdmaTxInstance);
 8001e46:	4b2e      	ldr	r3, [pc, #184]	@ (8001f00 <main+0x174>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a2e      	ldr	r2, [pc, #184]	@ (8001f04 <main+0x178>)
 8001e4c:	6812      	ldr	r2, [r2, #0]
 8001e4e:	4611      	mov	r1, r2
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff f96d 	bl	8001130 <ASTAT_init>

  DSP_init();
 8001e56:	f7ff fe41 	bl	8001adc <DSP_init>

  HAL_StatusTypeDef status;
  HAL_StatusTypeDef saiStatus;


	saiStatus = HAL_SAI_Init(&hsai_BlockA1);
 8001e5a:	482b      	ldr	r0, [pc, #172]	@ (8001f08 <main+0x17c>)
 8001e5c:	f008 ffd8 	bl	800ae10 <HAL_SAI_Init>
 8001e60:	4603      	mov	r3, r0
 8001e62:	72fb      	strb	r3, [r7, #11]
	saiStatus = HAL_SAI_Init(&hsai_BlockB1);
 8001e64:	4829      	ldr	r0, [pc, #164]	@ (8001f0c <main+0x180>)
 8001e66:	f008 ffd3 	bl	800ae10 <HAL_SAI_Init>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	72fb      	strb	r3, [r7, #11]
	__HAL_SAI_ENABLE(&hsai_BlockA1);
 8001e6e:	4b26      	ldr	r3, [pc, #152]	@ (8001f08 <main+0x17c>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	4b24      	ldr	r3, [pc, #144]	@ (8001f08 <main+0x17c>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001e7c:	601a      	str	r2, [r3, #0]
	__HAL_SAI_ENABLE(&hsai_BlockB1);
 8001e7e:	4b23      	ldr	r3, [pc, #140]	@ (8001f0c <main+0x180>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	4b21      	ldr	r3, [pc, #132]	@ (8001f0c <main+0x180>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001e8c:	601a      	str	r2, [r3, #0]

	HAL_Delay(100);
 8001e8e:	2064      	movs	r0, #100	@ 0x64
 8001e90:	f001 fbec 	bl	800366c <HAL_Delay>
	  HAL_StatusTypeDef MDMA_startRxTransfer(void);
	  HAL_StatusTypeDef MDMA_startTxTransfer(void);

	status = codecSetup();
 8001e94:	f000 fb80 	bl	8002598 <codecSetup>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	72bb      	strb	r3, [r7, #10]
	  if(HAL_OK != HAL_SAI_Receive_DMA(&hsai_BlockA1, (uint8_t*)ABUF_saiBufferPtrs[0].leftRxFirstHalf, SAI_BUFFER_LENGTH))
 8001e9c:	4b1c      	ldr	r3, [pc, #112]	@ (8001f10 <main+0x184>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4818      	ldr	r0, [pc, #96]	@ (8001f08 <main+0x17c>)
 8001ea8:	f009 fb12 	bl	800b4d0 <HAL_SAI_Receive_DMA>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <main+0x12a>
	  {
		Error_Handler();
 8001eb2:	f000 fc6f 	bl	8002794 <Error_Handler>
	  }
	  if(HAL_OK != HAL_SAI_Transmit_DMA(&hsai_BlockB1, (uint8_t*)ABUF_saiBufferPtrs[0].leftTxFirstHalf, SAI_BUFFER_LENGTH))
 8001eb6:	4b16      	ldr	r3, [pc, #88]	@ (8001f10 <main+0x184>)
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	4812      	ldr	r0, [pc, #72]	@ (8001f0c <main+0x180>)
 8001ec2:	f009 fa4f 	bl	800b364 <HAL_SAI_Transmit_DMA>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <main+0x144>
	  {
		Error_Handler();
 8001ecc:	f000 fc62 	bl	8002794 <Error_Handler>
	while (1) {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		ASTAT_rxXferRequestHandler();
 8001ed0:	f7ff f97e 	bl	80011d0 <ASTAT_rxXferRequestHandler>
		ASTAT_DspRequestHandler();
 8001ed4:	f7ff fa5c 	bl	8001390 <ASTAT_DspRequestHandler>
		ASTAT_TxXferRequestHandler();
 8001ed8:	f7ff fb54 	bl	8001584 <ASTAT_TxXferRequestHandler>

		ASTAT_RxXferBlockCpltHandler();
 8001edc:	f7ff fc86 	bl	80017ec <ASTAT_RxXferBlockCpltHandler>
		ASTAT_TxXferBlockCpltHandler();
 8001ee0:	f7ff fd40 	bl	8001964 <ASTAT_TxXferBlockCpltHandler>

		DSP_process();
 8001ee4:	f7ff fe50 	bl	8001b88 <DSP_process>
		ASTAT_rxXferRequestHandler();
 8001ee8:	bf00      	nop
 8001eea:	e7f1      	b.n	8001ed0 <main+0x144>
 8001eec:	58024400 	.word	0x58024400
 8001ef0:	08002571 	.word	0x08002571
 8001ef4:	08002519 	.word	0x08002519
 8001ef8:	08002585 	.word	0x08002585
 8001efc:	08002545 	.word	0x08002545
 8001f00:	24000fb8 	.word	0x24000fb8
 8001f04:	24000fbc 	.word	0x24000fbc
 8001f08:	24000b70 	.word	0x24000b70
 8001f0c:	24000c08 	.word	0x24000c08
 8001f10:	24000830 	.word	0x24000830

08001f14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b09c      	sub	sp, #112	@ 0x70
 8001f18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f1e:	224c      	movs	r2, #76	@ 0x4c
 8001f20:	2100      	movs	r1, #0
 8001f22:	4618      	mov	r0, r3
 8001f24:	f00b f880 	bl	800d028 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f28:	1d3b      	adds	r3, r7, #4
 8001f2a:	2220      	movs	r2, #32
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f00b f87a 	bl	800d028 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001f34:	2004      	movs	r0, #4
 8001f36:	f005 f9fb 	bl	8007330 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	603b      	str	r3, [r7, #0]
 8001f3e:	4b32      	ldr	r3, [pc, #200]	@ (8002008 <SystemClock_Config+0xf4>)
 8001f40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f42:	4a31      	ldr	r2, [pc, #196]	@ (8002008 <SystemClock_Config+0xf4>)
 8001f44:	f023 0301 	bic.w	r3, r3, #1
 8001f48:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001f4a:	4b2f      	ldr	r3, [pc, #188]	@ (8002008 <SystemClock_Config+0xf4>)
 8001f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	603b      	str	r3, [r7, #0]
 8001f54:	4b2d      	ldr	r3, [pc, #180]	@ (800200c <SystemClock_Config+0xf8>)
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001f5c:	4a2b      	ldr	r2, [pc, #172]	@ (800200c <SystemClock_Config+0xf8>)
 8001f5e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f62:	6193      	str	r3, [r2, #24]
 8001f64:	4b29      	ldr	r3, [pc, #164]	@ (800200c <SystemClock_Config+0xf8>)
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001f6c:	603b      	str	r3, [r7, #0]
 8001f6e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001f70:	bf00      	nop
 8001f72:	4b26      	ldr	r3, [pc, #152]	@ (800200c <SystemClock_Config+0xf8>)
 8001f74:	699b      	ldr	r3, [r3, #24]
 8001f76:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f7e:	d1f8      	bne.n	8001f72 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f80:	2302      	movs	r3, #2
 8001f82:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001f84:	2301      	movs	r3, #1
 8001f86:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f88:	2340      	movs	r3, #64	@ 0x40
 8001f8a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f90:	2300      	movs	r3, #0
 8001f92:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001f94:	2304      	movs	r3, #4
 8001f96:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001f98:	2332      	movs	r3, #50	@ 0x32
 8001f9a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 65;
 8001fa0:	2341      	movs	r3, #65	@ 0x41
 8001fa2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001fa8:	230c      	movs	r3, #12
 8001faa:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001fac:	2300      	movs	r3, #0
 8001fae:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f005 fa13 	bl	80073e4 <HAL_RCC_OscConfig>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001fc4:	f000 fbe6 	bl	8002794 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fc8:	233f      	movs	r3, #63	@ 0x3f
 8001fca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 8001fd0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001fd4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001fd6:	2308      	movs	r3, #8
 8001fd8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001fda:	2340      	movs	r3, #64	@ 0x40
 8001fdc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001fde:	2340      	movs	r3, #64	@ 0x40
 8001fe0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001fe2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001fe6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001fe8:	2340      	movs	r3, #64	@ 0x40
 8001fea:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001fec:	1d3b      	adds	r3, r7, #4
 8001fee:	2102      	movs	r1, #2
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f005 fe51 	bl	8007c98 <HAL_RCC_ClockConfig>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <SystemClock_Config+0xec>
  {
    Error_Handler();
 8001ffc:	f000 fbca 	bl	8002794 <Error_Handler>
  }
}
 8002000:	bf00      	nop
 8002002:	3770      	adds	r7, #112	@ 0x70
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	58000400 	.word	0x58000400
 800200c:	58024800 	.word	0x58024800

08002010 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b0b0      	sub	sp, #192	@ 0xc0
 8002014:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002016:	463b      	mov	r3, r7
 8002018:	22c0      	movs	r2, #192	@ 0xc0
 800201a:	2100      	movs	r1, #0
 800201c:	4618      	mov	r0, r3
 800201e:	f00b f803 	bl	800d028 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_USART3;
 8002022:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8002026:	f04f 0300 	mov.w	r3, #0
 800202a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 5;
 800202e:	2305      	movs	r3, #5
 8002030:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 24;
 8002032:	2318      	movs	r3, #24
 8002034:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 25;
 8002036:	2319      	movs	r3, #25
 8002038:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 24;
 800203a:	2318      	movs	r3, #24
 800203c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800203e:	2302      	movs	r3, #2
 8002040:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8002042:	23c0      	movs	r3, #192	@ 0xc0
 8002044:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8002046:	2300      	movs	r3, #0
 8002048:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800204a:	2300      	movs	r3, #0
 800204c:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 800204e:	2301      	movs	r3, #1
 8002050:	65bb      	str	r3, [r7, #88]	@ 0x58
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL2;
 8002052:	2301      	movs	r3, #1
 8002054:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002056:	463b      	mov	r3, r7
 8002058:	4618      	mov	r0, r3
 800205a:	f006 f9a9 	bl	80083b0 <HAL_RCCEx_PeriphCLKConfig>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8002064:	f000 fb96 	bl	8002794 <Error_Handler>
  }
}
 8002068:	bf00      	nop
 800206a:	37c0      	adds	r7, #192	@ 0xc0
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002074:	4b1b      	ldr	r3, [pc, #108]	@ (80020e4 <MX_I2C2_Init+0x74>)
 8002076:	4a1c      	ldr	r2, [pc, #112]	@ (80020e8 <MX_I2C2_Init+0x78>)
 8002078:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000873;
 800207a:	4b1a      	ldr	r3, [pc, #104]	@ (80020e4 <MX_I2C2_Init+0x74>)
 800207c:	f640 0273 	movw	r2, #2163	@ 0x873
 8002080:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002082:	4b18      	ldr	r3, [pc, #96]	@ (80020e4 <MX_I2C2_Init+0x74>)
 8002084:	2200      	movs	r2, #0
 8002086:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002088:	4b16      	ldr	r3, [pc, #88]	@ (80020e4 <MX_I2C2_Init+0x74>)
 800208a:	2201      	movs	r2, #1
 800208c:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800208e:	4b15      	ldr	r3, [pc, #84]	@ (80020e4 <MX_I2C2_Init+0x74>)
 8002090:	2200      	movs	r2, #0
 8002092:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002094:	4b13      	ldr	r3, [pc, #76]	@ (80020e4 <MX_I2C2_Init+0x74>)
 8002096:	2200      	movs	r2, #0
 8002098:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800209a:	4b12      	ldr	r3, [pc, #72]	@ (80020e4 <MX_I2C2_Init+0x74>)
 800209c:	2200      	movs	r2, #0
 800209e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020a0:	4b10      	ldr	r3, [pc, #64]	@ (80020e4 <MX_I2C2_Init+0x74>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020a6:	4b0f      	ldr	r3, [pc, #60]	@ (80020e4 <MX_I2C2_Init+0x74>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80020ac:	480d      	ldr	r0, [pc, #52]	@ (80020e4 <MX_I2C2_Init+0x74>)
 80020ae:	f003 ffbf 	bl	8006030 <HAL_I2C_Init>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80020b8:	f000 fb6c 	bl	8002794 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80020bc:	2100      	movs	r1, #0
 80020be:	4809      	ldr	r0, [pc, #36]	@ (80020e4 <MX_I2C2_Init+0x74>)
 80020c0:	f004 fd42 	bl	8006b48 <HAL_I2CEx_ConfigAnalogFilter>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80020ca:	f000 fb63 	bl	8002794 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80020ce:	2100      	movs	r1, #0
 80020d0:	4804      	ldr	r0, [pc, #16]	@ (80020e4 <MX_I2C2_Init+0x74>)
 80020d2:	f004 fd84 	bl	8006bde <HAL_I2CEx_ConfigDigitalFilter>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80020dc:	f000 fb5a 	bl	8002794 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80020e0:	bf00      	nop
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	24000b1c 	.word	0x24000b1c
 80020e8:	40005800 	.word	0x40005800

080020ec <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 80020f0:	4b2b      	ldr	r3, [pc, #172]	@ (80021a0 <MX_SAI1_Init+0xb4>)
 80020f2:	4a2c      	ldr	r2, [pc, #176]	@ (80021a4 <MX_SAI1_Init+0xb8>)
 80020f4:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
 80020f6:	4b2a      	ldr	r3, [pc, #168]	@ (80021a0 <MX_SAI1_Init+0xb4>)
 80020f8:	2201      	movs	r2, #1
 80020fa:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 80020fc:	4b28      	ldr	r3, [pc, #160]	@ (80021a0 <MX_SAI1_Init+0xb4>)
 80020fe:	2200      	movs	r2, #0
 8002100:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002102:	4b27      	ldr	r3, [pc, #156]	@ (80021a0 <MX_SAI1_Init+0xb4>)
 8002104:	2200      	movs	r2, #0
 8002106:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MCK_OVERSAMPLING_DISABLE;
 8002108:	4b25      	ldr	r3, [pc, #148]	@ (80021a0 <MX_SAI1_Init+0xb4>)
 800210a:	2200      	movs	r2, #0
 800210c:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 800210e:	4b24      	ldr	r3, [pc, #144]	@ (80021a0 <MX_SAI1_Init+0xb4>)
 8002110:	2200      	movs	r2, #0
 8002112:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8002114:	4b22      	ldr	r3, [pc, #136]	@ (80021a0 <MX_SAI1_Init+0xb4>)
 8002116:	2201      	movs	r2, #1
 8002118:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 800211a:	4b21      	ldr	r3, [pc, #132]	@ (80021a0 <MX_SAI1_Init+0xb4>)
 800211c:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8002120:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002122:	4b1f      	ldr	r3, [pc, #124]	@ (80021a0 <MX_SAI1_Init+0xb4>)
 8002124:	2200      	movs	r2, #0
 8002126:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8002128:	4b1d      	ldr	r3, [pc, #116]	@ (80021a0 <MX_SAI1_Init+0xb4>)
 800212a:	2200      	movs	r2, #0
 800212c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 800212e:	4b1c      	ldr	r3, [pc, #112]	@ (80021a0 <MX_SAI1_Init+0xb4>)
 8002130:	2200      	movs	r2, #0
 8002132:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8002134:	2302      	movs	r3, #2
 8002136:	2200      	movs	r2, #0
 8002138:	2100      	movs	r1, #0
 800213a:	4819      	ldr	r0, [pc, #100]	@ (80021a0 <MX_SAI1_Init+0xb4>)
 800213c:	f008 fe36 	bl	800adac <HAL_SAI_InitProtocol>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <MX_SAI1_Init+0x5e>
  {
    Error_Handler();
 8002146:	f000 fb25 	bl	8002794 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 800214a:	4b17      	ldr	r3, [pc, #92]	@ (80021a8 <MX_SAI1_Init+0xbc>)
 800214c:	4a17      	ldr	r2, [pc, #92]	@ (80021ac <MX_SAI1_Init+0xc0>)
 800214e:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_TX;
 8002150:	4b15      	ldr	r3, [pc, #84]	@ (80021a8 <MX_SAI1_Init+0xbc>)
 8002152:	2202      	movs	r2, #2
 8002154:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8002156:	4b14      	ldr	r3, [pc, #80]	@ (80021a8 <MX_SAI1_Init+0xbc>)
 8002158:	2201      	movs	r2, #1
 800215a:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800215c:	4b12      	ldr	r3, [pc, #72]	@ (80021a8 <MX_SAI1_Init+0xbc>)
 800215e:	2200      	movs	r2, #0
 8002160:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8002162:	4b11      	ldr	r3, [pc, #68]	@ (80021a8 <MX_SAI1_Init+0xbc>)
 8002164:	2200      	movs	r2, #0
 8002166:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8002168:	4b0f      	ldr	r3, [pc, #60]	@ (80021a8 <MX_SAI1_Init+0xbc>)
 800216a:	2201      	movs	r2, #1
 800216c:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800216e:	4b0e      	ldr	r3, [pc, #56]	@ (80021a8 <MX_SAI1_Init+0xbc>)
 8002170:	2200      	movs	r2, #0
 8002172:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8002174:	4b0c      	ldr	r3, [pc, #48]	@ (80021a8 <MX_SAI1_Init+0xbc>)
 8002176:	2200      	movs	r2, #0
 8002178:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 800217a:	4b0b      	ldr	r3, [pc, #44]	@ (80021a8 <MX_SAI1_Init+0xbc>)
 800217c:	2200      	movs	r2, #0
 800217e:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002180:	4b09      	ldr	r3, [pc, #36]	@ (80021a8 <MX_SAI1_Init+0xbc>)
 8002182:	2200      	movs	r2, #0
 8002184:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8002186:	2302      	movs	r3, #2
 8002188:	2200      	movs	r2, #0
 800218a:	2100      	movs	r1, #0
 800218c:	4806      	ldr	r0, [pc, #24]	@ (80021a8 <MX_SAI1_Init+0xbc>)
 800218e:	f008 fe0d 	bl	800adac <HAL_SAI_InitProtocol>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <MX_SAI1_Init+0xb0>
  {
    Error_Handler();
 8002198:	f000 fafc 	bl	8002794 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 800219c:	bf00      	nop
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	24000b70 	.word	0x24000b70
 80021a4:	40015804 	.word	0x40015804
 80021a8:	24000c08 	.word	0x24000c08
 80021ac:	40015824 	.word	0x40015824

080021b0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80021b4:	4b22      	ldr	r3, [pc, #136]	@ (8002240 <MX_USART3_UART_Init+0x90>)
 80021b6:	4a23      	ldr	r2, [pc, #140]	@ (8002244 <MX_USART3_UART_Init+0x94>)
 80021b8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80021ba:	4b21      	ldr	r3, [pc, #132]	@ (8002240 <MX_USART3_UART_Init+0x90>)
 80021bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80021c0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80021c2:	4b1f      	ldr	r3, [pc, #124]	@ (8002240 <MX_USART3_UART_Init+0x90>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80021c8:	4b1d      	ldr	r3, [pc, #116]	@ (8002240 <MX_USART3_UART_Init+0x90>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80021ce:	4b1c      	ldr	r3, [pc, #112]	@ (8002240 <MX_USART3_UART_Init+0x90>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80021d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002240 <MX_USART3_UART_Init+0x90>)
 80021d6:	220c      	movs	r2, #12
 80021d8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021da:	4b19      	ldr	r3, [pc, #100]	@ (8002240 <MX_USART3_UART_Init+0x90>)
 80021dc:	2200      	movs	r2, #0
 80021de:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80021e0:	4b17      	ldr	r3, [pc, #92]	@ (8002240 <MX_USART3_UART_Init+0x90>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021e6:	4b16      	ldr	r3, [pc, #88]	@ (8002240 <MX_USART3_UART_Init+0x90>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80021ec:	4b14      	ldr	r3, [pc, #80]	@ (8002240 <MX_USART3_UART_Init+0x90>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021f2:	4b13      	ldr	r3, [pc, #76]	@ (8002240 <MX_USART3_UART_Init+0x90>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80021f8:	4811      	ldr	r0, [pc, #68]	@ (8002240 <MX_USART3_UART_Init+0x90>)
 80021fa:	f009 fc6c 	bl	800bad6 <HAL_UART_Init>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002204:	f000 fac6 	bl	8002794 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002208:	2100      	movs	r1, #0
 800220a:	480d      	ldr	r0, [pc, #52]	@ (8002240 <MX_USART3_UART_Init+0x90>)
 800220c:	f00a fc75 	bl	800cafa <HAL_UARTEx_SetTxFifoThreshold>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002216:	f000 fabd 	bl	8002794 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800221a:	2100      	movs	r1, #0
 800221c:	4808      	ldr	r0, [pc, #32]	@ (8002240 <MX_USART3_UART_Init+0x90>)
 800221e:	f00a fcaa 	bl	800cb76 <HAL_UARTEx_SetRxFifoThreshold>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002228:	f000 fab4 	bl	8002794 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800222c:	4804      	ldr	r0, [pc, #16]	@ (8002240 <MX_USART3_UART_Init+0x90>)
 800222e:	f00a fc2b 	bl	800ca88 <HAL_UARTEx_DisableFifoMode>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002238:	f000 faac 	bl	8002794 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800223c:	bf00      	nop
 800223e:	bd80      	pop	{r7, pc}
 8002240:	24000d90 	.word	0x24000d90
 8002244:	40004800 	.word	0x40004800

08002248 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800224e:	4b11      	ldr	r3, [pc, #68]	@ (8002294 <MX_DMA_Init+0x4c>)
 8002250:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002254:	4a0f      	ldr	r2, [pc, #60]	@ (8002294 <MX_DMA_Init+0x4c>)
 8002256:	f043 0301 	orr.w	r3, r3, #1
 800225a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800225e:	4b0d      	ldr	r3, [pc, #52]	@ (8002294 <MX_DMA_Init+0x4c>)
 8002260:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002264:	f003 0301 	and.w	r3, r3, #1
 8002268:	607b      	str	r3, [r7, #4]
 800226a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800226c:	2200      	movs	r2, #0
 800226e:	2100      	movs	r1, #0
 8002270:	200b      	movs	r0, #11
 8002272:	f001 fb06 	bl	8003882 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002276:	200b      	movs	r0, #11
 8002278:	f001 fb1d 	bl	80038b6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800227c:	2200      	movs	r2, #0
 800227e:	2100      	movs	r1, #0
 8002280:	200c      	movs	r0, #12
 8002282:	f001 fafe 	bl	8003882 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002286:	200c      	movs	r0, #12
 8002288:	f001 fb15 	bl	80038b6 <HAL_NVIC_EnableIRQ>

}
 800228c:	bf00      	nop
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	58024400 	.word	0x58024400

08002298 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b08a      	sub	sp, #40	@ 0x28
 800229c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800229e:	f107 0314 	add.w	r3, r7, #20
 80022a2:	2200      	movs	r2, #0
 80022a4:	601a      	str	r2, [r3, #0]
 80022a6:	605a      	str	r2, [r3, #4]
 80022a8:	609a      	str	r2, [r3, #8]
 80022aa:	60da      	str	r2, [r3, #12]
 80022ac:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80022ae:	4b33      	ldr	r3, [pc, #204]	@ (800237c <MX_GPIO_Init+0xe4>)
 80022b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022b4:	4a31      	ldr	r2, [pc, #196]	@ (800237c <MX_GPIO_Init+0xe4>)
 80022b6:	f043 0310 	orr.w	r3, r3, #16
 80022ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022be:	4b2f      	ldr	r3, [pc, #188]	@ (800237c <MX_GPIO_Init+0xe4>)
 80022c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022c4:	f003 0310 	and.w	r3, r3, #16
 80022c8:	613b      	str	r3, [r7, #16]
 80022ca:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022cc:	4b2b      	ldr	r3, [pc, #172]	@ (800237c <MX_GPIO_Init+0xe4>)
 80022ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022d2:	4a2a      	ldr	r2, [pc, #168]	@ (800237c <MX_GPIO_Init+0xe4>)
 80022d4:	f043 0302 	orr.w	r3, r3, #2
 80022d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022dc:	4b27      	ldr	r3, [pc, #156]	@ (800237c <MX_GPIO_Init+0xe4>)
 80022de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	60fb      	str	r3, [r7, #12]
 80022e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80022ea:	4b24      	ldr	r3, [pc, #144]	@ (800237c <MX_GPIO_Init+0xe4>)
 80022ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022f0:	4a22      	ldr	r2, [pc, #136]	@ (800237c <MX_GPIO_Init+0xe4>)
 80022f2:	f043 0308 	orr.w	r3, r3, #8
 80022f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022fa:	4b20      	ldr	r3, [pc, #128]	@ (800237c <MX_GPIO_Init+0xe4>)
 80022fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002300:	f003 0308 	and.w	r3, r3, #8
 8002304:	60bb      	str	r3, [r7, #8]
 8002306:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002308:	4b1c      	ldr	r3, [pc, #112]	@ (800237c <MX_GPIO_Init+0xe4>)
 800230a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800230e:	4a1b      	ldr	r2, [pc, #108]	@ (800237c <MX_GPIO_Init+0xe4>)
 8002310:	f043 0301 	orr.w	r3, r3, #1
 8002314:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002318:	4b18      	ldr	r3, [pc, #96]	@ (800237c <MX_GPIO_Init+0xe4>)
 800231a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	607b      	str	r3, [r7, #4]
 8002324:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_RESET);
 8002326:	2200      	movs	r2, #0
 8002328:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800232c:	4814      	ldr	r0, [pc, #80]	@ (8002380 <MX_GPIO_Init+0xe8>)
 800232e:	f003 fe37 	bl	8005fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RESET_Pin */
  GPIO_InitStruct.Pin = RESET_Pin;
 8002332:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002336:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002338:	2301      	movs	r3, #1
 800233a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233c:	2300      	movs	r3, #0
 800233e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002340:	2303      	movs	r3, #3
 8002342:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 8002344:	f107 0314 	add.w	r3, r7, #20
 8002348:	4619      	mov	r1, r3
 800234a:	480d      	ldr	r0, [pc, #52]	@ (8002380 <MX_GPIO_Init+0xe8>)
 800234c:	f003 fc78 	bl	8005c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8002350:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8002354:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002356:	2302      	movs	r3, #2
 8002358:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235a:	2300      	movs	r3, #0
 800235c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800235e:	2300      	movs	r3, #0
 8002360:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002362:	230a      	movs	r3, #10
 8002364:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002366:	f107 0314 	add.w	r3, r7, #20
 800236a:	4619      	mov	r1, r3
 800236c:	4805      	ldr	r0, [pc, #20]	@ (8002384 <MX_GPIO_Init+0xec>)
 800236e:	f003 fc67 	bl	8005c40 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002372:	bf00      	nop
 8002374:	3728      	adds	r7, #40	@ 0x28
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	58024400 	.word	0x58024400
 8002380:	58021000 	.word	0x58021000
 8002384:	58020000 	.word	0x58020000

08002388 <HAL_SAI_RxHalfCpltCallback>:

/* USER CODE BEGIN 4 */
//TODO Adress/Size aligment error, Read error
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai) {
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
	CLEAR_BIT(ASTAT_saiStatus, SAI_STATUS_RX_HALF_PENDING);
 8002390:	4b2b      	ldr	r3, [pc, #172]	@ (8002440 <HAL_SAI_RxHalfCpltCallback+0xb8>)
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	b2db      	uxtb	r3, r3
 8002396:	f023 0301 	bic.w	r3, r3, #1
 800239a:	b2da      	uxtb	r2, r3
 800239c:	4b28      	ldr	r3, [pc, #160]	@ (8002440 <HAL_SAI_RxHalfCpltCallback+0xb8>)
 800239e:	701a      	strb	r2, [r3, #0]
	SET_BIT(ASTAT_saiStatus, SAI_STATUS_RX_HALF_CPLT);
 80023a0:	4b27      	ldr	r3, [pc, #156]	@ (8002440 <HAL_SAI_RxHalfCpltCallback+0xb8>)
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	f043 0302 	orr.w	r3, r3, #2
 80023aa:	b2da      	uxtb	r2, r3
 80023ac:	4b24      	ldr	r3, [pc, #144]	@ (8002440 <HAL_SAI_RxHalfCpltCallback+0xb8>)
 80023ae:	701a      	strb	r2, [r3, #0]
	CLEAR_BIT(ASTAT_saiStatus, SAI_STATUS_RX_FULL_CPLT);
 80023b0:	4b23      	ldr	r3, [pc, #140]	@ (8002440 <HAL_SAI_RxHalfCpltCallback+0xb8>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	f023 0308 	bic.w	r3, r3, #8
 80023ba:	b2da      	uxtb	r2, r3
 80023bc:	4b20      	ldr	r3, [pc, #128]	@ (8002440 <HAL_SAI_RxHalfCpltCallback+0xb8>)
 80023be:	701a      	strb	r2, [r3, #0]
	SET_BIT(ASTAT_saiStatus, SAI_STATUS_RX_FULL_PENDING);
 80023c0:	4b1f      	ldr	r3, [pc, #124]	@ (8002440 <HAL_SAI_RxHalfCpltCallback+0xb8>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	f043 0304 	orr.w	r3, r3, #4
 80023ca:	b2da      	uxtb	r2, r3
 80023cc:	4b1c      	ldr	r3, [pc, #112]	@ (8002440 <HAL_SAI_RxHalfCpltCallback+0xb8>)
 80023ce:	701a      	strb	r2, [r3, #0]

	for (size_t i = 0; i < AUDIO_STEREO_CHANNEL_COUNT; i++)
 80023d0:	2300      	movs	r3, #0
 80023d2:	60fb      	str	r3, [r7, #12]
 80023d4:	e029      	b.n	800242a <HAL_SAI_RxHalfCpltCallback+0xa2>
	{
	CLEAR_BIT(ASTAT_rxStatus[i], AUDIO_STATUS_HALF_PART);
 80023d6:	4a1b      	ldr	r2, [pc, #108]	@ (8002444 <HAL_SAI_RxHalfCpltCallback+0xbc>)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	4413      	add	r3, r2
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	f023 030f 	bic.w	r3, r3, #15
 80023e4:	b2d9      	uxtb	r1, r3
 80023e6:	4a17      	ldr	r2, [pc, #92]	@ (8002444 <HAL_SAI_RxHalfCpltCallback+0xbc>)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	4413      	add	r3, r2
 80023ec:	460a      	mov	r2, r1
 80023ee:	701a      	strb	r2, [r3, #0]
	CLEAR_BIT(ASTAT_dspStatus[i], AUDIO_STATUS_HALF_PART);
 80023f0:	4a15      	ldr	r2, [pc, #84]	@ (8002448 <HAL_SAI_RxHalfCpltCallback+0xc0>)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	4413      	add	r3, r2
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	f023 030f 	bic.w	r3, r3, #15
 80023fe:	b2d9      	uxtb	r1, r3
 8002400:	4a11      	ldr	r2, [pc, #68]	@ (8002448 <HAL_SAI_RxHalfCpltCallback+0xc0>)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	4413      	add	r3, r2
 8002406:	460a      	mov	r2, r1
 8002408:	701a      	strb	r2, [r3, #0]
	CLEAR_BIT(ASTAT_txStatus[i], AUDIO_STATUS_HALF_PART);
 800240a:	4a10      	ldr	r2, [pc, #64]	@ (800244c <HAL_SAI_RxHalfCpltCallback+0xc4>)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	4413      	add	r3, r2
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	b2db      	uxtb	r3, r3
 8002414:	f023 030f 	bic.w	r3, r3, #15
 8002418:	b2d9      	uxtb	r1, r3
 800241a:	4a0c      	ldr	r2, [pc, #48]	@ (800244c <HAL_SAI_RxHalfCpltCallback+0xc4>)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	4413      	add	r3, r2
 8002420:	460a      	mov	r2, r1
 8002422:	701a      	strb	r2, [r3, #0]
	for (size_t i = 0; i < AUDIO_STEREO_CHANNEL_COUNT; i++)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	3301      	adds	r3, #1
 8002428:	60fb      	str	r3, [r7, #12]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d0d2      	beq.n	80023d6 <HAL_SAI_RxHalfCpltCallback+0x4e>
	}

}
 8002430:	bf00      	nop
 8002432:	bf00      	nop
 8002434:	3714      	adds	r7, #20
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	24000879 	.word	0x24000879
 8002444:	24000870 	.word	0x24000870
 8002448:	24000874 	.word	0x24000874
 800244c:	24000878 	.word	0x24000878

08002450 <HAL_SAI_RxCpltCallback>:

void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai) {
 8002450:	b480      	push	{r7}
 8002452:	b085      	sub	sp, #20
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
	CLEAR_BIT(ASTAT_saiStatus, SAI_STATUS_RX_FULL_PENDING);
 8002458:	4b2b      	ldr	r3, [pc, #172]	@ (8002508 <HAL_SAI_RxCpltCallback+0xb8>)
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	b2db      	uxtb	r3, r3
 800245e:	f023 0304 	bic.w	r3, r3, #4
 8002462:	b2da      	uxtb	r2, r3
 8002464:	4b28      	ldr	r3, [pc, #160]	@ (8002508 <HAL_SAI_RxCpltCallback+0xb8>)
 8002466:	701a      	strb	r2, [r3, #0]
	SET_BIT(ASTAT_saiStatus, SAI_STATUS_RX_FULL_CPLT);
 8002468:	4b27      	ldr	r3, [pc, #156]	@ (8002508 <HAL_SAI_RxCpltCallback+0xb8>)
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	b2db      	uxtb	r3, r3
 800246e:	f043 0308 	orr.w	r3, r3, #8
 8002472:	b2da      	uxtb	r2, r3
 8002474:	4b24      	ldr	r3, [pc, #144]	@ (8002508 <HAL_SAI_RxCpltCallback+0xb8>)
 8002476:	701a      	strb	r2, [r3, #0]
	CLEAR_BIT(ASTAT_saiStatus, SAI_STATUS_RX_HALF_CPLT);
 8002478:	4b23      	ldr	r3, [pc, #140]	@ (8002508 <HAL_SAI_RxCpltCallback+0xb8>)
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	b2db      	uxtb	r3, r3
 800247e:	f023 0302 	bic.w	r3, r3, #2
 8002482:	b2da      	uxtb	r2, r3
 8002484:	4b20      	ldr	r3, [pc, #128]	@ (8002508 <HAL_SAI_RxCpltCallback+0xb8>)
 8002486:	701a      	strb	r2, [r3, #0]
	SET_BIT(ASTAT_saiStatus, SAI_STATUS_RX_HALF_PENDING);
 8002488:	4b1f      	ldr	r3, [pc, #124]	@ (8002508 <HAL_SAI_RxCpltCallback+0xb8>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	b2db      	uxtb	r3, r3
 800248e:	f043 0301 	orr.w	r3, r3, #1
 8002492:	b2da      	uxtb	r2, r3
 8002494:	4b1c      	ldr	r3, [pc, #112]	@ (8002508 <HAL_SAI_RxCpltCallback+0xb8>)
 8002496:	701a      	strb	r2, [r3, #0]

	for (size_t i = 0; i < AUDIO_STEREO_CHANNEL_COUNT; i++)
 8002498:	2300      	movs	r3, #0
 800249a:	60fb      	str	r3, [r7, #12]
 800249c:	e029      	b.n	80024f2 <HAL_SAI_RxCpltCallback+0xa2>
	{
	CLEAR_BIT(ASTAT_rxStatus[i], AUDIO_STATUS_FULL);
 800249e:	4a1b      	ldr	r2, [pc, #108]	@ (800250c <HAL_SAI_RxCpltCallback+0xbc>)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	4413      	add	r3, r2
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	f003 030f 	and.w	r3, r3, #15
 80024ac:	b2d9      	uxtb	r1, r3
 80024ae:	4a17      	ldr	r2, [pc, #92]	@ (800250c <HAL_SAI_RxCpltCallback+0xbc>)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	4413      	add	r3, r2
 80024b4:	460a      	mov	r2, r1
 80024b6:	701a      	strb	r2, [r3, #0]
	CLEAR_BIT(ASTAT_dspStatus[i], AUDIO_STATUS_FULL);
 80024b8:	4a15      	ldr	r2, [pc, #84]	@ (8002510 <HAL_SAI_RxCpltCallback+0xc0>)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	4413      	add	r3, r2
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	f003 030f 	and.w	r3, r3, #15
 80024c6:	b2d9      	uxtb	r1, r3
 80024c8:	4a11      	ldr	r2, [pc, #68]	@ (8002510 <HAL_SAI_RxCpltCallback+0xc0>)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	4413      	add	r3, r2
 80024ce:	460a      	mov	r2, r1
 80024d0:	701a      	strb	r2, [r3, #0]
	CLEAR_BIT(ASTAT_txStatus[i], AUDIO_STATUS_FULL);
 80024d2:	4a10      	ldr	r2, [pc, #64]	@ (8002514 <HAL_SAI_RxCpltCallback+0xc4>)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	4413      	add	r3, r2
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	f003 030f 	and.w	r3, r3, #15
 80024e0:	b2d9      	uxtb	r1, r3
 80024e2:	4a0c      	ldr	r2, [pc, #48]	@ (8002514 <HAL_SAI_RxCpltCallback+0xc4>)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	4413      	add	r3, r2
 80024e8:	460a      	mov	r2, r1
 80024ea:	701a      	strb	r2, [r3, #0]
	for (size_t i = 0; i < AUDIO_STEREO_CHANNEL_COUNT; i++)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	3301      	adds	r3, #1
 80024f0:	60fb      	str	r3, [r7, #12]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d0d2      	beq.n	800249e <HAL_SAI_RxCpltCallback+0x4e>
	}

}
 80024f8:	bf00      	nop
 80024fa:	bf00      	nop
 80024fc:	3714      	adds	r7, #20
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	24000879 	.word	0x24000879
 800250c:	24000870 	.word	0x24000870
 8002510:	24000874 	.word	0x24000874
 8002514:	24000878 	.word	0x24000878

08002518 <MDMA_RxXferBlockCpltCallback>:
////	}
//	//CLEAR_BIT(ASTAT_TxStatus, AUDIO_STATUS_HALF_PART);
//}

void MDMA_RxXferBlockCpltCallback(MDMA_HandleTypeDef *_hdma)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
	rxTransferCounter++;
 8002520:	4b06      	ldr	r3, [pc, #24]	@ (800253c <MDMA_RxXferBlockCpltCallback+0x24>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	3301      	adds	r3, #1
 8002526:	4a05      	ldr	r2, [pc, #20]	@ (800253c <MDMA_RxXferBlockCpltCallback+0x24>)
 8002528:	6013      	str	r3, [r2, #0]
	ASTAT_isRxTransferComplete = true;
 800252a:	4b05      	ldr	r3, [pc, #20]	@ (8002540 <MDMA_RxXferBlockCpltCallback+0x28>)
 800252c:	2201      	movs	r2, #1
 800252e:	701a      	strb	r2, [r3, #0]
}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr
 800253c:	24000e30 	.word	0x24000e30
 8002540:	24000884 	.word	0x24000884

08002544 <MDMA_TxXferBlockCpltCallback>:

void MDMA_TxXferBlockCpltCallback(MDMA_HandleTypeDef *_hdma)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
	txTransferCounter++;
 800254c:	4b06      	ldr	r3, [pc, #24]	@ (8002568 <MDMA_TxXferBlockCpltCallback+0x24>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	3301      	adds	r3, #1
 8002552:	4a05      	ldr	r2, [pc, #20]	@ (8002568 <MDMA_TxXferBlockCpltCallback+0x24>)
 8002554:	6013      	str	r3, [r2, #0]
	ASTAT_isTxTransferComplete = true;
 8002556:	4b05      	ldr	r3, [pc, #20]	@ (800256c <MDMA_TxXferBlockCpltCallback+0x28>)
 8002558:	2201      	movs	r2, #1
 800255a:	701a      	strb	r2, [r3, #0]
}
 800255c:	bf00      	nop
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr
 8002568:	24000e34 	.word	0x24000e34
 800256c:	24000885 	.word	0x24000885

08002570 <MDMA_RxErrorCallback>:


void MDMA_RxErrorCallback(MDMA_HandleTypeDef *_hdma){
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
	Error_Handler();
 8002578:	f000 f90c 	bl	8002794 <Error_Handler>
}
 800257c:	bf00      	nop
 800257e:	3708      	adds	r7, #8
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}

08002584 <MDMA_TxErrorCallback>:

void MDMA_TxErrorCallback(MDMA_HandleTypeDef *_hdma){
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
	Error_Handler();
 800258c:	f000 f902 	bl	8002794 <Error_Handler>
}
 8002590:	bf00      	nop
 8002592:	3708      	adds	r7, #8
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <codecSetup>:

HAL_StatusTypeDef codecSetup(){
 8002598:	b590      	push	{r4, r7, lr}
 800259a:	b08f      	sub	sp, #60	@ 0x3c
 800259c:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status;

	aic3xHandle.hi2c = &hi2c2;
 800259e:	4b77      	ldr	r3, [pc, #476]	@ (800277c <codecSetup+0x1e4>)
 80025a0:	4a77      	ldr	r2, [pc, #476]	@ (8002780 <codecSetup+0x1e8>)
 80025a2:	601a      	str	r2, [r3, #0]
	aic3xHandle.rst_port = RESET_GPIO_Port;
 80025a4:	4b75      	ldr	r3, [pc, #468]	@ (800277c <codecSetup+0x1e4>)
 80025a6:	4a77      	ldr	r2, [pc, #476]	@ (8002784 <codecSetup+0x1ec>)
 80025a8:	605a      	str	r2, [r3, #4]
	aic3xHandle.rst_pin = RESET_Pin;
 80025aa:	4b74      	ldr	r3, [pc, #464]	@ (800277c <codecSetup+0x1e4>)
 80025ac:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80025b0:	811a      	strh	r2, [r3, #8]


	status = AIC3X_Init(&aic3xHandle);
 80025b2:	4872      	ldr	r0, [pc, #456]	@ (800277c <codecSetup+0x1e4>)
 80025b4:	f7fe f8ec 	bl	8000790 <AIC3X_Init>
 80025b8:	4603      	mov	r3, r0
 80025ba:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	if (status != HAL_OK) {
 80025be:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d002      	beq.n	80025cc <codecSetup+0x34>
		return status;
 80025c6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80025ca:	e0d3      	b.n	8002774 <codecSetup+0x1dc>
	}

	AIC3X_ASDIntCtrl_TypeDef asdIntCtrl = {
 80025cc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80025d0:	2200      	movs	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]
 80025d4:	605a      	str	r2, [r3, #4]
 80025d6:	609a      	str	r2, [r3, #8]
 80025d8:	2301      	movs	r3, #1
 80025da:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
			.ReSyncMute = false,
			.WordOffset = 0
	};


	status = AIC3X_WriteASDataIntfControl(&aic3xHandle, &asdIntCtrl);
 80025de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80025e2:	4619      	mov	r1, r3
 80025e4:	4865      	ldr	r0, [pc, #404]	@ (800277c <codecSetup+0x1e4>)
 80025e6:	f7fe f9b8 	bl	800095a <AIC3X_WriteASDataIntfControl>
 80025ea:	4603      	mov	r3, r0
 80025ec:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	if (status != HAL_OK) {
 80025f0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d002      	beq.n	80025fe <codecSetup+0x66>
		return status;
 80025f8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80025fc:	e0ba      	b.n	8002774 <codecSetup+0x1dc>
//	  				.PllR = 8
//	  		};
//
//	  		status = USER_AIC3X_WritePllProgramming(&aic3xHandle, &pllProgramming);

	AIC3X_PGAGainControl_TypeDef pgaGainControl = {
 80025fe:	2300      	movs	r3, #0
 8002600:	627b      	str	r3, [r7, #36]	@ 0x24
			.RADCMuted = false,
			.RADCGain = 0
	};


	AIC3X_ADCMixControl_TypeDef adcMixControl = {
 8002602:	4b61      	ldr	r3, [pc, #388]	@ (8002788 <codecSetup+0x1f0>)
 8002604:	f107 0414 	add.w	r4, r7, #20
 8002608:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800260a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				.RightADC_PGASoftStepping = 0b00,
				.RightADC_MIC1LPDifferential = false,
				.RightADC_MIC1LPGain = 0b1111
	};

	status = AIC3X_WriteADCMixControl(&aic3xHandle, &adcMixControl);
 800260e:	f107 0314 	add.w	r3, r7, #20
 8002612:	4619      	mov	r1, r3
 8002614:	4859      	ldr	r0, [pc, #356]	@ (800277c <codecSetup+0x1e4>)
 8002616:	f7fe fa56 	bl	8000ac6 <AIC3X_WriteADCMixControl>
 800261a:	4603      	mov	r3, r0
 800261c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	if (status != HAL_OK) {
 8002620:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002624:	2b00      	cmp	r3, #0
 8002626:	d002      	beq.n	800262e <codecSetup+0x96>
		return status;
 8002628:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800262c:	e0a2      	b.n	8002774 <codecSetup+0x1dc>
	}

	status = AIC3X_WritePGAGainControl(&aic3xHandle, &pgaGainControl);
 800262e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002632:	4619      	mov	r1, r3
 8002634:	4851      	ldr	r0, [pc, #324]	@ (800277c <codecSetup+0x1e4>)
 8002636:	f7fe f9ff 	bl	8000a38 <AIC3X_WritePGAGainControl>
 800263a:	4603      	mov	r3, r0
 800263c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	if (status != HAL_OK) {
 8002640:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002644:	2b00      	cmp	r3, #0
 8002646:	d002      	beq.n	800264e <codecSetup+0xb6>
		return status;
 8002648:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800264c:	e092      	b.n	8002774 <codecSetup+0x1dc>
	}


	AIC3X_DataPathControl_TypeDef dataPathControl = {
 800264e:	4b4f      	ldr	r3, [pc, #316]	@ (800278c <codecSetup+0x1f4>)
 8002650:	881b      	ldrh	r3, [r3, #0]
 8002652:	823b      	strh	r3, [r7, #16]
			.LeftDACDataPath = AIC3X_DATAPATH_STRAIGHT,
			.RightDACDataPath = AIC3X_DATAPATH_STRAIGHT
	};

	status = AIC3X_WriteDataPathControl(&aic3xHandle, &dataPathControl);
 8002654:	f107 0310 	add.w	r3, r7, #16
 8002658:	4619      	mov	r1, r3
 800265a:	4848      	ldr	r0, [pc, #288]	@ (800277c <codecSetup+0x1e4>)
 800265c:	f7fe f93e 	bl	80008dc <AIC3X_WriteDataPathControl>
 8002660:	4603      	mov	r3, r0
 8002662:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	if (status != HAL_OK) {
 8002666:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800266a:	2b00      	cmp	r3, #0
 800266c:	d002      	beq.n	8002674 <codecSetup+0xdc>
		return status;
 800266e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002672:	e07f      	b.n	8002774 <codecSetup+0x1dc>
	}

	AIC3X_DACPowerControl_TypeDef dacPowerControl = {
 8002674:	4b46      	ldr	r3, [pc, #280]	@ (8002790 <codecSetup+0x1f8>)
 8002676:	881b      	ldrh	r3, [r3, #0]
 8002678:	81bb      	strh	r3, [r7, #12]
			.LeftDACPoweredUp = true,
			.RightDACPoweredUp = true
	};

	status = AIC3X_WriteDACPowerControl(&aic3xHandle, &dacPowerControl);
 800267a:	f107 030c 	add.w	r3, r7, #12
 800267e:	4619      	mov	r1, r3
 8002680:	483e      	ldr	r0, [pc, #248]	@ (800277c <codecSetup+0x1e4>)
 8002682:	f7fe fb5e 	bl	8000d42 <AIC3X_WriteDACPowerControl>
 8002686:	4603      	mov	r3, r0
 8002688:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	if (status != HAL_OK) {
 800268c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002690:	2b00      	cmp	r3, #0
 8002692:	d002      	beq.n	800269a <codecSetup+0x102>
		return status;
 8002694:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002698:	e06c      	b.n	8002774 <codecSetup+0x1dc>
	}


	AIC3X_VolControl_TypeDef defaultVolControl = {
 800269a:	2300      	movs	r3, #0
 800269c:	723b      	strb	r3, [r7, #8]
 800269e:	2300      	movs	r3, #0
 80026a0:	727b      	strb	r3, [r7, #9]
			.Muted = false,
			.Volume = 0,
	};

	status = AIC3X_WriteVolControl(&aic3xHandle,LDAC_VOL, &defaultVolControl);
 80026a2:	f107 0308 	add.w	r3, r7, #8
 80026a6:	461a      	mov	r2, r3
 80026a8:	212b      	movs	r1, #43	@ 0x2b
 80026aa:	4834      	ldr	r0, [pc, #208]	@ (800277c <codecSetup+0x1e4>)
 80026ac:	f7fe fb8d 	bl	8000dca <AIC3X_WriteVolControl>
 80026b0:	4603      	mov	r3, r0
 80026b2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	if (status != HAL_OK) {
 80026b6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d002      	beq.n	80026c4 <codecSetup+0x12c>
		return status;
 80026be:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80026c2:	e057      	b.n	8002774 <codecSetup+0x1dc>
	}

	status = AIC3X_WriteVolControl(&aic3xHandle,RDAC_VOL, &defaultVolControl);
 80026c4:	f107 0308 	add.w	r3, r7, #8
 80026c8:	461a      	mov	r2, r3
 80026ca:	212c      	movs	r1, #44	@ 0x2c
 80026cc:	482b      	ldr	r0, [pc, #172]	@ (800277c <codecSetup+0x1e4>)
 80026ce:	f7fe fb7c 	bl	8000dca <AIC3X_WriteVolControl>
 80026d2:	4603      	mov	r3, r0
 80026d4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	if (status != HAL_OK) {
 80026d8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d002      	beq.n	80026e6 <codecSetup+0x14e>
		return status;
 80026e0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80026e4:	e046      	b.n	8002774 <codecSetup+0x1dc>
	}

	status = AIC3X_WriteVolControl(&aic3xHandle,DACL1_2_LLOPM_VOL, &defaultVolControl);
 80026e6:	f107 0308 	add.w	r3, r7, #8
 80026ea:	461a      	mov	r2, r3
 80026ec:	2152      	movs	r1, #82	@ 0x52
 80026ee:	4823      	ldr	r0, [pc, #140]	@ (800277c <codecSetup+0x1e4>)
 80026f0:	f7fe fb6b 	bl	8000dca <AIC3X_WriteVolControl>
 80026f4:	4603      	mov	r3, r0
 80026f6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	if (status != HAL_OK) {
 80026fa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d002      	beq.n	8002708 <codecSetup+0x170>
		return status;
 8002702:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002706:	e035      	b.n	8002774 <codecSetup+0x1dc>
	}

	status = AIC3X_WriteVolControl(&aic3xHandle,DACR1_2_RLOPM_VOL, &defaultVolControl);
 8002708:	f107 0308 	add.w	r3, r7, #8
 800270c:	461a      	mov	r2, r3
 800270e:	215c      	movs	r1, #92	@ 0x5c
 8002710:	481a      	ldr	r0, [pc, #104]	@ (800277c <codecSetup+0x1e4>)
 8002712:	f7fe fb5a 	bl	8000dca <AIC3X_WriteVolControl>
 8002716:	4603      	mov	r3, r0
 8002718:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	if (status != HAL_OK) {
 800271c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002720:	2b00      	cmp	r3, #0
 8002722:	d002      	beq.n	800272a <codecSetup+0x192>
		return status;
 8002724:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002728:	e024      	b.n	8002774 <codecSetup+0x1dc>
	}

	AIC3X_OutputLevelControl_TypeDef defaultOutputLevelControl = {
 800272a:	2300      	movs	r3, #0
 800272c:	703b      	strb	r3, [r7, #0]
 800272e:	2300      	movs	r3, #0
 8002730:	707b      	strb	r3, [r7, #1]
 8002732:	2300      	movs	r3, #0
 8002734:	70bb      	strb	r3, [r7, #2]
 8002736:	2300      	movs	r3, #0
 8002738:	70fb      	strb	r3, [r7, #3]
 800273a:	2301      	movs	r3, #1
 800273c:	713b      	strb	r3, [r7, #4]
			.PowerDownDriveControl = false,
			.VolumeControlStatus = false,
			.PowerControl = true
	};

	status = AIC3X_WriteOutputLevelControl(&aic3xHandle, LLOPM_CTRL, &defaultOutputLevelControl);
 800273e:	463b      	mov	r3, r7
 8002740:	461a      	mov	r2, r3
 8002742:	2156      	movs	r1, #86	@ 0x56
 8002744:	480d      	ldr	r0, [pc, #52]	@ (800277c <codecSetup+0x1e4>)
 8002746:	f7fe fb8f 	bl	8000e68 <AIC3X_WriteOutputLevelControl>
 800274a:	4603      	mov	r3, r0
 800274c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	if (status != HAL_OK) {
 8002750:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002754:	2b00      	cmp	r3, #0
 8002756:	d002      	beq.n	800275e <codecSetup+0x1c6>
		return status;
 8002758:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800275c:	e00a      	b.n	8002774 <codecSetup+0x1dc>
	}

	status = AIC3X_WriteOutputLevelControl(&aic3xHandle, RLOPM_CTRL, &defaultOutputLevelControl);
 800275e:	463b      	mov	r3, r7
 8002760:	461a      	mov	r2, r3
 8002762:	215d      	movs	r1, #93	@ 0x5d
 8002764:	4805      	ldr	r0, [pc, #20]	@ (800277c <codecSetup+0x1e4>)
 8002766:	f7fe fb7f 	bl	8000e68 <AIC3X_WriteOutputLevelControl>
 800276a:	4603      	mov	r3, r0
 800276c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	return status;
 8002770:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8002774:	4618      	mov	r0, r3
 8002776:	373c      	adds	r7, #60	@ 0x3c
 8002778:	46bd      	mov	sp, r7
 800277a:	bd90      	pop	{r4, r7, pc}
 800277c:	24000e24 	.word	0x24000e24
 8002780:	24000b1c 	.word	0x24000b1c
 8002784:	58021000 	.word	0x58021000
 8002788:	0800d098 	.word	0x0800d098
 800278c:	0800d0a8 	.word	0x0800d0a8
 8002790:	0800d0ac 	.word	0x0800d0ac

08002794 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002798:	b672      	cpsid	i
}
 800279a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
		__BKPT();
 800279c:	be00      	bkpt	0x0000
 800279e:	e7fd      	b.n	800279c <Error_Handler+0x8>

080027a0 <MDMA_init>:

MDMA_HandleTypeDef *MDMA_hmdmaRxInstance;
MDMA_HandleTypeDef *MDMA_hmdmaTxInstance;

void MDMA_init(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b09a      	sub	sp, #104	@ 0x68
 80027a4:	af00      	add	r7, sp, #0
	__HAL_RCC_MDMA_CLK_ENABLE();
 80027a6:	4b86      	ldr	r3, [pc, #536]	@ (80029c0 <MDMA_init+0x220>)
 80027a8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80027ac:	4a84      	ldr	r2, [pc, #528]	@ (80029c0 <MDMA_init+0x220>)
 80027ae:	f043 0301 	orr.w	r3, r3, #1
 80027b2:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80027b6:	4b82      	ldr	r3, [pc, #520]	@ (80029c0 <MDMA_init+0x220>)
 80027b8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80027bc:	f003 0301 	and.w	r3, r3, #1
 80027c0:	607b      	str	r3, [r7, #4]
 80027c2:	687b      	ldr	r3, [r7, #4]
	/* Local variables */
	MDMA_LinkNodeConfTypeDef nodeConfig;

	/* Configure MDMA channel MDMA_Channel0 */
	MDMA_ch0Sw0.Instance = MDMA_Channel0;
 80027c4:	4b7f      	ldr	r3, [pc, #508]	@ (80029c4 <MDMA_init+0x224>)
 80027c6:	4a80      	ldr	r2, [pc, #512]	@ (80029c8 <MDMA_init+0x228>)
 80027c8:	601a      	str	r2, [r3, #0]
	MDMA_ch0Sw0.Init.Request = MDMA_REQUEST_SW;
 80027ca:	4b7e      	ldr	r3, [pc, #504]	@ (80029c4 <MDMA_init+0x224>)
 80027cc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80027d0:	605a      	str	r2, [r3, #4]
	MDMA_ch0Sw0.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 80027d2:	4b7c      	ldr	r3, [pc, #496]	@ (80029c4 <MDMA_init+0x224>)
 80027d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80027d8:	609a      	str	r2, [r3, #8]
	MDMA_ch0Sw0.Init.Priority = MDMA_PRIORITY_HIGH;
 80027da:	4b7a      	ldr	r3, [pc, #488]	@ (80029c4 <MDMA_init+0x224>)
 80027dc:	2280      	movs	r2, #128	@ 0x80
 80027de:	60da      	str	r2, [r3, #12]
	MDMA_ch0Sw0.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 80027e0:	4b78      	ldr	r3, [pc, #480]	@ (80029c4 <MDMA_init+0x224>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	611a      	str	r2, [r3, #16]
	MDMA_ch0Sw0.Init.SourceInc = MDMA_SRC_INC_WORD;
 80027e6:	4b77      	ldr	r3, [pc, #476]	@ (80029c4 <MDMA_init+0x224>)
 80027e8:	f240 2202 	movw	r2, #514	@ 0x202
 80027ec:	615a      	str	r2, [r3, #20]
	MDMA_ch0Sw0.Init.DestinationInc = MDMA_DEST_INC_HALFWORD;
 80027ee:	4b75      	ldr	r3, [pc, #468]	@ (80029c4 <MDMA_init+0x224>)
 80027f0:	f44f 6281 	mov.w	r2, #1032	@ 0x408
 80027f4:	619a      	str	r2, [r3, #24]
	MDMA_ch0Sw0.Init.SourceDataSize = MDMA_SRC_DATASIZE_HALFWORD;
 80027f6:	4b73      	ldr	r3, [pc, #460]	@ (80029c4 <MDMA_init+0x224>)
 80027f8:	2210      	movs	r2, #16
 80027fa:	61da      	str	r2, [r3, #28]
	MDMA_ch0Sw0.Init.DestDataSize = MDMA_DEST_DATASIZE_HALFWORD;
 80027fc:	4b71      	ldr	r3, [pc, #452]	@ (80029c4 <MDMA_init+0x224>)
 80027fe:	2240      	movs	r2, #64	@ 0x40
 8002800:	621a      	str	r2, [r3, #32]
	MDMA_ch0Sw0.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8002802:	4b70      	ldr	r3, [pc, #448]	@ (80029c4 <MDMA_init+0x224>)
 8002804:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002808:	625a      	str	r2, [r3, #36]	@ 0x24
	MDMA_ch0Sw0.Init.BufferTransferLength = AUDIO_SAMPLE_SIZE;
 800280a:	4b6e      	ldr	r3, [pc, #440]	@ (80029c4 <MDMA_init+0x224>)
 800280c:	2202      	movs	r2, #2
 800280e:	629a      	str	r2, [r3, #40]	@ 0x28
	MDMA_ch0Sw0.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8002810:	4b6c      	ldr	r3, [pc, #432]	@ (80029c4 <MDMA_init+0x224>)
 8002812:	2200      	movs	r2, #0
 8002814:	62da      	str	r2, [r3, #44]	@ 0x2c
	MDMA_ch0Sw0.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8002816:	4b6b      	ldr	r3, [pc, #428]	@ (80029c4 <MDMA_init+0x224>)
 8002818:	2200      	movs	r2, #0
 800281a:	631a      	str	r2, [r3, #48]	@ 0x30
	MDMA_ch0Sw0.Init.SourceBlockAddressOffset = 0;
 800281c:	4b69      	ldr	r3, [pc, #420]	@ (80029c4 <MDMA_init+0x224>)
 800281e:	2200      	movs	r2, #0
 8002820:	635a      	str	r2, [r3, #52]	@ 0x34
	MDMA_ch0Sw0.Init.DestBlockAddressOffset = 0;
 8002822:	4b68      	ldr	r3, [pc, #416]	@ (80029c4 <MDMA_init+0x224>)
 8002824:	2200      	movs	r2, #0
 8002826:	639a      	str	r2, [r3, #56]	@ 0x38
	if (HAL_MDMA_Init(&MDMA_ch0Sw0) != HAL_OK)
 8002828:	4866      	ldr	r0, [pc, #408]	@ (80029c4 <MDMA_init+0x224>)
 800282a:	f004 fa24 	bl	8006c76 <HAL_MDMA_Init>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <MDMA_init+0x98>
	{
		Error_Handler();
 8002834:	f7ff ffae 	bl	8002794 <Error_Handler>
	}

	for (size_t i = 0; i < AUDIO_STEREO_CHANNEL_COUNT;)
 8002838:	2300      	movs	r3, #0
 800283a:	667b      	str	r3, [r7, #100]	@ 0x64
 800283c:	e0b9      	b.n	80029b2 <MDMA_init+0x212>
	{
		nodeConfig.Init.Request = MDMA_REQUEST_SW;
 800283e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002842:	60bb      	str	r3, [r7, #8]
		nodeConfig.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 8002844:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002848:	60fb      	str	r3, [r7, #12]
		nodeConfig.Init.Priority = MDMA_PRIORITY_HIGH;
 800284a:	2380      	movs	r3, #128	@ 0x80
 800284c:	613b      	str	r3, [r7, #16]
		nodeConfig.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 800284e:	2300      	movs	r3, #0
 8002850:	617b      	str	r3, [r7, #20]
		nodeConfig.Init.SourceInc = MDMA_SRC_INC_WORD;
 8002852:	f240 2302 	movw	r3, #514	@ 0x202
 8002856:	61bb      	str	r3, [r7, #24]
		nodeConfig.Init.DestinationInc = MDMA_DEST_INC_HALFWORD;
 8002858:	f44f 6381 	mov.w	r3, #1032	@ 0x408
 800285c:	61fb      	str	r3, [r7, #28]
		nodeConfig.Init.SourceDataSize = MDMA_SRC_DATASIZE_HALFWORD;
 800285e:	2310      	movs	r3, #16
 8002860:	623b      	str	r3, [r7, #32]
		nodeConfig.Init.DestDataSize = MDMA_DEST_DATASIZE_HALFWORD;
 8002862:	2340      	movs	r3, #64	@ 0x40
 8002864:	627b      	str	r3, [r7, #36]	@ 0x24
		nodeConfig.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8002866:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800286a:	62bb      	str	r3, [r7, #40]	@ 0x28
		nodeConfig.Init.BufferTransferLength = AUDIO_SAMPLE_SIZE;
 800286c:	2302      	movs	r3, #2
 800286e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		nodeConfig.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8002870:	2300      	movs	r3, #0
 8002872:	633b      	str	r3, [r7, #48]	@ 0x30
		nodeConfig.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8002874:	2300      	movs	r3, #0
 8002876:	637b      	str	r3, [r7, #52]	@ 0x34
		nodeConfig.Init.SourceBlockAddressOffset = 0;
 8002878:	2300      	movs	r3, #0
 800287a:	63bb      	str	r3, [r7, #56]	@ 0x38
		nodeConfig.Init.DestBlockAddressOffset = 0;
 800287c:	2300      	movs	r3, #0
 800287e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		nodeConfig.PostRequestMaskAddress = 0;
 8002880:	2300      	movs	r3, #0
 8002882:	653b      	str	r3, [r7, #80]	@ 0x50
		nodeConfig.PostRequestMaskData = 0;
 8002884:	2300      	movs	r3, #0
 8002886:	657b      	str	r3, [r7, #84]	@ 0x54
		nodeConfig.SrcAddress =
				(uint32_t) ABUF_saiBufferPtrs[i].leftRxFirstHalf;
 8002888:	4a50      	ldr	r2, [pc, #320]	@ (80029cc <MDMA_init+0x22c>)
 800288a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800288c:	015b      	lsls	r3, r3, #5
 800288e:	4413      	add	r3, r2
 8002890:	681b      	ldr	r3, [r3, #0]
		nodeConfig.SrcAddress =
 8002892:	643b      	str	r3, [r7, #64]	@ 0x40
		nodeConfig.DstAddress =
				(uint32_t) ABUF_audioBufferPtrs[i].leftRxFirstHalf;
 8002894:	4a4e      	ldr	r2, [pc, #312]	@ (80029d0 <MDMA_init+0x230>)
 8002896:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002898:	015b      	lsls	r3, r3, #5
 800289a:	4413      	add	r3, r2
 800289c:	681b      	ldr	r3, [r3, #0]
		nodeConfig.DstAddress =
 800289e:	647b      	str	r3, [r7, #68]	@ 0x44
		nodeConfig.BlockDataLength = AUDIO_BUFFER_SIZE_HALF;
 80028a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80028a4:	64bb      	str	r3, [r7, #72]	@ 0x48
		nodeConfig.BlockCount = 1;
 80028a6:	2301      	movs	r3, #1
 80028a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (HAL_MDMA_LinkedList_CreateNode(&MDMA_ch0Nodes[i * 2], &nodeConfig)
 80028aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80028ac:	005a      	lsls	r2, r3, #1
 80028ae:	4613      	mov	r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	4413      	add	r3, r2
 80028b4:	00db      	lsls	r3, r3, #3
 80028b6:	4a47      	ldr	r2, [pc, #284]	@ (80029d4 <MDMA_init+0x234>)
 80028b8:	4413      	add	r3, r2
 80028ba:	f107 0208 	add.w	r2, r7, #8
 80028be:	4611      	mov	r1, r2
 80028c0:	4618      	mov	r0, r3
 80028c2:	f004 fa7f 	bl	8006dc4 <HAL_MDMA_LinkedList_CreateNode>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d001      	beq.n	80028d0 <MDMA_init+0x130>
				!= HAL_OK)
		{
			Error_Handler();
 80028cc:	f7ff ff62 	bl	8002794 <Error_Handler>
		}
		if (HAL_MDMA_LinkedList_AddNode(&MDMA_ch0Sw0, &MDMA_ch0Nodes[i * 2], 0)
 80028d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80028d2:	005a      	lsls	r2, r3, #1
 80028d4:	4613      	mov	r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	4413      	add	r3, r2
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	4a3d      	ldr	r2, [pc, #244]	@ (80029d4 <MDMA_init+0x234>)
 80028de:	4413      	add	r3, r2
 80028e0:	2200      	movs	r2, #0
 80028e2:	4619      	mov	r1, r3
 80028e4:	4837      	ldr	r0, [pc, #220]	@ (80029c4 <MDMA_init+0x224>)
 80028e6:	f004 fb49 	bl	8006f7c <HAL_MDMA_LinkedList_AddNode>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d001      	beq.n	80028f4 <MDMA_init+0x154>
				!= HAL_OK)
		{
			Error_Handler();
 80028f0:	f7ff ff50 	bl	8002794 <Error_Handler>
		}
		nodeConfig.Init.Request = MDMA_REQUEST_SW;
 80028f4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80028f8:	60bb      	str	r3, [r7, #8]
		nodeConfig.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 80028fa:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80028fe:	60fb      	str	r3, [r7, #12]
		nodeConfig.Init.Priority = MDMA_PRIORITY_HIGH;
 8002900:	2380      	movs	r3, #128	@ 0x80
 8002902:	613b      	str	r3, [r7, #16]
		nodeConfig.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8002904:	2300      	movs	r3, #0
 8002906:	617b      	str	r3, [r7, #20]
		nodeConfig.Init.SourceInc = MDMA_SRC_INC_WORD;
 8002908:	f240 2302 	movw	r3, #514	@ 0x202
 800290c:	61bb      	str	r3, [r7, #24]
		nodeConfig.Init.DestinationInc = MDMA_DEST_INC_HALFWORD;
 800290e:	f44f 6381 	mov.w	r3, #1032	@ 0x408
 8002912:	61fb      	str	r3, [r7, #28]
		nodeConfig.Init.SourceDataSize = MDMA_SRC_DATASIZE_HALFWORD;
 8002914:	2310      	movs	r3, #16
 8002916:	623b      	str	r3, [r7, #32]
		nodeConfig.Init.DestDataSize = MDMA_DEST_DATASIZE_HALFWORD;
 8002918:	2340      	movs	r3, #64	@ 0x40
 800291a:	627b      	str	r3, [r7, #36]	@ 0x24
		nodeConfig.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 800291c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002920:	62bb      	str	r3, [r7, #40]	@ 0x28
		nodeConfig.Init.BufferTransferLength = AUDIO_SAMPLE_SIZE;
 8002922:	2302      	movs	r3, #2
 8002924:	62fb      	str	r3, [r7, #44]	@ 0x2c
		nodeConfig.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8002926:	2300      	movs	r3, #0
 8002928:	633b      	str	r3, [r7, #48]	@ 0x30
		nodeConfig.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 800292a:	2300      	movs	r3, #0
 800292c:	637b      	str	r3, [r7, #52]	@ 0x34
		nodeConfig.Init.SourceBlockAddressOffset = 0;
 800292e:	2300      	movs	r3, #0
 8002930:	63bb      	str	r3, [r7, #56]	@ 0x38
		nodeConfig.Init.DestBlockAddressOffset = 0;
 8002932:	2300      	movs	r3, #0
 8002934:	63fb      	str	r3, [r7, #60]	@ 0x3c
		nodeConfig.PostRequestMaskAddress = 0;
 8002936:	2300      	movs	r3, #0
 8002938:	653b      	str	r3, [r7, #80]	@ 0x50
		nodeConfig.PostRequestMaskData = 0;
 800293a:	2300      	movs	r3, #0
 800293c:	657b      	str	r3, [r7, #84]	@ 0x54
		nodeConfig.SrcAddress =
				(uint32_t) ABUF_saiBufferPtrs[i].rightRxFirstHalf;
 800293e:	4a23      	ldr	r2, [pc, #140]	@ (80029cc <MDMA_init+0x22c>)
 8002940:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002942:	015b      	lsls	r3, r3, #5
 8002944:	4413      	add	r3, r2
 8002946:	3304      	adds	r3, #4
 8002948:	681b      	ldr	r3, [r3, #0]
		nodeConfig.SrcAddress =
 800294a:	643b      	str	r3, [r7, #64]	@ 0x40
		nodeConfig.DstAddress =
				(uint32_t) ABUF_audioBufferPtrs[i].rightRxFirstHalf;
 800294c:	4a20      	ldr	r2, [pc, #128]	@ (80029d0 <MDMA_init+0x230>)
 800294e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002950:	015b      	lsls	r3, r3, #5
 8002952:	4413      	add	r3, r2
 8002954:	3304      	adds	r3, #4
 8002956:	681b      	ldr	r3, [r3, #0]
		nodeConfig.DstAddress =
 8002958:	647b      	str	r3, [r7, #68]	@ 0x44
		nodeConfig.BlockDataLength = AUDIO_BUFFER_SIZE_HALF;
 800295a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800295e:	64bb      	str	r3, [r7, #72]	@ 0x48
		nodeConfig.BlockCount = 1;
 8002960:	2301      	movs	r3, #1
 8002962:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (HAL_MDMA_LinkedList_CreateNode(&MDMA_ch0Nodes[i * 2 + 1],
 8002964:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	1c5a      	adds	r2, r3, #1
 800296a:	4613      	mov	r3, r2
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	4413      	add	r3, r2
 8002970:	00db      	lsls	r3, r3, #3
 8002972:	4a18      	ldr	r2, [pc, #96]	@ (80029d4 <MDMA_init+0x234>)
 8002974:	4413      	add	r3, r2
 8002976:	f107 0208 	add.w	r2, r7, #8
 800297a:	4611      	mov	r1, r2
 800297c:	4618      	mov	r0, r3
 800297e:	f004 fa21 	bl	8006dc4 <HAL_MDMA_LinkedList_CreateNode>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d001      	beq.n	800298c <MDMA_init+0x1ec>
				&nodeConfig) != HAL_OK)
		{
			Error_Handler();
 8002988:	f7ff ff04 	bl	8002794 <Error_Handler>
		}
		if (HAL_MDMA_LinkedList_AddNode(&MDMA_ch0Sw0, &MDMA_ch0Nodes[i * 2 + 1],
 800298c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	1c5a      	adds	r2, r3, #1
 8002992:	4613      	mov	r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	4413      	add	r3, r2
 8002998:	00db      	lsls	r3, r3, #3
 800299a:	4a0e      	ldr	r2, [pc, #56]	@ (80029d4 <MDMA_init+0x234>)
 800299c:	4413      	add	r3, r2
 800299e:	2200      	movs	r2, #0
 80029a0:	4619      	mov	r1, r3
 80029a2:	4808      	ldr	r0, [pc, #32]	@ (80029c4 <MDMA_init+0x224>)
 80029a4:	f004 faea 	bl	8006f7c <HAL_MDMA_LinkedList_AddNode>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <MDMA_init+0x212>
				0) != HAL_OK)
		{
			Error_Handler();
 80029ae:	f7ff fef1 	bl	8002794 <Error_Handler>
	for (size_t i = 0; i < AUDIO_STEREO_CHANNEL_COUNT;)
 80029b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	f43f af42 	beq.w	800283e <MDMA_init+0x9e>
		}
	}
	for (size_t i = 0; i < AUDIO_STEREO_CHANNEL_COUNT;)
 80029ba:	2300      	movs	r3, #0
 80029bc:	663b      	str	r3, [r7, #96]	@ 0x60
 80029be:	e0c9      	b.n	8002b54 <MDMA_init+0x3b4>
 80029c0:	58024400 	.word	0x58024400
 80029c4:	24000e38 	.word	0x24000e38
 80029c8:	52000040 	.word	0x52000040
 80029cc:	24000830 	.word	0x24000830
 80029d0:	24000850 	.word	0x24000850
 80029d4:	24000ea8 	.word	0x24000ea8
	{
		nodeConfig.Init.Request = MDMA_REQUEST_SW;
 80029d8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80029dc:	60bb      	str	r3, [r7, #8]
		nodeConfig.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 80029de:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80029e2:	60fb      	str	r3, [r7, #12]
		nodeConfig.Init.Priority = MDMA_PRIORITY_HIGH;
 80029e4:	2380      	movs	r3, #128	@ 0x80
 80029e6:	613b      	str	r3, [r7, #16]
		nodeConfig.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 80029e8:	2300      	movs	r3, #0
 80029ea:	617b      	str	r3, [r7, #20]
		nodeConfig.Init.SourceInc = MDMA_SRC_INC_WORD;
 80029ec:	f240 2302 	movw	r3, #514	@ 0x202
 80029f0:	61bb      	str	r3, [r7, #24]
		nodeConfig.Init.DestinationInc = MDMA_DEST_INC_HALFWORD;
 80029f2:	f44f 6381 	mov.w	r3, #1032	@ 0x408
 80029f6:	61fb      	str	r3, [r7, #28]
		nodeConfig.Init.SourceDataSize = MDMA_SRC_DATASIZE_HALFWORD;
 80029f8:	2310      	movs	r3, #16
 80029fa:	623b      	str	r3, [r7, #32]
		nodeConfig.Init.DestDataSize = MDMA_DEST_DATASIZE_HALFWORD;
 80029fc:	2340      	movs	r3, #64	@ 0x40
 80029fe:	627b      	str	r3, [r7, #36]	@ 0x24
		nodeConfig.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8002a00:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a04:	62bb      	str	r3, [r7, #40]	@ 0x28
		nodeConfig.Init.BufferTransferLength = AUDIO_SAMPLE_SIZE;
 8002a06:	2302      	movs	r3, #2
 8002a08:	62fb      	str	r3, [r7, #44]	@ 0x2c
		nodeConfig.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	633b      	str	r3, [r7, #48]	@ 0x30
		nodeConfig.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	637b      	str	r3, [r7, #52]	@ 0x34
		nodeConfig.Init.SourceBlockAddressOffset = 0;
 8002a12:	2300      	movs	r3, #0
 8002a14:	63bb      	str	r3, [r7, #56]	@ 0x38
		nodeConfig.Init.DestBlockAddressOffset = 0;
 8002a16:	2300      	movs	r3, #0
 8002a18:	63fb      	str	r3, [r7, #60]	@ 0x3c
		nodeConfig.PostRequestMaskAddress = 0;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	653b      	str	r3, [r7, #80]	@ 0x50
		nodeConfig.PostRequestMaskData = 0;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	657b      	str	r3, [r7, #84]	@ 0x54
		nodeConfig.SrcAddress = (uint32_t) ABUF_saiBufferPtrs[i].leftRxSecHalf;
 8002a22:	4a71      	ldr	r2, [pc, #452]	@ (8002be8 <MDMA_init+0x448>)
 8002a24:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a26:	015b      	lsls	r3, r3, #5
 8002a28:	4413      	add	r3, r2
 8002a2a:	3308      	adds	r3, #8
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	643b      	str	r3, [r7, #64]	@ 0x40
		nodeConfig.DstAddress =
				(uint32_t) ABUF_audioBufferPtrs[i].leftRxSecHalf;
 8002a30:	4a6e      	ldr	r2, [pc, #440]	@ (8002bec <MDMA_init+0x44c>)
 8002a32:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a34:	015b      	lsls	r3, r3, #5
 8002a36:	4413      	add	r3, r2
 8002a38:	3308      	adds	r3, #8
 8002a3a:	681b      	ldr	r3, [r3, #0]
		nodeConfig.DstAddress =
 8002a3c:	647b      	str	r3, [r7, #68]	@ 0x44
		nodeConfig.BlockDataLength = AUDIO_BUFFER_SIZE_HALF;
 8002a3e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a42:	64bb      	str	r3, [r7, #72]	@ 0x48
		nodeConfig.BlockCount = 1;
 8002a44:	2301      	movs	r3, #1
 8002a46:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (HAL_MDMA_LinkedList_CreateNode(
				&MDMA_ch0Nodes[AUDIO_STEREO_CHANNEL_COUNT * 2 + i * 2],
 8002a48:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	005a      	lsls	r2, r3, #1
		if (HAL_MDMA_LinkedList_CreateNode(
 8002a4e:	4613      	mov	r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	4413      	add	r3, r2
 8002a54:	00db      	lsls	r3, r3, #3
 8002a56:	4a66      	ldr	r2, [pc, #408]	@ (8002bf0 <MDMA_init+0x450>)
 8002a58:	4413      	add	r3, r2
 8002a5a:	f107 0208 	add.w	r2, r7, #8
 8002a5e:	4611      	mov	r1, r2
 8002a60:	4618      	mov	r0, r3
 8002a62:	f004 f9af 	bl	8006dc4 <HAL_MDMA_LinkedList_CreateNode>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <MDMA_init+0x2d0>
				&nodeConfig) != HAL_OK)
		{
			Error_Handler();
 8002a6c:	f7ff fe92 	bl	8002794 <Error_Handler>
		}
		if (HAL_MDMA_LinkedList_AddNode(&MDMA_ch0Sw0,
				&MDMA_ch0Nodes[AUDIO_STEREO_CHANNEL_COUNT * 2 + i * 2], 0)
 8002a70:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a72:	3301      	adds	r3, #1
 8002a74:	005a      	lsls	r2, r3, #1
		if (HAL_MDMA_LinkedList_AddNode(&MDMA_ch0Sw0,
 8002a76:	4613      	mov	r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	4413      	add	r3, r2
 8002a7c:	00db      	lsls	r3, r3, #3
 8002a7e:	4a5c      	ldr	r2, [pc, #368]	@ (8002bf0 <MDMA_init+0x450>)
 8002a80:	4413      	add	r3, r2
 8002a82:	2200      	movs	r2, #0
 8002a84:	4619      	mov	r1, r3
 8002a86:	485b      	ldr	r0, [pc, #364]	@ (8002bf4 <MDMA_init+0x454>)
 8002a88:	f004 fa78 	bl	8006f7c <HAL_MDMA_LinkedList_AddNode>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <MDMA_init+0x2f6>
				!= HAL_OK)
		{
			Error_Handler();
 8002a92:	f7ff fe7f 	bl	8002794 <Error_Handler>
		}
		nodeConfig.Init.Request = MDMA_REQUEST_SW;
 8002a96:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002a9a:	60bb      	str	r3, [r7, #8]
		nodeConfig.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 8002a9c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002aa0:	60fb      	str	r3, [r7, #12]
		nodeConfig.Init.Priority = MDMA_PRIORITY_HIGH;
 8002aa2:	2380      	movs	r3, #128	@ 0x80
 8002aa4:	613b      	str	r3, [r7, #16]
		nodeConfig.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	617b      	str	r3, [r7, #20]
		nodeConfig.Init.SourceInc = MDMA_SRC_INC_WORD;
 8002aaa:	f240 2302 	movw	r3, #514	@ 0x202
 8002aae:	61bb      	str	r3, [r7, #24]
		nodeConfig.Init.DestinationInc = MDMA_DEST_INC_HALFWORD;
 8002ab0:	f44f 6381 	mov.w	r3, #1032	@ 0x408
 8002ab4:	61fb      	str	r3, [r7, #28]
		nodeConfig.Init.SourceDataSize = MDMA_SRC_DATASIZE_HALFWORD;
 8002ab6:	2310      	movs	r3, #16
 8002ab8:	623b      	str	r3, [r7, #32]
		nodeConfig.Init.DestDataSize = MDMA_DEST_DATASIZE_HALFWORD;
 8002aba:	2340      	movs	r3, #64	@ 0x40
 8002abc:	627b      	str	r3, [r7, #36]	@ 0x24
		nodeConfig.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8002abe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ac2:	62bb      	str	r3, [r7, #40]	@ 0x28
		nodeConfig.Init.BufferTransferLength = AUDIO_SAMPLE_SIZE;
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
		nodeConfig.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	633b      	str	r3, [r7, #48]	@ 0x30
		nodeConfig.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8002acc:	2300      	movs	r3, #0
 8002ace:	637b      	str	r3, [r7, #52]	@ 0x34
		nodeConfig.Init.SourceBlockAddressOffset = 0;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	63bb      	str	r3, [r7, #56]	@ 0x38
		nodeConfig.Init.DestBlockAddressOffset = 0;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		nodeConfig.PostRequestMaskAddress = 0;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	653b      	str	r3, [r7, #80]	@ 0x50
		nodeConfig.PostRequestMaskData = 0;
 8002adc:	2300      	movs	r3, #0
 8002ade:	657b      	str	r3, [r7, #84]	@ 0x54
		nodeConfig.SrcAddress = (uint32_t) ABUF_saiBufferPtrs[i].rightRxSecHalf;
 8002ae0:	4a41      	ldr	r2, [pc, #260]	@ (8002be8 <MDMA_init+0x448>)
 8002ae2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ae4:	015b      	lsls	r3, r3, #5
 8002ae6:	4413      	add	r3, r2
 8002ae8:	330c      	adds	r3, #12
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	643b      	str	r3, [r7, #64]	@ 0x40
		nodeConfig.DstAddress =
				(uint32_t) ABUF_audioBufferPtrs[i].rightRxSecHalf;
 8002aee:	4a3f      	ldr	r2, [pc, #252]	@ (8002bec <MDMA_init+0x44c>)
 8002af0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002af2:	015b      	lsls	r3, r3, #5
 8002af4:	4413      	add	r3, r2
 8002af6:	330c      	adds	r3, #12
 8002af8:	681b      	ldr	r3, [r3, #0]
		nodeConfig.DstAddress =
 8002afa:	647b      	str	r3, [r7, #68]	@ 0x44
		nodeConfig.BlockDataLength = AUDIO_BUFFER_SIZE_HALF;
 8002afc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b00:	64bb      	str	r3, [r7, #72]	@ 0x48
		nodeConfig.BlockCount = 1;
 8002b02:	2301      	movs	r3, #1
 8002b04:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (HAL_MDMA_LinkedList_CreateNode(
				&MDMA_ch0Nodes[AUDIO_STEREO_CHANNEL_COUNT * 2 + i * 2 + 1],
 8002b06:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	1cda      	adds	r2, r3, #3
		if (HAL_MDMA_LinkedList_CreateNode(
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	4413      	add	r3, r2
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	4a36      	ldr	r2, [pc, #216]	@ (8002bf0 <MDMA_init+0x450>)
 8002b16:	4413      	add	r3, r2
 8002b18:	f107 0208 	add.w	r2, r7, #8
 8002b1c:	4611      	mov	r1, r2
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f004 f950 	bl	8006dc4 <HAL_MDMA_LinkedList_CreateNode>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d001      	beq.n	8002b2e <MDMA_init+0x38e>
				&nodeConfig) != HAL_OK)
		{
			Error_Handler();
 8002b2a:	f7ff fe33 	bl	8002794 <Error_Handler>
		}
		if (HAL_MDMA_LinkedList_AddNode(&MDMA_ch0Sw0,
				&MDMA_ch0Nodes[AUDIO_STEREO_CHANNEL_COUNT * 2 + i * 2 + 1], 0)
 8002b2e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	1cda      	adds	r2, r3, #3
		if (HAL_MDMA_LinkedList_AddNode(&MDMA_ch0Sw0,
 8002b34:	4613      	mov	r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	4413      	add	r3, r2
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	4a2c      	ldr	r2, [pc, #176]	@ (8002bf0 <MDMA_init+0x450>)
 8002b3e:	4413      	add	r3, r2
 8002b40:	2200      	movs	r2, #0
 8002b42:	4619      	mov	r1, r3
 8002b44:	482b      	ldr	r0, [pc, #172]	@ (8002bf4 <MDMA_init+0x454>)
 8002b46:	f004 fa19 	bl	8006f7c <HAL_MDMA_LinkedList_AddNode>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d001      	beq.n	8002b54 <MDMA_init+0x3b4>
				!= HAL_OK)
		{
			Error_Handler();
 8002b50:	f7ff fe20 	bl	8002794 <Error_Handler>
	for (size_t i = 0; i < AUDIO_STEREO_CHANNEL_COUNT;)
 8002b54:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	f43f af3e 	beq.w	80029d8 <MDMA_init+0x238>
		}
	}

	if (HAL_MDMA_LinkedList_EnableCircularMode(&MDMA_ch0Sw0) != HAL_OK)
 8002b5c:	4825      	ldr	r0, [pc, #148]	@ (8002bf4 <MDMA_init+0x454>)
 8002b5e:	f004 fad1 	bl	8007104 <HAL_MDMA_LinkedList_EnableCircularMode>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d001      	beq.n	8002b6c <MDMA_init+0x3cc>
	{
		Error_Handler();
 8002b68:	f7ff fe14 	bl	8002794 <Error_Handler>
	}

	/* Configure MDMA channel MDMA_Channel1 */
	MDMA_ch1Sw0.Instance = MDMA_Channel1;
 8002b6c:	4b22      	ldr	r3, [pc, #136]	@ (8002bf8 <MDMA_init+0x458>)
 8002b6e:	4a23      	ldr	r2, [pc, #140]	@ (8002bfc <MDMA_init+0x45c>)
 8002b70:	601a      	str	r2, [r3, #0]
	MDMA_ch1Sw0.Init.Request = MDMA_REQUEST_SW;
 8002b72:	4b21      	ldr	r3, [pc, #132]	@ (8002bf8 <MDMA_init+0x458>)
 8002b74:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002b78:	605a      	str	r2, [r3, #4]
	MDMA_ch1Sw0.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 8002b7a:	4b1f      	ldr	r3, [pc, #124]	@ (8002bf8 <MDMA_init+0x458>)
 8002b7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b80:	609a      	str	r2, [r3, #8]
	MDMA_ch1Sw0.Init.Priority = MDMA_PRIORITY_HIGH;
 8002b82:	4b1d      	ldr	r3, [pc, #116]	@ (8002bf8 <MDMA_init+0x458>)
 8002b84:	2280      	movs	r2, #128	@ 0x80
 8002b86:	60da      	str	r2, [r3, #12]
	MDMA_ch1Sw0.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8002b88:	4b1b      	ldr	r3, [pc, #108]	@ (8002bf8 <MDMA_init+0x458>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	611a      	str	r2, [r3, #16]
	MDMA_ch1Sw0.Init.SourceInc = MDMA_SRC_INC_HALFWORD;
 8002b8e:	4b1a      	ldr	r3, [pc, #104]	@ (8002bf8 <MDMA_init+0x458>)
 8002b90:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8002b94:	615a      	str	r2, [r3, #20]
	MDMA_ch1Sw0.Init.DestinationInc = MDMA_DEST_INC_WORD;
 8002b96:	4b18      	ldr	r3, [pc, #96]	@ (8002bf8 <MDMA_init+0x458>)
 8002b98:	f640 0208 	movw	r2, #2056	@ 0x808
 8002b9c:	619a      	str	r2, [r3, #24]
	MDMA_ch1Sw0.Init.SourceDataSize = MDMA_SRC_DATASIZE_HALFWORD;
 8002b9e:	4b16      	ldr	r3, [pc, #88]	@ (8002bf8 <MDMA_init+0x458>)
 8002ba0:	2210      	movs	r2, #16
 8002ba2:	61da      	str	r2, [r3, #28]
	MDMA_ch1Sw0.Init.DestDataSize = MDMA_DEST_DATASIZE_HALFWORD;
 8002ba4:	4b14      	ldr	r3, [pc, #80]	@ (8002bf8 <MDMA_init+0x458>)
 8002ba6:	2240      	movs	r2, #64	@ 0x40
 8002ba8:	621a      	str	r2, [r3, #32]
	MDMA_ch1Sw0.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8002baa:	4b13      	ldr	r3, [pc, #76]	@ (8002bf8 <MDMA_init+0x458>)
 8002bac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002bb0:	625a      	str	r2, [r3, #36]	@ 0x24
	MDMA_ch1Sw0.Init.BufferTransferLength = AUDIO_SAMPLE_SIZE;
 8002bb2:	4b11      	ldr	r3, [pc, #68]	@ (8002bf8 <MDMA_init+0x458>)
 8002bb4:	2202      	movs	r2, #2
 8002bb6:	629a      	str	r2, [r3, #40]	@ 0x28
	MDMA_ch1Sw0.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8002bb8:	4b0f      	ldr	r3, [pc, #60]	@ (8002bf8 <MDMA_init+0x458>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	62da      	str	r2, [r3, #44]	@ 0x2c
	MDMA_ch1Sw0.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8002bbe:	4b0e      	ldr	r3, [pc, #56]	@ (8002bf8 <MDMA_init+0x458>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	631a      	str	r2, [r3, #48]	@ 0x30
	MDMA_ch1Sw0.Init.SourceBlockAddressOffset = 0;
 8002bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8002bf8 <MDMA_init+0x458>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	635a      	str	r2, [r3, #52]	@ 0x34
	MDMA_ch1Sw0.Init.DestBlockAddressOffset = 0;
 8002bca:	4b0b      	ldr	r3, [pc, #44]	@ (8002bf8 <MDMA_init+0x458>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	639a      	str	r2, [r3, #56]	@ 0x38
	if (HAL_MDMA_Init(&MDMA_ch1Sw0) != HAL_OK)
 8002bd0:	4809      	ldr	r0, [pc, #36]	@ (8002bf8 <MDMA_init+0x458>)
 8002bd2:	f004 f850 	bl	8006c76 <HAL_MDMA_Init>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d001      	beq.n	8002be0 <MDMA_init+0x440>
	{
		Error_Handler();
 8002bdc:	f7ff fdda 	bl	8002794 <Error_Handler>
	}

	for (size_t i = 0; i < AUDIO_STEREO_CHANNEL_COUNT;)
 8002be0:	2300      	movs	r3, #0
 8002be2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002be4:	e0c8      	b.n	8002d78 <MDMA_init+0x5d8>
 8002be6:	bf00      	nop
 8002be8:	24000830 	.word	0x24000830
 8002bec:	24000850 	.word	0x24000850
 8002bf0:	24000ea8 	.word	0x24000ea8
 8002bf4:	24000e38 	.word	0x24000e38
 8002bf8:	24000ef8 	.word	0x24000ef8
 8002bfc:	52000080 	.word	0x52000080
	{
		nodeConfig.Init.Request = MDMA_REQUEST_SW;
 8002c00:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002c04:	60bb      	str	r3, [r7, #8]
		nodeConfig.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 8002c06:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002c0a:	60fb      	str	r3, [r7, #12]
		nodeConfig.Init.Priority = MDMA_PRIORITY_HIGH;
 8002c0c:	2380      	movs	r3, #128	@ 0x80
 8002c0e:	613b      	str	r3, [r7, #16]
		nodeConfig.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8002c10:	2300      	movs	r3, #0
 8002c12:	617b      	str	r3, [r7, #20]
		nodeConfig.Init.SourceInc = MDMA_SRC_INC_HALFWORD;
 8002c14:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8002c18:	61bb      	str	r3, [r7, #24]
		nodeConfig.Init.DestinationInc = MDMA_DEST_INC_WORD;
 8002c1a:	f640 0308 	movw	r3, #2056	@ 0x808
 8002c1e:	61fb      	str	r3, [r7, #28]
		nodeConfig.Init.SourceDataSize = MDMA_SRC_DATASIZE_HALFWORD;
 8002c20:	2310      	movs	r3, #16
 8002c22:	623b      	str	r3, [r7, #32]
		nodeConfig.Init.DestDataSize = MDMA_DEST_DATASIZE_HALFWORD;
 8002c24:	2340      	movs	r3, #64	@ 0x40
 8002c26:	627b      	str	r3, [r7, #36]	@ 0x24
		nodeConfig.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8002c28:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c2c:	62bb      	str	r3, [r7, #40]	@ 0x28
		nodeConfig.Init.BufferTransferLength = AUDIO_SAMPLE_SIZE;
 8002c2e:	2302      	movs	r3, #2
 8002c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
		nodeConfig.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8002c32:	2300      	movs	r3, #0
 8002c34:	633b      	str	r3, [r7, #48]	@ 0x30
		nodeConfig.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8002c36:	2300      	movs	r3, #0
 8002c38:	637b      	str	r3, [r7, #52]	@ 0x34
		nodeConfig.Init.SourceBlockAddressOffset = 0;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	63bb      	str	r3, [r7, #56]	@ 0x38
		nodeConfig.Init.DestBlockAddressOffset = 0;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	63fb      	str	r3, [r7, #60]	@ 0x3c
		nodeConfig.PostRequestMaskAddress = 0;
 8002c42:	2300      	movs	r3, #0
 8002c44:	653b      	str	r3, [r7, #80]	@ 0x50
		nodeConfig.PostRequestMaskData = 0;
 8002c46:	2300      	movs	r3, #0
 8002c48:	657b      	str	r3, [r7, #84]	@ 0x54
		nodeConfig.SrcAddress =
				(uint32_t) ABUF_audioBufferPtrs[i].leftTxFirstHalf;
 8002c4a:	4a4f      	ldr	r2, [pc, #316]	@ (8002d88 <MDMA_init+0x5e8>)
 8002c4c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c4e:	015b      	lsls	r3, r3, #5
 8002c50:	4413      	add	r3, r2
 8002c52:	3310      	adds	r3, #16
 8002c54:	681b      	ldr	r3, [r3, #0]
		nodeConfig.SrcAddress =
 8002c56:	643b      	str	r3, [r7, #64]	@ 0x40
		nodeConfig.DstAddress =
				(uint32_t) ABUF_saiBufferPtrs[i].leftTxFirstHalf;
 8002c58:	4a4c      	ldr	r2, [pc, #304]	@ (8002d8c <MDMA_init+0x5ec>)
 8002c5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c5c:	015b      	lsls	r3, r3, #5
 8002c5e:	4413      	add	r3, r2
 8002c60:	3310      	adds	r3, #16
 8002c62:	681b      	ldr	r3, [r3, #0]
		nodeConfig.DstAddress =
 8002c64:	647b      	str	r3, [r7, #68]	@ 0x44
		nodeConfig.BlockDataLength = AUDIO_BUFFER_SIZE_HALF;
 8002c66:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c6a:	64bb      	str	r3, [r7, #72]	@ 0x48
		nodeConfig.BlockCount = 1;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (HAL_MDMA_LinkedList_CreateNode(&MDMA_ch1Nodes[i * 2], &nodeConfig)
 8002c70:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c72:	005a      	lsls	r2, r3, #1
 8002c74:	4613      	mov	r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	4413      	add	r3, r2
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	4a44      	ldr	r2, [pc, #272]	@ (8002d90 <MDMA_init+0x5f0>)
 8002c7e:	4413      	add	r3, r2
 8002c80:	f107 0208 	add.w	r2, r7, #8
 8002c84:	4611      	mov	r1, r2
 8002c86:	4618      	mov	r0, r3
 8002c88:	f004 f89c 	bl	8006dc4 <HAL_MDMA_LinkedList_CreateNode>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d001      	beq.n	8002c96 <MDMA_init+0x4f6>
				!= HAL_OK)
		{
			Error_Handler();
 8002c92:	f7ff fd7f 	bl	8002794 <Error_Handler>
		}
		if (HAL_MDMA_LinkedList_AddNode(&MDMA_ch1Sw0, &MDMA_ch1Nodes[i * 2], 0)
 8002c96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c98:	005a      	lsls	r2, r3, #1
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	4413      	add	r3, r2
 8002ca0:	00db      	lsls	r3, r3, #3
 8002ca2:	4a3b      	ldr	r2, [pc, #236]	@ (8002d90 <MDMA_init+0x5f0>)
 8002ca4:	4413      	add	r3, r2
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	4619      	mov	r1, r3
 8002caa:	483a      	ldr	r0, [pc, #232]	@ (8002d94 <MDMA_init+0x5f4>)
 8002cac:	f004 f966 	bl	8006f7c <HAL_MDMA_LinkedList_AddNode>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <MDMA_init+0x51a>
				!= HAL_OK)
		{
			Error_Handler();
 8002cb6:	f7ff fd6d 	bl	8002794 <Error_Handler>
		}
		nodeConfig.Init.Request = MDMA_REQUEST_SW;
 8002cba:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002cbe:	60bb      	str	r3, [r7, #8]
		nodeConfig.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 8002cc0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002cc4:	60fb      	str	r3, [r7, #12]
		nodeConfig.Init.Priority = MDMA_PRIORITY_HIGH;
 8002cc6:	2380      	movs	r3, #128	@ 0x80
 8002cc8:	613b      	str	r3, [r7, #16]
		nodeConfig.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	617b      	str	r3, [r7, #20]
		nodeConfig.Init.SourceInc = MDMA_SRC_INC_HALFWORD;
 8002cce:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8002cd2:	61bb      	str	r3, [r7, #24]
		nodeConfig.Init.DestinationInc = MDMA_DEST_INC_WORD;
 8002cd4:	f640 0308 	movw	r3, #2056	@ 0x808
 8002cd8:	61fb      	str	r3, [r7, #28]
		nodeConfig.Init.SourceDataSize = MDMA_SRC_DATASIZE_HALFWORD;
 8002cda:	2310      	movs	r3, #16
 8002cdc:	623b      	str	r3, [r7, #32]
		nodeConfig.Init.DestDataSize = MDMA_DEST_DATASIZE_HALFWORD;
 8002cde:	2340      	movs	r3, #64	@ 0x40
 8002ce0:	627b      	str	r3, [r7, #36]	@ 0x24
		nodeConfig.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8002ce2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ce6:	62bb      	str	r3, [r7, #40]	@ 0x28
		nodeConfig.Init.BufferTransferLength = AUDIO_SAMPLE_SIZE;
 8002ce8:	2302      	movs	r3, #2
 8002cea:	62fb      	str	r3, [r7, #44]	@ 0x2c
		nodeConfig.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8002cec:	2300      	movs	r3, #0
 8002cee:	633b      	str	r3, [r7, #48]	@ 0x30
		nodeConfig.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	637b      	str	r3, [r7, #52]	@ 0x34
		nodeConfig.Init.SourceBlockAddressOffset = 0;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	63bb      	str	r3, [r7, #56]	@ 0x38
		nodeConfig.Init.DestBlockAddressOffset = 0;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
		nodeConfig.PostRequestMaskAddress = 0;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	653b      	str	r3, [r7, #80]	@ 0x50
		nodeConfig.PostRequestMaskData = 0;
 8002d00:	2300      	movs	r3, #0
 8002d02:	657b      	str	r3, [r7, #84]	@ 0x54
		nodeConfig.SrcAddress =
				(uint32_t) ABUF_audioBufferPtrs[i].rightTxFirstHalf;
 8002d04:	4a20      	ldr	r2, [pc, #128]	@ (8002d88 <MDMA_init+0x5e8>)
 8002d06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d08:	015b      	lsls	r3, r3, #5
 8002d0a:	4413      	add	r3, r2
 8002d0c:	3314      	adds	r3, #20
 8002d0e:	681b      	ldr	r3, [r3, #0]
		nodeConfig.SrcAddress =
 8002d10:	643b      	str	r3, [r7, #64]	@ 0x40
		nodeConfig.DstAddress =
				(uint32_t) ABUF_saiBufferPtrs[i].rightTxFirstHalf;
 8002d12:	4a1e      	ldr	r2, [pc, #120]	@ (8002d8c <MDMA_init+0x5ec>)
 8002d14:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d16:	015b      	lsls	r3, r3, #5
 8002d18:	4413      	add	r3, r2
 8002d1a:	3314      	adds	r3, #20
 8002d1c:	681b      	ldr	r3, [r3, #0]
		nodeConfig.DstAddress =
 8002d1e:	647b      	str	r3, [r7, #68]	@ 0x44
		nodeConfig.BlockDataLength = AUDIO_BUFFER_SIZE_HALF;
 8002d20:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002d24:	64bb      	str	r3, [r7, #72]	@ 0x48
		nodeConfig.BlockCount = 1;
 8002d26:	2301      	movs	r3, #1
 8002d28:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (HAL_MDMA_LinkedList_CreateNode(&MDMA_ch1Nodes[i * 2 + 1],
 8002d2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d2c:	005b      	lsls	r3, r3, #1
 8002d2e:	1c5a      	adds	r2, r3, #1
 8002d30:	4613      	mov	r3, r2
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	4413      	add	r3, r2
 8002d36:	00db      	lsls	r3, r3, #3
 8002d38:	4a15      	ldr	r2, [pc, #84]	@ (8002d90 <MDMA_init+0x5f0>)
 8002d3a:	4413      	add	r3, r2
 8002d3c:	f107 0208 	add.w	r2, r7, #8
 8002d40:	4611      	mov	r1, r2
 8002d42:	4618      	mov	r0, r3
 8002d44:	f004 f83e 	bl	8006dc4 <HAL_MDMA_LinkedList_CreateNode>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d001      	beq.n	8002d52 <MDMA_init+0x5b2>
				&nodeConfig) != HAL_OK)
		{
			Error_Handler();
 8002d4e:	f7ff fd21 	bl	8002794 <Error_Handler>
		}
		if (HAL_MDMA_LinkedList_AddNode(&MDMA_ch1Sw0, &MDMA_ch1Nodes[i * 2 + 1],
 8002d52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d54:	005b      	lsls	r3, r3, #1
 8002d56:	1c5a      	adds	r2, r3, #1
 8002d58:	4613      	mov	r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	4413      	add	r3, r2
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	4a0b      	ldr	r2, [pc, #44]	@ (8002d90 <MDMA_init+0x5f0>)
 8002d62:	4413      	add	r3, r2
 8002d64:	2200      	movs	r2, #0
 8002d66:	4619      	mov	r1, r3
 8002d68:	480a      	ldr	r0, [pc, #40]	@ (8002d94 <MDMA_init+0x5f4>)
 8002d6a:	f004 f907 	bl	8006f7c <HAL_MDMA_LinkedList_AddNode>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d001      	beq.n	8002d78 <MDMA_init+0x5d8>
				0) != HAL_OK)
		{
			Error_Handler();
 8002d74:	f7ff fd0e 	bl	8002794 <Error_Handler>
	for (size_t i = 0; i < AUDIO_STEREO_CHANNEL_COUNT;)
 8002d78:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	f43f af40 	beq.w	8002c00 <MDMA_init+0x460>
		}
	}
	for (size_t i = 0; i < AUDIO_STEREO_CHANNEL_COUNT;)
 8002d80:	2300      	movs	r3, #0
 8002d82:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002d84:	e0c6      	b.n	8002f14 <MDMA_init+0x774>
 8002d86:	bf00      	nop
 8002d88:	24000850 	.word	0x24000850
 8002d8c:	24000830 	.word	0x24000830
 8002d90:	24000f68 	.word	0x24000f68
 8002d94:	24000ef8 	.word	0x24000ef8
	{
		nodeConfig.Init.Request = MDMA_REQUEST_SW;
 8002d98:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002d9c:	60bb      	str	r3, [r7, #8]
		nodeConfig.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 8002d9e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002da2:	60fb      	str	r3, [r7, #12]
		nodeConfig.Init.Priority = MDMA_PRIORITY_HIGH;
 8002da4:	2380      	movs	r3, #128	@ 0x80
 8002da6:	613b      	str	r3, [r7, #16]
		nodeConfig.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8002da8:	2300      	movs	r3, #0
 8002daa:	617b      	str	r3, [r7, #20]
		nodeConfig.Init.SourceInc = MDMA_SRC_INC_HALFWORD;
 8002dac:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8002db0:	61bb      	str	r3, [r7, #24]
		nodeConfig.Init.DestinationInc = MDMA_DEST_INC_WORD;
 8002db2:	f640 0308 	movw	r3, #2056	@ 0x808
 8002db6:	61fb      	str	r3, [r7, #28]
		nodeConfig.Init.SourceDataSize = MDMA_SRC_DATASIZE_HALFWORD;
 8002db8:	2310      	movs	r3, #16
 8002dba:	623b      	str	r3, [r7, #32]
		nodeConfig.Init.DestDataSize = MDMA_DEST_DATASIZE_HALFWORD;
 8002dbc:	2340      	movs	r3, #64	@ 0x40
 8002dbe:	627b      	str	r3, [r7, #36]	@ 0x24
		nodeConfig.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8002dc0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002dc4:	62bb      	str	r3, [r7, #40]	@ 0x28
		nodeConfig.Init.BufferTransferLength = AUDIO_SAMPLE_SIZE;
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		nodeConfig.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	633b      	str	r3, [r7, #48]	@ 0x30
		nodeConfig.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	637b      	str	r3, [r7, #52]	@ 0x34
		nodeConfig.Init.SourceBlockAddressOffset = 0;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	63bb      	str	r3, [r7, #56]	@ 0x38
		nodeConfig.Init.DestBlockAddressOffset = 0;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
		nodeConfig.PostRequestMaskAddress = 0;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	653b      	str	r3, [r7, #80]	@ 0x50
		nodeConfig.PostRequestMaskData = 0;
 8002dde:	2300      	movs	r3, #0
 8002de0:	657b      	str	r3, [r7, #84]	@ 0x54
		nodeConfig.SrcAddress =
				(uint32_t) ABUF_audioBufferPtrs[i].leftTxSecHalf;
 8002de2:	4a5b      	ldr	r2, [pc, #364]	@ (8002f50 <MDMA_init+0x7b0>)
 8002de4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002de6:	015b      	lsls	r3, r3, #5
 8002de8:	4413      	add	r3, r2
 8002dea:	3318      	adds	r3, #24
 8002dec:	681b      	ldr	r3, [r3, #0]
		nodeConfig.SrcAddress =
 8002dee:	643b      	str	r3, [r7, #64]	@ 0x40
		nodeConfig.DstAddress = (uint32_t) ABUF_saiBufferPtrs[i].leftTxSecHalf;
 8002df0:	4a58      	ldr	r2, [pc, #352]	@ (8002f54 <MDMA_init+0x7b4>)
 8002df2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002df4:	015b      	lsls	r3, r3, #5
 8002df6:	4413      	add	r3, r2
 8002df8:	3318      	adds	r3, #24
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	647b      	str	r3, [r7, #68]	@ 0x44
		nodeConfig.BlockDataLength = AUDIO_BUFFER_SIZE_HALF;
 8002dfe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e02:	64bb      	str	r3, [r7, #72]	@ 0x48
		nodeConfig.BlockCount = 1;
 8002e04:	2301      	movs	r3, #1
 8002e06:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (HAL_MDMA_LinkedList_CreateNode(
				&MDMA_ch1Nodes[AUDIO_STEREO_CHANNEL_COUNT * 2 + i * 2],
 8002e08:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	005a      	lsls	r2, r3, #1
		if (HAL_MDMA_LinkedList_CreateNode(
 8002e0e:	4613      	mov	r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	4413      	add	r3, r2
 8002e14:	00db      	lsls	r3, r3, #3
 8002e16:	4a50      	ldr	r2, [pc, #320]	@ (8002f58 <MDMA_init+0x7b8>)
 8002e18:	4413      	add	r3, r2
 8002e1a:	f107 0208 	add.w	r2, r7, #8
 8002e1e:	4611      	mov	r1, r2
 8002e20:	4618      	mov	r0, r3
 8002e22:	f003 ffcf 	bl	8006dc4 <HAL_MDMA_LinkedList_CreateNode>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d001      	beq.n	8002e30 <MDMA_init+0x690>
				&nodeConfig) != HAL_OK)
		{
			Error_Handler();
 8002e2c:	f7ff fcb2 	bl	8002794 <Error_Handler>
		}
		if (HAL_MDMA_LinkedList_AddNode(&MDMA_ch1Sw0,
				&MDMA_ch1Nodes[AUDIO_STEREO_CHANNEL_COUNT * 2 + i * 2], 0)
 8002e30:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002e32:	3301      	adds	r3, #1
 8002e34:	005a      	lsls	r2, r3, #1
		if (HAL_MDMA_LinkedList_AddNode(&MDMA_ch1Sw0,
 8002e36:	4613      	mov	r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	4413      	add	r3, r2
 8002e3c:	00db      	lsls	r3, r3, #3
 8002e3e:	4a46      	ldr	r2, [pc, #280]	@ (8002f58 <MDMA_init+0x7b8>)
 8002e40:	4413      	add	r3, r2
 8002e42:	2200      	movs	r2, #0
 8002e44:	4619      	mov	r1, r3
 8002e46:	4845      	ldr	r0, [pc, #276]	@ (8002f5c <MDMA_init+0x7bc>)
 8002e48:	f004 f898 	bl	8006f7c <HAL_MDMA_LinkedList_AddNode>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <MDMA_init+0x6b6>
				!= HAL_OK)
		{
			Error_Handler();
 8002e52:	f7ff fc9f 	bl	8002794 <Error_Handler>
		}
		nodeConfig.Init.Request = MDMA_REQUEST_SW;
 8002e56:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002e5a:	60bb      	str	r3, [r7, #8]
		nodeConfig.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 8002e5c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002e60:	60fb      	str	r3, [r7, #12]
		nodeConfig.Init.Priority = MDMA_PRIORITY_HIGH;
 8002e62:	2380      	movs	r3, #128	@ 0x80
 8002e64:	613b      	str	r3, [r7, #16]
		nodeConfig.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8002e66:	2300      	movs	r3, #0
 8002e68:	617b      	str	r3, [r7, #20]
		nodeConfig.Init.SourceInc = MDMA_SRC_INC_HALFWORD;
 8002e6a:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8002e6e:	61bb      	str	r3, [r7, #24]
		nodeConfig.Init.DestinationInc = MDMA_DEST_INC_WORD;
 8002e70:	f640 0308 	movw	r3, #2056	@ 0x808
 8002e74:	61fb      	str	r3, [r7, #28]
		nodeConfig.Init.SourceDataSize = MDMA_SRC_DATASIZE_HALFWORD;
 8002e76:	2310      	movs	r3, #16
 8002e78:	623b      	str	r3, [r7, #32]
		nodeConfig.Init.DestDataSize = MDMA_DEST_DATASIZE_HALFWORD;
 8002e7a:	2340      	movs	r3, #64	@ 0x40
 8002e7c:	627b      	str	r3, [r7, #36]	@ 0x24
		nodeConfig.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8002e7e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e82:	62bb      	str	r3, [r7, #40]	@ 0x28
		nodeConfig.Init.BufferTransferLength = AUDIO_SAMPLE_SIZE;
 8002e84:	2302      	movs	r3, #2
 8002e86:	62fb      	str	r3, [r7, #44]	@ 0x2c
		nodeConfig.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	633b      	str	r3, [r7, #48]	@ 0x30
		nodeConfig.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	637b      	str	r3, [r7, #52]	@ 0x34
		nodeConfig.Init.SourceBlockAddressOffset = 0;
 8002e90:	2300      	movs	r3, #0
 8002e92:	63bb      	str	r3, [r7, #56]	@ 0x38
		nodeConfig.Init.DestBlockAddressOffset = 0;
 8002e94:	2300      	movs	r3, #0
 8002e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
		nodeConfig.PostRequestMaskAddress = 0;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	653b      	str	r3, [r7, #80]	@ 0x50
		nodeConfig.PostRequestMaskData = 0;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	657b      	str	r3, [r7, #84]	@ 0x54
		nodeConfig.SrcAddress =
				(uint32_t) ABUF_audioBufferPtrs[i].rightTxSecHalf;
 8002ea0:	4a2b      	ldr	r2, [pc, #172]	@ (8002f50 <MDMA_init+0x7b0>)
 8002ea2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ea4:	015b      	lsls	r3, r3, #5
 8002ea6:	4413      	add	r3, r2
 8002ea8:	331c      	adds	r3, #28
 8002eaa:	681b      	ldr	r3, [r3, #0]
		nodeConfig.SrcAddress =
 8002eac:	643b      	str	r3, [r7, #64]	@ 0x40
		nodeConfig.DstAddress = (uint32_t) ABUF_saiBufferPtrs[i].rightTxSecHalf;
 8002eae:	4a29      	ldr	r2, [pc, #164]	@ (8002f54 <MDMA_init+0x7b4>)
 8002eb0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002eb2:	015b      	lsls	r3, r3, #5
 8002eb4:	4413      	add	r3, r2
 8002eb6:	331c      	adds	r3, #28
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	647b      	str	r3, [r7, #68]	@ 0x44
		nodeConfig.BlockDataLength = AUDIO_BUFFER_SIZE_HALF;
 8002ebc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ec0:	64bb      	str	r3, [r7, #72]	@ 0x48
		nodeConfig.BlockCount = 1;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (HAL_MDMA_LinkedList_CreateNode(
				&MDMA_ch1Nodes[AUDIO_STEREO_CHANNEL_COUNT * 2 + i * 2 + 1],
 8002ec6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	1cda      	adds	r2, r3, #3
		if (HAL_MDMA_LinkedList_CreateNode(
 8002ecc:	4613      	mov	r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	4413      	add	r3, r2
 8002ed2:	00db      	lsls	r3, r3, #3
 8002ed4:	4a20      	ldr	r2, [pc, #128]	@ (8002f58 <MDMA_init+0x7b8>)
 8002ed6:	4413      	add	r3, r2
 8002ed8:	f107 0208 	add.w	r2, r7, #8
 8002edc:	4611      	mov	r1, r2
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f003 ff70 	bl	8006dc4 <HAL_MDMA_LinkedList_CreateNode>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <MDMA_init+0x74e>
				&nodeConfig) != HAL_OK)
		{
			Error_Handler();
 8002eea:	f7ff fc53 	bl	8002794 <Error_Handler>
		}
		if (HAL_MDMA_LinkedList_AddNode(&MDMA_ch1Sw0,
				&MDMA_ch1Nodes[AUDIO_STEREO_CHANNEL_COUNT * 2 + i * 2 + 1], 0)
 8002eee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	1cda      	adds	r2, r3, #3
		if (HAL_MDMA_LinkedList_AddNode(&MDMA_ch1Sw0,
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	4413      	add	r3, r2
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	4a16      	ldr	r2, [pc, #88]	@ (8002f58 <MDMA_init+0x7b8>)
 8002efe:	4413      	add	r3, r2
 8002f00:	2200      	movs	r2, #0
 8002f02:	4619      	mov	r1, r3
 8002f04:	4815      	ldr	r0, [pc, #84]	@ (8002f5c <MDMA_init+0x7bc>)
 8002f06:	f004 f839 	bl	8006f7c <HAL_MDMA_LinkedList_AddNode>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d001      	beq.n	8002f14 <MDMA_init+0x774>
				!= HAL_OK)
		{
			Error_Handler();
 8002f10:	f7ff fc40 	bl	8002794 <Error_Handler>
	for (size_t i = 0; i < AUDIO_STEREO_CHANNEL_COUNT;)
 8002f14:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	f43f af3e 	beq.w	8002d98 <MDMA_init+0x5f8>
		}
	}

	if (HAL_MDMA_LinkedList_EnableCircularMode(&MDMA_ch1Sw0) != HAL_OK)
 8002f1c:	480f      	ldr	r0, [pc, #60]	@ (8002f5c <MDMA_init+0x7bc>)
 8002f1e:	f004 f8f1 	bl	8007104 <HAL_MDMA_LinkedList_EnableCircularMode>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d001      	beq.n	8002f2c <MDMA_init+0x78c>
	{
		Error_Handler();
 8002f28:	f7ff fc34 	bl	8002794 <Error_Handler>
	}

	/* MDMA interrupt initialization */
	/* MDMA_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(MDMA_IRQn, 0, 0);
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	2100      	movs	r1, #0
 8002f30:	207a      	movs	r0, #122	@ 0x7a
 8002f32:	f000 fca6 	bl	8003882 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8002f36:	207a      	movs	r0, #122	@ 0x7a
 8002f38:	f000 fcbd 	bl	80038b6 <HAL_NVIC_EnableIRQ>

	/* Set the MDMA instance for the RX and TX */
	MDMA_hmdmaRxInstance = &MDMA_ch0Sw0;
 8002f3c:	4b08      	ldr	r3, [pc, #32]	@ (8002f60 <MDMA_init+0x7c0>)
 8002f3e:	4a09      	ldr	r2, [pc, #36]	@ (8002f64 <MDMA_init+0x7c4>)
 8002f40:	601a      	str	r2, [r3, #0]
	MDMA_hmdmaTxInstance = &MDMA_ch1Sw0;
 8002f42:	4b09      	ldr	r3, [pc, #36]	@ (8002f68 <MDMA_init+0x7c8>)
 8002f44:	4a05      	ldr	r2, [pc, #20]	@ (8002f5c <MDMA_init+0x7bc>)
 8002f46:	601a      	str	r2, [r3, #0]
}
 8002f48:	bf00      	nop
 8002f4a:	3768      	adds	r7, #104	@ 0x68
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	24000850 	.word	0x24000850
 8002f54:	24000830 	.word	0x24000830
 8002f58:	24000f68 	.word	0x24000f68
 8002f5c:	24000ef8 	.word	0x24000ef8
 8002f60:	24000fb8 	.word	0x24000fb8
 8002f64:	24000e38 	.word	0x24000e38
 8002f68:	24000fbc 	.word	0x24000fbc

08002f6c <MDMA_registerRxCallbacks>:

HAL_StatusTypeDef MDMA_registerRxCallbacks(
		void (*pXferCallback)(MDMA_HandleTypeDef *_hmdma),
		void (*pErrorCallback)(MDMA_HandleTypeDef *_hmdma))
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status;

	/* Register transfer callback */
	status = HAL_MDMA_RegisterCallback(&MDMA_ch0Sw0, HAL_MDMA_XFER_ALL_CB_ID,
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	2106      	movs	r1, #6
 8002f7a:	480a      	ldr	r0, [pc, #40]	@ (8002fa4 <MDMA_registerRxCallbacks+0x38>)
 8002f7c:	f003 fec8 	bl	8006d10 <HAL_MDMA_RegisterCallback>
 8002f80:	4603      	mov	r3, r0
 8002f82:	73fb      	strb	r3, [r7, #15]
			pXferCallback);
	if (status != HAL_OK)
 8002f84:	7bfb      	ldrb	r3, [r7, #15]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <MDMA_registerRxCallbacks+0x22>
	{
		return status;
 8002f8a:	7bfb      	ldrb	r3, [r7, #15]
 8002f8c:	e005      	b.n	8002f9a <MDMA_registerRxCallbacks+0x2e>
	}
	/* Register the error callback */
	return HAL_MDMA_RegisterCallback(&MDMA_ch0Sw0, HAL_MDMA_XFER_ERROR_CB_ID,
 8002f8e:	683a      	ldr	r2, [r7, #0]
 8002f90:	2104      	movs	r1, #4
 8002f92:	4804      	ldr	r0, [pc, #16]	@ (8002fa4 <MDMA_registerRxCallbacks+0x38>)
 8002f94:	f003 febc 	bl	8006d10 <HAL_MDMA_RegisterCallback>
 8002f98:	4603      	mov	r3, r0
			pErrorCallback);
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	24000e38 	.word	0x24000e38

08002fa8 <MDMA_registerTxCallbacks>:

HAL_StatusTypeDef MDMA_registerTxCallbacks(
		void (*pXferCallback)(MDMA_HandleTypeDef *_hmdma),
		void (*pErrorCallback)(MDMA_HandleTypeDef *_hmdma))
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status;

	/* Register transfer callback */
	status = HAL_MDMA_RegisterCallback(&MDMA_ch1Sw0, HAL_MDMA_XFER_ALL_CB_ID,
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	2106      	movs	r1, #6
 8002fb6:	480a      	ldr	r0, [pc, #40]	@ (8002fe0 <MDMA_registerTxCallbacks+0x38>)
 8002fb8:	f003 feaa 	bl	8006d10 <HAL_MDMA_RegisterCallback>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	73fb      	strb	r3, [r7, #15]
			pXferCallback);
	if (status != HAL_OK)
 8002fc0:	7bfb      	ldrb	r3, [r7, #15]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <MDMA_registerTxCallbacks+0x22>
	{
		return status;
 8002fc6:	7bfb      	ldrb	r3, [r7, #15]
 8002fc8:	e005      	b.n	8002fd6 <MDMA_registerTxCallbacks+0x2e>
	}
	/* Register the error callback */
	return HAL_MDMA_RegisterCallback(&MDMA_ch1Sw0, HAL_MDMA_XFER_ERROR_CB_ID,
 8002fca:	683a      	ldr	r2, [r7, #0]
 8002fcc:	2104      	movs	r1, #4
 8002fce:	4804      	ldr	r0, [pc, #16]	@ (8002fe0 <MDMA_registerTxCallbacks+0x38>)
 8002fd0:	f003 fe9e 	bl	8006d10 <HAL_MDMA_RegisterCallback>
 8002fd4:	4603      	mov	r3, r0
			pErrorCallback);
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	24000ef8 	.word	0x24000ef8

08002fe4 <MDMA_getCurrentRxChIndex>:
			(uint32_t) ABUF_saiBufferPtrs[0].leftTxFirstHalf,
			AUDIO_BUFFER_SIZE_HALF, 1);
}

uint8_t MDMA_getCurrentRxChIndex(void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0

	/* Get the current channel index */
	uint8_t currNodeIndex = 0;
 8002fea:	2300      	movs	r3, #0
 8002fec:	71fb      	strb	r3, [r7, #7]
	MDMA_LinkNodeTypeDef *currNode = MDMA_hmdmaRxInstance->FirstLinkedListNodeAddress;
 8002fee:	4b10      	ldr	r3, [pc, #64]	@ (8003030 <MDMA_getCurrentRxChIndex+0x4c>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ff4:	603b      	str	r3, [r7, #0]
	for (;
 8002ff6:	e005      	b.n	8003004 <MDMA_getCurrentRxChIndex+0x20>
			currNodeIndex < MDMA_hmdmaRxInstance->LinkedListNodeCounter
					&& currNode
							!= (MDMA_LinkNodeTypeDef*) MDMA_hmdmaRxInstance->Instance->CLAR;
			currNodeIndex++, currNode = (MDMA_LinkNodeTypeDef*) currNode->CLAR)
 8002ff8:	79fb      	ldrb	r3, [r7, #7]
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	71fb      	strb	r3, [r7, #7]
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	603b      	str	r3, [r7, #0]
			currNodeIndex < MDMA_hmdmaRxInstance->LinkedListNodeCounter
 8003004:	79fa      	ldrb	r2, [r7, #7]
 8003006:	4b0a      	ldr	r3, [pc, #40]	@ (8003030 <MDMA_getCurrentRxChIndex+0x4c>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
					&& currNode
 800300c:	429a      	cmp	r2, r3
 800300e:	d207      	bcs.n	8003020 <MDMA_getCurrentRxChIndex+0x3c>
							!= (MDMA_LinkNodeTypeDef*) MDMA_hmdmaRxInstance->Instance->CLAR;
 8003010:	4b07      	ldr	r3, [pc, #28]	@ (8003030 <MDMA_getCurrentRxChIndex+0x4c>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003018:	461a      	mov	r2, r3
					&& currNode
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	4293      	cmp	r3, r2
 800301e:	d1eb      	bne.n	8002ff8 <MDMA_getCurrentRxChIndex+0x14>
	{}
	return currNodeIndex;
 8003020:	79fb      	ldrb	r3, [r7, #7]
}
 8003022:	4618      	mov	r0, r3
 8003024:	370c      	adds	r7, #12
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	24000fb8 	.word	0x24000fb8

08003034 <MDMA_getCurrentTxChIndex>:

uint8_t MDMA_getCurrentTxChIndex(void)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0

	/* Get the current channel index */
	uint8_t currNodeIndex = 0;
 800303a:	2300      	movs	r3, #0
 800303c:	71fb      	strb	r3, [r7, #7]
	MDMA_LinkNodeTypeDef *currNode = MDMA_hmdmaTxInstance->FirstLinkedListNodeAddress;
 800303e:	4b10      	ldr	r3, [pc, #64]	@ (8003080 <MDMA_getCurrentTxChIndex+0x4c>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003044:	603b      	str	r3, [r7, #0]
	for (;
 8003046:	e005      	b.n	8003054 <MDMA_getCurrentTxChIndex+0x20>
			currNodeIndex < MDMA_hmdmaTxInstance->LinkedListNodeCounter
					&& currNode
							!= (MDMA_LinkNodeTypeDef*) MDMA_hmdmaTxInstance->Instance->CLAR;
			currNodeIndex++, currNode = (MDMA_LinkNodeTypeDef*) currNode->CLAR)
 8003048:	79fb      	ldrb	r3, [r7, #7]
 800304a:	3301      	adds	r3, #1
 800304c:	71fb      	strb	r3, [r7, #7]
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	695b      	ldr	r3, [r3, #20]
 8003052:	603b      	str	r3, [r7, #0]
			currNodeIndex < MDMA_hmdmaTxInstance->LinkedListNodeCounter
 8003054:	79fa      	ldrb	r2, [r7, #7]
 8003056:	4b0a      	ldr	r3, [pc, #40]	@ (8003080 <MDMA_getCurrentTxChIndex+0x4c>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
					&& currNode
 800305c:	429a      	cmp	r2, r3
 800305e:	d207      	bcs.n	8003070 <MDMA_getCurrentTxChIndex+0x3c>
							!= (MDMA_LinkNodeTypeDef*) MDMA_hmdmaTxInstance->Instance->CLAR;
 8003060:	4b07      	ldr	r3, [pc, #28]	@ (8003080 <MDMA_getCurrentTxChIndex+0x4c>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003068:	461a      	mov	r2, r3
					&& currNode
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	4293      	cmp	r3, r2
 800306e:	d1eb      	bne.n	8003048 <MDMA_getCurrentTxChIndex+0x14>
	{}
	return currNodeIndex;
 8003070:	79fb      	ldrb	r3, [r7, #7]
}
 8003072:	4618      	mov	r0, r3
 8003074:	370c      	adds	r7, #12
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	24000fbc 	.word	0x24000fbc

08003084 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800308a:	4b0a      	ldr	r3, [pc, #40]	@ (80030b4 <HAL_MspInit+0x30>)
 800308c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003090:	4a08      	ldr	r2, [pc, #32]	@ (80030b4 <HAL_MspInit+0x30>)
 8003092:	f043 0302 	orr.w	r3, r3, #2
 8003096:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800309a:	4b06      	ldr	r3, [pc, #24]	@ (80030b4 <HAL_MspInit+0x30>)
 800309c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80030a0:	f003 0302 	and.w	r3, r3, #2
 80030a4:	607b      	str	r3, [r7, #4]
 80030a6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030a8:	bf00      	nop
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr
 80030b4:	58024400 	.word	0x58024400

080030b8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b0ba      	sub	sp, #232	@ 0xe8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030c0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80030c4:	2200      	movs	r2, #0
 80030c6:	601a      	str	r2, [r3, #0]
 80030c8:	605a      	str	r2, [r3, #4]
 80030ca:	609a      	str	r2, [r3, #8]
 80030cc:	60da      	str	r2, [r3, #12]
 80030ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80030d0:	f107 0310 	add.w	r3, r7, #16
 80030d4:	22c0      	movs	r2, #192	@ 0xc0
 80030d6:	2100      	movs	r1, #0
 80030d8:	4618      	mov	r0, r3
 80030da:	f009 ffa5 	bl	800d028 <memset>
  if(hi2c->Instance==I2C2)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a30      	ldr	r2, [pc, #192]	@ (80031a4 <HAL_I2C_MspInit+0xec>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d158      	bne.n	800319a <HAL_I2C_MspInit+0xe2>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80030e8:	f04f 0208 	mov.w	r2, #8
 80030ec:	f04f 0300 	mov.w	r3, #0
 80030f0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 32;
 80030f4:	2320      	movs	r3, #32
 80030f6:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 129;
 80030f8:	2381      	movs	r3, #129	@ 0x81
 80030fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80030fc:	2302      	movs	r3, #2
 80030fe:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8003100:	2302      	movs	r3, #2
 8003102:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 100;
 8003104:	2364      	movs	r3, #100	@ 0x64
 8003106:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 8003108:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800310c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 800310e:	2300      	movs	r3, #0
 8003110:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8003112:	2300      	movs	r3, #0
 8003114:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_PLL3;
 8003116:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800311a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800311e:	f107 0310 	add.w	r3, r7, #16
 8003122:	4618      	mov	r0, r3
 8003124:	f005 f944 	bl	80083b0 <HAL_RCCEx_PeriphCLKConfig>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d001      	beq.n	8003132 <HAL_I2C_MspInit+0x7a>
    {
      Error_Handler();
 800312e:	f7ff fb31 	bl	8002794 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003132:	4b1d      	ldr	r3, [pc, #116]	@ (80031a8 <HAL_I2C_MspInit+0xf0>)
 8003134:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003138:	4a1b      	ldr	r2, [pc, #108]	@ (80031a8 <HAL_I2C_MspInit+0xf0>)
 800313a:	f043 0302 	orr.w	r3, r3, #2
 800313e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003142:	4b19      	ldr	r3, [pc, #100]	@ (80031a8 <HAL_I2C_MspInit+0xf0>)
 8003144:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003148:	f003 0302 	and.w	r3, r3, #2
 800314c:	60fb      	str	r3, [r7, #12]
 800314e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003150:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003154:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003158:	2312      	movs	r3, #18
 800315a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800315e:	2301      	movs	r3, #1
 8003160:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003164:	2303      	movs	r3, #3
 8003166:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800316a:	2304      	movs	r3, #4
 800316c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003170:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003174:	4619      	mov	r1, r3
 8003176:	480d      	ldr	r0, [pc, #52]	@ (80031ac <HAL_I2C_MspInit+0xf4>)
 8003178:	f002 fd62 	bl	8005c40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800317c:	4b0a      	ldr	r3, [pc, #40]	@ (80031a8 <HAL_I2C_MspInit+0xf0>)
 800317e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003182:	4a09      	ldr	r2, [pc, #36]	@ (80031a8 <HAL_I2C_MspInit+0xf0>)
 8003184:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003188:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800318c:	4b06      	ldr	r3, [pc, #24]	@ (80031a8 <HAL_I2C_MspInit+0xf0>)
 800318e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003192:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003196:	60bb      	str	r3, [r7, #8]
 8003198:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 800319a:	bf00      	nop
 800319c:	37e8      	adds	r7, #232	@ 0xe8
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	40005800 	.word	0x40005800
 80031a8:	58024400 	.word	0x58024400
 80031ac:	58020400 	.word	0x58020400

080031b0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b08a      	sub	sp, #40	@ 0x28
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031b8:	f107 0314 	add.w	r3, r7, #20
 80031bc:	2200      	movs	r2, #0
 80031be:	601a      	str	r2, [r3, #0]
 80031c0:	605a      	str	r2, [r3, #4]
 80031c2:	609a      	str	r2, [r3, #8]
 80031c4:	60da      	str	r2, [r3, #12]
 80031c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a1a      	ldr	r2, [pc, #104]	@ (8003238 <HAL_UART_MspInit+0x88>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d12e      	bne.n	8003230 <HAL_UART_MspInit+0x80>
  {
    /* USER CODE BEGIN USART3_MspInit 0 */

    /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80031d2:	4b1a      	ldr	r3, [pc, #104]	@ (800323c <HAL_UART_MspInit+0x8c>)
 80031d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80031d8:	4a18      	ldr	r2, [pc, #96]	@ (800323c <HAL_UART_MspInit+0x8c>)
 80031da:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031de:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80031e2:	4b16      	ldr	r3, [pc, #88]	@ (800323c <HAL_UART_MspInit+0x8c>)
 80031e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80031e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031ec:	613b      	str	r3, [r7, #16]
 80031ee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80031f0:	4b12      	ldr	r3, [pc, #72]	@ (800323c <HAL_UART_MspInit+0x8c>)
 80031f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031f6:	4a11      	ldr	r2, [pc, #68]	@ (800323c <HAL_UART_MspInit+0x8c>)
 80031f8:	f043 0308 	orr.w	r3, r3, #8
 80031fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003200:	4b0e      	ldr	r3, [pc, #56]	@ (800323c <HAL_UART_MspInit+0x8c>)
 8003202:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003206:	f003 0308 	and.w	r3, r3, #8
 800320a:	60fb      	str	r3, [r7, #12]
 800320c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800320e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003212:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003214:	2302      	movs	r3, #2
 8003216:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003218:	2300      	movs	r3, #0
 800321a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800321c:	2300      	movs	r3, #0
 800321e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003220:	2307      	movs	r3, #7
 8003222:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003224:	f107 0314 	add.w	r3, r7, #20
 8003228:	4619      	mov	r1, r3
 800322a:	4805      	ldr	r0, [pc, #20]	@ (8003240 <HAL_UART_MspInit+0x90>)
 800322c:	f002 fd08 	bl	8005c40 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8003230:	bf00      	nop
 8003232:	3728      	adds	r7, #40	@ 0x28
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	40004800 	.word	0x40004800
 800323c:	58024400 	.word	0x58024400
 8003240:	58020c00 	.word	0x58020c00

08003244 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_b;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b08e      	sub	sp, #56	@ 0x38
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a7c      	ldr	r2, [pc, #496]	@ (8003444 <HAL_SAI_MspInit+0x200>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d176      	bne.n	8003344 <HAL_SAI_MspInit+0x100>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8003256:	4b7c      	ldr	r3, [pc, #496]	@ (8003448 <HAL_SAI_MspInit+0x204>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d10e      	bne.n	800327c <HAL_SAI_MspInit+0x38>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800325e:	4b7b      	ldr	r3, [pc, #492]	@ (800344c <HAL_SAI_MspInit+0x208>)
 8003260:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003264:	4a79      	ldr	r2, [pc, #484]	@ (800344c <HAL_SAI_MspInit+0x208>)
 8003266:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800326a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800326e:	4b77      	ldr	r3, [pc, #476]	@ (800344c <HAL_SAI_MspInit+0x208>)
 8003270:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003274:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003278:	613b      	str	r3, [r7, #16]
 800327a:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 800327c:	4b72      	ldr	r3, [pc, #456]	@ (8003448 <HAL_SAI_MspInit+0x204>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	3301      	adds	r3, #1
 8003282:	4a71      	ldr	r2, [pc, #452]	@ (8003448 <HAL_SAI_MspInit+0x204>)
 8003284:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8003286:	2374      	movs	r3, #116	@ 0x74
 8003288:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800328a:	2302      	movs	r3, #2
 800328c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800328e:	2300      	movs	r3, #0
 8003290:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003292:	2300      	movs	r3, #0
 8003294:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8003296:	2306      	movs	r3, #6
 8003298:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800329a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800329e:	4619      	mov	r1, r3
 80032a0:	486b      	ldr	r0, [pc, #428]	@ (8003450 <HAL_SAI_MspInit+0x20c>)
 80032a2:	f002 fccd 	bl	8005c40 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA1_Stream0;
 80032a6:	4b6b      	ldr	r3, [pc, #428]	@ (8003454 <HAL_SAI_MspInit+0x210>)
 80032a8:	4a6b      	ldr	r2, [pc, #428]	@ (8003458 <HAL_SAI_MspInit+0x214>)
 80032aa:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 80032ac:	4b69      	ldr	r3, [pc, #420]	@ (8003454 <HAL_SAI_MspInit+0x210>)
 80032ae:	2257      	movs	r2, #87	@ 0x57
 80032b0:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80032b2:	4b68      	ldr	r3, [pc, #416]	@ (8003454 <HAL_SAI_MspInit+0x210>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 80032b8:	4b66      	ldr	r3, [pc, #408]	@ (8003454 <HAL_SAI_MspInit+0x210>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 80032be:	4b65      	ldr	r3, [pc, #404]	@ (8003454 <HAL_SAI_MspInit+0x210>)
 80032c0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80032c4:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80032c6:	4b63      	ldr	r3, [pc, #396]	@ (8003454 <HAL_SAI_MspInit+0x210>)
 80032c8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80032cc:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80032ce:	4b61      	ldr	r3, [pc, #388]	@ (8003454 <HAL_SAI_MspInit+0x210>)
 80032d0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80032d4:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 80032d6:	4b5f      	ldr	r3, [pc, #380]	@ (8003454 <HAL_SAI_MspInit+0x210>)
 80032d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80032dc:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_HIGH;
 80032de:	4b5d      	ldr	r3, [pc, #372]	@ (8003454 <HAL_SAI_MspInit+0x210>)
 80032e0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80032e4:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80032e6:	4b5b      	ldr	r3, [pc, #364]	@ (8003454 <HAL_SAI_MspInit+0x210>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 80032ec:	4859      	ldr	r0, [pc, #356]	@ (8003454 <HAL_SAI_MspInit+0x210>)
 80032ee:	f000 fafd 	bl	80038ec <HAL_DMA_Init>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d001      	beq.n	80032fc <HAL_SAI_MspInit+0xb8>
    {
      Error_Handler();
 80032f8:	f7ff fa4c 	bl	8002794 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 80032fc:	2306      	movs	r3, #6
 80032fe:	617b      	str	r3, [r7, #20]
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_RISING;
 8003300:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003304:	61bb      	str	r3, [r7, #24]
    pSyncConfig.SyncEnable = DISABLE;
 8003306:	2300      	movs	r3, #0
 8003308:	773b      	strb	r3, [r7, #28]
    pSyncConfig.EventEnable = ENABLE;
 800330a:	2301      	movs	r3, #1
 800330c:	777b      	strb	r3, [r7, #29]
    pSyncConfig.RequestNumber = 1;
 800330e:	2301      	movs	r3, #1
 8003310:	623b      	str	r3, [r7, #32]
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai1_a, &pSyncConfig) != HAL_OK)
 8003312:	f107 0314 	add.w	r3, r7, #20
 8003316:	4619      	mov	r1, r3
 8003318:	484e      	ldr	r0, [pc, #312]	@ (8003454 <HAL_SAI_MspInit+0x210>)
 800331a:	f002 fbcb 	bl	8005ab4 <HAL_DMAEx_ConfigMuxSync>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d001      	beq.n	8003328 <HAL_SAI_MspInit+0xe4>
    {
      Error_Handler();
 8003324:	f7ff fa36 	bl	8002794 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a4a      	ldr	r2, [pc, #296]	@ (8003454 <HAL_SAI_MspInit+0x210>)
 800332c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8003330:	4a48      	ldr	r2, [pc, #288]	@ (8003454 <HAL_SAI_MspInit+0x210>)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6393      	str	r3, [r2, #56]	@ 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a46      	ldr	r2, [pc, #280]	@ (8003454 <HAL_SAI_MspInit+0x210>)
 800333a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800333e:	4a45      	ldr	r2, [pc, #276]	@ (8003454 <HAL_SAI_MspInit+0x210>)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6393      	str	r3, [r2, #56]	@ 0x38

    }
    if(hsai->Instance==SAI1_Block_B)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a44      	ldr	r2, [pc, #272]	@ (800345c <HAL_SAI_MspInit+0x218>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d176      	bne.n	800343c <HAL_SAI_MspInit+0x1f8>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 800334e:	4b3e      	ldr	r3, [pc, #248]	@ (8003448 <HAL_SAI_MspInit+0x204>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d10e      	bne.n	8003374 <HAL_SAI_MspInit+0x130>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8003356:	4b3d      	ldr	r3, [pc, #244]	@ (800344c <HAL_SAI_MspInit+0x208>)
 8003358:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800335c:	4a3b      	ldr	r2, [pc, #236]	@ (800344c <HAL_SAI_MspInit+0x208>)
 800335e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003362:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003366:	4b39      	ldr	r3, [pc, #228]	@ (800344c <HAL_SAI_MspInit+0x208>)
 8003368:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800336c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003370:	60fb      	str	r3, [r7, #12]
 8003372:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8003374:	4b34      	ldr	r3, [pc, #208]	@ (8003448 <HAL_SAI_MspInit+0x204>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	3301      	adds	r3, #1
 800337a:	4a33      	ldr	r2, [pc, #204]	@ (8003448 <HAL_SAI_MspInit+0x204>)
 800337c:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800337e:	2308      	movs	r3, #8
 8003380:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003382:	2302      	movs	r3, #2
 8003384:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003386:	2300      	movs	r3, #0
 8003388:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800338a:	2300      	movs	r3, #0
 800338c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800338e:	2306      	movs	r3, #6
 8003390:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003392:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003396:	4619      	mov	r1, r3
 8003398:	482d      	ldr	r0, [pc, #180]	@ (8003450 <HAL_SAI_MspInit+0x20c>)
 800339a:	f002 fc51 	bl	8005c40 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA1_Stream1;
 800339e:	4b30      	ldr	r3, [pc, #192]	@ (8003460 <HAL_SAI_MspInit+0x21c>)
 80033a0:	4a30      	ldr	r2, [pc, #192]	@ (8003464 <HAL_SAI_MspInit+0x220>)
 80033a2:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 80033a4:	4b2e      	ldr	r3, [pc, #184]	@ (8003460 <HAL_SAI_MspInit+0x21c>)
 80033a6:	2258      	movs	r2, #88	@ 0x58
 80033a8:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80033aa:	4b2d      	ldr	r3, [pc, #180]	@ (8003460 <HAL_SAI_MspInit+0x21c>)
 80033ac:	2240      	movs	r2, #64	@ 0x40
 80033ae:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 80033b0:	4b2b      	ldr	r3, [pc, #172]	@ (8003460 <HAL_SAI_MspInit+0x21c>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 80033b6:	4b2a      	ldr	r3, [pc, #168]	@ (8003460 <HAL_SAI_MspInit+0x21c>)
 80033b8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80033bc:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80033be:	4b28      	ldr	r3, [pc, #160]	@ (8003460 <HAL_SAI_MspInit+0x21c>)
 80033c0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80033c4:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80033c6:	4b26      	ldr	r3, [pc, #152]	@ (8003460 <HAL_SAI_MspInit+0x21c>)
 80033c8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80033cc:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 80033ce:	4b24      	ldr	r3, [pc, #144]	@ (8003460 <HAL_SAI_MspInit+0x21c>)
 80033d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80033d4:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_HIGH;
 80033d6:	4b22      	ldr	r3, [pc, #136]	@ (8003460 <HAL_SAI_MspInit+0x21c>)
 80033d8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80033dc:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80033de:	4b20      	ldr	r3, [pc, #128]	@ (8003460 <HAL_SAI_MspInit+0x21c>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 80033e4:	481e      	ldr	r0, [pc, #120]	@ (8003460 <HAL_SAI_MspInit+0x21c>)
 80033e6:	f000 fa81 	bl	80038ec <HAL_DMA_Init>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d001      	beq.n	80033f4 <HAL_SAI_MspInit+0x1b0>
    {
      Error_Handler();
 80033f0:	f7ff f9d0 	bl	8002794 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_DMAMUX1_CH0_EVT;
 80033f4:	2300      	movs	r3, #0
 80033f6:	617b      	str	r3, [r7, #20]
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_RISING;
 80033f8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80033fc:	61bb      	str	r3, [r7, #24]
    pSyncConfig.SyncEnable = ENABLE;
 80033fe:	2301      	movs	r3, #1
 8003400:	773b      	strb	r3, [r7, #28]
    pSyncConfig.EventEnable = DISABLE;
 8003402:	2300      	movs	r3, #0
 8003404:	777b      	strb	r3, [r7, #29]
    pSyncConfig.RequestNumber = 1;
 8003406:	2301      	movs	r3, #1
 8003408:	623b      	str	r3, [r7, #32]
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai1_b, &pSyncConfig) != HAL_OK)
 800340a:	f107 0314 	add.w	r3, r7, #20
 800340e:	4619      	mov	r1, r3
 8003410:	4813      	ldr	r0, [pc, #76]	@ (8003460 <HAL_SAI_MspInit+0x21c>)
 8003412:	f002 fb4f 	bl	8005ab4 <HAL_DMAEx_ConfigMuxSync>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d001      	beq.n	8003420 <HAL_SAI_MspInit+0x1dc>
    {
      Error_Handler();
 800341c:	f7ff f9ba 	bl	8002794 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4a0f      	ldr	r2, [pc, #60]	@ (8003460 <HAL_SAI_MspInit+0x21c>)
 8003424:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8003428:	4a0d      	ldr	r2, [pc, #52]	@ (8003460 <HAL_SAI_MspInit+0x21c>)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a0b      	ldr	r2, [pc, #44]	@ (8003460 <HAL_SAI_MspInit+0x21c>)
 8003432:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003436:	4a0a      	ldr	r2, [pc, #40]	@ (8003460 <HAL_SAI_MspInit+0x21c>)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6393      	str	r3, [r2, #56]	@ 0x38
    }
}
 800343c:	bf00      	nop
 800343e:	3738      	adds	r7, #56	@ 0x38
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	40015804 	.word	0x40015804
 8003448:	24000fc0 	.word	0x24000fc0
 800344c:	58024400 	.word	0x58024400
 8003450:	58021000 	.word	0x58021000
 8003454:	24000ca0 	.word	0x24000ca0
 8003458:	40020010 	.word	0x40020010
 800345c:	40015824 	.word	0x40015824
 8003460:	24000d18 	.word	0x24000d18
 8003464:	40020028 	.word	0x40020028

08003468 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003468:	b480      	push	{r7}
 800346a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800346c:	bf00      	nop
 800346e:	e7fd      	b.n	800346c <NMI_Handler+0x4>

08003470 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003470:	b480      	push	{r7}
 8003472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003474:	bf00      	nop
 8003476:	e7fd      	b.n	8003474 <HardFault_Handler+0x4>

08003478 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003478:	b480      	push	{r7}
 800347a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800347c:	bf00      	nop
 800347e:	e7fd      	b.n	800347c <MemManage_Handler+0x4>

08003480 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003480:	b480      	push	{r7}
 8003482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003484:	bf00      	nop
 8003486:	e7fd      	b.n	8003484 <BusFault_Handler+0x4>

08003488 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003488:	b480      	push	{r7}
 800348a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800348c:	bf00      	nop
 800348e:	e7fd      	b.n	800348c <UsageFault_Handler+0x4>

08003490 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003490:	b480      	push	{r7}
 8003492:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003494:	bf00      	nop
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr

0800349e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800349e:	b480      	push	{r7}
 80034a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034a2:	bf00      	nop
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80034ac:	b480      	push	{r7}
 80034ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80034b0:	bf00      	nop
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr

080034ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80034ba:	b580      	push	{r7, lr}
 80034bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80034be:	f000 f8b5 	bl	800362c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80034c2:	bf00      	nop
 80034c4:	bd80      	pop	{r7, pc}
	...

080034c8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 80034cc:	4802      	ldr	r0, [pc, #8]	@ (80034d8 <DMA1_Stream0_IRQHandler+0x10>)
 80034ce:	f000 ffd3 	bl	8004478 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80034d2:	bf00      	nop
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	24000ca0 	.word	0x24000ca0

080034dc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 80034e0:	4802      	ldr	r0, [pc, #8]	@ (80034ec <DMA1_Stream1_IRQHandler+0x10>)
 80034e2:	f000 ffc9 	bl	8004478 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80034e6:	bf00      	nop
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	24000d18 	.word	0x24000d18

080034f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80034f0:	f8df d038 	ldr.w	sp, [pc, #56]	@ 800352c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80034f4:	f7fd f934 	bl	8000760 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80034f8:	f7fd f884 	bl	8000604 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80034fc:	480c      	ldr	r0, [pc, #48]	@ (8003530 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80034fe:	490d      	ldr	r1, [pc, #52]	@ (8003534 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003500:	4a0d      	ldr	r2, [pc, #52]	@ (8003538 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003502:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003504:	e002      	b.n	800350c <LoopCopyDataInit>

08003506 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003506:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003508:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800350a:	3304      	adds	r3, #4

0800350c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800350c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800350e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003510:	d3f9      	bcc.n	8003506 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003512:	4a0a      	ldr	r2, [pc, #40]	@ (800353c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003514:	4c0a      	ldr	r4, [pc, #40]	@ (8003540 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003516:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003518:	e001      	b.n	800351e <LoopFillZerobss>

0800351a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800351a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800351c:	3204      	adds	r2, #4

0800351e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800351e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003520:	d3fb      	bcc.n	800351a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003522:	f009 fd89 	bl	800d038 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003526:	f7fe fc31 	bl	8001d8c <main>
  bx  lr
 800352a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800352c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003530:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003534:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8003538:	0800d140 	.word	0x0800d140
  ldr r2, =_sbss
 800353c:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8003540:	24000fc8 	.word	0x24000fc8

08003544 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003544:	e7fe      	b.n	8003544 <ADC3_IRQHandler>
	...

08003548 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800354e:	2003      	movs	r0, #3
 8003550:	f000 f98c 	bl	800386c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003554:	f004 fd56 	bl	8008004 <HAL_RCC_GetSysClockFreq>
 8003558:	4602      	mov	r2, r0
 800355a:	4b15      	ldr	r3, [pc, #84]	@ (80035b0 <HAL_Init+0x68>)
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	0a1b      	lsrs	r3, r3, #8
 8003560:	f003 030f 	and.w	r3, r3, #15
 8003564:	4913      	ldr	r1, [pc, #76]	@ (80035b4 <HAL_Init+0x6c>)
 8003566:	5ccb      	ldrb	r3, [r1, r3]
 8003568:	f003 031f 	and.w	r3, r3, #31
 800356c:	fa22 f303 	lsr.w	r3, r2, r3
 8003570:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003572:	4b0f      	ldr	r3, [pc, #60]	@ (80035b0 <HAL_Init+0x68>)
 8003574:	699b      	ldr	r3, [r3, #24]
 8003576:	f003 030f 	and.w	r3, r3, #15
 800357a:	4a0e      	ldr	r2, [pc, #56]	@ (80035b4 <HAL_Init+0x6c>)
 800357c:	5cd3      	ldrb	r3, [r2, r3]
 800357e:	f003 031f 	and.w	r3, r3, #31
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	fa22 f303 	lsr.w	r3, r2, r3
 8003588:	4a0b      	ldr	r2, [pc, #44]	@ (80035b8 <HAL_Init+0x70>)
 800358a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800358c:	4a0b      	ldr	r2, [pc, #44]	@ (80035bc <HAL_Init+0x74>)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003592:	2000      	movs	r0, #0
 8003594:	f000 f814 	bl	80035c0 <HAL_InitTick>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d001      	beq.n	80035a2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e002      	b.n	80035a8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80035a2:	f7ff fd6f 	bl	8003084 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80035a6:	2300      	movs	r3, #0
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3708      	adds	r7, #8
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	58024400 	.word	0x58024400
 80035b4:	0800d0b0 	.word	0x0800d0b0
 80035b8:	24000004 	.word	0x24000004
 80035bc:	24000000 	.word	0x24000000

080035c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80035c8:	4b15      	ldr	r3, [pc, #84]	@ (8003620 <HAL_InitTick+0x60>)
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d101      	bne.n	80035d4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e021      	b.n	8003618 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80035d4:	4b13      	ldr	r3, [pc, #76]	@ (8003624 <HAL_InitTick+0x64>)
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	4b11      	ldr	r3, [pc, #68]	@ (8003620 <HAL_InitTick+0x60>)
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	4619      	mov	r1, r3
 80035de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80035e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80035e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ea:	4618      	mov	r0, r3
 80035ec:	f000 f971 	bl	80038d2 <HAL_SYSTICK_Config>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d001      	beq.n	80035fa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e00e      	b.n	8003618 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2b0f      	cmp	r3, #15
 80035fe:	d80a      	bhi.n	8003616 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003600:	2200      	movs	r2, #0
 8003602:	6879      	ldr	r1, [r7, #4]
 8003604:	f04f 30ff 	mov.w	r0, #4294967295
 8003608:	f000 f93b 	bl	8003882 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800360c:	4a06      	ldr	r2, [pc, #24]	@ (8003628 <HAL_InitTick+0x68>)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003612:	2300      	movs	r3, #0
 8003614:	e000      	b.n	8003618 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
}
 8003618:	4618      	mov	r0, r3
 800361a:	3708      	adds	r7, #8
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	2400000c 	.word	0x2400000c
 8003624:	24000000 	.word	0x24000000
 8003628:	24000008 	.word	0x24000008

0800362c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800362c:	b480      	push	{r7}
 800362e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003630:	4b06      	ldr	r3, [pc, #24]	@ (800364c <HAL_IncTick+0x20>)
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	461a      	mov	r2, r3
 8003636:	4b06      	ldr	r3, [pc, #24]	@ (8003650 <HAL_IncTick+0x24>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4413      	add	r3, r2
 800363c:	4a04      	ldr	r2, [pc, #16]	@ (8003650 <HAL_IncTick+0x24>)
 800363e:	6013      	str	r3, [r2, #0]
}
 8003640:	bf00      	nop
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr
 800364a:	bf00      	nop
 800364c:	2400000c 	.word	0x2400000c
 8003650:	24000fc4 	.word	0x24000fc4

08003654 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003654:	b480      	push	{r7}
 8003656:	af00      	add	r7, sp, #0
  return uwTick;
 8003658:	4b03      	ldr	r3, [pc, #12]	@ (8003668 <HAL_GetTick+0x14>)
 800365a:	681b      	ldr	r3, [r3, #0]
}
 800365c:	4618      	mov	r0, r3
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	24000fc4 	.word	0x24000fc4

0800366c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003674:	f7ff ffee 	bl	8003654 <HAL_GetTick>
 8003678:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003684:	d005      	beq.n	8003692 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003686:	4b0a      	ldr	r3, [pc, #40]	@ (80036b0 <HAL_Delay+0x44>)
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	461a      	mov	r2, r3
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	4413      	add	r3, r2
 8003690:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003692:	bf00      	nop
 8003694:	f7ff ffde 	bl	8003654 <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	68fa      	ldr	r2, [r7, #12]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d8f7      	bhi.n	8003694 <HAL_Delay+0x28>
  {
  }
}
 80036a4:	bf00      	nop
 80036a6:	bf00      	nop
 80036a8:	3710      	adds	r7, #16
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	2400000c 	.word	0x2400000c

080036b4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80036b4:	b480      	push	{r7}
 80036b6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80036b8:	4b03      	ldr	r3, [pc, #12]	@ (80036c8 <HAL_GetREVID+0x14>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	0c1b      	lsrs	r3, r3, #16
}
 80036be:	4618      	mov	r0, r3
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr
 80036c8:	5c001000 	.word	0x5c001000

080036cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b085      	sub	sp, #20
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f003 0307 	and.w	r3, r3, #7
 80036da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036dc:	4b0b      	ldr	r3, [pc, #44]	@ (800370c <__NVIC_SetPriorityGrouping+0x40>)
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036e2:	68ba      	ldr	r2, [r7, #8]
 80036e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80036e8:	4013      	ands	r3, r2
 80036ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80036f4:	4b06      	ldr	r3, [pc, #24]	@ (8003710 <__NVIC_SetPriorityGrouping+0x44>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036fa:	4a04      	ldr	r2, [pc, #16]	@ (800370c <__NVIC_SetPriorityGrouping+0x40>)
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	60d3      	str	r3, [r2, #12]
}
 8003700:	bf00      	nop
 8003702:	3714      	adds	r7, #20
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr
 800370c:	e000ed00 	.word	0xe000ed00
 8003710:	05fa0000 	.word	0x05fa0000

08003714 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003714:	b480      	push	{r7}
 8003716:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003718:	4b04      	ldr	r3, [pc, #16]	@ (800372c <__NVIC_GetPriorityGrouping+0x18>)
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	0a1b      	lsrs	r3, r3, #8
 800371e:	f003 0307 	and.w	r3, r3, #7
}
 8003722:	4618      	mov	r0, r3
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr
 800372c:	e000ed00 	.word	0xe000ed00

08003730 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	4603      	mov	r3, r0
 8003738:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800373a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800373e:	2b00      	cmp	r3, #0
 8003740:	db0b      	blt.n	800375a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003742:	88fb      	ldrh	r3, [r7, #6]
 8003744:	f003 021f 	and.w	r2, r3, #31
 8003748:	4907      	ldr	r1, [pc, #28]	@ (8003768 <__NVIC_EnableIRQ+0x38>)
 800374a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800374e:	095b      	lsrs	r3, r3, #5
 8003750:	2001      	movs	r0, #1
 8003752:	fa00 f202 	lsl.w	r2, r0, r2
 8003756:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800375a:	bf00      	nop
 800375c:	370c      	adds	r7, #12
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr
 8003766:	bf00      	nop
 8003768:	e000e100 	.word	0xe000e100

0800376c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	4603      	mov	r3, r0
 8003774:	6039      	str	r1, [r7, #0]
 8003776:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003778:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800377c:	2b00      	cmp	r3, #0
 800377e:	db0a      	blt.n	8003796 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	b2da      	uxtb	r2, r3
 8003784:	490c      	ldr	r1, [pc, #48]	@ (80037b8 <__NVIC_SetPriority+0x4c>)
 8003786:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800378a:	0112      	lsls	r2, r2, #4
 800378c:	b2d2      	uxtb	r2, r2
 800378e:	440b      	add	r3, r1
 8003790:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003794:	e00a      	b.n	80037ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	b2da      	uxtb	r2, r3
 800379a:	4908      	ldr	r1, [pc, #32]	@ (80037bc <__NVIC_SetPriority+0x50>)
 800379c:	88fb      	ldrh	r3, [r7, #6]
 800379e:	f003 030f 	and.w	r3, r3, #15
 80037a2:	3b04      	subs	r3, #4
 80037a4:	0112      	lsls	r2, r2, #4
 80037a6:	b2d2      	uxtb	r2, r2
 80037a8:	440b      	add	r3, r1
 80037aa:	761a      	strb	r2, [r3, #24]
}
 80037ac:	bf00      	nop
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr
 80037b8:	e000e100 	.word	0xe000e100
 80037bc:	e000ed00 	.word	0xe000ed00

080037c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b089      	sub	sp, #36	@ 0x24
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f003 0307 	and.w	r3, r3, #7
 80037d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	f1c3 0307 	rsb	r3, r3, #7
 80037da:	2b04      	cmp	r3, #4
 80037dc:	bf28      	it	cs
 80037de:	2304      	movcs	r3, #4
 80037e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	3304      	adds	r3, #4
 80037e6:	2b06      	cmp	r3, #6
 80037e8:	d902      	bls.n	80037f0 <NVIC_EncodePriority+0x30>
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	3b03      	subs	r3, #3
 80037ee:	e000      	b.n	80037f2 <NVIC_EncodePriority+0x32>
 80037f0:	2300      	movs	r3, #0
 80037f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037f4:	f04f 32ff 	mov.w	r2, #4294967295
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	fa02 f303 	lsl.w	r3, r2, r3
 80037fe:	43da      	mvns	r2, r3
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	401a      	ands	r2, r3
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003808:	f04f 31ff 	mov.w	r1, #4294967295
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	fa01 f303 	lsl.w	r3, r1, r3
 8003812:	43d9      	mvns	r1, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003818:	4313      	orrs	r3, r2
         );
}
 800381a:	4618      	mov	r0, r3
 800381c:	3724      	adds	r7, #36	@ 0x24
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
	...

08003828 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	3b01      	subs	r3, #1
 8003834:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003838:	d301      	bcc.n	800383e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800383a:	2301      	movs	r3, #1
 800383c:	e00f      	b.n	800385e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800383e:	4a0a      	ldr	r2, [pc, #40]	@ (8003868 <SysTick_Config+0x40>)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	3b01      	subs	r3, #1
 8003844:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003846:	210f      	movs	r1, #15
 8003848:	f04f 30ff 	mov.w	r0, #4294967295
 800384c:	f7ff ff8e 	bl	800376c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003850:	4b05      	ldr	r3, [pc, #20]	@ (8003868 <SysTick_Config+0x40>)
 8003852:	2200      	movs	r2, #0
 8003854:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003856:	4b04      	ldr	r3, [pc, #16]	@ (8003868 <SysTick_Config+0x40>)
 8003858:	2207      	movs	r2, #7
 800385a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800385c:	2300      	movs	r3, #0
}
 800385e:	4618      	mov	r0, r3
 8003860:	3708      	adds	r7, #8
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	e000e010 	.word	0xe000e010

0800386c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f7ff ff29 	bl	80036cc <__NVIC_SetPriorityGrouping>
}
 800387a:	bf00      	nop
 800387c:	3708      	adds	r7, #8
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}

08003882 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003882:	b580      	push	{r7, lr}
 8003884:	b086      	sub	sp, #24
 8003886:	af00      	add	r7, sp, #0
 8003888:	4603      	mov	r3, r0
 800388a:	60b9      	str	r1, [r7, #8]
 800388c:	607a      	str	r2, [r7, #4]
 800388e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003890:	f7ff ff40 	bl	8003714 <__NVIC_GetPriorityGrouping>
 8003894:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	68b9      	ldr	r1, [r7, #8]
 800389a:	6978      	ldr	r0, [r7, #20]
 800389c:	f7ff ff90 	bl	80037c0 <NVIC_EncodePriority>
 80038a0:	4602      	mov	r2, r0
 80038a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80038a6:	4611      	mov	r1, r2
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7ff ff5f 	bl	800376c <__NVIC_SetPriority>
}
 80038ae:	bf00      	nop
 80038b0:	3718      	adds	r7, #24
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}

080038b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038b6:	b580      	push	{r7, lr}
 80038b8:	b082      	sub	sp, #8
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	4603      	mov	r3, r0
 80038be:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7ff ff33 	bl	8003730 <__NVIC_EnableIRQ>
}
 80038ca:	bf00      	nop
 80038cc:	3708      	adds	r7, #8
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038d2:	b580      	push	{r7, lr}
 80038d4:	b082      	sub	sp, #8
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f7ff ffa4 	bl	8003828 <SysTick_Config>
 80038e0:	4603      	mov	r3, r0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3708      	adds	r7, #8
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
	...

080038ec <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b086      	sub	sp, #24
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80038f4:	f7ff feae 	bl	8003654 <HAL_GetTick>
 80038f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d101      	bne.n	8003904 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e316      	b.n	8003f32 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a66      	ldr	r2, [pc, #408]	@ (8003aa4 <HAL_DMA_Init+0x1b8>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d04a      	beq.n	80039a4 <HAL_DMA_Init+0xb8>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a65      	ldr	r2, [pc, #404]	@ (8003aa8 <HAL_DMA_Init+0x1bc>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d045      	beq.n	80039a4 <HAL_DMA_Init+0xb8>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a63      	ldr	r2, [pc, #396]	@ (8003aac <HAL_DMA_Init+0x1c0>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d040      	beq.n	80039a4 <HAL_DMA_Init+0xb8>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a62      	ldr	r2, [pc, #392]	@ (8003ab0 <HAL_DMA_Init+0x1c4>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d03b      	beq.n	80039a4 <HAL_DMA_Init+0xb8>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a60      	ldr	r2, [pc, #384]	@ (8003ab4 <HAL_DMA_Init+0x1c8>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d036      	beq.n	80039a4 <HAL_DMA_Init+0xb8>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a5f      	ldr	r2, [pc, #380]	@ (8003ab8 <HAL_DMA_Init+0x1cc>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d031      	beq.n	80039a4 <HAL_DMA_Init+0xb8>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a5d      	ldr	r2, [pc, #372]	@ (8003abc <HAL_DMA_Init+0x1d0>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d02c      	beq.n	80039a4 <HAL_DMA_Init+0xb8>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a5c      	ldr	r2, [pc, #368]	@ (8003ac0 <HAL_DMA_Init+0x1d4>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d027      	beq.n	80039a4 <HAL_DMA_Init+0xb8>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a5a      	ldr	r2, [pc, #360]	@ (8003ac4 <HAL_DMA_Init+0x1d8>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d022      	beq.n	80039a4 <HAL_DMA_Init+0xb8>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a59      	ldr	r2, [pc, #356]	@ (8003ac8 <HAL_DMA_Init+0x1dc>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d01d      	beq.n	80039a4 <HAL_DMA_Init+0xb8>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a57      	ldr	r2, [pc, #348]	@ (8003acc <HAL_DMA_Init+0x1e0>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d018      	beq.n	80039a4 <HAL_DMA_Init+0xb8>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a56      	ldr	r2, [pc, #344]	@ (8003ad0 <HAL_DMA_Init+0x1e4>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d013      	beq.n	80039a4 <HAL_DMA_Init+0xb8>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a54      	ldr	r2, [pc, #336]	@ (8003ad4 <HAL_DMA_Init+0x1e8>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d00e      	beq.n	80039a4 <HAL_DMA_Init+0xb8>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a53      	ldr	r2, [pc, #332]	@ (8003ad8 <HAL_DMA_Init+0x1ec>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d009      	beq.n	80039a4 <HAL_DMA_Init+0xb8>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a51      	ldr	r2, [pc, #324]	@ (8003adc <HAL_DMA_Init+0x1f0>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d004      	beq.n	80039a4 <HAL_DMA_Init+0xb8>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a50      	ldr	r2, [pc, #320]	@ (8003ae0 <HAL_DMA_Init+0x1f4>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d101      	bne.n	80039a8 <HAL_DMA_Init+0xbc>
 80039a4:	2301      	movs	r3, #1
 80039a6:	e000      	b.n	80039aa <HAL_DMA_Init+0xbe>
 80039a8:	2300      	movs	r3, #0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f000 813b 	beq.w	8003c26 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2202      	movs	r2, #2
 80039b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a37      	ldr	r2, [pc, #220]	@ (8003aa4 <HAL_DMA_Init+0x1b8>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d04a      	beq.n	8003a60 <HAL_DMA_Init+0x174>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a36      	ldr	r2, [pc, #216]	@ (8003aa8 <HAL_DMA_Init+0x1bc>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d045      	beq.n	8003a60 <HAL_DMA_Init+0x174>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a34      	ldr	r2, [pc, #208]	@ (8003aac <HAL_DMA_Init+0x1c0>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d040      	beq.n	8003a60 <HAL_DMA_Init+0x174>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a33      	ldr	r2, [pc, #204]	@ (8003ab0 <HAL_DMA_Init+0x1c4>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d03b      	beq.n	8003a60 <HAL_DMA_Init+0x174>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a31      	ldr	r2, [pc, #196]	@ (8003ab4 <HAL_DMA_Init+0x1c8>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d036      	beq.n	8003a60 <HAL_DMA_Init+0x174>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a30      	ldr	r2, [pc, #192]	@ (8003ab8 <HAL_DMA_Init+0x1cc>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d031      	beq.n	8003a60 <HAL_DMA_Init+0x174>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a2e      	ldr	r2, [pc, #184]	@ (8003abc <HAL_DMA_Init+0x1d0>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d02c      	beq.n	8003a60 <HAL_DMA_Init+0x174>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a2d      	ldr	r2, [pc, #180]	@ (8003ac0 <HAL_DMA_Init+0x1d4>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d027      	beq.n	8003a60 <HAL_DMA_Init+0x174>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a2b      	ldr	r2, [pc, #172]	@ (8003ac4 <HAL_DMA_Init+0x1d8>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d022      	beq.n	8003a60 <HAL_DMA_Init+0x174>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a2a      	ldr	r2, [pc, #168]	@ (8003ac8 <HAL_DMA_Init+0x1dc>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d01d      	beq.n	8003a60 <HAL_DMA_Init+0x174>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a28      	ldr	r2, [pc, #160]	@ (8003acc <HAL_DMA_Init+0x1e0>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d018      	beq.n	8003a60 <HAL_DMA_Init+0x174>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a27      	ldr	r2, [pc, #156]	@ (8003ad0 <HAL_DMA_Init+0x1e4>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d013      	beq.n	8003a60 <HAL_DMA_Init+0x174>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a25      	ldr	r2, [pc, #148]	@ (8003ad4 <HAL_DMA_Init+0x1e8>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d00e      	beq.n	8003a60 <HAL_DMA_Init+0x174>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a24      	ldr	r2, [pc, #144]	@ (8003ad8 <HAL_DMA_Init+0x1ec>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d009      	beq.n	8003a60 <HAL_DMA_Init+0x174>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a22      	ldr	r2, [pc, #136]	@ (8003adc <HAL_DMA_Init+0x1f0>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d004      	beq.n	8003a60 <HAL_DMA_Init+0x174>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a21      	ldr	r2, [pc, #132]	@ (8003ae0 <HAL_DMA_Init+0x1f4>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d108      	bne.n	8003a72 <HAL_DMA_Init+0x186>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f022 0201 	bic.w	r2, r2, #1
 8003a6e:	601a      	str	r2, [r3, #0]
 8003a70:	e007      	b.n	8003a82 <HAL_DMA_Init+0x196>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f022 0201 	bic.w	r2, r2, #1
 8003a80:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003a82:	e02f      	b.n	8003ae4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a84:	f7ff fde6 	bl	8003654 <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	2b05      	cmp	r3, #5
 8003a90:	d928      	bls.n	8003ae4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2220      	movs	r2, #32
 8003a96:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2203      	movs	r2, #3
 8003a9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e246      	b.n	8003f32 <HAL_DMA_Init+0x646>
 8003aa4:	40020010 	.word	0x40020010
 8003aa8:	40020028 	.word	0x40020028
 8003aac:	40020040 	.word	0x40020040
 8003ab0:	40020058 	.word	0x40020058
 8003ab4:	40020070 	.word	0x40020070
 8003ab8:	40020088 	.word	0x40020088
 8003abc:	400200a0 	.word	0x400200a0
 8003ac0:	400200b8 	.word	0x400200b8
 8003ac4:	40020410 	.word	0x40020410
 8003ac8:	40020428 	.word	0x40020428
 8003acc:	40020440 	.word	0x40020440
 8003ad0:	40020458 	.word	0x40020458
 8003ad4:	40020470 	.word	0x40020470
 8003ad8:	40020488 	.word	0x40020488
 8003adc:	400204a0 	.word	0x400204a0
 8003ae0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1c8      	bne.n	8003a84 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003afa:	697a      	ldr	r2, [r7, #20]
 8003afc:	4b83      	ldr	r3, [pc, #524]	@ (8003d0c <HAL_DMA_Init+0x420>)
 8003afe:	4013      	ands	r3, r2
 8003b00:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003b0a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	691b      	ldr	r3, [r3, #16]
 8003b10:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b16:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	699b      	ldr	r3, [r3, #24]
 8003b1c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b22:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6a1b      	ldr	r3, [r3, #32]
 8003b28:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003b2a:	697a      	ldr	r2, [r7, #20]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b34:	2b04      	cmp	r3, #4
 8003b36:	d107      	bne.n	8003b48 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b40:	4313      	orrs	r3, r2
 8003b42:	697a      	ldr	r2, [r7, #20]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003b48:	4b71      	ldr	r3, [pc, #452]	@ (8003d10 <HAL_DMA_Init+0x424>)
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	4b71      	ldr	r3, [pc, #452]	@ (8003d14 <HAL_DMA_Init+0x428>)
 8003b4e:	4013      	ands	r3, r2
 8003b50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b54:	d328      	bcc.n	8003ba8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	2b28      	cmp	r3, #40	@ 0x28
 8003b5c:	d903      	bls.n	8003b66 <HAL_DMA_Init+0x27a>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	2b2e      	cmp	r3, #46	@ 0x2e
 8003b64:	d917      	bls.n	8003b96 <HAL_DMA_Init+0x2aa>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	2b3e      	cmp	r3, #62	@ 0x3e
 8003b6c:	d903      	bls.n	8003b76 <HAL_DMA_Init+0x28a>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	2b42      	cmp	r3, #66	@ 0x42
 8003b74:	d90f      	bls.n	8003b96 <HAL_DMA_Init+0x2aa>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	2b46      	cmp	r3, #70	@ 0x46
 8003b7c:	d903      	bls.n	8003b86 <HAL_DMA_Init+0x29a>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	2b48      	cmp	r3, #72	@ 0x48
 8003b84:	d907      	bls.n	8003b96 <HAL_DMA_Init+0x2aa>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	2b4e      	cmp	r3, #78	@ 0x4e
 8003b8c:	d905      	bls.n	8003b9a <HAL_DMA_Init+0x2ae>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	2b52      	cmp	r3, #82	@ 0x52
 8003b94:	d801      	bhi.n	8003b9a <HAL_DMA_Init+0x2ae>
 8003b96:	2301      	movs	r3, #1
 8003b98:	e000      	b.n	8003b9c <HAL_DMA_Init+0x2b0>
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d003      	beq.n	8003ba8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ba6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	697a      	ldr	r2, [r7, #20]
 8003bae:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	695b      	ldr	r3, [r3, #20]
 8003bb6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	f023 0307 	bic.w	r3, r3, #7
 8003bbe:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc4:	697a      	ldr	r2, [r7, #20]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bce:	2b04      	cmp	r3, #4
 8003bd0:	d117      	bne.n	8003c02 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bd6:	697a      	ldr	r2, [r7, #20]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d00e      	beq.n	8003c02 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f001 fddb 	bl	80057a0 <DMA_CheckFifoParam>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d008      	beq.n	8003c02 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2240      	movs	r2, #64	@ 0x40
 8003bf4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e197      	b.n	8003f32 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	697a      	ldr	r2, [r7, #20]
 8003c08:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f001 fd16 	bl	800563c <DMA_CalcBaseAndBitshift>
 8003c10:	4603      	mov	r3, r0
 8003c12:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c18:	f003 031f 	and.w	r3, r3, #31
 8003c1c:	223f      	movs	r2, #63	@ 0x3f
 8003c1e:	409a      	lsls	r2, r3
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	609a      	str	r2, [r3, #8]
 8003c24:	e0cd      	b.n	8003dc2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a3b      	ldr	r2, [pc, #236]	@ (8003d18 <HAL_DMA_Init+0x42c>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d022      	beq.n	8003c76 <HAL_DMA_Init+0x38a>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a39      	ldr	r2, [pc, #228]	@ (8003d1c <HAL_DMA_Init+0x430>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d01d      	beq.n	8003c76 <HAL_DMA_Init+0x38a>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a38      	ldr	r2, [pc, #224]	@ (8003d20 <HAL_DMA_Init+0x434>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d018      	beq.n	8003c76 <HAL_DMA_Init+0x38a>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a36      	ldr	r2, [pc, #216]	@ (8003d24 <HAL_DMA_Init+0x438>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d013      	beq.n	8003c76 <HAL_DMA_Init+0x38a>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a35      	ldr	r2, [pc, #212]	@ (8003d28 <HAL_DMA_Init+0x43c>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d00e      	beq.n	8003c76 <HAL_DMA_Init+0x38a>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a33      	ldr	r2, [pc, #204]	@ (8003d2c <HAL_DMA_Init+0x440>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d009      	beq.n	8003c76 <HAL_DMA_Init+0x38a>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a32      	ldr	r2, [pc, #200]	@ (8003d30 <HAL_DMA_Init+0x444>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d004      	beq.n	8003c76 <HAL_DMA_Init+0x38a>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a30      	ldr	r2, [pc, #192]	@ (8003d34 <HAL_DMA_Init+0x448>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d101      	bne.n	8003c7a <HAL_DMA_Init+0x38e>
 8003c76:	2301      	movs	r3, #1
 8003c78:	e000      	b.n	8003c7c <HAL_DMA_Init+0x390>
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	f000 8097 	beq.w	8003db0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a24      	ldr	r2, [pc, #144]	@ (8003d18 <HAL_DMA_Init+0x42c>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d021      	beq.n	8003cd0 <HAL_DMA_Init+0x3e4>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a22      	ldr	r2, [pc, #136]	@ (8003d1c <HAL_DMA_Init+0x430>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d01c      	beq.n	8003cd0 <HAL_DMA_Init+0x3e4>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a21      	ldr	r2, [pc, #132]	@ (8003d20 <HAL_DMA_Init+0x434>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d017      	beq.n	8003cd0 <HAL_DMA_Init+0x3e4>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a1f      	ldr	r2, [pc, #124]	@ (8003d24 <HAL_DMA_Init+0x438>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d012      	beq.n	8003cd0 <HAL_DMA_Init+0x3e4>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a1e      	ldr	r2, [pc, #120]	@ (8003d28 <HAL_DMA_Init+0x43c>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d00d      	beq.n	8003cd0 <HAL_DMA_Init+0x3e4>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a1c      	ldr	r2, [pc, #112]	@ (8003d2c <HAL_DMA_Init+0x440>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d008      	beq.n	8003cd0 <HAL_DMA_Init+0x3e4>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a1b      	ldr	r2, [pc, #108]	@ (8003d30 <HAL_DMA_Init+0x444>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d003      	beq.n	8003cd0 <HAL_DMA_Init+0x3e4>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a19      	ldr	r2, [pc, #100]	@ (8003d34 <HAL_DMA_Init+0x448>)
 8003cce:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2202      	movs	r2, #2
 8003cd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003ce8:	697a      	ldr	r2, [r7, #20]
 8003cea:	4b13      	ldr	r3, [pc, #76]	@ (8003d38 <HAL_DMA_Init+0x44c>)
 8003cec:	4013      	ands	r3, r2
 8003cee:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	2b40      	cmp	r3, #64	@ 0x40
 8003cf6:	d021      	beq.n	8003d3c <HAL_DMA_Init+0x450>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	2b80      	cmp	r3, #128	@ 0x80
 8003cfe:	d102      	bne.n	8003d06 <HAL_DMA_Init+0x41a>
 8003d00:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003d04:	e01b      	b.n	8003d3e <HAL_DMA_Init+0x452>
 8003d06:	2300      	movs	r3, #0
 8003d08:	e019      	b.n	8003d3e <HAL_DMA_Init+0x452>
 8003d0a:	bf00      	nop
 8003d0c:	fe10803f 	.word	0xfe10803f
 8003d10:	5c001000 	.word	0x5c001000
 8003d14:	ffff0000 	.word	0xffff0000
 8003d18:	58025408 	.word	0x58025408
 8003d1c:	5802541c 	.word	0x5802541c
 8003d20:	58025430 	.word	0x58025430
 8003d24:	58025444 	.word	0x58025444
 8003d28:	58025458 	.word	0x58025458
 8003d2c:	5802546c 	.word	0x5802546c
 8003d30:	58025480 	.word	0x58025480
 8003d34:	58025494 	.word	0x58025494
 8003d38:	fffe000f 	.word	0xfffe000f
 8003d3c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	68d2      	ldr	r2, [r2, #12]
 8003d42:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003d44:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003d4c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	695b      	ldr	r3, [r3, #20]
 8003d52:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003d54:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003d5c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	69db      	ldr	r3, [r3, #28]
 8003d62:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003d64:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a1b      	ldr	r3, [r3, #32]
 8003d6a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003d6c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003d6e:	697a      	ldr	r2, [r7, #20]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	697a      	ldr	r2, [r7, #20]
 8003d7a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	461a      	mov	r2, r3
 8003d82:	4b6e      	ldr	r3, [pc, #440]	@ (8003f3c <HAL_DMA_Init+0x650>)
 8003d84:	4413      	add	r3, r2
 8003d86:	4a6e      	ldr	r2, [pc, #440]	@ (8003f40 <HAL_DMA_Init+0x654>)
 8003d88:	fba2 2303 	umull	r2, r3, r2, r3
 8003d8c:	091b      	lsrs	r3, r3, #4
 8003d8e:	009a      	lsls	r2, r3, #2
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f001 fc51 	bl	800563c <DMA_CalcBaseAndBitshift>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003da2:	f003 031f 	and.w	r3, r3, #31
 8003da6:	2201      	movs	r2, #1
 8003da8:	409a      	lsls	r2, r3
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	605a      	str	r2, [r3, #4]
 8003dae:	e008      	b.n	8003dc2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2240      	movs	r2, #64	@ 0x40
 8003db4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2203      	movs	r2, #3
 8003dba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e0b7      	b.n	8003f32 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a5f      	ldr	r2, [pc, #380]	@ (8003f44 <HAL_DMA_Init+0x658>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d072      	beq.n	8003eb2 <HAL_DMA_Init+0x5c6>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a5d      	ldr	r2, [pc, #372]	@ (8003f48 <HAL_DMA_Init+0x65c>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d06d      	beq.n	8003eb2 <HAL_DMA_Init+0x5c6>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a5c      	ldr	r2, [pc, #368]	@ (8003f4c <HAL_DMA_Init+0x660>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d068      	beq.n	8003eb2 <HAL_DMA_Init+0x5c6>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a5a      	ldr	r2, [pc, #360]	@ (8003f50 <HAL_DMA_Init+0x664>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d063      	beq.n	8003eb2 <HAL_DMA_Init+0x5c6>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a59      	ldr	r2, [pc, #356]	@ (8003f54 <HAL_DMA_Init+0x668>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d05e      	beq.n	8003eb2 <HAL_DMA_Init+0x5c6>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a57      	ldr	r2, [pc, #348]	@ (8003f58 <HAL_DMA_Init+0x66c>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d059      	beq.n	8003eb2 <HAL_DMA_Init+0x5c6>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a56      	ldr	r2, [pc, #344]	@ (8003f5c <HAL_DMA_Init+0x670>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d054      	beq.n	8003eb2 <HAL_DMA_Init+0x5c6>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a54      	ldr	r2, [pc, #336]	@ (8003f60 <HAL_DMA_Init+0x674>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d04f      	beq.n	8003eb2 <HAL_DMA_Init+0x5c6>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a53      	ldr	r2, [pc, #332]	@ (8003f64 <HAL_DMA_Init+0x678>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d04a      	beq.n	8003eb2 <HAL_DMA_Init+0x5c6>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a51      	ldr	r2, [pc, #324]	@ (8003f68 <HAL_DMA_Init+0x67c>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d045      	beq.n	8003eb2 <HAL_DMA_Init+0x5c6>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a50      	ldr	r2, [pc, #320]	@ (8003f6c <HAL_DMA_Init+0x680>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d040      	beq.n	8003eb2 <HAL_DMA_Init+0x5c6>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a4e      	ldr	r2, [pc, #312]	@ (8003f70 <HAL_DMA_Init+0x684>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d03b      	beq.n	8003eb2 <HAL_DMA_Init+0x5c6>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a4d      	ldr	r2, [pc, #308]	@ (8003f74 <HAL_DMA_Init+0x688>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d036      	beq.n	8003eb2 <HAL_DMA_Init+0x5c6>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a4b      	ldr	r2, [pc, #300]	@ (8003f78 <HAL_DMA_Init+0x68c>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d031      	beq.n	8003eb2 <HAL_DMA_Init+0x5c6>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a4a      	ldr	r2, [pc, #296]	@ (8003f7c <HAL_DMA_Init+0x690>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d02c      	beq.n	8003eb2 <HAL_DMA_Init+0x5c6>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a48      	ldr	r2, [pc, #288]	@ (8003f80 <HAL_DMA_Init+0x694>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d027      	beq.n	8003eb2 <HAL_DMA_Init+0x5c6>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a47      	ldr	r2, [pc, #284]	@ (8003f84 <HAL_DMA_Init+0x698>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d022      	beq.n	8003eb2 <HAL_DMA_Init+0x5c6>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a45      	ldr	r2, [pc, #276]	@ (8003f88 <HAL_DMA_Init+0x69c>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d01d      	beq.n	8003eb2 <HAL_DMA_Init+0x5c6>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a44      	ldr	r2, [pc, #272]	@ (8003f8c <HAL_DMA_Init+0x6a0>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d018      	beq.n	8003eb2 <HAL_DMA_Init+0x5c6>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a42      	ldr	r2, [pc, #264]	@ (8003f90 <HAL_DMA_Init+0x6a4>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d013      	beq.n	8003eb2 <HAL_DMA_Init+0x5c6>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a41      	ldr	r2, [pc, #260]	@ (8003f94 <HAL_DMA_Init+0x6a8>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d00e      	beq.n	8003eb2 <HAL_DMA_Init+0x5c6>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a3f      	ldr	r2, [pc, #252]	@ (8003f98 <HAL_DMA_Init+0x6ac>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d009      	beq.n	8003eb2 <HAL_DMA_Init+0x5c6>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a3e      	ldr	r2, [pc, #248]	@ (8003f9c <HAL_DMA_Init+0x6b0>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d004      	beq.n	8003eb2 <HAL_DMA_Init+0x5c6>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a3c      	ldr	r2, [pc, #240]	@ (8003fa0 <HAL_DMA_Init+0x6b4>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d101      	bne.n	8003eb6 <HAL_DMA_Init+0x5ca>
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e000      	b.n	8003eb8 <HAL_DMA_Init+0x5cc>
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d032      	beq.n	8003f22 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f001 fceb 	bl	8005898 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	2b80      	cmp	r3, #128	@ 0x80
 8003ec8:	d102      	bne.n	8003ed0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685a      	ldr	r2, [r3, #4]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ed8:	b2d2      	uxtb	r2, r2
 8003eda:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003ee4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d010      	beq.n	8003f10 <HAL_DMA_Init+0x624>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	2b08      	cmp	r3, #8
 8003ef4:	d80c      	bhi.n	8003f10 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f001 fd68 	bl	80059cc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f00:	2200      	movs	r2, #0
 8003f02:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003f0c:	605a      	str	r2, [r3, #4]
 8003f0e:	e008      	b.n	8003f22 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3718      	adds	r7, #24
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	a7fdabf8 	.word	0xa7fdabf8
 8003f40:	cccccccd 	.word	0xcccccccd
 8003f44:	40020010 	.word	0x40020010
 8003f48:	40020028 	.word	0x40020028
 8003f4c:	40020040 	.word	0x40020040
 8003f50:	40020058 	.word	0x40020058
 8003f54:	40020070 	.word	0x40020070
 8003f58:	40020088 	.word	0x40020088
 8003f5c:	400200a0 	.word	0x400200a0
 8003f60:	400200b8 	.word	0x400200b8
 8003f64:	40020410 	.word	0x40020410
 8003f68:	40020428 	.word	0x40020428
 8003f6c:	40020440 	.word	0x40020440
 8003f70:	40020458 	.word	0x40020458
 8003f74:	40020470 	.word	0x40020470
 8003f78:	40020488 	.word	0x40020488
 8003f7c:	400204a0 	.word	0x400204a0
 8003f80:	400204b8 	.word	0x400204b8
 8003f84:	58025408 	.word	0x58025408
 8003f88:	5802541c 	.word	0x5802541c
 8003f8c:	58025430 	.word	0x58025430
 8003f90:	58025444 	.word	0x58025444
 8003f94:	58025458 	.word	0x58025458
 8003f98:	5802546c 	.word	0x5802546c
 8003f9c:	58025480 	.word	0x58025480
 8003fa0:	58025494 	.word	0x58025494

08003fa4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b086      	sub	sp, #24
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	607a      	str	r2, [r7, #4]
 8003fb0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d101      	bne.n	8003fc0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e226      	b.n	800440e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d101      	bne.n	8003fce <HAL_DMA_Start_IT+0x2a>
 8003fca:	2302      	movs	r3, #2
 8003fcc:	e21f      	b.n	800440e <HAL_DMA_Start_IT+0x46a>
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	f040 820a 	bne.w	80043f8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2202      	movs	r2, #2
 8003fe8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a68      	ldr	r2, [pc, #416]	@ (8004198 <HAL_DMA_Start_IT+0x1f4>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d04a      	beq.n	8004092 <HAL_DMA_Start_IT+0xee>
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a66      	ldr	r2, [pc, #408]	@ (800419c <HAL_DMA_Start_IT+0x1f8>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d045      	beq.n	8004092 <HAL_DMA_Start_IT+0xee>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a65      	ldr	r2, [pc, #404]	@ (80041a0 <HAL_DMA_Start_IT+0x1fc>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d040      	beq.n	8004092 <HAL_DMA_Start_IT+0xee>
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a63      	ldr	r2, [pc, #396]	@ (80041a4 <HAL_DMA_Start_IT+0x200>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d03b      	beq.n	8004092 <HAL_DMA_Start_IT+0xee>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a62      	ldr	r2, [pc, #392]	@ (80041a8 <HAL_DMA_Start_IT+0x204>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d036      	beq.n	8004092 <HAL_DMA_Start_IT+0xee>
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a60      	ldr	r2, [pc, #384]	@ (80041ac <HAL_DMA_Start_IT+0x208>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d031      	beq.n	8004092 <HAL_DMA_Start_IT+0xee>
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a5f      	ldr	r2, [pc, #380]	@ (80041b0 <HAL_DMA_Start_IT+0x20c>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d02c      	beq.n	8004092 <HAL_DMA_Start_IT+0xee>
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a5d      	ldr	r2, [pc, #372]	@ (80041b4 <HAL_DMA_Start_IT+0x210>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d027      	beq.n	8004092 <HAL_DMA_Start_IT+0xee>
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a5c      	ldr	r2, [pc, #368]	@ (80041b8 <HAL_DMA_Start_IT+0x214>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d022      	beq.n	8004092 <HAL_DMA_Start_IT+0xee>
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a5a      	ldr	r2, [pc, #360]	@ (80041bc <HAL_DMA_Start_IT+0x218>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d01d      	beq.n	8004092 <HAL_DMA_Start_IT+0xee>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a59      	ldr	r2, [pc, #356]	@ (80041c0 <HAL_DMA_Start_IT+0x21c>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d018      	beq.n	8004092 <HAL_DMA_Start_IT+0xee>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a57      	ldr	r2, [pc, #348]	@ (80041c4 <HAL_DMA_Start_IT+0x220>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d013      	beq.n	8004092 <HAL_DMA_Start_IT+0xee>
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a56      	ldr	r2, [pc, #344]	@ (80041c8 <HAL_DMA_Start_IT+0x224>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d00e      	beq.n	8004092 <HAL_DMA_Start_IT+0xee>
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a54      	ldr	r2, [pc, #336]	@ (80041cc <HAL_DMA_Start_IT+0x228>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d009      	beq.n	8004092 <HAL_DMA_Start_IT+0xee>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a53      	ldr	r2, [pc, #332]	@ (80041d0 <HAL_DMA_Start_IT+0x22c>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d004      	beq.n	8004092 <HAL_DMA_Start_IT+0xee>
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a51      	ldr	r2, [pc, #324]	@ (80041d4 <HAL_DMA_Start_IT+0x230>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d108      	bne.n	80040a4 <HAL_DMA_Start_IT+0x100>
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f022 0201 	bic.w	r2, r2, #1
 80040a0:	601a      	str	r2, [r3, #0]
 80040a2:	e007      	b.n	80040b4 <HAL_DMA_Start_IT+0x110>
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f022 0201 	bic.w	r2, r2, #1
 80040b2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	68b9      	ldr	r1, [r7, #8]
 80040ba:	68f8      	ldr	r0, [r7, #12]
 80040bc:	f001 f912 	bl	80052e4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a34      	ldr	r2, [pc, #208]	@ (8004198 <HAL_DMA_Start_IT+0x1f4>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d04a      	beq.n	8004160 <HAL_DMA_Start_IT+0x1bc>
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a33      	ldr	r2, [pc, #204]	@ (800419c <HAL_DMA_Start_IT+0x1f8>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d045      	beq.n	8004160 <HAL_DMA_Start_IT+0x1bc>
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a31      	ldr	r2, [pc, #196]	@ (80041a0 <HAL_DMA_Start_IT+0x1fc>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d040      	beq.n	8004160 <HAL_DMA_Start_IT+0x1bc>
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a30      	ldr	r2, [pc, #192]	@ (80041a4 <HAL_DMA_Start_IT+0x200>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d03b      	beq.n	8004160 <HAL_DMA_Start_IT+0x1bc>
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a2e      	ldr	r2, [pc, #184]	@ (80041a8 <HAL_DMA_Start_IT+0x204>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d036      	beq.n	8004160 <HAL_DMA_Start_IT+0x1bc>
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a2d      	ldr	r2, [pc, #180]	@ (80041ac <HAL_DMA_Start_IT+0x208>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d031      	beq.n	8004160 <HAL_DMA_Start_IT+0x1bc>
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a2b      	ldr	r2, [pc, #172]	@ (80041b0 <HAL_DMA_Start_IT+0x20c>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d02c      	beq.n	8004160 <HAL_DMA_Start_IT+0x1bc>
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a2a      	ldr	r2, [pc, #168]	@ (80041b4 <HAL_DMA_Start_IT+0x210>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d027      	beq.n	8004160 <HAL_DMA_Start_IT+0x1bc>
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a28      	ldr	r2, [pc, #160]	@ (80041b8 <HAL_DMA_Start_IT+0x214>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d022      	beq.n	8004160 <HAL_DMA_Start_IT+0x1bc>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a27      	ldr	r2, [pc, #156]	@ (80041bc <HAL_DMA_Start_IT+0x218>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d01d      	beq.n	8004160 <HAL_DMA_Start_IT+0x1bc>
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a25      	ldr	r2, [pc, #148]	@ (80041c0 <HAL_DMA_Start_IT+0x21c>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d018      	beq.n	8004160 <HAL_DMA_Start_IT+0x1bc>
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a24      	ldr	r2, [pc, #144]	@ (80041c4 <HAL_DMA_Start_IT+0x220>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d013      	beq.n	8004160 <HAL_DMA_Start_IT+0x1bc>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a22      	ldr	r2, [pc, #136]	@ (80041c8 <HAL_DMA_Start_IT+0x224>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d00e      	beq.n	8004160 <HAL_DMA_Start_IT+0x1bc>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a21      	ldr	r2, [pc, #132]	@ (80041cc <HAL_DMA_Start_IT+0x228>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d009      	beq.n	8004160 <HAL_DMA_Start_IT+0x1bc>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a1f      	ldr	r2, [pc, #124]	@ (80041d0 <HAL_DMA_Start_IT+0x22c>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d004      	beq.n	8004160 <HAL_DMA_Start_IT+0x1bc>
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a1e      	ldr	r2, [pc, #120]	@ (80041d4 <HAL_DMA_Start_IT+0x230>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d101      	bne.n	8004164 <HAL_DMA_Start_IT+0x1c0>
 8004160:	2301      	movs	r3, #1
 8004162:	e000      	b.n	8004166 <HAL_DMA_Start_IT+0x1c2>
 8004164:	2300      	movs	r3, #0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d036      	beq.n	80041d8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f023 021e 	bic.w	r2, r3, #30
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f042 0216 	orr.w	r2, r2, #22
 800417c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004182:	2b00      	cmp	r3, #0
 8004184:	d03e      	beq.n	8004204 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f042 0208 	orr.w	r2, r2, #8
 8004194:	601a      	str	r2, [r3, #0]
 8004196:	e035      	b.n	8004204 <HAL_DMA_Start_IT+0x260>
 8004198:	40020010 	.word	0x40020010
 800419c:	40020028 	.word	0x40020028
 80041a0:	40020040 	.word	0x40020040
 80041a4:	40020058 	.word	0x40020058
 80041a8:	40020070 	.word	0x40020070
 80041ac:	40020088 	.word	0x40020088
 80041b0:	400200a0 	.word	0x400200a0
 80041b4:	400200b8 	.word	0x400200b8
 80041b8:	40020410 	.word	0x40020410
 80041bc:	40020428 	.word	0x40020428
 80041c0:	40020440 	.word	0x40020440
 80041c4:	40020458 	.word	0x40020458
 80041c8:	40020470 	.word	0x40020470
 80041cc:	40020488 	.word	0x40020488
 80041d0:	400204a0 	.word	0x400204a0
 80041d4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f023 020e 	bic.w	r2, r3, #14
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f042 020a 	orr.w	r2, r2, #10
 80041ea:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d007      	beq.n	8004204 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f042 0204 	orr.w	r2, r2, #4
 8004202:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a83      	ldr	r2, [pc, #524]	@ (8004418 <HAL_DMA_Start_IT+0x474>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d072      	beq.n	80042f4 <HAL_DMA_Start_IT+0x350>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a82      	ldr	r2, [pc, #520]	@ (800441c <HAL_DMA_Start_IT+0x478>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d06d      	beq.n	80042f4 <HAL_DMA_Start_IT+0x350>
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a80      	ldr	r2, [pc, #512]	@ (8004420 <HAL_DMA_Start_IT+0x47c>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d068      	beq.n	80042f4 <HAL_DMA_Start_IT+0x350>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a7f      	ldr	r2, [pc, #508]	@ (8004424 <HAL_DMA_Start_IT+0x480>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d063      	beq.n	80042f4 <HAL_DMA_Start_IT+0x350>
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a7d      	ldr	r2, [pc, #500]	@ (8004428 <HAL_DMA_Start_IT+0x484>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d05e      	beq.n	80042f4 <HAL_DMA_Start_IT+0x350>
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a7c      	ldr	r2, [pc, #496]	@ (800442c <HAL_DMA_Start_IT+0x488>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d059      	beq.n	80042f4 <HAL_DMA_Start_IT+0x350>
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a7a      	ldr	r2, [pc, #488]	@ (8004430 <HAL_DMA_Start_IT+0x48c>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d054      	beq.n	80042f4 <HAL_DMA_Start_IT+0x350>
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a79      	ldr	r2, [pc, #484]	@ (8004434 <HAL_DMA_Start_IT+0x490>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d04f      	beq.n	80042f4 <HAL_DMA_Start_IT+0x350>
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a77      	ldr	r2, [pc, #476]	@ (8004438 <HAL_DMA_Start_IT+0x494>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d04a      	beq.n	80042f4 <HAL_DMA_Start_IT+0x350>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a76      	ldr	r2, [pc, #472]	@ (800443c <HAL_DMA_Start_IT+0x498>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d045      	beq.n	80042f4 <HAL_DMA_Start_IT+0x350>
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a74      	ldr	r2, [pc, #464]	@ (8004440 <HAL_DMA_Start_IT+0x49c>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d040      	beq.n	80042f4 <HAL_DMA_Start_IT+0x350>
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a73      	ldr	r2, [pc, #460]	@ (8004444 <HAL_DMA_Start_IT+0x4a0>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d03b      	beq.n	80042f4 <HAL_DMA_Start_IT+0x350>
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a71      	ldr	r2, [pc, #452]	@ (8004448 <HAL_DMA_Start_IT+0x4a4>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d036      	beq.n	80042f4 <HAL_DMA_Start_IT+0x350>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a70      	ldr	r2, [pc, #448]	@ (800444c <HAL_DMA_Start_IT+0x4a8>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d031      	beq.n	80042f4 <HAL_DMA_Start_IT+0x350>
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a6e      	ldr	r2, [pc, #440]	@ (8004450 <HAL_DMA_Start_IT+0x4ac>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d02c      	beq.n	80042f4 <HAL_DMA_Start_IT+0x350>
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a6d      	ldr	r2, [pc, #436]	@ (8004454 <HAL_DMA_Start_IT+0x4b0>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d027      	beq.n	80042f4 <HAL_DMA_Start_IT+0x350>
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a6b      	ldr	r2, [pc, #428]	@ (8004458 <HAL_DMA_Start_IT+0x4b4>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d022      	beq.n	80042f4 <HAL_DMA_Start_IT+0x350>
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a6a      	ldr	r2, [pc, #424]	@ (800445c <HAL_DMA_Start_IT+0x4b8>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d01d      	beq.n	80042f4 <HAL_DMA_Start_IT+0x350>
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a68      	ldr	r2, [pc, #416]	@ (8004460 <HAL_DMA_Start_IT+0x4bc>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d018      	beq.n	80042f4 <HAL_DMA_Start_IT+0x350>
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a67      	ldr	r2, [pc, #412]	@ (8004464 <HAL_DMA_Start_IT+0x4c0>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d013      	beq.n	80042f4 <HAL_DMA_Start_IT+0x350>
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a65      	ldr	r2, [pc, #404]	@ (8004468 <HAL_DMA_Start_IT+0x4c4>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d00e      	beq.n	80042f4 <HAL_DMA_Start_IT+0x350>
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a64      	ldr	r2, [pc, #400]	@ (800446c <HAL_DMA_Start_IT+0x4c8>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d009      	beq.n	80042f4 <HAL_DMA_Start_IT+0x350>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a62      	ldr	r2, [pc, #392]	@ (8004470 <HAL_DMA_Start_IT+0x4cc>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d004      	beq.n	80042f4 <HAL_DMA_Start_IT+0x350>
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a61      	ldr	r2, [pc, #388]	@ (8004474 <HAL_DMA_Start_IT+0x4d0>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d101      	bne.n	80042f8 <HAL_DMA_Start_IT+0x354>
 80042f4:	2301      	movs	r3, #1
 80042f6:	e000      	b.n	80042fa <HAL_DMA_Start_IT+0x356>
 80042f8:	2300      	movs	r3, #0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d01a      	beq.n	8004334 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d007      	beq.n	800431c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004316:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800431a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004320:	2b00      	cmp	r3, #0
 8004322:	d007      	beq.n	8004334 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800432e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004332:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a37      	ldr	r2, [pc, #220]	@ (8004418 <HAL_DMA_Start_IT+0x474>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d04a      	beq.n	80043d4 <HAL_DMA_Start_IT+0x430>
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a36      	ldr	r2, [pc, #216]	@ (800441c <HAL_DMA_Start_IT+0x478>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d045      	beq.n	80043d4 <HAL_DMA_Start_IT+0x430>
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a34      	ldr	r2, [pc, #208]	@ (8004420 <HAL_DMA_Start_IT+0x47c>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d040      	beq.n	80043d4 <HAL_DMA_Start_IT+0x430>
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a33      	ldr	r2, [pc, #204]	@ (8004424 <HAL_DMA_Start_IT+0x480>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d03b      	beq.n	80043d4 <HAL_DMA_Start_IT+0x430>
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a31      	ldr	r2, [pc, #196]	@ (8004428 <HAL_DMA_Start_IT+0x484>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d036      	beq.n	80043d4 <HAL_DMA_Start_IT+0x430>
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a30      	ldr	r2, [pc, #192]	@ (800442c <HAL_DMA_Start_IT+0x488>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d031      	beq.n	80043d4 <HAL_DMA_Start_IT+0x430>
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a2e      	ldr	r2, [pc, #184]	@ (8004430 <HAL_DMA_Start_IT+0x48c>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d02c      	beq.n	80043d4 <HAL_DMA_Start_IT+0x430>
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a2d      	ldr	r2, [pc, #180]	@ (8004434 <HAL_DMA_Start_IT+0x490>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d027      	beq.n	80043d4 <HAL_DMA_Start_IT+0x430>
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a2b      	ldr	r2, [pc, #172]	@ (8004438 <HAL_DMA_Start_IT+0x494>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d022      	beq.n	80043d4 <HAL_DMA_Start_IT+0x430>
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a2a      	ldr	r2, [pc, #168]	@ (800443c <HAL_DMA_Start_IT+0x498>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d01d      	beq.n	80043d4 <HAL_DMA_Start_IT+0x430>
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a28      	ldr	r2, [pc, #160]	@ (8004440 <HAL_DMA_Start_IT+0x49c>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d018      	beq.n	80043d4 <HAL_DMA_Start_IT+0x430>
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a27      	ldr	r2, [pc, #156]	@ (8004444 <HAL_DMA_Start_IT+0x4a0>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d013      	beq.n	80043d4 <HAL_DMA_Start_IT+0x430>
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a25      	ldr	r2, [pc, #148]	@ (8004448 <HAL_DMA_Start_IT+0x4a4>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d00e      	beq.n	80043d4 <HAL_DMA_Start_IT+0x430>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a24      	ldr	r2, [pc, #144]	@ (800444c <HAL_DMA_Start_IT+0x4a8>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d009      	beq.n	80043d4 <HAL_DMA_Start_IT+0x430>
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a22      	ldr	r2, [pc, #136]	@ (8004450 <HAL_DMA_Start_IT+0x4ac>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d004      	beq.n	80043d4 <HAL_DMA_Start_IT+0x430>
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a21      	ldr	r2, [pc, #132]	@ (8004454 <HAL_DMA_Start_IT+0x4b0>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d108      	bne.n	80043e6 <HAL_DMA_Start_IT+0x442>
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f042 0201 	orr.w	r2, r2, #1
 80043e2:	601a      	str	r2, [r3, #0]
 80043e4:	e012      	b.n	800440c <HAL_DMA_Start_IT+0x468>
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f042 0201 	orr.w	r2, r2, #1
 80043f4:	601a      	str	r2, [r3, #0]
 80043f6:	e009      	b.n	800440c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80043fe:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800440c:	7dfb      	ldrb	r3, [r7, #23]
}
 800440e:	4618      	mov	r0, r3
 8004410:	3718      	adds	r7, #24
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	40020010 	.word	0x40020010
 800441c:	40020028 	.word	0x40020028
 8004420:	40020040 	.word	0x40020040
 8004424:	40020058 	.word	0x40020058
 8004428:	40020070 	.word	0x40020070
 800442c:	40020088 	.word	0x40020088
 8004430:	400200a0 	.word	0x400200a0
 8004434:	400200b8 	.word	0x400200b8
 8004438:	40020410 	.word	0x40020410
 800443c:	40020428 	.word	0x40020428
 8004440:	40020440 	.word	0x40020440
 8004444:	40020458 	.word	0x40020458
 8004448:	40020470 	.word	0x40020470
 800444c:	40020488 	.word	0x40020488
 8004450:	400204a0 	.word	0x400204a0
 8004454:	400204b8 	.word	0x400204b8
 8004458:	58025408 	.word	0x58025408
 800445c:	5802541c 	.word	0x5802541c
 8004460:	58025430 	.word	0x58025430
 8004464:	58025444 	.word	0x58025444
 8004468:	58025458 	.word	0x58025458
 800446c:	5802546c 	.word	0x5802546c
 8004470:	58025480 	.word	0x58025480
 8004474:	58025494 	.word	0x58025494

08004478 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b08a      	sub	sp, #40	@ 0x28
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004480:	2300      	movs	r3, #0
 8004482:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004484:	4b67      	ldr	r3, [pc, #412]	@ (8004624 <HAL_DMA_IRQHandler+0x1ac>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a67      	ldr	r2, [pc, #412]	@ (8004628 <HAL_DMA_IRQHandler+0x1b0>)
 800448a:	fba2 2303 	umull	r2, r3, r2, r3
 800448e:	0a9b      	lsrs	r3, r3, #10
 8004490:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004496:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800449c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800449e:	6a3b      	ldr	r3, [r7, #32]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a5f      	ldr	r2, [pc, #380]	@ (800462c <HAL_DMA_IRQHandler+0x1b4>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d04a      	beq.n	800454a <HAL_DMA_IRQHandler+0xd2>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a5d      	ldr	r2, [pc, #372]	@ (8004630 <HAL_DMA_IRQHandler+0x1b8>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d045      	beq.n	800454a <HAL_DMA_IRQHandler+0xd2>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a5c      	ldr	r2, [pc, #368]	@ (8004634 <HAL_DMA_IRQHandler+0x1bc>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d040      	beq.n	800454a <HAL_DMA_IRQHandler+0xd2>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a5a      	ldr	r2, [pc, #360]	@ (8004638 <HAL_DMA_IRQHandler+0x1c0>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d03b      	beq.n	800454a <HAL_DMA_IRQHandler+0xd2>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a59      	ldr	r2, [pc, #356]	@ (800463c <HAL_DMA_IRQHandler+0x1c4>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d036      	beq.n	800454a <HAL_DMA_IRQHandler+0xd2>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a57      	ldr	r2, [pc, #348]	@ (8004640 <HAL_DMA_IRQHandler+0x1c8>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d031      	beq.n	800454a <HAL_DMA_IRQHandler+0xd2>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a56      	ldr	r2, [pc, #344]	@ (8004644 <HAL_DMA_IRQHandler+0x1cc>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d02c      	beq.n	800454a <HAL_DMA_IRQHandler+0xd2>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a54      	ldr	r2, [pc, #336]	@ (8004648 <HAL_DMA_IRQHandler+0x1d0>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d027      	beq.n	800454a <HAL_DMA_IRQHandler+0xd2>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a53      	ldr	r2, [pc, #332]	@ (800464c <HAL_DMA_IRQHandler+0x1d4>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d022      	beq.n	800454a <HAL_DMA_IRQHandler+0xd2>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a51      	ldr	r2, [pc, #324]	@ (8004650 <HAL_DMA_IRQHandler+0x1d8>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d01d      	beq.n	800454a <HAL_DMA_IRQHandler+0xd2>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a50      	ldr	r2, [pc, #320]	@ (8004654 <HAL_DMA_IRQHandler+0x1dc>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d018      	beq.n	800454a <HAL_DMA_IRQHandler+0xd2>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a4e      	ldr	r2, [pc, #312]	@ (8004658 <HAL_DMA_IRQHandler+0x1e0>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d013      	beq.n	800454a <HAL_DMA_IRQHandler+0xd2>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a4d      	ldr	r2, [pc, #308]	@ (800465c <HAL_DMA_IRQHandler+0x1e4>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d00e      	beq.n	800454a <HAL_DMA_IRQHandler+0xd2>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a4b      	ldr	r2, [pc, #300]	@ (8004660 <HAL_DMA_IRQHandler+0x1e8>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d009      	beq.n	800454a <HAL_DMA_IRQHandler+0xd2>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a4a      	ldr	r2, [pc, #296]	@ (8004664 <HAL_DMA_IRQHandler+0x1ec>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d004      	beq.n	800454a <HAL_DMA_IRQHandler+0xd2>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a48      	ldr	r2, [pc, #288]	@ (8004668 <HAL_DMA_IRQHandler+0x1f0>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d101      	bne.n	800454e <HAL_DMA_IRQHandler+0xd6>
 800454a:	2301      	movs	r3, #1
 800454c:	e000      	b.n	8004550 <HAL_DMA_IRQHandler+0xd8>
 800454e:	2300      	movs	r3, #0
 8004550:	2b00      	cmp	r3, #0
 8004552:	f000 842b 	beq.w	8004dac <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800455a:	f003 031f 	and.w	r3, r3, #31
 800455e:	2208      	movs	r2, #8
 8004560:	409a      	lsls	r2, r3
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	4013      	ands	r3, r2
 8004566:	2b00      	cmp	r3, #0
 8004568:	f000 80a2 	beq.w	80046b0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a2e      	ldr	r2, [pc, #184]	@ (800462c <HAL_DMA_IRQHandler+0x1b4>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d04a      	beq.n	800460c <HAL_DMA_IRQHandler+0x194>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a2d      	ldr	r2, [pc, #180]	@ (8004630 <HAL_DMA_IRQHandler+0x1b8>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d045      	beq.n	800460c <HAL_DMA_IRQHandler+0x194>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a2b      	ldr	r2, [pc, #172]	@ (8004634 <HAL_DMA_IRQHandler+0x1bc>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d040      	beq.n	800460c <HAL_DMA_IRQHandler+0x194>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a2a      	ldr	r2, [pc, #168]	@ (8004638 <HAL_DMA_IRQHandler+0x1c0>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d03b      	beq.n	800460c <HAL_DMA_IRQHandler+0x194>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a28      	ldr	r2, [pc, #160]	@ (800463c <HAL_DMA_IRQHandler+0x1c4>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d036      	beq.n	800460c <HAL_DMA_IRQHandler+0x194>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a27      	ldr	r2, [pc, #156]	@ (8004640 <HAL_DMA_IRQHandler+0x1c8>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d031      	beq.n	800460c <HAL_DMA_IRQHandler+0x194>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a25      	ldr	r2, [pc, #148]	@ (8004644 <HAL_DMA_IRQHandler+0x1cc>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d02c      	beq.n	800460c <HAL_DMA_IRQHandler+0x194>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a24      	ldr	r2, [pc, #144]	@ (8004648 <HAL_DMA_IRQHandler+0x1d0>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d027      	beq.n	800460c <HAL_DMA_IRQHandler+0x194>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a22      	ldr	r2, [pc, #136]	@ (800464c <HAL_DMA_IRQHandler+0x1d4>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d022      	beq.n	800460c <HAL_DMA_IRQHandler+0x194>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a21      	ldr	r2, [pc, #132]	@ (8004650 <HAL_DMA_IRQHandler+0x1d8>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d01d      	beq.n	800460c <HAL_DMA_IRQHandler+0x194>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a1f      	ldr	r2, [pc, #124]	@ (8004654 <HAL_DMA_IRQHandler+0x1dc>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d018      	beq.n	800460c <HAL_DMA_IRQHandler+0x194>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a1e      	ldr	r2, [pc, #120]	@ (8004658 <HAL_DMA_IRQHandler+0x1e0>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d013      	beq.n	800460c <HAL_DMA_IRQHandler+0x194>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a1c      	ldr	r2, [pc, #112]	@ (800465c <HAL_DMA_IRQHandler+0x1e4>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d00e      	beq.n	800460c <HAL_DMA_IRQHandler+0x194>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a1b      	ldr	r2, [pc, #108]	@ (8004660 <HAL_DMA_IRQHandler+0x1e8>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d009      	beq.n	800460c <HAL_DMA_IRQHandler+0x194>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a19      	ldr	r2, [pc, #100]	@ (8004664 <HAL_DMA_IRQHandler+0x1ec>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d004      	beq.n	800460c <HAL_DMA_IRQHandler+0x194>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a18      	ldr	r2, [pc, #96]	@ (8004668 <HAL_DMA_IRQHandler+0x1f0>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d12f      	bne.n	800466c <HAL_DMA_IRQHandler+0x1f4>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0304 	and.w	r3, r3, #4
 8004616:	2b00      	cmp	r3, #0
 8004618:	bf14      	ite	ne
 800461a:	2301      	movne	r3, #1
 800461c:	2300      	moveq	r3, #0
 800461e:	b2db      	uxtb	r3, r3
 8004620:	e02e      	b.n	8004680 <HAL_DMA_IRQHandler+0x208>
 8004622:	bf00      	nop
 8004624:	24000000 	.word	0x24000000
 8004628:	1b4e81b5 	.word	0x1b4e81b5
 800462c:	40020010 	.word	0x40020010
 8004630:	40020028 	.word	0x40020028
 8004634:	40020040 	.word	0x40020040
 8004638:	40020058 	.word	0x40020058
 800463c:	40020070 	.word	0x40020070
 8004640:	40020088 	.word	0x40020088
 8004644:	400200a0 	.word	0x400200a0
 8004648:	400200b8 	.word	0x400200b8
 800464c:	40020410 	.word	0x40020410
 8004650:	40020428 	.word	0x40020428
 8004654:	40020440 	.word	0x40020440
 8004658:	40020458 	.word	0x40020458
 800465c:	40020470 	.word	0x40020470
 8004660:	40020488 	.word	0x40020488
 8004664:	400204a0 	.word	0x400204a0
 8004668:	400204b8 	.word	0x400204b8
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0308 	and.w	r3, r3, #8
 8004676:	2b00      	cmp	r3, #0
 8004678:	bf14      	ite	ne
 800467a:	2301      	movne	r3, #1
 800467c:	2300      	moveq	r3, #0
 800467e:	b2db      	uxtb	r3, r3
 8004680:	2b00      	cmp	r3, #0
 8004682:	d015      	beq.n	80046b0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f022 0204 	bic.w	r2, r2, #4
 8004692:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004698:	f003 031f 	and.w	r3, r3, #31
 800469c:	2208      	movs	r2, #8
 800469e:	409a      	lsls	r2, r3
 80046a0:	6a3b      	ldr	r3, [r7, #32]
 80046a2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046a8:	f043 0201 	orr.w	r2, r3, #1
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046b4:	f003 031f 	and.w	r3, r3, #31
 80046b8:	69ba      	ldr	r2, [r7, #24]
 80046ba:	fa22 f303 	lsr.w	r3, r2, r3
 80046be:	f003 0301 	and.w	r3, r3, #1
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d06e      	beq.n	80047a4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a69      	ldr	r2, [pc, #420]	@ (8004870 <HAL_DMA_IRQHandler+0x3f8>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d04a      	beq.n	8004766 <HAL_DMA_IRQHandler+0x2ee>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a67      	ldr	r2, [pc, #412]	@ (8004874 <HAL_DMA_IRQHandler+0x3fc>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d045      	beq.n	8004766 <HAL_DMA_IRQHandler+0x2ee>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a66      	ldr	r2, [pc, #408]	@ (8004878 <HAL_DMA_IRQHandler+0x400>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d040      	beq.n	8004766 <HAL_DMA_IRQHandler+0x2ee>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a64      	ldr	r2, [pc, #400]	@ (800487c <HAL_DMA_IRQHandler+0x404>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d03b      	beq.n	8004766 <HAL_DMA_IRQHandler+0x2ee>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a63      	ldr	r2, [pc, #396]	@ (8004880 <HAL_DMA_IRQHandler+0x408>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d036      	beq.n	8004766 <HAL_DMA_IRQHandler+0x2ee>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a61      	ldr	r2, [pc, #388]	@ (8004884 <HAL_DMA_IRQHandler+0x40c>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d031      	beq.n	8004766 <HAL_DMA_IRQHandler+0x2ee>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a60      	ldr	r2, [pc, #384]	@ (8004888 <HAL_DMA_IRQHandler+0x410>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d02c      	beq.n	8004766 <HAL_DMA_IRQHandler+0x2ee>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a5e      	ldr	r2, [pc, #376]	@ (800488c <HAL_DMA_IRQHandler+0x414>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d027      	beq.n	8004766 <HAL_DMA_IRQHandler+0x2ee>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a5d      	ldr	r2, [pc, #372]	@ (8004890 <HAL_DMA_IRQHandler+0x418>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d022      	beq.n	8004766 <HAL_DMA_IRQHandler+0x2ee>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a5b      	ldr	r2, [pc, #364]	@ (8004894 <HAL_DMA_IRQHandler+0x41c>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d01d      	beq.n	8004766 <HAL_DMA_IRQHandler+0x2ee>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a5a      	ldr	r2, [pc, #360]	@ (8004898 <HAL_DMA_IRQHandler+0x420>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d018      	beq.n	8004766 <HAL_DMA_IRQHandler+0x2ee>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a58      	ldr	r2, [pc, #352]	@ (800489c <HAL_DMA_IRQHandler+0x424>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d013      	beq.n	8004766 <HAL_DMA_IRQHandler+0x2ee>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a57      	ldr	r2, [pc, #348]	@ (80048a0 <HAL_DMA_IRQHandler+0x428>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d00e      	beq.n	8004766 <HAL_DMA_IRQHandler+0x2ee>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a55      	ldr	r2, [pc, #340]	@ (80048a4 <HAL_DMA_IRQHandler+0x42c>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d009      	beq.n	8004766 <HAL_DMA_IRQHandler+0x2ee>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a54      	ldr	r2, [pc, #336]	@ (80048a8 <HAL_DMA_IRQHandler+0x430>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d004      	beq.n	8004766 <HAL_DMA_IRQHandler+0x2ee>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a52      	ldr	r2, [pc, #328]	@ (80048ac <HAL_DMA_IRQHandler+0x434>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d10a      	bne.n	800477c <HAL_DMA_IRQHandler+0x304>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	695b      	ldr	r3, [r3, #20]
 800476c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004770:	2b00      	cmp	r3, #0
 8004772:	bf14      	ite	ne
 8004774:	2301      	movne	r3, #1
 8004776:	2300      	moveq	r3, #0
 8004778:	b2db      	uxtb	r3, r3
 800477a:	e003      	b.n	8004784 <HAL_DMA_IRQHandler+0x30c>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2300      	movs	r3, #0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d00d      	beq.n	80047a4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800478c:	f003 031f 	and.w	r3, r3, #31
 8004790:	2201      	movs	r2, #1
 8004792:	409a      	lsls	r2, r3
 8004794:	6a3b      	ldr	r3, [r7, #32]
 8004796:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800479c:	f043 0202 	orr.w	r2, r3, #2
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047a8:	f003 031f 	and.w	r3, r3, #31
 80047ac:	2204      	movs	r2, #4
 80047ae:	409a      	lsls	r2, r3
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	4013      	ands	r3, r2
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	f000 808f 	beq.w	80048d8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a2c      	ldr	r2, [pc, #176]	@ (8004870 <HAL_DMA_IRQHandler+0x3f8>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d04a      	beq.n	800485a <HAL_DMA_IRQHandler+0x3e2>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a2a      	ldr	r2, [pc, #168]	@ (8004874 <HAL_DMA_IRQHandler+0x3fc>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d045      	beq.n	800485a <HAL_DMA_IRQHandler+0x3e2>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a29      	ldr	r2, [pc, #164]	@ (8004878 <HAL_DMA_IRQHandler+0x400>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d040      	beq.n	800485a <HAL_DMA_IRQHandler+0x3e2>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a27      	ldr	r2, [pc, #156]	@ (800487c <HAL_DMA_IRQHandler+0x404>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d03b      	beq.n	800485a <HAL_DMA_IRQHandler+0x3e2>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a26      	ldr	r2, [pc, #152]	@ (8004880 <HAL_DMA_IRQHandler+0x408>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d036      	beq.n	800485a <HAL_DMA_IRQHandler+0x3e2>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a24      	ldr	r2, [pc, #144]	@ (8004884 <HAL_DMA_IRQHandler+0x40c>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d031      	beq.n	800485a <HAL_DMA_IRQHandler+0x3e2>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a23      	ldr	r2, [pc, #140]	@ (8004888 <HAL_DMA_IRQHandler+0x410>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d02c      	beq.n	800485a <HAL_DMA_IRQHandler+0x3e2>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a21      	ldr	r2, [pc, #132]	@ (800488c <HAL_DMA_IRQHandler+0x414>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d027      	beq.n	800485a <HAL_DMA_IRQHandler+0x3e2>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a20      	ldr	r2, [pc, #128]	@ (8004890 <HAL_DMA_IRQHandler+0x418>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d022      	beq.n	800485a <HAL_DMA_IRQHandler+0x3e2>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a1e      	ldr	r2, [pc, #120]	@ (8004894 <HAL_DMA_IRQHandler+0x41c>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d01d      	beq.n	800485a <HAL_DMA_IRQHandler+0x3e2>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a1d      	ldr	r2, [pc, #116]	@ (8004898 <HAL_DMA_IRQHandler+0x420>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d018      	beq.n	800485a <HAL_DMA_IRQHandler+0x3e2>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a1b      	ldr	r2, [pc, #108]	@ (800489c <HAL_DMA_IRQHandler+0x424>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d013      	beq.n	800485a <HAL_DMA_IRQHandler+0x3e2>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a1a      	ldr	r2, [pc, #104]	@ (80048a0 <HAL_DMA_IRQHandler+0x428>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d00e      	beq.n	800485a <HAL_DMA_IRQHandler+0x3e2>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a18      	ldr	r2, [pc, #96]	@ (80048a4 <HAL_DMA_IRQHandler+0x42c>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d009      	beq.n	800485a <HAL_DMA_IRQHandler+0x3e2>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a17      	ldr	r2, [pc, #92]	@ (80048a8 <HAL_DMA_IRQHandler+0x430>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d004      	beq.n	800485a <HAL_DMA_IRQHandler+0x3e2>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a15      	ldr	r2, [pc, #84]	@ (80048ac <HAL_DMA_IRQHandler+0x434>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d12a      	bne.n	80048b0 <HAL_DMA_IRQHandler+0x438>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0302 	and.w	r3, r3, #2
 8004864:	2b00      	cmp	r3, #0
 8004866:	bf14      	ite	ne
 8004868:	2301      	movne	r3, #1
 800486a:	2300      	moveq	r3, #0
 800486c:	b2db      	uxtb	r3, r3
 800486e:	e023      	b.n	80048b8 <HAL_DMA_IRQHandler+0x440>
 8004870:	40020010 	.word	0x40020010
 8004874:	40020028 	.word	0x40020028
 8004878:	40020040 	.word	0x40020040
 800487c:	40020058 	.word	0x40020058
 8004880:	40020070 	.word	0x40020070
 8004884:	40020088 	.word	0x40020088
 8004888:	400200a0 	.word	0x400200a0
 800488c:	400200b8 	.word	0x400200b8
 8004890:	40020410 	.word	0x40020410
 8004894:	40020428 	.word	0x40020428
 8004898:	40020440 	.word	0x40020440
 800489c:	40020458 	.word	0x40020458
 80048a0:	40020470 	.word	0x40020470
 80048a4:	40020488 	.word	0x40020488
 80048a8:	400204a0 	.word	0x400204a0
 80048ac:	400204b8 	.word	0x400204b8
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2300      	movs	r3, #0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d00d      	beq.n	80048d8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048c0:	f003 031f 	and.w	r3, r3, #31
 80048c4:	2204      	movs	r2, #4
 80048c6:	409a      	lsls	r2, r3
 80048c8:	6a3b      	ldr	r3, [r7, #32]
 80048ca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048d0:	f043 0204 	orr.w	r2, r3, #4
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048dc:	f003 031f 	and.w	r3, r3, #31
 80048e0:	2210      	movs	r2, #16
 80048e2:	409a      	lsls	r2, r3
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	4013      	ands	r3, r2
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	f000 80a6 	beq.w	8004a3a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a85      	ldr	r2, [pc, #532]	@ (8004b08 <HAL_DMA_IRQHandler+0x690>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d04a      	beq.n	800498e <HAL_DMA_IRQHandler+0x516>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a83      	ldr	r2, [pc, #524]	@ (8004b0c <HAL_DMA_IRQHandler+0x694>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d045      	beq.n	800498e <HAL_DMA_IRQHandler+0x516>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a82      	ldr	r2, [pc, #520]	@ (8004b10 <HAL_DMA_IRQHandler+0x698>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d040      	beq.n	800498e <HAL_DMA_IRQHandler+0x516>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a80      	ldr	r2, [pc, #512]	@ (8004b14 <HAL_DMA_IRQHandler+0x69c>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d03b      	beq.n	800498e <HAL_DMA_IRQHandler+0x516>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a7f      	ldr	r2, [pc, #508]	@ (8004b18 <HAL_DMA_IRQHandler+0x6a0>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d036      	beq.n	800498e <HAL_DMA_IRQHandler+0x516>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a7d      	ldr	r2, [pc, #500]	@ (8004b1c <HAL_DMA_IRQHandler+0x6a4>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d031      	beq.n	800498e <HAL_DMA_IRQHandler+0x516>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a7c      	ldr	r2, [pc, #496]	@ (8004b20 <HAL_DMA_IRQHandler+0x6a8>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d02c      	beq.n	800498e <HAL_DMA_IRQHandler+0x516>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a7a      	ldr	r2, [pc, #488]	@ (8004b24 <HAL_DMA_IRQHandler+0x6ac>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d027      	beq.n	800498e <HAL_DMA_IRQHandler+0x516>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a79      	ldr	r2, [pc, #484]	@ (8004b28 <HAL_DMA_IRQHandler+0x6b0>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d022      	beq.n	800498e <HAL_DMA_IRQHandler+0x516>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a77      	ldr	r2, [pc, #476]	@ (8004b2c <HAL_DMA_IRQHandler+0x6b4>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d01d      	beq.n	800498e <HAL_DMA_IRQHandler+0x516>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a76      	ldr	r2, [pc, #472]	@ (8004b30 <HAL_DMA_IRQHandler+0x6b8>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d018      	beq.n	800498e <HAL_DMA_IRQHandler+0x516>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a74      	ldr	r2, [pc, #464]	@ (8004b34 <HAL_DMA_IRQHandler+0x6bc>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d013      	beq.n	800498e <HAL_DMA_IRQHandler+0x516>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a73      	ldr	r2, [pc, #460]	@ (8004b38 <HAL_DMA_IRQHandler+0x6c0>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d00e      	beq.n	800498e <HAL_DMA_IRQHandler+0x516>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a71      	ldr	r2, [pc, #452]	@ (8004b3c <HAL_DMA_IRQHandler+0x6c4>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d009      	beq.n	800498e <HAL_DMA_IRQHandler+0x516>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a70      	ldr	r2, [pc, #448]	@ (8004b40 <HAL_DMA_IRQHandler+0x6c8>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d004      	beq.n	800498e <HAL_DMA_IRQHandler+0x516>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a6e      	ldr	r2, [pc, #440]	@ (8004b44 <HAL_DMA_IRQHandler+0x6cc>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d10a      	bne.n	80049a4 <HAL_DMA_IRQHandler+0x52c>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0308 	and.w	r3, r3, #8
 8004998:	2b00      	cmp	r3, #0
 800499a:	bf14      	ite	ne
 800499c:	2301      	movne	r3, #1
 800499e:	2300      	moveq	r3, #0
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	e009      	b.n	80049b8 <HAL_DMA_IRQHandler+0x540>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0304 	and.w	r3, r3, #4
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	bf14      	ite	ne
 80049b2:	2301      	movne	r3, #1
 80049b4:	2300      	moveq	r3, #0
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d03e      	beq.n	8004a3a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049c0:	f003 031f 	and.w	r3, r3, #31
 80049c4:	2210      	movs	r2, #16
 80049c6:	409a      	lsls	r2, r3
 80049c8:	6a3b      	ldr	r3, [r7, #32]
 80049ca:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d018      	beq.n	8004a0c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d108      	bne.n	80049fa <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d024      	beq.n	8004a3a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	4798      	blx	r3
 80049f8:	e01f      	b.n	8004a3a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d01b      	beq.n	8004a3a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	4798      	blx	r3
 8004a0a:	e016      	b.n	8004a3a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d107      	bne.n	8004a2a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f022 0208 	bic.w	r2, r2, #8
 8004a28:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d003      	beq.n	8004a3a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a3e:	f003 031f 	and.w	r3, r3, #31
 8004a42:	2220      	movs	r2, #32
 8004a44:	409a      	lsls	r2, r3
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	4013      	ands	r3, r2
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	f000 8110 	beq.w	8004c70 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a2c      	ldr	r2, [pc, #176]	@ (8004b08 <HAL_DMA_IRQHandler+0x690>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d04a      	beq.n	8004af0 <HAL_DMA_IRQHandler+0x678>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a2b      	ldr	r2, [pc, #172]	@ (8004b0c <HAL_DMA_IRQHandler+0x694>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d045      	beq.n	8004af0 <HAL_DMA_IRQHandler+0x678>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a29      	ldr	r2, [pc, #164]	@ (8004b10 <HAL_DMA_IRQHandler+0x698>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d040      	beq.n	8004af0 <HAL_DMA_IRQHandler+0x678>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a28      	ldr	r2, [pc, #160]	@ (8004b14 <HAL_DMA_IRQHandler+0x69c>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d03b      	beq.n	8004af0 <HAL_DMA_IRQHandler+0x678>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a26      	ldr	r2, [pc, #152]	@ (8004b18 <HAL_DMA_IRQHandler+0x6a0>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d036      	beq.n	8004af0 <HAL_DMA_IRQHandler+0x678>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a25      	ldr	r2, [pc, #148]	@ (8004b1c <HAL_DMA_IRQHandler+0x6a4>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d031      	beq.n	8004af0 <HAL_DMA_IRQHandler+0x678>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a23      	ldr	r2, [pc, #140]	@ (8004b20 <HAL_DMA_IRQHandler+0x6a8>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d02c      	beq.n	8004af0 <HAL_DMA_IRQHandler+0x678>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a22      	ldr	r2, [pc, #136]	@ (8004b24 <HAL_DMA_IRQHandler+0x6ac>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d027      	beq.n	8004af0 <HAL_DMA_IRQHandler+0x678>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a20      	ldr	r2, [pc, #128]	@ (8004b28 <HAL_DMA_IRQHandler+0x6b0>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d022      	beq.n	8004af0 <HAL_DMA_IRQHandler+0x678>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a1f      	ldr	r2, [pc, #124]	@ (8004b2c <HAL_DMA_IRQHandler+0x6b4>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d01d      	beq.n	8004af0 <HAL_DMA_IRQHandler+0x678>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a1d      	ldr	r2, [pc, #116]	@ (8004b30 <HAL_DMA_IRQHandler+0x6b8>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d018      	beq.n	8004af0 <HAL_DMA_IRQHandler+0x678>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a1c      	ldr	r2, [pc, #112]	@ (8004b34 <HAL_DMA_IRQHandler+0x6bc>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d013      	beq.n	8004af0 <HAL_DMA_IRQHandler+0x678>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a1a      	ldr	r2, [pc, #104]	@ (8004b38 <HAL_DMA_IRQHandler+0x6c0>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d00e      	beq.n	8004af0 <HAL_DMA_IRQHandler+0x678>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a19      	ldr	r2, [pc, #100]	@ (8004b3c <HAL_DMA_IRQHandler+0x6c4>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d009      	beq.n	8004af0 <HAL_DMA_IRQHandler+0x678>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a17      	ldr	r2, [pc, #92]	@ (8004b40 <HAL_DMA_IRQHandler+0x6c8>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d004      	beq.n	8004af0 <HAL_DMA_IRQHandler+0x678>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a16      	ldr	r2, [pc, #88]	@ (8004b44 <HAL_DMA_IRQHandler+0x6cc>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d12b      	bne.n	8004b48 <HAL_DMA_IRQHandler+0x6d0>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0310 	and.w	r3, r3, #16
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	bf14      	ite	ne
 8004afe:	2301      	movne	r3, #1
 8004b00:	2300      	moveq	r3, #0
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	e02a      	b.n	8004b5c <HAL_DMA_IRQHandler+0x6e4>
 8004b06:	bf00      	nop
 8004b08:	40020010 	.word	0x40020010
 8004b0c:	40020028 	.word	0x40020028
 8004b10:	40020040 	.word	0x40020040
 8004b14:	40020058 	.word	0x40020058
 8004b18:	40020070 	.word	0x40020070
 8004b1c:	40020088 	.word	0x40020088
 8004b20:	400200a0 	.word	0x400200a0
 8004b24:	400200b8 	.word	0x400200b8
 8004b28:	40020410 	.word	0x40020410
 8004b2c:	40020428 	.word	0x40020428
 8004b30:	40020440 	.word	0x40020440
 8004b34:	40020458 	.word	0x40020458
 8004b38:	40020470 	.word	0x40020470
 8004b3c:	40020488 	.word	0x40020488
 8004b40:	400204a0 	.word	0x400204a0
 8004b44:	400204b8 	.word	0x400204b8
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 0302 	and.w	r3, r3, #2
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	bf14      	ite	ne
 8004b56:	2301      	movne	r3, #1
 8004b58:	2300      	moveq	r3, #0
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	f000 8087 	beq.w	8004c70 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b66:	f003 031f 	and.w	r3, r3, #31
 8004b6a:	2220      	movs	r2, #32
 8004b6c:	409a      	lsls	r2, r3
 8004b6e:	6a3b      	ldr	r3, [r7, #32]
 8004b70:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	2b04      	cmp	r3, #4
 8004b7c:	d139      	bne.n	8004bf2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f022 0216 	bic.w	r2, r2, #22
 8004b8c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	695a      	ldr	r2, [r3, #20]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004b9c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d103      	bne.n	8004bae <HAL_DMA_IRQHandler+0x736>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d007      	beq.n	8004bbe <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f022 0208 	bic.w	r2, r2, #8
 8004bbc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bc2:	f003 031f 	and.w	r3, r3, #31
 8004bc6:	223f      	movs	r2, #63	@ 0x3f
 8004bc8:	409a      	lsls	r2, r3
 8004bca:	6a3b      	ldr	r3, [r7, #32]
 8004bcc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	f000 834a 	beq.w	800527c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	4798      	blx	r3
          }
          return;
 8004bf0:	e344      	b.n	800527c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d018      	beq.n	8004c32 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d108      	bne.n	8004c20 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d02c      	beq.n	8004c70 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	4798      	blx	r3
 8004c1e:	e027      	b.n	8004c70 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d023      	beq.n	8004c70 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	4798      	blx	r3
 8004c30:	e01e      	b.n	8004c70 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d10f      	bne.n	8004c60 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f022 0210 	bic.w	r2, r2, #16
 8004c4e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d003      	beq.n	8004c70 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	f000 8306 	beq.w	8005286 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c7e:	f003 0301 	and.w	r3, r3, #1
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	f000 8088 	beq.w	8004d98 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2204      	movs	r2, #4
 8004c8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a7a      	ldr	r2, [pc, #488]	@ (8004e80 <HAL_DMA_IRQHandler+0xa08>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d04a      	beq.n	8004d30 <HAL_DMA_IRQHandler+0x8b8>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a79      	ldr	r2, [pc, #484]	@ (8004e84 <HAL_DMA_IRQHandler+0xa0c>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d045      	beq.n	8004d30 <HAL_DMA_IRQHandler+0x8b8>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a77      	ldr	r2, [pc, #476]	@ (8004e88 <HAL_DMA_IRQHandler+0xa10>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d040      	beq.n	8004d30 <HAL_DMA_IRQHandler+0x8b8>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a76      	ldr	r2, [pc, #472]	@ (8004e8c <HAL_DMA_IRQHandler+0xa14>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d03b      	beq.n	8004d30 <HAL_DMA_IRQHandler+0x8b8>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a74      	ldr	r2, [pc, #464]	@ (8004e90 <HAL_DMA_IRQHandler+0xa18>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d036      	beq.n	8004d30 <HAL_DMA_IRQHandler+0x8b8>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a73      	ldr	r2, [pc, #460]	@ (8004e94 <HAL_DMA_IRQHandler+0xa1c>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d031      	beq.n	8004d30 <HAL_DMA_IRQHandler+0x8b8>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a71      	ldr	r2, [pc, #452]	@ (8004e98 <HAL_DMA_IRQHandler+0xa20>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d02c      	beq.n	8004d30 <HAL_DMA_IRQHandler+0x8b8>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a70      	ldr	r2, [pc, #448]	@ (8004e9c <HAL_DMA_IRQHandler+0xa24>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d027      	beq.n	8004d30 <HAL_DMA_IRQHandler+0x8b8>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a6e      	ldr	r2, [pc, #440]	@ (8004ea0 <HAL_DMA_IRQHandler+0xa28>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d022      	beq.n	8004d30 <HAL_DMA_IRQHandler+0x8b8>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a6d      	ldr	r2, [pc, #436]	@ (8004ea4 <HAL_DMA_IRQHandler+0xa2c>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d01d      	beq.n	8004d30 <HAL_DMA_IRQHandler+0x8b8>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a6b      	ldr	r2, [pc, #428]	@ (8004ea8 <HAL_DMA_IRQHandler+0xa30>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d018      	beq.n	8004d30 <HAL_DMA_IRQHandler+0x8b8>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a6a      	ldr	r2, [pc, #424]	@ (8004eac <HAL_DMA_IRQHandler+0xa34>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d013      	beq.n	8004d30 <HAL_DMA_IRQHandler+0x8b8>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a68      	ldr	r2, [pc, #416]	@ (8004eb0 <HAL_DMA_IRQHandler+0xa38>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d00e      	beq.n	8004d30 <HAL_DMA_IRQHandler+0x8b8>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a67      	ldr	r2, [pc, #412]	@ (8004eb4 <HAL_DMA_IRQHandler+0xa3c>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d009      	beq.n	8004d30 <HAL_DMA_IRQHandler+0x8b8>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a65      	ldr	r2, [pc, #404]	@ (8004eb8 <HAL_DMA_IRQHandler+0xa40>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d004      	beq.n	8004d30 <HAL_DMA_IRQHandler+0x8b8>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a64      	ldr	r2, [pc, #400]	@ (8004ebc <HAL_DMA_IRQHandler+0xa44>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d108      	bne.n	8004d42 <HAL_DMA_IRQHandler+0x8ca>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f022 0201 	bic.w	r2, r2, #1
 8004d3e:	601a      	str	r2, [r3, #0]
 8004d40:	e007      	b.n	8004d52 <HAL_DMA_IRQHandler+0x8da>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f022 0201 	bic.w	r2, r2, #1
 8004d50:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	3301      	adds	r3, #1
 8004d56:	60fb      	str	r3, [r7, #12]
 8004d58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d307      	bcc.n	8004d6e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 0301 	and.w	r3, r3, #1
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d1f2      	bne.n	8004d52 <HAL_DMA_IRQHandler+0x8da>
 8004d6c:	e000      	b.n	8004d70 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004d6e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0301 	and.w	r3, r3, #1
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d004      	beq.n	8004d88 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2203      	movs	r2, #3
 8004d82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8004d86:	e003      	b.n	8004d90 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	f000 8272 	beq.w	8005286 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	4798      	blx	r3
 8004daa:	e26c      	b.n	8005286 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a43      	ldr	r2, [pc, #268]	@ (8004ec0 <HAL_DMA_IRQHandler+0xa48>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d022      	beq.n	8004dfc <HAL_DMA_IRQHandler+0x984>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a42      	ldr	r2, [pc, #264]	@ (8004ec4 <HAL_DMA_IRQHandler+0xa4c>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d01d      	beq.n	8004dfc <HAL_DMA_IRQHandler+0x984>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a40      	ldr	r2, [pc, #256]	@ (8004ec8 <HAL_DMA_IRQHandler+0xa50>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d018      	beq.n	8004dfc <HAL_DMA_IRQHandler+0x984>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a3f      	ldr	r2, [pc, #252]	@ (8004ecc <HAL_DMA_IRQHandler+0xa54>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d013      	beq.n	8004dfc <HAL_DMA_IRQHandler+0x984>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a3d      	ldr	r2, [pc, #244]	@ (8004ed0 <HAL_DMA_IRQHandler+0xa58>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d00e      	beq.n	8004dfc <HAL_DMA_IRQHandler+0x984>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a3c      	ldr	r2, [pc, #240]	@ (8004ed4 <HAL_DMA_IRQHandler+0xa5c>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d009      	beq.n	8004dfc <HAL_DMA_IRQHandler+0x984>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a3a      	ldr	r2, [pc, #232]	@ (8004ed8 <HAL_DMA_IRQHandler+0xa60>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d004      	beq.n	8004dfc <HAL_DMA_IRQHandler+0x984>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a39      	ldr	r2, [pc, #228]	@ (8004edc <HAL_DMA_IRQHandler+0xa64>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d101      	bne.n	8004e00 <HAL_DMA_IRQHandler+0x988>
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e000      	b.n	8004e02 <HAL_DMA_IRQHandler+0x98a>
 8004e00:	2300      	movs	r3, #0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	f000 823f 	beq.w	8005286 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e14:	f003 031f 	and.w	r3, r3, #31
 8004e18:	2204      	movs	r2, #4
 8004e1a:	409a      	lsls	r2, r3
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	4013      	ands	r3, r2
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	f000 80cd 	beq.w	8004fc0 <HAL_DMA_IRQHandler+0xb48>
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	f003 0304 	and.w	r3, r3, #4
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	f000 80c7 	beq.w	8004fc0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e36:	f003 031f 	and.w	r3, r3, #31
 8004e3a:	2204      	movs	r2, #4
 8004e3c:	409a      	lsls	r2, r3
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d049      	beq.n	8004ee0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d109      	bne.n	8004e6a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	f000 8210 	beq.w	8005280 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e68:	e20a      	b.n	8005280 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	f000 8206 	beq.w	8005280 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e7c:	e200      	b.n	8005280 <HAL_DMA_IRQHandler+0xe08>
 8004e7e:	bf00      	nop
 8004e80:	40020010 	.word	0x40020010
 8004e84:	40020028 	.word	0x40020028
 8004e88:	40020040 	.word	0x40020040
 8004e8c:	40020058 	.word	0x40020058
 8004e90:	40020070 	.word	0x40020070
 8004e94:	40020088 	.word	0x40020088
 8004e98:	400200a0 	.word	0x400200a0
 8004e9c:	400200b8 	.word	0x400200b8
 8004ea0:	40020410 	.word	0x40020410
 8004ea4:	40020428 	.word	0x40020428
 8004ea8:	40020440 	.word	0x40020440
 8004eac:	40020458 	.word	0x40020458
 8004eb0:	40020470 	.word	0x40020470
 8004eb4:	40020488 	.word	0x40020488
 8004eb8:	400204a0 	.word	0x400204a0
 8004ebc:	400204b8 	.word	0x400204b8
 8004ec0:	58025408 	.word	0x58025408
 8004ec4:	5802541c 	.word	0x5802541c
 8004ec8:	58025430 	.word	0x58025430
 8004ecc:	58025444 	.word	0x58025444
 8004ed0:	58025458 	.word	0x58025458
 8004ed4:	5802546c 	.word	0x5802546c
 8004ed8:	58025480 	.word	0x58025480
 8004edc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	f003 0320 	and.w	r3, r3, #32
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d160      	bne.n	8004fac <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a7f      	ldr	r2, [pc, #508]	@ (80050ec <HAL_DMA_IRQHandler+0xc74>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d04a      	beq.n	8004f8a <HAL_DMA_IRQHandler+0xb12>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a7d      	ldr	r2, [pc, #500]	@ (80050f0 <HAL_DMA_IRQHandler+0xc78>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d045      	beq.n	8004f8a <HAL_DMA_IRQHandler+0xb12>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a7c      	ldr	r2, [pc, #496]	@ (80050f4 <HAL_DMA_IRQHandler+0xc7c>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d040      	beq.n	8004f8a <HAL_DMA_IRQHandler+0xb12>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a7a      	ldr	r2, [pc, #488]	@ (80050f8 <HAL_DMA_IRQHandler+0xc80>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d03b      	beq.n	8004f8a <HAL_DMA_IRQHandler+0xb12>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a79      	ldr	r2, [pc, #484]	@ (80050fc <HAL_DMA_IRQHandler+0xc84>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d036      	beq.n	8004f8a <HAL_DMA_IRQHandler+0xb12>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a77      	ldr	r2, [pc, #476]	@ (8005100 <HAL_DMA_IRQHandler+0xc88>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d031      	beq.n	8004f8a <HAL_DMA_IRQHandler+0xb12>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a76      	ldr	r2, [pc, #472]	@ (8005104 <HAL_DMA_IRQHandler+0xc8c>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d02c      	beq.n	8004f8a <HAL_DMA_IRQHandler+0xb12>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a74      	ldr	r2, [pc, #464]	@ (8005108 <HAL_DMA_IRQHandler+0xc90>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d027      	beq.n	8004f8a <HAL_DMA_IRQHandler+0xb12>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a73      	ldr	r2, [pc, #460]	@ (800510c <HAL_DMA_IRQHandler+0xc94>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d022      	beq.n	8004f8a <HAL_DMA_IRQHandler+0xb12>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a71      	ldr	r2, [pc, #452]	@ (8005110 <HAL_DMA_IRQHandler+0xc98>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d01d      	beq.n	8004f8a <HAL_DMA_IRQHandler+0xb12>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a70      	ldr	r2, [pc, #448]	@ (8005114 <HAL_DMA_IRQHandler+0xc9c>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d018      	beq.n	8004f8a <HAL_DMA_IRQHandler+0xb12>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a6e      	ldr	r2, [pc, #440]	@ (8005118 <HAL_DMA_IRQHandler+0xca0>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d013      	beq.n	8004f8a <HAL_DMA_IRQHandler+0xb12>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a6d      	ldr	r2, [pc, #436]	@ (800511c <HAL_DMA_IRQHandler+0xca4>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d00e      	beq.n	8004f8a <HAL_DMA_IRQHandler+0xb12>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a6b      	ldr	r2, [pc, #428]	@ (8005120 <HAL_DMA_IRQHandler+0xca8>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d009      	beq.n	8004f8a <HAL_DMA_IRQHandler+0xb12>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a6a      	ldr	r2, [pc, #424]	@ (8005124 <HAL_DMA_IRQHandler+0xcac>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d004      	beq.n	8004f8a <HAL_DMA_IRQHandler+0xb12>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a68      	ldr	r2, [pc, #416]	@ (8005128 <HAL_DMA_IRQHandler+0xcb0>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d108      	bne.n	8004f9c <HAL_DMA_IRQHandler+0xb24>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f022 0208 	bic.w	r2, r2, #8
 8004f98:	601a      	str	r2, [r3, #0]
 8004f9a:	e007      	b.n	8004fac <HAL_DMA_IRQHandler+0xb34>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f022 0204 	bic.w	r2, r2, #4
 8004faa:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	f000 8165 	beq.w	8005280 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004fbe:	e15f      	b.n	8005280 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fc4:	f003 031f 	and.w	r3, r3, #31
 8004fc8:	2202      	movs	r2, #2
 8004fca:	409a      	lsls	r2, r3
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	4013      	ands	r3, r2
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	f000 80c5 	beq.w	8005160 <HAL_DMA_IRQHandler+0xce8>
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	f003 0302 	and.w	r3, r3, #2
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	f000 80bf 	beq.w	8005160 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fe6:	f003 031f 	and.w	r3, r3, #31
 8004fea:	2202      	movs	r2, #2
 8004fec:	409a      	lsls	r2, r3
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d018      	beq.n	800502e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d109      	bne.n	800501a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800500a:	2b00      	cmp	r3, #0
 800500c:	f000 813a 	beq.w	8005284 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005018:	e134      	b.n	8005284 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800501e:	2b00      	cmp	r3, #0
 8005020:	f000 8130 	beq.w	8005284 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800502c:	e12a      	b.n	8005284 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	f003 0320 	and.w	r3, r3, #32
 8005034:	2b00      	cmp	r3, #0
 8005036:	f040 8089 	bne.w	800514c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a2b      	ldr	r2, [pc, #172]	@ (80050ec <HAL_DMA_IRQHandler+0xc74>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d04a      	beq.n	80050da <HAL_DMA_IRQHandler+0xc62>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a29      	ldr	r2, [pc, #164]	@ (80050f0 <HAL_DMA_IRQHandler+0xc78>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d045      	beq.n	80050da <HAL_DMA_IRQHandler+0xc62>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a28      	ldr	r2, [pc, #160]	@ (80050f4 <HAL_DMA_IRQHandler+0xc7c>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d040      	beq.n	80050da <HAL_DMA_IRQHandler+0xc62>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a26      	ldr	r2, [pc, #152]	@ (80050f8 <HAL_DMA_IRQHandler+0xc80>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d03b      	beq.n	80050da <HAL_DMA_IRQHandler+0xc62>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a25      	ldr	r2, [pc, #148]	@ (80050fc <HAL_DMA_IRQHandler+0xc84>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d036      	beq.n	80050da <HAL_DMA_IRQHandler+0xc62>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a23      	ldr	r2, [pc, #140]	@ (8005100 <HAL_DMA_IRQHandler+0xc88>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d031      	beq.n	80050da <HAL_DMA_IRQHandler+0xc62>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a22      	ldr	r2, [pc, #136]	@ (8005104 <HAL_DMA_IRQHandler+0xc8c>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d02c      	beq.n	80050da <HAL_DMA_IRQHandler+0xc62>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a20      	ldr	r2, [pc, #128]	@ (8005108 <HAL_DMA_IRQHandler+0xc90>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d027      	beq.n	80050da <HAL_DMA_IRQHandler+0xc62>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a1f      	ldr	r2, [pc, #124]	@ (800510c <HAL_DMA_IRQHandler+0xc94>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d022      	beq.n	80050da <HAL_DMA_IRQHandler+0xc62>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a1d      	ldr	r2, [pc, #116]	@ (8005110 <HAL_DMA_IRQHandler+0xc98>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d01d      	beq.n	80050da <HAL_DMA_IRQHandler+0xc62>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a1c      	ldr	r2, [pc, #112]	@ (8005114 <HAL_DMA_IRQHandler+0xc9c>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d018      	beq.n	80050da <HAL_DMA_IRQHandler+0xc62>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a1a      	ldr	r2, [pc, #104]	@ (8005118 <HAL_DMA_IRQHandler+0xca0>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d013      	beq.n	80050da <HAL_DMA_IRQHandler+0xc62>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a19      	ldr	r2, [pc, #100]	@ (800511c <HAL_DMA_IRQHandler+0xca4>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d00e      	beq.n	80050da <HAL_DMA_IRQHandler+0xc62>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a17      	ldr	r2, [pc, #92]	@ (8005120 <HAL_DMA_IRQHandler+0xca8>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d009      	beq.n	80050da <HAL_DMA_IRQHandler+0xc62>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a16      	ldr	r2, [pc, #88]	@ (8005124 <HAL_DMA_IRQHandler+0xcac>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d004      	beq.n	80050da <HAL_DMA_IRQHandler+0xc62>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a14      	ldr	r2, [pc, #80]	@ (8005128 <HAL_DMA_IRQHandler+0xcb0>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d128      	bne.n	800512c <HAL_DMA_IRQHandler+0xcb4>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f022 0214 	bic.w	r2, r2, #20
 80050e8:	601a      	str	r2, [r3, #0]
 80050ea:	e027      	b.n	800513c <HAL_DMA_IRQHandler+0xcc4>
 80050ec:	40020010 	.word	0x40020010
 80050f0:	40020028 	.word	0x40020028
 80050f4:	40020040 	.word	0x40020040
 80050f8:	40020058 	.word	0x40020058
 80050fc:	40020070 	.word	0x40020070
 8005100:	40020088 	.word	0x40020088
 8005104:	400200a0 	.word	0x400200a0
 8005108:	400200b8 	.word	0x400200b8
 800510c:	40020410 	.word	0x40020410
 8005110:	40020428 	.word	0x40020428
 8005114:	40020440 	.word	0x40020440
 8005118:	40020458 	.word	0x40020458
 800511c:	40020470 	.word	0x40020470
 8005120:	40020488 	.word	0x40020488
 8005124:	400204a0 	.word	0x400204a0
 8005128:	400204b8 	.word	0x400204b8
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f022 020a 	bic.w	r2, r2, #10
 800513a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005150:	2b00      	cmp	r3, #0
 8005152:	f000 8097 	beq.w	8005284 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800515e:	e091      	b.n	8005284 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005164:	f003 031f 	and.w	r3, r3, #31
 8005168:	2208      	movs	r2, #8
 800516a:	409a      	lsls	r2, r3
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	4013      	ands	r3, r2
 8005170:	2b00      	cmp	r3, #0
 8005172:	f000 8088 	beq.w	8005286 <HAL_DMA_IRQHandler+0xe0e>
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	f003 0308 	and.w	r3, r3, #8
 800517c:	2b00      	cmp	r3, #0
 800517e:	f000 8082 	beq.w	8005286 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a41      	ldr	r2, [pc, #260]	@ (800528c <HAL_DMA_IRQHandler+0xe14>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d04a      	beq.n	8005222 <HAL_DMA_IRQHandler+0xdaa>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a3f      	ldr	r2, [pc, #252]	@ (8005290 <HAL_DMA_IRQHandler+0xe18>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d045      	beq.n	8005222 <HAL_DMA_IRQHandler+0xdaa>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a3e      	ldr	r2, [pc, #248]	@ (8005294 <HAL_DMA_IRQHandler+0xe1c>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d040      	beq.n	8005222 <HAL_DMA_IRQHandler+0xdaa>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a3c      	ldr	r2, [pc, #240]	@ (8005298 <HAL_DMA_IRQHandler+0xe20>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d03b      	beq.n	8005222 <HAL_DMA_IRQHandler+0xdaa>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a3b      	ldr	r2, [pc, #236]	@ (800529c <HAL_DMA_IRQHandler+0xe24>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d036      	beq.n	8005222 <HAL_DMA_IRQHandler+0xdaa>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a39      	ldr	r2, [pc, #228]	@ (80052a0 <HAL_DMA_IRQHandler+0xe28>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d031      	beq.n	8005222 <HAL_DMA_IRQHandler+0xdaa>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a38      	ldr	r2, [pc, #224]	@ (80052a4 <HAL_DMA_IRQHandler+0xe2c>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d02c      	beq.n	8005222 <HAL_DMA_IRQHandler+0xdaa>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a36      	ldr	r2, [pc, #216]	@ (80052a8 <HAL_DMA_IRQHandler+0xe30>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d027      	beq.n	8005222 <HAL_DMA_IRQHandler+0xdaa>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a35      	ldr	r2, [pc, #212]	@ (80052ac <HAL_DMA_IRQHandler+0xe34>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d022      	beq.n	8005222 <HAL_DMA_IRQHandler+0xdaa>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a33      	ldr	r2, [pc, #204]	@ (80052b0 <HAL_DMA_IRQHandler+0xe38>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d01d      	beq.n	8005222 <HAL_DMA_IRQHandler+0xdaa>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a32      	ldr	r2, [pc, #200]	@ (80052b4 <HAL_DMA_IRQHandler+0xe3c>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d018      	beq.n	8005222 <HAL_DMA_IRQHandler+0xdaa>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a30      	ldr	r2, [pc, #192]	@ (80052b8 <HAL_DMA_IRQHandler+0xe40>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d013      	beq.n	8005222 <HAL_DMA_IRQHandler+0xdaa>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a2f      	ldr	r2, [pc, #188]	@ (80052bc <HAL_DMA_IRQHandler+0xe44>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d00e      	beq.n	8005222 <HAL_DMA_IRQHandler+0xdaa>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a2d      	ldr	r2, [pc, #180]	@ (80052c0 <HAL_DMA_IRQHandler+0xe48>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d009      	beq.n	8005222 <HAL_DMA_IRQHandler+0xdaa>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a2c      	ldr	r2, [pc, #176]	@ (80052c4 <HAL_DMA_IRQHandler+0xe4c>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d004      	beq.n	8005222 <HAL_DMA_IRQHandler+0xdaa>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a2a      	ldr	r2, [pc, #168]	@ (80052c8 <HAL_DMA_IRQHandler+0xe50>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d108      	bne.n	8005234 <HAL_DMA_IRQHandler+0xdbc>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f022 021c 	bic.w	r2, r2, #28
 8005230:	601a      	str	r2, [r3, #0]
 8005232:	e007      	b.n	8005244 <HAL_DMA_IRQHandler+0xdcc>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f022 020e 	bic.w	r2, r2, #14
 8005242:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005248:	f003 031f 	and.w	r3, r3, #31
 800524c:	2201      	movs	r2, #1
 800524e:	409a      	lsls	r2, r3
 8005250:	69fb      	ldr	r3, [r7, #28]
 8005252:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2201      	movs	r2, #1
 800525e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800526e:	2b00      	cmp	r3, #0
 8005270:	d009      	beq.n	8005286 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	4798      	blx	r3
 800527a:	e004      	b.n	8005286 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800527c:	bf00      	nop
 800527e:	e002      	b.n	8005286 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005280:	bf00      	nop
 8005282:	e000      	b.n	8005286 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005284:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005286:	3728      	adds	r7, #40	@ 0x28
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}
 800528c:	40020010 	.word	0x40020010
 8005290:	40020028 	.word	0x40020028
 8005294:	40020040 	.word	0x40020040
 8005298:	40020058 	.word	0x40020058
 800529c:	40020070 	.word	0x40020070
 80052a0:	40020088 	.word	0x40020088
 80052a4:	400200a0 	.word	0x400200a0
 80052a8:	400200b8 	.word	0x400200b8
 80052ac:	40020410 	.word	0x40020410
 80052b0:	40020428 	.word	0x40020428
 80052b4:	40020440 	.word	0x40020440
 80052b8:	40020458 	.word	0x40020458
 80052bc:	40020470 	.word	0x40020470
 80052c0:	40020488 	.word	0x40020488
 80052c4:	400204a0 	.word	0x400204a0
 80052c8:	400204b8 	.word	0x400204b8

080052cc <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80052d8:	4618      	mov	r0, r3
 80052da:	370c      	adds	r7, #12
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b087      	sub	sp, #28
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	607a      	str	r2, [r7, #4]
 80052f0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052f6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052fc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a7f      	ldr	r2, [pc, #508]	@ (8005500 <DMA_SetConfig+0x21c>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d072      	beq.n	80053ee <DMA_SetConfig+0x10a>
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a7d      	ldr	r2, [pc, #500]	@ (8005504 <DMA_SetConfig+0x220>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d06d      	beq.n	80053ee <DMA_SetConfig+0x10a>
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a7c      	ldr	r2, [pc, #496]	@ (8005508 <DMA_SetConfig+0x224>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d068      	beq.n	80053ee <DMA_SetConfig+0x10a>
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a7a      	ldr	r2, [pc, #488]	@ (800550c <DMA_SetConfig+0x228>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d063      	beq.n	80053ee <DMA_SetConfig+0x10a>
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a79      	ldr	r2, [pc, #484]	@ (8005510 <DMA_SetConfig+0x22c>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d05e      	beq.n	80053ee <DMA_SetConfig+0x10a>
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a77      	ldr	r2, [pc, #476]	@ (8005514 <DMA_SetConfig+0x230>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d059      	beq.n	80053ee <DMA_SetConfig+0x10a>
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a76      	ldr	r2, [pc, #472]	@ (8005518 <DMA_SetConfig+0x234>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d054      	beq.n	80053ee <DMA_SetConfig+0x10a>
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a74      	ldr	r2, [pc, #464]	@ (800551c <DMA_SetConfig+0x238>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d04f      	beq.n	80053ee <DMA_SetConfig+0x10a>
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a73      	ldr	r2, [pc, #460]	@ (8005520 <DMA_SetConfig+0x23c>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d04a      	beq.n	80053ee <DMA_SetConfig+0x10a>
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a71      	ldr	r2, [pc, #452]	@ (8005524 <DMA_SetConfig+0x240>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d045      	beq.n	80053ee <DMA_SetConfig+0x10a>
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a70      	ldr	r2, [pc, #448]	@ (8005528 <DMA_SetConfig+0x244>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d040      	beq.n	80053ee <DMA_SetConfig+0x10a>
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a6e      	ldr	r2, [pc, #440]	@ (800552c <DMA_SetConfig+0x248>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d03b      	beq.n	80053ee <DMA_SetConfig+0x10a>
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a6d      	ldr	r2, [pc, #436]	@ (8005530 <DMA_SetConfig+0x24c>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d036      	beq.n	80053ee <DMA_SetConfig+0x10a>
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a6b      	ldr	r2, [pc, #428]	@ (8005534 <DMA_SetConfig+0x250>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d031      	beq.n	80053ee <DMA_SetConfig+0x10a>
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a6a      	ldr	r2, [pc, #424]	@ (8005538 <DMA_SetConfig+0x254>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d02c      	beq.n	80053ee <DMA_SetConfig+0x10a>
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a68      	ldr	r2, [pc, #416]	@ (800553c <DMA_SetConfig+0x258>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d027      	beq.n	80053ee <DMA_SetConfig+0x10a>
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a67      	ldr	r2, [pc, #412]	@ (8005540 <DMA_SetConfig+0x25c>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d022      	beq.n	80053ee <DMA_SetConfig+0x10a>
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a65      	ldr	r2, [pc, #404]	@ (8005544 <DMA_SetConfig+0x260>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d01d      	beq.n	80053ee <DMA_SetConfig+0x10a>
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a64      	ldr	r2, [pc, #400]	@ (8005548 <DMA_SetConfig+0x264>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d018      	beq.n	80053ee <DMA_SetConfig+0x10a>
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a62      	ldr	r2, [pc, #392]	@ (800554c <DMA_SetConfig+0x268>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d013      	beq.n	80053ee <DMA_SetConfig+0x10a>
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a61      	ldr	r2, [pc, #388]	@ (8005550 <DMA_SetConfig+0x26c>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d00e      	beq.n	80053ee <DMA_SetConfig+0x10a>
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a5f      	ldr	r2, [pc, #380]	@ (8005554 <DMA_SetConfig+0x270>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d009      	beq.n	80053ee <DMA_SetConfig+0x10a>
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a5e      	ldr	r2, [pc, #376]	@ (8005558 <DMA_SetConfig+0x274>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d004      	beq.n	80053ee <DMA_SetConfig+0x10a>
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a5c      	ldr	r2, [pc, #368]	@ (800555c <DMA_SetConfig+0x278>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d101      	bne.n	80053f2 <DMA_SetConfig+0x10e>
 80053ee:	2301      	movs	r3, #1
 80053f0:	e000      	b.n	80053f4 <DMA_SetConfig+0x110>
 80053f2:	2300      	movs	r3, #0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d00d      	beq.n	8005414 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80053fc:	68fa      	ldr	r2, [r7, #12]
 80053fe:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005400:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005406:	2b00      	cmp	r3, #0
 8005408:	d004      	beq.n	8005414 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800540e:	68fa      	ldr	r2, [r7, #12]
 8005410:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005412:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a39      	ldr	r2, [pc, #228]	@ (8005500 <DMA_SetConfig+0x21c>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d04a      	beq.n	80054b4 <DMA_SetConfig+0x1d0>
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a38      	ldr	r2, [pc, #224]	@ (8005504 <DMA_SetConfig+0x220>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d045      	beq.n	80054b4 <DMA_SetConfig+0x1d0>
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a36      	ldr	r2, [pc, #216]	@ (8005508 <DMA_SetConfig+0x224>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d040      	beq.n	80054b4 <DMA_SetConfig+0x1d0>
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a35      	ldr	r2, [pc, #212]	@ (800550c <DMA_SetConfig+0x228>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d03b      	beq.n	80054b4 <DMA_SetConfig+0x1d0>
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a33      	ldr	r2, [pc, #204]	@ (8005510 <DMA_SetConfig+0x22c>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d036      	beq.n	80054b4 <DMA_SetConfig+0x1d0>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a32      	ldr	r2, [pc, #200]	@ (8005514 <DMA_SetConfig+0x230>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d031      	beq.n	80054b4 <DMA_SetConfig+0x1d0>
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a30      	ldr	r2, [pc, #192]	@ (8005518 <DMA_SetConfig+0x234>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d02c      	beq.n	80054b4 <DMA_SetConfig+0x1d0>
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a2f      	ldr	r2, [pc, #188]	@ (800551c <DMA_SetConfig+0x238>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d027      	beq.n	80054b4 <DMA_SetConfig+0x1d0>
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a2d      	ldr	r2, [pc, #180]	@ (8005520 <DMA_SetConfig+0x23c>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d022      	beq.n	80054b4 <DMA_SetConfig+0x1d0>
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a2c      	ldr	r2, [pc, #176]	@ (8005524 <DMA_SetConfig+0x240>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d01d      	beq.n	80054b4 <DMA_SetConfig+0x1d0>
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a2a      	ldr	r2, [pc, #168]	@ (8005528 <DMA_SetConfig+0x244>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d018      	beq.n	80054b4 <DMA_SetConfig+0x1d0>
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a29      	ldr	r2, [pc, #164]	@ (800552c <DMA_SetConfig+0x248>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d013      	beq.n	80054b4 <DMA_SetConfig+0x1d0>
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a27      	ldr	r2, [pc, #156]	@ (8005530 <DMA_SetConfig+0x24c>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d00e      	beq.n	80054b4 <DMA_SetConfig+0x1d0>
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a26      	ldr	r2, [pc, #152]	@ (8005534 <DMA_SetConfig+0x250>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d009      	beq.n	80054b4 <DMA_SetConfig+0x1d0>
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a24      	ldr	r2, [pc, #144]	@ (8005538 <DMA_SetConfig+0x254>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d004      	beq.n	80054b4 <DMA_SetConfig+0x1d0>
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a23      	ldr	r2, [pc, #140]	@ (800553c <DMA_SetConfig+0x258>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d101      	bne.n	80054b8 <DMA_SetConfig+0x1d4>
 80054b4:	2301      	movs	r3, #1
 80054b6:	e000      	b.n	80054ba <DMA_SetConfig+0x1d6>
 80054b8:	2300      	movs	r3, #0
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d059      	beq.n	8005572 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054c2:	f003 031f 	and.w	r3, r3, #31
 80054c6:	223f      	movs	r2, #63	@ 0x3f
 80054c8:	409a      	lsls	r2, r3
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80054dc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	683a      	ldr	r2, [r7, #0]
 80054e4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	2b40      	cmp	r3, #64	@ 0x40
 80054ec:	d138      	bne.n	8005560 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	68ba      	ldr	r2, [r7, #8]
 80054fc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80054fe:	e086      	b.n	800560e <DMA_SetConfig+0x32a>
 8005500:	40020010 	.word	0x40020010
 8005504:	40020028 	.word	0x40020028
 8005508:	40020040 	.word	0x40020040
 800550c:	40020058 	.word	0x40020058
 8005510:	40020070 	.word	0x40020070
 8005514:	40020088 	.word	0x40020088
 8005518:	400200a0 	.word	0x400200a0
 800551c:	400200b8 	.word	0x400200b8
 8005520:	40020410 	.word	0x40020410
 8005524:	40020428 	.word	0x40020428
 8005528:	40020440 	.word	0x40020440
 800552c:	40020458 	.word	0x40020458
 8005530:	40020470 	.word	0x40020470
 8005534:	40020488 	.word	0x40020488
 8005538:	400204a0 	.word	0x400204a0
 800553c:	400204b8 	.word	0x400204b8
 8005540:	58025408 	.word	0x58025408
 8005544:	5802541c 	.word	0x5802541c
 8005548:	58025430 	.word	0x58025430
 800554c:	58025444 	.word	0x58025444
 8005550:	58025458 	.word	0x58025458
 8005554:	5802546c 	.word	0x5802546c
 8005558:	58025480 	.word	0x58025480
 800555c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	68ba      	ldr	r2, [r7, #8]
 8005566:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	60da      	str	r2, [r3, #12]
}
 8005570:	e04d      	b.n	800560e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a29      	ldr	r2, [pc, #164]	@ (800561c <DMA_SetConfig+0x338>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d022      	beq.n	80055c2 <DMA_SetConfig+0x2de>
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a27      	ldr	r2, [pc, #156]	@ (8005620 <DMA_SetConfig+0x33c>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d01d      	beq.n	80055c2 <DMA_SetConfig+0x2de>
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a26      	ldr	r2, [pc, #152]	@ (8005624 <DMA_SetConfig+0x340>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d018      	beq.n	80055c2 <DMA_SetConfig+0x2de>
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a24      	ldr	r2, [pc, #144]	@ (8005628 <DMA_SetConfig+0x344>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d013      	beq.n	80055c2 <DMA_SetConfig+0x2de>
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a23      	ldr	r2, [pc, #140]	@ (800562c <DMA_SetConfig+0x348>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d00e      	beq.n	80055c2 <DMA_SetConfig+0x2de>
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a21      	ldr	r2, [pc, #132]	@ (8005630 <DMA_SetConfig+0x34c>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d009      	beq.n	80055c2 <DMA_SetConfig+0x2de>
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a20      	ldr	r2, [pc, #128]	@ (8005634 <DMA_SetConfig+0x350>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d004      	beq.n	80055c2 <DMA_SetConfig+0x2de>
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a1e      	ldr	r2, [pc, #120]	@ (8005638 <DMA_SetConfig+0x354>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d101      	bne.n	80055c6 <DMA_SetConfig+0x2e2>
 80055c2:	2301      	movs	r3, #1
 80055c4:	e000      	b.n	80055c8 <DMA_SetConfig+0x2e4>
 80055c6:	2300      	movs	r3, #0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d020      	beq.n	800560e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055d0:	f003 031f 	and.w	r3, r3, #31
 80055d4:	2201      	movs	r2, #1
 80055d6:	409a      	lsls	r2, r3
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	683a      	ldr	r2, [r7, #0]
 80055e2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	2b40      	cmp	r3, #64	@ 0x40
 80055ea:	d108      	bne.n	80055fe <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	687a      	ldr	r2, [r7, #4]
 80055f2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	68ba      	ldr	r2, [r7, #8]
 80055fa:	60da      	str	r2, [r3, #12]
}
 80055fc:	e007      	b.n	800560e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	68ba      	ldr	r2, [r7, #8]
 8005604:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	60da      	str	r2, [r3, #12]
}
 800560e:	bf00      	nop
 8005610:	371c      	adds	r7, #28
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr
 800561a:	bf00      	nop
 800561c:	58025408 	.word	0x58025408
 8005620:	5802541c 	.word	0x5802541c
 8005624:	58025430 	.word	0x58025430
 8005628:	58025444 	.word	0x58025444
 800562c:	58025458 	.word	0x58025458
 8005630:	5802546c 	.word	0x5802546c
 8005634:	58025480 	.word	0x58025480
 8005638:	58025494 	.word	0x58025494

0800563c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800563c:	b480      	push	{r7}
 800563e:	b085      	sub	sp, #20
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a42      	ldr	r2, [pc, #264]	@ (8005754 <DMA_CalcBaseAndBitshift+0x118>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d04a      	beq.n	80056e4 <DMA_CalcBaseAndBitshift+0xa8>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a41      	ldr	r2, [pc, #260]	@ (8005758 <DMA_CalcBaseAndBitshift+0x11c>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d045      	beq.n	80056e4 <DMA_CalcBaseAndBitshift+0xa8>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a3f      	ldr	r2, [pc, #252]	@ (800575c <DMA_CalcBaseAndBitshift+0x120>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d040      	beq.n	80056e4 <DMA_CalcBaseAndBitshift+0xa8>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a3e      	ldr	r2, [pc, #248]	@ (8005760 <DMA_CalcBaseAndBitshift+0x124>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d03b      	beq.n	80056e4 <DMA_CalcBaseAndBitshift+0xa8>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a3c      	ldr	r2, [pc, #240]	@ (8005764 <DMA_CalcBaseAndBitshift+0x128>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d036      	beq.n	80056e4 <DMA_CalcBaseAndBitshift+0xa8>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a3b      	ldr	r2, [pc, #236]	@ (8005768 <DMA_CalcBaseAndBitshift+0x12c>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d031      	beq.n	80056e4 <DMA_CalcBaseAndBitshift+0xa8>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a39      	ldr	r2, [pc, #228]	@ (800576c <DMA_CalcBaseAndBitshift+0x130>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d02c      	beq.n	80056e4 <DMA_CalcBaseAndBitshift+0xa8>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a38      	ldr	r2, [pc, #224]	@ (8005770 <DMA_CalcBaseAndBitshift+0x134>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d027      	beq.n	80056e4 <DMA_CalcBaseAndBitshift+0xa8>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a36      	ldr	r2, [pc, #216]	@ (8005774 <DMA_CalcBaseAndBitshift+0x138>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d022      	beq.n	80056e4 <DMA_CalcBaseAndBitshift+0xa8>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a35      	ldr	r2, [pc, #212]	@ (8005778 <DMA_CalcBaseAndBitshift+0x13c>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d01d      	beq.n	80056e4 <DMA_CalcBaseAndBitshift+0xa8>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a33      	ldr	r2, [pc, #204]	@ (800577c <DMA_CalcBaseAndBitshift+0x140>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d018      	beq.n	80056e4 <DMA_CalcBaseAndBitshift+0xa8>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a32      	ldr	r2, [pc, #200]	@ (8005780 <DMA_CalcBaseAndBitshift+0x144>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d013      	beq.n	80056e4 <DMA_CalcBaseAndBitshift+0xa8>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a30      	ldr	r2, [pc, #192]	@ (8005784 <DMA_CalcBaseAndBitshift+0x148>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d00e      	beq.n	80056e4 <DMA_CalcBaseAndBitshift+0xa8>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a2f      	ldr	r2, [pc, #188]	@ (8005788 <DMA_CalcBaseAndBitshift+0x14c>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d009      	beq.n	80056e4 <DMA_CalcBaseAndBitshift+0xa8>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a2d      	ldr	r2, [pc, #180]	@ (800578c <DMA_CalcBaseAndBitshift+0x150>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d004      	beq.n	80056e4 <DMA_CalcBaseAndBitshift+0xa8>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a2c      	ldr	r2, [pc, #176]	@ (8005790 <DMA_CalcBaseAndBitshift+0x154>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d101      	bne.n	80056e8 <DMA_CalcBaseAndBitshift+0xac>
 80056e4:	2301      	movs	r3, #1
 80056e6:	e000      	b.n	80056ea <DMA_CalcBaseAndBitshift+0xae>
 80056e8:	2300      	movs	r3, #0
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d024      	beq.n	8005738 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	3b10      	subs	r3, #16
 80056f6:	4a27      	ldr	r2, [pc, #156]	@ (8005794 <DMA_CalcBaseAndBitshift+0x158>)
 80056f8:	fba2 2303 	umull	r2, r3, r2, r3
 80056fc:	091b      	lsrs	r3, r3, #4
 80056fe:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f003 0307 	and.w	r3, r3, #7
 8005706:	4a24      	ldr	r2, [pc, #144]	@ (8005798 <DMA_CalcBaseAndBitshift+0x15c>)
 8005708:	5cd3      	ldrb	r3, [r2, r3]
 800570a:	461a      	mov	r2, r3
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2b03      	cmp	r3, #3
 8005714:	d908      	bls.n	8005728 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	461a      	mov	r2, r3
 800571c:	4b1f      	ldr	r3, [pc, #124]	@ (800579c <DMA_CalcBaseAndBitshift+0x160>)
 800571e:	4013      	ands	r3, r2
 8005720:	1d1a      	adds	r2, r3, #4
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	659a      	str	r2, [r3, #88]	@ 0x58
 8005726:	e00d      	b.n	8005744 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	461a      	mov	r2, r3
 800572e:	4b1b      	ldr	r3, [pc, #108]	@ (800579c <DMA_CalcBaseAndBitshift+0x160>)
 8005730:	4013      	ands	r3, r2
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	6593      	str	r3, [r2, #88]	@ 0x58
 8005736:	e005      	b.n	8005744 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005748:	4618      	mov	r0, r3
 800574a:	3714      	adds	r7, #20
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr
 8005754:	40020010 	.word	0x40020010
 8005758:	40020028 	.word	0x40020028
 800575c:	40020040 	.word	0x40020040
 8005760:	40020058 	.word	0x40020058
 8005764:	40020070 	.word	0x40020070
 8005768:	40020088 	.word	0x40020088
 800576c:	400200a0 	.word	0x400200a0
 8005770:	400200b8 	.word	0x400200b8
 8005774:	40020410 	.word	0x40020410
 8005778:	40020428 	.word	0x40020428
 800577c:	40020440 	.word	0x40020440
 8005780:	40020458 	.word	0x40020458
 8005784:	40020470 	.word	0x40020470
 8005788:	40020488 	.word	0x40020488
 800578c:	400204a0 	.word	0x400204a0
 8005790:	400204b8 	.word	0x400204b8
 8005794:	aaaaaaab 	.word	0xaaaaaaab
 8005798:	0800d100 	.word	0x0800d100
 800579c:	fffffc00 	.word	0xfffffc00

080057a0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b085      	sub	sp, #20
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057a8:	2300      	movs	r3, #0
 80057aa:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	699b      	ldr	r3, [r3, #24]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d120      	bne.n	80057f6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057b8:	2b03      	cmp	r3, #3
 80057ba:	d858      	bhi.n	800586e <DMA_CheckFifoParam+0xce>
 80057bc:	a201      	add	r2, pc, #4	@ (adr r2, 80057c4 <DMA_CheckFifoParam+0x24>)
 80057be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057c2:	bf00      	nop
 80057c4:	080057d5 	.word	0x080057d5
 80057c8:	080057e7 	.word	0x080057e7
 80057cc:	080057d5 	.word	0x080057d5
 80057d0:	0800586f 	.word	0x0800586f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d048      	beq.n	8005872 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80057e4:	e045      	b.n	8005872 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ea:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80057ee:	d142      	bne.n	8005876 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80057f4:	e03f      	b.n	8005876 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	699b      	ldr	r3, [r3, #24]
 80057fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057fe:	d123      	bne.n	8005848 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005804:	2b03      	cmp	r3, #3
 8005806:	d838      	bhi.n	800587a <DMA_CheckFifoParam+0xda>
 8005808:	a201      	add	r2, pc, #4	@ (adr r2, 8005810 <DMA_CheckFifoParam+0x70>)
 800580a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800580e:	bf00      	nop
 8005810:	08005821 	.word	0x08005821
 8005814:	08005827 	.word	0x08005827
 8005818:	08005821 	.word	0x08005821
 800581c:	08005839 	.word	0x08005839
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	73fb      	strb	r3, [r7, #15]
        break;
 8005824:	e030      	b.n	8005888 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800582a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800582e:	2b00      	cmp	r3, #0
 8005830:	d025      	beq.n	800587e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005836:	e022      	b.n	800587e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800583c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005840:	d11f      	bne.n	8005882 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005846:	e01c      	b.n	8005882 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800584c:	2b02      	cmp	r3, #2
 800584e:	d902      	bls.n	8005856 <DMA_CheckFifoParam+0xb6>
 8005850:	2b03      	cmp	r3, #3
 8005852:	d003      	beq.n	800585c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005854:	e018      	b.n	8005888 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	73fb      	strb	r3, [r7, #15]
        break;
 800585a:	e015      	b.n	8005888 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005860:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005864:	2b00      	cmp	r3, #0
 8005866:	d00e      	beq.n	8005886 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	73fb      	strb	r3, [r7, #15]
    break;
 800586c:	e00b      	b.n	8005886 <DMA_CheckFifoParam+0xe6>
        break;
 800586e:	bf00      	nop
 8005870:	e00a      	b.n	8005888 <DMA_CheckFifoParam+0xe8>
        break;
 8005872:	bf00      	nop
 8005874:	e008      	b.n	8005888 <DMA_CheckFifoParam+0xe8>
        break;
 8005876:	bf00      	nop
 8005878:	e006      	b.n	8005888 <DMA_CheckFifoParam+0xe8>
        break;
 800587a:	bf00      	nop
 800587c:	e004      	b.n	8005888 <DMA_CheckFifoParam+0xe8>
        break;
 800587e:	bf00      	nop
 8005880:	e002      	b.n	8005888 <DMA_CheckFifoParam+0xe8>
        break;
 8005882:	bf00      	nop
 8005884:	e000      	b.n	8005888 <DMA_CheckFifoParam+0xe8>
    break;
 8005886:	bf00      	nop
    }
  }

  return status;
 8005888:	7bfb      	ldrb	r3, [r7, #15]
}
 800588a:	4618      	mov	r0, r3
 800588c:	3714      	adds	r7, #20
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr
 8005896:	bf00      	nop

08005898 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005898:	b480      	push	{r7}
 800589a:	b085      	sub	sp, #20
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a38      	ldr	r2, [pc, #224]	@ (800598c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d022      	beq.n	80058f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a36      	ldr	r2, [pc, #216]	@ (8005990 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d01d      	beq.n	80058f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a35      	ldr	r2, [pc, #212]	@ (8005994 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d018      	beq.n	80058f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a33      	ldr	r2, [pc, #204]	@ (8005998 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d013      	beq.n	80058f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a32      	ldr	r2, [pc, #200]	@ (800599c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d00e      	beq.n	80058f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a30      	ldr	r2, [pc, #192]	@ (80059a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d009      	beq.n	80058f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a2f      	ldr	r2, [pc, #188]	@ (80059a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d004      	beq.n	80058f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a2d      	ldr	r2, [pc, #180]	@ (80059a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d101      	bne.n	80058fa <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80058f6:	2301      	movs	r3, #1
 80058f8:	e000      	b.n	80058fc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80058fa:	2300      	movs	r3, #0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d01a      	beq.n	8005936 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	b2db      	uxtb	r3, r3
 8005906:	3b08      	subs	r3, #8
 8005908:	4a28      	ldr	r2, [pc, #160]	@ (80059ac <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800590a:	fba2 2303 	umull	r2, r3, r2, r3
 800590e:	091b      	lsrs	r3, r3, #4
 8005910:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	4b26      	ldr	r3, [pc, #152]	@ (80059b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005916:	4413      	add	r3, r2
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	461a      	mov	r2, r3
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	4a24      	ldr	r2, [pc, #144]	@ (80059b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005924:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f003 031f 	and.w	r3, r3, #31
 800592c:	2201      	movs	r2, #1
 800592e:	409a      	lsls	r2, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005934:	e024      	b.n	8005980 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	b2db      	uxtb	r3, r3
 800593c:	3b10      	subs	r3, #16
 800593e:	4a1e      	ldr	r2, [pc, #120]	@ (80059b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005940:	fba2 2303 	umull	r2, r3, r2, r3
 8005944:	091b      	lsrs	r3, r3, #4
 8005946:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	4a1c      	ldr	r2, [pc, #112]	@ (80059bc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d806      	bhi.n	800595e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	4a1b      	ldr	r2, [pc, #108]	@ (80059c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d902      	bls.n	800595e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	3308      	adds	r3, #8
 800595c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800595e:	68fa      	ldr	r2, [r7, #12]
 8005960:	4b18      	ldr	r3, [pc, #96]	@ (80059c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005962:	4413      	add	r3, r2
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	461a      	mov	r2, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4a16      	ldr	r2, [pc, #88]	@ (80059c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005970:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f003 031f 	and.w	r3, r3, #31
 8005978:	2201      	movs	r2, #1
 800597a:	409a      	lsls	r2, r3
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005980:	bf00      	nop
 8005982:	3714      	adds	r7, #20
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr
 800598c:	58025408 	.word	0x58025408
 8005990:	5802541c 	.word	0x5802541c
 8005994:	58025430 	.word	0x58025430
 8005998:	58025444 	.word	0x58025444
 800599c:	58025458 	.word	0x58025458
 80059a0:	5802546c 	.word	0x5802546c
 80059a4:	58025480 	.word	0x58025480
 80059a8:	58025494 	.word	0x58025494
 80059ac:	cccccccd 	.word	0xcccccccd
 80059b0:	16009600 	.word	0x16009600
 80059b4:	58025880 	.word	0x58025880
 80059b8:	aaaaaaab 	.word	0xaaaaaaab
 80059bc:	400204b8 	.word	0x400204b8
 80059c0:	4002040f 	.word	0x4002040f
 80059c4:	10008200 	.word	0x10008200
 80059c8:	40020880 	.word	0x40020880

080059cc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b085      	sub	sp, #20
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d04a      	beq.n	8005a78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2b08      	cmp	r3, #8
 80059e6:	d847      	bhi.n	8005a78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a25      	ldr	r2, [pc, #148]	@ (8005a84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d022      	beq.n	8005a38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a24      	ldr	r2, [pc, #144]	@ (8005a88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d01d      	beq.n	8005a38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a22      	ldr	r2, [pc, #136]	@ (8005a8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d018      	beq.n	8005a38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a21      	ldr	r2, [pc, #132]	@ (8005a90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d013      	beq.n	8005a38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a1f      	ldr	r2, [pc, #124]	@ (8005a94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d00e      	beq.n	8005a38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a1e      	ldr	r2, [pc, #120]	@ (8005a98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d009      	beq.n	8005a38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a1c      	ldr	r2, [pc, #112]	@ (8005a9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d004      	beq.n	8005a38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a1b      	ldr	r2, [pc, #108]	@ (8005aa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d101      	bne.n	8005a3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e000      	b.n	8005a3e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d00a      	beq.n	8005a58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005a42:	68fa      	ldr	r2, [r7, #12]
 8005a44:	4b17      	ldr	r3, [pc, #92]	@ (8005aa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005a46:	4413      	add	r3, r2
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4a15      	ldr	r2, [pc, #84]	@ (8005aa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005a54:	671a      	str	r2, [r3, #112]	@ 0x70
 8005a56:	e009      	b.n	8005a6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005a58:	68fa      	ldr	r2, [r7, #12]
 8005a5a:	4b14      	ldr	r3, [pc, #80]	@ (8005aac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005a5c:	4413      	add	r3, r2
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	461a      	mov	r2, r3
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a11      	ldr	r2, [pc, #68]	@ (8005ab0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005a6a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	3b01      	subs	r3, #1
 8005a70:	2201      	movs	r2, #1
 8005a72:	409a      	lsls	r2, r3
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005a78:	bf00      	nop
 8005a7a:	3714      	adds	r7, #20
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr
 8005a84:	58025408 	.word	0x58025408
 8005a88:	5802541c 	.word	0x5802541c
 8005a8c:	58025430 	.word	0x58025430
 8005a90:	58025444 	.word	0x58025444
 8005a94:	58025458 	.word	0x58025458
 8005a98:	5802546c 	.word	0x5802546c
 8005a9c:	58025480 	.word	0x58025480
 8005aa0:	58025494 	.word	0x58025494
 8005aa4:	1600963f 	.word	0x1600963f
 8005aa8:	58025940 	.word	0x58025940
 8005aac:	1000823f 	.word	0x1000823f
 8005ab0:	40020940 	.word	0x40020940

08005ab4 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA Stream.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b085      	sub	sp, #20
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]
  uint32_t syncSignalID = 0;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	60fb      	str	r3, [r7, #12]
  uint32_t syncPolarity = 0;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  if(pSyncConfig->SyncEnable == ENABLE)
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	7a1b      	ldrb	r3, [r3, #8]
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d154      	bne.n	8005b78 <HAL_DMAEx_ConfigMuxSync+0xc4>
  {
    assert_param(IS_DMAMUX_SYNC_POLARITY(pSyncConfig->SyncPolarity));

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a4b      	ldr	r2, [pc, #300]	@ (8005c00 <HAL_DMAEx_ConfigMuxSync+0x14c>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d049      	beq.n	8005b6c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a49      	ldr	r2, [pc, #292]	@ (8005c04 <HAL_DMAEx_ConfigMuxSync+0x150>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d044      	beq.n	8005b6c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a48      	ldr	r2, [pc, #288]	@ (8005c08 <HAL_DMAEx_ConfigMuxSync+0x154>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d03f      	beq.n	8005b6c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a46      	ldr	r2, [pc, #280]	@ (8005c0c <HAL_DMAEx_ConfigMuxSync+0x158>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d03a      	beq.n	8005b6c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a45      	ldr	r2, [pc, #276]	@ (8005c10 <HAL_DMAEx_ConfigMuxSync+0x15c>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d035      	beq.n	8005b6c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a43      	ldr	r2, [pc, #268]	@ (8005c14 <HAL_DMAEx_ConfigMuxSync+0x160>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d030      	beq.n	8005b6c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a42      	ldr	r2, [pc, #264]	@ (8005c18 <HAL_DMAEx_ConfigMuxSync+0x164>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d02b      	beq.n	8005b6c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a40      	ldr	r2, [pc, #256]	@ (8005c1c <HAL_DMAEx_ConfigMuxSync+0x168>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d026      	beq.n	8005b6c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a3f      	ldr	r2, [pc, #252]	@ (8005c20 <HAL_DMAEx_ConfigMuxSync+0x16c>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d021      	beq.n	8005b6c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a3d      	ldr	r2, [pc, #244]	@ (8005c24 <HAL_DMAEx_ConfigMuxSync+0x170>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d01c      	beq.n	8005b6c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a3c      	ldr	r2, [pc, #240]	@ (8005c28 <HAL_DMAEx_ConfigMuxSync+0x174>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d017      	beq.n	8005b6c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a3a      	ldr	r2, [pc, #232]	@ (8005c2c <HAL_DMAEx_ConfigMuxSync+0x178>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d012      	beq.n	8005b6c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a39      	ldr	r2, [pc, #228]	@ (8005c30 <HAL_DMAEx_ConfigMuxSync+0x17c>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d00d      	beq.n	8005b6c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a37      	ldr	r2, [pc, #220]	@ (8005c34 <HAL_DMAEx_ConfigMuxSync+0x180>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d008      	beq.n	8005b6c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a36      	ldr	r2, [pc, #216]	@ (8005c38 <HAL_DMAEx_ConfigMuxSync+0x184>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d003      	beq.n	8005b6c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a34      	ldr	r2, [pc, #208]	@ (8005c3c <HAL_DMAEx_ConfigMuxSync+0x188>)
 8005b6a:	4293      	cmp	r3, r2
    }
    else
    {
      assert_param(IS_BDMA_DMAMUX_SYNC_SIGNAL_ID(pSyncConfig->SyncSignalID));
    }
    syncSignalID = pSyncConfig->SyncSignalID;
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	60fb      	str	r3, [r7, #12]
    syncPolarity = pSyncConfig->SyncPolarity;
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	60bb      	str	r3, [r7, #8]
  }

  /*Check if the DMA state is ready */
  if(hdma->State == HAL_DMA_STATE_READY)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d131      	bne.n	8005be8 <HAL_DMAEx_ConfigMuxSync+0x134>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d101      	bne.n	8005b92 <HAL_DMAEx_ConfigMuxSync+0xde>
 8005b8e:	2302      	movs	r3, #2
 8005b90:	e02f      	b.n	8005bf2 <HAL_DMAEx_ConfigMuxSync+0x13e>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2201      	movs	r2, #1
 8005b96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the synchronization and event generation before applying a new config */
    CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ba4:	f422 3281 	bic.w	r2, r2, #66048	@ 0x10200
 8005ba8:	601a      	str	r2, [r3, #0]

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	b2d9      	uxtb	r1, r3
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	061a      	lsls	r2, r3, #24
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	3b01      	subs	r3, #1
 8005bbc:	04db      	lsls	r3, r3, #19
 8005bbe:	431a      	orrs	r2, r3
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	431a      	orrs	r2, r3
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	7a1b      	ldrb	r3, [r3, #8]
 8005bc8:	041b      	lsls	r3, r3, #16
 8005bca:	431a      	orrs	r2, r3
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	7a5b      	ldrb	r3, [r3, #9]
 8005bd0:	025b      	lsls	r3, r3, #9
 8005bd2:	431a      	orrs	r2, r3
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bd8:	430a      	orrs	r2, r1
 8005bda:	601a      	str	r2, [r3, #0]
               ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               syncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)    | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

      /* Process Locked */
    __HAL_UNLOCK(hdma);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8005be4:	2300      	movs	r3, #0
 8005be6:	e004      	b.n	8005bf2 <HAL_DMAEx_ConfigMuxSync+0x13e>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005bee:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return error status */
    return HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
  }
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3714      	adds	r7, #20
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr
 8005bfe:	bf00      	nop
 8005c00:	40020010 	.word	0x40020010
 8005c04:	40020028 	.word	0x40020028
 8005c08:	40020040 	.word	0x40020040
 8005c0c:	40020058 	.word	0x40020058
 8005c10:	40020070 	.word	0x40020070
 8005c14:	40020088 	.word	0x40020088
 8005c18:	400200a0 	.word	0x400200a0
 8005c1c:	400200b8 	.word	0x400200b8
 8005c20:	40020410 	.word	0x40020410
 8005c24:	40020428 	.word	0x40020428
 8005c28:	40020440 	.word	0x40020440
 8005c2c:	40020458 	.word	0x40020458
 8005c30:	40020470 	.word	0x40020470
 8005c34:	40020488 	.word	0x40020488
 8005c38:	400204a0 	.word	0x400204a0
 8005c3c:	400204b8 	.word	0x400204b8

08005c40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b089      	sub	sp, #36	@ 0x24
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005c4e:	4b89      	ldr	r3, [pc, #548]	@ (8005e74 <HAL_GPIO_Init+0x234>)
 8005c50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005c52:	e194      	b.n	8005f7e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	2101      	movs	r1, #1
 8005c5a:	69fb      	ldr	r3, [r7, #28]
 8005c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8005c60:	4013      	ands	r3, r2
 8005c62:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	f000 8186 	beq.w	8005f78 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	f003 0303 	and.w	r3, r3, #3
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d005      	beq.n	8005c84 <HAL_GPIO_Init+0x44>
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	f003 0303 	and.w	r3, r3, #3
 8005c80:	2b02      	cmp	r3, #2
 8005c82:	d130      	bne.n	8005ce6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	005b      	lsls	r3, r3, #1
 8005c8e:	2203      	movs	r2, #3
 8005c90:	fa02 f303 	lsl.w	r3, r2, r3
 8005c94:	43db      	mvns	r3, r3
 8005c96:	69ba      	ldr	r2, [r7, #24]
 8005c98:	4013      	ands	r3, r2
 8005c9a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	68da      	ldr	r2, [r3, #12]
 8005ca0:	69fb      	ldr	r3, [r7, #28]
 8005ca2:	005b      	lsls	r3, r3, #1
 8005ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca8:	69ba      	ldr	r2, [r7, #24]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	69ba      	ldr	r2, [r7, #24]
 8005cb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005cba:	2201      	movs	r2, #1
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc2:	43db      	mvns	r3, r3
 8005cc4:	69ba      	ldr	r2, [r7, #24]
 8005cc6:	4013      	ands	r3, r2
 8005cc8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	091b      	lsrs	r3, r3, #4
 8005cd0:	f003 0201 	and.w	r2, r3, #1
 8005cd4:	69fb      	ldr	r3, [r7, #28]
 8005cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cda:	69ba      	ldr	r2, [r7, #24]
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	69ba      	ldr	r2, [r7, #24]
 8005ce4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	f003 0303 	and.w	r3, r3, #3
 8005cee:	2b03      	cmp	r3, #3
 8005cf0:	d017      	beq.n	8005d22 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	68db      	ldr	r3, [r3, #12]
 8005cf6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	005b      	lsls	r3, r3, #1
 8005cfc:	2203      	movs	r2, #3
 8005cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8005d02:	43db      	mvns	r3, r3
 8005d04:	69ba      	ldr	r2, [r7, #24]
 8005d06:	4013      	ands	r3, r2
 8005d08:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	689a      	ldr	r2, [r3, #8]
 8005d0e:	69fb      	ldr	r3, [r7, #28]
 8005d10:	005b      	lsls	r3, r3, #1
 8005d12:	fa02 f303 	lsl.w	r3, r2, r3
 8005d16:	69ba      	ldr	r2, [r7, #24]
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	69ba      	ldr	r2, [r7, #24]
 8005d20:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	f003 0303 	and.w	r3, r3, #3
 8005d2a:	2b02      	cmp	r3, #2
 8005d2c:	d123      	bne.n	8005d76 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005d2e:	69fb      	ldr	r3, [r7, #28]
 8005d30:	08da      	lsrs	r2, r3, #3
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	3208      	adds	r2, #8
 8005d36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	f003 0307 	and.w	r3, r3, #7
 8005d42:	009b      	lsls	r3, r3, #2
 8005d44:	220f      	movs	r2, #15
 8005d46:	fa02 f303 	lsl.w	r3, r2, r3
 8005d4a:	43db      	mvns	r3, r3
 8005d4c:	69ba      	ldr	r2, [r7, #24]
 8005d4e:	4013      	ands	r3, r2
 8005d50:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	691a      	ldr	r2, [r3, #16]
 8005d56:	69fb      	ldr	r3, [r7, #28]
 8005d58:	f003 0307 	and.w	r3, r3, #7
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d62:	69ba      	ldr	r2, [r7, #24]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	08da      	lsrs	r2, r3, #3
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	3208      	adds	r2, #8
 8005d70:	69b9      	ldr	r1, [r7, #24]
 8005d72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005d7c:	69fb      	ldr	r3, [r7, #28]
 8005d7e:	005b      	lsls	r3, r3, #1
 8005d80:	2203      	movs	r2, #3
 8005d82:	fa02 f303 	lsl.w	r3, r2, r3
 8005d86:	43db      	mvns	r3, r3
 8005d88:	69ba      	ldr	r2, [r7, #24]
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	f003 0203 	and.w	r2, r3, #3
 8005d96:	69fb      	ldr	r3, [r7, #28]
 8005d98:	005b      	lsls	r3, r3, #1
 8005d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d9e:	69ba      	ldr	r2, [r7, #24]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	69ba      	ldr	r2, [r7, #24]
 8005da8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	f000 80e0 	beq.w	8005f78 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005db8:	4b2f      	ldr	r3, [pc, #188]	@ (8005e78 <HAL_GPIO_Init+0x238>)
 8005dba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005dbe:	4a2e      	ldr	r2, [pc, #184]	@ (8005e78 <HAL_GPIO_Init+0x238>)
 8005dc0:	f043 0302 	orr.w	r3, r3, #2
 8005dc4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005dc8:	4b2b      	ldr	r3, [pc, #172]	@ (8005e78 <HAL_GPIO_Init+0x238>)
 8005dca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005dce:	f003 0302 	and.w	r3, r3, #2
 8005dd2:	60fb      	str	r3, [r7, #12]
 8005dd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005dd6:	4a29      	ldr	r2, [pc, #164]	@ (8005e7c <HAL_GPIO_Init+0x23c>)
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	089b      	lsrs	r3, r3, #2
 8005ddc:	3302      	adds	r3, #2
 8005dde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005de4:	69fb      	ldr	r3, [r7, #28]
 8005de6:	f003 0303 	and.w	r3, r3, #3
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	220f      	movs	r2, #15
 8005dee:	fa02 f303 	lsl.w	r3, r2, r3
 8005df2:	43db      	mvns	r3, r3
 8005df4:	69ba      	ldr	r2, [r7, #24]
 8005df6:	4013      	ands	r3, r2
 8005df8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a20      	ldr	r2, [pc, #128]	@ (8005e80 <HAL_GPIO_Init+0x240>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d052      	beq.n	8005ea8 <HAL_GPIO_Init+0x268>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a1f      	ldr	r2, [pc, #124]	@ (8005e84 <HAL_GPIO_Init+0x244>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d031      	beq.n	8005e6e <HAL_GPIO_Init+0x22e>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a1e      	ldr	r2, [pc, #120]	@ (8005e88 <HAL_GPIO_Init+0x248>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d02b      	beq.n	8005e6a <HAL_GPIO_Init+0x22a>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4a1d      	ldr	r2, [pc, #116]	@ (8005e8c <HAL_GPIO_Init+0x24c>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d025      	beq.n	8005e66 <HAL_GPIO_Init+0x226>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a1c      	ldr	r2, [pc, #112]	@ (8005e90 <HAL_GPIO_Init+0x250>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d01f      	beq.n	8005e62 <HAL_GPIO_Init+0x222>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4a1b      	ldr	r2, [pc, #108]	@ (8005e94 <HAL_GPIO_Init+0x254>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d019      	beq.n	8005e5e <HAL_GPIO_Init+0x21e>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4a1a      	ldr	r2, [pc, #104]	@ (8005e98 <HAL_GPIO_Init+0x258>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d013      	beq.n	8005e5a <HAL_GPIO_Init+0x21a>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	4a19      	ldr	r2, [pc, #100]	@ (8005e9c <HAL_GPIO_Init+0x25c>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d00d      	beq.n	8005e56 <HAL_GPIO_Init+0x216>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	4a18      	ldr	r2, [pc, #96]	@ (8005ea0 <HAL_GPIO_Init+0x260>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d007      	beq.n	8005e52 <HAL_GPIO_Init+0x212>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	4a17      	ldr	r2, [pc, #92]	@ (8005ea4 <HAL_GPIO_Init+0x264>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d101      	bne.n	8005e4e <HAL_GPIO_Init+0x20e>
 8005e4a:	2309      	movs	r3, #9
 8005e4c:	e02d      	b.n	8005eaa <HAL_GPIO_Init+0x26a>
 8005e4e:	230a      	movs	r3, #10
 8005e50:	e02b      	b.n	8005eaa <HAL_GPIO_Init+0x26a>
 8005e52:	2308      	movs	r3, #8
 8005e54:	e029      	b.n	8005eaa <HAL_GPIO_Init+0x26a>
 8005e56:	2307      	movs	r3, #7
 8005e58:	e027      	b.n	8005eaa <HAL_GPIO_Init+0x26a>
 8005e5a:	2306      	movs	r3, #6
 8005e5c:	e025      	b.n	8005eaa <HAL_GPIO_Init+0x26a>
 8005e5e:	2305      	movs	r3, #5
 8005e60:	e023      	b.n	8005eaa <HAL_GPIO_Init+0x26a>
 8005e62:	2304      	movs	r3, #4
 8005e64:	e021      	b.n	8005eaa <HAL_GPIO_Init+0x26a>
 8005e66:	2303      	movs	r3, #3
 8005e68:	e01f      	b.n	8005eaa <HAL_GPIO_Init+0x26a>
 8005e6a:	2302      	movs	r3, #2
 8005e6c:	e01d      	b.n	8005eaa <HAL_GPIO_Init+0x26a>
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e01b      	b.n	8005eaa <HAL_GPIO_Init+0x26a>
 8005e72:	bf00      	nop
 8005e74:	58000080 	.word	0x58000080
 8005e78:	58024400 	.word	0x58024400
 8005e7c:	58000400 	.word	0x58000400
 8005e80:	58020000 	.word	0x58020000
 8005e84:	58020400 	.word	0x58020400
 8005e88:	58020800 	.word	0x58020800
 8005e8c:	58020c00 	.word	0x58020c00
 8005e90:	58021000 	.word	0x58021000
 8005e94:	58021400 	.word	0x58021400
 8005e98:	58021800 	.word	0x58021800
 8005e9c:	58021c00 	.word	0x58021c00
 8005ea0:	58022000 	.word	0x58022000
 8005ea4:	58022400 	.word	0x58022400
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	69fa      	ldr	r2, [r7, #28]
 8005eac:	f002 0203 	and.w	r2, r2, #3
 8005eb0:	0092      	lsls	r2, r2, #2
 8005eb2:	4093      	lsls	r3, r2
 8005eb4:	69ba      	ldr	r2, [r7, #24]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005eba:	4938      	ldr	r1, [pc, #224]	@ (8005f9c <HAL_GPIO_Init+0x35c>)
 8005ebc:	69fb      	ldr	r3, [r7, #28]
 8005ebe:	089b      	lsrs	r3, r3, #2
 8005ec0:	3302      	adds	r3, #2
 8005ec2:	69ba      	ldr	r2, [r7, #24]
 8005ec4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005ec8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	43db      	mvns	r3, r3
 8005ed4:	69ba      	ldr	r2, [r7, #24]
 8005ed6:	4013      	ands	r3, r2
 8005ed8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d003      	beq.n	8005eee <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005ee6:	69ba      	ldr	r2, [r7, #24]
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005eee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005ef6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	43db      	mvns	r3, r3
 8005f02:	69ba      	ldr	r2, [r7, #24]
 8005f04:	4013      	ands	r3, r2
 8005f06:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d003      	beq.n	8005f1c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005f14:	69ba      	ldr	r2, [r7, #24]
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005f1c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005f20:	69bb      	ldr	r3, [r7, #24]
 8005f22:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	43db      	mvns	r3, r3
 8005f2e:	69ba      	ldr	r2, [r7, #24]
 8005f30:	4013      	ands	r3, r2
 8005f32:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d003      	beq.n	8005f48 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005f40:	69ba      	ldr	r2, [r7, #24]
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	69ba      	ldr	r2, [r7, #24]
 8005f4c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	43db      	mvns	r3, r3
 8005f58:	69ba      	ldr	r2, [r7, #24]
 8005f5a:	4013      	ands	r3, r2
 8005f5c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d003      	beq.n	8005f72 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005f6a:	69ba      	ldr	r2, [r7, #24]
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	69ba      	ldr	r2, [r7, #24]
 8005f76:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005f78:	69fb      	ldr	r3, [r7, #28]
 8005f7a:	3301      	adds	r3, #1
 8005f7c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	69fb      	ldr	r3, [r7, #28]
 8005f84:	fa22 f303 	lsr.w	r3, r2, r3
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	f47f ae63 	bne.w	8005c54 <HAL_GPIO_Init+0x14>
  }
}
 8005f8e:	bf00      	nop
 8005f90:	bf00      	nop
 8005f92:	3724      	adds	r7, #36	@ 0x24
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr
 8005f9c:	58000400 	.word	0x58000400

08005fa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	460b      	mov	r3, r1
 8005faa:	807b      	strh	r3, [r7, #2]
 8005fac:	4613      	mov	r3, r2
 8005fae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005fb0:	787b      	ldrb	r3, [r7, #1]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d003      	beq.n	8005fbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005fb6:	887a      	ldrh	r2, [r7, #2]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005fbc:	e003      	b.n	8005fc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005fbe:	887b      	ldrh	r3, [r7, #2]
 8005fc0:	041a      	lsls	r2, r3, #16
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	619a      	str	r2, [r3, #24]
}
 8005fc6:	bf00      	nop
 8005fc8:	370c      	adds	r7, #12
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr
	...

08005fd4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b083      	sub	sp, #12
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8005fdc:	4a08      	ldr	r2, [pc, #32]	@ (8006000 <HAL_HSEM_FastTake+0x2c>)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	3320      	adds	r3, #32
 8005fe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fe6:	4a07      	ldr	r2, [pc, #28]	@ (8006004 <HAL_HSEM_FastTake+0x30>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d101      	bne.n	8005ff0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8005fec:	2300      	movs	r3, #0
 8005fee:	e000      	b.n	8005ff2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8005ff0:	2301      	movs	r3, #1
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	370c      	adds	r7, #12
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr
 8005ffe:	bf00      	nop
 8006000:	58026400 	.word	0x58026400
 8006004:	80000300 	.word	0x80000300

08006008 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8006008:	b480      	push	{r7}
 800600a:	b083      	sub	sp, #12
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8006012:	4906      	ldr	r1, [pc, #24]	@ (800602c <HAL_HSEM_Release+0x24>)
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8006020:	bf00      	nop
 8006022:	370c      	adds	r7, #12
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr
 800602c:	58026400 	.word	0x58026400

08006030 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b082      	sub	sp, #8
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d101      	bne.n	8006042 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	e08b      	b.n	800615a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006048:	b2db      	uxtb	r3, r3
 800604a:	2b00      	cmp	r3, #0
 800604c:	d106      	bne.n	800605c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f7fd f82e 	bl	80030b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2224      	movs	r2, #36	@ 0x24
 8006060:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f022 0201 	bic.w	r2, r2, #1
 8006072:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	685a      	ldr	r2, [r3, #4]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006080:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	689a      	ldr	r2, [r3, #8]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006090:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	68db      	ldr	r3, [r3, #12]
 8006096:	2b01      	cmp	r3, #1
 8006098:	d107      	bne.n	80060aa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	689a      	ldr	r2, [r3, #8]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80060a6:	609a      	str	r2, [r3, #8]
 80060a8:	e006      	b.n	80060b8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	689a      	ldr	r2, [r3, #8]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80060b6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	2b02      	cmp	r3, #2
 80060be:	d108      	bne.n	80060d2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	685a      	ldr	r2, [r3, #4]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80060ce:	605a      	str	r2, [r3, #4]
 80060d0:	e007      	b.n	80060e2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	685a      	ldr	r2, [r3, #4]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80060e0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	6859      	ldr	r1, [r3, #4]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	4b1d      	ldr	r3, [pc, #116]	@ (8006164 <HAL_I2C_Init+0x134>)
 80060ee:	430b      	orrs	r3, r1
 80060f0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	68da      	ldr	r2, [r3, #12]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006100:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	691a      	ldr	r2, [r3, #16]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	695b      	ldr	r3, [r3, #20]
 800610a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	699b      	ldr	r3, [r3, #24]
 8006112:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	430a      	orrs	r2, r1
 800611a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	69d9      	ldr	r1, [r3, #28]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6a1a      	ldr	r2, [r3, #32]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	430a      	orrs	r2, r1
 800612a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f042 0201 	orr.w	r2, r2, #1
 800613a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2200      	movs	r2, #0
 8006140:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2220      	movs	r2, #32
 8006146:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2200      	movs	r2, #0
 800614e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006158:	2300      	movs	r3, #0
}
 800615a:	4618      	mov	r0, r3
 800615c:	3708      	adds	r7, #8
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}
 8006162:	bf00      	nop
 8006164:	02008000 	.word	0x02008000

08006168 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b088      	sub	sp, #32
 800616c:	af02      	add	r7, sp, #8
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	4608      	mov	r0, r1
 8006172:	4611      	mov	r1, r2
 8006174:	461a      	mov	r2, r3
 8006176:	4603      	mov	r3, r0
 8006178:	817b      	strh	r3, [r7, #10]
 800617a:	460b      	mov	r3, r1
 800617c:	813b      	strh	r3, [r7, #8]
 800617e:	4613      	mov	r3, r2
 8006180:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006188:	b2db      	uxtb	r3, r3
 800618a:	2b20      	cmp	r3, #32
 800618c:	f040 80f9 	bne.w	8006382 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006190:	6a3b      	ldr	r3, [r7, #32]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d002      	beq.n	800619c <HAL_I2C_Mem_Write+0x34>
 8006196:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006198:	2b00      	cmp	r3, #0
 800619a:	d105      	bne.n	80061a8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80061a2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80061a4:	2301      	movs	r3, #1
 80061a6:	e0ed      	b.n	8006384 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d101      	bne.n	80061b6 <HAL_I2C_Mem_Write+0x4e>
 80061b2:	2302      	movs	r3, #2
 80061b4:	e0e6      	b.n	8006384 <HAL_I2C_Mem_Write+0x21c>
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2201      	movs	r2, #1
 80061ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80061be:	f7fd fa49 	bl	8003654 <HAL_GetTick>
 80061c2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	9300      	str	r3, [sp, #0]
 80061c8:	2319      	movs	r3, #25
 80061ca:	2201      	movs	r2, #1
 80061cc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80061d0:	68f8      	ldr	r0, [r7, #12]
 80061d2:	f000 fac3 	bl	800675c <I2C_WaitOnFlagUntilTimeout>
 80061d6:	4603      	mov	r3, r0
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d001      	beq.n	80061e0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80061dc:	2301      	movs	r3, #1
 80061de:	e0d1      	b.n	8006384 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2221      	movs	r2, #33	@ 0x21
 80061e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2240      	movs	r2, #64	@ 0x40
 80061ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2200      	movs	r2, #0
 80061f4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	6a3a      	ldr	r2, [r7, #32]
 80061fa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006200:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2200      	movs	r2, #0
 8006206:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006208:	88f8      	ldrh	r0, [r7, #6]
 800620a:	893a      	ldrh	r2, [r7, #8]
 800620c:	8979      	ldrh	r1, [r7, #10]
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	9301      	str	r3, [sp, #4]
 8006212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006214:	9300      	str	r3, [sp, #0]
 8006216:	4603      	mov	r3, r0
 8006218:	68f8      	ldr	r0, [r7, #12]
 800621a:	f000 f9d3 	bl	80065c4 <I2C_RequestMemoryWrite>
 800621e:	4603      	mov	r3, r0
 8006220:	2b00      	cmp	r3, #0
 8006222:	d005      	beq.n	8006230 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2200      	movs	r2, #0
 8006228:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	e0a9      	b.n	8006384 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006234:	b29b      	uxth	r3, r3
 8006236:	2bff      	cmp	r3, #255	@ 0xff
 8006238:	d90e      	bls.n	8006258 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	22ff      	movs	r2, #255	@ 0xff
 800623e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006244:	b2da      	uxtb	r2, r3
 8006246:	8979      	ldrh	r1, [r7, #10]
 8006248:	2300      	movs	r3, #0
 800624a:	9300      	str	r3, [sp, #0]
 800624c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006250:	68f8      	ldr	r0, [r7, #12]
 8006252:	f000 fc47 	bl	8006ae4 <I2C_TransferConfig>
 8006256:	e00f      	b.n	8006278 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800625c:	b29a      	uxth	r2, r3
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006266:	b2da      	uxtb	r2, r3
 8006268:	8979      	ldrh	r1, [r7, #10]
 800626a:	2300      	movs	r3, #0
 800626c:	9300      	str	r3, [sp, #0]
 800626e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006272:	68f8      	ldr	r0, [r7, #12]
 8006274:	f000 fc36 	bl	8006ae4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006278:	697a      	ldr	r2, [r7, #20]
 800627a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800627c:	68f8      	ldr	r0, [r7, #12]
 800627e:	f000 fac6 	bl	800680e <I2C_WaitOnTXISFlagUntilTimeout>
 8006282:	4603      	mov	r3, r0
 8006284:	2b00      	cmp	r3, #0
 8006286:	d001      	beq.n	800628c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	e07b      	b.n	8006384 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006290:	781a      	ldrb	r2, [r3, #0]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800629c:	1c5a      	adds	r2, r3, #1
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	3b01      	subs	r3, #1
 80062aa:	b29a      	uxth	r2, r3
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062b4:	3b01      	subs	r3, #1
 80062b6:	b29a      	uxth	r2, r3
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d034      	beq.n	8006330 <HAL_I2C_Mem_Write+0x1c8>
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d130      	bne.n	8006330 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	9300      	str	r3, [sp, #0]
 80062d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062d4:	2200      	movs	r2, #0
 80062d6:	2180      	movs	r1, #128	@ 0x80
 80062d8:	68f8      	ldr	r0, [r7, #12]
 80062da:	f000 fa3f 	bl	800675c <I2C_WaitOnFlagUntilTimeout>
 80062de:	4603      	mov	r3, r0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d001      	beq.n	80062e8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80062e4:	2301      	movs	r3, #1
 80062e6:	e04d      	b.n	8006384 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	2bff      	cmp	r3, #255	@ 0xff
 80062f0:	d90e      	bls.n	8006310 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	22ff      	movs	r2, #255	@ 0xff
 80062f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062fc:	b2da      	uxtb	r2, r3
 80062fe:	8979      	ldrh	r1, [r7, #10]
 8006300:	2300      	movs	r3, #0
 8006302:	9300      	str	r3, [sp, #0]
 8006304:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006308:	68f8      	ldr	r0, [r7, #12]
 800630a:	f000 fbeb 	bl	8006ae4 <I2C_TransferConfig>
 800630e:	e00f      	b.n	8006330 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006314:	b29a      	uxth	r2, r3
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800631e:	b2da      	uxtb	r2, r3
 8006320:	8979      	ldrh	r1, [r7, #10]
 8006322:	2300      	movs	r3, #0
 8006324:	9300      	str	r3, [sp, #0]
 8006326:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800632a:	68f8      	ldr	r0, [r7, #12]
 800632c:	f000 fbda 	bl	8006ae4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006334:	b29b      	uxth	r3, r3
 8006336:	2b00      	cmp	r3, #0
 8006338:	d19e      	bne.n	8006278 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800633a:	697a      	ldr	r2, [r7, #20]
 800633c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800633e:	68f8      	ldr	r0, [r7, #12]
 8006340:	f000 faac 	bl	800689c <I2C_WaitOnSTOPFlagUntilTimeout>
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d001      	beq.n	800634e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	e01a      	b.n	8006384 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	2220      	movs	r2, #32
 8006354:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	6859      	ldr	r1, [r3, #4]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681a      	ldr	r2, [r3, #0]
 8006360:	4b0a      	ldr	r3, [pc, #40]	@ (800638c <HAL_I2C_Mem_Write+0x224>)
 8006362:	400b      	ands	r3, r1
 8006364:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2220      	movs	r2, #32
 800636a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2200      	movs	r2, #0
 8006372:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2200      	movs	r2, #0
 800637a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800637e:	2300      	movs	r3, #0
 8006380:	e000      	b.n	8006384 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006382:	2302      	movs	r3, #2
  }
}
 8006384:	4618      	mov	r0, r3
 8006386:	3718      	adds	r7, #24
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}
 800638c:	fe00e800 	.word	0xfe00e800

08006390 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b088      	sub	sp, #32
 8006394:	af02      	add	r7, sp, #8
 8006396:	60f8      	str	r0, [r7, #12]
 8006398:	4608      	mov	r0, r1
 800639a:	4611      	mov	r1, r2
 800639c:	461a      	mov	r2, r3
 800639e:	4603      	mov	r3, r0
 80063a0:	817b      	strh	r3, [r7, #10]
 80063a2:	460b      	mov	r3, r1
 80063a4:	813b      	strh	r3, [r7, #8]
 80063a6:	4613      	mov	r3, r2
 80063a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	2b20      	cmp	r3, #32
 80063b4:	f040 80fd 	bne.w	80065b2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80063b8:	6a3b      	ldr	r3, [r7, #32]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d002      	beq.n	80063c4 <HAL_I2C_Mem_Read+0x34>
 80063be:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d105      	bne.n	80063d0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80063ca:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	e0f1      	b.n	80065b4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d101      	bne.n	80063de <HAL_I2C_Mem_Read+0x4e>
 80063da:	2302      	movs	r3, #2
 80063dc:	e0ea      	b.n	80065b4 <HAL_I2C_Mem_Read+0x224>
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2201      	movs	r2, #1
 80063e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80063e6:	f7fd f935 	bl	8003654 <HAL_GetTick>
 80063ea:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	9300      	str	r3, [sp, #0]
 80063f0:	2319      	movs	r3, #25
 80063f2:	2201      	movs	r2, #1
 80063f4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80063f8:	68f8      	ldr	r0, [r7, #12]
 80063fa:	f000 f9af 	bl	800675c <I2C_WaitOnFlagUntilTimeout>
 80063fe:	4603      	mov	r3, r0
 8006400:	2b00      	cmp	r3, #0
 8006402:	d001      	beq.n	8006408 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	e0d5      	b.n	80065b4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2222      	movs	r2, #34	@ 0x22
 800640c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2240      	movs	r2, #64	@ 0x40
 8006414:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2200      	movs	r2, #0
 800641c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	6a3a      	ldr	r2, [r7, #32]
 8006422:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006428:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2200      	movs	r2, #0
 800642e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006430:	88f8      	ldrh	r0, [r7, #6]
 8006432:	893a      	ldrh	r2, [r7, #8]
 8006434:	8979      	ldrh	r1, [r7, #10]
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	9301      	str	r3, [sp, #4]
 800643a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800643c:	9300      	str	r3, [sp, #0]
 800643e:	4603      	mov	r3, r0
 8006440:	68f8      	ldr	r0, [r7, #12]
 8006442:	f000 f913 	bl	800666c <I2C_RequestMemoryRead>
 8006446:	4603      	mov	r3, r0
 8006448:	2b00      	cmp	r3, #0
 800644a:	d005      	beq.n	8006458 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2200      	movs	r2, #0
 8006450:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006454:	2301      	movs	r3, #1
 8006456:	e0ad      	b.n	80065b4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800645c:	b29b      	uxth	r3, r3
 800645e:	2bff      	cmp	r3, #255	@ 0xff
 8006460:	d90e      	bls.n	8006480 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	22ff      	movs	r2, #255	@ 0xff
 8006466:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800646c:	b2da      	uxtb	r2, r3
 800646e:	8979      	ldrh	r1, [r7, #10]
 8006470:	4b52      	ldr	r3, [pc, #328]	@ (80065bc <HAL_I2C_Mem_Read+0x22c>)
 8006472:	9300      	str	r3, [sp, #0]
 8006474:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006478:	68f8      	ldr	r0, [r7, #12]
 800647a:	f000 fb33 	bl	8006ae4 <I2C_TransferConfig>
 800647e:	e00f      	b.n	80064a0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006484:	b29a      	uxth	r2, r3
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800648e:	b2da      	uxtb	r2, r3
 8006490:	8979      	ldrh	r1, [r7, #10]
 8006492:	4b4a      	ldr	r3, [pc, #296]	@ (80065bc <HAL_I2C_Mem_Read+0x22c>)
 8006494:	9300      	str	r3, [sp, #0]
 8006496:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800649a:	68f8      	ldr	r0, [r7, #12]
 800649c:	f000 fb22 	bl	8006ae4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	9300      	str	r3, [sp, #0]
 80064a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064a6:	2200      	movs	r2, #0
 80064a8:	2104      	movs	r1, #4
 80064aa:	68f8      	ldr	r0, [r7, #12]
 80064ac:	f000 f956 	bl	800675c <I2C_WaitOnFlagUntilTimeout>
 80064b0:	4603      	mov	r3, r0
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d001      	beq.n	80064ba <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	e07c      	b.n	80065b4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064c4:	b2d2      	uxtb	r2, r2
 80064c6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064cc:	1c5a      	adds	r2, r3, #1
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064d6:	3b01      	subs	r3, #1
 80064d8:	b29a      	uxth	r2, r3
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	3b01      	subs	r3, #1
 80064e6:	b29a      	uxth	r2, r3
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d034      	beq.n	8006560 <HAL_I2C_Mem_Read+0x1d0>
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d130      	bne.n	8006560 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	9300      	str	r3, [sp, #0]
 8006502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006504:	2200      	movs	r2, #0
 8006506:	2180      	movs	r1, #128	@ 0x80
 8006508:	68f8      	ldr	r0, [r7, #12]
 800650a:	f000 f927 	bl	800675c <I2C_WaitOnFlagUntilTimeout>
 800650e:	4603      	mov	r3, r0
 8006510:	2b00      	cmp	r3, #0
 8006512:	d001      	beq.n	8006518 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	e04d      	b.n	80065b4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800651c:	b29b      	uxth	r3, r3
 800651e:	2bff      	cmp	r3, #255	@ 0xff
 8006520:	d90e      	bls.n	8006540 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	22ff      	movs	r2, #255	@ 0xff
 8006526:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800652c:	b2da      	uxtb	r2, r3
 800652e:	8979      	ldrh	r1, [r7, #10]
 8006530:	2300      	movs	r3, #0
 8006532:	9300      	str	r3, [sp, #0]
 8006534:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006538:	68f8      	ldr	r0, [r7, #12]
 800653a:	f000 fad3 	bl	8006ae4 <I2C_TransferConfig>
 800653e:	e00f      	b.n	8006560 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006544:	b29a      	uxth	r2, r3
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800654e:	b2da      	uxtb	r2, r3
 8006550:	8979      	ldrh	r1, [r7, #10]
 8006552:	2300      	movs	r3, #0
 8006554:	9300      	str	r3, [sp, #0]
 8006556:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800655a:	68f8      	ldr	r0, [r7, #12]
 800655c:	f000 fac2 	bl	8006ae4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006564:	b29b      	uxth	r3, r3
 8006566:	2b00      	cmp	r3, #0
 8006568:	d19a      	bne.n	80064a0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800656a:	697a      	ldr	r2, [r7, #20]
 800656c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800656e:	68f8      	ldr	r0, [r7, #12]
 8006570:	f000 f994 	bl	800689c <I2C_WaitOnSTOPFlagUntilTimeout>
 8006574:	4603      	mov	r3, r0
 8006576:	2b00      	cmp	r3, #0
 8006578:	d001      	beq.n	800657e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	e01a      	b.n	80065b4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	2220      	movs	r2, #32
 8006584:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	6859      	ldr	r1, [r3, #4]
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	4b0b      	ldr	r3, [pc, #44]	@ (80065c0 <HAL_I2C_Mem_Read+0x230>)
 8006592:	400b      	ands	r3, r1
 8006594:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2220      	movs	r2, #32
 800659a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2200      	movs	r2, #0
 80065a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2200      	movs	r2, #0
 80065aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80065ae:	2300      	movs	r3, #0
 80065b0:	e000      	b.n	80065b4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80065b2:	2302      	movs	r3, #2
  }
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3718      	adds	r7, #24
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}
 80065bc:	80002400 	.word	0x80002400
 80065c0:	fe00e800 	.word	0xfe00e800

080065c4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b086      	sub	sp, #24
 80065c8:	af02      	add	r7, sp, #8
 80065ca:	60f8      	str	r0, [r7, #12]
 80065cc:	4608      	mov	r0, r1
 80065ce:	4611      	mov	r1, r2
 80065d0:	461a      	mov	r2, r3
 80065d2:	4603      	mov	r3, r0
 80065d4:	817b      	strh	r3, [r7, #10]
 80065d6:	460b      	mov	r3, r1
 80065d8:	813b      	strh	r3, [r7, #8]
 80065da:	4613      	mov	r3, r2
 80065dc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80065de:	88fb      	ldrh	r3, [r7, #6]
 80065e0:	b2da      	uxtb	r2, r3
 80065e2:	8979      	ldrh	r1, [r7, #10]
 80065e4:	4b20      	ldr	r3, [pc, #128]	@ (8006668 <I2C_RequestMemoryWrite+0xa4>)
 80065e6:	9300      	str	r3, [sp, #0]
 80065e8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80065ec:	68f8      	ldr	r0, [r7, #12]
 80065ee:	f000 fa79 	bl	8006ae4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80065f2:	69fa      	ldr	r2, [r7, #28]
 80065f4:	69b9      	ldr	r1, [r7, #24]
 80065f6:	68f8      	ldr	r0, [r7, #12]
 80065f8:	f000 f909 	bl	800680e <I2C_WaitOnTXISFlagUntilTimeout>
 80065fc:	4603      	mov	r3, r0
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d001      	beq.n	8006606 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	e02c      	b.n	8006660 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006606:	88fb      	ldrh	r3, [r7, #6]
 8006608:	2b01      	cmp	r3, #1
 800660a:	d105      	bne.n	8006618 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800660c:	893b      	ldrh	r3, [r7, #8]
 800660e:	b2da      	uxtb	r2, r3
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	629a      	str	r2, [r3, #40]	@ 0x28
 8006616:	e015      	b.n	8006644 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006618:	893b      	ldrh	r3, [r7, #8]
 800661a:	0a1b      	lsrs	r3, r3, #8
 800661c:	b29b      	uxth	r3, r3
 800661e:	b2da      	uxtb	r2, r3
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006626:	69fa      	ldr	r2, [r7, #28]
 8006628:	69b9      	ldr	r1, [r7, #24]
 800662a:	68f8      	ldr	r0, [r7, #12]
 800662c:	f000 f8ef 	bl	800680e <I2C_WaitOnTXISFlagUntilTimeout>
 8006630:	4603      	mov	r3, r0
 8006632:	2b00      	cmp	r3, #0
 8006634:	d001      	beq.n	800663a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	e012      	b.n	8006660 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800663a:	893b      	ldrh	r3, [r7, #8]
 800663c:	b2da      	uxtb	r2, r3
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006644:	69fb      	ldr	r3, [r7, #28]
 8006646:	9300      	str	r3, [sp, #0]
 8006648:	69bb      	ldr	r3, [r7, #24]
 800664a:	2200      	movs	r2, #0
 800664c:	2180      	movs	r1, #128	@ 0x80
 800664e:	68f8      	ldr	r0, [r7, #12]
 8006650:	f000 f884 	bl	800675c <I2C_WaitOnFlagUntilTimeout>
 8006654:	4603      	mov	r3, r0
 8006656:	2b00      	cmp	r3, #0
 8006658:	d001      	beq.n	800665e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	e000      	b.n	8006660 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800665e:	2300      	movs	r3, #0
}
 8006660:	4618      	mov	r0, r3
 8006662:	3710      	adds	r7, #16
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}
 8006668:	80002000 	.word	0x80002000

0800666c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b086      	sub	sp, #24
 8006670:	af02      	add	r7, sp, #8
 8006672:	60f8      	str	r0, [r7, #12]
 8006674:	4608      	mov	r0, r1
 8006676:	4611      	mov	r1, r2
 8006678:	461a      	mov	r2, r3
 800667a:	4603      	mov	r3, r0
 800667c:	817b      	strh	r3, [r7, #10]
 800667e:	460b      	mov	r3, r1
 8006680:	813b      	strh	r3, [r7, #8]
 8006682:	4613      	mov	r3, r2
 8006684:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006686:	88fb      	ldrh	r3, [r7, #6]
 8006688:	b2da      	uxtb	r2, r3
 800668a:	8979      	ldrh	r1, [r7, #10]
 800668c:	4b20      	ldr	r3, [pc, #128]	@ (8006710 <I2C_RequestMemoryRead+0xa4>)
 800668e:	9300      	str	r3, [sp, #0]
 8006690:	2300      	movs	r3, #0
 8006692:	68f8      	ldr	r0, [r7, #12]
 8006694:	f000 fa26 	bl	8006ae4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006698:	69fa      	ldr	r2, [r7, #28]
 800669a:	69b9      	ldr	r1, [r7, #24]
 800669c:	68f8      	ldr	r0, [r7, #12]
 800669e:	f000 f8b6 	bl	800680e <I2C_WaitOnTXISFlagUntilTimeout>
 80066a2:	4603      	mov	r3, r0
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d001      	beq.n	80066ac <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	e02c      	b.n	8006706 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80066ac:	88fb      	ldrh	r3, [r7, #6]
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d105      	bne.n	80066be <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80066b2:	893b      	ldrh	r3, [r7, #8]
 80066b4:	b2da      	uxtb	r2, r3
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	629a      	str	r2, [r3, #40]	@ 0x28
 80066bc:	e015      	b.n	80066ea <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80066be:	893b      	ldrh	r3, [r7, #8]
 80066c0:	0a1b      	lsrs	r3, r3, #8
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	b2da      	uxtb	r2, r3
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066cc:	69fa      	ldr	r2, [r7, #28]
 80066ce:	69b9      	ldr	r1, [r7, #24]
 80066d0:	68f8      	ldr	r0, [r7, #12]
 80066d2:	f000 f89c 	bl	800680e <I2C_WaitOnTXISFlagUntilTimeout>
 80066d6:	4603      	mov	r3, r0
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d001      	beq.n	80066e0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	e012      	b.n	8006706 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80066e0:	893b      	ldrh	r3, [r7, #8]
 80066e2:	b2da      	uxtb	r2, r3
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80066ea:	69fb      	ldr	r3, [r7, #28]
 80066ec:	9300      	str	r3, [sp, #0]
 80066ee:	69bb      	ldr	r3, [r7, #24]
 80066f0:	2200      	movs	r2, #0
 80066f2:	2140      	movs	r1, #64	@ 0x40
 80066f4:	68f8      	ldr	r0, [r7, #12]
 80066f6:	f000 f831 	bl	800675c <I2C_WaitOnFlagUntilTimeout>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d001      	beq.n	8006704 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	e000      	b.n	8006706 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006704:	2300      	movs	r3, #0
}
 8006706:	4618      	mov	r0, r3
 8006708:	3710      	adds	r7, #16
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
 800670e:	bf00      	nop
 8006710:	80002000 	.word	0x80002000

08006714 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	699b      	ldr	r3, [r3, #24]
 8006722:	f003 0302 	and.w	r3, r3, #2
 8006726:	2b02      	cmp	r3, #2
 8006728:	d103      	bne.n	8006732 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	2200      	movs	r2, #0
 8006730:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	699b      	ldr	r3, [r3, #24]
 8006738:	f003 0301 	and.w	r3, r3, #1
 800673c:	2b01      	cmp	r3, #1
 800673e:	d007      	beq.n	8006750 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	699a      	ldr	r2, [r3, #24]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f042 0201 	orr.w	r2, r2, #1
 800674e:	619a      	str	r2, [r3, #24]
  }
}
 8006750:	bf00      	nop
 8006752:	370c      	adds	r7, #12
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr

0800675c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b084      	sub	sp, #16
 8006760:	af00      	add	r7, sp, #0
 8006762:	60f8      	str	r0, [r7, #12]
 8006764:	60b9      	str	r1, [r7, #8]
 8006766:	603b      	str	r3, [r7, #0]
 8006768:	4613      	mov	r3, r2
 800676a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800676c:	e03b      	b.n	80067e6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800676e:	69ba      	ldr	r2, [r7, #24]
 8006770:	6839      	ldr	r1, [r7, #0]
 8006772:	68f8      	ldr	r0, [r7, #12]
 8006774:	f000 f8d6 	bl	8006924 <I2C_IsErrorOccurred>
 8006778:	4603      	mov	r3, r0
 800677a:	2b00      	cmp	r3, #0
 800677c:	d001      	beq.n	8006782 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	e041      	b.n	8006806 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006788:	d02d      	beq.n	80067e6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800678a:	f7fc ff63 	bl	8003654 <HAL_GetTick>
 800678e:	4602      	mov	r2, r0
 8006790:	69bb      	ldr	r3, [r7, #24]
 8006792:	1ad3      	subs	r3, r2, r3
 8006794:	683a      	ldr	r2, [r7, #0]
 8006796:	429a      	cmp	r2, r3
 8006798:	d302      	bcc.n	80067a0 <I2C_WaitOnFlagUntilTimeout+0x44>
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d122      	bne.n	80067e6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	699a      	ldr	r2, [r3, #24]
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	4013      	ands	r3, r2
 80067aa:	68ba      	ldr	r2, [r7, #8]
 80067ac:	429a      	cmp	r2, r3
 80067ae:	bf0c      	ite	eq
 80067b0:	2301      	moveq	r3, #1
 80067b2:	2300      	movne	r3, #0
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	461a      	mov	r2, r3
 80067b8:	79fb      	ldrb	r3, [r7, #7]
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d113      	bne.n	80067e6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067c2:	f043 0220 	orr.w	r2, r3, #32
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2220      	movs	r2, #32
 80067ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2200      	movs	r2, #0
 80067d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2200      	movs	r2, #0
 80067de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	e00f      	b.n	8006806 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	699a      	ldr	r2, [r3, #24]
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	4013      	ands	r3, r2
 80067f0:	68ba      	ldr	r2, [r7, #8]
 80067f2:	429a      	cmp	r2, r3
 80067f4:	bf0c      	ite	eq
 80067f6:	2301      	moveq	r3, #1
 80067f8:	2300      	movne	r3, #0
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	461a      	mov	r2, r3
 80067fe:	79fb      	ldrb	r3, [r7, #7]
 8006800:	429a      	cmp	r2, r3
 8006802:	d0b4      	beq.n	800676e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006804:	2300      	movs	r3, #0
}
 8006806:	4618      	mov	r0, r3
 8006808:	3710      	adds	r7, #16
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}

0800680e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800680e:	b580      	push	{r7, lr}
 8006810:	b084      	sub	sp, #16
 8006812:	af00      	add	r7, sp, #0
 8006814:	60f8      	str	r0, [r7, #12]
 8006816:	60b9      	str	r1, [r7, #8]
 8006818:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800681a:	e033      	b.n	8006884 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800681c:	687a      	ldr	r2, [r7, #4]
 800681e:	68b9      	ldr	r1, [r7, #8]
 8006820:	68f8      	ldr	r0, [r7, #12]
 8006822:	f000 f87f 	bl	8006924 <I2C_IsErrorOccurred>
 8006826:	4603      	mov	r3, r0
 8006828:	2b00      	cmp	r3, #0
 800682a:	d001      	beq.n	8006830 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800682c:	2301      	movs	r3, #1
 800682e:	e031      	b.n	8006894 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006836:	d025      	beq.n	8006884 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006838:	f7fc ff0c 	bl	8003654 <HAL_GetTick>
 800683c:	4602      	mov	r2, r0
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	1ad3      	subs	r3, r2, r3
 8006842:	68ba      	ldr	r2, [r7, #8]
 8006844:	429a      	cmp	r2, r3
 8006846:	d302      	bcc.n	800684e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d11a      	bne.n	8006884 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	699b      	ldr	r3, [r3, #24]
 8006854:	f003 0302 	and.w	r3, r3, #2
 8006858:	2b02      	cmp	r3, #2
 800685a:	d013      	beq.n	8006884 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006860:	f043 0220 	orr.w	r2, r3, #32
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2220      	movs	r2, #32
 800686c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2200      	movs	r2, #0
 8006874:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2200      	movs	r2, #0
 800687c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006880:	2301      	movs	r3, #1
 8006882:	e007      	b.n	8006894 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	699b      	ldr	r3, [r3, #24]
 800688a:	f003 0302 	and.w	r3, r3, #2
 800688e:	2b02      	cmp	r3, #2
 8006890:	d1c4      	bne.n	800681c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006892:	2300      	movs	r3, #0
}
 8006894:	4618      	mov	r0, r3
 8006896:	3710      	adds	r7, #16
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}

0800689c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b084      	sub	sp, #16
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	60f8      	str	r0, [r7, #12]
 80068a4:	60b9      	str	r1, [r7, #8]
 80068a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80068a8:	e02f      	b.n	800690a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	68b9      	ldr	r1, [r7, #8]
 80068ae:	68f8      	ldr	r0, [r7, #12]
 80068b0:	f000 f838 	bl	8006924 <I2C_IsErrorOccurred>
 80068b4:	4603      	mov	r3, r0
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d001      	beq.n	80068be <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80068ba:	2301      	movs	r3, #1
 80068bc:	e02d      	b.n	800691a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068be:	f7fc fec9 	bl	8003654 <HAL_GetTick>
 80068c2:	4602      	mov	r2, r0
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	1ad3      	subs	r3, r2, r3
 80068c8:	68ba      	ldr	r2, [r7, #8]
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d302      	bcc.n	80068d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d11a      	bne.n	800690a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	699b      	ldr	r3, [r3, #24]
 80068da:	f003 0320 	and.w	r3, r3, #32
 80068de:	2b20      	cmp	r3, #32
 80068e0:	d013      	beq.n	800690a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068e6:	f043 0220 	orr.w	r2, r3, #32
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2220      	movs	r2, #32
 80068f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2200      	movs	r2, #0
 80068fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2200      	movs	r2, #0
 8006902:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	e007      	b.n	800691a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	699b      	ldr	r3, [r3, #24]
 8006910:	f003 0320 	and.w	r3, r3, #32
 8006914:	2b20      	cmp	r3, #32
 8006916:	d1c8      	bne.n	80068aa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006918:	2300      	movs	r3, #0
}
 800691a:	4618      	mov	r0, r3
 800691c:	3710      	adds	r7, #16
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
	...

08006924 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b08a      	sub	sp, #40	@ 0x28
 8006928:	af00      	add	r7, sp, #0
 800692a:	60f8      	str	r0, [r7, #12]
 800692c:	60b9      	str	r1, [r7, #8]
 800692e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006930:	2300      	movs	r3, #0
 8006932:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	699b      	ldr	r3, [r3, #24]
 800693c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800693e:	2300      	movs	r3, #0
 8006940:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006946:	69bb      	ldr	r3, [r7, #24]
 8006948:	f003 0310 	and.w	r3, r3, #16
 800694c:	2b00      	cmp	r3, #0
 800694e:	d068      	beq.n	8006a22 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	2210      	movs	r2, #16
 8006956:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006958:	e049      	b.n	80069ee <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006960:	d045      	beq.n	80069ee <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006962:	f7fc fe77 	bl	8003654 <HAL_GetTick>
 8006966:	4602      	mov	r2, r0
 8006968:	69fb      	ldr	r3, [r7, #28]
 800696a:	1ad3      	subs	r3, r2, r3
 800696c:	68ba      	ldr	r2, [r7, #8]
 800696e:	429a      	cmp	r2, r3
 8006970:	d302      	bcc.n	8006978 <I2C_IsErrorOccurred+0x54>
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d13a      	bne.n	80069ee <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006982:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800698a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	699b      	ldr	r3, [r3, #24]
 8006992:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006996:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800699a:	d121      	bne.n	80069e0 <I2C_IsErrorOccurred+0xbc>
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80069a2:	d01d      	beq.n	80069e0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80069a4:	7cfb      	ldrb	r3, [r7, #19]
 80069a6:	2b20      	cmp	r3, #32
 80069a8:	d01a      	beq.n	80069e0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	685a      	ldr	r2, [r3, #4]
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80069b8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80069ba:	f7fc fe4b 	bl	8003654 <HAL_GetTick>
 80069be:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80069c0:	e00e      	b.n	80069e0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80069c2:	f7fc fe47 	bl	8003654 <HAL_GetTick>
 80069c6:	4602      	mov	r2, r0
 80069c8:	69fb      	ldr	r3, [r7, #28]
 80069ca:	1ad3      	subs	r3, r2, r3
 80069cc:	2b19      	cmp	r3, #25
 80069ce:	d907      	bls.n	80069e0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80069d0:	6a3b      	ldr	r3, [r7, #32]
 80069d2:	f043 0320 	orr.w	r3, r3, #32
 80069d6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80069de:	e006      	b.n	80069ee <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	699b      	ldr	r3, [r3, #24]
 80069e6:	f003 0320 	and.w	r3, r3, #32
 80069ea:	2b20      	cmp	r3, #32
 80069ec:	d1e9      	bne.n	80069c2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	699b      	ldr	r3, [r3, #24]
 80069f4:	f003 0320 	and.w	r3, r3, #32
 80069f8:	2b20      	cmp	r3, #32
 80069fa:	d003      	beq.n	8006a04 <I2C_IsErrorOccurred+0xe0>
 80069fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d0aa      	beq.n	800695a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006a04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d103      	bne.n	8006a14 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	2220      	movs	r2, #32
 8006a12:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006a14:	6a3b      	ldr	r3, [r7, #32]
 8006a16:	f043 0304 	orr.w	r3, r3, #4
 8006a1a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	699b      	ldr	r3, [r3, #24]
 8006a28:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006a2a:	69bb      	ldr	r3, [r7, #24]
 8006a2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d00b      	beq.n	8006a4c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006a34:	6a3b      	ldr	r3, [r7, #32]
 8006a36:	f043 0301 	orr.w	r3, r3, #1
 8006a3a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006a44:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006a46:	2301      	movs	r3, #1
 8006a48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006a4c:	69bb      	ldr	r3, [r7, #24]
 8006a4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d00b      	beq.n	8006a6e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006a56:	6a3b      	ldr	r3, [r7, #32]
 8006a58:	f043 0308 	orr.w	r3, r3, #8
 8006a5c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006a66:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006a6e:	69bb      	ldr	r3, [r7, #24]
 8006a70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d00b      	beq.n	8006a90 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006a78:	6a3b      	ldr	r3, [r7, #32]
 8006a7a:	f043 0302 	orr.w	r3, r3, #2
 8006a7e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a88:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006a90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d01c      	beq.n	8006ad2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006a98:	68f8      	ldr	r0, [r7, #12]
 8006a9a:	f7ff fe3b 	bl	8006714 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	6859      	ldr	r1, [r3, #4]
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	4b0d      	ldr	r3, [pc, #52]	@ (8006ae0 <I2C_IsErrorOccurred+0x1bc>)
 8006aaa:	400b      	ands	r3, r1
 8006aac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006ab2:	6a3b      	ldr	r3, [r7, #32]
 8006ab4:	431a      	orrs	r2, r3
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2220      	movs	r2, #32
 8006abe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2200      	movs	r2, #0
 8006ace:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8006ad2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3728      	adds	r7, #40	@ 0x28
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}
 8006ade:	bf00      	nop
 8006ae0:	fe00e800 	.word	0xfe00e800

08006ae4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b087      	sub	sp, #28
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	60f8      	str	r0, [r7, #12]
 8006aec:	607b      	str	r3, [r7, #4]
 8006aee:	460b      	mov	r3, r1
 8006af0:	817b      	strh	r3, [r7, #10]
 8006af2:	4613      	mov	r3, r2
 8006af4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006af6:	897b      	ldrh	r3, [r7, #10]
 8006af8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006afc:	7a7b      	ldrb	r3, [r7, #9]
 8006afe:	041b      	lsls	r3, r3, #16
 8006b00:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b04:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b0a:	6a3b      	ldr	r3, [r7, #32]
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006b12:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	685a      	ldr	r2, [r3, #4]
 8006b1a:	6a3b      	ldr	r3, [r7, #32]
 8006b1c:	0d5b      	lsrs	r3, r3, #21
 8006b1e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006b22:	4b08      	ldr	r3, [pc, #32]	@ (8006b44 <I2C_TransferConfig+0x60>)
 8006b24:	430b      	orrs	r3, r1
 8006b26:	43db      	mvns	r3, r3
 8006b28:	ea02 0103 	and.w	r1, r2, r3
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	697a      	ldr	r2, [r7, #20]
 8006b32:	430a      	orrs	r2, r1
 8006b34:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006b36:	bf00      	nop
 8006b38:	371c      	adds	r7, #28
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b40:	4770      	bx	lr
 8006b42:	bf00      	nop
 8006b44:	03ff63ff 	.word	0x03ff63ff

08006b48 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b083      	sub	sp, #12
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	2b20      	cmp	r3, #32
 8006b5c:	d138      	bne.n	8006bd0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d101      	bne.n	8006b6c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006b68:	2302      	movs	r3, #2
 8006b6a:	e032      	b.n	8006bd2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2224      	movs	r2, #36	@ 0x24
 8006b78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	681a      	ldr	r2, [r3, #0]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f022 0201 	bic.w	r2, r2, #1
 8006b8a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006b9a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	6819      	ldr	r1, [r3, #0]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	683a      	ldr	r2, [r7, #0]
 8006ba8:	430a      	orrs	r2, r1
 8006baa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f042 0201 	orr.w	r2, r2, #1
 8006bba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2220      	movs	r2, #32
 8006bc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	e000      	b.n	8006bd2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006bd0:	2302      	movs	r3, #2
  }
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	370c      	adds	r7, #12
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bdc:	4770      	bx	lr

08006bde <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006bde:	b480      	push	{r7}
 8006be0:	b085      	sub	sp, #20
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	6078      	str	r0, [r7, #4]
 8006be6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bee:	b2db      	uxtb	r3, r3
 8006bf0:	2b20      	cmp	r3, #32
 8006bf2:	d139      	bne.n	8006c68 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d101      	bne.n	8006c02 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006bfe:	2302      	movs	r3, #2
 8006c00:	e033      	b.n	8006c6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2201      	movs	r2, #1
 8006c06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2224      	movs	r2, #36	@ 0x24
 8006c0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f022 0201 	bic.w	r2, r2, #1
 8006c20:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006c30:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	021b      	lsls	r3, r3, #8
 8006c36:	68fa      	ldr	r2, [r7, #12]
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	68fa      	ldr	r2, [r7, #12]
 8006c42:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f042 0201 	orr.w	r2, r2, #1
 8006c52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2220      	movs	r2, #32
 8006c58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006c64:	2300      	movs	r3, #0
 8006c66:	e000      	b.n	8006c6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006c68:	2302      	movs	r3, #2
  }
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3714      	adds	r7, #20
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr

08006c76 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8006c76:	b580      	push	{r7, lr}
 8006c78:	b084      	sub	sp, #16
 8006c7a:	af00      	add	r7, sp, #0
 8006c7c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006c7e:	f7fc fce9 	bl	8003654 <HAL_GetTick>
 8006c82:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d101      	bne.n	8006c8e <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e03b      	b.n	8006d06 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2200      	movs	r2, #0
 8006c92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2202      	movs	r2, #2
 8006c9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	68da      	ldr	r2, [r3, #12]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f022 0201 	bic.w	r2, r2, #1
 8006cac:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8006cae:	e00f      	b.n	8006cd0 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8006cb0:	f7fc fcd0 	bl	8003654 <HAL_GetTick>
 8006cb4:	4602      	mov	r2, r0
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	1ad3      	subs	r3, r2, r3
 8006cba:	2b05      	cmp	r3, #5
 8006cbc:	d908      	bls.n	8006cd0 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2240      	movs	r2, #64	@ 0x40
 8006cc2:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2203      	movs	r2, #3
 8006cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      return HAL_ERROR;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	e01a      	b.n	8006d06 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	68db      	ldr	r3, [r3, #12]
 8006cd6:	f003 0301 	and.w	r3, r3, #1
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d1e8      	bne.n	8006cb0 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 fa8d 	bl	80071fe <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2200      	movs	r2, #0
 8006cee:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2201      	movs	r2, #1
 8006d00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006d04:	2300      	movs	r3, #0
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3710      	adds	r7, #16
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}
	...

08006d10 <HAL_MDMA_RegisterCallback>:
  * @param  CallbackID:           User Callback identifier
  * @param  pCallback:            pointer to callbacsk function.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_RegisterCallback(MDMA_HandleTypeDef *hmdma, HAL_MDMA_CallbackIDTypeDef CallbackID, void (* pCallback)(MDMA_HandleTypeDef *_hmdma))
{
 8006d10:	b480      	push	{r7}
 8006d12:	b087      	sub	sp, #28
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	60f8      	str	r0, [r7, #12]
 8006d18:	460b      	mov	r3, r1
 8006d1a:	607a      	str	r2, [r7, #4]
 8006d1c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d101      	bne.n	8006d2c <HAL_MDMA_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	e044      	b.n	8006db6 <HAL_MDMA_RegisterCallback+0xa6>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d32:	2b01      	cmp	r3, #1
 8006d34:	d101      	bne.n	8006d3a <HAL_MDMA_RegisterCallback+0x2a>
 8006d36:	2302      	movs	r3, #2
 8006d38:	e03d      	b.n	8006db6 <HAL_MDMA_RegisterCallback+0xa6>
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d48:	b2db      	uxtb	r3, r3
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	d12a      	bne.n	8006da4 <HAL_MDMA_RegisterCallback+0x94>
  {
    switch (CallbackID)
 8006d4e:	7afb      	ldrb	r3, [r7, #11]
 8006d50:	2b05      	cmp	r3, #5
 8006d52:	d82a      	bhi.n	8006daa <HAL_MDMA_RegisterCallback+0x9a>
 8006d54:	a201      	add	r2, pc, #4	@ (adr r2, 8006d5c <HAL_MDMA_RegisterCallback+0x4c>)
 8006d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d5a:	bf00      	nop
 8006d5c:	08006d75 	.word	0x08006d75
 8006d60:	08006d7d 	.word	0x08006d7d
 8006d64:	08006d85 	.word	0x08006d85
 8006d68:	08006d8d 	.word	0x08006d8d
 8006d6c:	08006d95 	.word	0x08006d95
 8006d70:	08006d9d 	.word	0x08006d9d
    {
    case  HAL_MDMA_XFER_CPLT_CB_ID:
      hmdma->XferCpltCallback = pCallback;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	645a      	str	r2, [r3, #68]	@ 0x44
      break;
 8006d7a:	e017      	b.n	8006dac <HAL_MDMA_RegisterCallback+0x9c>

    case  HAL_MDMA_XFER_BUFFERCPLT_CB_ID:
      hmdma->XferBufferCpltCallback = pCallback;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	687a      	ldr	r2, [r7, #4]
 8006d80:	649a      	str	r2, [r3, #72]	@ 0x48
      break;
 8006d82:	e013      	b.n	8006dac <HAL_MDMA_RegisterCallback+0x9c>

    case  HAL_MDMA_XFER_BLOCKCPLT_CB_ID:
      hmdma->XferBlockCpltCallback = pCallback;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	64da      	str	r2, [r3, #76]	@ 0x4c
      break;
 8006d8a:	e00f      	b.n	8006dac <HAL_MDMA_RegisterCallback+0x9c>

    case  HAL_MDMA_XFER_REPBLOCKCPLT_CB_ID:
      hmdma->XferRepeatBlockCpltCallback = pCallback;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006d92:	e00b      	b.n	8006dac <HAL_MDMA_RegisterCallback+0x9c>

    case  HAL_MDMA_XFER_ERROR_CB_ID:
      hmdma->XferErrorCallback = pCallback;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	687a      	ldr	r2, [r7, #4]
 8006d98:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006d9a:	e007      	b.n	8006dac <HAL_MDMA_RegisterCallback+0x9c>

    case  HAL_MDMA_XFER_ABORT_CB_ID:
      hmdma->XferAbortCallback = pCallback;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8006da2:	e003      	b.n	8006dac <HAL_MDMA_RegisterCallback+0x9c>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8006da4:	2301      	movs	r3, #1
 8006da6:	75fb      	strb	r3, [r7, #23]
 8006da8:	e000      	b.n	8006dac <HAL_MDMA_RegisterCallback+0x9c>
      break;
 8006daa:	bf00      	nop
  }

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2200      	movs	r2, #0
 8006db0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006db4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	371c      	adds	r7, #28
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr
 8006dc2:	bf00      	nop

08006dc4 <HAL_MDMA_LinkedList_CreateNode>:
  * @param  pNodeConfig: Pointer to a MDMA_LinkNodeConfTypeDef structure that contains
  *               the configuration information for the specified MDMA Linked List Node.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_LinkedList_CreateNode(MDMA_LinkNodeTypeDef *pNode, MDMA_LinkNodeConfTypeDef *pNodeConfig)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b085      	sub	sp, #20
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	6039      	str	r1, [r7, #0]
  uint32_t addressMask;
  uint32_t blockoffset;

  /* Check the MDMA peripheral state */
  if((pNode == NULL) || (pNodeConfig == NULL))
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d002      	beq.n	8006dda <HAL_MDMA_LinkedList_CreateNode+0x16>
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d101      	bne.n	8006dde <HAL_MDMA_LinkedList_CreateNode+0x1a>
  {
    return HAL_ERROR;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	e0c8      	b.n	8006f70 <HAL_MDMA_LinkedList_CreateNode+0x1ac>
  assert_param(IS_MDMA_TRANSFER_LENGTH(pNodeConfig->BlockDataLength));
  assert_param(IS_MDMA_BLOCK_COUNT(pNodeConfig->BlockCount));


  /* Configure next Link node Address Register to zero */
  pNode->CLAR =  0;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	615a      	str	r2, [r3, #20]

  /* Configure the Link Node registers*/
  pNode->CTBR   = 0;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2200      	movs	r2, #0
 8006de8:	619a      	str	r2, [r3, #24]
  pNode->CMAR   = 0;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2200      	movs	r2, #0
 8006dee:	621a      	str	r2, [r3, #32]
  pNode->CMDR   = 0;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	625a      	str	r2, [r3, #36]	@ 0x24
  pNode->Reserved = 0;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	61da      	str	r2, [r3, #28]

  /* Write new CTCR Register value */
  pNode->CTCR =  pNodeConfig->Init.SourceInc | pNodeConfig->Init.DestinationInc | \
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	691a      	ldr	r2, [r3, #16]
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	695b      	ldr	r3, [r3, #20]
 8006e04:	431a      	orrs	r2, r3
    pNodeConfig->Init.SourceDataSize | pNodeConfig->Init.DestDataSize           | \
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	699b      	ldr	r3, [r3, #24]
  pNode->CTCR =  pNodeConfig->Init.SourceInc | pNodeConfig->Init.DestinationInc | \
 8006e0a:	431a      	orrs	r2, r3
    pNodeConfig->Init.SourceDataSize | pNodeConfig->Init.DestDataSize           | \
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	69db      	ldr	r3, [r3, #28]
 8006e10:	431a      	orrs	r2, r3
      pNodeConfig->Init.DataAlignment| pNodeConfig->Init.SourceBurst            | \
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	6a1b      	ldr	r3, [r3, #32]
    pNodeConfig->Init.SourceDataSize | pNodeConfig->Init.DestDataSize           | \
 8006e16:	431a      	orrs	r2, r3
      pNodeConfig->Init.DataAlignment| pNodeConfig->Init.SourceBurst            | \
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e1c:	431a      	orrs	r2, r3
        pNodeConfig->Init.DestBurst                                             | \
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      pNodeConfig->Init.DataAlignment| pNodeConfig->Init.SourceBurst            | \
 8006e22:	431a      	orrs	r2, r3
          ((pNodeConfig->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e28:	3b01      	subs	r3, #1
 8006e2a:	049b      	lsls	r3, r3, #18
        pNodeConfig->Init.DestBurst                                             | \
 8006e2c:	431a      	orrs	r2, r3
            pNodeConfig->Init.TransferTriggerMode;
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	685b      	ldr	r3, [r3, #4]
          ((pNodeConfig->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8006e32:	431a      	orrs	r2, r3
  pNode->CTCR =  pNodeConfig->Init.SourceInc | pNodeConfig->Init.DestinationInc | \
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	601a      	str	r2, [r3, #0]

  /* If SW request set the CTCR register to SW Request Mode*/
  if(pNodeConfig->Init.Request == MDMA_REQUEST_SW)
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e40:	d105      	bne.n	8006e4e <HAL_MDMA_LinkedList_CreateNode+0x8a>
  {
    pNode->CTCR |= MDMA_CTCR_SWRM;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	601a      	str	r2, [r3, #0]
  -If the request is done by SW : BWM could be set to 1 or 0.
  -If the request is done by a peripheral :
     If mask address not set (0) => BWM must be set to 0
     If mask address set (different than 0) => BWM could be set to 1 or 0
  */
  if((pNodeConfig->Init.Request == MDMA_REQUEST_SW) || (pNodeConfig->PostRequestMaskAddress != 0U))
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e56:	d003      	beq.n	8006e60 <HAL_MDMA_LinkedList_CreateNode+0x9c>
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d005      	beq.n	8006e6c <HAL_MDMA_LinkedList_CreateNode+0xa8>
  {
    pNode->CTCR |=  MDMA_CTCR_BWM;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	601a      	str	r2, [r3, #0]
  }

  /* Set the new CBNDTR Register value */
  pNode->CBNDTR = ((pNodeConfig->BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC;
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e70:	3b01      	subs	r3, #1
 8006e72:	051a      	lsls	r2, r3, #20
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	605a      	str	r2, [r3, #4]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(pNodeConfig->Init.SourceBlockAddressOffset < 0)
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	da0e      	bge.n	8006e9e <HAL_MDMA_LinkedList_CreateNode+0xda>
  {
    pNode->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	605a      	str	r2, [r3, #4]
    /*write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- pNodeConfig->Init.SourceBlockAddressOffset);
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e90:	425b      	negs	r3, r3
 8006e92:	60fb      	str	r3, [r7, #12]
    pNode->CBRUR = blockoffset & 0x0000FFFFU;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	b29a      	uxth	r2, r3
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	611a      	str	r2, [r3, #16]
 8006e9c:	e004      	b.n	8006ea8 <HAL_MDMA_LinkedList_CreateNode+0xe4>
  }
  else
  {
    /*write new CBRUR Register value : source repeat block offset */
    pNode->CBRUR = (((uint32_t) pNodeConfig->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ea2:	b29a      	uxth	r2, r3
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	611a      	str	r2, [r3, #16]
  }

  /* if block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(pNodeConfig->Init.DestBlockAddressOffset < 0)
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	da11      	bge.n	8006ed4 <HAL_MDMA_LinkedList_CreateNode+0x110>
  {
    pNode->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	605a      	str	r2, [r3, #4]
    /*write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- pNodeConfig->Init.DestBlockAddressOffset);
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ec0:	425b      	negs	r3, r3
 8006ec2:	60fb      	str	r3, [r7, #12]
    pNode->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	691a      	ldr	r2, [r3, #16]
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	041b      	lsls	r3, r3, #16
 8006ecc:	431a      	orrs	r2, r3
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	611a      	str	r2, [r3, #16]
 8006ed2:	e007      	b.n	8006ee4 <HAL_MDMA_LinkedList_CreateNode+0x120>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    pNode->CBRUR |= ((((uint32_t)pNodeConfig->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	691a      	ldr	r2, [r3, #16]
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006edc:	041b      	lsls	r3, r3, #16
 8006ede:	431a      	orrs	r2, r3
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	611a      	str	r2, [r3, #16]
  }

  /* Configure MDMA Link Node data length */
  pNode->CBNDTR |=  pNodeConfig->BlockDataLength;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	685a      	ldr	r2, [r3, #4]
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eec:	431a      	orrs	r2, r3
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	605a      	str	r2, [r3, #4]

  /* Configure MDMA Link Node destination address */
  pNode->CDAR = pNodeConfig->DstAddress;
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	60da      	str	r2, [r3, #12]

  /* Configure MDMA Link Node Source address */
  pNode->CSAR = pNodeConfig->SrcAddress;
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	609a      	str	r2, [r3, #8]

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData,  */
  if(pNodeConfig->Init.Request != MDMA_REQUEST_SW)
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f0a:	d00c      	beq.n	8006f26 <HAL_MDMA_LinkedList_CreateNode+0x162>
  {
    /* Set the HW request in CTBR register  */
    pNode->CTBR = pNodeConfig->Init.Request & MDMA_CTBR_TSEL;
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	b2da      	uxtb	r2, r3
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	619a      	str	r2, [r3, #24]
    /* Set the HW request clear Mask and Data */
    pNode->CMAR = pNodeConfig->PostRequestMaskAddress;
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	621a      	str	r2, [r3, #32]
    pNode->CMDR = pNodeConfig->PostRequestMaskData;
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  addressMask = pNodeConfig->SrcAddress & 0xFF000000U;
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f2a:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8006f2e:	60bb      	str	r3, [r7, #8]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f36:	d002      	beq.n	8006f3e <HAL_MDMA_LinkedList_CreateNode+0x17a>
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d105      	bne.n	8006f4a <HAL_MDMA_LinkedList_CreateNode+0x186>
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    pNode->CTBR |= MDMA_CTBR_SBUS;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	699b      	ldr	r3, [r3, #24]
 8006f42:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	619a      	str	r2, [r3, #24]
  }

  addressMask = pNodeConfig->DstAddress & 0xFF000000U;
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f4e:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8006f52:	60bb      	str	r3, [r7, #8]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f5a:	d002      	beq.n	8006f62 <HAL_MDMA_LinkedList_CreateNode+0x19e>
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d105      	bne.n	8006f6e <HAL_MDMA_LinkedList_CreateNode+0x1aa>
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    pNode->CTBR |= MDMA_CTBR_DBUS;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	699b      	ldr	r3, [r3, #24]
 8006f66:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	619a      	str	r2, [r3, #24]
  }

  return HAL_OK;
 8006f6e:	2300      	movs	r3, #0
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3714      	adds	r7, #20
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr

08006f7c <HAL_MDMA_LinkedList_AddNode>:
  *                    at the end of the list
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_LinkedList_AddNode(MDMA_HandleTypeDef *hmdma, MDMA_LinkNodeTypeDef *pNewNode, const MDMA_LinkNodeTypeDef *pPrevNode)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b089      	sub	sp, #36	@ 0x24
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	60f8      	str	r0, [r7, #12]
 8006f84:	60b9      	str	r1, [r7, #8]
 8006f86:	607a      	str	r2, [r7, #4]
  MDMA_LinkNodeTypeDef *pNode;
  uint32_t counter = 0, nodeInserted = 0;
 8006f88:	2300      	movs	r3, #0
 8006f8a:	61bb      	str	r3, [r7, #24]
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f90:	2300      	movs	r3, #0
 8006f92:	74fb      	strb	r3, [r7, #19]

  /* Check the MDMA peripheral handle */
  if((hmdma == NULL) || (pNewNode == NULL))
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d002      	beq.n	8006fa0 <HAL_MDMA_LinkedList_AddNode+0x24>
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d101      	bne.n	8006fa4 <HAL_MDMA_LinkedList_AddNode+0x28>
  {
    return HAL_ERROR;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	e0a9      	b.n	80070f8 <HAL_MDMA_LinkedList_AddNode+0x17c>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006faa:	2b01      	cmp	r3, #1
 8006fac:	d101      	bne.n	8006fb2 <HAL_MDMA_LinkedList_AddNode+0x36>
 8006fae:	2302      	movs	r3, #2
 8006fb0:	e0a2      	b.n	80070f8 <HAL_MDMA_LinkedList_AddNode+0x17c>
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2201      	movs	r2, #1
 8006fb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006fc0:	b2db      	uxtb	r3, r3
 8006fc2:	2b01      	cmp	r3, #1
 8006fc4:	f040 8093 	bne.w	80070ee <HAL_MDMA_LinkedList_AddNode+0x172>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2202      	movs	r2, #2
 8006fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Check if this is the first node (after the Inititlization node) */
    if((uint32_t)hmdma->FirstLinkedListNodeAddress == 0U)
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d116      	bne.n	8007006 <HAL_MDMA_LinkedList_AddNode+0x8a>
    {
      if(pPrevNode == NULL)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d110      	bne.n	8007000 <HAL_MDMA_LinkedList_AddNode+0x84>
      {
        /* if this is the first node after the initialization
        connect this node to the node 0 by updating
        the MDMA channel CLAR register to this node address */
        hmdma->Instance->CLAR = (uint32_t)pNewNode;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	68ba      	ldr	r2, [r7, #8]
 8006fe4:	625a      	str	r2, [r3, #36]	@ 0x24
        /* Set the MDMA handle First linked List node*/
        hmdma->FirstLinkedListNodeAddress = pNewNode;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	68ba      	ldr	r2, [r7, #8]
 8006fea:	65da      	str	r2, [r3, #92]	@ 0x5c

        /*reset New node link */
        pNewNode->CLAR = 0;
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	615a      	str	r2, [r3, #20]

        /* Update the Handle last node address */
        hmdma->LastLinkedListNodeAddress = pNewNode;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	68ba      	ldr	r2, [r7, #8]
 8006ff6:	661a      	str	r2, [r3, #96]	@ 0x60

        hmdma->LinkedListNodeCounter = 1;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	665a      	str	r2, [r3, #100]	@ 0x64
 8006ffe:	e06c      	b.n	80070da <HAL_MDMA_LinkedList_AddNode+0x15e>
      }
      else
      {
        hal_status = HAL_ERROR;
 8007000:	2301      	movs	r3, #1
 8007002:	74fb      	strb	r3, [r7, #19]
 8007004:	e069      	b.n	80070da <HAL_MDMA_LinkedList_AddNode+0x15e>
      }
    }
    else if(hmdma->FirstLinkedListNodeAddress != pNewNode)
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800700a:	68ba      	ldr	r2, [r7, #8]
 800700c:	429a      	cmp	r2, r3
 800700e:	d062      	beq.n	80070d6 <HAL_MDMA_LinkedList_AddNode+0x15a>
    {
      /* Check if the node to insert already exists*/
      pNode = hmdma->FirstLinkedListNodeAddress;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007014:	61fb      	str	r3, [r7, #28]
      while((counter < hmdma->LinkedListNodeCounter) && (hal_status == HAL_OK))
 8007016:	e00c      	b.n	8007032 <HAL_MDMA_LinkedList_AddNode+0xb6>
      {
        if(pNode->CLAR == (uint32_t)pNewNode)
 8007018:	69fb      	ldr	r3, [r7, #28]
 800701a:	695a      	ldr	r2, [r3, #20]
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	429a      	cmp	r2, r3
 8007020:	d101      	bne.n	8007026 <HAL_MDMA_LinkedList_AddNode+0xaa>
        {
          hal_status = HAL_ERROR; /* error this node already exist in the linked list and it is not first node */
 8007022:	2301      	movs	r3, #1
 8007024:	74fb      	strb	r3, [r7, #19]
        }
        pNode = (MDMA_LinkNodeTypeDef *)pNode->CLAR;
 8007026:	69fb      	ldr	r3, [r7, #28]
 8007028:	695b      	ldr	r3, [r3, #20]
 800702a:	61fb      	str	r3, [r7, #28]
        counter++;
 800702c:	69bb      	ldr	r3, [r7, #24]
 800702e:	3301      	adds	r3, #1
 8007030:	61bb      	str	r3, [r7, #24]
      while((counter < hmdma->LinkedListNodeCounter) && (hal_status == HAL_OK))
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007036:	69ba      	ldr	r2, [r7, #24]
 8007038:	429a      	cmp	r2, r3
 800703a:	d202      	bcs.n	8007042 <HAL_MDMA_LinkedList_AddNode+0xc6>
 800703c:	7cfb      	ldrb	r3, [r7, #19]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d0ea      	beq.n	8007018 <HAL_MDMA_LinkedList_AddNode+0x9c>
      }

      if(hal_status == HAL_OK)
 8007042:	7cfb      	ldrb	r3, [r7, #19]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d148      	bne.n	80070da <HAL_MDMA_LinkedList_AddNode+0x15e>
      {
        /* Check if the previous node is the last one in the current list or zero */
        if((pPrevNode == hmdma->LastLinkedListNodeAddress) || (pPrevNode == NULL))
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800704c:	687a      	ldr	r2, [r7, #4]
 800704e:	429a      	cmp	r2, r3
 8007050:	d002      	beq.n	8007058 <HAL_MDMA_LinkedList_AddNode+0xdc>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d111      	bne.n	800707c <HAL_MDMA_LinkedList_AddNode+0x100>
        {
          /* insert the new node at the end of the list */
          pNewNode->CLAR = hmdma->LastLinkedListNodeAddress->CLAR;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800705c:	695a      	ldr	r2, [r3, #20]
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	615a      	str	r2, [r3, #20]
          hmdma->LastLinkedListNodeAddress->CLAR = (uint32_t)pNewNode;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007066:	68ba      	ldr	r2, [r7, #8]
 8007068:	615a      	str	r2, [r3, #20]
          /* Update the Handle last node address */
          hmdma->LastLinkedListNodeAddress = pNewNode;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	68ba      	ldr	r2, [r7, #8]
 800706e:	661a      	str	r2, [r3, #96]	@ 0x60
          /* Increment the linked list node counter */
          hmdma->LinkedListNodeCounter++;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007074:	1c5a      	adds	r2, r3, #1
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	665a      	str	r2, [r3, #100]	@ 0x64
 800707a:	e02e      	b.n	80070da <HAL_MDMA_LinkedList_AddNode+0x15e>
        }
        else
        {
          /*insert the new node after the pPreviousNode node */
          pNode = hmdma->FirstLinkedListNodeAddress;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007080:	61fb      	str	r3, [r7, #28]
          counter = 0;
 8007082:	2300      	movs	r3, #0
 8007084:	61bb      	str	r3, [r7, #24]
          while((counter < hmdma->LinkedListNodeCounter) && (nodeInserted == 0U))
 8007086:	e018      	b.n	80070ba <HAL_MDMA_LinkedList_AddNode+0x13e>
          {
            counter++;
 8007088:	69bb      	ldr	r3, [r7, #24]
 800708a:	3301      	adds	r3, #1
 800708c:	61bb      	str	r3, [r7, #24]
            if(pNode == pPrevNode)
 800708e:	69fa      	ldr	r2, [r7, #28]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	429a      	cmp	r2, r3
 8007094:	d10e      	bne.n	80070b4 <HAL_MDMA_LinkedList_AddNode+0x138>
            {
              /*Insert the new node after the previous one */
              pNewNode->CLAR = pNode->CLAR;
 8007096:	69fb      	ldr	r3, [r7, #28]
 8007098:	695a      	ldr	r2, [r3, #20]
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	615a      	str	r2, [r3, #20]
              pNode->CLAR = (uint32_t)pNewNode;
 800709e:	68ba      	ldr	r2, [r7, #8]
 80070a0:	69fb      	ldr	r3, [r7, #28]
 80070a2:	615a      	str	r2, [r3, #20]
              /* Increment the linked list node counter */
              hmdma->LinkedListNodeCounter++;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80070a8:	1c5a      	adds	r2, r3, #1
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	665a      	str	r2, [r3, #100]	@ 0x64
              nodeInserted = 1;
 80070ae:	2301      	movs	r3, #1
 80070b0:	617b      	str	r3, [r7, #20]
 80070b2:	e002      	b.n	80070ba <HAL_MDMA_LinkedList_AddNode+0x13e>
            }
            else
            {
              pNode = (MDMA_LinkNodeTypeDef *)pNode->CLAR;
 80070b4:	69fb      	ldr	r3, [r7, #28]
 80070b6:	695b      	ldr	r3, [r3, #20]
 80070b8:	61fb      	str	r3, [r7, #28]
          while((counter < hmdma->LinkedListNodeCounter) && (nodeInserted == 0U))
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80070be:	69ba      	ldr	r2, [r7, #24]
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d202      	bcs.n	80070ca <HAL_MDMA_LinkedList_AddNode+0x14e>
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d0de      	beq.n	8007088 <HAL_MDMA_LinkedList_AddNode+0x10c>
            }
          }

          if(nodeInserted == 0U)
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d104      	bne.n	80070da <HAL_MDMA_LinkedList_AddNode+0x15e>
          {
            hal_status = HAL_ERROR;
 80070d0:	2301      	movs	r3, #1
 80070d2:	74fb      	strb	r3, [r7, #19]
 80070d4:	e001      	b.n	80070da <HAL_MDMA_LinkedList_AddNode+0x15e>
        }
      }
    }
    else
    {
      hal_status = HAL_ERROR;
 80070d6:	2301      	movs	r3, #1
 80070d8:	74fb      	strb	r3, [r7, #19]
    }

    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2200      	movs	r2, #0
 80070de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    hmdma->State = HAL_MDMA_STATE_READY;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2201      	movs	r2, #1
 80070e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return hal_status;
 80070ea:	7cfb      	ldrb	r3, [r7, #19]
 80070ec:	e004      	b.n	80070f8 <HAL_MDMA_LinkedList_AddNode+0x17c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2200      	movs	r2, #0
 80070f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Return error status */
    return HAL_BUSY;
 80070f6:	2302      	movs	r3, #2
  }
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3724      	adds	r7, #36	@ 0x24
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr

08007104 <HAL_MDMA_LinkedList_EnableCircularMode>:
  * @param  hmdma : Pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_LinkedList_EnableCircularMode(MDMA_HandleTypeDef *hmdma)
{
 8007104:	b480      	push	{r7}
 8007106:	b085      	sub	sp, #20
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800710c:	2300      	movs	r3, #0
 800710e:	73fb      	strb	r3, [r7, #15]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d101      	bne.n	800711a <HAL_MDMA_LinkedList_EnableCircularMode+0x16>
  {
    return HAL_ERROR;
 8007116:	2301      	movs	r3, #1
 8007118:	e031      	b.n	800717e <HAL_MDMA_LinkedList_EnableCircularMode+0x7a>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007120:	2b01      	cmp	r3, #1
 8007122:	d101      	bne.n	8007128 <HAL_MDMA_LinkedList_EnableCircularMode+0x24>
 8007124:	2302      	movs	r3, #2
 8007126:	e02a      	b.n	800717e <HAL_MDMA_LinkedList_EnableCircularMode+0x7a>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2201      	movs	r2, #1
 800712c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007136:	b2db      	uxtb	r3, r3
 8007138:	2b01      	cmp	r3, #1
 800713a:	d117      	bne.n	800716c <HAL_MDMA_LinkedList_EnableCircularMode+0x68>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2202      	movs	r2, #2
 8007140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* If first and last node are null (no nodes in the list) : return error*/
    if(((uint32_t)hmdma->FirstLinkedListNodeAddress == 0U) || ((uint32_t)hmdma->LastLinkedListNodeAddress == 0U) || (hmdma->LinkedListNodeCounter == 0U))
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007148:	2b00      	cmp	r3, #0
 800714a:	d007      	beq.n	800715c <HAL_MDMA_LinkedList_EnableCircularMode+0x58>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007150:	2b00      	cmp	r3, #0
 8007152:	d003      	beq.n	800715c <HAL_MDMA_LinkedList_EnableCircularMode+0x58>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007158:	2b00      	cmp	r3, #0
 800715a:	d102      	bne.n	8007162 <HAL_MDMA_LinkedList_EnableCircularMode+0x5e>
    {
      hal_status = HAL_ERROR;
 800715c:	2301      	movs	r3, #1
 800715e:	73fb      	strb	r3, [r7, #15]
 8007160:	e004      	b.n	800716c <HAL_MDMA_LinkedList_EnableCircularMode+0x68>
    }
    else
    {
      /* to enable circular mode Last Node should be connected to first node */
      hmdma->LastLinkedListNodeAddress->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800716a:	615a      	str	r2, [r3, #20]
    }

  }
  /* Process unlocked */
  __HAL_UNLOCK(hmdma);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2200      	movs	r2, #0
 8007170:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  hmdma->State = HAL_MDMA_STATE_READY;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2201      	movs	r2, #1
 8007178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return hal_status;
 800717c:	7bfb      	ldrb	r3, [r7, #15]
}
 800717e:	4618      	mov	r0, r3
 8007180:	3714      	adds	r7, #20
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr

0800718a <HAL_MDMA_GenerateSWRequest>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_GenerateSWRequest(MDMA_HandleTypeDef *hmdma)
{
 800718a:	b480      	push	{r7}
 800718c:	b085      	sub	sp, #20
 800718e:	af00      	add	r7, sp, #0
 8007190:	6078      	str	r0, [r7, #4]
  uint32_t request_mode;

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d101      	bne.n	800719c <HAL_MDMA_GenerateSWRequest+0x12>
  {
    return HAL_ERROR;
 8007198:	2301      	movs	r3, #1
 800719a:	e02a      	b.n	80071f2 <HAL_MDMA_GenerateSWRequest+0x68>
  }

  /* Get the softawre request mode */
  request_mode = hmdma->Instance->CTCR & MDMA_CTCR_SWRM;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	691b      	ldr	r3, [r3, #16]
 80071a2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80071a6:	60fb      	str	r3, [r7, #12]

  if((hmdma->Instance->CCR &  MDMA_CCR_EN) == 0U)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	68db      	ldr	r3, [r3, #12]
 80071ae:	f003 0301 	and.w	r3, r3, #1
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d104      	bne.n	80071c0 <HAL_MDMA_GenerateSWRequest+0x36>
  {
    /* if no Transfer on going (MDMA enable bit not set) return error */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2280      	movs	r2, #128	@ 0x80
 80071ba:	669a      	str	r2, [r3, #104]	@ 0x68

    return HAL_ERROR;
 80071bc:	2301      	movs	r3, #1
 80071be:	e018      	b.n	80071f2 <HAL_MDMA_GenerateSWRequest+0x68>
  }
  else if(((hmdma->Instance->CISR &  MDMA_CISR_CRQA) != 0U) || (request_mode == 0U))
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d102      	bne.n	80071d4 <HAL_MDMA_GenerateSWRequest+0x4a>
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d105      	bne.n	80071e0 <HAL_MDMA_GenerateSWRequest+0x56>
  {
    /* if an MDMA ongoing request has not yet end or if request mode is not SW request return error */
    hmdma->ErrorCode = HAL_MDMA_ERROR_BUSY;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80071da:	669a      	str	r2, [r3, #104]	@ 0x68

    return HAL_ERROR;
 80071dc:	2301      	movs	r3, #1
 80071de:	e008      	b.n	80071f2 <HAL_MDMA_GenerateSWRequest+0x68>
  }
  else
  {
    /* Set the SW request bit to activate the request on the Channel */
    hmdma->Instance->CCR |= MDMA_CCR_SWRQ;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	68da      	ldr	r2, [r3, #12]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80071ee:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80071f0:	2300      	movs	r3, #0
  }
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3714      	adds	r7, #20
 80071f6:	46bd      	mov	sp, r7
 80071f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fc:	4770      	bx	lr

080071fe <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 80071fe:	b480      	push	{r7}
 8007200:	b085      	sub	sp, #20
 8007202:	af00      	add	r7, sp, #0
 8007204:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	68d9      	ldr	r1, [r3, #12]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	691a      	ldr	r2, [r3, #16]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	430a      	orrs	r2, r1
 8007214:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	695a      	ldr	r2, [r3, #20]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	699b      	ldr	r3, [r3, #24]
 800721e:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8007224:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6a1b      	ldr	r3, [r3, #32]
 800722a:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8007230:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007236:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800723c:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007242:	3b01      	subs	r3, #1
 8007244:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 8007246:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8007252:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8007254:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800725e:	d107      	bne.n	8007270 <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	691a      	ldr	r2, [r3, #16]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 800726e:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	2200      	movs	r2, #0
 8007276:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800727c:	2b00      	cmp	r3, #0
 800727e:	da11      	bge.n	80072a4 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	695a      	ldr	r2, [r3, #20]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800728e:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007294:	425b      	negs	r3, r3
 8007296:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	68fa      	ldr	r2, [r7, #12]
 800729e:	b292      	uxth	r2, r2
 80072a0:	621a      	str	r2, [r3, #32]
 80072a2:	e006      	b.n	80072b2 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072a8:	461a      	mov	r2, r3
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	b292      	uxth	r2, r2
 80072b0:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	da15      	bge.n	80072e6 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	695a      	ldr	r2, [r3, #20]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 80072c8:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072ce:	425b      	negs	r3, r3
 80072d0:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	6a19      	ldr	r1, [r3, #32]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	041a      	lsls	r2, r3, #16
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	430a      	orrs	r2, r1
 80072e2:	621a      	str	r2, [r3, #32]
 80072e4:	e009      	b.n	80072fa <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	6a19      	ldr	r1, [r3, #32]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072f0:	041a      	lsls	r2, r3, #16
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	430a      	orrs	r2, r1
 80072f8:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007302:	d006      	beq.n	8007312 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	685a      	ldr	r2, [r3, #4]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	b2d2      	uxtb	r2, r2
 800730e:	629a      	str	r2, [r3, #40]	@ 0x28
 8007310:	e003      	b.n	800731a <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	2200      	movs	r2, #0
 8007318:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	2200      	movs	r2, #0
 8007320:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8007322:	bf00      	nop
 8007324:	3714      	adds	r7, #20
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr
	...

08007330 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b084      	sub	sp, #16
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8007338:	4b29      	ldr	r3, [pc, #164]	@ (80073e0 <HAL_PWREx_ConfigSupply+0xb0>)
 800733a:	68db      	ldr	r3, [r3, #12]
 800733c:	f003 0307 	and.w	r3, r3, #7
 8007340:	2b06      	cmp	r3, #6
 8007342:	d00a      	beq.n	800735a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007344:	4b26      	ldr	r3, [pc, #152]	@ (80073e0 <HAL_PWREx_ConfigSupply+0xb0>)
 8007346:	68db      	ldr	r3, [r3, #12]
 8007348:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800734c:	687a      	ldr	r2, [r7, #4]
 800734e:	429a      	cmp	r2, r3
 8007350:	d001      	beq.n	8007356 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007352:	2301      	movs	r3, #1
 8007354:	e040      	b.n	80073d8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007356:	2300      	movs	r3, #0
 8007358:	e03e      	b.n	80073d8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800735a:	4b21      	ldr	r3, [pc, #132]	@ (80073e0 <HAL_PWREx_ConfigSupply+0xb0>)
 800735c:	68db      	ldr	r3, [r3, #12]
 800735e:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8007362:	491f      	ldr	r1, [pc, #124]	@ (80073e0 <HAL_PWREx_ConfigSupply+0xb0>)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	4313      	orrs	r3, r2
 8007368:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800736a:	f7fc f973 	bl	8003654 <HAL_GetTick>
 800736e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007370:	e009      	b.n	8007386 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007372:	f7fc f96f 	bl	8003654 <HAL_GetTick>
 8007376:	4602      	mov	r2, r0
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	1ad3      	subs	r3, r2, r3
 800737c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007380:	d901      	bls.n	8007386 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007382:	2301      	movs	r3, #1
 8007384:	e028      	b.n	80073d8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007386:	4b16      	ldr	r3, [pc, #88]	@ (80073e0 <HAL_PWREx_ConfigSupply+0xb0>)
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800738e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007392:	d1ee      	bne.n	8007372 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2b1e      	cmp	r3, #30
 8007398:	d008      	beq.n	80073ac <HAL_PWREx_ConfigSupply+0x7c>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2b2e      	cmp	r3, #46	@ 0x2e
 800739e:	d005      	beq.n	80073ac <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2b1d      	cmp	r3, #29
 80073a4:	d002      	beq.n	80073ac <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2b2d      	cmp	r3, #45	@ 0x2d
 80073aa:	d114      	bne.n	80073d6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80073ac:	f7fc f952 	bl	8003654 <HAL_GetTick>
 80073b0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80073b2:	e009      	b.n	80073c8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80073b4:	f7fc f94e 	bl	8003654 <HAL_GetTick>
 80073b8:	4602      	mov	r2, r0
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	1ad3      	subs	r3, r2, r3
 80073be:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80073c2:	d901      	bls.n	80073c8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80073c4:	2301      	movs	r3, #1
 80073c6:	e007      	b.n	80073d8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80073c8:	4b05      	ldr	r3, [pc, #20]	@ (80073e0 <HAL_PWREx_ConfigSupply+0xb0>)
 80073ca:	68db      	ldr	r3, [r3, #12]
 80073cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80073d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073d4:	d1ee      	bne.n	80073b4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80073d6:	2300      	movs	r3, #0
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3710      	adds	r7, #16
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}
 80073e0:	58024800 	.word	0x58024800

080073e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b08c      	sub	sp, #48	@ 0x30
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d102      	bne.n	80073f8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80073f2:	2301      	movs	r3, #1
 80073f4:	f000 bc48 	b.w	8007c88 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f003 0301 	and.w	r3, r3, #1
 8007400:	2b00      	cmp	r3, #0
 8007402:	f000 8088 	beq.w	8007516 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007406:	4b99      	ldr	r3, [pc, #612]	@ (800766c <HAL_RCC_OscConfig+0x288>)
 8007408:	691b      	ldr	r3, [r3, #16]
 800740a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800740e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007410:	4b96      	ldr	r3, [pc, #600]	@ (800766c <HAL_RCC_OscConfig+0x288>)
 8007412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007414:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007418:	2b10      	cmp	r3, #16
 800741a:	d007      	beq.n	800742c <HAL_RCC_OscConfig+0x48>
 800741c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800741e:	2b18      	cmp	r3, #24
 8007420:	d111      	bne.n	8007446 <HAL_RCC_OscConfig+0x62>
 8007422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007424:	f003 0303 	and.w	r3, r3, #3
 8007428:	2b02      	cmp	r3, #2
 800742a:	d10c      	bne.n	8007446 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800742c:	4b8f      	ldr	r3, [pc, #572]	@ (800766c <HAL_RCC_OscConfig+0x288>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007434:	2b00      	cmp	r3, #0
 8007436:	d06d      	beq.n	8007514 <HAL_RCC_OscConfig+0x130>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d169      	bne.n	8007514 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007440:	2301      	movs	r3, #1
 8007442:	f000 bc21 	b.w	8007c88 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800744e:	d106      	bne.n	800745e <HAL_RCC_OscConfig+0x7a>
 8007450:	4b86      	ldr	r3, [pc, #536]	@ (800766c <HAL_RCC_OscConfig+0x288>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a85      	ldr	r2, [pc, #532]	@ (800766c <HAL_RCC_OscConfig+0x288>)
 8007456:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800745a:	6013      	str	r3, [r2, #0]
 800745c:	e02e      	b.n	80074bc <HAL_RCC_OscConfig+0xd8>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d10c      	bne.n	8007480 <HAL_RCC_OscConfig+0x9c>
 8007466:	4b81      	ldr	r3, [pc, #516]	@ (800766c <HAL_RCC_OscConfig+0x288>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a80      	ldr	r2, [pc, #512]	@ (800766c <HAL_RCC_OscConfig+0x288>)
 800746c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007470:	6013      	str	r3, [r2, #0]
 8007472:	4b7e      	ldr	r3, [pc, #504]	@ (800766c <HAL_RCC_OscConfig+0x288>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a7d      	ldr	r2, [pc, #500]	@ (800766c <HAL_RCC_OscConfig+0x288>)
 8007478:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800747c:	6013      	str	r3, [r2, #0]
 800747e:	e01d      	b.n	80074bc <HAL_RCC_OscConfig+0xd8>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007488:	d10c      	bne.n	80074a4 <HAL_RCC_OscConfig+0xc0>
 800748a:	4b78      	ldr	r3, [pc, #480]	@ (800766c <HAL_RCC_OscConfig+0x288>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a77      	ldr	r2, [pc, #476]	@ (800766c <HAL_RCC_OscConfig+0x288>)
 8007490:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007494:	6013      	str	r3, [r2, #0]
 8007496:	4b75      	ldr	r3, [pc, #468]	@ (800766c <HAL_RCC_OscConfig+0x288>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a74      	ldr	r2, [pc, #464]	@ (800766c <HAL_RCC_OscConfig+0x288>)
 800749c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80074a0:	6013      	str	r3, [r2, #0]
 80074a2:	e00b      	b.n	80074bc <HAL_RCC_OscConfig+0xd8>
 80074a4:	4b71      	ldr	r3, [pc, #452]	@ (800766c <HAL_RCC_OscConfig+0x288>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a70      	ldr	r2, [pc, #448]	@ (800766c <HAL_RCC_OscConfig+0x288>)
 80074aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80074ae:	6013      	str	r3, [r2, #0]
 80074b0:	4b6e      	ldr	r3, [pc, #440]	@ (800766c <HAL_RCC_OscConfig+0x288>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a6d      	ldr	r2, [pc, #436]	@ (800766c <HAL_RCC_OscConfig+0x288>)
 80074b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80074ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d013      	beq.n	80074ec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074c4:	f7fc f8c6 	bl	8003654 <HAL_GetTick>
 80074c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80074ca:	e008      	b.n	80074de <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80074cc:	f7fc f8c2 	bl	8003654 <HAL_GetTick>
 80074d0:	4602      	mov	r2, r0
 80074d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074d4:	1ad3      	subs	r3, r2, r3
 80074d6:	2b64      	cmp	r3, #100	@ 0x64
 80074d8:	d901      	bls.n	80074de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80074da:	2303      	movs	r3, #3
 80074dc:	e3d4      	b.n	8007c88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80074de:	4b63      	ldr	r3, [pc, #396]	@ (800766c <HAL_RCC_OscConfig+0x288>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d0f0      	beq.n	80074cc <HAL_RCC_OscConfig+0xe8>
 80074ea:	e014      	b.n	8007516 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074ec:	f7fc f8b2 	bl	8003654 <HAL_GetTick>
 80074f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80074f2:	e008      	b.n	8007506 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80074f4:	f7fc f8ae 	bl	8003654 <HAL_GetTick>
 80074f8:	4602      	mov	r2, r0
 80074fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074fc:	1ad3      	subs	r3, r2, r3
 80074fe:	2b64      	cmp	r3, #100	@ 0x64
 8007500:	d901      	bls.n	8007506 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007502:	2303      	movs	r3, #3
 8007504:	e3c0      	b.n	8007c88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007506:	4b59      	ldr	r3, [pc, #356]	@ (800766c <HAL_RCC_OscConfig+0x288>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800750e:	2b00      	cmp	r3, #0
 8007510:	d1f0      	bne.n	80074f4 <HAL_RCC_OscConfig+0x110>
 8007512:	e000      	b.n	8007516 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007514:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f003 0302 	and.w	r3, r3, #2
 800751e:	2b00      	cmp	r3, #0
 8007520:	f000 80ca 	beq.w	80076b8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007524:	4b51      	ldr	r3, [pc, #324]	@ (800766c <HAL_RCC_OscConfig+0x288>)
 8007526:	691b      	ldr	r3, [r3, #16]
 8007528:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800752c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800752e:	4b4f      	ldr	r3, [pc, #316]	@ (800766c <HAL_RCC_OscConfig+0x288>)
 8007530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007532:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007534:	6a3b      	ldr	r3, [r7, #32]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d007      	beq.n	800754a <HAL_RCC_OscConfig+0x166>
 800753a:	6a3b      	ldr	r3, [r7, #32]
 800753c:	2b18      	cmp	r3, #24
 800753e:	d156      	bne.n	80075ee <HAL_RCC_OscConfig+0x20a>
 8007540:	69fb      	ldr	r3, [r7, #28]
 8007542:	f003 0303 	and.w	r3, r3, #3
 8007546:	2b00      	cmp	r3, #0
 8007548:	d151      	bne.n	80075ee <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800754a:	4b48      	ldr	r3, [pc, #288]	@ (800766c <HAL_RCC_OscConfig+0x288>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f003 0304 	and.w	r3, r3, #4
 8007552:	2b00      	cmp	r3, #0
 8007554:	d005      	beq.n	8007562 <HAL_RCC_OscConfig+0x17e>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	68db      	ldr	r3, [r3, #12]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d101      	bne.n	8007562 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800755e:	2301      	movs	r3, #1
 8007560:	e392      	b.n	8007c88 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007562:	4b42      	ldr	r3, [pc, #264]	@ (800766c <HAL_RCC_OscConfig+0x288>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f023 0219 	bic.w	r2, r3, #25
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	68db      	ldr	r3, [r3, #12]
 800756e:	493f      	ldr	r1, [pc, #252]	@ (800766c <HAL_RCC_OscConfig+0x288>)
 8007570:	4313      	orrs	r3, r2
 8007572:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007574:	f7fc f86e 	bl	8003654 <HAL_GetTick>
 8007578:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800757a:	e008      	b.n	800758e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800757c:	f7fc f86a 	bl	8003654 <HAL_GetTick>
 8007580:	4602      	mov	r2, r0
 8007582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007584:	1ad3      	subs	r3, r2, r3
 8007586:	2b02      	cmp	r3, #2
 8007588:	d901      	bls.n	800758e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800758a:	2303      	movs	r3, #3
 800758c:	e37c      	b.n	8007c88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800758e:	4b37      	ldr	r3, [pc, #220]	@ (800766c <HAL_RCC_OscConfig+0x288>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f003 0304 	and.w	r3, r3, #4
 8007596:	2b00      	cmp	r3, #0
 8007598:	d0f0      	beq.n	800757c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800759a:	f7fc f88b 	bl	80036b4 <HAL_GetREVID>
 800759e:	4603      	mov	r3, r0
 80075a0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d817      	bhi.n	80075d8 <HAL_RCC_OscConfig+0x1f4>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	691b      	ldr	r3, [r3, #16]
 80075ac:	2b40      	cmp	r3, #64	@ 0x40
 80075ae:	d108      	bne.n	80075c2 <HAL_RCC_OscConfig+0x1de>
 80075b0:	4b2e      	ldr	r3, [pc, #184]	@ (800766c <HAL_RCC_OscConfig+0x288>)
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80075b8:	4a2c      	ldr	r2, [pc, #176]	@ (800766c <HAL_RCC_OscConfig+0x288>)
 80075ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80075be:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80075c0:	e07a      	b.n	80076b8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075c2:	4b2a      	ldr	r3, [pc, #168]	@ (800766c <HAL_RCC_OscConfig+0x288>)
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	691b      	ldr	r3, [r3, #16]
 80075ce:	031b      	lsls	r3, r3, #12
 80075d0:	4926      	ldr	r1, [pc, #152]	@ (800766c <HAL_RCC_OscConfig+0x288>)
 80075d2:	4313      	orrs	r3, r2
 80075d4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80075d6:	e06f      	b.n	80076b8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075d8:	4b24      	ldr	r3, [pc, #144]	@ (800766c <HAL_RCC_OscConfig+0x288>)
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	691b      	ldr	r3, [r3, #16]
 80075e4:	061b      	lsls	r3, r3, #24
 80075e6:	4921      	ldr	r1, [pc, #132]	@ (800766c <HAL_RCC_OscConfig+0x288>)
 80075e8:	4313      	orrs	r3, r2
 80075ea:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80075ec:	e064      	b.n	80076b8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	68db      	ldr	r3, [r3, #12]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d047      	beq.n	8007686 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80075f6:	4b1d      	ldr	r3, [pc, #116]	@ (800766c <HAL_RCC_OscConfig+0x288>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f023 0219 	bic.w	r2, r3, #25
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	68db      	ldr	r3, [r3, #12]
 8007602:	491a      	ldr	r1, [pc, #104]	@ (800766c <HAL_RCC_OscConfig+0x288>)
 8007604:	4313      	orrs	r3, r2
 8007606:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007608:	f7fc f824 	bl	8003654 <HAL_GetTick>
 800760c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800760e:	e008      	b.n	8007622 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007610:	f7fc f820 	bl	8003654 <HAL_GetTick>
 8007614:	4602      	mov	r2, r0
 8007616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007618:	1ad3      	subs	r3, r2, r3
 800761a:	2b02      	cmp	r3, #2
 800761c:	d901      	bls.n	8007622 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800761e:	2303      	movs	r3, #3
 8007620:	e332      	b.n	8007c88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007622:	4b12      	ldr	r3, [pc, #72]	@ (800766c <HAL_RCC_OscConfig+0x288>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f003 0304 	and.w	r3, r3, #4
 800762a:	2b00      	cmp	r3, #0
 800762c:	d0f0      	beq.n	8007610 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800762e:	f7fc f841 	bl	80036b4 <HAL_GetREVID>
 8007632:	4603      	mov	r3, r0
 8007634:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007638:	4293      	cmp	r3, r2
 800763a:	d819      	bhi.n	8007670 <HAL_RCC_OscConfig+0x28c>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	691b      	ldr	r3, [r3, #16]
 8007640:	2b40      	cmp	r3, #64	@ 0x40
 8007642:	d108      	bne.n	8007656 <HAL_RCC_OscConfig+0x272>
 8007644:	4b09      	ldr	r3, [pc, #36]	@ (800766c <HAL_RCC_OscConfig+0x288>)
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800764c:	4a07      	ldr	r2, [pc, #28]	@ (800766c <HAL_RCC_OscConfig+0x288>)
 800764e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007652:	6053      	str	r3, [r2, #4]
 8007654:	e030      	b.n	80076b8 <HAL_RCC_OscConfig+0x2d4>
 8007656:	4b05      	ldr	r3, [pc, #20]	@ (800766c <HAL_RCC_OscConfig+0x288>)
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	691b      	ldr	r3, [r3, #16]
 8007662:	031b      	lsls	r3, r3, #12
 8007664:	4901      	ldr	r1, [pc, #4]	@ (800766c <HAL_RCC_OscConfig+0x288>)
 8007666:	4313      	orrs	r3, r2
 8007668:	604b      	str	r3, [r1, #4]
 800766a:	e025      	b.n	80076b8 <HAL_RCC_OscConfig+0x2d4>
 800766c:	58024400 	.word	0x58024400
 8007670:	4b9a      	ldr	r3, [pc, #616]	@ (80078dc <HAL_RCC_OscConfig+0x4f8>)
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	691b      	ldr	r3, [r3, #16]
 800767c:	061b      	lsls	r3, r3, #24
 800767e:	4997      	ldr	r1, [pc, #604]	@ (80078dc <HAL_RCC_OscConfig+0x4f8>)
 8007680:	4313      	orrs	r3, r2
 8007682:	604b      	str	r3, [r1, #4]
 8007684:	e018      	b.n	80076b8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007686:	4b95      	ldr	r3, [pc, #596]	@ (80078dc <HAL_RCC_OscConfig+0x4f8>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a94      	ldr	r2, [pc, #592]	@ (80078dc <HAL_RCC_OscConfig+0x4f8>)
 800768c:	f023 0301 	bic.w	r3, r3, #1
 8007690:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007692:	f7fb ffdf 	bl	8003654 <HAL_GetTick>
 8007696:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007698:	e008      	b.n	80076ac <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800769a:	f7fb ffdb 	bl	8003654 <HAL_GetTick>
 800769e:	4602      	mov	r2, r0
 80076a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a2:	1ad3      	subs	r3, r2, r3
 80076a4:	2b02      	cmp	r3, #2
 80076a6:	d901      	bls.n	80076ac <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80076a8:	2303      	movs	r3, #3
 80076aa:	e2ed      	b.n	8007c88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80076ac:	4b8b      	ldr	r3, [pc, #556]	@ (80078dc <HAL_RCC_OscConfig+0x4f8>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f003 0304 	and.w	r3, r3, #4
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d1f0      	bne.n	800769a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f003 0310 	and.w	r3, r3, #16
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	f000 80a9 	beq.w	8007818 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80076c6:	4b85      	ldr	r3, [pc, #532]	@ (80078dc <HAL_RCC_OscConfig+0x4f8>)
 80076c8:	691b      	ldr	r3, [r3, #16]
 80076ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80076ce:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80076d0:	4b82      	ldr	r3, [pc, #520]	@ (80078dc <HAL_RCC_OscConfig+0x4f8>)
 80076d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076d4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80076d6:	69bb      	ldr	r3, [r7, #24]
 80076d8:	2b08      	cmp	r3, #8
 80076da:	d007      	beq.n	80076ec <HAL_RCC_OscConfig+0x308>
 80076dc:	69bb      	ldr	r3, [r7, #24]
 80076de:	2b18      	cmp	r3, #24
 80076e0:	d13a      	bne.n	8007758 <HAL_RCC_OscConfig+0x374>
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	f003 0303 	and.w	r3, r3, #3
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	d135      	bne.n	8007758 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80076ec:	4b7b      	ldr	r3, [pc, #492]	@ (80078dc <HAL_RCC_OscConfig+0x4f8>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d005      	beq.n	8007704 <HAL_RCC_OscConfig+0x320>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	69db      	ldr	r3, [r3, #28]
 80076fc:	2b80      	cmp	r3, #128	@ 0x80
 80076fe:	d001      	beq.n	8007704 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007700:	2301      	movs	r3, #1
 8007702:	e2c1      	b.n	8007c88 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007704:	f7fb ffd6 	bl	80036b4 <HAL_GetREVID>
 8007708:	4603      	mov	r3, r0
 800770a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800770e:	4293      	cmp	r3, r2
 8007710:	d817      	bhi.n	8007742 <HAL_RCC_OscConfig+0x35e>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6a1b      	ldr	r3, [r3, #32]
 8007716:	2b20      	cmp	r3, #32
 8007718:	d108      	bne.n	800772c <HAL_RCC_OscConfig+0x348>
 800771a:	4b70      	ldr	r3, [pc, #448]	@ (80078dc <HAL_RCC_OscConfig+0x4f8>)
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8007722:	4a6e      	ldr	r2, [pc, #440]	@ (80078dc <HAL_RCC_OscConfig+0x4f8>)
 8007724:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007728:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800772a:	e075      	b.n	8007818 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800772c:	4b6b      	ldr	r3, [pc, #428]	@ (80078dc <HAL_RCC_OscConfig+0x4f8>)
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6a1b      	ldr	r3, [r3, #32]
 8007738:	069b      	lsls	r3, r3, #26
 800773a:	4968      	ldr	r1, [pc, #416]	@ (80078dc <HAL_RCC_OscConfig+0x4f8>)
 800773c:	4313      	orrs	r3, r2
 800773e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007740:	e06a      	b.n	8007818 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007742:	4b66      	ldr	r3, [pc, #408]	@ (80078dc <HAL_RCC_OscConfig+0x4f8>)
 8007744:	68db      	ldr	r3, [r3, #12]
 8007746:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6a1b      	ldr	r3, [r3, #32]
 800774e:	061b      	lsls	r3, r3, #24
 8007750:	4962      	ldr	r1, [pc, #392]	@ (80078dc <HAL_RCC_OscConfig+0x4f8>)
 8007752:	4313      	orrs	r3, r2
 8007754:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007756:	e05f      	b.n	8007818 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	69db      	ldr	r3, [r3, #28]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d042      	beq.n	80077e6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007760:	4b5e      	ldr	r3, [pc, #376]	@ (80078dc <HAL_RCC_OscConfig+0x4f8>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a5d      	ldr	r2, [pc, #372]	@ (80078dc <HAL_RCC_OscConfig+0x4f8>)
 8007766:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800776a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800776c:	f7fb ff72 	bl	8003654 <HAL_GetTick>
 8007770:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007772:	e008      	b.n	8007786 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007774:	f7fb ff6e 	bl	8003654 <HAL_GetTick>
 8007778:	4602      	mov	r2, r0
 800777a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800777c:	1ad3      	subs	r3, r2, r3
 800777e:	2b02      	cmp	r3, #2
 8007780:	d901      	bls.n	8007786 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007782:	2303      	movs	r3, #3
 8007784:	e280      	b.n	8007c88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007786:	4b55      	ldr	r3, [pc, #340]	@ (80078dc <HAL_RCC_OscConfig+0x4f8>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800778e:	2b00      	cmp	r3, #0
 8007790:	d0f0      	beq.n	8007774 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007792:	f7fb ff8f 	bl	80036b4 <HAL_GetREVID>
 8007796:	4603      	mov	r3, r0
 8007798:	f241 0203 	movw	r2, #4099	@ 0x1003
 800779c:	4293      	cmp	r3, r2
 800779e:	d817      	bhi.n	80077d0 <HAL_RCC_OscConfig+0x3ec>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6a1b      	ldr	r3, [r3, #32]
 80077a4:	2b20      	cmp	r3, #32
 80077a6:	d108      	bne.n	80077ba <HAL_RCC_OscConfig+0x3d6>
 80077a8:	4b4c      	ldr	r3, [pc, #304]	@ (80078dc <HAL_RCC_OscConfig+0x4f8>)
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80077b0:	4a4a      	ldr	r2, [pc, #296]	@ (80078dc <HAL_RCC_OscConfig+0x4f8>)
 80077b2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80077b6:	6053      	str	r3, [r2, #4]
 80077b8:	e02e      	b.n	8007818 <HAL_RCC_OscConfig+0x434>
 80077ba:	4b48      	ldr	r3, [pc, #288]	@ (80078dc <HAL_RCC_OscConfig+0x4f8>)
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6a1b      	ldr	r3, [r3, #32]
 80077c6:	069b      	lsls	r3, r3, #26
 80077c8:	4944      	ldr	r1, [pc, #272]	@ (80078dc <HAL_RCC_OscConfig+0x4f8>)
 80077ca:	4313      	orrs	r3, r2
 80077cc:	604b      	str	r3, [r1, #4]
 80077ce:	e023      	b.n	8007818 <HAL_RCC_OscConfig+0x434>
 80077d0:	4b42      	ldr	r3, [pc, #264]	@ (80078dc <HAL_RCC_OscConfig+0x4f8>)
 80077d2:	68db      	ldr	r3, [r3, #12]
 80077d4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6a1b      	ldr	r3, [r3, #32]
 80077dc:	061b      	lsls	r3, r3, #24
 80077de:	493f      	ldr	r1, [pc, #252]	@ (80078dc <HAL_RCC_OscConfig+0x4f8>)
 80077e0:	4313      	orrs	r3, r2
 80077e2:	60cb      	str	r3, [r1, #12]
 80077e4:	e018      	b.n	8007818 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80077e6:	4b3d      	ldr	r3, [pc, #244]	@ (80078dc <HAL_RCC_OscConfig+0x4f8>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a3c      	ldr	r2, [pc, #240]	@ (80078dc <HAL_RCC_OscConfig+0x4f8>)
 80077ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80077f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077f2:	f7fb ff2f 	bl	8003654 <HAL_GetTick>
 80077f6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80077f8:	e008      	b.n	800780c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80077fa:	f7fb ff2b 	bl	8003654 <HAL_GetTick>
 80077fe:	4602      	mov	r2, r0
 8007800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007802:	1ad3      	subs	r3, r2, r3
 8007804:	2b02      	cmp	r3, #2
 8007806:	d901      	bls.n	800780c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007808:	2303      	movs	r3, #3
 800780a:	e23d      	b.n	8007c88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800780c:	4b33      	ldr	r3, [pc, #204]	@ (80078dc <HAL_RCC_OscConfig+0x4f8>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007814:	2b00      	cmp	r3, #0
 8007816:	d1f0      	bne.n	80077fa <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f003 0308 	and.w	r3, r3, #8
 8007820:	2b00      	cmp	r3, #0
 8007822:	d036      	beq.n	8007892 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	695b      	ldr	r3, [r3, #20]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d019      	beq.n	8007860 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800782c:	4b2b      	ldr	r3, [pc, #172]	@ (80078dc <HAL_RCC_OscConfig+0x4f8>)
 800782e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007830:	4a2a      	ldr	r2, [pc, #168]	@ (80078dc <HAL_RCC_OscConfig+0x4f8>)
 8007832:	f043 0301 	orr.w	r3, r3, #1
 8007836:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007838:	f7fb ff0c 	bl	8003654 <HAL_GetTick>
 800783c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800783e:	e008      	b.n	8007852 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007840:	f7fb ff08 	bl	8003654 <HAL_GetTick>
 8007844:	4602      	mov	r2, r0
 8007846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007848:	1ad3      	subs	r3, r2, r3
 800784a:	2b02      	cmp	r3, #2
 800784c:	d901      	bls.n	8007852 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800784e:	2303      	movs	r3, #3
 8007850:	e21a      	b.n	8007c88 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007852:	4b22      	ldr	r3, [pc, #136]	@ (80078dc <HAL_RCC_OscConfig+0x4f8>)
 8007854:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007856:	f003 0302 	and.w	r3, r3, #2
 800785a:	2b00      	cmp	r3, #0
 800785c:	d0f0      	beq.n	8007840 <HAL_RCC_OscConfig+0x45c>
 800785e:	e018      	b.n	8007892 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007860:	4b1e      	ldr	r3, [pc, #120]	@ (80078dc <HAL_RCC_OscConfig+0x4f8>)
 8007862:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007864:	4a1d      	ldr	r2, [pc, #116]	@ (80078dc <HAL_RCC_OscConfig+0x4f8>)
 8007866:	f023 0301 	bic.w	r3, r3, #1
 800786a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800786c:	f7fb fef2 	bl	8003654 <HAL_GetTick>
 8007870:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007872:	e008      	b.n	8007886 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007874:	f7fb feee 	bl	8003654 <HAL_GetTick>
 8007878:	4602      	mov	r2, r0
 800787a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800787c:	1ad3      	subs	r3, r2, r3
 800787e:	2b02      	cmp	r3, #2
 8007880:	d901      	bls.n	8007886 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007882:	2303      	movs	r3, #3
 8007884:	e200      	b.n	8007c88 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007886:	4b15      	ldr	r3, [pc, #84]	@ (80078dc <HAL_RCC_OscConfig+0x4f8>)
 8007888:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800788a:	f003 0302 	and.w	r3, r3, #2
 800788e:	2b00      	cmp	r3, #0
 8007890:	d1f0      	bne.n	8007874 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f003 0320 	and.w	r3, r3, #32
 800789a:	2b00      	cmp	r3, #0
 800789c:	d039      	beq.n	8007912 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	699b      	ldr	r3, [r3, #24]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d01c      	beq.n	80078e0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80078a6:	4b0d      	ldr	r3, [pc, #52]	@ (80078dc <HAL_RCC_OscConfig+0x4f8>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a0c      	ldr	r2, [pc, #48]	@ (80078dc <HAL_RCC_OscConfig+0x4f8>)
 80078ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80078b0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80078b2:	f7fb fecf 	bl	8003654 <HAL_GetTick>
 80078b6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80078b8:	e008      	b.n	80078cc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80078ba:	f7fb fecb 	bl	8003654 <HAL_GetTick>
 80078be:	4602      	mov	r2, r0
 80078c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078c2:	1ad3      	subs	r3, r2, r3
 80078c4:	2b02      	cmp	r3, #2
 80078c6:	d901      	bls.n	80078cc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80078c8:	2303      	movs	r3, #3
 80078ca:	e1dd      	b.n	8007c88 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80078cc:	4b03      	ldr	r3, [pc, #12]	@ (80078dc <HAL_RCC_OscConfig+0x4f8>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d0f0      	beq.n	80078ba <HAL_RCC_OscConfig+0x4d6>
 80078d8:	e01b      	b.n	8007912 <HAL_RCC_OscConfig+0x52e>
 80078da:	bf00      	nop
 80078dc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80078e0:	4b9b      	ldr	r3, [pc, #620]	@ (8007b50 <HAL_RCC_OscConfig+0x76c>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a9a      	ldr	r2, [pc, #616]	@ (8007b50 <HAL_RCC_OscConfig+0x76c>)
 80078e6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80078ea:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80078ec:	f7fb feb2 	bl	8003654 <HAL_GetTick>
 80078f0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80078f2:	e008      	b.n	8007906 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80078f4:	f7fb feae 	bl	8003654 <HAL_GetTick>
 80078f8:	4602      	mov	r2, r0
 80078fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078fc:	1ad3      	subs	r3, r2, r3
 80078fe:	2b02      	cmp	r3, #2
 8007900:	d901      	bls.n	8007906 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8007902:	2303      	movs	r3, #3
 8007904:	e1c0      	b.n	8007c88 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007906:	4b92      	ldr	r3, [pc, #584]	@ (8007b50 <HAL_RCC_OscConfig+0x76c>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800790e:	2b00      	cmp	r3, #0
 8007910:	d1f0      	bne.n	80078f4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f003 0304 	and.w	r3, r3, #4
 800791a:	2b00      	cmp	r3, #0
 800791c:	f000 8081 	beq.w	8007a22 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007920:	4b8c      	ldr	r3, [pc, #560]	@ (8007b54 <HAL_RCC_OscConfig+0x770>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a8b      	ldr	r2, [pc, #556]	@ (8007b54 <HAL_RCC_OscConfig+0x770>)
 8007926:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800792a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800792c:	f7fb fe92 	bl	8003654 <HAL_GetTick>
 8007930:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007932:	e008      	b.n	8007946 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007934:	f7fb fe8e 	bl	8003654 <HAL_GetTick>
 8007938:	4602      	mov	r2, r0
 800793a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800793c:	1ad3      	subs	r3, r2, r3
 800793e:	2b64      	cmp	r3, #100	@ 0x64
 8007940:	d901      	bls.n	8007946 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007942:	2303      	movs	r3, #3
 8007944:	e1a0      	b.n	8007c88 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007946:	4b83      	ldr	r3, [pc, #524]	@ (8007b54 <HAL_RCC_OscConfig+0x770>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800794e:	2b00      	cmp	r3, #0
 8007950:	d0f0      	beq.n	8007934 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	2b01      	cmp	r3, #1
 8007958:	d106      	bne.n	8007968 <HAL_RCC_OscConfig+0x584>
 800795a:	4b7d      	ldr	r3, [pc, #500]	@ (8007b50 <HAL_RCC_OscConfig+0x76c>)
 800795c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800795e:	4a7c      	ldr	r2, [pc, #496]	@ (8007b50 <HAL_RCC_OscConfig+0x76c>)
 8007960:	f043 0301 	orr.w	r3, r3, #1
 8007964:	6713      	str	r3, [r2, #112]	@ 0x70
 8007966:	e02d      	b.n	80079c4 <HAL_RCC_OscConfig+0x5e0>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	689b      	ldr	r3, [r3, #8]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d10c      	bne.n	800798a <HAL_RCC_OscConfig+0x5a6>
 8007970:	4b77      	ldr	r3, [pc, #476]	@ (8007b50 <HAL_RCC_OscConfig+0x76c>)
 8007972:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007974:	4a76      	ldr	r2, [pc, #472]	@ (8007b50 <HAL_RCC_OscConfig+0x76c>)
 8007976:	f023 0301 	bic.w	r3, r3, #1
 800797a:	6713      	str	r3, [r2, #112]	@ 0x70
 800797c:	4b74      	ldr	r3, [pc, #464]	@ (8007b50 <HAL_RCC_OscConfig+0x76c>)
 800797e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007980:	4a73      	ldr	r2, [pc, #460]	@ (8007b50 <HAL_RCC_OscConfig+0x76c>)
 8007982:	f023 0304 	bic.w	r3, r3, #4
 8007986:	6713      	str	r3, [r2, #112]	@ 0x70
 8007988:	e01c      	b.n	80079c4 <HAL_RCC_OscConfig+0x5e0>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	689b      	ldr	r3, [r3, #8]
 800798e:	2b05      	cmp	r3, #5
 8007990:	d10c      	bne.n	80079ac <HAL_RCC_OscConfig+0x5c8>
 8007992:	4b6f      	ldr	r3, [pc, #444]	@ (8007b50 <HAL_RCC_OscConfig+0x76c>)
 8007994:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007996:	4a6e      	ldr	r2, [pc, #440]	@ (8007b50 <HAL_RCC_OscConfig+0x76c>)
 8007998:	f043 0304 	orr.w	r3, r3, #4
 800799c:	6713      	str	r3, [r2, #112]	@ 0x70
 800799e:	4b6c      	ldr	r3, [pc, #432]	@ (8007b50 <HAL_RCC_OscConfig+0x76c>)
 80079a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079a2:	4a6b      	ldr	r2, [pc, #428]	@ (8007b50 <HAL_RCC_OscConfig+0x76c>)
 80079a4:	f043 0301 	orr.w	r3, r3, #1
 80079a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80079aa:	e00b      	b.n	80079c4 <HAL_RCC_OscConfig+0x5e0>
 80079ac:	4b68      	ldr	r3, [pc, #416]	@ (8007b50 <HAL_RCC_OscConfig+0x76c>)
 80079ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079b0:	4a67      	ldr	r2, [pc, #412]	@ (8007b50 <HAL_RCC_OscConfig+0x76c>)
 80079b2:	f023 0301 	bic.w	r3, r3, #1
 80079b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80079b8:	4b65      	ldr	r3, [pc, #404]	@ (8007b50 <HAL_RCC_OscConfig+0x76c>)
 80079ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079bc:	4a64      	ldr	r2, [pc, #400]	@ (8007b50 <HAL_RCC_OscConfig+0x76c>)
 80079be:	f023 0304 	bic.w	r3, r3, #4
 80079c2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	689b      	ldr	r3, [r3, #8]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d015      	beq.n	80079f8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079cc:	f7fb fe42 	bl	8003654 <HAL_GetTick>
 80079d0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80079d2:	e00a      	b.n	80079ea <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079d4:	f7fb fe3e 	bl	8003654 <HAL_GetTick>
 80079d8:	4602      	mov	r2, r0
 80079da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079dc:	1ad3      	subs	r3, r2, r3
 80079de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d901      	bls.n	80079ea <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80079e6:	2303      	movs	r3, #3
 80079e8:	e14e      	b.n	8007c88 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80079ea:	4b59      	ldr	r3, [pc, #356]	@ (8007b50 <HAL_RCC_OscConfig+0x76c>)
 80079ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079ee:	f003 0302 	and.w	r3, r3, #2
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d0ee      	beq.n	80079d4 <HAL_RCC_OscConfig+0x5f0>
 80079f6:	e014      	b.n	8007a22 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079f8:	f7fb fe2c 	bl	8003654 <HAL_GetTick>
 80079fc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80079fe:	e00a      	b.n	8007a16 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a00:	f7fb fe28 	bl	8003654 <HAL_GetTick>
 8007a04:	4602      	mov	r2, r0
 8007a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a08:	1ad3      	subs	r3, r2, r3
 8007a0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d901      	bls.n	8007a16 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8007a12:	2303      	movs	r3, #3
 8007a14:	e138      	b.n	8007c88 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007a16:	4b4e      	ldr	r3, [pc, #312]	@ (8007b50 <HAL_RCC_OscConfig+0x76c>)
 8007a18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a1a:	f003 0302 	and.w	r3, r3, #2
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d1ee      	bne.n	8007a00 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	f000 812d 	beq.w	8007c86 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007a2c:	4b48      	ldr	r3, [pc, #288]	@ (8007b50 <HAL_RCC_OscConfig+0x76c>)
 8007a2e:	691b      	ldr	r3, [r3, #16]
 8007a30:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007a34:	2b18      	cmp	r3, #24
 8007a36:	f000 80bd 	beq.w	8007bb4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a3e:	2b02      	cmp	r3, #2
 8007a40:	f040 809e 	bne.w	8007b80 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a44:	4b42      	ldr	r3, [pc, #264]	@ (8007b50 <HAL_RCC_OscConfig+0x76c>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a41      	ldr	r2, [pc, #260]	@ (8007b50 <HAL_RCC_OscConfig+0x76c>)
 8007a4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007a4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a50:	f7fb fe00 	bl	8003654 <HAL_GetTick>
 8007a54:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007a56:	e008      	b.n	8007a6a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a58:	f7fb fdfc 	bl	8003654 <HAL_GetTick>
 8007a5c:	4602      	mov	r2, r0
 8007a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a60:	1ad3      	subs	r3, r2, r3
 8007a62:	2b02      	cmp	r3, #2
 8007a64:	d901      	bls.n	8007a6a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8007a66:	2303      	movs	r3, #3
 8007a68:	e10e      	b.n	8007c88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007a6a:	4b39      	ldr	r3, [pc, #228]	@ (8007b50 <HAL_RCC_OscConfig+0x76c>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d1f0      	bne.n	8007a58 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007a76:	4b36      	ldr	r3, [pc, #216]	@ (8007b50 <HAL_RCC_OscConfig+0x76c>)
 8007a78:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007a7a:	4b37      	ldr	r3, [pc, #220]	@ (8007b58 <HAL_RCC_OscConfig+0x774>)
 8007a7c:	4013      	ands	r3, r2
 8007a7e:	687a      	ldr	r2, [r7, #4]
 8007a80:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8007a82:	687a      	ldr	r2, [r7, #4]
 8007a84:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007a86:	0112      	lsls	r2, r2, #4
 8007a88:	430a      	orrs	r2, r1
 8007a8a:	4931      	ldr	r1, [pc, #196]	@ (8007b50 <HAL_RCC_OscConfig+0x76c>)
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	628b      	str	r3, [r1, #40]	@ 0x28
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a94:	3b01      	subs	r3, #1
 8007a96:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a9e:	3b01      	subs	r3, #1
 8007aa0:	025b      	lsls	r3, r3, #9
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	431a      	orrs	r2, r3
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007aaa:	3b01      	subs	r3, #1
 8007aac:	041b      	lsls	r3, r3, #16
 8007aae:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007ab2:	431a      	orrs	r2, r3
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ab8:	3b01      	subs	r3, #1
 8007aba:	061b      	lsls	r3, r3, #24
 8007abc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007ac0:	4923      	ldr	r1, [pc, #140]	@ (8007b50 <HAL_RCC_OscConfig+0x76c>)
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007ac6:	4b22      	ldr	r3, [pc, #136]	@ (8007b50 <HAL_RCC_OscConfig+0x76c>)
 8007ac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aca:	4a21      	ldr	r2, [pc, #132]	@ (8007b50 <HAL_RCC_OscConfig+0x76c>)
 8007acc:	f023 0301 	bic.w	r3, r3, #1
 8007ad0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007ad2:	4b1f      	ldr	r3, [pc, #124]	@ (8007b50 <HAL_RCC_OscConfig+0x76c>)
 8007ad4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007ad6:	4b21      	ldr	r3, [pc, #132]	@ (8007b5c <HAL_RCC_OscConfig+0x778>)
 8007ad8:	4013      	ands	r3, r2
 8007ada:	687a      	ldr	r2, [r7, #4]
 8007adc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007ade:	00d2      	lsls	r2, r2, #3
 8007ae0:	491b      	ldr	r1, [pc, #108]	@ (8007b50 <HAL_RCC_OscConfig+0x76c>)
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007ae6:	4b1a      	ldr	r3, [pc, #104]	@ (8007b50 <HAL_RCC_OscConfig+0x76c>)
 8007ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aea:	f023 020c 	bic.w	r2, r3, #12
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007af2:	4917      	ldr	r1, [pc, #92]	@ (8007b50 <HAL_RCC_OscConfig+0x76c>)
 8007af4:	4313      	orrs	r3, r2
 8007af6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007af8:	4b15      	ldr	r3, [pc, #84]	@ (8007b50 <HAL_RCC_OscConfig+0x76c>)
 8007afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007afc:	f023 0202 	bic.w	r2, r3, #2
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b04:	4912      	ldr	r1, [pc, #72]	@ (8007b50 <HAL_RCC_OscConfig+0x76c>)
 8007b06:	4313      	orrs	r3, r2
 8007b08:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007b0a:	4b11      	ldr	r3, [pc, #68]	@ (8007b50 <HAL_RCC_OscConfig+0x76c>)
 8007b0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b0e:	4a10      	ldr	r2, [pc, #64]	@ (8007b50 <HAL_RCC_OscConfig+0x76c>)
 8007b10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b14:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b16:	4b0e      	ldr	r3, [pc, #56]	@ (8007b50 <HAL_RCC_OscConfig+0x76c>)
 8007b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b1a:	4a0d      	ldr	r2, [pc, #52]	@ (8007b50 <HAL_RCC_OscConfig+0x76c>)
 8007b1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b20:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007b22:	4b0b      	ldr	r3, [pc, #44]	@ (8007b50 <HAL_RCC_OscConfig+0x76c>)
 8007b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b26:	4a0a      	ldr	r2, [pc, #40]	@ (8007b50 <HAL_RCC_OscConfig+0x76c>)
 8007b28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007b2c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007b2e:	4b08      	ldr	r3, [pc, #32]	@ (8007b50 <HAL_RCC_OscConfig+0x76c>)
 8007b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b32:	4a07      	ldr	r2, [pc, #28]	@ (8007b50 <HAL_RCC_OscConfig+0x76c>)
 8007b34:	f043 0301 	orr.w	r3, r3, #1
 8007b38:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007b3a:	4b05      	ldr	r3, [pc, #20]	@ (8007b50 <HAL_RCC_OscConfig+0x76c>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4a04      	ldr	r2, [pc, #16]	@ (8007b50 <HAL_RCC_OscConfig+0x76c>)
 8007b40:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007b44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b46:	f7fb fd85 	bl	8003654 <HAL_GetTick>
 8007b4a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007b4c:	e011      	b.n	8007b72 <HAL_RCC_OscConfig+0x78e>
 8007b4e:	bf00      	nop
 8007b50:	58024400 	.word	0x58024400
 8007b54:	58024800 	.word	0x58024800
 8007b58:	fffffc0c 	.word	0xfffffc0c
 8007b5c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b60:	f7fb fd78 	bl	8003654 <HAL_GetTick>
 8007b64:	4602      	mov	r2, r0
 8007b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b68:	1ad3      	subs	r3, r2, r3
 8007b6a:	2b02      	cmp	r3, #2
 8007b6c:	d901      	bls.n	8007b72 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8007b6e:	2303      	movs	r3, #3
 8007b70:	e08a      	b.n	8007c88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007b72:	4b47      	ldr	r3, [pc, #284]	@ (8007c90 <HAL_RCC_OscConfig+0x8ac>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d0f0      	beq.n	8007b60 <HAL_RCC_OscConfig+0x77c>
 8007b7e:	e082      	b.n	8007c86 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b80:	4b43      	ldr	r3, [pc, #268]	@ (8007c90 <HAL_RCC_OscConfig+0x8ac>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4a42      	ldr	r2, [pc, #264]	@ (8007c90 <HAL_RCC_OscConfig+0x8ac>)
 8007b86:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007b8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b8c:	f7fb fd62 	bl	8003654 <HAL_GetTick>
 8007b90:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007b92:	e008      	b.n	8007ba6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b94:	f7fb fd5e 	bl	8003654 <HAL_GetTick>
 8007b98:	4602      	mov	r2, r0
 8007b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b9c:	1ad3      	subs	r3, r2, r3
 8007b9e:	2b02      	cmp	r3, #2
 8007ba0:	d901      	bls.n	8007ba6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8007ba2:	2303      	movs	r3, #3
 8007ba4:	e070      	b.n	8007c88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007ba6:	4b3a      	ldr	r3, [pc, #232]	@ (8007c90 <HAL_RCC_OscConfig+0x8ac>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d1f0      	bne.n	8007b94 <HAL_RCC_OscConfig+0x7b0>
 8007bb2:	e068      	b.n	8007c86 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007bb4:	4b36      	ldr	r3, [pc, #216]	@ (8007c90 <HAL_RCC_OscConfig+0x8ac>)
 8007bb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bb8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007bba:	4b35      	ldr	r3, [pc, #212]	@ (8007c90 <HAL_RCC_OscConfig+0x8ac>)
 8007bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bbe:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	d031      	beq.n	8007c2c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	f003 0203 	and.w	r2, r3, #3
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d12a      	bne.n	8007c2c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	091b      	lsrs	r3, r3, #4
 8007bda:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007be2:	429a      	cmp	r2, r3
 8007be4:	d122      	bne.n	8007c2c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bf0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007bf2:	429a      	cmp	r2, r3
 8007bf4:	d11a      	bne.n	8007c2c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	0a5b      	lsrs	r3, r3, #9
 8007bfa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c02:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007c04:	429a      	cmp	r2, r3
 8007c06:	d111      	bne.n	8007c2c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	0c1b      	lsrs	r3, r3, #16
 8007c0c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c14:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d108      	bne.n	8007c2c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	0e1b      	lsrs	r3, r3, #24
 8007c1e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c26:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007c28:	429a      	cmp	r2, r3
 8007c2a:	d001      	beq.n	8007c30 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	e02b      	b.n	8007c88 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007c30:	4b17      	ldr	r3, [pc, #92]	@ (8007c90 <HAL_RCC_OscConfig+0x8ac>)
 8007c32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c34:	08db      	lsrs	r3, r3, #3
 8007c36:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007c3a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c40:	693a      	ldr	r2, [r7, #16]
 8007c42:	429a      	cmp	r2, r3
 8007c44:	d01f      	beq.n	8007c86 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007c46:	4b12      	ldr	r3, [pc, #72]	@ (8007c90 <HAL_RCC_OscConfig+0x8ac>)
 8007c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c4a:	4a11      	ldr	r2, [pc, #68]	@ (8007c90 <HAL_RCC_OscConfig+0x8ac>)
 8007c4c:	f023 0301 	bic.w	r3, r3, #1
 8007c50:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007c52:	f7fb fcff 	bl	8003654 <HAL_GetTick>
 8007c56:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007c58:	bf00      	nop
 8007c5a:	f7fb fcfb 	bl	8003654 <HAL_GetTick>
 8007c5e:	4602      	mov	r2, r0
 8007c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d0f9      	beq.n	8007c5a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007c66:	4b0a      	ldr	r3, [pc, #40]	@ (8007c90 <HAL_RCC_OscConfig+0x8ac>)
 8007c68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007c6a:	4b0a      	ldr	r3, [pc, #40]	@ (8007c94 <HAL_RCC_OscConfig+0x8b0>)
 8007c6c:	4013      	ands	r3, r2
 8007c6e:	687a      	ldr	r2, [r7, #4]
 8007c70:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007c72:	00d2      	lsls	r2, r2, #3
 8007c74:	4906      	ldr	r1, [pc, #24]	@ (8007c90 <HAL_RCC_OscConfig+0x8ac>)
 8007c76:	4313      	orrs	r3, r2
 8007c78:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8007c7a:	4b05      	ldr	r3, [pc, #20]	@ (8007c90 <HAL_RCC_OscConfig+0x8ac>)
 8007c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c7e:	4a04      	ldr	r2, [pc, #16]	@ (8007c90 <HAL_RCC_OscConfig+0x8ac>)
 8007c80:	f043 0301 	orr.w	r3, r3, #1
 8007c84:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007c86:	2300      	movs	r3, #0
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3730      	adds	r7, #48	@ 0x30
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}
 8007c90:	58024400 	.word	0x58024400
 8007c94:	ffff0007 	.word	0xffff0007

08007c98 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b086      	sub	sp, #24
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d101      	bne.n	8007cac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007ca8:	2301      	movs	r3, #1
 8007caa:	e19c      	b.n	8007fe6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007cac:	4b8a      	ldr	r3, [pc, #552]	@ (8007ed8 <HAL_RCC_ClockConfig+0x240>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f003 030f 	and.w	r3, r3, #15
 8007cb4:	683a      	ldr	r2, [r7, #0]
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	d910      	bls.n	8007cdc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007cba:	4b87      	ldr	r3, [pc, #540]	@ (8007ed8 <HAL_RCC_ClockConfig+0x240>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f023 020f 	bic.w	r2, r3, #15
 8007cc2:	4985      	ldr	r1, [pc, #532]	@ (8007ed8 <HAL_RCC_ClockConfig+0x240>)
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007cca:	4b83      	ldr	r3, [pc, #524]	@ (8007ed8 <HAL_RCC_ClockConfig+0x240>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f003 030f 	and.w	r3, r3, #15
 8007cd2:	683a      	ldr	r2, [r7, #0]
 8007cd4:	429a      	cmp	r2, r3
 8007cd6:	d001      	beq.n	8007cdc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	e184      	b.n	8007fe6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f003 0304 	and.w	r3, r3, #4
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d010      	beq.n	8007d0a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	691a      	ldr	r2, [r3, #16]
 8007cec:	4b7b      	ldr	r3, [pc, #492]	@ (8007edc <HAL_RCC_ClockConfig+0x244>)
 8007cee:	699b      	ldr	r3, [r3, #24]
 8007cf0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d908      	bls.n	8007d0a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007cf8:	4b78      	ldr	r3, [pc, #480]	@ (8007edc <HAL_RCC_ClockConfig+0x244>)
 8007cfa:	699b      	ldr	r3, [r3, #24]
 8007cfc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	691b      	ldr	r3, [r3, #16]
 8007d04:	4975      	ldr	r1, [pc, #468]	@ (8007edc <HAL_RCC_ClockConfig+0x244>)
 8007d06:	4313      	orrs	r3, r2
 8007d08:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f003 0308 	and.w	r3, r3, #8
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d010      	beq.n	8007d38 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	695a      	ldr	r2, [r3, #20]
 8007d1a:	4b70      	ldr	r3, [pc, #448]	@ (8007edc <HAL_RCC_ClockConfig+0x244>)
 8007d1c:	69db      	ldr	r3, [r3, #28]
 8007d1e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007d22:	429a      	cmp	r2, r3
 8007d24:	d908      	bls.n	8007d38 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007d26:	4b6d      	ldr	r3, [pc, #436]	@ (8007edc <HAL_RCC_ClockConfig+0x244>)
 8007d28:	69db      	ldr	r3, [r3, #28]
 8007d2a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	695b      	ldr	r3, [r3, #20]
 8007d32:	496a      	ldr	r1, [pc, #424]	@ (8007edc <HAL_RCC_ClockConfig+0x244>)
 8007d34:	4313      	orrs	r3, r2
 8007d36:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f003 0310 	and.w	r3, r3, #16
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d010      	beq.n	8007d66 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	699a      	ldr	r2, [r3, #24]
 8007d48:	4b64      	ldr	r3, [pc, #400]	@ (8007edc <HAL_RCC_ClockConfig+0x244>)
 8007d4a:	69db      	ldr	r3, [r3, #28]
 8007d4c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007d50:	429a      	cmp	r2, r3
 8007d52:	d908      	bls.n	8007d66 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007d54:	4b61      	ldr	r3, [pc, #388]	@ (8007edc <HAL_RCC_ClockConfig+0x244>)
 8007d56:	69db      	ldr	r3, [r3, #28]
 8007d58:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	699b      	ldr	r3, [r3, #24]
 8007d60:	495e      	ldr	r1, [pc, #376]	@ (8007edc <HAL_RCC_ClockConfig+0x244>)
 8007d62:	4313      	orrs	r3, r2
 8007d64:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f003 0320 	and.w	r3, r3, #32
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d010      	beq.n	8007d94 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	69da      	ldr	r2, [r3, #28]
 8007d76:	4b59      	ldr	r3, [pc, #356]	@ (8007edc <HAL_RCC_ClockConfig+0x244>)
 8007d78:	6a1b      	ldr	r3, [r3, #32]
 8007d7a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007d7e:	429a      	cmp	r2, r3
 8007d80:	d908      	bls.n	8007d94 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007d82:	4b56      	ldr	r3, [pc, #344]	@ (8007edc <HAL_RCC_ClockConfig+0x244>)
 8007d84:	6a1b      	ldr	r3, [r3, #32]
 8007d86:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	69db      	ldr	r3, [r3, #28]
 8007d8e:	4953      	ldr	r1, [pc, #332]	@ (8007edc <HAL_RCC_ClockConfig+0x244>)
 8007d90:	4313      	orrs	r3, r2
 8007d92:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f003 0302 	and.w	r3, r3, #2
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d010      	beq.n	8007dc2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	68da      	ldr	r2, [r3, #12]
 8007da4:	4b4d      	ldr	r3, [pc, #308]	@ (8007edc <HAL_RCC_ClockConfig+0x244>)
 8007da6:	699b      	ldr	r3, [r3, #24]
 8007da8:	f003 030f 	and.w	r3, r3, #15
 8007dac:	429a      	cmp	r2, r3
 8007dae:	d908      	bls.n	8007dc2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007db0:	4b4a      	ldr	r3, [pc, #296]	@ (8007edc <HAL_RCC_ClockConfig+0x244>)
 8007db2:	699b      	ldr	r3, [r3, #24]
 8007db4:	f023 020f 	bic.w	r2, r3, #15
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	68db      	ldr	r3, [r3, #12]
 8007dbc:	4947      	ldr	r1, [pc, #284]	@ (8007edc <HAL_RCC_ClockConfig+0x244>)
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f003 0301 	and.w	r3, r3, #1
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d055      	beq.n	8007e7a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007dce:	4b43      	ldr	r3, [pc, #268]	@ (8007edc <HAL_RCC_ClockConfig+0x244>)
 8007dd0:	699b      	ldr	r3, [r3, #24]
 8007dd2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	689b      	ldr	r3, [r3, #8]
 8007dda:	4940      	ldr	r1, [pc, #256]	@ (8007edc <HAL_RCC_ClockConfig+0x244>)
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	2b02      	cmp	r3, #2
 8007de6:	d107      	bne.n	8007df8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007de8:	4b3c      	ldr	r3, [pc, #240]	@ (8007edc <HAL_RCC_ClockConfig+0x244>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d121      	bne.n	8007e38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007df4:	2301      	movs	r3, #1
 8007df6:	e0f6      	b.n	8007fe6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	2b03      	cmp	r3, #3
 8007dfe:	d107      	bne.n	8007e10 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007e00:	4b36      	ldr	r3, [pc, #216]	@ (8007edc <HAL_RCC_ClockConfig+0x244>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d115      	bne.n	8007e38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	e0ea      	b.n	8007fe6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	685b      	ldr	r3, [r3, #4]
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d107      	bne.n	8007e28 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007e18:	4b30      	ldr	r3, [pc, #192]	@ (8007edc <HAL_RCC_ClockConfig+0x244>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d109      	bne.n	8007e38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007e24:	2301      	movs	r3, #1
 8007e26:	e0de      	b.n	8007fe6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007e28:	4b2c      	ldr	r3, [pc, #176]	@ (8007edc <HAL_RCC_ClockConfig+0x244>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f003 0304 	and.w	r3, r3, #4
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d101      	bne.n	8007e38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007e34:	2301      	movs	r3, #1
 8007e36:	e0d6      	b.n	8007fe6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007e38:	4b28      	ldr	r3, [pc, #160]	@ (8007edc <HAL_RCC_ClockConfig+0x244>)
 8007e3a:	691b      	ldr	r3, [r3, #16]
 8007e3c:	f023 0207 	bic.w	r2, r3, #7
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	4925      	ldr	r1, [pc, #148]	@ (8007edc <HAL_RCC_ClockConfig+0x244>)
 8007e46:	4313      	orrs	r3, r2
 8007e48:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e4a:	f7fb fc03 	bl	8003654 <HAL_GetTick>
 8007e4e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e50:	e00a      	b.n	8007e68 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e52:	f7fb fbff 	bl	8003654 <HAL_GetTick>
 8007e56:	4602      	mov	r2, r0
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	1ad3      	subs	r3, r2, r3
 8007e5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d901      	bls.n	8007e68 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007e64:	2303      	movs	r3, #3
 8007e66:	e0be      	b.n	8007fe6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e68:	4b1c      	ldr	r3, [pc, #112]	@ (8007edc <HAL_RCC_ClockConfig+0x244>)
 8007e6a:	691b      	ldr	r3, [r3, #16]
 8007e6c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	685b      	ldr	r3, [r3, #4]
 8007e74:	00db      	lsls	r3, r3, #3
 8007e76:	429a      	cmp	r2, r3
 8007e78:	d1eb      	bne.n	8007e52 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f003 0302 	and.w	r3, r3, #2
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d010      	beq.n	8007ea8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	68da      	ldr	r2, [r3, #12]
 8007e8a:	4b14      	ldr	r3, [pc, #80]	@ (8007edc <HAL_RCC_ClockConfig+0x244>)
 8007e8c:	699b      	ldr	r3, [r3, #24]
 8007e8e:	f003 030f 	and.w	r3, r3, #15
 8007e92:	429a      	cmp	r2, r3
 8007e94:	d208      	bcs.n	8007ea8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007e96:	4b11      	ldr	r3, [pc, #68]	@ (8007edc <HAL_RCC_ClockConfig+0x244>)
 8007e98:	699b      	ldr	r3, [r3, #24]
 8007e9a:	f023 020f 	bic.w	r2, r3, #15
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	68db      	ldr	r3, [r3, #12]
 8007ea2:	490e      	ldr	r1, [pc, #56]	@ (8007edc <HAL_RCC_ClockConfig+0x244>)
 8007ea4:	4313      	orrs	r3, r2
 8007ea6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007ea8:	4b0b      	ldr	r3, [pc, #44]	@ (8007ed8 <HAL_RCC_ClockConfig+0x240>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f003 030f 	and.w	r3, r3, #15
 8007eb0:	683a      	ldr	r2, [r7, #0]
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d214      	bcs.n	8007ee0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007eb6:	4b08      	ldr	r3, [pc, #32]	@ (8007ed8 <HAL_RCC_ClockConfig+0x240>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f023 020f 	bic.w	r2, r3, #15
 8007ebe:	4906      	ldr	r1, [pc, #24]	@ (8007ed8 <HAL_RCC_ClockConfig+0x240>)
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ec6:	4b04      	ldr	r3, [pc, #16]	@ (8007ed8 <HAL_RCC_ClockConfig+0x240>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f003 030f 	and.w	r3, r3, #15
 8007ece:	683a      	ldr	r2, [r7, #0]
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	d005      	beq.n	8007ee0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	e086      	b.n	8007fe6 <HAL_RCC_ClockConfig+0x34e>
 8007ed8:	52002000 	.word	0x52002000
 8007edc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f003 0304 	and.w	r3, r3, #4
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d010      	beq.n	8007f0e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	691a      	ldr	r2, [r3, #16]
 8007ef0:	4b3f      	ldr	r3, [pc, #252]	@ (8007ff0 <HAL_RCC_ClockConfig+0x358>)
 8007ef2:	699b      	ldr	r3, [r3, #24]
 8007ef4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	d208      	bcs.n	8007f0e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007efc:	4b3c      	ldr	r3, [pc, #240]	@ (8007ff0 <HAL_RCC_ClockConfig+0x358>)
 8007efe:	699b      	ldr	r3, [r3, #24]
 8007f00:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	691b      	ldr	r3, [r3, #16]
 8007f08:	4939      	ldr	r1, [pc, #228]	@ (8007ff0 <HAL_RCC_ClockConfig+0x358>)
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f003 0308 	and.w	r3, r3, #8
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d010      	beq.n	8007f3c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	695a      	ldr	r2, [r3, #20]
 8007f1e:	4b34      	ldr	r3, [pc, #208]	@ (8007ff0 <HAL_RCC_ClockConfig+0x358>)
 8007f20:	69db      	ldr	r3, [r3, #28]
 8007f22:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007f26:	429a      	cmp	r2, r3
 8007f28:	d208      	bcs.n	8007f3c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007f2a:	4b31      	ldr	r3, [pc, #196]	@ (8007ff0 <HAL_RCC_ClockConfig+0x358>)
 8007f2c:	69db      	ldr	r3, [r3, #28]
 8007f2e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	695b      	ldr	r3, [r3, #20]
 8007f36:	492e      	ldr	r1, [pc, #184]	@ (8007ff0 <HAL_RCC_ClockConfig+0x358>)
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f003 0310 	and.w	r3, r3, #16
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d010      	beq.n	8007f6a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	699a      	ldr	r2, [r3, #24]
 8007f4c:	4b28      	ldr	r3, [pc, #160]	@ (8007ff0 <HAL_RCC_ClockConfig+0x358>)
 8007f4e:	69db      	ldr	r3, [r3, #28]
 8007f50:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d208      	bcs.n	8007f6a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007f58:	4b25      	ldr	r3, [pc, #148]	@ (8007ff0 <HAL_RCC_ClockConfig+0x358>)
 8007f5a:	69db      	ldr	r3, [r3, #28]
 8007f5c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	699b      	ldr	r3, [r3, #24]
 8007f64:	4922      	ldr	r1, [pc, #136]	@ (8007ff0 <HAL_RCC_ClockConfig+0x358>)
 8007f66:	4313      	orrs	r3, r2
 8007f68:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f003 0320 	and.w	r3, r3, #32
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d010      	beq.n	8007f98 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	69da      	ldr	r2, [r3, #28]
 8007f7a:	4b1d      	ldr	r3, [pc, #116]	@ (8007ff0 <HAL_RCC_ClockConfig+0x358>)
 8007f7c:	6a1b      	ldr	r3, [r3, #32]
 8007f7e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007f82:	429a      	cmp	r2, r3
 8007f84:	d208      	bcs.n	8007f98 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007f86:	4b1a      	ldr	r3, [pc, #104]	@ (8007ff0 <HAL_RCC_ClockConfig+0x358>)
 8007f88:	6a1b      	ldr	r3, [r3, #32]
 8007f8a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	69db      	ldr	r3, [r3, #28]
 8007f92:	4917      	ldr	r1, [pc, #92]	@ (8007ff0 <HAL_RCC_ClockConfig+0x358>)
 8007f94:	4313      	orrs	r3, r2
 8007f96:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007f98:	f000 f834 	bl	8008004 <HAL_RCC_GetSysClockFreq>
 8007f9c:	4602      	mov	r2, r0
 8007f9e:	4b14      	ldr	r3, [pc, #80]	@ (8007ff0 <HAL_RCC_ClockConfig+0x358>)
 8007fa0:	699b      	ldr	r3, [r3, #24]
 8007fa2:	0a1b      	lsrs	r3, r3, #8
 8007fa4:	f003 030f 	and.w	r3, r3, #15
 8007fa8:	4912      	ldr	r1, [pc, #72]	@ (8007ff4 <HAL_RCC_ClockConfig+0x35c>)
 8007faa:	5ccb      	ldrb	r3, [r1, r3]
 8007fac:	f003 031f 	and.w	r3, r3, #31
 8007fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8007fb4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007fb6:	4b0e      	ldr	r3, [pc, #56]	@ (8007ff0 <HAL_RCC_ClockConfig+0x358>)
 8007fb8:	699b      	ldr	r3, [r3, #24]
 8007fba:	f003 030f 	and.w	r3, r3, #15
 8007fbe:	4a0d      	ldr	r2, [pc, #52]	@ (8007ff4 <HAL_RCC_ClockConfig+0x35c>)
 8007fc0:	5cd3      	ldrb	r3, [r2, r3]
 8007fc2:	f003 031f 	and.w	r3, r3, #31
 8007fc6:	693a      	ldr	r2, [r7, #16]
 8007fc8:	fa22 f303 	lsr.w	r3, r2, r3
 8007fcc:	4a0a      	ldr	r2, [pc, #40]	@ (8007ff8 <HAL_RCC_ClockConfig+0x360>)
 8007fce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007fd0:	4a0a      	ldr	r2, [pc, #40]	@ (8007ffc <HAL_RCC_ClockConfig+0x364>)
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007fd6:	4b0a      	ldr	r3, [pc, #40]	@ (8008000 <HAL_RCC_ClockConfig+0x368>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f7fb faf0 	bl	80035c0 <HAL_InitTick>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3718      	adds	r7, #24
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}
 8007fee:	bf00      	nop
 8007ff0:	58024400 	.word	0x58024400
 8007ff4:	0800d0b0 	.word	0x0800d0b0
 8007ff8:	24000004 	.word	0x24000004
 8007ffc:	24000000 	.word	0x24000000
 8008000:	24000008 	.word	0x24000008

08008004 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008004:	b480      	push	{r7}
 8008006:	b089      	sub	sp, #36	@ 0x24
 8008008:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800800a:	4bb3      	ldr	r3, [pc, #716]	@ (80082d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800800c:	691b      	ldr	r3, [r3, #16]
 800800e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008012:	2b18      	cmp	r3, #24
 8008014:	f200 8155 	bhi.w	80082c2 <HAL_RCC_GetSysClockFreq+0x2be>
 8008018:	a201      	add	r2, pc, #4	@ (adr r2, 8008020 <HAL_RCC_GetSysClockFreq+0x1c>)
 800801a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800801e:	bf00      	nop
 8008020:	08008085 	.word	0x08008085
 8008024:	080082c3 	.word	0x080082c3
 8008028:	080082c3 	.word	0x080082c3
 800802c:	080082c3 	.word	0x080082c3
 8008030:	080082c3 	.word	0x080082c3
 8008034:	080082c3 	.word	0x080082c3
 8008038:	080082c3 	.word	0x080082c3
 800803c:	080082c3 	.word	0x080082c3
 8008040:	080080ab 	.word	0x080080ab
 8008044:	080082c3 	.word	0x080082c3
 8008048:	080082c3 	.word	0x080082c3
 800804c:	080082c3 	.word	0x080082c3
 8008050:	080082c3 	.word	0x080082c3
 8008054:	080082c3 	.word	0x080082c3
 8008058:	080082c3 	.word	0x080082c3
 800805c:	080082c3 	.word	0x080082c3
 8008060:	080080b1 	.word	0x080080b1
 8008064:	080082c3 	.word	0x080082c3
 8008068:	080082c3 	.word	0x080082c3
 800806c:	080082c3 	.word	0x080082c3
 8008070:	080082c3 	.word	0x080082c3
 8008074:	080082c3 	.word	0x080082c3
 8008078:	080082c3 	.word	0x080082c3
 800807c:	080082c3 	.word	0x080082c3
 8008080:	080080b7 	.word	0x080080b7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008084:	4b94      	ldr	r3, [pc, #592]	@ (80082d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f003 0320 	and.w	r3, r3, #32
 800808c:	2b00      	cmp	r3, #0
 800808e:	d009      	beq.n	80080a4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008090:	4b91      	ldr	r3, [pc, #580]	@ (80082d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	08db      	lsrs	r3, r3, #3
 8008096:	f003 0303 	and.w	r3, r3, #3
 800809a:	4a90      	ldr	r2, [pc, #576]	@ (80082dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800809c:	fa22 f303 	lsr.w	r3, r2, r3
 80080a0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80080a2:	e111      	b.n	80082c8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80080a4:	4b8d      	ldr	r3, [pc, #564]	@ (80082dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80080a6:	61bb      	str	r3, [r7, #24]
      break;
 80080a8:	e10e      	b.n	80082c8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80080aa:	4b8d      	ldr	r3, [pc, #564]	@ (80082e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80080ac:	61bb      	str	r3, [r7, #24]
      break;
 80080ae:	e10b      	b.n	80082c8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80080b0:	4b8c      	ldr	r3, [pc, #560]	@ (80082e4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80080b2:	61bb      	str	r3, [r7, #24]
      break;
 80080b4:	e108      	b.n	80082c8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80080b6:	4b88      	ldr	r3, [pc, #544]	@ (80082d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80080b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080ba:	f003 0303 	and.w	r3, r3, #3
 80080be:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80080c0:	4b85      	ldr	r3, [pc, #532]	@ (80082d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80080c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080c4:	091b      	lsrs	r3, r3, #4
 80080c6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80080ca:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80080cc:	4b82      	ldr	r3, [pc, #520]	@ (80082d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80080ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080d0:	f003 0301 	and.w	r3, r3, #1
 80080d4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80080d6:	4b80      	ldr	r3, [pc, #512]	@ (80082d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80080d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080da:	08db      	lsrs	r3, r3, #3
 80080dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80080e0:	68fa      	ldr	r2, [r7, #12]
 80080e2:	fb02 f303 	mul.w	r3, r2, r3
 80080e6:	ee07 3a90 	vmov	s15, r3
 80080ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080ee:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	f000 80e1 	beq.w	80082bc <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	2b02      	cmp	r3, #2
 80080fe:	f000 8083 	beq.w	8008208 <HAL_RCC_GetSysClockFreq+0x204>
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	2b02      	cmp	r3, #2
 8008106:	f200 80a1 	bhi.w	800824c <HAL_RCC_GetSysClockFreq+0x248>
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d003      	beq.n	8008118 <HAL_RCC_GetSysClockFreq+0x114>
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	2b01      	cmp	r3, #1
 8008114:	d056      	beq.n	80081c4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008116:	e099      	b.n	800824c <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008118:	4b6f      	ldr	r3, [pc, #444]	@ (80082d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f003 0320 	and.w	r3, r3, #32
 8008120:	2b00      	cmp	r3, #0
 8008122:	d02d      	beq.n	8008180 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008124:	4b6c      	ldr	r3, [pc, #432]	@ (80082d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	08db      	lsrs	r3, r3, #3
 800812a:	f003 0303 	and.w	r3, r3, #3
 800812e:	4a6b      	ldr	r2, [pc, #428]	@ (80082dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008130:	fa22 f303 	lsr.w	r3, r2, r3
 8008134:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	ee07 3a90 	vmov	s15, r3
 800813c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	ee07 3a90 	vmov	s15, r3
 8008146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800814a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800814e:	4b62      	ldr	r3, [pc, #392]	@ (80082d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008156:	ee07 3a90 	vmov	s15, r3
 800815a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800815e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008162:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80082e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008166:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800816a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800816e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008172:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800817a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800817e:	e087      	b.n	8008290 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	ee07 3a90 	vmov	s15, r3
 8008186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800818a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80082ec <HAL_RCC_GetSysClockFreq+0x2e8>
 800818e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008192:	4b51      	ldr	r3, [pc, #324]	@ (80082d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008196:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800819a:	ee07 3a90 	vmov	s15, r3
 800819e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80081a6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80082e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80081aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80081b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80081c2:	e065      	b.n	8008290 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	ee07 3a90 	vmov	s15, r3
 80081ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081ce:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80082f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80081d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081d6:	4b40      	ldr	r3, [pc, #256]	@ (80082d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80081d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081de:	ee07 3a90 	vmov	s15, r3
 80081e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80081ea:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80082e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80081ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80081fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008202:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008206:	e043      	b.n	8008290 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	ee07 3a90 	vmov	s15, r3
 800820e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008212:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80082f4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008216:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800821a:	4b2f      	ldr	r3, [pc, #188]	@ (80082d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800821c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800821e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008222:	ee07 3a90 	vmov	s15, r3
 8008226:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800822a:	ed97 6a02 	vldr	s12, [r7, #8]
 800822e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80082e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008232:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008236:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800823a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800823e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008242:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008246:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800824a:	e021      	b.n	8008290 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	ee07 3a90 	vmov	s15, r3
 8008252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008256:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80082f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800825a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800825e:	4b1e      	ldr	r3, [pc, #120]	@ (80082d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008262:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008266:	ee07 3a90 	vmov	s15, r3
 800826a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800826e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008272:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80082e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008276:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800827a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800827e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008282:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008286:	ee67 7a27 	vmul.f32	s15, s14, s15
 800828a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800828e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008290:	4b11      	ldr	r3, [pc, #68]	@ (80082d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008294:	0a5b      	lsrs	r3, r3, #9
 8008296:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800829a:	3301      	adds	r3, #1
 800829c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	ee07 3a90 	vmov	s15, r3
 80082a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80082a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80082ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80082b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80082b4:	ee17 3a90 	vmov	r3, s15
 80082b8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80082ba:	e005      	b.n	80082c8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80082bc:	2300      	movs	r3, #0
 80082be:	61bb      	str	r3, [r7, #24]
      break;
 80082c0:	e002      	b.n	80082c8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80082c2:	4b07      	ldr	r3, [pc, #28]	@ (80082e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80082c4:	61bb      	str	r3, [r7, #24]
      break;
 80082c6:	bf00      	nop
  }

  return sysclockfreq;
 80082c8:	69bb      	ldr	r3, [r7, #24]
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3724      	adds	r7, #36	@ 0x24
 80082ce:	46bd      	mov	sp, r7
 80082d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d4:	4770      	bx	lr
 80082d6:	bf00      	nop
 80082d8:	58024400 	.word	0x58024400
 80082dc:	03d09000 	.word	0x03d09000
 80082e0:	003d0900 	.word	0x003d0900
 80082e4:	017d7840 	.word	0x017d7840
 80082e8:	46000000 	.word	0x46000000
 80082ec:	4c742400 	.word	0x4c742400
 80082f0:	4a742400 	.word	0x4a742400
 80082f4:	4bbebc20 	.word	0x4bbebc20

080082f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b082      	sub	sp, #8
 80082fc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80082fe:	f7ff fe81 	bl	8008004 <HAL_RCC_GetSysClockFreq>
 8008302:	4602      	mov	r2, r0
 8008304:	4b10      	ldr	r3, [pc, #64]	@ (8008348 <HAL_RCC_GetHCLKFreq+0x50>)
 8008306:	699b      	ldr	r3, [r3, #24]
 8008308:	0a1b      	lsrs	r3, r3, #8
 800830a:	f003 030f 	and.w	r3, r3, #15
 800830e:	490f      	ldr	r1, [pc, #60]	@ (800834c <HAL_RCC_GetHCLKFreq+0x54>)
 8008310:	5ccb      	ldrb	r3, [r1, r3]
 8008312:	f003 031f 	and.w	r3, r3, #31
 8008316:	fa22 f303 	lsr.w	r3, r2, r3
 800831a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800831c:	4b0a      	ldr	r3, [pc, #40]	@ (8008348 <HAL_RCC_GetHCLKFreq+0x50>)
 800831e:	699b      	ldr	r3, [r3, #24]
 8008320:	f003 030f 	and.w	r3, r3, #15
 8008324:	4a09      	ldr	r2, [pc, #36]	@ (800834c <HAL_RCC_GetHCLKFreq+0x54>)
 8008326:	5cd3      	ldrb	r3, [r2, r3]
 8008328:	f003 031f 	and.w	r3, r3, #31
 800832c:	687a      	ldr	r2, [r7, #4]
 800832e:	fa22 f303 	lsr.w	r3, r2, r3
 8008332:	4a07      	ldr	r2, [pc, #28]	@ (8008350 <HAL_RCC_GetHCLKFreq+0x58>)
 8008334:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008336:	4a07      	ldr	r2, [pc, #28]	@ (8008354 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800833c:	4b04      	ldr	r3, [pc, #16]	@ (8008350 <HAL_RCC_GetHCLKFreq+0x58>)
 800833e:	681b      	ldr	r3, [r3, #0]
}
 8008340:	4618      	mov	r0, r3
 8008342:	3708      	adds	r7, #8
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}
 8008348:	58024400 	.word	0x58024400
 800834c:	0800d0b0 	.word	0x0800d0b0
 8008350:	24000004 	.word	0x24000004
 8008354:	24000000 	.word	0x24000000

08008358 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800835c:	f7ff ffcc 	bl	80082f8 <HAL_RCC_GetHCLKFreq>
 8008360:	4602      	mov	r2, r0
 8008362:	4b06      	ldr	r3, [pc, #24]	@ (800837c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008364:	69db      	ldr	r3, [r3, #28]
 8008366:	091b      	lsrs	r3, r3, #4
 8008368:	f003 0307 	and.w	r3, r3, #7
 800836c:	4904      	ldr	r1, [pc, #16]	@ (8008380 <HAL_RCC_GetPCLK1Freq+0x28>)
 800836e:	5ccb      	ldrb	r3, [r1, r3]
 8008370:	f003 031f 	and.w	r3, r3, #31
 8008374:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008378:	4618      	mov	r0, r3
 800837a:	bd80      	pop	{r7, pc}
 800837c:	58024400 	.word	0x58024400
 8008380:	0800d0b0 	.word	0x0800d0b0

08008384 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008388:	f7ff ffb6 	bl	80082f8 <HAL_RCC_GetHCLKFreq>
 800838c:	4602      	mov	r2, r0
 800838e:	4b06      	ldr	r3, [pc, #24]	@ (80083a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008390:	69db      	ldr	r3, [r3, #28]
 8008392:	0a1b      	lsrs	r3, r3, #8
 8008394:	f003 0307 	and.w	r3, r3, #7
 8008398:	4904      	ldr	r1, [pc, #16]	@ (80083ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800839a:	5ccb      	ldrb	r3, [r1, r3]
 800839c:	f003 031f 	and.w	r3, r3, #31
 80083a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	bd80      	pop	{r7, pc}
 80083a8:	58024400 	.word	0x58024400
 80083ac:	0800d0b0 	.word	0x0800d0b0

080083b0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80083b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80083b4:	b0ca      	sub	sp, #296	@ 0x128
 80083b6:	af00      	add	r7, sp, #0
 80083b8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80083bc:	2300      	movs	r3, #0
 80083be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80083c2:	2300      	movs	r3, #0
 80083c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80083c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80083d4:	2500      	movs	r5, #0
 80083d6:	ea54 0305 	orrs.w	r3, r4, r5
 80083da:	d049      	beq.n	8008470 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80083dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083e0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80083e2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80083e6:	d02f      	beq.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80083e8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80083ec:	d828      	bhi.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80083ee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80083f2:	d01a      	beq.n	800842a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80083f4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80083f8:	d822      	bhi.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d003      	beq.n	8008406 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80083fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008402:	d007      	beq.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008404:	e01c      	b.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008406:	4bb8      	ldr	r3, [pc, #736]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800840a:	4ab7      	ldr	r2, [pc, #732]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800840c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008410:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008412:	e01a      	b.n	800844a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008414:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008418:	3308      	adds	r3, #8
 800841a:	2102      	movs	r1, #2
 800841c:	4618      	mov	r0, r3
 800841e:	f002 fb61 	bl	800aae4 <RCCEx_PLL2_Config>
 8008422:	4603      	mov	r3, r0
 8008424:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008428:	e00f      	b.n	800844a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800842a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800842e:	3328      	adds	r3, #40	@ 0x28
 8008430:	2102      	movs	r1, #2
 8008432:	4618      	mov	r0, r3
 8008434:	f002 fc08 	bl	800ac48 <RCCEx_PLL3_Config>
 8008438:	4603      	mov	r3, r0
 800843a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800843e:	e004      	b.n	800844a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008440:	2301      	movs	r3, #1
 8008442:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008446:	e000      	b.n	800844a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008448:	bf00      	nop
    }

    if (ret == HAL_OK)
 800844a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800844e:	2b00      	cmp	r3, #0
 8008450:	d10a      	bne.n	8008468 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008452:	4ba5      	ldr	r3, [pc, #660]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008454:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008456:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800845a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800845e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008460:	4aa1      	ldr	r2, [pc, #644]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008462:	430b      	orrs	r3, r1
 8008464:	6513      	str	r3, [r2, #80]	@ 0x50
 8008466:	e003      	b.n	8008470 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008468:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800846c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008470:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008478:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800847c:	f04f 0900 	mov.w	r9, #0
 8008480:	ea58 0309 	orrs.w	r3, r8, r9
 8008484:	d047      	beq.n	8008516 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008486:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800848a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800848c:	2b04      	cmp	r3, #4
 800848e:	d82a      	bhi.n	80084e6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008490:	a201      	add	r2, pc, #4	@ (adr r2, 8008498 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008496:	bf00      	nop
 8008498:	080084ad 	.word	0x080084ad
 800849c:	080084bb 	.word	0x080084bb
 80084a0:	080084d1 	.word	0x080084d1
 80084a4:	080084ef 	.word	0x080084ef
 80084a8:	080084ef 	.word	0x080084ef
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084ac:	4b8e      	ldr	r3, [pc, #568]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80084ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084b0:	4a8d      	ldr	r2, [pc, #564]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80084b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80084b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80084b8:	e01a      	b.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80084ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084be:	3308      	adds	r3, #8
 80084c0:	2100      	movs	r1, #0
 80084c2:	4618      	mov	r0, r3
 80084c4:	f002 fb0e 	bl	800aae4 <RCCEx_PLL2_Config>
 80084c8:	4603      	mov	r3, r0
 80084ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80084ce:	e00f      	b.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80084d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084d4:	3328      	adds	r3, #40	@ 0x28
 80084d6:	2100      	movs	r1, #0
 80084d8:	4618      	mov	r0, r3
 80084da:	f002 fbb5 	bl	800ac48 <RCCEx_PLL3_Config>
 80084de:	4603      	mov	r3, r0
 80084e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80084e4:	e004      	b.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80084e6:	2301      	movs	r3, #1
 80084e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80084ec:	e000      	b.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80084ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d10a      	bne.n	800850e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80084f8:	4b7b      	ldr	r3, [pc, #492]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80084fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084fc:	f023 0107 	bic.w	r1, r3, #7
 8008500:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008504:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008506:	4a78      	ldr	r2, [pc, #480]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008508:	430b      	orrs	r3, r1
 800850a:	6513      	str	r3, [r2, #80]	@ 0x50
 800850c:	e003      	b.n	8008516 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800850e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008512:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008516:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800851a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800851e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8008522:	f04f 0b00 	mov.w	fp, #0
 8008526:	ea5a 030b 	orrs.w	r3, sl, fp
 800852a:	d04c      	beq.n	80085c6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800852c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008530:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008532:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008536:	d030      	beq.n	800859a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8008538:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800853c:	d829      	bhi.n	8008592 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800853e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008540:	d02d      	beq.n	800859e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008542:	2bc0      	cmp	r3, #192	@ 0xc0
 8008544:	d825      	bhi.n	8008592 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008546:	2b80      	cmp	r3, #128	@ 0x80
 8008548:	d018      	beq.n	800857c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800854a:	2b80      	cmp	r3, #128	@ 0x80
 800854c:	d821      	bhi.n	8008592 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800854e:	2b00      	cmp	r3, #0
 8008550:	d002      	beq.n	8008558 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8008552:	2b40      	cmp	r3, #64	@ 0x40
 8008554:	d007      	beq.n	8008566 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8008556:	e01c      	b.n	8008592 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008558:	4b63      	ldr	r3, [pc, #396]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800855a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800855c:	4a62      	ldr	r2, [pc, #392]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800855e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008562:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008564:	e01c      	b.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008566:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800856a:	3308      	adds	r3, #8
 800856c:	2100      	movs	r1, #0
 800856e:	4618      	mov	r0, r3
 8008570:	f002 fab8 	bl	800aae4 <RCCEx_PLL2_Config>
 8008574:	4603      	mov	r3, r0
 8008576:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800857a:	e011      	b.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800857c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008580:	3328      	adds	r3, #40	@ 0x28
 8008582:	2100      	movs	r1, #0
 8008584:	4618      	mov	r0, r3
 8008586:	f002 fb5f 	bl	800ac48 <RCCEx_PLL3_Config>
 800858a:	4603      	mov	r3, r0
 800858c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008590:	e006      	b.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008592:	2301      	movs	r3, #1
 8008594:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008598:	e002      	b.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800859a:	bf00      	nop
 800859c:	e000      	b.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800859e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d10a      	bne.n	80085be <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80085a8:	4b4f      	ldr	r3, [pc, #316]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80085aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085ac:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80085b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80085b6:	4a4c      	ldr	r2, [pc, #304]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80085b8:	430b      	orrs	r3, r1
 80085ba:	6513      	str	r3, [r2, #80]	@ 0x50
 80085bc:	e003      	b.n	80085c6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80085c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80085c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ce:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80085d2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80085d6:	2300      	movs	r3, #0
 80085d8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80085dc:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80085e0:	460b      	mov	r3, r1
 80085e2:	4313      	orrs	r3, r2
 80085e4:	d053      	beq.n	800868e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80085e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085ea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80085ee:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80085f2:	d035      	beq.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80085f4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80085f8:	d82e      	bhi.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80085fa:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80085fe:	d031      	beq.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8008600:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008604:	d828      	bhi.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008606:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800860a:	d01a      	beq.n	8008642 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800860c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008610:	d822      	bhi.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008612:	2b00      	cmp	r3, #0
 8008614:	d003      	beq.n	800861e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8008616:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800861a:	d007      	beq.n	800862c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800861c:	e01c      	b.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800861e:	4b32      	ldr	r3, [pc, #200]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008622:	4a31      	ldr	r2, [pc, #196]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008624:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008628:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800862a:	e01c      	b.n	8008666 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800862c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008630:	3308      	adds	r3, #8
 8008632:	2100      	movs	r1, #0
 8008634:	4618      	mov	r0, r3
 8008636:	f002 fa55 	bl	800aae4 <RCCEx_PLL2_Config>
 800863a:	4603      	mov	r3, r0
 800863c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008640:	e011      	b.n	8008666 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008642:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008646:	3328      	adds	r3, #40	@ 0x28
 8008648:	2100      	movs	r1, #0
 800864a:	4618      	mov	r0, r3
 800864c:	f002 fafc 	bl	800ac48 <RCCEx_PLL3_Config>
 8008650:	4603      	mov	r3, r0
 8008652:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008656:	e006      	b.n	8008666 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008658:	2301      	movs	r3, #1
 800865a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800865e:	e002      	b.n	8008666 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008660:	bf00      	nop
 8008662:	e000      	b.n	8008666 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008664:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008666:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800866a:	2b00      	cmp	r3, #0
 800866c:	d10b      	bne.n	8008686 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800866e:	4b1e      	ldr	r3, [pc, #120]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008670:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008672:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8008676:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800867a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800867e:	4a1a      	ldr	r2, [pc, #104]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008680:	430b      	orrs	r3, r1
 8008682:	6593      	str	r3, [r2, #88]	@ 0x58
 8008684:	e003      	b.n	800868e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008686:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800868a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800868e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008696:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800869a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800869e:	2300      	movs	r3, #0
 80086a0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80086a4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80086a8:	460b      	mov	r3, r1
 80086aa:	4313      	orrs	r3, r2
 80086ac:	d056      	beq.n	800875c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80086ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086b2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80086b6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80086ba:	d038      	beq.n	800872e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80086bc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80086c0:	d831      	bhi.n	8008726 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80086c2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80086c6:	d034      	beq.n	8008732 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80086c8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80086cc:	d82b      	bhi.n	8008726 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80086ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80086d2:	d01d      	beq.n	8008710 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80086d4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80086d8:	d825      	bhi.n	8008726 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d006      	beq.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80086de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80086e2:	d00a      	beq.n	80086fa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80086e4:	e01f      	b.n	8008726 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80086e6:	bf00      	nop
 80086e8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086ec:	4ba2      	ldr	r3, [pc, #648]	@ (8008978 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80086ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086f0:	4aa1      	ldr	r2, [pc, #644]	@ (8008978 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80086f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80086f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80086f8:	e01c      	b.n	8008734 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80086fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086fe:	3308      	adds	r3, #8
 8008700:	2100      	movs	r1, #0
 8008702:	4618      	mov	r0, r3
 8008704:	f002 f9ee 	bl	800aae4 <RCCEx_PLL2_Config>
 8008708:	4603      	mov	r3, r0
 800870a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800870e:	e011      	b.n	8008734 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008710:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008714:	3328      	adds	r3, #40	@ 0x28
 8008716:	2100      	movs	r1, #0
 8008718:	4618      	mov	r0, r3
 800871a:	f002 fa95 	bl	800ac48 <RCCEx_PLL3_Config>
 800871e:	4603      	mov	r3, r0
 8008720:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008724:	e006      	b.n	8008734 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008726:	2301      	movs	r3, #1
 8008728:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800872c:	e002      	b.n	8008734 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800872e:	bf00      	nop
 8008730:	e000      	b.n	8008734 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008732:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008734:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008738:	2b00      	cmp	r3, #0
 800873a:	d10b      	bne.n	8008754 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800873c:	4b8e      	ldr	r3, [pc, #568]	@ (8008978 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800873e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008740:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8008744:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008748:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800874c:	4a8a      	ldr	r2, [pc, #552]	@ (8008978 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800874e:	430b      	orrs	r3, r1
 8008750:	6593      	str	r3, [r2, #88]	@ 0x58
 8008752:	e003      	b.n	800875c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008754:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008758:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800875c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008764:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008768:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800876c:	2300      	movs	r3, #0
 800876e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008772:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8008776:	460b      	mov	r3, r1
 8008778:	4313      	orrs	r3, r2
 800877a:	d03a      	beq.n	80087f2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800877c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008782:	2b30      	cmp	r3, #48	@ 0x30
 8008784:	d01f      	beq.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8008786:	2b30      	cmp	r3, #48	@ 0x30
 8008788:	d819      	bhi.n	80087be <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800878a:	2b20      	cmp	r3, #32
 800878c:	d00c      	beq.n	80087a8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800878e:	2b20      	cmp	r3, #32
 8008790:	d815      	bhi.n	80087be <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008792:	2b00      	cmp	r3, #0
 8008794:	d019      	beq.n	80087ca <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8008796:	2b10      	cmp	r3, #16
 8008798:	d111      	bne.n	80087be <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800879a:	4b77      	ldr	r3, [pc, #476]	@ (8008978 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800879c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800879e:	4a76      	ldr	r2, [pc, #472]	@ (8008978 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80087a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80087a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80087a6:	e011      	b.n	80087cc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80087a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087ac:	3308      	adds	r3, #8
 80087ae:	2102      	movs	r1, #2
 80087b0:	4618      	mov	r0, r3
 80087b2:	f002 f997 	bl	800aae4 <RCCEx_PLL2_Config>
 80087b6:	4603      	mov	r3, r0
 80087b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80087bc:	e006      	b.n	80087cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80087be:	2301      	movs	r3, #1
 80087c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80087c4:	e002      	b.n	80087cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80087c6:	bf00      	nop
 80087c8:	e000      	b.n	80087cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80087ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d10a      	bne.n	80087ea <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80087d4:	4b68      	ldr	r3, [pc, #416]	@ (8008978 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80087d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80087d8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80087dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80087e2:	4a65      	ldr	r2, [pc, #404]	@ (8008978 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80087e4:	430b      	orrs	r3, r1
 80087e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80087e8:	e003      	b.n	80087f2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80087f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087fa:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80087fe:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008802:	2300      	movs	r3, #0
 8008804:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008808:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800880c:	460b      	mov	r3, r1
 800880e:	4313      	orrs	r3, r2
 8008810:	d051      	beq.n	80088b6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008812:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008816:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008818:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800881c:	d035      	beq.n	800888a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800881e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008822:	d82e      	bhi.n	8008882 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008824:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008828:	d031      	beq.n	800888e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800882a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800882e:	d828      	bhi.n	8008882 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008830:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008834:	d01a      	beq.n	800886c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8008836:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800883a:	d822      	bhi.n	8008882 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800883c:	2b00      	cmp	r3, #0
 800883e:	d003      	beq.n	8008848 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8008840:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008844:	d007      	beq.n	8008856 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8008846:	e01c      	b.n	8008882 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008848:	4b4b      	ldr	r3, [pc, #300]	@ (8008978 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800884a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800884c:	4a4a      	ldr	r2, [pc, #296]	@ (8008978 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800884e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008852:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008854:	e01c      	b.n	8008890 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008856:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800885a:	3308      	adds	r3, #8
 800885c:	2100      	movs	r1, #0
 800885e:	4618      	mov	r0, r3
 8008860:	f002 f940 	bl	800aae4 <RCCEx_PLL2_Config>
 8008864:	4603      	mov	r3, r0
 8008866:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800886a:	e011      	b.n	8008890 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800886c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008870:	3328      	adds	r3, #40	@ 0x28
 8008872:	2100      	movs	r1, #0
 8008874:	4618      	mov	r0, r3
 8008876:	f002 f9e7 	bl	800ac48 <RCCEx_PLL3_Config>
 800887a:	4603      	mov	r3, r0
 800887c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008880:	e006      	b.n	8008890 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008882:	2301      	movs	r3, #1
 8008884:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008888:	e002      	b.n	8008890 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800888a:	bf00      	nop
 800888c:	e000      	b.n	8008890 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800888e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008890:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008894:	2b00      	cmp	r3, #0
 8008896:	d10a      	bne.n	80088ae <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008898:	4b37      	ldr	r3, [pc, #220]	@ (8008978 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800889a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800889c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80088a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80088a6:	4a34      	ldr	r2, [pc, #208]	@ (8008978 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80088a8:	430b      	orrs	r3, r1
 80088aa:	6513      	str	r3, [r2, #80]	@ 0x50
 80088ac:	e003      	b.n	80088b6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80088b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088be:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80088c2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80088c6:	2300      	movs	r3, #0
 80088c8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80088cc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80088d0:	460b      	mov	r3, r1
 80088d2:	4313      	orrs	r3, r2
 80088d4:	d056      	beq.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80088d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80088dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80088e0:	d033      	beq.n	800894a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80088e2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80088e6:	d82c      	bhi.n	8008942 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80088e8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80088ec:	d02f      	beq.n	800894e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80088ee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80088f2:	d826      	bhi.n	8008942 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80088f4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80088f8:	d02b      	beq.n	8008952 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80088fa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80088fe:	d820      	bhi.n	8008942 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008900:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008904:	d012      	beq.n	800892c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8008906:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800890a:	d81a      	bhi.n	8008942 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800890c:	2b00      	cmp	r3, #0
 800890e:	d022      	beq.n	8008956 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8008910:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008914:	d115      	bne.n	8008942 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008916:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800891a:	3308      	adds	r3, #8
 800891c:	2101      	movs	r1, #1
 800891e:	4618      	mov	r0, r3
 8008920:	f002 f8e0 	bl	800aae4 <RCCEx_PLL2_Config>
 8008924:	4603      	mov	r3, r0
 8008926:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800892a:	e015      	b.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800892c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008930:	3328      	adds	r3, #40	@ 0x28
 8008932:	2101      	movs	r1, #1
 8008934:	4618      	mov	r0, r3
 8008936:	f002 f987 	bl	800ac48 <RCCEx_PLL3_Config>
 800893a:	4603      	mov	r3, r0
 800893c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008940:	e00a      	b.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008942:	2301      	movs	r3, #1
 8008944:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008948:	e006      	b.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800894a:	bf00      	nop
 800894c:	e004      	b.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800894e:	bf00      	nop
 8008950:	e002      	b.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008952:	bf00      	nop
 8008954:	e000      	b.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008956:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008958:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800895c:	2b00      	cmp	r3, #0
 800895e:	d10d      	bne.n	800897c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008960:	4b05      	ldr	r3, [pc, #20]	@ (8008978 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008962:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008964:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8008968:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800896c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800896e:	4a02      	ldr	r2, [pc, #8]	@ (8008978 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008970:	430b      	orrs	r3, r1
 8008972:	6513      	str	r3, [r2, #80]	@ 0x50
 8008974:	e006      	b.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8008976:	bf00      	nop
 8008978:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800897c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008980:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008984:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800898c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8008990:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008994:	2300      	movs	r3, #0
 8008996:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800899a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800899e:	460b      	mov	r3, r1
 80089a0:	4313      	orrs	r3, r2
 80089a2:	d055      	beq.n	8008a50 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80089a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80089ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80089b0:	d033      	beq.n	8008a1a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80089b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80089b6:	d82c      	bhi.n	8008a12 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80089b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089bc:	d02f      	beq.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80089be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089c2:	d826      	bhi.n	8008a12 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80089c4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80089c8:	d02b      	beq.n	8008a22 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80089ca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80089ce:	d820      	bhi.n	8008a12 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80089d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80089d4:	d012      	beq.n	80089fc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80089d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80089da:	d81a      	bhi.n	8008a12 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d022      	beq.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80089e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80089e4:	d115      	bne.n	8008a12 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80089e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089ea:	3308      	adds	r3, #8
 80089ec:	2101      	movs	r1, #1
 80089ee:	4618      	mov	r0, r3
 80089f0:	f002 f878 	bl	800aae4 <RCCEx_PLL2_Config>
 80089f4:	4603      	mov	r3, r0
 80089f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80089fa:	e015      	b.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80089fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a00:	3328      	adds	r3, #40	@ 0x28
 8008a02:	2101      	movs	r1, #1
 8008a04:	4618      	mov	r0, r3
 8008a06:	f002 f91f 	bl	800ac48 <RCCEx_PLL3_Config>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008a10:	e00a      	b.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8008a12:	2301      	movs	r3, #1
 8008a14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008a18:	e006      	b.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008a1a:	bf00      	nop
 8008a1c:	e004      	b.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008a1e:	bf00      	nop
 8008a20:	e002      	b.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008a22:	bf00      	nop
 8008a24:	e000      	b.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008a26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d10b      	bne.n	8008a48 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008a30:	4ba3      	ldr	r3, [pc, #652]	@ (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008a32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a34:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008a38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a3c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008a40:	4a9f      	ldr	r2, [pc, #636]	@ (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008a42:	430b      	orrs	r3, r1
 8008a44:	6593      	str	r3, [r2, #88]	@ 0x58
 8008a46:	e003      	b.n	8008a50 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a4c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a58:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8008a5c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008a60:	2300      	movs	r3, #0
 8008a62:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008a66:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008a6a:	460b      	mov	r3, r1
 8008a6c:	4313      	orrs	r3, r2
 8008a6e:	d037      	beq.n	8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008a70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a7a:	d00e      	beq.n	8008a9a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8008a7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a80:	d816      	bhi.n	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d018      	beq.n	8008ab8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8008a86:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008a8a:	d111      	bne.n	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a8c:	4b8c      	ldr	r3, [pc, #560]	@ (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008a8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a90:	4a8b      	ldr	r2, [pc, #556]	@ (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008a92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008a96:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008a98:	e00f      	b.n	8008aba <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a9e:	3308      	adds	r3, #8
 8008aa0:	2101      	movs	r1, #1
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f002 f81e 	bl	800aae4 <RCCEx_PLL2_Config>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008aae:	e004      	b.n	8008aba <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008ab6:	e000      	b.n	8008aba <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8008ab8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008aba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d10a      	bne.n	8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008ac2:	4b7f      	ldr	r3, [pc, #508]	@ (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008ac4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ac6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ace:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ad0:	4a7b      	ldr	r2, [pc, #492]	@ (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008ad2:	430b      	orrs	r3, r1
 8008ad4:	6513      	str	r3, [r2, #80]	@ 0x50
 8008ad6:	e003      	b.n	8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ad8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008adc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008ae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ae8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8008aec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008af0:	2300      	movs	r3, #0
 8008af2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008af6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8008afa:	460b      	mov	r3, r1
 8008afc:	4313      	orrs	r3, r2
 8008afe:	d039      	beq.n	8008b74 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008b06:	2b03      	cmp	r3, #3
 8008b08:	d81c      	bhi.n	8008b44 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8008b0a:	a201      	add	r2, pc, #4	@ (adr r2, 8008b10 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8008b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b10:	08008b4d 	.word	0x08008b4d
 8008b14:	08008b21 	.word	0x08008b21
 8008b18:	08008b2f 	.word	0x08008b2f
 8008b1c:	08008b4d 	.word	0x08008b4d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b20:	4b67      	ldr	r3, [pc, #412]	@ (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b24:	4a66      	ldr	r2, [pc, #408]	@ (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008b26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008b2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008b2c:	e00f      	b.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b32:	3308      	adds	r3, #8
 8008b34:	2102      	movs	r1, #2
 8008b36:	4618      	mov	r0, r3
 8008b38:	f001 ffd4 	bl	800aae4 <RCCEx_PLL2_Config>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008b42:	e004      	b.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008b44:	2301      	movs	r3, #1
 8008b46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008b4a:	e000      	b.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8008b4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d10a      	bne.n	8008b6c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008b56:	4b5a      	ldr	r3, [pc, #360]	@ (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008b58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b5a:	f023 0103 	bic.w	r1, r3, #3
 8008b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008b64:	4a56      	ldr	r2, [pc, #344]	@ (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008b66:	430b      	orrs	r3, r1
 8008b68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008b6a:	e003      	b.n	8008b74 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b7c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8008b80:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008b84:	2300      	movs	r3, #0
 8008b86:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008b8a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8008b8e:	460b      	mov	r3, r1
 8008b90:	4313      	orrs	r3, r2
 8008b92:	f000 809f 	beq.w	8008cd4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008b96:	4b4b      	ldr	r3, [pc, #300]	@ (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	4a4a      	ldr	r2, [pc, #296]	@ (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008b9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008ba0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008ba2:	f7fa fd57 	bl	8003654 <HAL_GetTick>
 8008ba6:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008baa:	e00b      	b.n	8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008bac:	f7fa fd52 	bl	8003654 <HAL_GetTick>
 8008bb0:	4602      	mov	r2, r0
 8008bb2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8008bb6:	1ad3      	subs	r3, r2, r3
 8008bb8:	2b64      	cmp	r3, #100	@ 0x64
 8008bba:	d903      	bls.n	8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8008bbc:	2303      	movs	r3, #3
 8008bbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008bc2:	e005      	b.n	8008bd0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008bc4:	4b3f      	ldr	r3, [pc, #252]	@ (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d0ed      	beq.n	8008bac <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8008bd0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d179      	bne.n	8008ccc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008bd8:	4b39      	ldr	r3, [pc, #228]	@ (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008bda:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008bdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008be0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008be4:	4053      	eors	r3, r2
 8008be6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d015      	beq.n	8008c1a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008bee:	4b34      	ldr	r3, [pc, #208]	@ (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008bf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008bf2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008bf6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008bfa:	4b31      	ldr	r3, [pc, #196]	@ (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008bfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008bfe:	4a30      	ldr	r2, [pc, #192]	@ (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008c00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008c04:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008c06:	4b2e      	ldr	r3, [pc, #184]	@ (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008c08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c0a:	4a2d      	ldr	r2, [pc, #180]	@ (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008c0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008c10:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008c12:	4a2b      	ldr	r2, [pc, #172]	@ (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008c14:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8008c18:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c1e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008c22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c26:	d118      	bne.n	8008c5a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c28:	f7fa fd14 	bl	8003654 <HAL_GetTick>
 8008c2c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008c30:	e00d      	b.n	8008c4e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c32:	f7fa fd0f 	bl	8003654 <HAL_GetTick>
 8008c36:	4602      	mov	r2, r0
 8008c38:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8008c3c:	1ad2      	subs	r2, r2, r3
 8008c3e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008c42:	429a      	cmp	r2, r3
 8008c44:	d903      	bls.n	8008c4e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8008c46:	2303      	movs	r3, #3
 8008c48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8008c4c:	e005      	b.n	8008c5a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008c4e:	4b1c      	ldr	r3, [pc, #112]	@ (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008c50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c52:	f003 0302 	and.w	r3, r3, #2
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d0eb      	beq.n	8008c32 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8008c5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d129      	bne.n	8008cb6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c66:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008c6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008c6e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008c72:	d10e      	bne.n	8008c92 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8008c74:	4b12      	ldr	r3, [pc, #72]	@ (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008c76:	691b      	ldr	r3, [r3, #16]
 8008c78:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8008c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c80:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008c84:	091a      	lsrs	r2, r3, #4
 8008c86:	4b10      	ldr	r3, [pc, #64]	@ (8008cc8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8008c88:	4013      	ands	r3, r2
 8008c8a:	4a0d      	ldr	r2, [pc, #52]	@ (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008c8c:	430b      	orrs	r3, r1
 8008c8e:	6113      	str	r3, [r2, #16]
 8008c90:	e005      	b.n	8008c9e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8008c92:	4b0b      	ldr	r3, [pc, #44]	@ (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008c94:	691b      	ldr	r3, [r3, #16]
 8008c96:	4a0a      	ldr	r2, [pc, #40]	@ (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008c98:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008c9c:	6113      	str	r3, [r2, #16]
 8008c9e:	4b08      	ldr	r3, [pc, #32]	@ (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008ca0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8008ca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ca6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008caa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008cae:	4a04      	ldr	r2, [pc, #16]	@ (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008cb0:	430b      	orrs	r3, r1
 8008cb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8008cb4:	e00e      	b.n	8008cd4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008cb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008cba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8008cbe:	e009      	b.n	8008cd4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008cc0:	58024400 	.word	0x58024400
 8008cc4:	58024800 	.word	0x58024800
 8008cc8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ccc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008cd0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cdc:	f002 0301 	and.w	r3, r2, #1
 8008ce0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008cea:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008cee:	460b      	mov	r3, r1
 8008cf0:	4313      	orrs	r3, r2
 8008cf2:	f000 8089 	beq.w	8008e08 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8008cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cfa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008cfc:	2b28      	cmp	r3, #40	@ 0x28
 8008cfe:	d86b      	bhi.n	8008dd8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8008d00:	a201      	add	r2, pc, #4	@ (adr r2, 8008d08 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d06:	bf00      	nop
 8008d08:	08008de1 	.word	0x08008de1
 8008d0c:	08008dd9 	.word	0x08008dd9
 8008d10:	08008dd9 	.word	0x08008dd9
 8008d14:	08008dd9 	.word	0x08008dd9
 8008d18:	08008dd9 	.word	0x08008dd9
 8008d1c:	08008dd9 	.word	0x08008dd9
 8008d20:	08008dd9 	.word	0x08008dd9
 8008d24:	08008dd9 	.word	0x08008dd9
 8008d28:	08008dad 	.word	0x08008dad
 8008d2c:	08008dd9 	.word	0x08008dd9
 8008d30:	08008dd9 	.word	0x08008dd9
 8008d34:	08008dd9 	.word	0x08008dd9
 8008d38:	08008dd9 	.word	0x08008dd9
 8008d3c:	08008dd9 	.word	0x08008dd9
 8008d40:	08008dd9 	.word	0x08008dd9
 8008d44:	08008dd9 	.word	0x08008dd9
 8008d48:	08008dc3 	.word	0x08008dc3
 8008d4c:	08008dd9 	.word	0x08008dd9
 8008d50:	08008dd9 	.word	0x08008dd9
 8008d54:	08008dd9 	.word	0x08008dd9
 8008d58:	08008dd9 	.word	0x08008dd9
 8008d5c:	08008dd9 	.word	0x08008dd9
 8008d60:	08008dd9 	.word	0x08008dd9
 8008d64:	08008dd9 	.word	0x08008dd9
 8008d68:	08008de1 	.word	0x08008de1
 8008d6c:	08008dd9 	.word	0x08008dd9
 8008d70:	08008dd9 	.word	0x08008dd9
 8008d74:	08008dd9 	.word	0x08008dd9
 8008d78:	08008dd9 	.word	0x08008dd9
 8008d7c:	08008dd9 	.word	0x08008dd9
 8008d80:	08008dd9 	.word	0x08008dd9
 8008d84:	08008dd9 	.word	0x08008dd9
 8008d88:	08008de1 	.word	0x08008de1
 8008d8c:	08008dd9 	.word	0x08008dd9
 8008d90:	08008dd9 	.word	0x08008dd9
 8008d94:	08008dd9 	.word	0x08008dd9
 8008d98:	08008dd9 	.word	0x08008dd9
 8008d9c:	08008dd9 	.word	0x08008dd9
 8008da0:	08008dd9 	.word	0x08008dd9
 8008da4:	08008dd9 	.word	0x08008dd9
 8008da8:	08008de1 	.word	0x08008de1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008dac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008db0:	3308      	adds	r3, #8
 8008db2:	2101      	movs	r1, #1
 8008db4:	4618      	mov	r0, r3
 8008db6:	f001 fe95 	bl	800aae4 <RCCEx_PLL2_Config>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008dc0:	e00f      	b.n	8008de2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dc6:	3328      	adds	r3, #40	@ 0x28
 8008dc8:	2101      	movs	r1, #1
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f001 ff3c 	bl	800ac48 <RCCEx_PLL3_Config>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008dd6:	e004      	b.n	8008de2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008dd8:	2301      	movs	r3, #1
 8008dda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008dde:	e000      	b.n	8008de2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8008de0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008de2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d10a      	bne.n	8008e00 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008dea:	4bbf      	ldr	r3, [pc, #764]	@ (80090e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008dec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008dee:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8008df2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008df6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008df8:	4abb      	ldr	r2, [pc, #748]	@ (80090e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008dfa:	430b      	orrs	r3, r1
 8008dfc:	6553      	str	r3, [r2, #84]	@ 0x54
 8008dfe:	e003      	b.n	8008e08 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e04:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008e08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e10:	f002 0302 	and.w	r3, r2, #2
 8008e14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008e18:	2300      	movs	r3, #0
 8008e1a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008e1e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8008e22:	460b      	mov	r3, r1
 8008e24:	4313      	orrs	r3, r2
 8008e26:	d041      	beq.n	8008eac <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e2c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008e2e:	2b05      	cmp	r3, #5
 8008e30:	d824      	bhi.n	8008e7c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8008e32:	a201      	add	r2, pc, #4	@ (adr r2, 8008e38 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8008e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e38:	08008e85 	.word	0x08008e85
 8008e3c:	08008e51 	.word	0x08008e51
 8008e40:	08008e67 	.word	0x08008e67
 8008e44:	08008e85 	.word	0x08008e85
 8008e48:	08008e85 	.word	0x08008e85
 8008e4c:	08008e85 	.word	0x08008e85
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e54:	3308      	adds	r3, #8
 8008e56:	2101      	movs	r1, #1
 8008e58:	4618      	mov	r0, r3
 8008e5a:	f001 fe43 	bl	800aae4 <RCCEx_PLL2_Config>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008e64:	e00f      	b.n	8008e86 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e6a:	3328      	adds	r3, #40	@ 0x28
 8008e6c:	2101      	movs	r1, #1
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f001 feea 	bl	800ac48 <RCCEx_PLL3_Config>
 8008e74:	4603      	mov	r3, r0
 8008e76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008e7a:	e004      	b.n	8008e86 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008e82:	e000      	b.n	8008e86 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8008e84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d10a      	bne.n	8008ea4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008e8e:	4b96      	ldr	r3, [pc, #600]	@ (80090e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008e90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e92:	f023 0107 	bic.w	r1, r3, #7
 8008e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e9a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008e9c:	4a92      	ldr	r2, [pc, #584]	@ (80090e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008e9e:	430b      	orrs	r3, r1
 8008ea0:	6553      	str	r3, [r2, #84]	@ 0x54
 8008ea2:	e003      	b.n	8008eac <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ea4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ea8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008eac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eb4:	f002 0304 	and.w	r3, r2, #4
 8008eb8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008ec2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8008ec6:	460b      	mov	r3, r1
 8008ec8:	4313      	orrs	r3, r2
 8008eca:	d044      	beq.n	8008f56 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008ecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ed0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008ed4:	2b05      	cmp	r3, #5
 8008ed6:	d825      	bhi.n	8008f24 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8008ed8:	a201      	add	r2, pc, #4	@ (adr r2, 8008ee0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8008eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ede:	bf00      	nop
 8008ee0:	08008f2d 	.word	0x08008f2d
 8008ee4:	08008ef9 	.word	0x08008ef9
 8008ee8:	08008f0f 	.word	0x08008f0f
 8008eec:	08008f2d 	.word	0x08008f2d
 8008ef0:	08008f2d 	.word	0x08008f2d
 8008ef4:	08008f2d 	.word	0x08008f2d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008efc:	3308      	adds	r3, #8
 8008efe:	2101      	movs	r1, #1
 8008f00:	4618      	mov	r0, r3
 8008f02:	f001 fdef 	bl	800aae4 <RCCEx_PLL2_Config>
 8008f06:	4603      	mov	r3, r0
 8008f08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008f0c:	e00f      	b.n	8008f2e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f12:	3328      	adds	r3, #40	@ 0x28
 8008f14:	2101      	movs	r1, #1
 8008f16:	4618      	mov	r0, r3
 8008f18:	f001 fe96 	bl	800ac48 <RCCEx_PLL3_Config>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008f22:	e004      	b.n	8008f2e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f24:	2301      	movs	r3, #1
 8008f26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008f2a:	e000      	b.n	8008f2e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8008f2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d10b      	bne.n	8008f4e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008f36:	4b6c      	ldr	r3, [pc, #432]	@ (80090e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008f38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f3a:	f023 0107 	bic.w	r1, r3, #7
 8008f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008f46:	4a68      	ldr	r2, [pc, #416]	@ (80090e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008f48:	430b      	orrs	r3, r1
 8008f4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8008f4c:	e003      	b.n	8008f56 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f5e:	f002 0320 	and.w	r3, r2, #32
 8008f62:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008f66:	2300      	movs	r3, #0
 8008f68:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008f6c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008f70:	460b      	mov	r3, r1
 8008f72:	4313      	orrs	r3, r2
 8008f74:	d055      	beq.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008f76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008f82:	d033      	beq.n	8008fec <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8008f84:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008f88:	d82c      	bhi.n	8008fe4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f8e:	d02f      	beq.n	8008ff0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8008f90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f94:	d826      	bhi.n	8008fe4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008f96:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008f9a:	d02b      	beq.n	8008ff4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8008f9c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008fa0:	d820      	bhi.n	8008fe4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008fa2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008fa6:	d012      	beq.n	8008fce <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008fa8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008fac:	d81a      	bhi.n	8008fe4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d022      	beq.n	8008ff8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8008fb2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008fb6:	d115      	bne.n	8008fe4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008fb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fbc:	3308      	adds	r3, #8
 8008fbe:	2100      	movs	r1, #0
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f001 fd8f 	bl	800aae4 <RCCEx_PLL2_Config>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008fcc:	e015      	b.n	8008ffa <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008fce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fd2:	3328      	adds	r3, #40	@ 0x28
 8008fd4:	2102      	movs	r1, #2
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f001 fe36 	bl	800ac48 <RCCEx_PLL3_Config>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008fe2:	e00a      	b.n	8008ffa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008fea:	e006      	b.n	8008ffa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008fec:	bf00      	nop
 8008fee:	e004      	b.n	8008ffa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008ff0:	bf00      	nop
 8008ff2:	e002      	b.n	8008ffa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008ff4:	bf00      	nop
 8008ff6:	e000      	b.n	8008ffa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008ff8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ffa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d10b      	bne.n	800901a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009002:	4b39      	ldr	r3, [pc, #228]	@ (80090e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009004:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009006:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800900a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800900e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009012:	4a35      	ldr	r2, [pc, #212]	@ (80090e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009014:	430b      	orrs	r3, r1
 8009016:	6553      	str	r3, [r2, #84]	@ 0x54
 8009018:	e003      	b.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800901a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800901e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009022:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800902a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800902e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009032:	2300      	movs	r3, #0
 8009034:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009038:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800903c:	460b      	mov	r3, r1
 800903e:	4313      	orrs	r3, r2
 8009040:	d058      	beq.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009042:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009046:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800904a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800904e:	d033      	beq.n	80090b8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009050:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009054:	d82c      	bhi.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009056:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800905a:	d02f      	beq.n	80090bc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800905c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009060:	d826      	bhi.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009062:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009066:	d02b      	beq.n	80090c0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8009068:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800906c:	d820      	bhi.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800906e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009072:	d012      	beq.n	800909a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8009074:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009078:	d81a      	bhi.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800907a:	2b00      	cmp	r3, #0
 800907c:	d022      	beq.n	80090c4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800907e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009082:	d115      	bne.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009084:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009088:	3308      	adds	r3, #8
 800908a:	2100      	movs	r1, #0
 800908c:	4618      	mov	r0, r3
 800908e:	f001 fd29 	bl	800aae4 <RCCEx_PLL2_Config>
 8009092:	4603      	mov	r3, r0
 8009094:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009098:	e015      	b.n	80090c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800909a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800909e:	3328      	adds	r3, #40	@ 0x28
 80090a0:	2102      	movs	r1, #2
 80090a2:	4618      	mov	r0, r3
 80090a4:	f001 fdd0 	bl	800ac48 <RCCEx_PLL3_Config>
 80090a8:	4603      	mov	r3, r0
 80090aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80090ae:	e00a      	b.n	80090c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80090b0:	2301      	movs	r3, #1
 80090b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80090b6:	e006      	b.n	80090c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80090b8:	bf00      	nop
 80090ba:	e004      	b.n	80090c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80090bc:	bf00      	nop
 80090be:	e002      	b.n	80090c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80090c0:	bf00      	nop
 80090c2:	e000      	b.n	80090c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80090c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d10e      	bne.n	80090ec <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80090ce:	4b06      	ldr	r3, [pc, #24]	@ (80090e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80090d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090d2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80090d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80090de:	4a02      	ldr	r2, [pc, #8]	@ (80090e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80090e0:	430b      	orrs	r3, r1
 80090e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80090e4:	e006      	b.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80090e6:	bf00      	nop
 80090e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80090f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80090f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090fc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8009100:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009104:	2300      	movs	r3, #0
 8009106:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800910a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800910e:	460b      	mov	r3, r1
 8009110:	4313      	orrs	r3, r2
 8009112:	d055      	beq.n	80091c0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009114:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009118:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800911c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009120:	d033      	beq.n	800918a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8009122:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009126:	d82c      	bhi.n	8009182 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009128:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800912c:	d02f      	beq.n	800918e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800912e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009132:	d826      	bhi.n	8009182 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009134:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009138:	d02b      	beq.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800913a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800913e:	d820      	bhi.n	8009182 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009140:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009144:	d012      	beq.n	800916c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8009146:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800914a:	d81a      	bhi.n	8009182 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800914c:	2b00      	cmp	r3, #0
 800914e:	d022      	beq.n	8009196 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8009150:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009154:	d115      	bne.n	8009182 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009156:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800915a:	3308      	adds	r3, #8
 800915c:	2100      	movs	r1, #0
 800915e:	4618      	mov	r0, r3
 8009160:	f001 fcc0 	bl	800aae4 <RCCEx_PLL2_Config>
 8009164:	4603      	mov	r3, r0
 8009166:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800916a:	e015      	b.n	8009198 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800916c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009170:	3328      	adds	r3, #40	@ 0x28
 8009172:	2102      	movs	r1, #2
 8009174:	4618      	mov	r0, r3
 8009176:	f001 fd67 	bl	800ac48 <RCCEx_PLL3_Config>
 800917a:	4603      	mov	r3, r0
 800917c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009180:	e00a      	b.n	8009198 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009182:	2301      	movs	r3, #1
 8009184:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009188:	e006      	b.n	8009198 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800918a:	bf00      	nop
 800918c:	e004      	b.n	8009198 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800918e:	bf00      	nop
 8009190:	e002      	b.n	8009198 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009192:	bf00      	nop
 8009194:	e000      	b.n	8009198 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009196:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009198:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800919c:	2b00      	cmp	r3, #0
 800919e:	d10b      	bne.n	80091b8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80091a0:	4ba1      	ldr	r3, [pc, #644]	@ (8009428 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80091a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091a4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80091a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80091b0:	4a9d      	ldr	r2, [pc, #628]	@ (8009428 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80091b2:	430b      	orrs	r3, r1
 80091b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80091b6:	e003      	b.n	80091c0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80091bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80091c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c8:	f002 0308 	and.w	r3, r2, #8
 80091cc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80091d0:	2300      	movs	r3, #0
 80091d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80091d6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80091da:	460b      	mov	r3, r1
 80091dc:	4313      	orrs	r3, r2
 80091de:	d01e      	beq.n	800921e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80091e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80091e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80091ec:	d10c      	bne.n	8009208 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80091ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091f2:	3328      	adds	r3, #40	@ 0x28
 80091f4:	2102      	movs	r1, #2
 80091f6:	4618      	mov	r0, r3
 80091f8:	f001 fd26 	bl	800ac48 <RCCEx_PLL3_Config>
 80091fc:	4603      	mov	r3, r0
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d002      	beq.n	8009208 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8009202:	2301      	movs	r3, #1
 8009204:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009208:	4b87      	ldr	r3, [pc, #540]	@ (8009428 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800920a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800920c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009210:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009214:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009218:	4a83      	ldr	r2, [pc, #524]	@ (8009428 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800921a:	430b      	orrs	r3, r1
 800921c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800921e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009226:	f002 0310 	and.w	r3, r2, #16
 800922a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800922e:	2300      	movs	r3, #0
 8009230:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009234:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8009238:	460b      	mov	r3, r1
 800923a:	4313      	orrs	r3, r2
 800923c:	d01e      	beq.n	800927c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800923e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009242:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009246:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800924a:	d10c      	bne.n	8009266 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800924c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009250:	3328      	adds	r3, #40	@ 0x28
 8009252:	2102      	movs	r1, #2
 8009254:	4618      	mov	r0, r3
 8009256:	f001 fcf7 	bl	800ac48 <RCCEx_PLL3_Config>
 800925a:	4603      	mov	r3, r0
 800925c:	2b00      	cmp	r3, #0
 800925e:	d002      	beq.n	8009266 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8009260:	2301      	movs	r3, #1
 8009262:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009266:	4b70      	ldr	r3, [pc, #448]	@ (8009428 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009268:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800926a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800926e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009272:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009276:	4a6c      	ldr	r2, [pc, #432]	@ (8009428 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009278:	430b      	orrs	r3, r1
 800927a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800927c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009284:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8009288:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800928c:	2300      	movs	r3, #0
 800928e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009292:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8009296:	460b      	mov	r3, r1
 8009298:	4313      	orrs	r3, r2
 800929a:	d03e      	beq.n	800931a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800929c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80092a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80092a8:	d022      	beq.n	80092f0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80092aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80092ae:	d81b      	bhi.n	80092e8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d003      	beq.n	80092bc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80092b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80092b8:	d00b      	beq.n	80092d2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80092ba:	e015      	b.n	80092e8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80092bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092c0:	3308      	adds	r3, #8
 80092c2:	2100      	movs	r1, #0
 80092c4:	4618      	mov	r0, r3
 80092c6:	f001 fc0d 	bl	800aae4 <RCCEx_PLL2_Config>
 80092ca:	4603      	mov	r3, r0
 80092cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80092d0:	e00f      	b.n	80092f2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80092d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092d6:	3328      	adds	r3, #40	@ 0x28
 80092d8:	2102      	movs	r1, #2
 80092da:	4618      	mov	r0, r3
 80092dc:	f001 fcb4 	bl	800ac48 <RCCEx_PLL3_Config>
 80092e0:	4603      	mov	r3, r0
 80092e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80092e6:	e004      	b.n	80092f2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80092e8:	2301      	movs	r3, #1
 80092ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80092ee:	e000      	b.n	80092f2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80092f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d10b      	bne.n	8009312 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80092fa:	4b4b      	ldr	r3, [pc, #300]	@ (8009428 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80092fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092fe:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8009302:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009306:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800930a:	4a47      	ldr	r2, [pc, #284]	@ (8009428 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800930c:	430b      	orrs	r3, r1
 800930e:	6593      	str	r3, [r2, #88]	@ 0x58
 8009310:	e003      	b.n	800931a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009312:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009316:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800931a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800931e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009322:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8009326:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009328:	2300      	movs	r3, #0
 800932a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800932c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8009330:	460b      	mov	r3, r1
 8009332:	4313      	orrs	r3, r2
 8009334:	d03b      	beq.n	80093ae <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009336:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800933a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800933e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009342:	d01f      	beq.n	8009384 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8009344:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009348:	d818      	bhi.n	800937c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800934a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800934e:	d003      	beq.n	8009358 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8009350:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009354:	d007      	beq.n	8009366 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8009356:	e011      	b.n	800937c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009358:	4b33      	ldr	r3, [pc, #204]	@ (8009428 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800935a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800935c:	4a32      	ldr	r2, [pc, #200]	@ (8009428 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800935e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009362:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009364:	e00f      	b.n	8009386 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009366:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800936a:	3328      	adds	r3, #40	@ 0x28
 800936c:	2101      	movs	r1, #1
 800936e:	4618      	mov	r0, r3
 8009370:	f001 fc6a 	bl	800ac48 <RCCEx_PLL3_Config>
 8009374:	4603      	mov	r3, r0
 8009376:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800937a:	e004      	b.n	8009386 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800937c:	2301      	movs	r3, #1
 800937e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009382:	e000      	b.n	8009386 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8009384:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009386:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800938a:	2b00      	cmp	r3, #0
 800938c:	d10b      	bne.n	80093a6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800938e:	4b26      	ldr	r3, [pc, #152]	@ (8009428 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009390:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009392:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009396:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800939a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800939e:	4a22      	ldr	r2, [pc, #136]	@ (8009428 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80093a0:	430b      	orrs	r3, r1
 80093a2:	6553      	str	r3, [r2, #84]	@ 0x54
 80093a4:	e003      	b.n	80093ae <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80093ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093b6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80093ba:	673b      	str	r3, [r7, #112]	@ 0x70
 80093bc:	2300      	movs	r3, #0
 80093be:	677b      	str	r3, [r7, #116]	@ 0x74
 80093c0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80093c4:	460b      	mov	r3, r1
 80093c6:	4313      	orrs	r3, r2
 80093c8:	d034      	beq.n	8009434 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80093ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d003      	beq.n	80093dc <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80093d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80093d8:	d007      	beq.n	80093ea <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80093da:	e011      	b.n	8009400 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093dc:	4b12      	ldr	r3, [pc, #72]	@ (8009428 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80093de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093e0:	4a11      	ldr	r2, [pc, #68]	@ (8009428 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80093e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80093e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80093e8:	e00e      	b.n	8009408 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80093ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093ee:	3308      	adds	r3, #8
 80093f0:	2102      	movs	r1, #2
 80093f2:	4618      	mov	r0, r3
 80093f4:	f001 fb76 	bl	800aae4 <RCCEx_PLL2_Config>
 80093f8:	4603      	mov	r3, r0
 80093fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80093fe:	e003      	b.n	8009408 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8009400:	2301      	movs	r3, #1
 8009402:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009406:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009408:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800940c:	2b00      	cmp	r3, #0
 800940e:	d10d      	bne.n	800942c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009410:	4b05      	ldr	r3, [pc, #20]	@ (8009428 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009412:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009414:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009418:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800941c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800941e:	4a02      	ldr	r2, [pc, #8]	@ (8009428 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009420:	430b      	orrs	r3, r1
 8009422:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009424:	e006      	b.n	8009434 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8009426:	bf00      	nop
 8009428:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800942c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009430:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009434:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800943c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8009440:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009442:	2300      	movs	r3, #0
 8009444:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009446:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800944a:	460b      	mov	r3, r1
 800944c:	4313      	orrs	r3, r2
 800944e:	d00c      	beq.n	800946a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009450:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009454:	3328      	adds	r3, #40	@ 0x28
 8009456:	2102      	movs	r1, #2
 8009458:	4618      	mov	r0, r3
 800945a:	f001 fbf5 	bl	800ac48 <RCCEx_PLL3_Config>
 800945e:	4603      	mov	r3, r0
 8009460:	2b00      	cmp	r3, #0
 8009462:	d002      	beq.n	800946a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8009464:	2301      	movs	r3, #1
 8009466:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800946a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800946e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009472:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8009476:	663b      	str	r3, [r7, #96]	@ 0x60
 8009478:	2300      	movs	r3, #0
 800947a:	667b      	str	r3, [r7, #100]	@ 0x64
 800947c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8009480:	460b      	mov	r3, r1
 8009482:	4313      	orrs	r3, r2
 8009484:	d038      	beq.n	80094f8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009486:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800948a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800948e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009492:	d018      	beq.n	80094c6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8009494:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009498:	d811      	bhi.n	80094be <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800949a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800949e:	d014      	beq.n	80094ca <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80094a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80094a4:	d80b      	bhi.n	80094be <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d011      	beq.n	80094ce <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80094aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80094ae:	d106      	bne.n	80094be <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094b0:	4bc3      	ldr	r3, [pc, #780]	@ (80097c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80094b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094b4:	4ac2      	ldr	r2, [pc, #776]	@ (80097c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80094b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80094ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80094bc:	e008      	b.n	80094d0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80094be:	2301      	movs	r3, #1
 80094c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80094c4:	e004      	b.n	80094d0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80094c6:	bf00      	nop
 80094c8:	e002      	b.n	80094d0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80094ca:	bf00      	nop
 80094cc:	e000      	b.n	80094d0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80094ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d10b      	bne.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80094d8:	4bb9      	ldr	r3, [pc, #740]	@ (80097c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80094da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094dc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80094e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80094e8:	4ab5      	ldr	r2, [pc, #724]	@ (80097c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80094ea:	430b      	orrs	r3, r1
 80094ec:	6553      	str	r3, [r2, #84]	@ 0x54
 80094ee:	e003      	b.n	80094f8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80094f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80094f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009500:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8009504:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009506:	2300      	movs	r3, #0
 8009508:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800950a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800950e:	460b      	mov	r3, r1
 8009510:	4313      	orrs	r3, r2
 8009512:	d009      	beq.n	8009528 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009514:	4baa      	ldr	r3, [pc, #680]	@ (80097c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009516:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009518:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800951c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009520:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009522:	4aa7      	ldr	r2, [pc, #668]	@ (80097c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009524:	430b      	orrs	r3, r1
 8009526:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009528:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800952c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009530:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8009534:	653b      	str	r3, [r7, #80]	@ 0x50
 8009536:	2300      	movs	r3, #0
 8009538:	657b      	str	r3, [r7, #84]	@ 0x54
 800953a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800953e:	460b      	mov	r3, r1
 8009540:	4313      	orrs	r3, r2
 8009542:	d00a      	beq.n	800955a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009544:	4b9e      	ldr	r3, [pc, #632]	@ (80097c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009546:	691b      	ldr	r3, [r3, #16]
 8009548:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800954c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009550:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009554:	4a9a      	ldr	r2, [pc, #616]	@ (80097c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009556:	430b      	orrs	r3, r1
 8009558:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800955a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800955e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009562:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8009566:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009568:	2300      	movs	r3, #0
 800956a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800956c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8009570:	460b      	mov	r3, r1
 8009572:	4313      	orrs	r3, r2
 8009574:	d009      	beq.n	800958a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009576:	4b92      	ldr	r3, [pc, #584]	@ (80097c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009578:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800957a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800957e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009582:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009584:	4a8e      	ldr	r2, [pc, #568]	@ (80097c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009586:	430b      	orrs	r3, r1
 8009588:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800958a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800958e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009592:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8009596:	643b      	str	r3, [r7, #64]	@ 0x40
 8009598:	2300      	movs	r3, #0
 800959a:	647b      	str	r3, [r7, #68]	@ 0x44
 800959c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80095a0:	460b      	mov	r3, r1
 80095a2:	4313      	orrs	r3, r2
 80095a4:	d00e      	beq.n	80095c4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80095a6:	4b86      	ldr	r3, [pc, #536]	@ (80097c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80095a8:	691b      	ldr	r3, [r3, #16]
 80095aa:	4a85      	ldr	r2, [pc, #532]	@ (80097c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80095ac:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80095b0:	6113      	str	r3, [r2, #16]
 80095b2:	4b83      	ldr	r3, [pc, #524]	@ (80097c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80095b4:	6919      	ldr	r1, [r3, #16]
 80095b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095ba:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80095be:	4a80      	ldr	r2, [pc, #512]	@ (80097c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80095c0:	430b      	orrs	r3, r1
 80095c2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80095c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095cc:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80095d0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80095d2:	2300      	movs	r3, #0
 80095d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80095d6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80095da:	460b      	mov	r3, r1
 80095dc:	4313      	orrs	r3, r2
 80095de:	d009      	beq.n	80095f4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80095e0:	4b77      	ldr	r3, [pc, #476]	@ (80097c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80095e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80095e4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80095e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095ee:	4a74      	ldr	r2, [pc, #464]	@ (80097c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80095f0:	430b      	orrs	r3, r1
 80095f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80095f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095fc:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8009600:	633b      	str	r3, [r7, #48]	@ 0x30
 8009602:	2300      	movs	r3, #0
 8009604:	637b      	str	r3, [r7, #52]	@ 0x34
 8009606:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800960a:	460b      	mov	r3, r1
 800960c:	4313      	orrs	r3, r2
 800960e:	d00a      	beq.n	8009626 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009610:	4b6b      	ldr	r3, [pc, #428]	@ (80097c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009612:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009614:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8009618:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800961c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009620:	4a67      	ldr	r2, [pc, #412]	@ (80097c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009622:	430b      	orrs	r3, r1
 8009624:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009626:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800962a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800962e:	2100      	movs	r1, #0
 8009630:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009632:	f003 0301 	and.w	r3, r3, #1
 8009636:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009638:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800963c:	460b      	mov	r3, r1
 800963e:	4313      	orrs	r3, r2
 8009640:	d011      	beq.n	8009666 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009642:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009646:	3308      	adds	r3, #8
 8009648:	2100      	movs	r1, #0
 800964a:	4618      	mov	r0, r3
 800964c:	f001 fa4a 	bl	800aae4 <RCCEx_PLL2_Config>
 8009650:	4603      	mov	r3, r0
 8009652:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009656:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800965a:	2b00      	cmp	r3, #0
 800965c:	d003      	beq.n	8009666 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800965e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009662:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009666:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800966a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800966e:	2100      	movs	r1, #0
 8009670:	6239      	str	r1, [r7, #32]
 8009672:	f003 0302 	and.w	r3, r3, #2
 8009676:	627b      	str	r3, [r7, #36]	@ 0x24
 8009678:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800967c:	460b      	mov	r3, r1
 800967e:	4313      	orrs	r3, r2
 8009680:	d011      	beq.n	80096a6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009682:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009686:	3308      	adds	r3, #8
 8009688:	2101      	movs	r1, #1
 800968a:	4618      	mov	r0, r3
 800968c:	f001 fa2a 	bl	800aae4 <RCCEx_PLL2_Config>
 8009690:	4603      	mov	r3, r0
 8009692:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009696:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800969a:	2b00      	cmp	r3, #0
 800969c:	d003      	beq.n	80096a6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800969e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80096a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80096a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ae:	2100      	movs	r1, #0
 80096b0:	61b9      	str	r1, [r7, #24]
 80096b2:	f003 0304 	and.w	r3, r3, #4
 80096b6:	61fb      	str	r3, [r7, #28]
 80096b8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80096bc:	460b      	mov	r3, r1
 80096be:	4313      	orrs	r3, r2
 80096c0:	d011      	beq.n	80096e6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80096c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096c6:	3308      	adds	r3, #8
 80096c8:	2102      	movs	r1, #2
 80096ca:	4618      	mov	r0, r3
 80096cc:	f001 fa0a 	bl	800aae4 <RCCEx_PLL2_Config>
 80096d0:	4603      	mov	r3, r0
 80096d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80096d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d003      	beq.n	80096e6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80096e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80096e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ee:	2100      	movs	r1, #0
 80096f0:	6139      	str	r1, [r7, #16]
 80096f2:	f003 0308 	and.w	r3, r3, #8
 80096f6:	617b      	str	r3, [r7, #20]
 80096f8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80096fc:	460b      	mov	r3, r1
 80096fe:	4313      	orrs	r3, r2
 8009700:	d011      	beq.n	8009726 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009702:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009706:	3328      	adds	r3, #40	@ 0x28
 8009708:	2100      	movs	r1, #0
 800970a:	4618      	mov	r0, r3
 800970c:	f001 fa9c 	bl	800ac48 <RCCEx_PLL3_Config>
 8009710:	4603      	mov	r3, r0
 8009712:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8009716:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800971a:	2b00      	cmp	r3, #0
 800971c:	d003      	beq.n	8009726 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800971e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009722:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009726:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800972a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800972e:	2100      	movs	r1, #0
 8009730:	60b9      	str	r1, [r7, #8]
 8009732:	f003 0310 	and.w	r3, r3, #16
 8009736:	60fb      	str	r3, [r7, #12]
 8009738:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800973c:	460b      	mov	r3, r1
 800973e:	4313      	orrs	r3, r2
 8009740:	d011      	beq.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009742:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009746:	3328      	adds	r3, #40	@ 0x28
 8009748:	2101      	movs	r1, #1
 800974a:	4618      	mov	r0, r3
 800974c:	f001 fa7c 	bl	800ac48 <RCCEx_PLL3_Config>
 8009750:	4603      	mov	r3, r0
 8009752:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009756:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800975a:	2b00      	cmp	r3, #0
 800975c:	d003      	beq.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800975e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009762:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009766:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800976a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800976e:	2100      	movs	r1, #0
 8009770:	6039      	str	r1, [r7, #0]
 8009772:	f003 0320 	and.w	r3, r3, #32
 8009776:	607b      	str	r3, [r7, #4]
 8009778:	e9d7 1200 	ldrd	r1, r2, [r7]
 800977c:	460b      	mov	r3, r1
 800977e:	4313      	orrs	r3, r2
 8009780:	d011      	beq.n	80097a6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009782:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009786:	3328      	adds	r3, #40	@ 0x28
 8009788:	2102      	movs	r1, #2
 800978a:	4618      	mov	r0, r3
 800978c:	f001 fa5c 	bl	800ac48 <RCCEx_PLL3_Config>
 8009790:	4603      	mov	r3, r0
 8009792:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009796:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800979a:	2b00      	cmp	r3, #0
 800979c:	d003      	beq.n	80097a6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800979e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80097a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80097a6:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d101      	bne.n	80097b2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80097ae:	2300      	movs	r3, #0
 80097b0:	e000      	b.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80097b2:	2301      	movs	r3, #1
}
 80097b4:	4618      	mov	r0, r3
 80097b6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80097ba:	46bd      	mov	sp, r7
 80097bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80097c0:	58024400 	.word	0x58024400

080097c4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b090      	sub	sp, #64	@ 0x40
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80097ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097d2:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80097d6:	430b      	orrs	r3, r1
 80097d8:	f040 8094 	bne.w	8009904 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80097dc:	4b9e      	ldr	r3, [pc, #632]	@ (8009a58 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80097de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80097e0:	f003 0307 	and.w	r3, r3, #7
 80097e4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80097e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097e8:	2b04      	cmp	r3, #4
 80097ea:	f200 8087 	bhi.w	80098fc <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80097ee:	a201      	add	r2, pc, #4	@ (adr r2, 80097f4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80097f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097f4:	08009809 	.word	0x08009809
 80097f8:	08009831 	.word	0x08009831
 80097fc:	08009859 	.word	0x08009859
 8009800:	080098f5 	.word	0x080098f5
 8009804:	08009881 	.word	0x08009881
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009808:	4b93      	ldr	r3, [pc, #588]	@ (8009a58 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009810:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009814:	d108      	bne.n	8009828 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009816:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800981a:	4618      	mov	r0, r3
 800981c:	f001 f810 	bl	800a840 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009822:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009824:	f000 bd45 	b.w	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009828:	2300      	movs	r3, #0
 800982a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800982c:	f000 bd41 	b.w	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009830:	4b89      	ldr	r3, [pc, #548]	@ (8009a58 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009838:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800983c:	d108      	bne.n	8009850 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800983e:	f107 0318 	add.w	r3, r7, #24
 8009842:	4618      	mov	r0, r3
 8009844:	f000 fd54 	bl	800a2f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009848:	69bb      	ldr	r3, [r7, #24]
 800984a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800984c:	f000 bd31 	b.w	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009850:	2300      	movs	r3, #0
 8009852:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009854:	f000 bd2d 	b.w	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009858:	4b7f      	ldr	r3, [pc, #508]	@ (8009a58 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009860:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009864:	d108      	bne.n	8009878 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009866:	f107 030c 	add.w	r3, r7, #12
 800986a:	4618      	mov	r0, r3
 800986c:	f000 fe94 	bl	800a598 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009874:	f000 bd1d 	b.w	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009878:	2300      	movs	r3, #0
 800987a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800987c:	f000 bd19 	b.w	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009880:	4b75      	ldr	r3, [pc, #468]	@ (8009a58 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009882:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009884:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009888:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800988a:	4b73      	ldr	r3, [pc, #460]	@ (8009a58 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f003 0304 	and.w	r3, r3, #4
 8009892:	2b04      	cmp	r3, #4
 8009894:	d10c      	bne.n	80098b0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8009896:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009898:	2b00      	cmp	r3, #0
 800989a:	d109      	bne.n	80098b0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800989c:	4b6e      	ldr	r3, [pc, #440]	@ (8009a58 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	08db      	lsrs	r3, r3, #3
 80098a2:	f003 0303 	and.w	r3, r3, #3
 80098a6:	4a6d      	ldr	r2, [pc, #436]	@ (8009a5c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80098a8:	fa22 f303 	lsr.w	r3, r2, r3
 80098ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80098ae:	e01f      	b.n	80098f0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80098b0:	4b69      	ldr	r3, [pc, #420]	@ (8009a58 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80098b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80098bc:	d106      	bne.n	80098cc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80098be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80098c4:	d102      	bne.n	80098cc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80098c6:	4b66      	ldr	r3, [pc, #408]	@ (8009a60 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80098c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80098ca:	e011      	b.n	80098f0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80098cc:	4b62      	ldr	r3, [pc, #392]	@ (8009a58 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80098d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80098d8:	d106      	bne.n	80098e8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80098da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80098e0:	d102      	bne.n	80098e8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80098e2:	4b60      	ldr	r3, [pc, #384]	@ (8009a64 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80098e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80098e6:	e003      	b.n	80098f0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80098e8:	2300      	movs	r3, #0
 80098ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80098ec:	f000 bce1 	b.w	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80098f0:	f000 bcdf 	b.w	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80098f4:	4b5c      	ldr	r3, [pc, #368]	@ (8009a68 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80098f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098f8:	f000 bcdb 	b.w	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80098fc:	2300      	movs	r3, #0
 80098fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009900:	f000 bcd7 	b.w	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8009904:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009908:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800990c:	430b      	orrs	r3, r1
 800990e:	f040 80ad 	bne.w	8009a6c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8009912:	4b51      	ldr	r3, [pc, #324]	@ (8009a58 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009914:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009916:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800991a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800991c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800991e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009922:	d056      	beq.n	80099d2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8009924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009926:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800992a:	f200 8090 	bhi.w	8009a4e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800992e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009930:	2bc0      	cmp	r3, #192	@ 0xc0
 8009932:	f000 8088 	beq.w	8009a46 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8009936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009938:	2bc0      	cmp	r3, #192	@ 0xc0
 800993a:	f200 8088 	bhi.w	8009a4e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800993e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009940:	2b80      	cmp	r3, #128	@ 0x80
 8009942:	d032      	beq.n	80099aa <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8009944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009946:	2b80      	cmp	r3, #128	@ 0x80
 8009948:	f200 8081 	bhi.w	8009a4e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800994c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800994e:	2b00      	cmp	r3, #0
 8009950:	d003      	beq.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8009952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009954:	2b40      	cmp	r3, #64	@ 0x40
 8009956:	d014      	beq.n	8009982 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8009958:	e079      	b.n	8009a4e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800995a:	4b3f      	ldr	r3, [pc, #252]	@ (8009a58 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009962:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009966:	d108      	bne.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009968:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800996c:	4618      	mov	r0, r3
 800996e:	f000 ff67 	bl	800a840 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009974:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009976:	f000 bc9c 	b.w	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800997a:	2300      	movs	r3, #0
 800997c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800997e:	f000 bc98 	b.w	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009982:	4b35      	ldr	r3, [pc, #212]	@ (8009a58 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800998a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800998e:	d108      	bne.n	80099a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009990:	f107 0318 	add.w	r3, r7, #24
 8009994:	4618      	mov	r0, r3
 8009996:	f000 fcab 	bl	800a2f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800999a:	69bb      	ldr	r3, [r7, #24]
 800999c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800999e:	f000 bc88 	b.w	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80099a2:	2300      	movs	r3, #0
 80099a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099a6:	f000 bc84 	b.w	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80099aa:	4b2b      	ldr	r3, [pc, #172]	@ (8009a58 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80099b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80099b6:	d108      	bne.n	80099ca <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80099b8:	f107 030c 	add.w	r3, r7, #12
 80099bc:	4618      	mov	r0, r3
 80099be:	f000 fdeb 	bl	800a598 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80099c6:	f000 bc74 	b.w	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80099ca:	2300      	movs	r3, #0
 80099cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099ce:	f000 bc70 	b.w	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80099d2:	4b21      	ldr	r3, [pc, #132]	@ (8009a58 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80099d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80099d6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80099da:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80099dc:	4b1e      	ldr	r3, [pc, #120]	@ (8009a58 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f003 0304 	and.w	r3, r3, #4
 80099e4:	2b04      	cmp	r3, #4
 80099e6:	d10c      	bne.n	8009a02 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80099e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d109      	bne.n	8009a02 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80099ee:	4b1a      	ldr	r3, [pc, #104]	@ (8009a58 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	08db      	lsrs	r3, r3, #3
 80099f4:	f003 0303 	and.w	r3, r3, #3
 80099f8:	4a18      	ldr	r2, [pc, #96]	@ (8009a5c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80099fa:	fa22 f303 	lsr.w	r3, r2, r3
 80099fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a00:	e01f      	b.n	8009a42 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009a02:	4b15      	ldr	r3, [pc, #84]	@ (8009a58 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009a0e:	d106      	bne.n	8009a1e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8009a10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009a16:	d102      	bne.n	8009a1e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009a18:	4b11      	ldr	r3, [pc, #68]	@ (8009a60 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a1c:	e011      	b.n	8009a42 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009a1e:	4b0e      	ldr	r3, [pc, #56]	@ (8009a58 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009a2a:	d106      	bne.n	8009a3a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8009a2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a32:	d102      	bne.n	8009a3a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009a34:	4b0b      	ldr	r3, [pc, #44]	@ (8009a64 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009a36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a38:	e003      	b.n	8009a42 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009a3e:	f000 bc38 	b.w	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009a42:	f000 bc36 	b.w	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009a46:	4b08      	ldr	r3, [pc, #32]	@ (8009a68 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009a48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a4a:	f000 bc32 	b.w	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009a4e:	2300      	movs	r3, #0
 8009a50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a52:	f000 bc2e 	b.w	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009a56:	bf00      	nop
 8009a58:	58024400 	.word	0x58024400
 8009a5c:	03d09000 	.word	0x03d09000
 8009a60:	003d0900 	.word	0x003d0900
 8009a64:	017d7840 	.word	0x017d7840
 8009a68:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009a6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a70:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8009a74:	430b      	orrs	r3, r1
 8009a76:	f040 809c 	bne.w	8009bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8009a7a:	4b9e      	ldr	r3, [pc, #632]	@ (8009cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009a7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a7e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8009a82:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a86:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009a8a:	d054      	beq.n	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8009a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a8e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009a92:	f200 808b 	bhi.w	8009bac <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a98:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009a9c:	f000 8083 	beq.w	8009ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8009aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aa2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009aa6:	f200 8081 	bhi.w	8009bac <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009ab0:	d02f      	beq.n	8009b12 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8009ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ab4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009ab8:	d878      	bhi.n	8009bac <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d004      	beq.n	8009aca <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8009ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ac2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009ac6:	d012      	beq.n	8009aee <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8009ac8:	e070      	b.n	8009bac <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009aca:	4b8a      	ldr	r3, [pc, #552]	@ (8009cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009ad2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009ad6:	d107      	bne.n	8009ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009ad8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009adc:	4618      	mov	r0, r3
 8009ade:	f000 feaf 	bl	800a840 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ae4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ae6:	e3e4      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009aec:	e3e1      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009aee:	4b81      	ldr	r3, [pc, #516]	@ (8009cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009af6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009afa:	d107      	bne.n	8009b0c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009afc:	f107 0318 	add.w	r3, r7, #24
 8009b00:	4618      	mov	r0, r3
 8009b02:	f000 fbf5 	bl	800a2f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009b06:	69bb      	ldr	r3, [r7, #24]
 8009b08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b0a:	e3d2      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b10:	e3cf      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009b12:	4b78      	ldr	r3, [pc, #480]	@ (8009cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009b1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b1e:	d107      	bne.n	8009b30 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b20:	f107 030c 	add.w	r3, r7, #12
 8009b24:	4618      	mov	r0, r3
 8009b26:	f000 fd37 	bl	800a598 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b2e:	e3c0      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b30:	2300      	movs	r3, #0
 8009b32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b34:	e3bd      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009b36:	4b6f      	ldr	r3, [pc, #444]	@ (8009cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009b38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b3a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009b3e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009b40:	4b6c      	ldr	r3, [pc, #432]	@ (8009cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f003 0304 	and.w	r3, r3, #4
 8009b48:	2b04      	cmp	r3, #4
 8009b4a:	d10c      	bne.n	8009b66 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8009b4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d109      	bne.n	8009b66 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009b52:	4b68      	ldr	r3, [pc, #416]	@ (8009cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	08db      	lsrs	r3, r3, #3
 8009b58:	f003 0303 	and.w	r3, r3, #3
 8009b5c:	4a66      	ldr	r2, [pc, #408]	@ (8009cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8009b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009b64:	e01e      	b.n	8009ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009b66:	4b63      	ldr	r3, [pc, #396]	@ (8009cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b72:	d106      	bne.n	8009b82 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8009b74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b76:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009b7a:	d102      	bne.n	8009b82 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009b7c:	4b5f      	ldr	r3, [pc, #380]	@ (8009cfc <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8009b7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009b80:	e010      	b.n	8009ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009b82:	4b5c      	ldr	r3, [pc, #368]	@ (8009cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009b8a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009b8e:	d106      	bne.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8009b90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b96:	d102      	bne.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009b98:	4b59      	ldr	r3, [pc, #356]	@ (8009d00 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8009b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009b9c:	e002      	b.n	8009ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009ba2:	e386      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009ba4:	e385      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009ba6:	4b57      	ldr	r3, [pc, #348]	@ (8009d04 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009ba8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009baa:	e382      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009bac:	2300      	movs	r3, #0
 8009bae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bb0:	e37f      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009bb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009bb6:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8009bba:	430b      	orrs	r3, r1
 8009bbc:	f040 80a7 	bne.w	8009d0e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8009bc0:	4b4c      	ldr	r3, [pc, #304]	@ (8009cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009bc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009bc4:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8009bc8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bcc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009bd0:	d055      	beq.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8009bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bd4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009bd8:	f200 8096 	bhi.w	8009d08 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009bdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bde:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009be2:	f000 8084 	beq.w	8009cee <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8009be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009be8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009bec:	f200 808c 	bhi.w	8009d08 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bf2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009bf6:	d030      	beq.n	8009c5a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8009bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bfa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009bfe:	f200 8083 	bhi.w	8009d08 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d004      	beq.n	8009c12 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8009c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c0a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009c0e:	d012      	beq.n	8009c36 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8009c10:	e07a      	b.n	8009d08 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009c12:	4b38      	ldr	r3, [pc, #224]	@ (8009cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009c1a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009c1e:	d107      	bne.n	8009c30 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009c20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009c24:	4618      	mov	r0, r3
 8009c26:	f000 fe0b 	bl	800a840 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c2e:	e340      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009c30:	2300      	movs	r3, #0
 8009c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c34:	e33d      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009c36:	4b2f      	ldr	r3, [pc, #188]	@ (8009cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009c3e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009c42:	d107      	bne.n	8009c54 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c44:	f107 0318 	add.w	r3, r7, #24
 8009c48:	4618      	mov	r0, r3
 8009c4a:	f000 fb51 	bl	800a2f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009c4e:	69bb      	ldr	r3, [r7, #24]
 8009c50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c52:	e32e      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009c54:	2300      	movs	r3, #0
 8009c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c58:	e32b      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009c5a:	4b26      	ldr	r3, [pc, #152]	@ (8009cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009c62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009c66:	d107      	bne.n	8009c78 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c68:	f107 030c 	add.w	r3, r7, #12
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f000 fc93 	bl	800a598 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c76:	e31c      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009c78:	2300      	movs	r3, #0
 8009c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c7c:	e319      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009c7e:	4b1d      	ldr	r3, [pc, #116]	@ (8009cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009c80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009c82:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009c86:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009c88:	4b1a      	ldr	r3, [pc, #104]	@ (8009cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	f003 0304 	and.w	r3, r3, #4
 8009c90:	2b04      	cmp	r3, #4
 8009c92:	d10c      	bne.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8009c94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d109      	bne.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009c9a:	4b16      	ldr	r3, [pc, #88]	@ (8009cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	08db      	lsrs	r3, r3, #3
 8009ca0:	f003 0303 	and.w	r3, r3, #3
 8009ca4:	4a14      	ldr	r2, [pc, #80]	@ (8009cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8009caa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009cac:	e01e      	b.n	8009cec <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009cae:	4b11      	ldr	r3, [pc, #68]	@ (8009cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009cb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009cba:	d106      	bne.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8009cbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cbe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009cc2:	d102      	bne.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009cc4:	4b0d      	ldr	r3, [pc, #52]	@ (8009cfc <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8009cc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009cc8:	e010      	b.n	8009cec <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009cca:	4b0a      	ldr	r3, [pc, #40]	@ (8009cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009cd2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009cd6:	d106      	bne.n	8009ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8009cd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cda:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009cde:	d102      	bne.n	8009ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009ce0:	4b07      	ldr	r3, [pc, #28]	@ (8009d00 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8009ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009ce4:	e002      	b.n	8009cec <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009cea:	e2e2      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009cec:	e2e1      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009cee:	4b05      	ldr	r3, [pc, #20]	@ (8009d04 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009cf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cf2:	e2de      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009cf4:	58024400 	.word	0x58024400
 8009cf8:	03d09000 	.word	0x03d09000
 8009cfc:	003d0900 	.word	0x003d0900
 8009d00:	017d7840 	.word	0x017d7840
 8009d04:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8009d08:	2300      	movs	r3, #0
 8009d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d0c:	e2d1      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009d0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d12:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8009d16:	430b      	orrs	r3, r1
 8009d18:	f040 809c 	bne.w	8009e54 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8009d1c:	4b93      	ldr	r3, [pc, #588]	@ (8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009d1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d20:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8009d24:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009d26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d28:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009d2c:	d054      	beq.n	8009dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8009d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d30:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009d34:	f200 808b 	bhi.w	8009e4e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009d38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d3a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009d3e:	f000 8083 	beq.w	8009e48 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8009d42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d44:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009d48:	f200 8081 	bhi.w	8009e4e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009d4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009d52:	d02f      	beq.n	8009db4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8009d54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009d5a:	d878      	bhi.n	8009e4e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009d5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d004      	beq.n	8009d6c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8009d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d68:	d012      	beq.n	8009d90 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8009d6a:	e070      	b.n	8009e4e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009d6c:	4b7f      	ldr	r3, [pc, #508]	@ (8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009d74:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009d78:	d107      	bne.n	8009d8a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009d7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009d7e:	4618      	mov	r0, r3
 8009d80:	f000 fd5e 	bl	800a840 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009d84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009d88:	e293      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d8e:	e290      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009d90:	4b76      	ldr	r3, [pc, #472]	@ (8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009d98:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009d9c:	d107      	bne.n	8009dae <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d9e:	f107 0318 	add.w	r3, r7, #24
 8009da2:	4618      	mov	r0, r3
 8009da4:	f000 faa4 	bl	800a2f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009da8:	69bb      	ldr	r3, [r7, #24]
 8009daa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009dac:	e281      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009dae:	2300      	movs	r3, #0
 8009db0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009db2:	e27e      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009db4:	4b6d      	ldr	r3, [pc, #436]	@ (8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009dbc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009dc0:	d107      	bne.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009dc2:	f107 030c 	add.w	r3, r7, #12
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f000 fbe6 	bl	800a598 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009dd0:	e26f      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009dd6:	e26c      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009dd8:	4b64      	ldr	r3, [pc, #400]	@ (8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009dda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009ddc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009de0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009de2:	4b62      	ldr	r3, [pc, #392]	@ (8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f003 0304 	and.w	r3, r3, #4
 8009dea:	2b04      	cmp	r3, #4
 8009dec:	d10c      	bne.n	8009e08 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8009dee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d109      	bne.n	8009e08 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009df4:	4b5d      	ldr	r3, [pc, #372]	@ (8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	08db      	lsrs	r3, r3, #3
 8009dfa:	f003 0303 	and.w	r3, r3, #3
 8009dfe:	4a5c      	ldr	r2, [pc, #368]	@ (8009f70 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8009e00:	fa22 f303 	lsr.w	r3, r2, r3
 8009e04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009e06:	e01e      	b.n	8009e46 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009e08:	4b58      	ldr	r3, [pc, #352]	@ (8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e14:	d106      	bne.n	8009e24 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8009e16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e18:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009e1c:	d102      	bne.n	8009e24 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009e1e:	4b55      	ldr	r3, [pc, #340]	@ (8009f74 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009e20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009e22:	e010      	b.n	8009e46 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009e24:	4b51      	ldr	r3, [pc, #324]	@ (8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009e2c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009e30:	d106      	bne.n	8009e40 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8009e32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009e38:	d102      	bne.n	8009e40 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009e3a:	4b4f      	ldr	r3, [pc, #316]	@ (8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009e3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009e3e:	e002      	b.n	8009e46 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009e40:	2300      	movs	r3, #0
 8009e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009e44:	e235      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009e46:	e234      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009e48:	4b4c      	ldr	r3, [pc, #304]	@ (8009f7c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8009e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e4c:	e231      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009e4e:	2300      	movs	r3, #0
 8009e50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e52:	e22e      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8009e54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e58:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8009e5c:	430b      	orrs	r3, r1
 8009e5e:	f040 808f 	bne.w	8009f80 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8009e62:	4b42      	ldr	r3, [pc, #264]	@ (8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009e64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e66:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8009e6a:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8009e6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e6e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009e72:	d06b      	beq.n	8009f4c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8009e74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e76:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009e7a:	d874      	bhi.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009e7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e7e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009e82:	d056      	beq.n	8009f32 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8009e84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e86:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009e8a:	d86c      	bhi.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009e8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e8e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009e92:	d03b      	beq.n	8009f0c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8009e94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e96:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009e9a:	d864      	bhi.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009e9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e9e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009ea2:	d021      	beq.n	8009ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8009ea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ea6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009eaa:	d85c      	bhi.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009eac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d004      	beq.n	8009ebc <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8009eb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009eb8:	d004      	beq.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8009eba:	e054      	b.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8009ebc:	f7fe fa4c 	bl	8008358 <HAL_RCC_GetPCLK1Freq>
 8009ec0:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009ec2:	e1f6      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009ec4:	4b29      	ldr	r3, [pc, #164]	@ (8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009ecc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009ed0:	d107      	bne.n	8009ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ed2:	f107 0318 	add.w	r3, r7, #24
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f000 fa0a 	bl	800a2f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009edc:	69fb      	ldr	r3, [r7, #28]
 8009ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ee0:	e1e7      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ee6:	e1e4      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009ee8:	4b20      	ldr	r3, [pc, #128]	@ (8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009ef0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009ef4:	d107      	bne.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ef6:	f107 030c 	add.w	r3, r7, #12
 8009efa:	4618      	mov	r0, r3
 8009efc:	f000 fb4c 	bl	800a598 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009f00:	693b      	ldr	r3, [r7, #16]
 8009f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f04:	e1d5      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f06:	2300      	movs	r3, #0
 8009f08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f0a:	e1d2      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009f0c:	4b17      	ldr	r3, [pc, #92]	@ (8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	f003 0304 	and.w	r3, r3, #4
 8009f14:	2b04      	cmp	r3, #4
 8009f16:	d109      	bne.n	8009f2c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009f18:	4b14      	ldr	r3, [pc, #80]	@ (8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	08db      	lsrs	r3, r3, #3
 8009f1e:	f003 0303 	and.w	r3, r3, #3
 8009f22:	4a13      	ldr	r2, [pc, #76]	@ (8009f70 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8009f24:	fa22 f303 	lsr.w	r3, r2, r3
 8009f28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f2a:	e1c2      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f30:	e1bf      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009f32:	4b0e      	ldr	r3, [pc, #56]	@ (8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f3e:	d102      	bne.n	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8009f40:	4b0c      	ldr	r3, [pc, #48]	@ (8009f74 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009f42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f44:	e1b5      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f46:	2300      	movs	r3, #0
 8009f48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f4a:	e1b2      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009f4c:	4b07      	ldr	r3, [pc, #28]	@ (8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009f54:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009f58:	d102      	bne.n	8009f60 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8009f5a:	4b07      	ldr	r3, [pc, #28]	@ (8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009f5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f5e:	e1a8      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f60:	2300      	movs	r3, #0
 8009f62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f64:	e1a5      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009f66:	2300      	movs	r3, #0
 8009f68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f6a:	e1a2      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009f6c:	58024400 	.word	0x58024400
 8009f70:	03d09000 	.word	0x03d09000
 8009f74:	003d0900 	.word	0x003d0900
 8009f78:	017d7840 	.word	0x017d7840
 8009f7c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009f80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f84:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8009f88:	430b      	orrs	r3, r1
 8009f8a:	d173      	bne.n	800a074 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8009f8c:	4b9c      	ldr	r3, [pc, #624]	@ (800a200 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009f8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f90:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009f94:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009f96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f98:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009f9c:	d02f      	beq.n	8009ffe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8009f9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fa0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009fa4:	d863      	bhi.n	800a06e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8009fa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d004      	beq.n	8009fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8009fac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009fb2:	d012      	beq.n	8009fda <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8009fb4:	e05b      	b.n	800a06e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009fb6:	4b92      	ldr	r3, [pc, #584]	@ (800a200 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009fbe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009fc2:	d107      	bne.n	8009fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009fc4:	f107 0318 	add.w	r3, r7, #24
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f000 f991 	bl	800a2f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009fce:	69bb      	ldr	r3, [r7, #24]
 8009fd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009fd2:	e16e      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009fd8:	e16b      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009fda:	4b89      	ldr	r3, [pc, #548]	@ (800a200 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009fe2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009fe6:	d107      	bne.n	8009ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009fe8:	f107 030c 	add.w	r3, r7, #12
 8009fec:	4618      	mov	r0, r3
 8009fee:	f000 fad3 	bl	800a598 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009ff2:	697b      	ldr	r3, [r7, #20]
 8009ff4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ff6:	e15c      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ffc:	e159      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009ffe:	4b80      	ldr	r3, [pc, #512]	@ (800a200 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a000:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a002:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a006:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a008:	4b7d      	ldr	r3, [pc, #500]	@ (800a200 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f003 0304 	and.w	r3, r3, #4
 800a010:	2b04      	cmp	r3, #4
 800a012:	d10c      	bne.n	800a02e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800a014:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a016:	2b00      	cmp	r3, #0
 800a018:	d109      	bne.n	800a02e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a01a:	4b79      	ldr	r3, [pc, #484]	@ (800a200 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	08db      	lsrs	r3, r3, #3
 800a020:	f003 0303 	and.w	r3, r3, #3
 800a024:	4a77      	ldr	r2, [pc, #476]	@ (800a204 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a026:	fa22 f303 	lsr.w	r3, r2, r3
 800a02a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a02c:	e01e      	b.n	800a06c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a02e:	4b74      	ldr	r3, [pc, #464]	@ (800a200 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a036:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a03a:	d106      	bne.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800a03c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a03e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a042:	d102      	bne.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a044:	4b70      	ldr	r3, [pc, #448]	@ (800a208 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a046:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a048:	e010      	b.n	800a06c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a04a:	4b6d      	ldr	r3, [pc, #436]	@ (800a200 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a052:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a056:	d106      	bne.n	800a066 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800a058:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a05a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a05e:	d102      	bne.n	800a066 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a060:	4b6a      	ldr	r3, [pc, #424]	@ (800a20c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a062:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a064:	e002      	b.n	800a06c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a066:	2300      	movs	r3, #0
 800a068:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a06a:	e122      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a06c:	e121      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a06e:	2300      	movs	r3, #0
 800a070:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a072:	e11e      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a074:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a078:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800a07c:	430b      	orrs	r3, r1
 800a07e:	d133      	bne.n	800a0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a080:	4b5f      	ldr	r3, [pc, #380]	@ (800a200 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a082:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a084:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a088:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a08a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d004      	beq.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800a090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a092:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a096:	d012      	beq.n	800a0be <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800a098:	e023      	b.n	800a0e2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a09a:	4b59      	ldr	r3, [pc, #356]	@ (800a200 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a0a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a0a6:	d107      	bne.n	800a0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a0a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	f000 fbc7 	bl	800a840 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a0b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0b6:	e0fc      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0bc:	e0f9      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a0be:	4b50      	ldr	r3, [pc, #320]	@ (800a200 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a0c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a0ca:	d107      	bne.n	800a0dc <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a0cc:	f107 0318 	add.w	r3, r7, #24
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f000 f90d 	bl	800a2f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a0d6:	6a3b      	ldr	r3, [r7, #32]
 800a0d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0da:	e0ea      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a0dc:	2300      	movs	r3, #0
 800a0de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0e0:	e0e7      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0e6:	e0e4      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a0e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a0ec:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800a0f0:	430b      	orrs	r3, r1
 800a0f2:	f040 808d 	bne.w	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800a0f6:	4b42      	ldr	r3, [pc, #264]	@ (800a200 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a0f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a0fa:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800a0fe:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a102:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a106:	d06b      	beq.n	800a1e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800a108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a10a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a10e:	d874      	bhi.n	800a1fa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a112:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a116:	d056      	beq.n	800a1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800a118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a11a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a11e:	d86c      	bhi.n	800a1fa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a120:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a122:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a126:	d03b      	beq.n	800a1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800a128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a12a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a12e:	d864      	bhi.n	800a1fa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a132:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a136:	d021      	beq.n	800a17c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800a138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a13a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a13e:	d85c      	bhi.n	800a1fa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a142:	2b00      	cmp	r3, #0
 800a144:	d004      	beq.n	800a150 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800a146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a148:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a14c:	d004      	beq.n	800a158 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800a14e:	e054      	b.n	800a1fa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a150:	f000 f8b8 	bl	800a2c4 <HAL_RCCEx_GetD3PCLK1Freq>
 800a154:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a156:	e0ac      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a158:	4b29      	ldr	r3, [pc, #164]	@ (800a200 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a160:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a164:	d107      	bne.n	800a176 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a166:	f107 0318 	add.w	r3, r7, #24
 800a16a:	4618      	mov	r0, r3
 800a16c:	f000 f8c0 	bl	800a2f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a170:	69fb      	ldr	r3, [r7, #28]
 800a172:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a174:	e09d      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a176:	2300      	movs	r3, #0
 800a178:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a17a:	e09a      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a17c:	4b20      	ldr	r3, [pc, #128]	@ (800a200 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a184:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a188:	d107      	bne.n	800a19a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a18a:	f107 030c 	add.w	r3, r7, #12
 800a18e:	4618      	mov	r0, r3
 800a190:	f000 fa02 	bl	800a598 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a194:	693b      	ldr	r3, [r7, #16]
 800a196:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a198:	e08b      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a19a:	2300      	movs	r3, #0
 800a19c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a19e:	e088      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a1a0:	4b17      	ldr	r3, [pc, #92]	@ (800a200 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	f003 0304 	and.w	r3, r3, #4
 800a1a8:	2b04      	cmp	r3, #4
 800a1aa:	d109      	bne.n	800a1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a1ac:	4b14      	ldr	r3, [pc, #80]	@ (800a200 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	08db      	lsrs	r3, r3, #3
 800a1b2:	f003 0303 	and.w	r3, r3, #3
 800a1b6:	4a13      	ldr	r2, [pc, #76]	@ (800a204 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a1b8:	fa22 f303 	lsr.w	r3, r2, r3
 800a1bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a1be:	e078      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1c4:	e075      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a1c6:	4b0e      	ldr	r3, [pc, #56]	@ (800a200 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a1ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a1d2:	d102      	bne.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800a1d4:	4b0c      	ldr	r3, [pc, #48]	@ (800a208 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a1d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a1d8:	e06b      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a1da:	2300      	movs	r3, #0
 800a1dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1de:	e068      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a1e0:	4b07      	ldr	r3, [pc, #28]	@ (800a200 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a1e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a1ec:	d102      	bne.n	800a1f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800a1ee:	4b07      	ldr	r3, [pc, #28]	@ (800a20c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a1f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a1f2:	e05e      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1f8:	e05b      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1fe:	e058      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a200:	58024400 	.word	0x58024400
 800a204:	03d09000 	.word	0x03d09000
 800a208:	003d0900 	.word	0x003d0900
 800a20c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a210:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a214:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800a218:	430b      	orrs	r3, r1
 800a21a:	d148      	bne.n	800a2ae <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800a21c:	4b27      	ldr	r3, [pc, #156]	@ (800a2bc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a21e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a220:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a224:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a228:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a22c:	d02a      	beq.n	800a284 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800a22e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a230:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a234:	d838      	bhi.n	800a2a8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800a236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d004      	beq.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800a23c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a23e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a242:	d00d      	beq.n	800a260 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800a244:	e030      	b.n	800a2a8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a246:	4b1d      	ldr	r3, [pc, #116]	@ (800a2bc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a24e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a252:	d102      	bne.n	800a25a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800a254:	4b1a      	ldr	r3, [pc, #104]	@ (800a2c0 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800a256:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a258:	e02b      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a25a:	2300      	movs	r3, #0
 800a25c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a25e:	e028      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a260:	4b16      	ldr	r3, [pc, #88]	@ (800a2bc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a268:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a26c:	d107      	bne.n	800a27e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a26e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a272:	4618      	mov	r0, r3
 800a274:	f000 fae4 	bl	800a840 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a27a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a27c:	e019      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a27e:	2300      	movs	r3, #0
 800a280:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a282:	e016      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a284:	4b0d      	ldr	r3, [pc, #52]	@ (800a2bc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a28c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a290:	d107      	bne.n	800a2a2 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a292:	f107 0318 	add.w	r3, r7, #24
 800a296:	4618      	mov	r0, r3
 800a298:	f000 f82a 	bl	800a2f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a29c:	69fb      	ldr	r3, [r7, #28]
 800a29e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a2a0:	e007      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2a6:	e004      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2ac:	e001      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800a2b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	3740      	adds	r7, #64	@ 0x40
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}
 800a2bc:	58024400 	.word	0x58024400
 800a2c0:	017d7840 	.word	0x017d7840

0800a2c4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a2c8:	f7fe f816 	bl	80082f8 <HAL_RCC_GetHCLKFreq>
 800a2cc:	4602      	mov	r2, r0
 800a2ce:	4b06      	ldr	r3, [pc, #24]	@ (800a2e8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a2d0:	6a1b      	ldr	r3, [r3, #32]
 800a2d2:	091b      	lsrs	r3, r3, #4
 800a2d4:	f003 0307 	and.w	r3, r3, #7
 800a2d8:	4904      	ldr	r1, [pc, #16]	@ (800a2ec <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a2da:	5ccb      	ldrb	r3, [r1, r3]
 800a2dc:	f003 031f 	and.w	r3, r3, #31
 800a2e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	bd80      	pop	{r7, pc}
 800a2e8:	58024400 	.word	0x58024400
 800a2ec:	0800d0b0 	.word	0x0800d0b0

0800a2f0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a2f0:	b480      	push	{r7}
 800a2f2:	b089      	sub	sp, #36	@ 0x24
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a2f8:	4ba1      	ldr	r3, [pc, #644]	@ (800a580 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a2fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2fc:	f003 0303 	and.w	r3, r3, #3
 800a300:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a302:	4b9f      	ldr	r3, [pc, #636]	@ (800a580 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a306:	0b1b      	lsrs	r3, r3, #12
 800a308:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a30c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a30e:	4b9c      	ldr	r3, [pc, #624]	@ (800a580 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a312:	091b      	lsrs	r3, r3, #4
 800a314:	f003 0301 	and.w	r3, r3, #1
 800a318:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a31a:	4b99      	ldr	r3, [pc, #612]	@ (800a580 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a31c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a31e:	08db      	lsrs	r3, r3, #3
 800a320:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a324:	693a      	ldr	r2, [r7, #16]
 800a326:	fb02 f303 	mul.w	r3, r2, r3
 800a32a:	ee07 3a90 	vmov	s15, r3
 800a32e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a332:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a336:	697b      	ldr	r3, [r7, #20]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	f000 8111 	beq.w	800a560 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a33e:	69bb      	ldr	r3, [r7, #24]
 800a340:	2b02      	cmp	r3, #2
 800a342:	f000 8083 	beq.w	800a44c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a346:	69bb      	ldr	r3, [r7, #24]
 800a348:	2b02      	cmp	r3, #2
 800a34a:	f200 80a1 	bhi.w	800a490 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a34e:	69bb      	ldr	r3, [r7, #24]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d003      	beq.n	800a35c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a354:	69bb      	ldr	r3, [r7, #24]
 800a356:	2b01      	cmp	r3, #1
 800a358:	d056      	beq.n	800a408 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a35a:	e099      	b.n	800a490 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a35c:	4b88      	ldr	r3, [pc, #544]	@ (800a580 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	f003 0320 	and.w	r3, r3, #32
 800a364:	2b00      	cmp	r3, #0
 800a366:	d02d      	beq.n	800a3c4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a368:	4b85      	ldr	r3, [pc, #532]	@ (800a580 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	08db      	lsrs	r3, r3, #3
 800a36e:	f003 0303 	and.w	r3, r3, #3
 800a372:	4a84      	ldr	r2, [pc, #528]	@ (800a584 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a374:	fa22 f303 	lsr.w	r3, r2, r3
 800a378:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a37a:	68bb      	ldr	r3, [r7, #8]
 800a37c:	ee07 3a90 	vmov	s15, r3
 800a380:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a384:	697b      	ldr	r3, [r7, #20]
 800a386:	ee07 3a90 	vmov	s15, r3
 800a38a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a38e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a392:	4b7b      	ldr	r3, [pc, #492]	@ (800a580 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a394:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a396:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a39a:	ee07 3a90 	vmov	s15, r3
 800a39e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3a2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a3a6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a588 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a3aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a3ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a3b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3be:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a3c2:	e087      	b.n	800a4d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a3c4:	697b      	ldr	r3, [r7, #20]
 800a3c6:	ee07 3a90 	vmov	s15, r3
 800a3ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3ce:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a58c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a3d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a3d6:	4b6a      	ldr	r3, [pc, #424]	@ (800a580 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a3d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3de:	ee07 3a90 	vmov	s15, r3
 800a3e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3e6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a3ea:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a588 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a3ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a3f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a3fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a402:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a406:	e065      	b.n	800a4d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a408:	697b      	ldr	r3, [r7, #20]
 800a40a:	ee07 3a90 	vmov	s15, r3
 800a40e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a412:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a590 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a416:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a41a:	4b59      	ldr	r3, [pc, #356]	@ (800a580 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a41c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a41e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a422:	ee07 3a90 	vmov	s15, r3
 800a426:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a42a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a42e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a588 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a432:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a436:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a43a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a43e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a442:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a446:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a44a:	e043      	b.n	800a4d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a44c:	697b      	ldr	r3, [r7, #20]
 800a44e:	ee07 3a90 	vmov	s15, r3
 800a452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a456:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a594 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a45a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a45e:	4b48      	ldr	r3, [pc, #288]	@ (800a580 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a460:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a462:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a466:	ee07 3a90 	vmov	s15, r3
 800a46a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a46e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a472:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a588 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a476:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a47a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a47e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a482:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a486:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a48a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a48e:	e021      	b.n	800a4d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a490:	697b      	ldr	r3, [r7, #20]
 800a492:	ee07 3a90 	vmov	s15, r3
 800a496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a49a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a590 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a49e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4a2:	4b37      	ldr	r3, [pc, #220]	@ (800a580 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a4a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4aa:	ee07 3a90 	vmov	s15, r3
 800a4ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4b2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a4b6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a588 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a4ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a4c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a4d2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800a4d4:	4b2a      	ldr	r3, [pc, #168]	@ (800a580 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a4d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4d8:	0a5b      	lsrs	r3, r3, #9
 800a4da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a4de:	ee07 3a90 	vmov	s15, r3
 800a4e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a4ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a4ee:	edd7 6a07 	vldr	s13, [r7, #28]
 800a4f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a4f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a4fa:	ee17 2a90 	vmov	r2, s15
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800a502:	4b1f      	ldr	r3, [pc, #124]	@ (800a580 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a504:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a506:	0c1b      	lsrs	r3, r3, #16
 800a508:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a50c:	ee07 3a90 	vmov	s15, r3
 800a510:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a514:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a518:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a51c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a520:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a524:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a528:	ee17 2a90 	vmov	r2, s15
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800a530:	4b13      	ldr	r3, [pc, #76]	@ (800a580 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a532:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a534:	0e1b      	lsrs	r3, r3, #24
 800a536:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a53a:	ee07 3a90 	vmov	s15, r3
 800a53e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a542:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a546:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a54a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a54e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a552:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a556:	ee17 2a90 	vmov	r2, s15
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a55e:	e008      	b.n	800a572 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2200      	movs	r2, #0
 800a564:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2200      	movs	r2, #0
 800a56a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2200      	movs	r2, #0
 800a570:	609a      	str	r2, [r3, #8]
}
 800a572:	bf00      	nop
 800a574:	3724      	adds	r7, #36	@ 0x24
 800a576:	46bd      	mov	sp, r7
 800a578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57c:	4770      	bx	lr
 800a57e:	bf00      	nop
 800a580:	58024400 	.word	0x58024400
 800a584:	03d09000 	.word	0x03d09000
 800a588:	46000000 	.word	0x46000000
 800a58c:	4c742400 	.word	0x4c742400
 800a590:	4a742400 	.word	0x4a742400
 800a594:	4bbebc20 	.word	0x4bbebc20

0800a598 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800a598:	b480      	push	{r7}
 800a59a:	b089      	sub	sp, #36	@ 0x24
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a5a0:	4ba1      	ldr	r3, [pc, #644]	@ (800a828 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a5a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5a4:	f003 0303 	and.w	r3, r3, #3
 800a5a8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800a5aa:	4b9f      	ldr	r3, [pc, #636]	@ (800a828 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a5ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5ae:	0d1b      	lsrs	r3, r3, #20
 800a5b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a5b4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a5b6:	4b9c      	ldr	r3, [pc, #624]	@ (800a828 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a5b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5ba:	0a1b      	lsrs	r3, r3, #8
 800a5bc:	f003 0301 	and.w	r3, r3, #1
 800a5c0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800a5c2:	4b99      	ldr	r3, [pc, #612]	@ (800a828 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a5c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a5c6:	08db      	lsrs	r3, r3, #3
 800a5c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a5cc:	693a      	ldr	r2, [r7, #16]
 800a5ce:	fb02 f303 	mul.w	r3, r2, r3
 800a5d2:	ee07 3a90 	vmov	s15, r3
 800a5d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5da:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a5de:	697b      	ldr	r3, [r7, #20]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	f000 8111 	beq.w	800a808 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a5e6:	69bb      	ldr	r3, [r7, #24]
 800a5e8:	2b02      	cmp	r3, #2
 800a5ea:	f000 8083 	beq.w	800a6f4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a5ee:	69bb      	ldr	r3, [r7, #24]
 800a5f0:	2b02      	cmp	r3, #2
 800a5f2:	f200 80a1 	bhi.w	800a738 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a5f6:	69bb      	ldr	r3, [r7, #24]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d003      	beq.n	800a604 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a5fc:	69bb      	ldr	r3, [r7, #24]
 800a5fe:	2b01      	cmp	r3, #1
 800a600:	d056      	beq.n	800a6b0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a602:	e099      	b.n	800a738 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a604:	4b88      	ldr	r3, [pc, #544]	@ (800a828 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	f003 0320 	and.w	r3, r3, #32
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d02d      	beq.n	800a66c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a610:	4b85      	ldr	r3, [pc, #532]	@ (800a828 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	08db      	lsrs	r3, r3, #3
 800a616:	f003 0303 	and.w	r3, r3, #3
 800a61a:	4a84      	ldr	r2, [pc, #528]	@ (800a82c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a61c:	fa22 f303 	lsr.w	r3, r2, r3
 800a620:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a622:	68bb      	ldr	r3, [r7, #8]
 800a624:	ee07 3a90 	vmov	s15, r3
 800a628:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a62c:	697b      	ldr	r3, [r7, #20]
 800a62e:	ee07 3a90 	vmov	s15, r3
 800a632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a636:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a63a:	4b7b      	ldr	r3, [pc, #492]	@ (800a828 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a63c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a63e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a642:	ee07 3a90 	vmov	s15, r3
 800a646:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a64a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a64e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a830 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a652:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a656:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a65a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a65e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a662:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a666:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a66a:	e087      	b.n	800a77c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a66c:	697b      	ldr	r3, [r7, #20]
 800a66e:	ee07 3a90 	vmov	s15, r3
 800a672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a676:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a834 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a67a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a67e:	4b6a      	ldr	r3, [pc, #424]	@ (800a828 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a682:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a686:	ee07 3a90 	vmov	s15, r3
 800a68a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a68e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a692:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a830 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a696:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a69a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a69e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a6a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a6ae:	e065      	b.n	800a77c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a6b0:	697b      	ldr	r3, [r7, #20]
 800a6b2:	ee07 3a90 	vmov	s15, r3
 800a6b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6ba:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a838 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a6be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6c2:	4b59      	ldr	r3, [pc, #356]	@ (800a828 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a6c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6ca:	ee07 3a90 	vmov	s15, r3
 800a6ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6d2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a6d6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a830 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a6da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a6e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a6f2:	e043      	b.n	800a77c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a6f4:	697b      	ldr	r3, [r7, #20]
 800a6f6:	ee07 3a90 	vmov	s15, r3
 800a6fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6fe:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a83c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a702:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a706:	4b48      	ldr	r3, [pc, #288]	@ (800a828 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a70a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a70e:	ee07 3a90 	vmov	s15, r3
 800a712:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a716:	ed97 6a03 	vldr	s12, [r7, #12]
 800a71a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a830 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a71e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a722:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a726:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a72a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a72e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a732:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a736:	e021      	b.n	800a77c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a738:	697b      	ldr	r3, [r7, #20]
 800a73a:	ee07 3a90 	vmov	s15, r3
 800a73e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a742:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a838 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a746:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a74a:	4b37      	ldr	r3, [pc, #220]	@ (800a828 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a74c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a74e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a752:	ee07 3a90 	vmov	s15, r3
 800a756:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a75a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a75e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a830 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a762:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a766:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a76a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a76e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a772:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a776:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a77a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800a77c:	4b2a      	ldr	r3, [pc, #168]	@ (800a828 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a77e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a780:	0a5b      	lsrs	r3, r3, #9
 800a782:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a786:	ee07 3a90 	vmov	s15, r3
 800a78a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a78e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a792:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a796:	edd7 6a07 	vldr	s13, [r7, #28]
 800a79a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a79e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a7a2:	ee17 2a90 	vmov	r2, s15
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800a7aa:	4b1f      	ldr	r3, [pc, #124]	@ (800a828 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a7ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7ae:	0c1b      	lsrs	r3, r3, #16
 800a7b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a7b4:	ee07 3a90 	vmov	s15, r3
 800a7b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7bc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a7c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a7c4:	edd7 6a07 	vldr	s13, [r7, #28]
 800a7c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a7cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a7d0:	ee17 2a90 	vmov	r2, s15
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800a7d8:	4b13      	ldr	r3, [pc, #76]	@ (800a828 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a7da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7dc:	0e1b      	lsrs	r3, r3, #24
 800a7de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a7e2:	ee07 3a90 	vmov	s15, r3
 800a7e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a7ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a7f2:	edd7 6a07 	vldr	s13, [r7, #28]
 800a7f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a7fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a7fe:	ee17 2a90 	vmov	r2, s15
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a806:	e008      	b.n	800a81a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2200      	movs	r2, #0
 800a80c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2200      	movs	r2, #0
 800a812:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2200      	movs	r2, #0
 800a818:	609a      	str	r2, [r3, #8]
}
 800a81a:	bf00      	nop
 800a81c:	3724      	adds	r7, #36	@ 0x24
 800a81e:	46bd      	mov	sp, r7
 800a820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a824:	4770      	bx	lr
 800a826:	bf00      	nop
 800a828:	58024400 	.word	0x58024400
 800a82c:	03d09000 	.word	0x03d09000
 800a830:	46000000 	.word	0x46000000
 800a834:	4c742400 	.word	0x4c742400
 800a838:	4a742400 	.word	0x4a742400
 800a83c:	4bbebc20 	.word	0x4bbebc20

0800a840 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800a840:	b480      	push	{r7}
 800a842:	b089      	sub	sp, #36	@ 0x24
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a848:	4ba0      	ldr	r3, [pc, #640]	@ (800aacc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a84a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a84c:	f003 0303 	and.w	r3, r3, #3
 800a850:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800a852:	4b9e      	ldr	r3, [pc, #632]	@ (800aacc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a856:	091b      	lsrs	r3, r3, #4
 800a858:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a85c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a85e:	4b9b      	ldr	r3, [pc, #620]	@ (800aacc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a862:	f003 0301 	and.w	r3, r3, #1
 800a866:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a868:	4b98      	ldr	r3, [pc, #608]	@ (800aacc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a86a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a86c:	08db      	lsrs	r3, r3, #3
 800a86e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a872:	693a      	ldr	r2, [r7, #16]
 800a874:	fb02 f303 	mul.w	r3, r2, r3
 800a878:	ee07 3a90 	vmov	s15, r3
 800a87c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a880:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a884:	697b      	ldr	r3, [r7, #20]
 800a886:	2b00      	cmp	r3, #0
 800a888:	f000 8111 	beq.w	800aaae <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800a88c:	69bb      	ldr	r3, [r7, #24]
 800a88e:	2b02      	cmp	r3, #2
 800a890:	f000 8083 	beq.w	800a99a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800a894:	69bb      	ldr	r3, [r7, #24]
 800a896:	2b02      	cmp	r3, #2
 800a898:	f200 80a1 	bhi.w	800a9de <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800a89c:	69bb      	ldr	r3, [r7, #24]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d003      	beq.n	800a8aa <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800a8a2:	69bb      	ldr	r3, [r7, #24]
 800a8a4:	2b01      	cmp	r3, #1
 800a8a6:	d056      	beq.n	800a956 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800a8a8:	e099      	b.n	800a9de <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a8aa:	4b88      	ldr	r3, [pc, #544]	@ (800aacc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	f003 0320 	and.w	r3, r3, #32
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d02d      	beq.n	800a912 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a8b6:	4b85      	ldr	r3, [pc, #532]	@ (800aacc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	08db      	lsrs	r3, r3, #3
 800a8bc:	f003 0303 	and.w	r3, r3, #3
 800a8c0:	4a83      	ldr	r2, [pc, #524]	@ (800aad0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800a8c2:	fa22 f303 	lsr.w	r3, r2, r3
 800a8c6:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	ee07 3a90 	vmov	s15, r3
 800a8ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8d2:	697b      	ldr	r3, [r7, #20]
 800a8d4:	ee07 3a90 	vmov	s15, r3
 800a8d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a8e0:	4b7a      	ldr	r3, [pc, #488]	@ (800aacc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a8e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8e8:	ee07 3a90 	vmov	s15, r3
 800a8ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8f0:	ed97 6a03 	vldr	s12, [r7, #12]
 800a8f4:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800aad4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a8f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a900:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a904:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a908:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a90c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a910:	e087      	b.n	800aa22 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a912:	697b      	ldr	r3, [r7, #20]
 800a914:	ee07 3a90 	vmov	s15, r3
 800a918:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a91c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800aad8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a920:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a924:	4b69      	ldr	r3, [pc, #420]	@ (800aacc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a928:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a92c:	ee07 3a90 	vmov	s15, r3
 800a930:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a934:	ed97 6a03 	vldr	s12, [r7, #12]
 800a938:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800aad4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a93c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a940:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a944:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a948:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a94c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a950:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a954:	e065      	b.n	800aa22 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a956:	697b      	ldr	r3, [r7, #20]
 800a958:	ee07 3a90 	vmov	s15, r3
 800a95c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a960:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800aadc <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a964:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a968:	4b58      	ldr	r3, [pc, #352]	@ (800aacc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a96a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a96c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a970:	ee07 3a90 	vmov	s15, r3
 800a974:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a978:	ed97 6a03 	vldr	s12, [r7, #12]
 800a97c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800aad4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a980:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a984:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a988:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a98c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a990:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a994:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a998:	e043      	b.n	800aa22 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a99a:	697b      	ldr	r3, [r7, #20]
 800a99c:	ee07 3a90 	vmov	s15, r3
 800a9a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9a4:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800aae0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a9a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9ac:	4b47      	ldr	r3, [pc, #284]	@ (800aacc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a9ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a9b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9b4:	ee07 3a90 	vmov	s15, r3
 800a9b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9bc:	ed97 6a03 	vldr	s12, [r7, #12]
 800a9c0:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800aad4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a9c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9cc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a9d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a9d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9d8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a9dc:	e021      	b.n	800aa22 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a9de:	697b      	ldr	r3, [r7, #20]
 800a9e0:	ee07 3a90 	vmov	s15, r3
 800a9e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9e8:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800aad8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a9ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9f0:	4b36      	ldr	r3, [pc, #216]	@ (800aacc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a9f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a9f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9f8:	ee07 3a90 	vmov	s15, r3
 800a9fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa00:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa04:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800aad4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800aa08:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa10:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aa14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa18:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa1c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aa20:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800aa22:	4b2a      	ldr	r3, [pc, #168]	@ (800aacc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aa24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa26:	0a5b      	lsrs	r3, r3, #9
 800aa28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aa2c:	ee07 3a90 	vmov	s15, r3
 800aa30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa34:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aa38:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aa3c:	edd7 6a07 	vldr	s13, [r7, #28]
 800aa40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa48:	ee17 2a90 	vmov	r2, s15
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800aa50:	4b1e      	ldr	r3, [pc, #120]	@ (800aacc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aa52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa54:	0c1b      	lsrs	r3, r3, #16
 800aa56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aa5a:	ee07 3a90 	vmov	s15, r3
 800aa5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa62:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aa66:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aa6a:	edd7 6a07 	vldr	s13, [r7, #28]
 800aa6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa76:	ee17 2a90 	vmov	r2, s15
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800aa7e:	4b13      	ldr	r3, [pc, #76]	@ (800aacc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aa80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa82:	0e1b      	lsrs	r3, r3, #24
 800aa84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aa88:	ee07 3a90 	vmov	s15, r3
 800aa8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa90:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aa94:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aa98:	edd7 6a07 	vldr	s13, [r7, #28]
 800aa9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aaa0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aaa4:	ee17 2a90 	vmov	r2, s15
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800aaac:	e008      	b.n	800aac0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	2200      	movs	r2, #0
 800aab2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2200      	movs	r2, #0
 800aab8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	2200      	movs	r2, #0
 800aabe:	609a      	str	r2, [r3, #8]
}
 800aac0:	bf00      	nop
 800aac2:	3724      	adds	r7, #36	@ 0x24
 800aac4:	46bd      	mov	sp, r7
 800aac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaca:	4770      	bx	lr
 800aacc:	58024400 	.word	0x58024400
 800aad0:	03d09000 	.word	0x03d09000
 800aad4:	46000000 	.word	0x46000000
 800aad8:	4c742400 	.word	0x4c742400
 800aadc:	4a742400 	.word	0x4a742400
 800aae0:	4bbebc20 	.word	0x4bbebc20

0800aae4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b084      	sub	sp, #16
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
 800aaec:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800aaee:	2300      	movs	r3, #0
 800aaf0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800aaf2:	4b53      	ldr	r3, [pc, #332]	@ (800ac40 <RCCEx_PLL2_Config+0x15c>)
 800aaf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aaf6:	f003 0303 	and.w	r3, r3, #3
 800aafa:	2b03      	cmp	r3, #3
 800aafc:	d101      	bne.n	800ab02 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800aafe:	2301      	movs	r3, #1
 800ab00:	e099      	b.n	800ac36 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800ab02:	4b4f      	ldr	r3, [pc, #316]	@ (800ac40 <RCCEx_PLL2_Config+0x15c>)
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	4a4e      	ldr	r2, [pc, #312]	@ (800ac40 <RCCEx_PLL2_Config+0x15c>)
 800ab08:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ab0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ab0e:	f7f8 fda1 	bl	8003654 <HAL_GetTick>
 800ab12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ab14:	e008      	b.n	800ab28 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ab16:	f7f8 fd9d 	bl	8003654 <HAL_GetTick>
 800ab1a:	4602      	mov	r2, r0
 800ab1c:	68bb      	ldr	r3, [r7, #8]
 800ab1e:	1ad3      	subs	r3, r2, r3
 800ab20:	2b02      	cmp	r3, #2
 800ab22:	d901      	bls.n	800ab28 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ab24:	2303      	movs	r3, #3
 800ab26:	e086      	b.n	800ac36 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ab28:	4b45      	ldr	r3, [pc, #276]	@ (800ac40 <RCCEx_PLL2_Config+0x15c>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d1f0      	bne.n	800ab16 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800ab34:	4b42      	ldr	r3, [pc, #264]	@ (800ac40 <RCCEx_PLL2_Config+0x15c>)
 800ab36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab38:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	031b      	lsls	r3, r3, #12
 800ab42:	493f      	ldr	r1, [pc, #252]	@ (800ac40 <RCCEx_PLL2_Config+0x15c>)
 800ab44:	4313      	orrs	r3, r2
 800ab46:	628b      	str	r3, [r1, #40]	@ 0x28
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	685b      	ldr	r3, [r3, #4]
 800ab4c:	3b01      	subs	r3, #1
 800ab4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	689b      	ldr	r3, [r3, #8]
 800ab56:	3b01      	subs	r3, #1
 800ab58:	025b      	lsls	r3, r3, #9
 800ab5a:	b29b      	uxth	r3, r3
 800ab5c:	431a      	orrs	r2, r3
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	68db      	ldr	r3, [r3, #12]
 800ab62:	3b01      	subs	r3, #1
 800ab64:	041b      	lsls	r3, r3, #16
 800ab66:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800ab6a:	431a      	orrs	r2, r3
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	691b      	ldr	r3, [r3, #16]
 800ab70:	3b01      	subs	r3, #1
 800ab72:	061b      	lsls	r3, r3, #24
 800ab74:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800ab78:	4931      	ldr	r1, [pc, #196]	@ (800ac40 <RCCEx_PLL2_Config+0x15c>)
 800ab7a:	4313      	orrs	r3, r2
 800ab7c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ab7e:	4b30      	ldr	r3, [pc, #192]	@ (800ac40 <RCCEx_PLL2_Config+0x15c>)
 800ab80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab82:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	695b      	ldr	r3, [r3, #20]
 800ab8a:	492d      	ldr	r1, [pc, #180]	@ (800ac40 <RCCEx_PLL2_Config+0x15c>)
 800ab8c:	4313      	orrs	r3, r2
 800ab8e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ab90:	4b2b      	ldr	r3, [pc, #172]	@ (800ac40 <RCCEx_PLL2_Config+0x15c>)
 800ab92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab94:	f023 0220 	bic.w	r2, r3, #32
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	699b      	ldr	r3, [r3, #24]
 800ab9c:	4928      	ldr	r1, [pc, #160]	@ (800ac40 <RCCEx_PLL2_Config+0x15c>)
 800ab9e:	4313      	orrs	r3, r2
 800aba0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800aba2:	4b27      	ldr	r3, [pc, #156]	@ (800ac40 <RCCEx_PLL2_Config+0x15c>)
 800aba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aba6:	4a26      	ldr	r2, [pc, #152]	@ (800ac40 <RCCEx_PLL2_Config+0x15c>)
 800aba8:	f023 0310 	bic.w	r3, r3, #16
 800abac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800abae:	4b24      	ldr	r3, [pc, #144]	@ (800ac40 <RCCEx_PLL2_Config+0x15c>)
 800abb0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800abb2:	4b24      	ldr	r3, [pc, #144]	@ (800ac44 <RCCEx_PLL2_Config+0x160>)
 800abb4:	4013      	ands	r3, r2
 800abb6:	687a      	ldr	r2, [r7, #4]
 800abb8:	69d2      	ldr	r2, [r2, #28]
 800abba:	00d2      	lsls	r2, r2, #3
 800abbc:	4920      	ldr	r1, [pc, #128]	@ (800ac40 <RCCEx_PLL2_Config+0x15c>)
 800abbe:	4313      	orrs	r3, r2
 800abc0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800abc2:	4b1f      	ldr	r3, [pc, #124]	@ (800ac40 <RCCEx_PLL2_Config+0x15c>)
 800abc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abc6:	4a1e      	ldr	r2, [pc, #120]	@ (800ac40 <RCCEx_PLL2_Config+0x15c>)
 800abc8:	f043 0310 	orr.w	r3, r3, #16
 800abcc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d106      	bne.n	800abe2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800abd4:	4b1a      	ldr	r3, [pc, #104]	@ (800ac40 <RCCEx_PLL2_Config+0x15c>)
 800abd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abd8:	4a19      	ldr	r2, [pc, #100]	@ (800ac40 <RCCEx_PLL2_Config+0x15c>)
 800abda:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800abde:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800abe0:	e00f      	b.n	800ac02 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	2b01      	cmp	r3, #1
 800abe6:	d106      	bne.n	800abf6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800abe8:	4b15      	ldr	r3, [pc, #84]	@ (800ac40 <RCCEx_PLL2_Config+0x15c>)
 800abea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abec:	4a14      	ldr	r2, [pc, #80]	@ (800ac40 <RCCEx_PLL2_Config+0x15c>)
 800abee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800abf2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800abf4:	e005      	b.n	800ac02 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800abf6:	4b12      	ldr	r3, [pc, #72]	@ (800ac40 <RCCEx_PLL2_Config+0x15c>)
 800abf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abfa:	4a11      	ldr	r2, [pc, #68]	@ (800ac40 <RCCEx_PLL2_Config+0x15c>)
 800abfc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ac00:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ac02:	4b0f      	ldr	r3, [pc, #60]	@ (800ac40 <RCCEx_PLL2_Config+0x15c>)
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	4a0e      	ldr	r2, [pc, #56]	@ (800ac40 <RCCEx_PLL2_Config+0x15c>)
 800ac08:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ac0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ac0e:	f7f8 fd21 	bl	8003654 <HAL_GetTick>
 800ac12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ac14:	e008      	b.n	800ac28 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ac16:	f7f8 fd1d 	bl	8003654 <HAL_GetTick>
 800ac1a:	4602      	mov	r2, r0
 800ac1c:	68bb      	ldr	r3, [r7, #8]
 800ac1e:	1ad3      	subs	r3, r2, r3
 800ac20:	2b02      	cmp	r3, #2
 800ac22:	d901      	bls.n	800ac28 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ac24:	2303      	movs	r3, #3
 800ac26:	e006      	b.n	800ac36 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ac28:	4b05      	ldr	r3, [pc, #20]	@ (800ac40 <RCCEx_PLL2_Config+0x15c>)
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d0f0      	beq.n	800ac16 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800ac34:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac36:	4618      	mov	r0, r3
 800ac38:	3710      	adds	r7, #16
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	bd80      	pop	{r7, pc}
 800ac3e:	bf00      	nop
 800ac40:	58024400 	.word	0x58024400
 800ac44:	ffff0007 	.word	0xffff0007

0800ac48 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b084      	sub	sp, #16
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
 800ac50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ac52:	2300      	movs	r3, #0
 800ac54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ac56:	4b53      	ldr	r3, [pc, #332]	@ (800ada4 <RCCEx_PLL3_Config+0x15c>)
 800ac58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac5a:	f003 0303 	and.w	r3, r3, #3
 800ac5e:	2b03      	cmp	r3, #3
 800ac60:	d101      	bne.n	800ac66 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800ac62:	2301      	movs	r3, #1
 800ac64:	e099      	b.n	800ad9a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ac66:	4b4f      	ldr	r3, [pc, #316]	@ (800ada4 <RCCEx_PLL3_Config+0x15c>)
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	4a4e      	ldr	r2, [pc, #312]	@ (800ada4 <RCCEx_PLL3_Config+0x15c>)
 800ac6c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ac70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ac72:	f7f8 fcef 	bl	8003654 <HAL_GetTick>
 800ac76:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ac78:	e008      	b.n	800ac8c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ac7a:	f7f8 fceb 	bl	8003654 <HAL_GetTick>
 800ac7e:	4602      	mov	r2, r0
 800ac80:	68bb      	ldr	r3, [r7, #8]
 800ac82:	1ad3      	subs	r3, r2, r3
 800ac84:	2b02      	cmp	r3, #2
 800ac86:	d901      	bls.n	800ac8c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ac88:	2303      	movs	r3, #3
 800ac8a:	e086      	b.n	800ad9a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ac8c:	4b45      	ldr	r3, [pc, #276]	@ (800ada4 <RCCEx_PLL3_Config+0x15c>)
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d1f0      	bne.n	800ac7a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800ac98:	4b42      	ldr	r3, [pc, #264]	@ (800ada4 <RCCEx_PLL3_Config+0x15c>)
 800ac9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac9c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	051b      	lsls	r3, r3, #20
 800aca6:	493f      	ldr	r1, [pc, #252]	@ (800ada4 <RCCEx_PLL3_Config+0x15c>)
 800aca8:	4313      	orrs	r3, r2
 800acaa:	628b      	str	r3, [r1, #40]	@ 0x28
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	685b      	ldr	r3, [r3, #4]
 800acb0:	3b01      	subs	r3, #1
 800acb2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	689b      	ldr	r3, [r3, #8]
 800acba:	3b01      	subs	r3, #1
 800acbc:	025b      	lsls	r3, r3, #9
 800acbe:	b29b      	uxth	r3, r3
 800acc0:	431a      	orrs	r2, r3
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	68db      	ldr	r3, [r3, #12]
 800acc6:	3b01      	subs	r3, #1
 800acc8:	041b      	lsls	r3, r3, #16
 800acca:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800acce:	431a      	orrs	r2, r3
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	691b      	ldr	r3, [r3, #16]
 800acd4:	3b01      	subs	r3, #1
 800acd6:	061b      	lsls	r3, r3, #24
 800acd8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800acdc:	4931      	ldr	r1, [pc, #196]	@ (800ada4 <RCCEx_PLL3_Config+0x15c>)
 800acde:	4313      	orrs	r3, r2
 800ace0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800ace2:	4b30      	ldr	r3, [pc, #192]	@ (800ada4 <RCCEx_PLL3_Config+0x15c>)
 800ace4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ace6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	695b      	ldr	r3, [r3, #20]
 800acee:	492d      	ldr	r1, [pc, #180]	@ (800ada4 <RCCEx_PLL3_Config+0x15c>)
 800acf0:	4313      	orrs	r3, r2
 800acf2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800acf4:	4b2b      	ldr	r3, [pc, #172]	@ (800ada4 <RCCEx_PLL3_Config+0x15c>)
 800acf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acf8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	699b      	ldr	r3, [r3, #24]
 800ad00:	4928      	ldr	r1, [pc, #160]	@ (800ada4 <RCCEx_PLL3_Config+0x15c>)
 800ad02:	4313      	orrs	r3, r2
 800ad04:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800ad06:	4b27      	ldr	r3, [pc, #156]	@ (800ada4 <RCCEx_PLL3_Config+0x15c>)
 800ad08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad0a:	4a26      	ldr	r2, [pc, #152]	@ (800ada4 <RCCEx_PLL3_Config+0x15c>)
 800ad0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ad10:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ad12:	4b24      	ldr	r3, [pc, #144]	@ (800ada4 <RCCEx_PLL3_Config+0x15c>)
 800ad14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ad16:	4b24      	ldr	r3, [pc, #144]	@ (800ada8 <RCCEx_PLL3_Config+0x160>)
 800ad18:	4013      	ands	r3, r2
 800ad1a:	687a      	ldr	r2, [r7, #4]
 800ad1c:	69d2      	ldr	r2, [r2, #28]
 800ad1e:	00d2      	lsls	r2, r2, #3
 800ad20:	4920      	ldr	r1, [pc, #128]	@ (800ada4 <RCCEx_PLL3_Config+0x15c>)
 800ad22:	4313      	orrs	r3, r2
 800ad24:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800ad26:	4b1f      	ldr	r3, [pc, #124]	@ (800ada4 <RCCEx_PLL3_Config+0x15c>)
 800ad28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad2a:	4a1e      	ldr	r2, [pc, #120]	@ (800ada4 <RCCEx_PLL3_Config+0x15c>)
 800ad2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ad30:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d106      	bne.n	800ad46 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800ad38:	4b1a      	ldr	r3, [pc, #104]	@ (800ada4 <RCCEx_PLL3_Config+0x15c>)
 800ad3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad3c:	4a19      	ldr	r2, [pc, #100]	@ (800ada4 <RCCEx_PLL3_Config+0x15c>)
 800ad3e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800ad42:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ad44:	e00f      	b.n	800ad66 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	2b01      	cmp	r3, #1
 800ad4a:	d106      	bne.n	800ad5a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800ad4c:	4b15      	ldr	r3, [pc, #84]	@ (800ada4 <RCCEx_PLL3_Config+0x15c>)
 800ad4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad50:	4a14      	ldr	r2, [pc, #80]	@ (800ada4 <RCCEx_PLL3_Config+0x15c>)
 800ad52:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ad56:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ad58:	e005      	b.n	800ad66 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800ad5a:	4b12      	ldr	r3, [pc, #72]	@ (800ada4 <RCCEx_PLL3_Config+0x15c>)
 800ad5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad5e:	4a11      	ldr	r2, [pc, #68]	@ (800ada4 <RCCEx_PLL3_Config+0x15c>)
 800ad60:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800ad64:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800ad66:	4b0f      	ldr	r3, [pc, #60]	@ (800ada4 <RCCEx_PLL3_Config+0x15c>)
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	4a0e      	ldr	r2, [pc, #56]	@ (800ada4 <RCCEx_PLL3_Config+0x15c>)
 800ad6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ad70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ad72:	f7f8 fc6f 	bl	8003654 <HAL_GetTick>
 800ad76:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ad78:	e008      	b.n	800ad8c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ad7a:	f7f8 fc6b 	bl	8003654 <HAL_GetTick>
 800ad7e:	4602      	mov	r2, r0
 800ad80:	68bb      	ldr	r3, [r7, #8]
 800ad82:	1ad3      	subs	r3, r2, r3
 800ad84:	2b02      	cmp	r3, #2
 800ad86:	d901      	bls.n	800ad8c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ad88:	2303      	movs	r3, #3
 800ad8a:	e006      	b.n	800ad9a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ad8c:	4b05      	ldr	r3, [pc, #20]	@ (800ada4 <RCCEx_PLL3_Config+0x15c>)
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d0f0      	beq.n	800ad7a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800ad98:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	3710      	adds	r7, #16
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd80      	pop	{r7, pc}
 800ada2:	bf00      	nop
 800ada4:	58024400 	.word	0x58024400
 800ada8:	ffff0007 	.word	0xffff0007

0800adac <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b086      	sub	sp, #24
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	60f8      	str	r0, [r7, #12]
 800adb4:	60b9      	str	r1, [r7, #8]
 800adb6:	607a      	str	r2, [r7, #4]
 800adb8:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800adba:	68bb      	ldr	r3, [r7, #8]
 800adbc:	2b02      	cmp	r3, #2
 800adbe:	d904      	bls.n	800adca <HAL_SAI_InitProtocol+0x1e>
 800adc0:	68bb      	ldr	r3, [r7, #8]
 800adc2:	3b03      	subs	r3, #3
 800adc4:	2b01      	cmp	r3, #1
 800adc6:	d812      	bhi.n	800adee <HAL_SAI_InitProtocol+0x42>
 800adc8:	e008      	b.n	800addc <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	687a      	ldr	r2, [r7, #4]
 800adce:	68b9      	ldr	r1, [r7, #8]
 800add0:	68f8      	ldr	r0, [r7, #12]
 800add2:	f000 fc2f 	bl	800b634 <SAI_InitI2S>
 800add6:	4603      	mov	r3, r0
 800add8:	75fb      	strb	r3, [r7, #23]
      break;
 800adda:	e00b      	b.n	800adf4 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	687a      	ldr	r2, [r7, #4]
 800ade0:	68b9      	ldr	r1, [r7, #8]
 800ade2:	68f8      	ldr	r0, [r7, #12]
 800ade4:	f000 fcd8 	bl	800b798 <SAI_InitPCM>
 800ade8:	4603      	mov	r3, r0
 800adea:	75fb      	strb	r3, [r7, #23]
      break;
 800adec:	e002      	b.n	800adf4 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800adee:	2301      	movs	r3, #1
 800adf0:	75fb      	strb	r3, [r7, #23]
      break;
 800adf2:	bf00      	nop
  }

  if (status == HAL_OK)
 800adf4:	7dfb      	ldrb	r3, [r7, #23]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d104      	bne.n	800ae04 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800adfa:	68f8      	ldr	r0, [r7, #12]
 800adfc:	f000 f808 	bl	800ae10 <HAL_SAI_Init>
 800ae00:	4603      	mov	r3, r0
 800ae02:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800ae04:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae06:	4618      	mov	r0, r3
 800ae08:	3718      	adds	r7, #24
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	bd80      	pop	{r7, pc}
	...

0800ae10 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b08a      	sub	sp, #40	@ 0x28
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d101      	bne.n	800ae22 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800ae1e:	2301      	movs	r3, #1
 800ae20:	e28e      	b.n	800b340 <HAL_SAI_Init+0x530>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800ae22:	f7f8 fc47 	bl	80036b4 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800ae2c:	2b01      	cmp	r3, #1
 800ae2e:	d113      	bne.n	800ae58 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	4a96      	ldr	r2, [pc, #600]	@ (800b090 <HAL_SAI_Init+0x280>)
 800ae36:	4293      	cmp	r3, r2
 800ae38:	d004      	beq.n	800ae44 <HAL_SAI_Init+0x34>
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	4a95      	ldr	r2, [pc, #596]	@ (800b094 <HAL_SAI_Init+0x284>)
 800ae40:	4293      	cmp	r3, r2
 800ae42:	d107      	bne.n	800ae54 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800ae48:	2b01      	cmp	r3, #1
 800ae4a:	d103      	bne.n	800ae54 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d001      	beq.n	800ae58 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 800ae54:	2301      	movs	r3, #1
 800ae56:	e273      	b.n	800b340 <HAL_SAI_Init+0x530>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	4a8c      	ldr	r2, [pc, #560]	@ (800b090 <HAL_SAI_Init+0x280>)
 800ae5e:	4293      	cmp	r3, r2
 800ae60:	d004      	beq.n	800ae6c <HAL_SAI_Init+0x5c>
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	4a8c      	ldr	r2, [pc, #560]	@ (800b098 <HAL_SAI_Init+0x288>)
 800ae68:	4293      	cmp	r3, r2
 800ae6a:	d102      	bne.n	800ae72 <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 800ae6c:	4b8b      	ldr	r3, [pc, #556]	@ (800b09c <HAL_SAI_Init+0x28c>)
 800ae6e:	61bb      	str	r3, [r7, #24]
 800ae70:	e028      	b.n	800aec4 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	4a8a      	ldr	r2, [pc, #552]	@ (800b0a0 <HAL_SAI_Init+0x290>)
 800ae78:	4293      	cmp	r3, r2
 800ae7a:	d004      	beq.n	800ae86 <HAL_SAI_Init+0x76>
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	4a88      	ldr	r2, [pc, #544]	@ (800b0a4 <HAL_SAI_Init+0x294>)
 800ae82:	4293      	cmp	r3, r2
 800ae84:	d102      	bne.n	800ae8c <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 800ae86:	4b88      	ldr	r3, [pc, #544]	@ (800b0a8 <HAL_SAI_Init+0x298>)
 800ae88:	61bb      	str	r3, [r7, #24]
 800ae8a:	e01b      	b.n	800aec4 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	4a86      	ldr	r2, [pc, #536]	@ (800b0ac <HAL_SAI_Init+0x29c>)
 800ae92:	4293      	cmp	r3, r2
 800ae94:	d004      	beq.n	800aea0 <HAL_SAI_Init+0x90>
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	4a85      	ldr	r2, [pc, #532]	@ (800b0b0 <HAL_SAI_Init+0x2a0>)
 800ae9c:	4293      	cmp	r3, r2
 800ae9e:	d102      	bne.n	800aea6 <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 800aea0:	4b84      	ldr	r3, [pc, #528]	@ (800b0b4 <HAL_SAI_Init+0x2a4>)
 800aea2:	61bb      	str	r3, [r7, #24]
 800aea4:	e00e      	b.n	800aec4 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	4a7a      	ldr	r2, [pc, #488]	@ (800b094 <HAL_SAI_Init+0x284>)
 800aeac:	4293      	cmp	r3, r2
 800aeae:	d004      	beq.n	800aeba <HAL_SAI_Init+0xaa>
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	4a80      	ldr	r2, [pc, #512]	@ (800b0b8 <HAL_SAI_Init+0x2a8>)
 800aeb6:	4293      	cmp	r3, r2
 800aeb8:	d102      	bne.n	800aec0 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 800aeba:	4b80      	ldr	r3, [pc, #512]	@ (800b0bc <HAL_SAI_Init+0x2ac>)
 800aebc:	61bb      	str	r3, [r7, #24]
 800aebe:	e001      	b.n	800aec4 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800aec0:	2301      	movs	r3, #1
 800aec2:	e23d      	b.n	800b340 <HAL_SAI_Init+0x530>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800aeca:	b2db      	uxtb	r3, r3
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d106      	bne.n	800aede <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2200      	movs	r2, #0
 800aed4:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800aed8:	6878      	ldr	r0, [r7, #4]
 800aeda:	f7f8 f9b3 	bl	8003244 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 800aede:	6878      	ldr	r0, [r7, #4]
 800aee0:	f000 fd14 	bl	800b90c <SAI_Disable>
 800aee4:	4603      	mov	r3, r0
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d001      	beq.n	800aeee <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 800aeea:	2301      	movs	r3, #1
 800aeec:	e228      	b.n	800b340 <HAL_SAI_Init+0x530>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	2202      	movs	r2, #2
 800aef2:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	68db      	ldr	r3, [r3, #12]
 800aefa:	2b02      	cmp	r3, #2
 800aefc:	d00c      	beq.n	800af18 <HAL_SAI_Init+0x108>
 800aefe:	2b02      	cmp	r3, #2
 800af00:	d80d      	bhi.n	800af1e <HAL_SAI_Init+0x10e>
 800af02:	2b00      	cmp	r3, #0
 800af04:	d002      	beq.n	800af0c <HAL_SAI_Init+0xfc>
 800af06:	2b01      	cmp	r3, #1
 800af08:	d003      	beq.n	800af12 <HAL_SAI_Init+0x102>
 800af0a:	e008      	b.n	800af1e <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800af0c:	2300      	movs	r3, #0
 800af0e:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800af10:	e008      	b.n	800af24 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800af12:	2310      	movs	r3, #16
 800af14:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800af16:	e005      	b.n	800af24 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800af18:	2320      	movs	r3, #32
 800af1a:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800af1c:	e002      	b.n	800af24 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 800af1e:	2300      	movs	r3, #0
 800af20:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800af22:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	689b      	ldr	r3, [r3, #8]
 800af28:	2b05      	cmp	r3, #5
 800af2a:	d832      	bhi.n	800af92 <HAL_SAI_Init+0x182>
 800af2c:	a201      	add	r2, pc, #4	@ (adr r2, 800af34 <HAL_SAI_Init+0x124>)
 800af2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af32:	bf00      	nop
 800af34:	0800af4d 	.word	0x0800af4d
 800af38:	0800af53 	.word	0x0800af53
 800af3c:	0800af5b 	.word	0x0800af5b
 800af40:	0800af63 	.word	0x0800af63
 800af44:	0800af73 	.word	0x0800af73
 800af48:	0800af83 	.word	0x0800af83
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800af4c:	2300      	movs	r3, #0
 800af4e:	61fb      	str	r3, [r7, #28]
      break;
 800af50:	e022      	b.n	800af98 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800af52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800af56:	61fb      	str	r3, [r7, #28]
      break;
 800af58:	e01e      	b.n	800af98 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800af5a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800af5e:	61fb      	str	r3, [r7, #28]
      break;
 800af60:	e01a      	b.n	800af98 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800af62:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800af66:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800af68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af6a:	f043 0301 	orr.w	r3, r3, #1
 800af6e:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800af70:	e012      	b.n	800af98 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800af72:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800af76:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 800af78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af7a:	f043 0302 	orr.w	r3, r3, #2
 800af7e:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800af80:	e00a      	b.n	800af98 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800af82:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800af86:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 800af88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af8a:	f043 0303 	orr.w	r3, r3, #3
 800af8e:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800af90:	e002      	b.n	800af98 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800af92:	2300      	movs	r3, #0
 800af94:	61fb      	str	r3, [r7, #28]
      break;
 800af96:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 800af98:	69bb      	ldr	r3, [r7, #24]
 800af9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800af9c:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	6a1b      	ldr	r3, [r3, #32]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	f000 80c5 	beq.w	800b132 <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 800afa8:	2300      	movs	r3, #0
 800afaa:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	4a37      	ldr	r2, [pc, #220]	@ (800b090 <HAL_SAI_Init+0x280>)
 800afb2:	4293      	cmp	r3, r2
 800afb4:	d004      	beq.n	800afc0 <HAL_SAI_Init+0x1b0>
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	4a37      	ldr	r2, [pc, #220]	@ (800b098 <HAL_SAI_Init+0x288>)
 800afbc:	4293      	cmp	r3, r2
 800afbe:	d106      	bne.n	800afce <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800afc0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800afc4:	f04f 0100 	mov.w	r1, #0
 800afc8:	f7fe fbfc 	bl	80097c4 <HAL_RCCEx_GetPeriphCLKFreq>
 800afcc:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	4a33      	ldr	r2, [pc, #204]	@ (800b0a0 <HAL_SAI_Init+0x290>)
 800afd4:	4293      	cmp	r3, r2
 800afd6:	d004      	beq.n	800afe2 <HAL_SAI_Init+0x1d2>
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	4a31      	ldr	r2, [pc, #196]	@ (800b0a4 <HAL_SAI_Init+0x294>)
 800afde:	4293      	cmp	r3, r2
 800afe0:	d106      	bne.n	800aff0 <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800afe2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800afe6:	f04f 0100 	mov.w	r1, #0
 800afea:	f7fe fbeb 	bl	80097c4 <HAL_RCCEx_GetPeriphCLKFreq>
 800afee:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	4a2d      	ldr	r2, [pc, #180]	@ (800b0ac <HAL_SAI_Init+0x29c>)
 800aff6:	4293      	cmp	r3, r2
 800aff8:	d004      	beq.n	800b004 <HAL_SAI_Init+0x1f4>
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	4a2c      	ldr	r2, [pc, #176]	@ (800b0b0 <HAL_SAI_Init+0x2a0>)
 800b000:	4293      	cmp	r3, r2
 800b002:	d106      	bne.n	800b012 <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 800b004:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800b008:	f04f 0100 	mov.w	r1, #0
 800b00c:	f7fe fbda 	bl	80097c4 <HAL_RCCEx_GetPeriphCLKFreq>
 800b010:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	4a1f      	ldr	r2, [pc, #124]	@ (800b094 <HAL_SAI_Init+0x284>)
 800b018:	4293      	cmp	r3, r2
 800b01a:	d106      	bne.n	800b02a <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800b01c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800b020:	f04f 0100 	mov.w	r1, #0
 800b024:	f7fe fbce 	bl	80097c4 <HAL_RCCEx_GetPeriphCLKFreq>
 800b028:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	4a22      	ldr	r2, [pc, #136]	@ (800b0b8 <HAL_SAI_Init+0x2a8>)
 800b030:	4293      	cmp	r3, r2
 800b032:	d106      	bne.n	800b042 <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800b034:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800b038:	f04f 0100 	mov.w	r1, #0
 800b03c:	f7fe fbc2 	bl	80097c4 <HAL_RCCEx_GetPeriphCLKFreq>
 800b040:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	699b      	ldr	r3, [r3, #24]
 800b046:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800b04a:	d139      	bne.n	800b0c0 <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b050:	2b04      	cmp	r3, #4
 800b052:	d102      	bne.n	800b05a <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800b054:	2340      	movs	r3, #64	@ 0x40
 800b056:	60fb      	str	r3, [r7, #12]
 800b058:	e00a      	b.n	800b070 <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b05e:	2b08      	cmp	r3, #8
 800b060:	d103      	bne.n	800b06a <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800b062:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b066:	60fb      	str	r3, [r7, #12]
 800b068:	e002      	b.n	800b070 <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b06e:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800b070:	697a      	ldr	r2, [r7, #20]
 800b072:	4613      	mov	r3, r2
 800b074:	009b      	lsls	r3, r3, #2
 800b076:	4413      	add	r3, r2
 800b078:	005b      	lsls	r3, r3, #1
 800b07a:	4619      	mov	r1, r3
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	6a1b      	ldr	r3, [r3, #32]
 800b080:	68fa      	ldr	r2, [r7, #12]
 800b082:	fb02 f303 	mul.w	r3, r2, r3
 800b086:	fbb1 f3f3 	udiv	r3, r1, r3
 800b08a:	613b      	str	r3, [r7, #16]
 800b08c:	e030      	b.n	800b0f0 <HAL_SAI_Init+0x2e0>
 800b08e:	bf00      	nop
 800b090:	40015804 	.word	0x40015804
 800b094:	58005404 	.word	0x58005404
 800b098:	40015824 	.word	0x40015824
 800b09c:	40015800 	.word	0x40015800
 800b0a0:	40015c04 	.word	0x40015c04
 800b0a4:	40015c24 	.word	0x40015c24
 800b0a8:	40015c00 	.word	0x40015c00
 800b0ac:	40016004 	.word	0x40016004
 800b0b0:	40016024 	.word	0x40016024
 800b0b4:	40016000 	.word	0x40016000
 800b0b8:	58005424 	.word	0x58005424
 800b0bc:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0c4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b0c8:	d101      	bne.n	800b0ce <HAL_SAI_Init+0x2be>
 800b0ca:	2302      	movs	r3, #2
 800b0cc:	e000      	b.n	800b0d0 <HAL_SAI_Init+0x2c0>
 800b0ce:	2301      	movs	r3, #1
 800b0d0:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800b0d2:	697a      	ldr	r2, [r7, #20]
 800b0d4:	4613      	mov	r3, r2
 800b0d6:	009b      	lsls	r3, r3, #2
 800b0d8:	4413      	add	r3, r2
 800b0da:	005b      	lsls	r3, r3, #1
 800b0dc:	4619      	mov	r1, r3
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	6a1b      	ldr	r3, [r3, #32]
 800b0e2:	68ba      	ldr	r2, [r7, #8]
 800b0e4:	fb02 f303 	mul.w	r3, r2, r3
 800b0e8:	021b      	lsls	r3, r3, #8
 800b0ea:	fbb1 f3f3 	udiv	r3, r1, r3
 800b0ee:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800b0f0:	693b      	ldr	r3, [r7, #16]
 800b0f2:	4a95      	ldr	r2, [pc, #596]	@ (800b348 <HAL_SAI_Init+0x538>)
 800b0f4:	fba2 2303 	umull	r2, r3, r2, r3
 800b0f8:	08da      	lsrs	r2, r3, #3
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800b0fe:	6939      	ldr	r1, [r7, #16]
 800b100:	4b91      	ldr	r3, [pc, #580]	@ (800b348 <HAL_SAI_Init+0x538>)
 800b102:	fba3 2301 	umull	r2, r3, r3, r1
 800b106:	08da      	lsrs	r2, r3, #3
 800b108:	4613      	mov	r3, r2
 800b10a:	009b      	lsls	r3, r3, #2
 800b10c:	4413      	add	r3, r2
 800b10e:	005b      	lsls	r3, r3, #1
 800b110:	1aca      	subs	r2, r1, r3
 800b112:	2a08      	cmp	r2, #8
 800b114:	d904      	bls.n	800b120 <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b11a:	1c5a      	adds	r2, r3, #1
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b124:	2b04      	cmp	r3, #4
 800b126:	d104      	bne.n	800b132 <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b12c:	085a      	lsrs	r2, r3, #1
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	685b      	ldr	r3, [r3, #4]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d003      	beq.n	800b142 <HAL_SAI_Init+0x332>
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	685b      	ldr	r3, [r3, #4]
 800b13e:	2b02      	cmp	r3, #2
 800b140:	d109      	bne.n	800b156 <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b146:	2b01      	cmp	r3, #1
 800b148:	d101      	bne.n	800b14e <HAL_SAI_Init+0x33e>
 800b14a:	2300      	movs	r3, #0
 800b14c:	e001      	b.n	800b152 <HAL_SAI_Init+0x342>
 800b14e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b152:	623b      	str	r3, [r7, #32]
 800b154:	e008      	b.n	800b168 <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b15a:	2b01      	cmp	r3, #1
 800b15c:	d102      	bne.n	800b164 <HAL_SAI_Init+0x354>
 800b15e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b162:	e000      	b.n	800b166 <HAL_SAI_Init+0x356>
 800b164:	2300      	movs	r3, #0
 800b166:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800b168:	f7f8 faa4 	bl	80036b4 <HAL_GetREVID>
 800b16c:	4603      	mov	r3, r0
 800b16e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b172:	d331      	bcc.n	800b1d8 <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	6819      	ldr	r1, [r3, #0]
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681a      	ldr	r2, [r3, #0]
 800b17e:	4b73      	ldr	r3, [pc, #460]	@ (800b34c <HAL_SAI_Init+0x53c>)
 800b180:	400b      	ands	r3, r1
 800b182:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	6819      	ldr	r1, [r3, #0]
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	685a      	ldr	r2, [r3, #4]
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b192:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b198:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b19e:	431a      	orrs	r2, r3
 800b1a0:	6a3b      	ldr	r3, [r7, #32]
 800b1a2:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800b1a4:	69fb      	ldr	r3, [r7, #28]
 800b1a6:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            ckstr_bits | syncen_bits |                             \
 800b1ac:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	695b      	ldr	r3, [r3, #20]
 800b1b2:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b1b8:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1be:	051b      	lsls	r3, r3, #20
 800b1c0:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800b1c6:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	691b      	ldr	r3, [r3, #16]
 800b1cc:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	430a      	orrs	r2, r1
 800b1d4:	601a      	str	r2, [r3, #0]
 800b1d6:	e02d      	b.n	800b234 <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	6819      	ldr	r1, [r3, #0]
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681a      	ldr	r2, [r3, #0]
 800b1e2:	4b5b      	ldr	r3, [pc, #364]	@ (800b350 <HAL_SAI_Init+0x540>)
 800b1e4:	400b      	ands	r3, r1
 800b1e6:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	6819      	ldr	r1, [r3, #0]
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	685a      	ldr	r2, [r3, #4]
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b1f6:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b1fc:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b202:	431a      	orrs	r2, r3
 800b204:	6a3b      	ldr	r3, [r7, #32]
 800b206:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800b208:	69fb      	ldr	r3, [r7, #28]
 800b20a:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            ckstr_bits | syncen_bits |                             \
 800b210:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	695b      	ldr	r3, [r3, #20]
 800b216:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b21c:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b222:	051b      	lsls	r3, r3, #20
 800b224:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800b22a:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	430a      	orrs	r2, r1
 800b232:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	6859      	ldr	r1, [r3, #4]
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681a      	ldr	r2, [r3, #0]
 800b23e:	4b45      	ldr	r3, [pc, #276]	@ (800b354 <HAL_SAI_Init+0x544>)
 800b240:	400b      	ands	r3, r1
 800b242:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	6859      	ldr	r1, [r3, #4]
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	69da      	ldr	r2, [r3, #28]
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b252:	431a      	orrs	r2, r3
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b258:	431a      	orrs	r2, r3
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	430a      	orrs	r2, r1
 800b260:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	6899      	ldr	r1, [r3, #8]
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681a      	ldr	r2, [r3, #0]
 800b26c:	4b3a      	ldr	r3, [pc, #232]	@ (800b358 <HAL_SAI_Init+0x548>)
 800b26e:	400b      	ands	r3, r1
 800b270:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	6899      	ldr	r1, [r3, #8]
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b27c:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800b282:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 800b288:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 800b28e:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b294:	3b01      	subs	r3, #1
 800b296:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800b298:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	430a      	orrs	r2, r1
 800b2a0:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	68d9      	ldr	r1, [r3, #12]
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681a      	ldr	r2, [r3, #0]
 800b2ac:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800b2b0:	400b      	ands	r3, r1
 800b2b2:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	68d9      	ldr	r1, [r3, #12]
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b2c2:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b2c8:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800b2ca:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b2d0:	3b01      	subs	r3, #1
 800b2d2:	021b      	lsls	r3, r3, #8
 800b2d4:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	430a      	orrs	r2, r1
 800b2dc:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	4a1e      	ldr	r2, [pc, #120]	@ (800b35c <HAL_SAI_Init+0x54c>)
 800b2e4:	4293      	cmp	r3, r2
 800b2e6:	d004      	beq.n	800b2f2 <HAL_SAI_Init+0x4e2>
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	4a1c      	ldr	r2, [pc, #112]	@ (800b360 <HAL_SAI_Init+0x550>)
 800b2ee:	4293      	cmp	r3, r2
 800b2f0:	d119      	bne.n	800b326 <HAL_SAI_Init+0x516>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800b2f2:	69bb      	ldr	r3, [r7, #24]
 800b2f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b2f6:	f023 0201 	bic.w	r2, r3, #1
 800b2fa:	69bb      	ldr	r3, [r7, #24]
 800b2fc:	645a      	str	r2, [r3, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b304:	2b01      	cmp	r3, #1
 800b306:	d10e      	bne.n	800b326 <HAL_SAI_Init+0x516>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b310:	3b01      	subs	r3, #1
 800b312:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800b314:	431a      	orrs	r2, r3
 800b316:	69bb      	ldr	r3, [r7, #24]
 800b318:	645a      	str	r2, [r3, #68]	@ 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800b31a:	69bb      	ldr	r3, [r7, #24]
 800b31c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b31e:	f043 0201 	orr.w	r2, r3, #1
 800b322:	69bb      	ldr	r3, [r7, #24]
 800b324:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	2200      	movs	r2, #0
 800b32a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	2201      	movs	r2, #1
 800b332:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	2200      	movs	r2, #0
 800b33a:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 800b33e:	2300      	movs	r3, #0
}
 800b340:	4618      	mov	r0, r3
 800b342:	3728      	adds	r7, #40	@ 0x28
 800b344:	46bd      	mov	sp, r7
 800b346:	bd80      	pop	{r7, pc}
 800b348:	cccccccd 	.word	0xcccccccd
 800b34c:	f005c010 	.word	0xf005c010
 800b350:	f805c010 	.word	0xf805c010
 800b354:	ffff1ff0 	.word	0xffff1ff0
 800b358:	fff88000 	.word	0xfff88000
 800b35c:	40015804 	.word	0x40015804
 800b360:	58005404 	.word	0x58005404

0800b364 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b086      	sub	sp, #24
 800b368:	af00      	add	r7, sp, #0
 800b36a:	60f8      	str	r0, [r7, #12]
 800b36c:	60b9      	str	r1, [r7, #8]
 800b36e:	4613      	mov	r3, r2
 800b370:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800b372:	f7f8 f96f 	bl	8003654 <HAL_GetTick>
 800b376:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800b378:	68bb      	ldr	r3, [r7, #8]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d002      	beq.n	800b384 <HAL_SAI_Transmit_DMA+0x20>
 800b37e:	88fb      	ldrh	r3, [r7, #6]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d101      	bne.n	800b388 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800b384:	2301      	movs	r3, #1
 800b386:	e098      	b.n	800b4ba <HAL_SAI_Transmit_DMA+0x156>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800b38e:	b2db      	uxtb	r3, r3
 800b390:	2b01      	cmp	r3, #1
 800b392:	f040 8091 	bne.w	800b4b8 <HAL_SAI_Transmit_DMA+0x154>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800b39c:	2b01      	cmp	r3, #1
 800b39e:	d101      	bne.n	800b3a4 <HAL_SAI_Transmit_DMA+0x40>
 800b3a0:	2302      	movs	r3, #2
 800b3a2:	e08a      	b.n	800b4ba <HAL_SAI_Transmit_DMA+0x156>
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	2201      	movs	r2, #1
 800b3a8:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->pBuffPtr = pData;
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	68ba      	ldr	r2, [r7, #8]
 800b3b0:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->XferSize = Size;
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	88fa      	ldrh	r2, [r7, #6]
 800b3b6:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	88fa      	ldrh	r2, [r7, #6]
 800b3be:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	2212      	movs	r2, #18
 800b3ce:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b3d8:	4a3a      	ldr	r2, [pc, #232]	@ (800b4c4 <HAL_SAI_Transmit_DMA+0x160>)
 800b3da:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b3e2:	4a39      	ldr	r2, [pc, #228]	@ (800b4c8 <HAL_SAI_Transmit_DMA+0x164>)
 800b3e4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b3ec:	4a37      	ldr	r2, [pc, #220]	@ (800b4cc <HAL_SAI_Transmit_DMA+0x168>)
 800b3ee:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b404:	4619      	mov	r1, r3
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	331c      	adds	r3, #28
 800b40c:	461a      	mov	r2, r3
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 800b414:	f7f8 fdc6 	bl	8003fa4 <HAL_DMA_Start_IT>
 800b418:	4603      	mov	r3, r0
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d005      	beq.n	800b42a <HAL_SAI_Transmit_DMA+0xc6>
    {
      __HAL_UNLOCK(hsai);
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	2200      	movs	r2, #0
 800b422:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      return  HAL_ERROR;
 800b426:	2301      	movs	r3, #1
 800b428:	e047      	b.n	800b4ba <HAL_SAI_Transmit_DMA+0x156>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800b42a:	2100      	movs	r1, #0
 800b42c:	68f8      	ldr	r0, [r7, #12]
 800b42e:	f000 fa35 	bl	800b89c <SAI_InterruptFlag>
 800b432:	4601      	mov	r1, r0
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	691a      	ldr	r2, [r3, #16]
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	430a      	orrs	r2, r1
 800b440:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	681a      	ldr	r2, [r3, #0]
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800b450:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800b452:	e015      	b.n	800b480 <HAL_SAI_Transmit_DMA+0x11c>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800b454:	f7f8 f8fe 	bl	8003654 <HAL_GetTick>
 800b458:	4602      	mov	r2, r0
 800b45a:	697b      	ldr	r3, [r7, #20]
 800b45c:	1ad3      	subs	r3, r2, r3
 800b45e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b462:	d90d      	bls.n	800b480 <HAL_SAI_Transmit_DMA+0x11c>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b46a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	2200      	movs	r2, #0
 800b478:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

        return HAL_TIMEOUT;
 800b47c:	2303      	movs	r3, #3
 800b47e:	e01c      	b.n	800b4ba <HAL_SAI_Transmit_DMA+0x156>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	695b      	ldr	r3, [r3, #20]
 800b486:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d0e2      	beq.n	800b454 <HAL_SAI_Transmit_DMA+0xf0>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d107      	bne.n	800b4ac <HAL_SAI_Transmit_DMA+0x148>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	681a      	ldr	r2, [r3, #0]
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800b4aa:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	e000      	b.n	800b4ba <HAL_SAI_Transmit_DMA+0x156>
  }
  else
  {
    return HAL_BUSY;
 800b4b8:	2302      	movs	r3, #2
  }
}
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	3718      	adds	r7, #24
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	bd80      	pop	{r7, pc}
 800b4c2:	bf00      	nop
 800b4c4:	0800b9e1 	.word	0x0800b9e1
 800b4c8:	0800b981 	.word	0x0800b981
 800b4cc:	0800ba79 	.word	0x0800ba79

0800b4d0 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b084      	sub	sp, #16
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	60f8      	str	r0, [r7, #12]
 800b4d8:	60b9      	str	r1, [r7, #8]
 800b4da:	4613      	mov	r3, r2
 800b4dc:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 800b4de:	68bb      	ldr	r3, [r7, #8]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d002      	beq.n	800b4ea <HAL_SAI_Receive_DMA+0x1a>
 800b4e4:	88fb      	ldrh	r3, [r7, #6]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d101      	bne.n	800b4ee <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800b4ea:	2301      	movs	r3, #1
 800b4ec:	e079      	b.n	800b5e2 <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800b4f4:	b2db      	uxtb	r3, r3
 800b4f6:	2b01      	cmp	r3, #1
 800b4f8:	d172      	bne.n	800b5e0 <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800b500:	2b01      	cmp	r3, #1
 800b502:	d101      	bne.n	800b508 <HAL_SAI_Receive_DMA+0x38>
 800b504:	2302      	movs	r3, #2
 800b506:	e06c      	b.n	800b5e2 <HAL_SAI_Receive_DMA+0x112>
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	2201      	movs	r2, #1
 800b50c:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->pBuffPtr = pData;
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	68ba      	ldr	r2, [r7, #8]
 800b514:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->XferSize = Size;
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	88fa      	ldrh	r2, [r7, #6]
 800b51a:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	88fa      	ldrh	r2, [r7, #6]
 800b522:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	2200      	movs	r2, #0
 800b52a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	2222      	movs	r2, #34	@ 0x22
 800b532:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b53c:	4a2b      	ldr	r2, [pc, #172]	@ (800b5ec <HAL_SAI_Receive_DMA+0x11c>)
 800b53e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b546:	4a2a      	ldr	r2, [pc, #168]	@ (800b5f0 <HAL_SAI_Receive_DMA+0x120>)
 800b548:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b550:	4a28      	ldr	r2, [pc, #160]	@ (800b5f4 <HAL_SAI_Receive_DMA+0x124>)
 800b552:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b55a:	2200      	movs	r2, #0
 800b55c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	331c      	adds	r3, #28
 800b56a:	4619      	mov	r1, r3
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b570:	461a      	mov	r2, r3
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 800b578:	f7f8 fd14 	bl	8003fa4 <HAL_DMA_Start_IT>
 800b57c:	4603      	mov	r3, r0
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d005      	beq.n	800b58e <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	2200      	movs	r2, #0
 800b586:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      return  HAL_ERROR;
 800b58a:	2301      	movs	r3, #1
 800b58c:	e029      	b.n	800b5e2 <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800b58e:	2100      	movs	r1, #0
 800b590:	68f8      	ldr	r0, [r7, #12]
 800b592:	f000 f983 	bl	800b89c <SAI_InterruptFlag>
 800b596:	4601      	mov	r1, r0
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	691a      	ldr	r2, [r3, #16]
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	430a      	orrs	r2, r1
 800b5a4:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	681a      	ldr	r2, [r3, #0]
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800b5b4:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d107      	bne.n	800b5d4 <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	681a      	ldr	r2, [r3, #0]
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800b5d2:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 800b5dc:	2300      	movs	r3, #0
 800b5de:	e000      	b.n	800b5e2 <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 800b5e0:	2302      	movs	r3, #2
  }
}
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	3710      	adds	r7, #16
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	bd80      	pop	{r7, pc}
 800b5ea:	bf00      	nop
 800b5ec:	0800ba5d 	.word	0x0800ba5d
 800b5f0:	0800b9fd 	.word	0x0800b9fd
 800b5f4:	0800ba79 	.word	0x0800ba79

0800b5f8 <HAL_SAI_TxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 800b5f8:	b480      	push	{r7}
 800b5fa:	b083      	sub	sp, #12
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxCpltCallback could be implemented in the user file
   */
}
 800b600:	bf00      	nop
 800b602:	370c      	adds	r7, #12
 800b604:	46bd      	mov	sp, r7
 800b606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60a:	4770      	bx	lr

0800b60c <HAL_SAI_TxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 800b60c:	b480      	push	{r7}
 800b60e:	b083      	sub	sp, #12
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxHalfCpltCallback could be implemented in the user file
   */
}
 800b614:	bf00      	nop
 800b616:	370c      	adds	r7, #12
 800b618:	46bd      	mov	sp, r7
 800b61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61e:	4770      	bx	lr

0800b620 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800b620:	b480      	push	{r7}
 800b622:	b083      	sub	sp, #12
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 800b628:	bf00      	nop
 800b62a:	370c      	adds	r7, #12
 800b62c:	46bd      	mov	sp, r7
 800b62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b632:	4770      	bx	lr

0800b634 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800b634:	b480      	push	{r7}
 800b636:	b087      	sub	sp, #28
 800b638:	af00      	add	r7, sp, #0
 800b63a:	60f8      	str	r0, [r7, #12]
 800b63c:	60b9      	str	r1, [r7, #8]
 800b63e:	607a      	str	r2, [r7, #4]
 800b640:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b642:	2300      	movs	r3, #0
 800b644:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	2200      	movs	r2, #0
 800b64a:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	2200      	movs	r2, #0
 800b650:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	685b      	ldr	r3, [r3, #4]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d003      	beq.n	800b662 <SAI_InitI2S+0x2e>
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	685b      	ldr	r3, [r3, #4]
 800b65e:	2b02      	cmp	r3, #2
 800b660:	d103      	bne.n	800b66a <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	2200      	movs	r2, #0
 800b666:	651a      	str	r2, [r3, #80]	@ 0x50
 800b668:	e002      	b.n	800b670 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	2201      	movs	r2, #1
 800b66e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800b676:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b67e:	675a      	str	r2, [r3, #116]	@ 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	2200      	movs	r2, #0
 800b684:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	683a      	ldr	r2, [r7, #0]
 800b68a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	f003 0301 	and.w	r3, r3, #1
 800b692:	2b00      	cmp	r3, #0
 800b694:	d001      	beq.n	800b69a <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800b696:	2301      	movs	r3, #1
 800b698:	e077      	b.n	800b78a <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800b69a:	68bb      	ldr	r3, [r7, #8]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d107      	bne.n	800b6b0 <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	661a      	str	r2, [r3, #96]	@ 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800b6ac:	665a      	str	r2, [r3, #100]	@ 0x64
 800b6ae:	e006      	b.n	800b6be <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800b6b6:	661a      	str	r2, [r3, #96]	@ 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	665a      	str	r2, [r3, #100]	@ 0x64
  }

  /* Frame definition */
  switch (datasize)
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	2b03      	cmp	r3, #3
 800b6c2:	d84f      	bhi.n	800b764 <SAI_InitI2S+0x130>
 800b6c4:	a201      	add	r2, pc, #4	@ (adr r2, 800b6cc <SAI_InitI2S+0x98>)
 800b6c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6ca:	bf00      	nop
 800b6cc:	0800b6dd 	.word	0x0800b6dd
 800b6d0:	0800b6ff 	.word	0x0800b6ff
 800b6d4:	0800b721 	.word	0x0800b721
 800b6d8:	0800b743 	.word	0x0800b743
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	2280      	movs	r2, #128	@ 0x80
 800b6e0:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	085b      	lsrs	r3, r3, #1
 800b6e6:	015a      	lsls	r2, r3, #5
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	085b      	lsrs	r3, r3, #1
 800b6f0:	011a      	lsls	r2, r3, #4
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	2240      	movs	r2, #64	@ 0x40
 800b6fa:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800b6fc:	e035      	b.n	800b76a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	2280      	movs	r2, #128	@ 0x80
 800b702:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	085b      	lsrs	r3, r3, #1
 800b708:	019a      	lsls	r2, r3, #6
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	085b      	lsrs	r3, r3, #1
 800b712:	015a      	lsls	r2, r3, #5
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	2280      	movs	r2, #128	@ 0x80
 800b71c:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800b71e:	e024      	b.n	800b76a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	22c0      	movs	r2, #192	@ 0xc0
 800b724:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800b726:	683b      	ldr	r3, [r7, #0]
 800b728:	085b      	lsrs	r3, r3, #1
 800b72a:	019a      	lsls	r2, r3, #6
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800b730:	683b      	ldr	r3, [r7, #0]
 800b732:	085b      	lsrs	r3, r3, #1
 800b734:	015a      	lsls	r2, r3, #5
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	2280      	movs	r2, #128	@ 0x80
 800b73e:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800b740:	e013      	b.n	800b76a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	22e0      	movs	r2, #224	@ 0xe0
 800b746:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	085b      	lsrs	r3, r3, #1
 800b74c:	019a      	lsls	r2, r3, #6
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	085b      	lsrs	r3, r3, #1
 800b756:	015a      	lsls	r2, r3, #5
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	2280      	movs	r2, #128	@ 0x80
 800b760:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800b762:	e002      	b.n	800b76a <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800b764:	2301      	movs	r3, #1
 800b766:	75fb      	strb	r3, [r7, #23]
      break;
 800b768:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800b76a:	68bb      	ldr	r3, [r7, #8]
 800b76c:	2b02      	cmp	r3, #2
 800b76e:	d10b      	bne.n	800b788 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	2b01      	cmp	r3, #1
 800b774:	d102      	bne.n	800b77c <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	2210      	movs	r2, #16
 800b77a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2b02      	cmp	r3, #2
 800b780:	d102      	bne.n	800b788 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	2208      	movs	r2, #8
 800b786:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }
  return status;
 800b788:	7dfb      	ldrb	r3, [r7, #23]
}
 800b78a:	4618      	mov	r0, r3
 800b78c:	371c      	adds	r7, #28
 800b78e:	46bd      	mov	sp, r7
 800b790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b794:	4770      	bx	lr
 800b796:	bf00      	nop

0800b798 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800b798:	b480      	push	{r7}
 800b79a:	b087      	sub	sp, #28
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	60f8      	str	r0, [r7, #12]
 800b7a0:	60b9      	str	r1, [r7, #8]
 800b7a2:	607a      	str	r2, [r7, #4]
 800b7a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	685b      	ldr	r3, [r3, #4]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d003      	beq.n	800b7c6 <SAI_InitPCM+0x2e>
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	685b      	ldr	r3, [r3, #4]
 800b7c2:	2b02      	cmp	r3, #2
 800b7c4:	d103      	bne.n	800b7ce <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	2201      	movs	r2, #1
 800b7ca:	651a      	str	r2, [r3, #80]	@ 0x50
 800b7cc:	e002      	b.n	800b7d4 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800b7e0:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800b7e8:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	683a      	ldr	r2, [r7, #0]
 800b7f4:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b7fc:	675a      	str	r2, [r3, #116]	@ 0x74

  if (protocol == SAI_PCM_SHORT)
 800b7fe:	68bb      	ldr	r3, [r7, #8]
 800b800:	2b04      	cmp	r3, #4
 800b802:	d103      	bne.n	800b80c <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	2201      	movs	r2, #1
 800b808:	659a      	str	r2, [r3, #88]	@ 0x58
 800b80a:	e002      	b.n	800b812 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	220d      	movs	r2, #13
 800b810:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  switch (datasize)
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	2b03      	cmp	r3, #3
 800b816:	d837      	bhi.n	800b888 <SAI_InitPCM+0xf0>
 800b818:	a201      	add	r2, pc, #4	@ (adr r2, 800b820 <SAI_InitPCM+0x88>)
 800b81a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b81e:	bf00      	nop
 800b820:	0800b831 	.word	0x0800b831
 800b824:	0800b847 	.word	0x0800b847
 800b828:	0800b85d 	.word	0x0800b85d
 800b82c:	0800b873 	.word	0x0800b873
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	2280      	movs	r2, #128	@ 0x80
 800b834:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	011a      	lsls	r2, r3, #4
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	2240      	movs	r2, #64	@ 0x40
 800b842:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800b844:	e023      	b.n	800b88e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	2280      	movs	r2, #128	@ 0x80
 800b84a:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	015a      	lsls	r2, r3, #5
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	2280      	movs	r2, #128	@ 0x80
 800b858:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800b85a:	e018      	b.n	800b88e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	22c0      	movs	r2, #192	@ 0xc0
 800b860:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800b862:	683b      	ldr	r3, [r7, #0]
 800b864:	015a      	lsls	r2, r3, #5
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	2280      	movs	r2, #128	@ 0x80
 800b86e:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800b870:	e00d      	b.n	800b88e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	22e0      	movs	r2, #224	@ 0xe0
 800b876:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800b878:	683b      	ldr	r3, [r7, #0]
 800b87a:	015a      	lsls	r2, r3, #5
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	2280      	movs	r2, #128	@ 0x80
 800b884:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800b886:	e002      	b.n	800b88e <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800b888:	2301      	movs	r3, #1
 800b88a:	75fb      	strb	r3, [r7, #23]
      break;
 800b88c:	bf00      	nop
  }

  return status;
 800b88e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b890:	4618      	mov	r0, r3
 800b892:	371c      	adds	r7, #28
 800b894:	46bd      	mov	sp, r7
 800b896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89a:	4770      	bx	lr

0800b89c <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 800b89c:	b480      	push	{r7}
 800b89e:	b085      	sub	sp, #20
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
 800b8a4:	460b      	mov	r3, r1
 800b8a6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800b8ac:	78fb      	ldrb	r3, [r7, #3]
 800b8ae:	2b01      	cmp	r3, #1
 800b8b0:	d103      	bne.n	800b8ba <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	f043 0308 	orr.w	r3, r3, #8
 800b8b8:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b8be:	2b08      	cmp	r3, #8
 800b8c0:	d10b      	bne.n	800b8da <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800b8c6:	2b03      	cmp	r3, #3
 800b8c8:	d003      	beq.n	800b8d2 <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	685b      	ldr	r3, [r3, #4]
 800b8ce:	2b01      	cmp	r3, #1
 800b8d0:	d103      	bne.n	800b8da <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	f043 0310 	orr.w	r3, r3, #16
 800b8d8:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	685b      	ldr	r3, [r3, #4]
 800b8de:	2b03      	cmp	r3, #3
 800b8e0:	d003      	beq.n	800b8ea <SAI_InterruptFlag+0x4e>
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	685b      	ldr	r3, [r3, #4]
 800b8e6:	2b02      	cmp	r3, #2
 800b8e8:	d104      	bne.n	800b8f4 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800b8f0:	60fb      	str	r3, [r7, #12]
 800b8f2:	e003      	b.n	800b8fc <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	f043 0304 	orr.w	r3, r3, #4
 800b8fa:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800b8fc:	68fb      	ldr	r3, [r7, #12]
}
 800b8fe:	4618      	mov	r0, r3
 800b900:	3714      	adds	r7, #20
 800b902:	46bd      	mov	sp, r7
 800b904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b908:	4770      	bx	lr
	...

0800b90c <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800b90c:	b480      	push	{r7}
 800b90e:	b085      	sub	sp, #20
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800b914:	4b18      	ldr	r3, [pc, #96]	@ (800b978 <SAI_Disable+0x6c>)
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	4a18      	ldr	r2, [pc, #96]	@ (800b97c <SAI_Disable+0x70>)
 800b91a:	fba2 2303 	umull	r2, r3, r2, r3
 800b91e:	0b1b      	lsrs	r3, r3, #12
 800b920:	009b      	lsls	r3, r3, #2
 800b922:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800b924:	2300      	movs	r3, #0
 800b926:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	681a      	ldr	r2, [r3, #0]
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800b936:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d10a      	bne.n	800b954 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b944:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 800b94e:	2303      	movs	r3, #3
 800b950:	72fb      	strb	r3, [r7, #11]
      break;
 800b952:	e009      	b.n	800b968 <SAI_Disable+0x5c>
    }
    count--;
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	3b01      	subs	r3, #1
 800b958:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b964:	2b00      	cmp	r3, #0
 800b966:	d1e7      	bne.n	800b938 <SAI_Disable+0x2c>

  return status;
 800b968:	7afb      	ldrb	r3, [r7, #11]
}
 800b96a:	4618      	mov	r0, r3
 800b96c:	3714      	adds	r7, #20
 800b96e:	46bd      	mov	sp, r7
 800b970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b974:	4770      	bx	lr
 800b976:	bf00      	nop
 800b978:	24000000 	.word	0x24000000
 800b97c:	95cbec1b 	.word	0x95cbec1b

0800b980 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b084      	sub	sp, #16
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b98c:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	69db      	ldr	r3, [r3, #28]
 800b992:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b996:	d01c      	beq.n	800b9d2 <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	2200      	movs	r2, #0
 800b99c:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	681a      	ldr	r2, [r3, #0]
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800b9ae:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800b9b0:	2100      	movs	r1, #0
 800b9b2:	68f8      	ldr	r0, [r7, #12]
 800b9b4:	f7ff ff72 	bl	800b89c <SAI_InterruptFlag>
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	43d9      	mvns	r1, r3
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	691a      	ldr	r2, [r3, #16]
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	400a      	ands	r2, r1
 800b9c8:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	2201      	movs	r2, #1
 800b9ce:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800b9d2:	68f8      	ldr	r0, [r7, #12]
 800b9d4:	f7ff fe10 	bl	800b5f8 <HAL_SAI_TxCpltCallback>
#endif
}
 800b9d8:	bf00      	nop
 800b9da:	3710      	adds	r7, #16
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	bd80      	pop	{r7, pc}

0800b9e0 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b084      	sub	sp, #16
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9ec:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800b9ee:	68f8      	ldr	r0, [r7, #12]
 800b9f0:	f7ff fe0c 	bl	800b60c <HAL_SAI_TxHalfCpltCallback>
#endif
}
 800b9f4:	bf00      	nop
 800b9f6:	3710      	adds	r7, #16
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	bd80      	pop	{r7, pc}

0800b9fc <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b084      	sub	sp, #16
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba08:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	69db      	ldr	r3, [r3, #28]
 800ba0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ba12:	d01c      	beq.n	800ba4e <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	681a      	ldr	r2, [r3, #0]
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800ba22:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	2200      	movs	r2, #0
 800ba28:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800ba2c:	2100      	movs	r1, #0
 800ba2e:	68f8      	ldr	r0, [r7, #12]
 800ba30:	f7ff ff34 	bl	800b89c <SAI_InterruptFlag>
 800ba34:	4603      	mov	r3, r0
 800ba36:	43d9      	mvns	r1, r3
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	691a      	ldr	r2, [r3, #16]
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	400a      	ands	r2, r1
 800ba44:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	2201      	movs	r2, #1
 800ba4a:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800ba4e:	68f8      	ldr	r0, [r7, #12]
 800ba50:	f7f6 fcfe 	bl	8002450 <HAL_SAI_RxCpltCallback>
#endif
}
 800ba54:	bf00      	nop
 800ba56:	3710      	adds	r7, #16
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	bd80      	pop	{r7, pc}

0800ba5c <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b084      	sub	sp, #16
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba68:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800ba6a:	68f8      	ldr	r0, [r7, #12]
 800ba6c:	f7f6 fc8c 	bl	8002388 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 800ba70:	bf00      	nop
 800ba72:	3710      	adds	r7, #16
 800ba74:	46bd      	mov	sp, r7
 800ba76:	bd80      	pop	{r7, pc}

0800ba78 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b084      	sub	sp, #16
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba84:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800ba86:	6878      	ldr	r0, [r7, #4]
 800ba88:	f7f9 fc20 	bl	80052cc <HAL_DMA_GetError>
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	2b02      	cmp	r3, #2
 800ba90:	d01d      	beq.n	800bace <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ba98:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	681a      	ldr	r2, [r3, #0]
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800bab0:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 800bab2:	68f8      	ldr	r0, [r7, #12]
 800bab4:	f7ff ff2a 	bl	800b90c <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	2201      	movs	r2, #1
 800babc:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	2200      	movs	r2, #0
 800bac4:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 800bac8:	68f8      	ldr	r0, [r7, #12]
 800baca:	f7ff fda9 	bl	800b620 <HAL_SAI_ErrorCallback>
#endif
  }
}
 800bace:	bf00      	nop
 800bad0:	3710      	adds	r7, #16
 800bad2:	46bd      	mov	sp, r7
 800bad4:	bd80      	pop	{r7, pc}

0800bad6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bad6:	b580      	push	{r7, lr}
 800bad8:	b082      	sub	sp, #8
 800bada:	af00      	add	r7, sp, #0
 800badc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d101      	bne.n	800bae8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bae4:	2301      	movs	r3, #1
 800bae6:	e042      	b.n	800bb6e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d106      	bne.n	800bb00 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	2200      	movs	r2, #0
 800baf6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bafa:	6878      	ldr	r0, [r7, #4]
 800bafc:	f7f7 fb58 	bl	80031b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2224      	movs	r2, #36	@ 0x24
 800bb04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	681a      	ldr	r2, [r3, #0]
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	f022 0201 	bic.w	r2, r2, #1
 800bb16:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d002      	beq.n	800bb26 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800bb20:	6878      	ldr	r0, [r7, #4]
 800bb22:	f000 fd91 	bl	800c648 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bb26:	6878      	ldr	r0, [r7, #4]
 800bb28:	f000 f826 	bl	800bb78 <UART_SetConfig>
 800bb2c:	4603      	mov	r3, r0
 800bb2e:	2b01      	cmp	r3, #1
 800bb30:	d101      	bne.n	800bb36 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800bb32:	2301      	movs	r3, #1
 800bb34:	e01b      	b.n	800bb6e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	685a      	ldr	r2, [r3, #4]
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800bb44:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	689a      	ldr	r2, [r3, #8]
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800bb54:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	681a      	ldr	r2, [r3, #0]
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	f042 0201 	orr.w	r2, r2, #1
 800bb64:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bb66:	6878      	ldr	r0, [r7, #4]
 800bb68:	f000 fe10 	bl	800c78c <UART_CheckIdleState>
 800bb6c:	4603      	mov	r3, r0
}
 800bb6e:	4618      	mov	r0, r3
 800bb70:	3708      	adds	r7, #8
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd80      	pop	{r7, pc}
	...

0800bb78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bb78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bb7c:	b092      	sub	sp, #72	@ 0x48
 800bb7e:	af00      	add	r7, sp, #0
 800bb80:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bb82:	2300      	movs	r3, #0
 800bb84:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bb88:	697b      	ldr	r3, [r7, #20]
 800bb8a:	689a      	ldr	r2, [r3, #8]
 800bb8c:	697b      	ldr	r3, [r7, #20]
 800bb8e:	691b      	ldr	r3, [r3, #16]
 800bb90:	431a      	orrs	r2, r3
 800bb92:	697b      	ldr	r3, [r7, #20]
 800bb94:	695b      	ldr	r3, [r3, #20]
 800bb96:	431a      	orrs	r2, r3
 800bb98:	697b      	ldr	r3, [r7, #20]
 800bb9a:	69db      	ldr	r3, [r3, #28]
 800bb9c:	4313      	orrs	r3, r2
 800bb9e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bba0:	697b      	ldr	r3, [r7, #20]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	681a      	ldr	r2, [r3, #0]
 800bba6:	4bbe      	ldr	r3, [pc, #760]	@ (800bea0 <UART_SetConfig+0x328>)
 800bba8:	4013      	ands	r3, r2
 800bbaa:	697a      	ldr	r2, [r7, #20]
 800bbac:	6812      	ldr	r2, [r2, #0]
 800bbae:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800bbb0:	430b      	orrs	r3, r1
 800bbb2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bbb4:	697b      	ldr	r3, [r7, #20]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	685b      	ldr	r3, [r3, #4]
 800bbba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800bbbe:	697b      	ldr	r3, [r7, #20]
 800bbc0:	68da      	ldr	r2, [r3, #12]
 800bbc2:	697b      	ldr	r3, [r7, #20]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	430a      	orrs	r2, r1
 800bbc8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bbca:	697b      	ldr	r3, [r7, #20]
 800bbcc:	699b      	ldr	r3, [r3, #24]
 800bbce:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bbd0:	697b      	ldr	r3, [r7, #20]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	4ab3      	ldr	r2, [pc, #716]	@ (800bea4 <UART_SetConfig+0x32c>)
 800bbd6:	4293      	cmp	r3, r2
 800bbd8:	d004      	beq.n	800bbe4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bbda:	697b      	ldr	r3, [r7, #20]
 800bbdc:	6a1b      	ldr	r3, [r3, #32]
 800bbde:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bbe0:	4313      	orrs	r3, r2
 800bbe2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bbe4:	697b      	ldr	r3, [r7, #20]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	689a      	ldr	r2, [r3, #8]
 800bbea:	4baf      	ldr	r3, [pc, #700]	@ (800bea8 <UART_SetConfig+0x330>)
 800bbec:	4013      	ands	r3, r2
 800bbee:	697a      	ldr	r2, [r7, #20]
 800bbf0:	6812      	ldr	r2, [r2, #0]
 800bbf2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800bbf4:	430b      	orrs	r3, r1
 800bbf6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bbf8:	697b      	ldr	r3, [r7, #20]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbfe:	f023 010f 	bic.w	r1, r3, #15
 800bc02:	697b      	ldr	r3, [r7, #20]
 800bc04:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bc06:	697b      	ldr	r3, [r7, #20]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	430a      	orrs	r2, r1
 800bc0c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bc0e:	697b      	ldr	r3, [r7, #20]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	4aa6      	ldr	r2, [pc, #664]	@ (800beac <UART_SetConfig+0x334>)
 800bc14:	4293      	cmp	r3, r2
 800bc16:	d177      	bne.n	800bd08 <UART_SetConfig+0x190>
 800bc18:	4ba5      	ldr	r3, [pc, #660]	@ (800beb0 <UART_SetConfig+0x338>)
 800bc1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc1c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bc20:	2b28      	cmp	r3, #40	@ 0x28
 800bc22:	d86d      	bhi.n	800bd00 <UART_SetConfig+0x188>
 800bc24:	a201      	add	r2, pc, #4	@ (adr r2, 800bc2c <UART_SetConfig+0xb4>)
 800bc26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc2a:	bf00      	nop
 800bc2c:	0800bcd1 	.word	0x0800bcd1
 800bc30:	0800bd01 	.word	0x0800bd01
 800bc34:	0800bd01 	.word	0x0800bd01
 800bc38:	0800bd01 	.word	0x0800bd01
 800bc3c:	0800bd01 	.word	0x0800bd01
 800bc40:	0800bd01 	.word	0x0800bd01
 800bc44:	0800bd01 	.word	0x0800bd01
 800bc48:	0800bd01 	.word	0x0800bd01
 800bc4c:	0800bcd9 	.word	0x0800bcd9
 800bc50:	0800bd01 	.word	0x0800bd01
 800bc54:	0800bd01 	.word	0x0800bd01
 800bc58:	0800bd01 	.word	0x0800bd01
 800bc5c:	0800bd01 	.word	0x0800bd01
 800bc60:	0800bd01 	.word	0x0800bd01
 800bc64:	0800bd01 	.word	0x0800bd01
 800bc68:	0800bd01 	.word	0x0800bd01
 800bc6c:	0800bce1 	.word	0x0800bce1
 800bc70:	0800bd01 	.word	0x0800bd01
 800bc74:	0800bd01 	.word	0x0800bd01
 800bc78:	0800bd01 	.word	0x0800bd01
 800bc7c:	0800bd01 	.word	0x0800bd01
 800bc80:	0800bd01 	.word	0x0800bd01
 800bc84:	0800bd01 	.word	0x0800bd01
 800bc88:	0800bd01 	.word	0x0800bd01
 800bc8c:	0800bce9 	.word	0x0800bce9
 800bc90:	0800bd01 	.word	0x0800bd01
 800bc94:	0800bd01 	.word	0x0800bd01
 800bc98:	0800bd01 	.word	0x0800bd01
 800bc9c:	0800bd01 	.word	0x0800bd01
 800bca0:	0800bd01 	.word	0x0800bd01
 800bca4:	0800bd01 	.word	0x0800bd01
 800bca8:	0800bd01 	.word	0x0800bd01
 800bcac:	0800bcf1 	.word	0x0800bcf1
 800bcb0:	0800bd01 	.word	0x0800bd01
 800bcb4:	0800bd01 	.word	0x0800bd01
 800bcb8:	0800bd01 	.word	0x0800bd01
 800bcbc:	0800bd01 	.word	0x0800bd01
 800bcc0:	0800bd01 	.word	0x0800bd01
 800bcc4:	0800bd01 	.word	0x0800bd01
 800bcc8:	0800bd01 	.word	0x0800bd01
 800bccc:	0800bcf9 	.word	0x0800bcf9
 800bcd0:	2301      	movs	r3, #1
 800bcd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcd6:	e222      	b.n	800c11e <UART_SetConfig+0x5a6>
 800bcd8:	2304      	movs	r3, #4
 800bcda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcde:	e21e      	b.n	800c11e <UART_SetConfig+0x5a6>
 800bce0:	2308      	movs	r3, #8
 800bce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bce6:	e21a      	b.n	800c11e <UART_SetConfig+0x5a6>
 800bce8:	2310      	movs	r3, #16
 800bcea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcee:	e216      	b.n	800c11e <UART_SetConfig+0x5a6>
 800bcf0:	2320      	movs	r3, #32
 800bcf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcf6:	e212      	b.n	800c11e <UART_SetConfig+0x5a6>
 800bcf8:	2340      	movs	r3, #64	@ 0x40
 800bcfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcfe:	e20e      	b.n	800c11e <UART_SetConfig+0x5a6>
 800bd00:	2380      	movs	r3, #128	@ 0x80
 800bd02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd06:	e20a      	b.n	800c11e <UART_SetConfig+0x5a6>
 800bd08:	697b      	ldr	r3, [r7, #20]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	4a69      	ldr	r2, [pc, #420]	@ (800beb4 <UART_SetConfig+0x33c>)
 800bd0e:	4293      	cmp	r3, r2
 800bd10:	d130      	bne.n	800bd74 <UART_SetConfig+0x1fc>
 800bd12:	4b67      	ldr	r3, [pc, #412]	@ (800beb0 <UART_SetConfig+0x338>)
 800bd14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bd16:	f003 0307 	and.w	r3, r3, #7
 800bd1a:	2b05      	cmp	r3, #5
 800bd1c:	d826      	bhi.n	800bd6c <UART_SetConfig+0x1f4>
 800bd1e:	a201      	add	r2, pc, #4	@ (adr r2, 800bd24 <UART_SetConfig+0x1ac>)
 800bd20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd24:	0800bd3d 	.word	0x0800bd3d
 800bd28:	0800bd45 	.word	0x0800bd45
 800bd2c:	0800bd4d 	.word	0x0800bd4d
 800bd30:	0800bd55 	.word	0x0800bd55
 800bd34:	0800bd5d 	.word	0x0800bd5d
 800bd38:	0800bd65 	.word	0x0800bd65
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd42:	e1ec      	b.n	800c11e <UART_SetConfig+0x5a6>
 800bd44:	2304      	movs	r3, #4
 800bd46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd4a:	e1e8      	b.n	800c11e <UART_SetConfig+0x5a6>
 800bd4c:	2308      	movs	r3, #8
 800bd4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd52:	e1e4      	b.n	800c11e <UART_SetConfig+0x5a6>
 800bd54:	2310      	movs	r3, #16
 800bd56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd5a:	e1e0      	b.n	800c11e <UART_SetConfig+0x5a6>
 800bd5c:	2320      	movs	r3, #32
 800bd5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd62:	e1dc      	b.n	800c11e <UART_SetConfig+0x5a6>
 800bd64:	2340      	movs	r3, #64	@ 0x40
 800bd66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd6a:	e1d8      	b.n	800c11e <UART_SetConfig+0x5a6>
 800bd6c:	2380      	movs	r3, #128	@ 0x80
 800bd6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd72:	e1d4      	b.n	800c11e <UART_SetConfig+0x5a6>
 800bd74:	697b      	ldr	r3, [r7, #20]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	4a4f      	ldr	r2, [pc, #316]	@ (800beb8 <UART_SetConfig+0x340>)
 800bd7a:	4293      	cmp	r3, r2
 800bd7c:	d130      	bne.n	800bde0 <UART_SetConfig+0x268>
 800bd7e:	4b4c      	ldr	r3, [pc, #304]	@ (800beb0 <UART_SetConfig+0x338>)
 800bd80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bd82:	f003 0307 	and.w	r3, r3, #7
 800bd86:	2b05      	cmp	r3, #5
 800bd88:	d826      	bhi.n	800bdd8 <UART_SetConfig+0x260>
 800bd8a:	a201      	add	r2, pc, #4	@ (adr r2, 800bd90 <UART_SetConfig+0x218>)
 800bd8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd90:	0800bda9 	.word	0x0800bda9
 800bd94:	0800bdb1 	.word	0x0800bdb1
 800bd98:	0800bdb9 	.word	0x0800bdb9
 800bd9c:	0800bdc1 	.word	0x0800bdc1
 800bda0:	0800bdc9 	.word	0x0800bdc9
 800bda4:	0800bdd1 	.word	0x0800bdd1
 800bda8:	2300      	movs	r3, #0
 800bdaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bdae:	e1b6      	b.n	800c11e <UART_SetConfig+0x5a6>
 800bdb0:	2304      	movs	r3, #4
 800bdb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bdb6:	e1b2      	b.n	800c11e <UART_SetConfig+0x5a6>
 800bdb8:	2308      	movs	r3, #8
 800bdba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bdbe:	e1ae      	b.n	800c11e <UART_SetConfig+0x5a6>
 800bdc0:	2310      	movs	r3, #16
 800bdc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bdc6:	e1aa      	b.n	800c11e <UART_SetConfig+0x5a6>
 800bdc8:	2320      	movs	r3, #32
 800bdca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bdce:	e1a6      	b.n	800c11e <UART_SetConfig+0x5a6>
 800bdd0:	2340      	movs	r3, #64	@ 0x40
 800bdd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bdd6:	e1a2      	b.n	800c11e <UART_SetConfig+0x5a6>
 800bdd8:	2380      	movs	r3, #128	@ 0x80
 800bdda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bdde:	e19e      	b.n	800c11e <UART_SetConfig+0x5a6>
 800bde0:	697b      	ldr	r3, [r7, #20]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	4a35      	ldr	r2, [pc, #212]	@ (800bebc <UART_SetConfig+0x344>)
 800bde6:	4293      	cmp	r3, r2
 800bde8:	d130      	bne.n	800be4c <UART_SetConfig+0x2d4>
 800bdea:	4b31      	ldr	r3, [pc, #196]	@ (800beb0 <UART_SetConfig+0x338>)
 800bdec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bdee:	f003 0307 	and.w	r3, r3, #7
 800bdf2:	2b05      	cmp	r3, #5
 800bdf4:	d826      	bhi.n	800be44 <UART_SetConfig+0x2cc>
 800bdf6:	a201      	add	r2, pc, #4	@ (adr r2, 800bdfc <UART_SetConfig+0x284>)
 800bdf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdfc:	0800be15 	.word	0x0800be15
 800be00:	0800be1d 	.word	0x0800be1d
 800be04:	0800be25 	.word	0x0800be25
 800be08:	0800be2d 	.word	0x0800be2d
 800be0c:	0800be35 	.word	0x0800be35
 800be10:	0800be3d 	.word	0x0800be3d
 800be14:	2300      	movs	r3, #0
 800be16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be1a:	e180      	b.n	800c11e <UART_SetConfig+0x5a6>
 800be1c:	2304      	movs	r3, #4
 800be1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be22:	e17c      	b.n	800c11e <UART_SetConfig+0x5a6>
 800be24:	2308      	movs	r3, #8
 800be26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be2a:	e178      	b.n	800c11e <UART_SetConfig+0x5a6>
 800be2c:	2310      	movs	r3, #16
 800be2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be32:	e174      	b.n	800c11e <UART_SetConfig+0x5a6>
 800be34:	2320      	movs	r3, #32
 800be36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be3a:	e170      	b.n	800c11e <UART_SetConfig+0x5a6>
 800be3c:	2340      	movs	r3, #64	@ 0x40
 800be3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be42:	e16c      	b.n	800c11e <UART_SetConfig+0x5a6>
 800be44:	2380      	movs	r3, #128	@ 0x80
 800be46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be4a:	e168      	b.n	800c11e <UART_SetConfig+0x5a6>
 800be4c:	697b      	ldr	r3, [r7, #20]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	4a1b      	ldr	r2, [pc, #108]	@ (800bec0 <UART_SetConfig+0x348>)
 800be52:	4293      	cmp	r3, r2
 800be54:	d142      	bne.n	800bedc <UART_SetConfig+0x364>
 800be56:	4b16      	ldr	r3, [pc, #88]	@ (800beb0 <UART_SetConfig+0x338>)
 800be58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800be5a:	f003 0307 	and.w	r3, r3, #7
 800be5e:	2b05      	cmp	r3, #5
 800be60:	d838      	bhi.n	800bed4 <UART_SetConfig+0x35c>
 800be62:	a201      	add	r2, pc, #4	@ (adr r2, 800be68 <UART_SetConfig+0x2f0>)
 800be64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be68:	0800be81 	.word	0x0800be81
 800be6c:	0800be89 	.word	0x0800be89
 800be70:	0800be91 	.word	0x0800be91
 800be74:	0800be99 	.word	0x0800be99
 800be78:	0800bec5 	.word	0x0800bec5
 800be7c:	0800becd 	.word	0x0800becd
 800be80:	2300      	movs	r3, #0
 800be82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be86:	e14a      	b.n	800c11e <UART_SetConfig+0x5a6>
 800be88:	2304      	movs	r3, #4
 800be8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be8e:	e146      	b.n	800c11e <UART_SetConfig+0x5a6>
 800be90:	2308      	movs	r3, #8
 800be92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be96:	e142      	b.n	800c11e <UART_SetConfig+0x5a6>
 800be98:	2310      	movs	r3, #16
 800be9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be9e:	e13e      	b.n	800c11e <UART_SetConfig+0x5a6>
 800bea0:	cfff69f3 	.word	0xcfff69f3
 800bea4:	58000c00 	.word	0x58000c00
 800bea8:	11fff4ff 	.word	0x11fff4ff
 800beac:	40011000 	.word	0x40011000
 800beb0:	58024400 	.word	0x58024400
 800beb4:	40004400 	.word	0x40004400
 800beb8:	40004800 	.word	0x40004800
 800bebc:	40004c00 	.word	0x40004c00
 800bec0:	40005000 	.word	0x40005000
 800bec4:	2320      	movs	r3, #32
 800bec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800beca:	e128      	b.n	800c11e <UART_SetConfig+0x5a6>
 800becc:	2340      	movs	r3, #64	@ 0x40
 800bece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bed2:	e124      	b.n	800c11e <UART_SetConfig+0x5a6>
 800bed4:	2380      	movs	r3, #128	@ 0x80
 800bed6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800beda:	e120      	b.n	800c11e <UART_SetConfig+0x5a6>
 800bedc:	697b      	ldr	r3, [r7, #20]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	4acb      	ldr	r2, [pc, #812]	@ (800c210 <UART_SetConfig+0x698>)
 800bee2:	4293      	cmp	r3, r2
 800bee4:	d176      	bne.n	800bfd4 <UART_SetConfig+0x45c>
 800bee6:	4bcb      	ldr	r3, [pc, #812]	@ (800c214 <UART_SetConfig+0x69c>)
 800bee8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800beea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800beee:	2b28      	cmp	r3, #40	@ 0x28
 800bef0:	d86c      	bhi.n	800bfcc <UART_SetConfig+0x454>
 800bef2:	a201      	add	r2, pc, #4	@ (adr r2, 800bef8 <UART_SetConfig+0x380>)
 800bef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bef8:	0800bf9d 	.word	0x0800bf9d
 800befc:	0800bfcd 	.word	0x0800bfcd
 800bf00:	0800bfcd 	.word	0x0800bfcd
 800bf04:	0800bfcd 	.word	0x0800bfcd
 800bf08:	0800bfcd 	.word	0x0800bfcd
 800bf0c:	0800bfcd 	.word	0x0800bfcd
 800bf10:	0800bfcd 	.word	0x0800bfcd
 800bf14:	0800bfcd 	.word	0x0800bfcd
 800bf18:	0800bfa5 	.word	0x0800bfa5
 800bf1c:	0800bfcd 	.word	0x0800bfcd
 800bf20:	0800bfcd 	.word	0x0800bfcd
 800bf24:	0800bfcd 	.word	0x0800bfcd
 800bf28:	0800bfcd 	.word	0x0800bfcd
 800bf2c:	0800bfcd 	.word	0x0800bfcd
 800bf30:	0800bfcd 	.word	0x0800bfcd
 800bf34:	0800bfcd 	.word	0x0800bfcd
 800bf38:	0800bfad 	.word	0x0800bfad
 800bf3c:	0800bfcd 	.word	0x0800bfcd
 800bf40:	0800bfcd 	.word	0x0800bfcd
 800bf44:	0800bfcd 	.word	0x0800bfcd
 800bf48:	0800bfcd 	.word	0x0800bfcd
 800bf4c:	0800bfcd 	.word	0x0800bfcd
 800bf50:	0800bfcd 	.word	0x0800bfcd
 800bf54:	0800bfcd 	.word	0x0800bfcd
 800bf58:	0800bfb5 	.word	0x0800bfb5
 800bf5c:	0800bfcd 	.word	0x0800bfcd
 800bf60:	0800bfcd 	.word	0x0800bfcd
 800bf64:	0800bfcd 	.word	0x0800bfcd
 800bf68:	0800bfcd 	.word	0x0800bfcd
 800bf6c:	0800bfcd 	.word	0x0800bfcd
 800bf70:	0800bfcd 	.word	0x0800bfcd
 800bf74:	0800bfcd 	.word	0x0800bfcd
 800bf78:	0800bfbd 	.word	0x0800bfbd
 800bf7c:	0800bfcd 	.word	0x0800bfcd
 800bf80:	0800bfcd 	.word	0x0800bfcd
 800bf84:	0800bfcd 	.word	0x0800bfcd
 800bf88:	0800bfcd 	.word	0x0800bfcd
 800bf8c:	0800bfcd 	.word	0x0800bfcd
 800bf90:	0800bfcd 	.word	0x0800bfcd
 800bf94:	0800bfcd 	.word	0x0800bfcd
 800bf98:	0800bfc5 	.word	0x0800bfc5
 800bf9c:	2301      	movs	r3, #1
 800bf9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bfa2:	e0bc      	b.n	800c11e <UART_SetConfig+0x5a6>
 800bfa4:	2304      	movs	r3, #4
 800bfa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bfaa:	e0b8      	b.n	800c11e <UART_SetConfig+0x5a6>
 800bfac:	2308      	movs	r3, #8
 800bfae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bfb2:	e0b4      	b.n	800c11e <UART_SetConfig+0x5a6>
 800bfb4:	2310      	movs	r3, #16
 800bfb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bfba:	e0b0      	b.n	800c11e <UART_SetConfig+0x5a6>
 800bfbc:	2320      	movs	r3, #32
 800bfbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bfc2:	e0ac      	b.n	800c11e <UART_SetConfig+0x5a6>
 800bfc4:	2340      	movs	r3, #64	@ 0x40
 800bfc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bfca:	e0a8      	b.n	800c11e <UART_SetConfig+0x5a6>
 800bfcc:	2380      	movs	r3, #128	@ 0x80
 800bfce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bfd2:	e0a4      	b.n	800c11e <UART_SetConfig+0x5a6>
 800bfd4:	697b      	ldr	r3, [r7, #20]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	4a8f      	ldr	r2, [pc, #572]	@ (800c218 <UART_SetConfig+0x6a0>)
 800bfda:	4293      	cmp	r3, r2
 800bfdc:	d130      	bne.n	800c040 <UART_SetConfig+0x4c8>
 800bfde:	4b8d      	ldr	r3, [pc, #564]	@ (800c214 <UART_SetConfig+0x69c>)
 800bfe0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bfe2:	f003 0307 	and.w	r3, r3, #7
 800bfe6:	2b05      	cmp	r3, #5
 800bfe8:	d826      	bhi.n	800c038 <UART_SetConfig+0x4c0>
 800bfea:	a201      	add	r2, pc, #4	@ (adr r2, 800bff0 <UART_SetConfig+0x478>)
 800bfec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bff0:	0800c009 	.word	0x0800c009
 800bff4:	0800c011 	.word	0x0800c011
 800bff8:	0800c019 	.word	0x0800c019
 800bffc:	0800c021 	.word	0x0800c021
 800c000:	0800c029 	.word	0x0800c029
 800c004:	0800c031 	.word	0x0800c031
 800c008:	2300      	movs	r3, #0
 800c00a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c00e:	e086      	b.n	800c11e <UART_SetConfig+0x5a6>
 800c010:	2304      	movs	r3, #4
 800c012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c016:	e082      	b.n	800c11e <UART_SetConfig+0x5a6>
 800c018:	2308      	movs	r3, #8
 800c01a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c01e:	e07e      	b.n	800c11e <UART_SetConfig+0x5a6>
 800c020:	2310      	movs	r3, #16
 800c022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c026:	e07a      	b.n	800c11e <UART_SetConfig+0x5a6>
 800c028:	2320      	movs	r3, #32
 800c02a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c02e:	e076      	b.n	800c11e <UART_SetConfig+0x5a6>
 800c030:	2340      	movs	r3, #64	@ 0x40
 800c032:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c036:	e072      	b.n	800c11e <UART_SetConfig+0x5a6>
 800c038:	2380      	movs	r3, #128	@ 0x80
 800c03a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c03e:	e06e      	b.n	800c11e <UART_SetConfig+0x5a6>
 800c040:	697b      	ldr	r3, [r7, #20]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	4a75      	ldr	r2, [pc, #468]	@ (800c21c <UART_SetConfig+0x6a4>)
 800c046:	4293      	cmp	r3, r2
 800c048:	d130      	bne.n	800c0ac <UART_SetConfig+0x534>
 800c04a:	4b72      	ldr	r3, [pc, #456]	@ (800c214 <UART_SetConfig+0x69c>)
 800c04c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c04e:	f003 0307 	and.w	r3, r3, #7
 800c052:	2b05      	cmp	r3, #5
 800c054:	d826      	bhi.n	800c0a4 <UART_SetConfig+0x52c>
 800c056:	a201      	add	r2, pc, #4	@ (adr r2, 800c05c <UART_SetConfig+0x4e4>)
 800c058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c05c:	0800c075 	.word	0x0800c075
 800c060:	0800c07d 	.word	0x0800c07d
 800c064:	0800c085 	.word	0x0800c085
 800c068:	0800c08d 	.word	0x0800c08d
 800c06c:	0800c095 	.word	0x0800c095
 800c070:	0800c09d 	.word	0x0800c09d
 800c074:	2300      	movs	r3, #0
 800c076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c07a:	e050      	b.n	800c11e <UART_SetConfig+0x5a6>
 800c07c:	2304      	movs	r3, #4
 800c07e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c082:	e04c      	b.n	800c11e <UART_SetConfig+0x5a6>
 800c084:	2308      	movs	r3, #8
 800c086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c08a:	e048      	b.n	800c11e <UART_SetConfig+0x5a6>
 800c08c:	2310      	movs	r3, #16
 800c08e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c092:	e044      	b.n	800c11e <UART_SetConfig+0x5a6>
 800c094:	2320      	movs	r3, #32
 800c096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c09a:	e040      	b.n	800c11e <UART_SetConfig+0x5a6>
 800c09c:	2340      	movs	r3, #64	@ 0x40
 800c09e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0a2:	e03c      	b.n	800c11e <UART_SetConfig+0x5a6>
 800c0a4:	2380      	movs	r3, #128	@ 0x80
 800c0a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0aa:	e038      	b.n	800c11e <UART_SetConfig+0x5a6>
 800c0ac:	697b      	ldr	r3, [r7, #20]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	4a5b      	ldr	r2, [pc, #364]	@ (800c220 <UART_SetConfig+0x6a8>)
 800c0b2:	4293      	cmp	r3, r2
 800c0b4:	d130      	bne.n	800c118 <UART_SetConfig+0x5a0>
 800c0b6:	4b57      	ldr	r3, [pc, #348]	@ (800c214 <UART_SetConfig+0x69c>)
 800c0b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c0ba:	f003 0307 	and.w	r3, r3, #7
 800c0be:	2b05      	cmp	r3, #5
 800c0c0:	d826      	bhi.n	800c110 <UART_SetConfig+0x598>
 800c0c2:	a201      	add	r2, pc, #4	@ (adr r2, 800c0c8 <UART_SetConfig+0x550>)
 800c0c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0c8:	0800c0e1 	.word	0x0800c0e1
 800c0cc:	0800c0e9 	.word	0x0800c0e9
 800c0d0:	0800c0f1 	.word	0x0800c0f1
 800c0d4:	0800c0f9 	.word	0x0800c0f9
 800c0d8:	0800c101 	.word	0x0800c101
 800c0dc:	0800c109 	.word	0x0800c109
 800c0e0:	2302      	movs	r3, #2
 800c0e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0e6:	e01a      	b.n	800c11e <UART_SetConfig+0x5a6>
 800c0e8:	2304      	movs	r3, #4
 800c0ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0ee:	e016      	b.n	800c11e <UART_SetConfig+0x5a6>
 800c0f0:	2308      	movs	r3, #8
 800c0f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0f6:	e012      	b.n	800c11e <UART_SetConfig+0x5a6>
 800c0f8:	2310      	movs	r3, #16
 800c0fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0fe:	e00e      	b.n	800c11e <UART_SetConfig+0x5a6>
 800c100:	2320      	movs	r3, #32
 800c102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c106:	e00a      	b.n	800c11e <UART_SetConfig+0x5a6>
 800c108:	2340      	movs	r3, #64	@ 0x40
 800c10a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c10e:	e006      	b.n	800c11e <UART_SetConfig+0x5a6>
 800c110:	2380      	movs	r3, #128	@ 0x80
 800c112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c116:	e002      	b.n	800c11e <UART_SetConfig+0x5a6>
 800c118:	2380      	movs	r3, #128	@ 0x80
 800c11a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c11e:	697b      	ldr	r3, [r7, #20]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	4a3f      	ldr	r2, [pc, #252]	@ (800c220 <UART_SetConfig+0x6a8>)
 800c124:	4293      	cmp	r3, r2
 800c126:	f040 80f8 	bne.w	800c31a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c12a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c12e:	2b20      	cmp	r3, #32
 800c130:	dc46      	bgt.n	800c1c0 <UART_SetConfig+0x648>
 800c132:	2b02      	cmp	r3, #2
 800c134:	f2c0 8082 	blt.w	800c23c <UART_SetConfig+0x6c4>
 800c138:	3b02      	subs	r3, #2
 800c13a:	2b1e      	cmp	r3, #30
 800c13c:	d87e      	bhi.n	800c23c <UART_SetConfig+0x6c4>
 800c13e:	a201      	add	r2, pc, #4	@ (adr r2, 800c144 <UART_SetConfig+0x5cc>)
 800c140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c144:	0800c1c7 	.word	0x0800c1c7
 800c148:	0800c23d 	.word	0x0800c23d
 800c14c:	0800c1cf 	.word	0x0800c1cf
 800c150:	0800c23d 	.word	0x0800c23d
 800c154:	0800c23d 	.word	0x0800c23d
 800c158:	0800c23d 	.word	0x0800c23d
 800c15c:	0800c1df 	.word	0x0800c1df
 800c160:	0800c23d 	.word	0x0800c23d
 800c164:	0800c23d 	.word	0x0800c23d
 800c168:	0800c23d 	.word	0x0800c23d
 800c16c:	0800c23d 	.word	0x0800c23d
 800c170:	0800c23d 	.word	0x0800c23d
 800c174:	0800c23d 	.word	0x0800c23d
 800c178:	0800c23d 	.word	0x0800c23d
 800c17c:	0800c1ef 	.word	0x0800c1ef
 800c180:	0800c23d 	.word	0x0800c23d
 800c184:	0800c23d 	.word	0x0800c23d
 800c188:	0800c23d 	.word	0x0800c23d
 800c18c:	0800c23d 	.word	0x0800c23d
 800c190:	0800c23d 	.word	0x0800c23d
 800c194:	0800c23d 	.word	0x0800c23d
 800c198:	0800c23d 	.word	0x0800c23d
 800c19c:	0800c23d 	.word	0x0800c23d
 800c1a0:	0800c23d 	.word	0x0800c23d
 800c1a4:	0800c23d 	.word	0x0800c23d
 800c1a8:	0800c23d 	.word	0x0800c23d
 800c1ac:	0800c23d 	.word	0x0800c23d
 800c1b0:	0800c23d 	.word	0x0800c23d
 800c1b4:	0800c23d 	.word	0x0800c23d
 800c1b8:	0800c23d 	.word	0x0800c23d
 800c1bc:	0800c22f 	.word	0x0800c22f
 800c1c0:	2b40      	cmp	r3, #64	@ 0x40
 800c1c2:	d037      	beq.n	800c234 <UART_SetConfig+0x6bc>
 800c1c4:	e03a      	b.n	800c23c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c1c6:	f7fe f87d 	bl	800a2c4 <HAL_RCCEx_GetD3PCLK1Freq>
 800c1ca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c1cc:	e03c      	b.n	800c248 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c1ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	f7fe f88c 	bl	800a2f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c1d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c1dc:	e034      	b.n	800c248 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c1de:	f107 0318 	add.w	r3, r7, #24
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	f7fe f9d8 	bl	800a598 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c1e8:	69fb      	ldr	r3, [r7, #28]
 800c1ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c1ec:	e02c      	b.n	800c248 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c1ee:	4b09      	ldr	r3, [pc, #36]	@ (800c214 <UART_SetConfig+0x69c>)
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	f003 0320 	and.w	r3, r3, #32
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d016      	beq.n	800c228 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c1fa:	4b06      	ldr	r3, [pc, #24]	@ (800c214 <UART_SetConfig+0x69c>)
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	08db      	lsrs	r3, r3, #3
 800c200:	f003 0303 	and.w	r3, r3, #3
 800c204:	4a07      	ldr	r2, [pc, #28]	@ (800c224 <UART_SetConfig+0x6ac>)
 800c206:	fa22 f303 	lsr.w	r3, r2, r3
 800c20a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c20c:	e01c      	b.n	800c248 <UART_SetConfig+0x6d0>
 800c20e:	bf00      	nop
 800c210:	40011400 	.word	0x40011400
 800c214:	58024400 	.word	0x58024400
 800c218:	40007800 	.word	0x40007800
 800c21c:	40007c00 	.word	0x40007c00
 800c220:	58000c00 	.word	0x58000c00
 800c224:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800c228:	4b9d      	ldr	r3, [pc, #628]	@ (800c4a0 <UART_SetConfig+0x928>)
 800c22a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c22c:	e00c      	b.n	800c248 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c22e:	4b9d      	ldr	r3, [pc, #628]	@ (800c4a4 <UART_SetConfig+0x92c>)
 800c230:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c232:	e009      	b.n	800c248 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c234:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c238:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c23a:	e005      	b.n	800c248 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800c23c:	2300      	movs	r3, #0
 800c23e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c240:	2301      	movs	r3, #1
 800c242:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c246:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c248:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	f000 81de 	beq.w	800c60c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c250:	697b      	ldr	r3, [r7, #20]
 800c252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c254:	4a94      	ldr	r2, [pc, #592]	@ (800c4a8 <UART_SetConfig+0x930>)
 800c256:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c25a:	461a      	mov	r2, r3
 800c25c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c25e:	fbb3 f3f2 	udiv	r3, r3, r2
 800c262:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c264:	697b      	ldr	r3, [r7, #20]
 800c266:	685a      	ldr	r2, [r3, #4]
 800c268:	4613      	mov	r3, r2
 800c26a:	005b      	lsls	r3, r3, #1
 800c26c:	4413      	add	r3, r2
 800c26e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c270:	429a      	cmp	r2, r3
 800c272:	d305      	bcc.n	800c280 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c274:	697b      	ldr	r3, [r7, #20]
 800c276:	685b      	ldr	r3, [r3, #4]
 800c278:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c27a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c27c:	429a      	cmp	r2, r3
 800c27e:	d903      	bls.n	800c288 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800c280:	2301      	movs	r3, #1
 800c282:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c286:	e1c1      	b.n	800c60c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c288:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c28a:	2200      	movs	r2, #0
 800c28c:	60bb      	str	r3, [r7, #8]
 800c28e:	60fa      	str	r2, [r7, #12]
 800c290:	697b      	ldr	r3, [r7, #20]
 800c292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c294:	4a84      	ldr	r2, [pc, #528]	@ (800c4a8 <UART_SetConfig+0x930>)
 800c296:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c29a:	b29b      	uxth	r3, r3
 800c29c:	2200      	movs	r2, #0
 800c29e:	603b      	str	r3, [r7, #0]
 800c2a0:	607a      	str	r2, [r7, #4]
 800c2a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c2a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c2aa:	f7f4 f815 	bl	80002d8 <__aeabi_uldivmod>
 800c2ae:	4602      	mov	r2, r0
 800c2b0:	460b      	mov	r3, r1
 800c2b2:	4610      	mov	r0, r2
 800c2b4:	4619      	mov	r1, r3
 800c2b6:	f04f 0200 	mov.w	r2, #0
 800c2ba:	f04f 0300 	mov.w	r3, #0
 800c2be:	020b      	lsls	r3, r1, #8
 800c2c0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c2c4:	0202      	lsls	r2, r0, #8
 800c2c6:	6979      	ldr	r1, [r7, #20]
 800c2c8:	6849      	ldr	r1, [r1, #4]
 800c2ca:	0849      	lsrs	r1, r1, #1
 800c2cc:	2000      	movs	r0, #0
 800c2ce:	460c      	mov	r4, r1
 800c2d0:	4605      	mov	r5, r0
 800c2d2:	eb12 0804 	adds.w	r8, r2, r4
 800c2d6:	eb43 0905 	adc.w	r9, r3, r5
 800c2da:	697b      	ldr	r3, [r7, #20]
 800c2dc:	685b      	ldr	r3, [r3, #4]
 800c2de:	2200      	movs	r2, #0
 800c2e0:	469a      	mov	sl, r3
 800c2e2:	4693      	mov	fp, r2
 800c2e4:	4652      	mov	r2, sl
 800c2e6:	465b      	mov	r3, fp
 800c2e8:	4640      	mov	r0, r8
 800c2ea:	4649      	mov	r1, r9
 800c2ec:	f7f3 fff4 	bl	80002d8 <__aeabi_uldivmod>
 800c2f0:	4602      	mov	r2, r0
 800c2f2:	460b      	mov	r3, r1
 800c2f4:	4613      	mov	r3, r2
 800c2f6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c2f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c2fe:	d308      	bcc.n	800c312 <UART_SetConfig+0x79a>
 800c300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c302:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c306:	d204      	bcs.n	800c312 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800c308:	697b      	ldr	r3, [r7, #20]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c30e:	60da      	str	r2, [r3, #12]
 800c310:	e17c      	b.n	800c60c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800c312:	2301      	movs	r3, #1
 800c314:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c318:	e178      	b.n	800c60c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c31a:	697b      	ldr	r3, [r7, #20]
 800c31c:	69db      	ldr	r3, [r3, #28]
 800c31e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c322:	f040 80c5 	bne.w	800c4b0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800c326:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c32a:	2b20      	cmp	r3, #32
 800c32c:	dc48      	bgt.n	800c3c0 <UART_SetConfig+0x848>
 800c32e:	2b00      	cmp	r3, #0
 800c330:	db7b      	blt.n	800c42a <UART_SetConfig+0x8b2>
 800c332:	2b20      	cmp	r3, #32
 800c334:	d879      	bhi.n	800c42a <UART_SetConfig+0x8b2>
 800c336:	a201      	add	r2, pc, #4	@ (adr r2, 800c33c <UART_SetConfig+0x7c4>)
 800c338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c33c:	0800c3c7 	.word	0x0800c3c7
 800c340:	0800c3cf 	.word	0x0800c3cf
 800c344:	0800c42b 	.word	0x0800c42b
 800c348:	0800c42b 	.word	0x0800c42b
 800c34c:	0800c3d7 	.word	0x0800c3d7
 800c350:	0800c42b 	.word	0x0800c42b
 800c354:	0800c42b 	.word	0x0800c42b
 800c358:	0800c42b 	.word	0x0800c42b
 800c35c:	0800c3e7 	.word	0x0800c3e7
 800c360:	0800c42b 	.word	0x0800c42b
 800c364:	0800c42b 	.word	0x0800c42b
 800c368:	0800c42b 	.word	0x0800c42b
 800c36c:	0800c42b 	.word	0x0800c42b
 800c370:	0800c42b 	.word	0x0800c42b
 800c374:	0800c42b 	.word	0x0800c42b
 800c378:	0800c42b 	.word	0x0800c42b
 800c37c:	0800c3f7 	.word	0x0800c3f7
 800c380:	0800c42b 	.word	0x0800c42b
 800c384:	0800c42b 	.word	0x0800c42b
 800c388:	0800c42b 	.word	0x0800c42b
 800c38c:	0800c42b 	.word	0x0800c42b
 800c390:	0800c42b 	.word	0x0800c42b
 800c394:	0800c42b 	.word	0x0800c42b
 800c398:	0800c42b 	.word	0x0800c42b
 800c39c:	0800c42b 	.word	0x0800c42b
 800c3a0:	0800c42b 	.word	0x0800c42b
 800c3a4:	0800c42b 	.word	0x0800c42b
 800c3a8:	0800c42b 	.word	0x0800c42b
 800c3ac:	0800c42b 	.word	0x0800c42b
 800c3b0:	0800c42b 	.word	0x0800c42b
 800c3b4:	0800c42b 	.word	0x0800c42b
 800c3b8:	0800c42b 	.word	0x0800c42b
 800c3bc:	0800c41d 	.word	0x0800c41d
 800c3c0:	2b40      	cmp	r3, #64	@ 0x40
 800c3c2:	d02e      	beq.n	800c422 <UART_SetConfig+0x8aa>
 800c3c4:	e031      	b.n	800c42a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c3c6:	f7fb ffc7 	bl	8008358 <HAL_RCC_GetPCLK1Freq>
 800c3ca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c3cc:	e033      	b.n	800c436 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c3ce:	f7fb ffd9 	bl	8008384 <HAL_RCC_GetPCLK2Freq>
 800c3d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c3d4:	e02f      	b.n	800c436 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c3d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c3da:	4618      	mov	r0, r3
 800c3dc:	f7fd ff88 	bl	800a2f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c3e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c3e4:	e027      	b.n	800c436 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c3e6:	f107 0318 	add.w	r3, r7, #24
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	f7fe f8d4 	bl	800a598 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c3f0:	69fb      	ldr	r3, [r7, #28]
 800c3f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c3f4:	e01f      	b.n	800c436 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c3f6:	4b2d      	ldr	r3, [pc, #180]	@ (800c4ac <UART_SetConfig+0x934>)
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	f003 0320 	and.w	r3, r3, #32
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d009      	beq.n	800c416 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c402:	4b2a      	ldr	r3, [pc, #168]	@ (800c4ac <UART_SetConfig+0x934>)
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	08db      	lsrs	r3, r3, #3
 800c408:	f003 0303 	and.w	r3, r3, #3
 800c40c:	4a24      	ldr	r2, [pc, #144]	@ (800c4a0 <UART_SetConfig+0x928>)
 800c40e:	fa22 f303 	lsr.w	r3, r2, r3
 800c412:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c414:	e00f      	b.n	800c436 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c416:	4b22      	ldr	r3, [pc, #136]	@ (800c4a0 <UART_SetConfig+0x928>)
 800c418:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c41a:	e00c      	b.n	800c436 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c41c:	4b21      	ldr	r3, [pc, #132]	@ (800c4a4 <UART_SetConfig+0x92c>)
 800c41e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c420:	e009      	b.n	800c436 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c422:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c426:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c428:	e005      	b.n	800c436 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c42a:	2300      	movs	r3, #0
 800c42c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c42e:	2301      	movs	r3, #1
 800c430:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c434:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c436:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c438:	2b00      	cmp	r3, #0
 800c43a:	f000 80e7 	beq.w	800c60c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c43e:	697b      	ldr	r3, [r7, #20]
 800c440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c442:	4a19      	ldr	r2, [pc, #100]	@ (800c4a8 <UART_SetConfig+0x930>)
 800c444:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c448:	461a      	mov	r2, r3
 800c44a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c44c:	fbb3 f3f2 	udiv	r3, r3, r2
 800c450:	005a      	lsls	r2, r3, #1
 800c452:	697b      	ldr	r3, [r7, #20]
 800c454:	685b      	ldr	r3, [r3, #4]
 800c456:	085b      	lsrs	r3, r3, #1
 800c458:	441a      	add	r2, r3
 800c45a:	697b      	ldr	r3, [r7, #20]
 800c45c:	685b      	ldr	r3, [r3, #4]
 800c45e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c462:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c466:	2b0f      	cmp	r3, #15
 800c468:	d916      	bls.n	800c498 <UART_SetConfig+0x920>
 800c46a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c46c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c470:	d212      	bcs.n	800c498 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c474:	b29b      	uxth	r3, r3
 800c476:	f023 030f 	bic.w	r3, r3, #15
 800c47a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c47c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c47e:	085b      	lsrs	r3, r3, #1
 800c480:	b29b      	uxth	r3, r3
 800c482:	f003 0307 	and.w	r3, r3, #7
 800c486:	b29a      	uxth	r2, r3
 800c488:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c48a:	4313      	orrs	r3, r2
 800c48c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800c48e:	697b      	ldr	r3, [r7, #20]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800c494:	60da      	str	r2, [r3, #12]
 800c496:	e0b9      	b.n	800c60c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c498:	2301      	movs	r3, #1
 800c49a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c49e:	e0b5      	b.n	800c60c <UART_SetConfig+0xa94>
 800c4a0:	03d09000 	.word	0x03d09000
 800c4a4:	003d0900 	.word	0x003d0900
 800c4a8:	0800d108 	.word	0x0800d108
 800c4ac:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800c4b0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c4b4:	2b20      	cmp	r3, #32
 800c4b6:	dc49      	bgt.n	800c54c <UART_SetConfig+0x9d4>
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	db7c      	blt.n	800c5b6 <UART_SetConfig+0xa3e>
 800c4bc:	2b20      	cmp	r3, #32
 800c4be:	d87a      	bhi.n	800c5b6 <UART_SetConfig+0xa3e>
 800c4c0:	a201      	add	r2, pc, #4	@ (adr r2, 800c4c8 <UART_SetConfig+0x950>)
 800c4c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4c6:	bf00      	nop
 800c4c8:	0800c553 	.word	0x0800c553
 800c4cc:	0800c55b 	.word	0x0800c55b
 800c4d0:	0800c5b7 	.word	0x0800c5b7
 800c4d4:	0800c5b7 	.word	0x0800c5b7
 800c4d8:	0800c563 	.word	0x0800c563
 800c4dc:	0800c5b7 	.word	0x0800c5b7
 800c4e0:	0800c5b7 	.word	0x0800c5b7
 800c4e4:	0800c5b7 	.word	0x0800c5b7
 800c4e8:	0800c573 	.word	0x0800c573
 800c4ec:	0800c5b7 	.word	0x0800c5b7
 800c4f0:	0800c5b7 	.word	0x0800c5b7
 800c4f4:	0800c5b7 	.word	0x0800c5b7
 800c4f8:	0800c5b7 	.word	0x0800c5b7
 800c4fc:	0800c5b7 	.word	0x0800c5b7
 800c500:	0800c5b7 	.word	0x0800c5b7
 800c504:	0800c5b7 	.word	0x0800c5b7
 800c508:	0800c583 	.word	0x0800c583
 800c50c:	0800c5b7 	.word	0x0800c5b7
 800c510:	0800c5b7 	.word	0x0800c5b7
 800c514:	0800c5b7 	.word	0x0800c5b7
 800c518:	0800c5b7 	.word	0x0800c5b7
 800c51c:	0800c5b7 	.word	0x0800c5b7
 800c520:	0800c5b7 	.word	0x0800c5b7
 800c524:	0800c5b7 	.word	0x0800c5b7
 800c528:	0800c5b7 	.word	0x0800c5b7
 800c52c:	0800c5b7 	.word	0x0800c5b7
 800c530:	0800c5b7 	.word	0x0800c5b7
 800c534:	0800c5b7 	.word	0x0800c5b7
 800c538:	0800c5b7 	.word	0x0800c5b7
 800c53c:	0800c5b7 	.word	0x0800c5b7
 800c540:	0800c5b7 	.word	0x0800c5b7
 800c544:	0800c5b7 	.word	0x0800c5b7
 800c548:	0800c5a9 	.word	0x0800c5a9
 800c54c:	2b40      	cmp	r3, #64	@ 0x40
 800c54e:	d02e      	beq.n	800c5ae <UART_SetConfig+0xa36>
 800c550:	e031      	b.n	800c5b6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c552:	f7fb ff01 	bl	8008358 <HAL_RCC_GetPCLK1Freq>
 800c556:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c558:	e033      	b.n	800c5c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c55a:	f7fb ff13 	bl	8008384 <HAL_RCC_GetPCLK2Freq>
 800c55e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c560:	e02f      	b.n	800c5c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c562:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c566:	4618      	mov	r0, r3
 800c568:	f7fd fec2 	bl	800a2f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c56c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c56e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c570:	e027      	b.n	800c5c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c572:	f107 0318 	add.w	r3, r7, #24
 800c576:	4618      	mov	r0, r3
 800c578:	f7fe f80e 	bl	800a598 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c57c:	69fb      	ldr	r3, [r7, #28]
 800c57e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c580:	e01f      	b.n	800c5c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c582:	4b2d      	ldr	r3, [pc, #180]	@ (800c638 <UART_SetConfig+0xac0>)
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	f003 0320 	and.w	r3, r3, #32
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d009      	beq.n	800c5a2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c58e:	4b2a      	ldr	r3, [pc, #168]	@ (800c638 <UART_SetConfig+0xac0>)
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	08db      	lsrs	r3, r3, #3
 800c594:	f003 0303 	and.w	r3, r3, #3
 800c598:	4a28      	ldr	r2, [pc, #160]	@ (800c63c <UART_SetConfig+0xac4>)
 800c59a:	fa22 f303 	lsr.w	r3, r2, r3
 800c59e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c5a0:	e00f      	b.n	800c5c2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800c5a2:	4b26      	ldr	r3, [pc, #152]	@ (800c63c <UART_SetConfig+0xac4>)
 800c5a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c5a6:	e00c      	b.n	800c5c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c5a8:	4b25      	ldr	r3, [pc, #148]	@ (800c640 <UART_SetConfig+0xac8>)
 800c5aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c5ac:	e009      	b.n	800c5c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c5ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c5b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c5b4:	e005      	b.n	800c5c2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c5ba:	2301      	movs	r3, #1
 800c5bc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c5c0:	bf00      	nop
    }

    if (pclk != 0U)
 800c5c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d021      	beq.n	800c60c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c5c8:	697b      	ldr	r3, [r7, #20]
 800c5ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5cc:	4a1d      	ldr	r2, [pc, #116]	@ (800c644 <UART_SetConfig+0xacc>)
 800c5ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c5d2:	461a      	mov	r2, r3
 800c5d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5d6:	fbb3 f2f2 	udiv	r2, r3, r2
 800c5da:	697b      	ldr	r3, [r7, #20]
 800c5dc:	685b      	ldr	r3, [r3, #4]
 800c5de:	085b      	lsrs	r3, r3, #1
 800c5e0:	441a      	add	r2, r3
 800c5e2:	697b      	ldr	r3, [r7, #20]
 800c5e4:	685b      	ldr	r3, [r3, #4]
 800c5e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c5ea:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c5ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5ee:	2b0f      	cmp	r3, #15
 800c5f0:	d909      	bls.n	800c606 <UART_SetConfig+0xa8e>
 800c5f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c5f8:	d205      	bcs.n	800c606 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c5fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5fc:	b29a      	uxth	r2, r3
 800c5fe:	697b      	ldr	r3, [r7, #20]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	60da      	str	r2, [r3, #12]
 800c604:	e002      	b.n	800c60c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c606:	2301      	movs	r3, #1
 800c608:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c60c:	697b      	ldr	r3, [r7, #20]
 800c60e:	2201      	movs	r2, #1
 800c610:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800c614:	697b      	ldr	r3, [r7, #20]
 800c616:	2201      	movs	r2, #1
 800c618:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c61c:	697b      	ldr	r3, [r7, #20]
 800c61e:	2200      	movs	r2, #0
 800c620:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c622:	697b      	ldr	r3, [r7, #20]
 800c624:	2200      	movs	r2, #0
 800c626:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c628:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800c62c:	4618      	mov	r0, r3
 800c62e:	3748      	adds	r7, #72	@ 0x48
 800c630:	46bd      	mov	sp, r7
 800c632:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c636:	bf00      	nop
 800c638:	58024400 	.word	0x58024400
 800c63c:	03d09000 	.word	0x03d09000
 800c640:	003d0900 	.word	0x003d0900
 800c644:	0800d108 	.word	0x0800d108

0800c648 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c648:	b480      	push	{r7}
 800c64a:	b083      	sub	sp, #12
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c654:	f003 0308 	and.w	r3, r3, #8
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d00a      	beq.n	800c672 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	685b      	ldr	r3, [r3, #4]
 800c662:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	430a      	orrs	r2, r1
 800c670:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c676:	f003 0301 	and.w	r3, r3, #1
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d00a      	beq.n	800c694 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	685b      	ldr	r3, [r3, #4]
 800c684:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	430a      	orrs	r2, r1
 800c692:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c698:	f003 0302 	and.w	r3, r3, #2
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d00a      	beq.n	800c6b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	685b      	ldr	r3, [r3, #4]
 800c6a6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	430a      	orrs	r2, r1
 800c6b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6ba:	f003 0304 	and.w	r3, r3, #4
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d00a      	beq.n	800c6d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	685b      	ldr	r3, [r3, #4]
 800c6c8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	430a      	orrs	r2, r1
 800c6d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6dc:	f003 0310 	and.w	r3, r3, #16
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d00a      	beq.n	800c6fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	689b      	ldr	r3, [r3, #8]
 800c6ea:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	430a      	orrs	r2, r1
 800c6f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6fe:	f003 0320 	and.w	r3, r3, #32
 800c702:	2b00      	cmp	r3, #0
 800c704:	d00a      	beq.n	800c71c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	689b      	ldr	r3, [r3, #8]
 800c70c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	430a      	orrs	r2, r1
 800c71a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c720:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c724:	2b00      	cmp	r3, #0
 800c726:	d01a      	beq.n	800c75e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	685b      	ldr	r3, [r3, #4]
 800c72e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	430a      	orrs	r2, r1
 800c73c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c742:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c746:	d10a      	bne.n	800c75e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	685b      	ldr	r3, [r3, #4]
 800c74e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	430a      	orrs	r2, r1
 800c75c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c762:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c766:	2b00      	cmp	r3, #0
 800c768:	d00a      	beq.n	800c780 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	685b      	ldr	r3, [r3, #4]
 800c770:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	430a      	orrs	r2, r1
 800c77e:	605a      	str	r2, [r3, #4]
  }
}
 800c780:	bf00      	nop
 800c782:	370c      	adds	r7, #12
 800c784:	46bd      	mov	sp, r7
 800c786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78a:	4770      	bx	lr

0800c78c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b098      	sub	sp, #96	@ 0x60
 800c790:	af02      	add	r7, sp, #8
 800c792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	2200      	movs	r2, #0
 800c798:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c79c:	f7f6 ff5a 	bl	8003654 <HAL_GetTick>
 800c7a0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	f003 0308 	and.w	r3, r3, #8
 800c7ac:	2b08      	cmp	r3, #8
 800c7ae:	d12f      	bne.n	800c810 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c7b0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c7b4:	9300      	str	r3, [sp, #0]
 800c7b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c7be:	6878      	ldr	r0, [r7, #4]
 800c7c0:	f000 f88e 	bl	800c8e0 <UART_WaitOnFlagUntilTimeout>
 800c7c4:	4603      	mov	r3, r0
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d022      	beq.n	800c810 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7d2:	e853 3f00 	ldrex	r3, [r3]
 800c7d6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c7d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c7de:	653b      	str	r3, [r7, #80]	@ 0x50
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	461a      	mov	r2, r3
 800c7e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c7e8:	647b      	str	r3, [r7, #68]	@ 0x44
 800c7ea:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c7ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c7f0:	e841 2300 	strex	r3, r2, [r1]
 800c7f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c7f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d1e6      	bne.n	800c7ca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2220      	movs	r2, #32
 800c800:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	2200      	movs	r2, #0
 800c808:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c80c:	2303      	movs	r3, #3
 800c80e:	e063      	b.n	800c8d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	f003 0304 	and.w	r3, r3, #4
 800c81a:	2b04      	cmp	r3, #4
 800c81c:	d149      	bne.n	800c8b2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c81e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c822:	9300      	str	r3, [sp, #0]
 800c824:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c826:	2200      	movs	r2, #0
 800c828:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c82c:	6878      	ldr	r0, [r7, #4]
 800c82e:	f000 f857 	bl	800c8e0 <UART_WaitOnFlagUntilTimeout>
 800c832:	4603      	mov	r3, r0
 800c834:	2b00      	cmp	r3, #0
 800c836:	d03c      	beq.n	800c8b2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c83e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c840:	e853 3f00 	ldrex	r3, [r3]
 800c844:	623b      	str	r3, [r7, #32]
   return(result);
 800c846:	6a3b      	ldr	r3, [r7, #32]
 800c848:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c84c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	461a      	mov	r2, r3
 800c854:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c856:	633b      	str	r3, [r7, #48]	@ 0x30
 800c858:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c85a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c85c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c85e:	e841 2300 	strex	r3, r2, [r1]
 800c862:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c866:	2b00      	cmp	r3, #0
 800c868:	d1e6      	bne.n	800c838 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	3308      	adds	r3, #8
 800c870:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c872:	693b      	ldr	r3, [r7, #16]
 800c874:	e853 3f00 	ldrex	r3, [r3]
 800c878:	60fb      	str	r3, [r7, #12]
   return(result);
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	f023 0301 	bic.w	r3, r3, #1
 800c880:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	3308      	adds	r3, #8
 800c888:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c88a:	61fa      	str	r2, [r7, #28]
 800c88c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c88e:	69b9      	ldr	r1, [r7, #24]
 800c890:	69fa      	ldr	r2, [r7, #28]
 800c892:	e841 2300 	strex	r3, r2, [r1]
 800c896:	617b      	str	r3, [r7, #20]
   return(result);
 800c898:	697b      	ldr	r3, [r7, #20]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d1e5      	bne.n	800c86a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	2220      	movs	r2, #32
 800c8a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c8ae:	2303      	movs	r3, #3
 800c8b0:	e012      	b.n	800c8d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	2220      	movs	r2, #32
 800c8b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	2220      	movs	r2, #32
 800c8be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	2200      	movs	r2, #0
 800c8cc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	2200      	movs	r2, #0
 800c8d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c8d6:	2300      	movs	r3, #0
}
 800c8d8:	4618      	mov	r0, r3
 800c8da:	3758      	adds	r7, #88	@ 0x58
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	bd80      	pop	{r7, pc}

0800c8e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c8e0:	b580      	push	{r7, lr}
 800c8e2:	b084      	sub	sp, #16
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	60f8      	str	r0, [r7, #12]
 800c8e8:	60b9      	str	r1, [r7, #8]
 800c8ea:	603b      	str	r3, [r7, #0]
 800c8ec:	4613      	mov	r3, r2
 800c8ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c8f0:	e04f      	b.n	800c992 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c8f2:	69bb      	ldr	r3, [r7, #24]
 800c8f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8f8:	d04b      	beq.n	800c992 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c8fa:	f7f6 feab 	bl	8003654 <HAL_GetTick>
 800c8fe:	4602      	mov	r2, r0
 800c900:	683b      	ldr	r3, [r7, #0]
 800c902:	1ad3      	subs	r3, r2, r3
 800c904:	69ba      	ldr	r2, [r7, #24]
 800c906:	429a      	cmp	r2, r3
 800c908:	d302      	bcc.n	800c910 <UART_WaitOnFlagUntilTimeout+0x30>
 800c90a:	69bb      	ldr	r3, [r7, #24]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d101      	bne.n	800c914 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c910:	2303      	movs	r3, #3
 800c912:	e04e      	b.n	800c9b2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	f003 0304 	and.w	r3, r3, #4
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d037      	beq.n	800c992 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c922:	68bb      	ldr	r3, [r7, #8]
 800c924:	2b80      	cmp	r3, #128	@ 0x80
 800c926:	d034      	beq.n	800c992 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c928:	68bb      	ldr	r3, [r7, #8]
 800c92a:	2b40      	cmp	r3, #64	@ 0x40
 800c92c:	d031      	beq.n	800c992 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	69db      	ldr	r3, [r3, #28]
 800c934:	f003 0308 	and.w	r3, r3, #8
 800c938:	2b08      	cmp	r3, #8
 800c93a:	d110      	bne.n	800c95e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	2208      	movs	r2, #8
 800c942:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c944:	68f8      	ldr	r0, [r7, #12]
 800c946:	f000 f839 	bl	800c9bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	2208      	movs	r2, #8
 800c94e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	2200      	movs	r2, #0
 800c956:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c95a:	2301      	movs	r3, #1
 800c95c:	e029      	b.n	800c9b2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	69db      	ldr	r3, [r3, #28]
 800c964:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c968:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c96c:	d111      	bne.n	800c992 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c976:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c978:	68f8      	ldr	r0, [r7, #12]
 800c97a:	f000 f81f 	bl	800c9bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	2220      	movs	r2, #32
 800c982:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	2200      	movs	r2, #0
 800c98a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c98e:	2303      	movs	r3, #3
 800c990:	e00f      	b.n	800c9b2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	69da      	ldr	r2, [r3, #28]
 800c998:	68bb      	ldr	r3, [r7, #8]
 800c99a:	4013      	ands	r3, r2
 800c99c:	68ba      	ldr	r2, [r7, #8]
 800c99e:	429a      	cmp	r2, r3
 800c9a0:	bf0c      	ite	eq
 800c9a2:	2301      	moveq	r3, #1
 800c9a4:	2300      	movne	r3, #0
 800c9a6:	b2db      	uxtb	r3, r3
 800c9a8:	461a      	mov	r2, r3
 800c9aa:	79fb      	ldrb	r3, [r7, #7]
 800c9ac:	429a      	cmp	r2, r3
 800c9ae:	d0a0      	beq.n	800c8f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c9b0:	2300      	movs	r3, #0
}
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	3710      	adds	r7, #16
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	bd80      	pop	{r7, pc}
	...

0800c9bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c9bc:	b480      	push	{r7}
 800c9be:	b095      	sub	sp, #84	@ 0x54
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9cc:	e853 3f00 	ldrex	r3, [r3]
 800c9d0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c9d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c9d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	461a      	mov	r2, r3
 800c9e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c9e2:	643b      	str	r3, [r7, #64]	@ 0x40
 800c9e4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9e6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c9e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c9ea:	e841 2300 	strex	r3, r2, [r1]
 800c9ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c9f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d1e6      	bne.n	800c9c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	3308      	adds	r3, #8
 800c9fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9fe:	6a3b      	ldr	r3, [r7, #32]
 800ca00:	e853 3f00 	ldrex	r3, [r3]
 800ca04:	61fb      	str	r3, [r7, #28]
   return(result);
 800ca06:	69fa      	ldr	r2, [r7, #28]
 800ca08:	4b1e      	ldr	r3, [pc, #120]	@ (800ca84 <UART_EndRxTransfer+0xc8>)
 800ca0a:	4013      	ands	r3, r2
 800ca0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	3308      	adds	r3, #8
 800ca14:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ca16:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ca18:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca1a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ca1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ca1e:	e841 2300 	strex	r3, r2, [r1]
 800ca22:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ca24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d1e5      	bne.n	800c9f6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ca2e:	2b01      	cmp	r3, #1
 800ca30:	d118      	bne.n	800ca64 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	e853 3f00 	ldrex	r3, [r3]
 800ca3e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ca40:	68bb      	ldr	r3, [r7, #8]
 800ca42:	f023 0310 	bic.w	r3, r3, #16
 800ca46:	647b      	str	r3, [r7, #68]	@ 0x44
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	461a      	mov	r2, r3
 800ca4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ca50:	61bb      	str	r3, [r7, #24]
 800ca52:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca54:	6979      	ldr	r1, [r7, #20]
 800ca56:	69ba      	ldr	r2, [r7, #24]
 800ca58:	e841 2300 	strex	r3, r2, [r1]
 800ca5c:	613b      	str	r3, [r7, #16]
   return(result);
 800ca5e:	693b      	ldr	r3, [r7, #16]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d1e6      	bne.n	800ca32 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	2220      	movs	r2, #32
 800ca68:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	2200      	movs	r2, #0
 800ca70:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	2200      	movs	r2, #0
 800ca76:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ca78:	bf00      	nop
 800ca7a:	3754      	adds	r7, #84	@ 0x54
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca82:	4770      	bx	lr
 800ca84:	effffffe 	.word	0xeffffffe

0800ca88 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ca88:	b480      	push	{r7}
 800ca8a:	b085      	sub	sp, #20
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ca96:	2b01      	cmp	r3, #1
 800ca98:	d101      	bne.n	800ca9e <HAL_UARTEx_DisableFifoMode+0x16>
 800ca9a:	2302      	movs	r3, #2
 800ca9c:	e027      	b.n	800caee <HAL_UARTEx_DisableFifoMode+0x66>
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	2201      	movs	r2, #1
 800caa2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	2224      	movs	r2, #36	@ 0x24
 800caaa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	681a      	ldr	r2, [r3, #0]
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	f022 0201 	bic.w	r2, r2, #1
 800cac4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800cacc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	2200      	movs	r2, #0
 800cad2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	68fa      	ldr	r2, [r7, #12]
 800cada:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	2220      	movs	r2, #32
 800cae0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	2200      	movs	r2, #0
 800cae8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800caec:	2300      	movs	r3, #0
}
 800caee:	4618      	mov	r0, r3
 800caf0:	3714      	adds	r7, #20
 800caf2:	46bd      	mov	sp, r7
 800caf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf8:	4770      	bx	lr

0800cafa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cafa:	b580      	push	{r7, lr}
 800cafc:	b084      	sub	sp, #16
 800cafe:	af00      	add	r7, sp, #0
 800cb00:	6078      	str	r0, [r7, #4]
 800cb02:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cb0a:	2b01      	cmp	r3, #1
 800cb0c:	d101      	bne.n	800cb12 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cb0e:	2302      	movs	r3, #2
 800cb10:	e02d      	b.n	800cb6e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	2201      	movs	r2, #1
 800cb16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	2224      	movs	r2, #36	@ 0x24
 800cb1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	681a      	ldr	r2, [r3, #0]
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	f022 0201 	bic.w	r2, r2, #1
 800cb38:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	689b      	ldr	r3, [r3, #8]
 800cb40:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	683a      	ldr	r2, [r7, #0]
 800cb4a:	430a      	orrs	r2, r1
 800cb4c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cb4e:	6878      	ldr	r0, [r7, #4]
 800cb50:	f000 f850 	bl	800cbf4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	68fa      	ldr	r2, [r7, #12]
 800cb5a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	2220      	movs	r2, #32
 800cb60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	2200      	movs	r2, #0
 800cb68:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cb6c:	2300      	movs	r3, #0
}
 800cb6e:	4618      	mov	r0, r3
 800cb70:	3710      	adds	r7, #16
 800cb72:	46bd      	mov	sp, r7
 800cb74:	bd80      	pop	{r7, pc}

0800cb76 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cb76:	b580      	push	{r7, lr}
 800cb78:	b084      	sub	sp, #16
 800cb7a:	af00      	add	r7, sp, #0
 800cb7c:	6078      	str	r0, [r7, #4]
 800cb7e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cb86:	2b01      	cmp	r3, #1
 800cb88:	d101      	bne.n	800cb8e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cb8a:	2302      	movs	r3, #2
 800cb8c:	e02d      	b.n	800cbea <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	2201      	movs	r2, #1
 800cb92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	2224      	movs	r2, #36	@ 0x24
 800cb9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	681a      	ldr	r2, [r3, #0]
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	f022 0201 	bic.w	r2, r2, #1
 800cbb4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	689b      	ldr	r3, [r3, #8]
 800cbbc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	683a      	ldr	r2, [r7, #0]
 800cbc6:	430a      	orrs	r2, r1
 800cbc8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cbca:	6878      	ldr	r0, [r7, #4]
 800cbcc:	f000 f812 	bl	800cbf4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	68fa      	ldr	r2, [r7, #12]
 800cbd6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	2220      	movs	r2, #32
 800cbdc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cbe8:	2300      	movs	r3, #0
}
 800cbea:	4618      	mov	r0, r3
 800cbec:	3710      	adds	r7, #16
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	bd80      	pop	{r7, pc}
	...

0800cbf4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cbf4:	b480      	push	{r7}
 800cbf6:	b085      	sub	sp, #20
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d108      	bne.n	800cc16 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	2201      	movs	r2, #1
 800cc08:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	2201      	movs	r2, #1
 800cc10:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cc14:	e031      	b.n	800cc7a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cc16:	2310      	movs	r3, #16
 800cc18:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cc1a:	2310      	movs	r3, #16
 800cc1c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	689b      	ldr	r3, [r3, #8]
 800cc24:	0e5b      	lsrs	r3, r3, #25
 800cc26:	b2db      	uxtb	r3, r3
 800cc28:	f003 0307 	and.w	r3, r3, #7
 800cc2c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	689b      	ldr	r3, [r3, #8]
 800cc34:	0f5b      	lsrs	r3, r3, #29
 800cc36:	b2db      	uxtb	r3, r3
 800cc38:	f003 0307 	and.w	r3, r3, #7
 800cc3c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cc3e:	7bbb      	ldrb	r3, [r7, #14]
 800cc40:	7b3a      	ldrb	r2, [r7, #12]
 800cc42:	4911      	ldr	r1, [pc, #68]	@ (800cc88 <UARTEx_SetNbDataToProcess+0x94>)
 800cc44:	5c8a      	ldrb	r2, [r1, r2]
 800cc46:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cc4a:	7b3a      	ldrb	r2, [r7, #12]
 800cc4c:	490f      	ldr	r1, [pc, #60]	@ (800cc8c <UARTEx_SetNbDataToProcess+0x98>)
 800cc4e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cc50:	fb93 f3f2 	sdiv	r3, r3, r2
 800cc54:	b29a      	uxth	r2, r3
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cc5c:	7bfb      	ldrb	r3, [r7, #15]
 800cc5e:	7b7a      	ldrb	r2, [r7, #13]
 800cc60:	4909      	ldr	r1, [pc, #36]	@ (800cc88 <UARTEx_SetNbDataToProcess+0x94>)
 800cc62:	5c8a      	ldrb	r2, [r1, r2]
 800cc64:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cc68:	7b7a      	ldrb	r2, [r7, #13]
 800cc6a:	4908      	ldr	r1, [pc, #32]	@ (800cc8c <UARTEx_SetNbDataToProcess+0x98>)
 800cc6c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cc6e:	fb93 f3f2 	sdiv	r3, r3, r2
 800cc72:	b29a      	uxth	r2, r3
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800cc7a:	bf00      	nop
 800cc7c:	3714      	adds	r7, #20
 800cc7e:	46bd      	mov	sp, r7
 800cc80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc84:	4770      	bx	lr
 800cc86:	bf00      	nop
 800cc88:	0800d120 	.word	0x0800d120
 800cc8c:	0800d128 	.word	0x0800d128

0800cc90 <arm_fir_q15>:
 800cc90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc94:	b09b      	sub	sp, #108	@ 0x6c
 800cc96:	4605      	mov	r5, r0
 800cc98:	f06f 4e00 	mvn.w	lr, #2147483648	@ 0x80000000
 800cc9c:	9017      	str	r0, [sp, #92]	@ 0x5c
 800cc9e:	8800      	ldrh	r0, [r0, #0]
 800cca0:	686e      	ldr	r6, [r5, #4]
 800cca2:	4486      	add	lr, r0
 800cca4:	68af      	ldr	r7, [r5, #8]
 800cca6:	9318      	str	r3, [sp, #96]	@ 0x60
 800cca8:	089b      	lsrs	r3, r3, #2
 800ccaa:	eb06 054e 	add.w	r5, r6, lr, lsl #1
 800ccae:	9114      	str	r1, [sp, #80]	@ 0x50
 800ccb0:	9611      	str	r6, [sp, #68]	@ 0x44
 800ccb2:	970f      	str	r7, [sp, #60]	@ 0x3c
 800ccb4:	9513      	str	r5, [sp, #76]	@ 0x4c
 800ccb6:	9319      	str	r3, [sp, #100]	@ 0x64
 800ccb8:	e9cd 2015 	strd	r2, r0, [sp, #84]	@ 0x54
 800ccbc:	f000 80f5 	beq.w	800ceaa <arm_fir_q15+0x21a>
 800ccc0:	4634      	mov	r4, r6
 800ccc2:	0886      	lsrs	r6, r0, #2
 800ccc4:	4694      	mov	ip, r2
 800ccc6:	f000 0003 	and.w	r0, r0, #3
 800ccca:	1c72      	adds	r2, r6, #1
 800cccc:	3108      	adds	r1, #8
 800ccce:	9010      	str	r0, [sp, #64]	@ 0x40
 800ccd0:	4620      	mov	r0, r4
 800ccd2:	00d2      	lsls	r2, r2, #3
 800ccd4:	9108      	str	r1, [sp, #32]
 800ccd6:	f105 0108 	add.w	r1, r5, #8
 800ccda:	960e      	str	r6, [sp, #56]	@ 0x38
 800ccdc:	e9cd c30a 	strd	ip, r3, [sp, #40]	@ 0x28
 800cce0:	f1a2 0308 	sub.w	r3, r2, #8
 800cce4:	18a2      	adds	r2, r4, r2
 800cce6:	9109      	str	r1, [sp, #36]	@ 0x24
 800cce8:	18fb      	adds	r3, r7, r3
 800ccea:	9205      	str	r2, [sp, #20]
 800ccec:	9312      	str	r3, [sp, #72]	@ 0x48
 800ccee:	9a08      	ldr	r2, [sp, #32]
 800ccf0:	f100 0508 	add.w	r5, r0, #8
 800ccf4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ccf6:	f932 3c08 	ldrsh.w	r3, [r2, #-8]
 800ccfa:	46a9      	mov	r9, r5
 800ccfc:	950c      	str	r5, [sp, #48]	@ 0x30
 800ccfe:	f821 3c08 	strh.w	r3, [r1, #-8]
 800cd02:	f932 3c06 	ldrsh.w	r3, [r2, #-6]
 800cd06:	f821 3c06 	strh.w	r3, [r1, #-6]
 800cd0a:	f932 3c04 	ldrsh.w	r3, [r2, #-4]
 800cd0e:	f821 3c04 	strh.w	r3, [r1, #-4]
 800cd12:	f932 3c02 	ldrsh.w	r3, [r2, #-2]
 800cd16:	f821 3c02 	strh.w	r3, [r1, #-2]
 800cd1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cd1c:	f8d0 c000 	ldr.w	ip, [r0]
 800cd20:	f8d0 e004 	ldr.w	lr, [r0, #4]
 800cd24:	4664      	mov	r4, ip
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	f000 8140 	beq.w	800cfac <arm_fir_q15+0x31c>
 800cd2c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800cd2e:	2300      	movs	r3, #0
 800cd30:	f8cd 9008 	str.w	r9, [sp, #8]
 800cd34:	fa1f f88e 	uxth.w	r8, lr
 800cd38:	9201      	str	r2, [sp, #4]
 800cd3a:	469b      	mov	fp, r3
 800cd3c:	9a05      	ldr	r2, [sp, #20]
 800cd3e:	461d      	mov	r5, r3
 800cd40:	461f      	mov	r7, r3
 800cd42:	4699      	mov	r9, r3
 800cd44:	920d      	str	r2, [sp, #52]	@ 0x34
 800cd46:	461a      	mov	r2, r3
 800cd48:	9303      	str	r3, [sp, #12]
 800cd4a:	9304      	str	r3, [sp, #16]
 800cd4c:	9901      	ldr	r1, [sp, #4]
 800cd4e:	9804      	ldr	r0, [sp, #16]
 800cd50:	680e      	ldr	r6, [r1, #0]
 800cd52:	fbcc 70c6 	smlald	r7, r0, ip, r6
 800cd56:	9903      	ldr	r1, [sp, #12]
 800cd58:	fbce b1c6 	smlald	fp, r1, lr, r6
 800cd5c:	0c24      	lsrs	r4, r4, #16
 800cd5e:	4692      	mov	sl, r2
 800cd60:	9a02      	ldr	r2, [sp, #8]
 800cd62:	0424      	lsls	r4, r4, #16
 800cd64:	f8d2 c000 	ldr.w	ip, [r2]
 800cd68:	4652      	mov	r2, sl
 800cd6a:	ea48 0804 	orr.w	r8, r8, r4
 800cd6e:	fbc8 52d6 	smlaldx	r5, r2, r8, r6
 800cd72:	4ca2      	ldr	r4, [pc, #648]	@ (800cffc <arm_fir_q15+0x36c>)
 800cd74:	fa1f f88c 	uxth.w	r8, ip
 800cd78:	469a      	mov	sl, r3
 800cd7a:	9203      	str	r2, [sp, #12]
 800cd7c:	ea0e 0404 	and.w	r4, lr, r4
 800cd80:	ea48 0304 	orr.w	r3, r8, r4
 800cd84:	fbc3 a9d6 	smlaldx	sl, r9, r3, r6
 800cd88:	9e01      	ldr	r6, [sp, #4]
 800cd8a:	6874      	ldr	r4, [r6, #4]
 800cd8c:	3608      	adds	r6, #8
 800cd8e:	9601      	str	r6, [sp, #4]
 800cd90:	fbce 70c4 	smlald	r7, r0, lr, r4
 800cd94:	9006      	str	r0, [sp, #24]
 800cd96:	9004      	str	r0, [sp, #16]
 800cd98:	9802      	ldr	r0, [sp, #8]
 800cd9a:	4602      	mov	r2, r0
 800cd9c:	f8d0 e004 	ldr.w	lr, [r0, #4]
 800cda0:	3208      	adds	r2, #8
 800cda2:	4610      	mov	r0, r2
 800cda4:	9202      	str	r2, [sp, #8]
 800cda6:	fbcc b1c4 	smlald	fp, r1, ip, r4
 800cdaa:	9a03      	ldr	r2, [sp, #12]
 800cdac:	9103      	str	r1, [sp, #12]
 800cdae:	fbc3 52d4 	smlaldx	r5, r2, r3, r4
 800cdb2:	4b92      	ldr	r3, [pc, #584]	@ (800cffc <arm_fir_q15+0x36c>)
 800cdb4:	fa1f f88e 	uxth.w	r8, lr
 800cdb8:	9207      	str	r2, [sp, #28]
 800cdba:	ea0c 0303 	and.w	r3, ip, r3
 800cdbe:	461e      	mov	r6, r3
 800cdc0:	4653      	mov	r3, sl
 800cdc2:	46ca      	mov	sl, r9
 800cdc4:	ea48 0906 	orr.w	r9, r8, r6
 800cdc8:	fbc9 3ad4 	smlaldx	r3, sl, r9, r4
 800cdcc:	9e05      	ldr	r6, [sp, #20]
 800cdce:	4664      	mov	r4, ip
 800cdd0:	46d1      	mov	r9, sl
 800cdd2:	42b0      	cmp	r0, r6
 800cdd4:	d1ba      	bne.n	800cd4c <arm_fir_q15+0xbc>
 800cdd6:	46d0      	mov	r8, sl
 800cdd8:	9806      	ldr	r0, [sp, #24]
 800cdda:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 800cddc:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800cdde:	b31e      	cbz	r6, 800ce28 <arm_fir_q15+0x198>
 800cde0:	f8d4 8000 	ldr.w	r8, [r4]
 800cde4:	fbcc 70c8 	smlald	r7, r0, ip, r8
 800cde8:	9004      	str	r0, [sp, #16]
 800cdea:	465e      	mov	r6, fp
 800cdec:	fbce 61c8 	smlald	r6, r1, lr, r8
 800cdf0:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800cdf4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cdf6:	fa1f f08e 	uxth.w	r0, lr
 800cdfa:	9103      	str	r1, [sp, #12]
 800cdfc:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 800ce00:	6811      	ldr	r1, [r2, #0]
 800ce02:	46b3      	mov	fp, r6
 800ce04:	9a07      	ldr	r2, [sp, #28]
 800ce06:	ea40 0c0c 	orr.w	ip, r0, ip
 800ce0a:	fbcc 52d8 	smlaldx	r5, r2, ip, r8
 800ce0e:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 800ce12:	461c      	mov	r4, r3
 800ce14:	b289      	uxth	r1, r1
 800ce16:	4650      	mov	r0, sl
 800ce18:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
 800ce1c:	ea41 010e 	orr.w	r1, r1, lr
 800ce20:	fbc1 40d8 	smlaldx	r4, r0, r1, r8
 800ce24:	4623      	mov	r3, r4
 800ce26:	4680      	mov	r8, r0
 800ce28:	9908      	ldr	r1, [sp, #32]
 800ce2a:	0bff      	lsrs	r7, r7, #15
 800ce2c:	ea4f 36db 	mov.w	r6, fp, lsr #15
 800ce30:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800ce32:	3108      	adds	r1, #8
 800ce34:	0bdc      	lsrs	r4, r3, #15
 800ce36:	0bed      	lsrs	r5, r5, #15
 800ce38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce3a:	9108      	str	r1, [sp, #32]
 800ce3c:	ea44 4448 	orr.w	r4, r4, r8, lsl #17
 800ce40:	9904      	ldr	r1, [sp, #16]
 800ce42:	ea45 4542 	orr.w	r5, r5, r2, lsl #17
 800ce46:	f304 040f 	ssat	r4, #16, r4
 800ce4a:	ea47 4741 	orr.w	r7, r7, r1, lsl #17
 800ce4e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ce50:	f307 070f 	ssat	r7, #16, r7
 800ce54:	3108      	adds	r1, #8
 800ce56:	b2bf      	uxth	r7, r7
 800ce58:	f305 050f 	ssat	r5, #16, r5
 800ce5c:	9109      	str	r1, [sp, #36]	@ 0x24
 800ce5e:	ea47 4705 	orr.w	r7, r7, r5, lsl #16
 800ce62:	9903      	ldr	r1, [sp, #12]
 800ce64:	3308      	adds	r3, #8
 800ce66:	f843 7c08 	str.w	r7, [r3, #-8]
 800ce6a:	ea46 4641 	orr.w	r6, r6, r1, lsl #17
 800ce6e:	9905      	ldr	r1, [sp, #20]
 800ce70:	f306 060f 	ssat	r6, #16, r6
 800ce74:	b2b6      	uxth	r6, r6
 800ce76:	3108      	adds	r1, #8
 800ce78:	ea46 4604 	orr.w	r6, r6, r4, lsl #16
 800ce7c:	9105      	str	r1, [sp, #20]
 800ce7e:	f843 6c04 	str.w	r6, [r3, #-4]
 800ce82:	930a      	str	r3, [sp, #40]	@ 0x28
 800ce84:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ce86:	3b01      	subs	r3, #1
 800ce88:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ce8a:	f47f af30 	bne.w	800ccee <arm_fir_q15+0x5e>
 800ce8e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ce90:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800ce92:	00db      	lsls	r3, r3, #3
 800ce94:	441a      	add	r2, r3
 800ce96:	9214      	str	r2, [sp, #80]	@ 0x50
 800ce98:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ce9a:	441a      	add	r2, r3
 800ce9c:	9211      	str	r2, [sp, #68]	@ 0x44
 800ce9e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800cea0:	441a      	add	r2, r3
 800cea2:	9213      	str	r2, [sp, #76]	@ 0x4c
 800cea4:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800cea6:	441a      	add	r2, r3
 800cea8:	9215      	str	r2, [sp, #84]	@ 0x54
 800ceaa:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800ceac:	f013 0c03 	ands.w	ip, r3, #3
 800ceb0:	d03e      	beq.n	800cf30 <arm_fir_q15+0x2a0>
 800ceb2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ceb4:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800ceb8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ceba:	f1a3 0e02 	sub.w	lr, r3, #2
 800cebe:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800cec0:	f8cd c008 	str.w	ip, [sp, #8]
 800cec4:	1c96      	adds	r6, r2, #2
 800cec6:	085f      	lsrs	r7, r3, #1
 800cec8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ceca:	f8dd b054 	ldr.w	fp, [sp, #84]	@ 0x54
 800cece:	1c9c      	adds	r4, r3, #2
 800ced0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ced2:	eb03 080c 	add.w	r8, r3, ip
 800ced6:	4699      	mov	r9, r3
 800ced8:	4694      	mov	ip, r2
 800ceda:	f939 2b02 	ldrsh.w	r2, [r9], #2
 800cede:	1ea5      	subs	r5, r4, #2
 800cee0:	2300      	movs	r3, #0
 800cee2:	2000      	movs	r0, #0
 800cee4:	2100      	movs	r1, #0
 800cee6:	f82e 2f02 	strh.w	r2, [lr, #2]!
 800ceea:	f8cd e004 	str.w	lr, [sp, #4]
 800ceee:	f83c a023 	ldrh.w	sl, [ip, r3, lsl #2]
 800cef2:	f835 e023 	ldrh.w	lr, [r5, r3, lsl #2]
 800cef6:	f834 2023 	ldrh.w	r2, [r4, r3, lsl #2]
 800cefa:	fbce 018a 	smlalbb	r0, r1, lr, sl
 800cefe:	f836 a023 	ldrh.w	sl, [r6, r3, lsl #2]
 800cf02:	3301      	adds	r3, #1
 800cf04:	fbc2 018a 	smlalbb	r0, r1, r2, sl
 800cf08:	429f      	cmp	r7, r3
 800cf0a:	d1f0      	bne.n	800ceee <arm_fir_q15+0x25e>
 800cf0c:	0bc3      	lsrs	r3, r0, #15
 800cf0e:	45c1      	cmp	r9, r8
 800cf10:	f8dd e004 	ldr.w	lr, [sp, #4]
 800cf14:	f104 0402 	add.w	r4, r4, #2
 800cf18:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 800cf1c:	f303 030f 	ssat	r3, #16, r3
 800cf20:	f82b 3b02 	strh.w	r3, [fp], #2
 800cf24:	d1d9      	bne.n	800ceda <arm_fir_q15+0x24a>
 800cf26:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cf28:	f8dd c008 	ldr.w	ip, [sp, #8]
 800cf2c:	4463      	add	r3, ip
 800cf2e:	9311      	str	r3, [sp, #68]	@ 0x44
 800cf30:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800cf32:	1e5f      	subs	r7, r3, #1
 800cf34:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cf36:	08be      	lsrs	r6, r7, #2
 800cf38:	f8d3 c004 	ldr.w	ip, [r3, #4]
 800cf3c:	d01f      	beq.n	800cf7e <arm_fir_q15+0x2ee>
 800cf3e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800cf40:	f10c 0208 	add.w	r2, ip, #8
 800cf44:	4603      	mov	r3, r0
 800cf46:	3308      	adds	r3, #8
 800cf48:	4290      	cmp	r0, r2
 800cf4a:	bf38      	it	cc
 800cf4c:	459c      	cmpcc	ip, r3
 800cf4e:	d33d      	bcc.n	800cfcc <arm_fir_q15+0x33c>
 800cf50:	1e71      	subs	r1, r6, #1
 800cf52:	2901      	cmp	r1, #1
 800cf54:	d93a      	bls.n	800cfcc <arm_fir_q15+0x33c>
 800cf56:	4663      	mov	r3, ip
 800cf58:	1d01      	adds	r1, r0, #4
 800cf5a:	2200      	movs	r2, #0
 800cf5c:	3201      	adds	r2, #1
 800cf5e:	f850 5b08 	ldr.w	r5, [r0], #8
 800cf62:	f851 4b08 	ldr.w	r4, [r1], #8
 800cf66:	3308      	adds	r3, #8
 800cf68:	4296      	cmp	r6, r2
 800cf6a:	f843 5c08 	str.w	r5, [r3, #-8]
 800cf6e:	f843 4c04 	str.w	r4, [r3, #-4]
 800cf72:	d1f3      	bne.n	800cf5c <arm_fir_q15+0x2cc>
 800cf74:	00f6      	lsls	r6, r6, #3
 800cf76:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cf78:	44b4      	add	ip, r6
 800cf7a:	4433      	add	r3, r6
 800cf7c:	9311      	str	r3, [sp, #68]	@ 0x44
 800cf7e:	f017 0703 	ands.w	r7, r7, #3
 800cf82:	d010      	beq.n	800cfa6 <arm_fir_q15+0x316>
 800cf84:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800cf86:	3f01      	subs	r7, #1
 800cf88:	f9b2 3000 	ldrsh.w	r3, [r2]
 800cf8c:	f8ac 3000 	strh.w	r3, [ip]
 800cf90:	d009      	beq.n	800cfa6 <arm_fir_q15+0x316>
 800cf92:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 800cf96:	2f01      	cmp	r7, #1
 800cf98:	f8ac 3002 	strh.w	r3, [ip, #2]
 800cf9c:	d003      	beq.n	800cfa6 <arm_fir_q15+0x316>
 800cf9e:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 800cfa2:	f8ac 3004 	strh.w	r3, [ip, #4]
 800cfa6:	b01b      	add	sp, #108	@ 0x6c
 800cfa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfac:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 800cfae:	950d      	str	r5, [sp, #52]	@ 0x34
 800cfb0:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 800cfb2:	46b2      	mov	sl, r6
 800cfb4:	4633      	mov	r3, r6
 800cfb6:	9607      	str	r6, [sp, #28]
 800cfb8:	4631      	mov	r1, r6
 800cfba:	4630      	mov	r0, r6
 800cfbc:	4632      	mov	r2, r6
 800cfbe:	46b0      	mov	r8, r6
 800cfc0:	46b3      	mov	fp, r6
 800cfc2:	9603      	str	r6, [sp, #12]
 800cfc4:	4635      	mov	r5, r6
 800cfc6:	4637      	mov	r7, r6
 800cfc8:	9604      	str	r6, [sp, #16]
 800cfca:	e707      	b.n	800cddc <arm_fir_q15+0x14c>
 800cfcc:	4631      	mov	r1, r6
 800cfce:	f933 0c08 	ldrsh.w	r0, [r3, #-8]
 800cfd2:	3901      	subs	r1, #1
 800cfd4:	f103 0308 	add.w	r3, r3, #8
 800cfd8:	f102 0208 	add.w	r2, r2, #8
 800cfdc:	f822 0c10 	strh.w	r0, [r2, #-16]
 800cfe0:	f933 0c0e 	ldrsh.w	r0, [r3, #-14]
 800cfe4:	f822 0c0e 	strh.w	r0, [r2, #-14]
 800cfe8:	f933 0c0c 	ldrsh.w	r0, [r3, #-12]
 800cfec:	f822 0c0c 	strh.w	r0, [r2, #-12]
 800cff0:	f933 0c0a 	ldrsh.w	r0, [r3, #-10]
 800cff4:	f822 0c0a 	strh.w	r0, [r2, #-10]
 800cff8:	d1e9      	bne.n	800cfce <arm_fir_q15+0x33e>
 800cffa:	e7bb      	b.n	800cf74 <arm_fir_q15+0x2e4>
 800cffc:	ffff0000 	.word	0xffff0000

0800d000 <arm_fir_init_q15>:
 800d000:	b538      	push	{r3, r4, r5, lr}
 800d002:	f011 0501 	ands.w	r5, r1, #1
 800d006:	d10c      	bne.n	800d022 <arm_fir_init_q15+0x22>
 800d008:	4604      	mov	r4, r0
 800d00a:	9804      	ldr	r0, [sp, #16]
 800d00c:	1808      	adds	r0, r1, r0
 800d00e:	8021      	strh	r1, [r4, #0]
 800d010:	60a2      	str	r2, [r4, #8]
 800d012:	4629      	mov	r1, r5
 800d014:	0042      	lsls	r2, r0, #1
 800d016:	4618      	mov	r0, r3
 800d018:	f000 f806 	bl	800d028 <memset>
 800d01c:	6060      	str	r0, [r4, #4]
 800d01e:	4628      	mov	r0, r5
 800d020:	bd38      	pop	{r3, r4, r5, pc}
 800d022:	f04f 30ff 	mov.w	r0, #4294967295
 800d026:	bd38      	pop	{r3, r4, r5, pc}

0800d028 <memset>:
 800d028:	4402      	add	r2, r0
 800d02a:	4603      	mov	r3, r0
 800d02c:	4293      	cmp	r3, r2
 800d02e:	d100      	bne.n	800d032 <memset+0xa>
 800d030:	4770      	bx	lr
 800d032:	f803 1b01 	strb.w	r1, [r3], #1
 800d036:	e7f9      	b.n	800d02c <memset+0x4>

0800d038 <__libc_init_array>:
 800d038:	b570      	push	{r4, r5, r6, lr}
 800d03a:	4d0d      	ldr	r5, [pc, #52]	@ (800d070 <__libc_init_array+0x38>)
 800d03c:	4c0d      	ldr	r4, [pc, #52]	@ (800d074 <__libc_init_array+0x3c>)
 800d03e:	1b64      	subs	r4, r4, r5
 800d040:	10a4      	asrs	r4, r4, #2
 800d042:	2600      	movs	r6, #0
 800d044:	42a6      	cmp	r6, r4
 800d046:	d109      	bne.n	800d05c <__libc_init_array+0x24>
 800d048:	4d0b      	ldr	r5, [pc, #44]	@ (800d078 <__libc_init_array+0x40>)
 800d04a:	4c0c      	ldr	r4, [pc, #48]	@ (800d07c <__libc_init_array+0x44>)
 800d04c:	f000 f818 	bl	800d080 <_init>
 800d050:	1b64      	subs	r4, r4, r5
 800d052:	10a4      	asrs	r4, r4, #2
 800d054:	2600      	movs	r6, #0
 800d056:	42a6      	cmp	r6, r4
 800d058:	d105      	bne.n	800d066 <__libc_init_array+0x2e>
 800d05a:	bd70      	pop	{r4, r5, r6, pc}
 800d05c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d060:	4798      	blx	r3
 800d062:	3601      	adds	r6, #1
 800d064:	e7ee      	b.n	800d044 <__libc_init_array+0xc>
 800d066:	f855 3b04 	ldr.w	r3, [r5], #4
 800d06a:	4798      	blx	r3
 800d06c:	3601      	adds	r6, #1
 800d06e:	e7f2      	b.n	800d056 <__libc_init_array+0x1e>
 800d070:	0800d138 	.word	0x0800d138
 800d074:	0800d138 	.word	0x0800d138
 800d078:	0800d138 	.word	0x0800d138
 800d07c:	0800d13c 	.word	0x0800d13c

0800d080 <_init>:
 800d080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d082:	bf00      	nop
 800d084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d086:	bc08      	pop	{r3}
 800d088:	469e      	mov	lr, r3
 800d08a:	4770      	bx	lr

0800d08c <_fini>:
 800d08c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d08e:	bf00      	nop
 800d090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d092:	bc08      	pop	{r3}
 800d094:	469e      	mov	lr, r3
 800d096:	4770      	bx	lr
