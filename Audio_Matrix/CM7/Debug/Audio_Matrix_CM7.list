
Audio_Matrix_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cbe4  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  0800ce7c  0800ce7c  0000de7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ced8  0800ced8  0000e020  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ced8  0800ced8  0000ded8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cee0  0800cee0  0000e020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cee0  0800cee0  0000dee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cee4  0800cee4  0000dee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  24000000  0800cee8  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f10  24000020  0800cf08  0000e020  2**3
                  ALLOC
 10 .audiobuffer  00000800  20000000  20000000  0000f000  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  24000f30  24000f30  0000ef30  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0000e020  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bc31  00000000  00000000  0000e04e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000349d  00000000  00000000  00029c7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001370  00000000  00000000  0002d120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f35  00000000  00000000  0002e490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003bd29  00000000  00000000  0002f3c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e038  00000000  00000000  0006b0ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001837c8  00000000  00000000  00089126  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0020c8ee  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000051c8  00000000  00000000  0020c934  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  00211afc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000020 	.word	0x24000020
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800ce64 	.word	0x0800ce64

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000024 	.word	0x24000024
 80002d4:	0800ce64 	.word	0x0800ce64

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b988 	b.w	8000600 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	468e      	mov	lr, r1
 8000310:	4604      	mov	r4, r0
 8000312:	4688      	mov	r8, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d962      	bls.n	80003e4 <__udivmoddi4+0xdc>
 800031e:	fab2 f682 	clz	r6, r2
 8000322:	b14e      	cbz	r6, 8000338 <__udivmoddi4+0x30>
 8000324:	f1c6 0320 	rsb	r3, r6, #32
 8000328:	fa01 f806 	lsl.w	r8, r1, r6
 800032c:	fa20 f303 	lsr.w	r3, r0, r3
 8000330:	40b7      	lsls	r7, r6
 8000332:	ea43 0808 	orr.w	r8, r3, r8
 8000336:	40b4      	lsls	r4, r6
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	fbb8 f1fe 	udiv	r1, r8, lr
 8000344:	0c23      	lsrs	r3, r4, #16
 8000346:	fb0e 8811 	mls	r8, lr, r1, r8
 800034a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034e:	fb01 f20c 	mul.w	r2, r1, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d909      	bls.n	800036a <__udivmoddi4+0x62>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f101 30ff 	add.w	r0, r1, #4294967295
 800035c:	f080 80ea 	bcs.w	8000534 <__udivmoddi4+0x22c>
 8000360:	429a      	cmp	r2, r3
 8000362:	f240 80e7 	bls.w	8000534 <__udivmoddi4+0x22c>
 8000366:	3902      	subs	r1, #2
 8000368:	443b      	add	r3, r7
 800036a:	1a9a      	subs	r2, r3, r2
 800036c:	b2a3      	uxth	r3, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800037a:	fb00 fc0c 	mul.w	ip, r0, ip
 800037e:	459c      	cmp	ip, r3
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x8e>
 8000382:	18fb      	adds	r3, r7, r3
 8000384:	f100 32ff 	add.w	r2, r0, #4294967295
 8000388:	f080 80d6 	bcs.w	8000538 <__udivmoddi4+0x230>
 800038c:	459c      	cmp	ip, r3
 800038e:	f240 80d3 	bls.w	8000538 <__udivmoddi4+0x230>
 8000392:	443b      	add	r3, r7
 8000394:	3802      	subs	r0, #2
 8000396:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039a:	eba3 030c 	sub.w	r3, r3, ip
 800039e:	2100      	movs	r1, #0
 80003a0:	b11d      	cbz	r5, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40f3      	lsrs	r3, r6
 80003a4:	2200      	movs	r2, #0
 80003a6:	e9c5 3200 	strd	r3, r2, [r5]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d905      	bls.n	80003be <__udivmoddi4+0xb6>
 80003b2:	b10d      	cbz	r5, 80003b8 <__udivmoddi4+0xb0>
 80003b4:	e9c5 0100 	strd	r0, r1, [r5]
 80003b8:	2100      	movs	r1, #0
 80003ba:	4608      	mov	r0, r1
 80003bc:	e7f5      	b.n	80003aa <__udivmoddi4+0xa2>
 80003be:	fab3 f183 	clz	r1, r3
 80003c2:	2900      	cmp	r1, #0
 80003c4:	d146      	bne.n	8000454 <__udivmoddi4+0x14c>
 80003c6:	4573      	cmp	r3, lr
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0xc8>
 80003ca:	4282      	cmp	r2, r0
 80003cc:	f200 8105 	bhi.w	80005da <__udivmoddi4+0x2d2>
 80003d0:	1a84      	subs	r4, r0, r2
 80003d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	4690      	mov	r8, r2
 80003da:	2d00      	cmp	r5, #0
 80003dc:	d0e5      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003de:	e9c5 4800 	strd	r4, r8, [r5]
 80003e2:	e7e2      	b.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	2a00      	cmp	r2, #0
 80003e6:	f000 8090 	beq.w	800050a <__udivmoddi4+0x202>
 80003ea:	fab2 f682 	clz	r6, r2
 80003ee:	2e00      	cmp	r6, #0
 80003f0:	f040 80a4 	bne.w	800053c <__udivmoddi4+0x234>
 80003f4:	1a8a      	subs	r2, r1, r2
 80003f6:	0c03      	lsrs	r3, r0, #16
 80003f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fc:	b280      	uxth	r0, r0
 80003fe:	b2bc      	uxth	r4, r7
 8000400:	2101      	movs	r1, #1
 8000402:	fbb2 fcfe 	udiv	ip, r2, lr
 8000406:	fb0e 221c 	mls	r2, lr, ip, r2
 800040a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800040e:	fb04 f20c 	mul.w	r2, r4, ip
 8000412:	429a      	cmp	r2, r3
 8000414:	d907      	bls.n	8000426 <__udivmoddi4+0x11e>
 8000416:	18fb      	adds	r3, r7, r3
 8000418:	f10c 38ff 	add.w	r8, ip, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x11c>
 800041e:	429a      	cmp	r2, r3
 8000420:	f200 80e0 	bhi.w	80005e4 <__udivmoddi4+0x2dc>
 8000424:	46c4      	mov	ip, r8
 8000426:	1a9b      	subs	r3, r3, r2
 8000428:	fbb3 f2fe 	udiv	r2, r3, lr
 800042c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000430:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000434:	fb02 f404 	mul.w	r4, r2, r4
 8000438:	429c      	cmp	r4, r3
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x144>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x142>
 8000444:	429c      	cmp	r4, r3
 8000446:	f200 80ca 	bhi.w	80005de <__udivmoddi4+0x2d6>
 800044a:	4602      	mov	r2, r0
 800044c:	1b1b      	subs	r3, r3, r4
 800044e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000452:	e7a5      	b.n	80003a0 <__udivmoddi4+0x98>
 8000454:	f1c1 0620 	rsb	r6, r1, #32
 8000458:	408b      	lsls	r3, r1
 800045a:	fa22 f706 	lsr.w	r7, r2, r6
 800045e:	431f      	orrs	r7, r3
 8000460:	fa0e f401 	lsl.w	r4, lr, r1
 8000464:	fa20 f306 	lsr.w	r3, r0, r6
 8000468:	fa2e fe06 	lsr.w	lr, lr, r6
 800046c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000470:	4323      	orrs	r3, r4
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	fa1f fc87 	uxth.w	ip, r7
 800047a:	fbbe f0f9 	udiv	r0, lr, r9
 800047e:	0c1c      	lsrs	r4, r3, #16
 8000480:	fb09 ee10 	mls	lr, r9, r0, lr
 8000484:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000488:	fb00 fe0c 	mul.w	lr, r0, ip
 800048c:	45a6      	cmp	lr, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	d909      	bls.n	80004a8 <__udivmoddi4+0x1a0>
 8000494:	193c      	adds	r4, r7, r4
 8000496:	f100 3aff 	add.w	sl, r0, #4294967295
 800049a:	f080 809c 	bcs.w	80005d6 <__udivmoddi4+0x2ce>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f240 8099 	bls.w	80005d6 <__udivmoddi4+0x2ce>
 80004a4:	3802      	subs	r0, #2
 80004a6:	443c      	add	r4, r7
 80004a8:	eba4 040e 	sub.w	r4, r4, lr
 80004ac:	fa1f fe83 	uxth.w	lr, r3
 80004b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b4:	fb09 4413 	mls	r4, r9, r3, r4
 80004b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c0:	45a4      	cmp	ip, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x1ce>
 80004c4:	193c      	adds	r4, r7, r4
 80004c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80004ca:	f080 8082 	bcs.w	80005d2 <__udivmoddi4+0x2ca>
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d97f      	bls.n	80005d2 <__udivmoddi4+0x2ca>
 80004d2:	3b02      	subs	r3, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	fba0 ec02 	umull	lr, ip, r0, r2
 80004e2:	4564      	cmp	r4, ip
 80004e4:	4673      	mov	r3, lr
 80004e6:	46e1      	mov	r9, ip
 80004e8:	d362      	bcc.n	80005b0 <__udivmoddi4+0x2a8>
 80004ea:	d05f      	beq.n	80005ac <__udivmoddi4+0x2a4>
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x1fe>
 80004ee:	ebb8 0203 	subs.w	r2, r8, r3
 80004f2:	eb64 0409 	sbc.w	r4, r4, r9
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	fa22 f301 	lsr.w	r3, r2, r1
 80004fe:	431e      	orrs	r6, r3
 8000500:	40cc      	lsrs	r4, r1
 8000502:	e9c5 6400 	strd	r6, r4, [r5]
 8000506:	2100      	movs	r1, #0
 8000508:	e74f      	b.n	80003aa <__udivmoddi4+0xa2>
 800050a:	fbb1 fcf2 	udiv	ip, r1, r2
 800050e:	0c01      	lsrs	r1, r0, #16
 8000510:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000514:	b280      	uxth	r0, r0
 8000516:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800051a:	463b      	mov	r3, r7
 800051c:	4638      	mov	r0, r7
 800051e:	463c      	mov	r4, r7
 8000520:	46b8      	mov	r8, r7
 8000522:	46be      	mov	lr, r7
 8000524:	2620      	movs	r6, #32
 8000526:	fbb1 f1f7 	udiv	r1, r1, r7
 800052a:	eba2 0208 	sub.w	r2, r2, r8
 800052e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000532:	e766      	b.n	8000402 <__udivmoddi4+0xfa>
 8000534:	4601      	mov	r1, r0
 8000536:	e718      	b.n	800036a <__udivmoddi4+0x62>
 8000538:	4610      	mov	r0, r2
 800053a:	e72c      	b.n	8000396 <__udivmoddi4+0x8e>
 800053c:	f1c6 0220 	rsb	r2, r6, #32
 8000540:	fa2e f302 	lsr.w	r3, lr, r2
 8000544:	40b7      	lsls	r7, r6
 8000546:	40b1      	lsls	r1, r6
 8000548:	fa20 f202 	lsr.w	r2, r0, r2
 800054c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000550:	430a      	orrs	r2, r1
 8000552:	fbb3 f8fe 	udiv	r8, r3, lr
 8000556:	b2bc      	uxth	r4, r7
 8000558:	fb0e 3318 	mls	r3, lr, r8, r3
 800055c:	0c11      	lsrs	r1, r2, #16
 800055e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000562:	fb08 f904 	mul.w	r9, r8, r4
 8000566:	40b0      	lsls	r0, r6
 8000568:	4589      	cmp	r9, r1
 800056a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800056e:	b280      	uxth	r0, r0
 8000570:	d93e      	bls.n	80005f0 <__udivmoddi4+0x2e8>
 8000572:	1879      	adds	r1, r7, r1
 8000574:	f108 3cff 	add.w	ip, r8, #4294967295
 8000578:	d201      	bcs.n	800057e <__udivmoddi4+0x276>
 800057a:	4589      	cmp	r9, r1
 800057c:	d81f      	bhi.n	80005be <__udivmoddi4+0x2b6>
 800057e:	eba1 0109 	sub.w	r1, r1, r9
 8000582:	fbb1 f9fe 	udiv	r9, r1, lr
 8000586:	fb09 f804 	mul.w	r8, r9, r4
 800058a:	fb0e 1119 	mls	r1, lr, r9, r1
 800058e:	b292      	uxth	r2, r2
 8000590:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000594:	4542      	cmp	r2, r8
 8000596:	d229      	bcs.n	80005ec <__udivmoddi4+0x2e4>
 8000598:	18ba      	adds	r2, r7, r2
 800059a:	f109 31ff 	add.w	r1, r9, #4294967295
 800059e:	d2c4      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a0:	4542      	cmp	r2, r8
 80005a2:	d2c2      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a4:	f1a9 0102 	sub.w	r1, r9, #2
 80005a8:	443a      	add	r2, r7
 80005aa:	e7be      	b.n	800052a <__udivmoddi4+0x222>
 80005ac:	45f0      	cmp	r8, lr
 80005ae:	d29d      	bcs.n	80004ec <__udivmoddi4+0x1e4>
 80005b0:	ebbe 0302 	subs.w	r3, lr, r2
 80005b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005b8:	3801      	subs	r0, #1
 80005ba:	46e1      	mov	r9, ip
 80005bc:	e796      	b.n	80004ec <__udivmoddi4+0x1e4>
 80005be:	eba7 0909 	sub.w	r9, r7, r9
 80005c2:	4449      	add	r1, r9
 80005c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80005c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80005cc:	fb09 f804 	mul.w	r8, r9, r4
 80005d0:	e7db      	b.n	800058a <__udivmoddi4+0x282>
 80005d2:	4673      	mov	r3, lr
 80005d4:	e77f      	b.n	80004d6 <__udivmoddi4+0x1ce>
 80005d6:	4650      	mov	r0, sl
 80005d8:	e766      	b.n	80004a8 <__udivmoddi4+0x1a0>
 80005da:	4608      	mov	r0, r1
 80005dc:	e6fd      	b.n	80003da <__udivmoddi4+0xd2>
 80005de:	443b      	add	r3, r7
 80005e0:	3a02      	subs	r2, #2
 80005e2:	e733      	b.n	800044c <__udivmoddi4+0x144>
 80005e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e8:	443b      	add	r3, r7
 80005ea:	e71c      	b.n	8000426 <__udivmoddi4+0x11e>
 80005ec:	4649      	mov	r1, r9
 80005ee:	e79c      	b.n	800052a <__udivmoddi4+0x222>
 80005f0:	eba1 0109 	sub.w	r1, r1, r9
 80005f4:	46c4      	mov	ip, r8
 80005f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80005fa:	fb09 f804 	mul.w	r8, r9, r4
 80005fe:	e7c4      	b.n	800058a <__udivmoddi4+0x282>

08000600 <__aeabi_idiv0>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000608:	4b49      	ldr	r3, [pc, #292]	@ (8000730 <SystemInit+0x12c>)
 800060a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800060e:	4a48      	ldr	r2, [pc, #288]	@ (8000730 <SystemInit+0x12c>)
 8000610:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000614:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000618:	4b45      	ldr	r3, [pc, #276]	@ (8000730 <SystemInit+0x12c>)
 800061a:	691b      	ldr	r3, [r3, #16]
 800061c:	4a44      	ldr	r2, [pc, #272]	@ (8000730 <SystemInit+0x12c>)
 800061e:	f043 0310 	orr.w	r3, r3, #16
 8000622:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000624:	4b43      	ldr	r3, [pc, #268]	@ (8000734 <SystemInit+0x130>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f003 030f 	and.w	r3, r3, #15
 800062c:	2b06      	cmp	r3, #6
 800062e:	d807      	bhi.n	8000640 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000630:	4b40      	ldr	r3, [pc, #256]	@ (8000734 <SystemInit+0x130>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f023 030f 	bic.w	r3, r3, #15
 8000638:	4a3e      	ldr	r2, [pc, #248]	@ (8000734 <SystemInit+0x130>)
 800063a:	f043 0307 	orr.w	r3, r3, #7
 800063e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000640:	4b3d      	ldr	r3, [pc, #244]	@ (8000738 <SystemInit+0x134>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a3c      	ldr	r2, [pc, #240]	@ (8000738 <SystemInit+0x134>)
 8000646:	f043 0301 	orr.w	r3, r3, #1
 800064a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800064c:	4b3a      	ldr	r3, [pc, #232]	@ (8000738 <SystemInit+0x134>)
 800064e:	2200      	movs	r2, #0
 8000650:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000652:	4b39      	ldr	r3, [pc, #228]	@ (8000738 <SystemInit+0x134>)
 8000654:	681a      	ldr	r2, [r3, #0]
 8000656:	4938      	ldr	r1, [pc, #224]	@ (8000738 <SystemInit+0x134>)
 8000658:	4b38      	ldr	r3, [pc, #224]	@ (800073c <SystemInit+0x138>)
 800065a:	4013      	ands	r3, r2
 800065c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800065e:	4b35      	ldr	r3, [pc, #212]	@ (8000734 <SystemInit+0x130>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	f003 0308 	and.w	r3, r3, #8
 8000666:	2b00      	cmp	r3, #0
 8000668:	d007      	beq.n	800067a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800066a:	4b32      	ldr	r3, [pc, #200]	@ (8000734 <SystemInit+0x130>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	f023 030f 	bic.w	r3, r3, #15
 8000672:	4a30      	ldr	r2, [pc, #192]	@ (8000734 <SystemInit+0x130>)
 8000674:	f043 0307 	orr.w	r3, r3, #7
 8000678:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800067a:	4b2f      	ldr	r3, [pc, #188]	@ (8000738 <SystemInit+0x134>)
 800067c:	2200      	movs	r2, #0
 800067e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000680:	4b2d      	ldr	r3, [pc, #180]	@ (8000738 <SystemInit+0x134>)
 8000682:	2200      	movs	r2, #0
 8000684:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000686:	4b2c      	ldr	r3, [pc, #176]	@ (8000738 <SystemInit+0x134>)
 8000688:	2200      	movs	r2, #0
 800068a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800068c:	4b2a      	ldr	r3, [pc, #168]	@ (8000738 <SystemInit+0x134>)
 800068e:	4a2c      	ldr	r2, [pc, #176]	@ (8000740 <SystemInit+0x13c>)
 8000690:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000692:	4b29      	ldr	r3, [pc, #164]	@ (8000738 <SystemInit+0x134>)
 8000694:	4a2b      	ldr	r2, [pc, #172]	@ (8000744 <SystemInit+0x140>)
 8000696:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000698:	4b27      	ldr	r3, [pc, #156]	@ (8000738 <SystemInit+0x134>)
 800069a:	4a2b      	ldr	r2, [pc, #172]	@ (8000748 <SystemInit+0x144>)
 800069c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800069e:	4b26      	ldr	r3, [pc, #152]	@ (8000738 <SystemInit+0x134>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80006a4:	4b24      	ldr	r3, [pc, #144]	@ (8000738 <SystemInit+0x134>)
 80006a6:	4a28      	ldr	r2, [pc, #160]	@ (8000748 <SystemInit+0x144>)
 80006a8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80006aa:	4b23      	ldr	r3, [pc, #140]	@ (8000738 <SystemInit+0x134>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80006b0:	4b21      	ldr	r3, [pc, #132]	@ (8000738 <SystemInit+0x134>)
 80006b2:	4a25      	ldr	r2, [pc, #148]	@ (8000748 <SystemInit+0x144>)
 80006b4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80006b6:	4b20      	ldr	r3, [pc, #128]	@ (8000738 <SystemInit+0x134>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80006bc:	4b1e      	ldr	r3, [pc, #120]	@ (8000738 <SystemInit+0x134>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a1d      	ldr	r2, [pc, #116]	@ (8000738 <SystemInit+0x134>)
 80006c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80006c6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000738 <SystemInit+0x134>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006ce:	4b1f      	ldr	r3, [pc, #124]	@ (800074c <SystemInit+0x148>)
 80006d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006d2:	4a1e      	ldr	r2, [pc, #120]	@ (800074c <SystemInit+0x148>)
 80006d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006d8:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006da:	4b1d      	ldr	r3, [pc, #116]	@ (8000750 <SystemInit+0x14c>)
 80006dc:	681a      	ldr	r2, [r3, #0]
 80006de:	4b1d      	ldr	r3, [pc, #116]	@ (8000754 <SystemInit+0x150>)
 80006e0:	4013      	ands	r3, r2
 80006e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80006e6:	d202      	bcs.n	80006ee <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000758 <SystemInit+0x154>)
 80006ea:	2201      	movs	r2, #1
 80006ec:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80006ee:	4b12      	ldr	r3, [pc, #72]	@ (8000738 <SystemInit+0x134>)
 80006f0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80006f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d113      	bne.n	8000724 <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80006fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000738 <SystemInit+0x134>)
 80006fe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000702:	4a0d      	ldr	r2, [pc, #52]	@ (8000738 <SystemInit+0x134>)
 8000704:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000708:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800070c:	4b13      	ldr	r3, [pc, #76]	@ (800075c <SystemInit+0x158>)
 800070e:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000712:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000714:	4b08      	ldr	r3, [pc, #32]	@ (8000738 <SystemInit+0x134>)
 8000716:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800071a:	4a07      	ldr	r2, [pc, #28]	@ (8000738 <SystemInit+0x134>)
 800071c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000720:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	e000ed00 	.word	0xe000ed00
 8000734:	52002000 	.word	0x52002000
 8000738:	58024400 	.word	0x58024400
 800073c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000740:	02020200 	.word	0x02020200
 8000744:	01ff0000 	.word	0x01ff0000
 8000748:	01010280 	.word	0x01010280
 800074c:	580000c0 	.word	0x580000c0
 8000750:	5c001000 	.word	0x5c001000
 8000754:	ffff0000 	.word	0xffff0000
 8000758:	51008108 	.word	0x51008108
 800075c:	52004000 	.word	0x52004000

08000760 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8000764:	4b09      	ldr	r3, [pc, #36]	@ (800078c <ExitRun0Mode+0x2c>)
 8000766:	68db      	ldr	r3, [r3, #12]
 8000768:	4a08      	ldr	r2, [pc, #32]	@ (800078c <ExitRun0Mode+0x2c>)
 800076a:	f023 0302 	bic.w	r3, r3, #2
 800076e:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000770:	bf00      	nop
 8000772:	4b06      	ldr	r3, [pc, #24]	@ (800078c <ExitRun0Mode+0x2c>)
 8000774:	685b      	ldr	r3, [r3, #4]
 8000776:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800077a:	2b00      	cmp	r3, #0
 800077c:	d0f9      	beq.n	8000772 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800077e:	bf00      	nop
 8000780:	bf00      	nop
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	58024800 	.word	0x58024800

08000790 <AIC3X_Init>:
 *
 * @param haic3x Pointer to a AIC3X_HandleTypeDef structure that contains
 *  the configuration information for the specified AIC3X
 * @retval Hal Status
 */
HAL_StatusTypeDef AIC3X_Init(AIC3X_HandleTypeDef *haic3x) {
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]

	if (haic3x == NULL) {
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d101      	bne.n	80007a2 <AIC3X_Init+0x12>
		return HAL_ERROR;
 800079e:	2301      	movs	r3, #1
 80007a0:	e006      	b.n	80007b0 <AIC3X_Init+0x20>
	}

	AIC3X_HwReset(haic3x);
 80007a2:	6878      	ldr	r0, [r7, #4]
 80007a4:	f000 f808 	bl	80007b8 <AIC3X_HwReset>
	return AIC3X_SwReset(haic3x);
 80007a8:	6878      	ldr	r0, [r7, #4]
 80007aa:	f000 f829 	bl	8000800 <AIC3X_SwReset>
 80007ae:	4603      	mov	r3, r0
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <AIC3X_HwReset>:
 *
 * @param haic3x Pointer to a AIC3X_HandleTypeDef structure that contains
 *  the configuration information for the specified AIC3X.
 * @retval Hal Status
 */
HAL_StatusTypeDef AIC3X_HwReset(AIC3X_HandleTypeDef *haic3x) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]

	if (haic3x == NULL) {
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d101      	bne.n	80007ca <AIC3X_HwReset+0x12>
		return HAL_ERROR;
 80007c6:	2301      	movs	r3, #1
 80007c8:	e016      	b.n	80007f8 <AIC3X_HwReset+0x40>
	}

	HAL_GPIO_WritePin(haic3x->rst_port, haic3x->rst_pin, GPIO_PIN_RESET);
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	6858      	ldr	r0, [r3, #4]
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	891b      	ldrh	r3, [r3, #8]
 80007d2:	2200      	movs	r2, #0
 80007d4:	4619      	mov	r1, r3
 80007d6:	f005 fa71 	bl	8005cbc <HAL_GPIO_WritePin>
	HAL_Delay(AIC3X_RESET_TIME_LOW);
 80007da:	20c8      	movs	r0, #200	@ 0xc8
 80007dc:	f002 fd88 	bl	80032f0 <HAL_Delay>

	HAL_GPIO_WritePin(haic3x->rst_port, haic3x->rst_pin, GPIO_PIN_SET);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	6858      	ldr	r0, [r3, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	891b      	ldrh	r3, [r3, #8]
 80007e8:	2201      	movs	r2, #1
 80007ea:	4619      	mov	r1, r3
 80007ec:	f005 fa66 	bl	8005cbc <HAL_GPIO_WritePin>
	HAL_Delay(AIC3X_RESET_TIME_HIGH);
 80007f0:	2000      	movs	r0, #0
 80007f2:	f002 fd7d 	bl	80032f0 <HAL_Delay>
	return HAL_OK;
 80007f6:	2300      	movs	r3, #0
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	3708      	adds	r7, #8
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}

08000800 <AIC3X_SwReset>:
 *
 * @param haic3x Pointer to a AIC3X_HandleTypeDef structure that contains
 *  the configuration information for the specified AIC3X.
 * @return Hal Status
 */
HAL_StatusTypeDef AIC3X_SwReset(AIC3X_HandleTypeDef *haic3x) {
 8000800:	b580      	push	{r7, lr}
 8000802:	b088      	sub	sp, #32
 8000804:	af04      	add	r7, sp, #16
 8000806:	6078      	str	r0, [r7, #4]

	if (haic3x == NULL) {
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d101      	bne.n	8000812 <AIC3X_SwReset+0x12>
		return HAL_ERROR;
 800080e:	2301      	movs	r3, #1
 8000810:	e010      	b.n	8000834 <AIC3X_SwReset+0x34>
	}

	uint8_t writeBuffer = 0x80u;
 8000812:	2380      	movs	r3, #128	@ 0x80
 8000814:	73fb      	strb	r3, [r7, #15]
	return HAL_I2C_Mem_Write(haic3x->hi2c, (uint16_t) AIC3x_ADDRESS << 1,
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	6818      	ldr	r0, [r3, #0]
 800081a:	230a      	movs	r3, #10
 800081c:	9302      	str	r3, [sp, #8]
 800081e:	2301      	movs	r3, #1
 8000820:	9301      	str	r3, [sp, #4]
 8000822:	f107 030f 	add.w	r3, r7, #15
 8000826:	9300      	str	r3, [sp, #0]
 8000828:	2301      	movs	r3, #1
 800082a:	2201      	movs	r2, #1
 800082c:	2130      	movs	r1, #48	@ 0x30
 800082e:	f005 fb29 	bl	8005e84 <HAL_I2C_Mem_Write>
 8000832:	4603      	mov	r3, r0
	AIC3X_RESET, I2C_MEMADD_SIZE_8BIT, &writeBuffer, 1U, 10);
}
 8000834:	4618      	mov	r0, r3
 8000836:	3710      	adds	r7, #16
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}

0800083c <AIC3X_ReadData>:

HAL_StatusTypeDef AIC3X_ReadData(AIC3X_HandleTypeDef *haic3x, uint8_t reg,
		uint8_t *data, uint8_t dataSize) {
 800083c:	b580      	push	{r7, lr}
 800083e:	b088      	sub	sp, #32
 8000840:	af04      	add	r7, sp, #16
 8000842:	60f8      	str	r0, [r7, #12]
 8000844:	607a      	str	r2, [r7, #4]
 8000846:	461a      	mov	r2, r3
 8000848:	460b      	mov	r3, r1
 800084a:	72fb      	strb	r3, [r7, #11]
 800084c:	4613      	mov	r3, r2
 800084e:	72bb      	strb	r3, [r7, #10]
	if (haic3x == NULL) {
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d101      	bne.n	800085a <AIC3X_ReadData+0x1e>
		return HAL_ERROR;
 8000856:	2301      	movs	r3, #1
 8000858:	e014      	b.n	8000884 <AIC3X_ReadData+0x48>
	}

	if (data == NULL) {
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d101      	bne.n	8000864 <AIC3X_ReadData+0x28>
		return HAL_ERROR;
 8000860:	2301      	movs	r3, #1
 8000862:	e00f      	b.n	8000884 <AIC3X_ReadData+0x48>
	}

	return HAL_I2C_Mem_Read(haic3x->hi2c, (uint16_t) AIC3x_ADDRESS << 1, reg,
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	6818      	ldr	r0, [r3, #0]
 8000868:	7afb      	ldrb	r3, [r7, #11]
 800086a:	b29a      	uxth	r2, r3
 800086c:	7abb      	ldrb	r3, [r7, #10]
 800086e:	b29b      	uxth	r3, r3
 8000870:	210a      	movs	r1, #10
 8000872:	9102      	str	r1, [sp, #8]
 8000874:	9301      	str	r3, [sp, #4]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	9300      	str	r3, [sp, #0]
 800087a:	2301      	movs	r3, #1
 800087c:	2130      	movs	r1, #48	@ 0x30
 800087e:	f005 fc15 	bl	80060ac <HAL_I2C_Mem_Read>
 8000882:	4603      	mov	r3, r0
	I2C_MEMADD_SIZE_8BIT, data, dataSize, 10);
}
 8000884:	4618      	mov	r0, r3
 8000886:	3710      	adds	r7, #16
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}

0800088c <AIC3X_WriteData>:

HAL_StatusTypeDef AIC3X_WriteData(AIC3X_HandleTypeDef *haic3x, uint8_t reg,
		uint8_t *data, uint8_t dataSize) {
 800088c:	b580      	push	{r7, lr}
 800088e:	b088      	sub	sp, #32
 8000890:	af04      	add	r7, sp, #16
 8000892:	60f8      	str	r0, [r7, #12]
 8000894:	607a      	str	r2, [r7, #4]
 8000896:	461a      	mov	r2, r3
 8000898:	460b      	mov	r3, r1
 800089a:	72fb      	strb	r3, [r7, #11]
 800089c:	4613      	mov	r3, r2
 800089e:	72bb      	strb	r3, [r7, #10]
	if (haic3x == NULL) {
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d101      	bne.n	80008aa <AIC3X_WriteData+0x1e>
		return HAL_ERROR;
 80008a6:	2301      	movs	r3, #1
 80008a8:	e014      	b.n	80008d4 <AIC3X_WriteData+0x48>
	}

	if (data == NULL) {
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d101      	bne.n	80008b4 <AIC3X_WriteData+0x28>
		return HAL_ERROR;
 80008b0:	2301      	movs	r3, #1
 80008b2:	e00f      	b.n	80008d4 <AIC3X_WriteData+0x48>
	}

	return HAL_I2C_Mem_Write(haic3x->hi2c, (uint16_t) AIC3x_ADDRESS << 1, reg,
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	6818      	ldr	r0, [r3, #0]
 80008b8:	7afb      	ldrb	r3, [r7, #11]
 80008ba:	b29a      	uxth	r2, r3
 80008bc:	7abb      	ldrb	r3, [r7, #10]
 80008be:	b29b      	uxth	r3, r3
 80008c0:	210a      	movs	r1, #10
 80008c2:	9102      	str	r1, [sp, #8]
 80008c4:	9301      	str	r3, [sp, #4]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	9300      	str	r3, [sp, #0]
 80008ca:	2301      	movs	r3, #1
 80008cc:	2130      	movs	r1, #48	@ 0x30
 80008ce:	f005 fad9 	bl	8005e84 <HAL_I2C_Mem_Write>
 80008d2:	4603      	mov	r3, r0
	I2C_MEMADD_SIZE_8BIT, data, dataSize, 10);
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	3710      	adds	r7, #16
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}

080008dc <AIC3X_WriteDataPathControl>:

	return HAL_OK;
}

HAL_StatusTypeDef AIC3X_WriteDataPathControl(AIC3X_HandleTypeDef *haic3x,
		AIC3X_DataPathControl_TypeDef *pDataPathControl) {
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	6039      	str	r1, [r7, #0]
	if (haic3x == NULL) {
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d101      	bne.n	80008f0 <AIC3X_WriteDataPathControl+0x14>
		return HAL_ERROR;
 80008ec:	2301      	movs	r3, #1
 80008ee:	e030      	b.n	8000952 <AIC3X_WriteDataPathControl+0x76>
	}

	if (pDataPathControl == NULL) {
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d101      	bne.n	80008fa <AIC3X_WriteDataPathControl+0x1e>
		return HAL_ERROR;
 80008f6:	2301      	movs	r3, #1
 80008f8:	e02b      	b.n	8000952 <AIC3X_WriteDataPathControl+0x76>
	}

	uint8_t readBuffer;
	uint8_t writeBuffer;

	readBuffer = AIC3X_ReadData(haic3x, AIC3X_CODEC_DATAPATH_REG, &readBuffer,
 80008fa:	f107 020f 	add.w	r2, r7, #15
 80008fe:	2301      	movs	r3, #1
 8000900:	2107      	movs	r1, #7
 8000902:	6878      	ldr	r0, [r7, #4]
 8000904:	f7ff ff9a 	bl	800083c <AIC3X_ReadData>
 8000908:	4603      	mov	r3, r0
 800090a:	73fb      	strb	r3, [r7, #15]
			sizeof(readBuffer));

	writeBuffer = readBuffer
			& (~(AIC3X_DATAPATH_LEFT_MASK | AIC3X_DATAPATH_RIGHT_MASK));
 800090c:	7bfb      	ldrb	r3, [r7, #15]
 800090e:	f023 031e 	bic.w	r3, r3, #30
 8000912:	b2db      	uxtb	r3, r3
	writeBuffer = readBuffer
 8000914:	73bb      	strb	r3, [r7, #14]

	writeBuffer |= (uint8_t) pDataPathControl->LeftDACDataPath << 3;
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	b25b      	sxtb	r3, r3
 800091c:	00db      	lsls	r3, r3, #3
 800091e:	b25a      	sxtb	r2, r3
 8000920:	7bbb      	ldrb	r3, [r7, #14]
 8000922:	b25b      	sxtb	r3, r3
 8000924:	4313      	orrs	r3, r2
 8000926:	b25b      	sxtb	r3, r3
 8000928:	b2db      	uxtb	r3, r3
 800092a:	73bb      	strb	r3, [r7, #14]
	writeBuffer |= (uint8_t) pDataPathControl->RightDACDataPath << 1;
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	785b      	ldrb	r3, [r3, #1]
 8000930:	b25b      	sxtb	r3, r3
 8000932:	005b      	lsls	r3, r3, #1
 8000934:	b25a      	sxtb	r2, r3
 8000936:	7bbb      	ldrb	r3, [r7, #14]
 8000938:	b25b      	sxtb	r3, r3
 800093a:	4313      	orrs	r3, r2
 800093c:	b25b      	sxtb	r3, r3
 800093e:	b2db      	uxtb	r3, r3
 8000940:	73bb      	strb	r3, [r7, #14]

	return AIC3X_WriteData(haic3x, AIC3X_CODEC_DATAPATH_REG, &writeBuffer,
 8000942:	f107 020e 	add.w	r2, r7, #14
 8000946:	2301      	movs	r3, #1
 8000948:	2107      	movs	r1, #7
 800094a:	6878      	ldr	r0, [r7, #4]
 800094c:	f7ff ff9e 	bl	800088c <AIC3X_WriteData>
 8000950:	4603      	mov	r3, r0
			sizeof(writeBuffer));
}
 8000952:	4618      	mov	r0, r3
 8000954:	3710      	adds	r7, #16
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}

0800095a <AIC3X_WriteASDataIntfControl>:
 *
 * @warning The size of the sent data is not calculated with sizeof() but set
 * 	with a constant value of 3u because the registers have a length of 24 bits.
 */
HAL_StatusTypeDef AIC3X_WriteASDataIntfControl(AIC3X_HandleTypeDef *haic3x,
		AIC3X_ASDIntCtrl_TypeDef *pASDIntfCtrl) {
 800095a:	b580      	push	{r7, lr}
 800095c:	b088      	sub	sp, #32
 800095e:	af04      	add	r7, sp, #16
 8000960:	6078      	str	r0, [r7, #4]
 8000962:	6039      	str	r1, [r7, #0]

	if (haic3x == NULL) {
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d101      	bne.n	800096e <AIC3X_WriteASDataIntfControl+0x14>
		return HAL_ERROR;
 800096a:	2301      	movs	r3, #1
 800096c:	e060      	b.n	8000a30 <AIC3X_WriteASDataIntfControl+0xd6>
	}

	if (pASDIntfCtrl == NULL) {
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d101      	bne.n	8000978 <AIC3X_WriteASDataIntfControl+0x1e>
		return HAL_ERROR;
 8000974:	2301      	movs	r3, #1
 8000976:	e05b      	b.n	8000a30 <AIC3X_WriteASDataIntfControl+0xd6>
	}

	uint32_t writeBuffer = 0;
 8000978:	2300      	movs	r3, #0
 800097a:	60fb      	str	r3, [r7, #12]

	/*Set corresponding bits for the values in pASDIntfCtrl */
	writeBuffer |= pASDIntfCtrl->BclkOutput << 24;
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	061a      	lsls	r2, r3, #24
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	4313      	orrs	r3, r2
 8000986:	60fb      	str	r3, [r7, #12]
	writeBuffer |= pASDIntfCtrl->WclkOutput << 23;
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	785b      	ldrb	r3, [r3, #1]
 800098c:	05da      	lsls	r2, r3, #23
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	4313      	orrs	r3, r2
 8000992:	60fb      	str	r3, [r7, #12]
	writeBuffer |= pASDIntfCtrl->DoutTristate << 22;
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	789b      	ldrb	r3, [r3, #2]
 8000998:	059a      	lsls	r2, r3, #22
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	4313      	orrs	r3, r2
 800099e:	60fb      	str	r3, [r7, #12]
	writeBuffer |= pASDIntfCtrl->ClkDriveCtrl << 21;
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	78db      	ldrb	r3, [r3, #3]
 80009a4:	055a      	lsls	r2, r3, #21
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	4313      	orrs	r3, r2
 80009aa:	60fb      	str	r3, [r7, #12]
	writeBuffer |= pASDIntfCtrl->Effect3D << 19;
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	791b      	ldrb	r3, [r3, #4]
 80009b0:	04da      	lsls	r2, r3, #19
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	4313      	orrs	r3, r2
 80009b6:	60fb      	str	r3, [r7, #12]
	writeBuffer |= pASDIntfCtrl->TransferMode << 14;
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	795b      	ldrb	r3, [r3, #5]
 80009bc:	039a      	lsls	r2, r3, #14
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	4313      	orrs	r3, r2
 80009c2:	60fb      	str	r3, [r7, #12]
	writeBuffer |= pASDIntfCtrl->WordLength << 12;
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	799b      	ldrb	r3, [r3, #6]
 80009c8:	031a      	lsls	r2, r3, #12
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	4313      	orrs	r3, r2
 80009ce:	60fb      	str	r3, [r7, #12]
	writeBuffer |= pASDIntfCtrl->Bclk265ClockMode << 11;
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	79db      	ldrb	r3, [r3, #7]
 80009d4:	02da      	lsls	r2, r3, #11
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	4313      	orrs	r3, r2
 80009da:	60fb      	str	r3, [r7, #12]
	writeBuffer |= pASDIntfCtrl->DACResync << 10;
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	7a1b      	ldrb	r3, [r3, #8]
 80009e0:	029a      	lsls	r2, r3, #10
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	4313      	orrs	r3, r2
 80009e6:	60fb      	str	r3, [r7, #12]
	writeBuffer |= pASDIntfCtrl->ADCResync << 9;
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	7a5b      	ldrb	r3, [r3, #9]
 80009ec:	025a      	lsls	r2, r3, #9
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	4313      	orrs	r3, r2
 80009f2:	60fb      	str	r3, [r7, #12]
	writeBuffer |= pASDIntfCtrl->ReSyncMute << 8;
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	7a9b      	ldrb	r3, [r3, #10]
 80009f8:	021a      	lsls	r2, r3, #8
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	4313      	orrs	r3, r2
 80009fe:	60fb      	str	r3, [r7, #12]
	writeBuffer |= pASDIntfCtrl->WordOffset;
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	7adb      	ldrb	r3, [r3, #11]
 8000a04:	461a      	mov	r2, r3
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	60fb      	str	r3, [r7, #12]

	/* Shift the writeBuffer to the left by 8 bits to make place for the bits of the ASD overflow control register*/
	writeBuffer = writeBuffer << 8;
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	021b      	lsls	r3, r3, #8
 8000a10:	60fb      	str	r3, [r7, #12]

	/* Write the ASD interface control register */
	return HAL_I2C_Mem_Write(haic3x->hi2c, (uint16_t) AIC3x_ADDRESS << 1,
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	6818      	ldr	r0, [r3, #0]
 8000a16:	230a      	movs	r3, #10
 8000a18:	9302      	str	r3, [sp, #8]
 8000a1a:	2303      	movs	r3, #3
 8000a1c:	9301      	str	r3, [sp, #4]
 8000a1e:	f107 030c 	add.w	r3, r7, #12
 8000a22:	9300      	str	r3, [sp, #0]
 8000a24:	2301      	movs	r3, #1
 8000a26:	2208      	movs	r2, #8
 8000a28:	2130      	movs	r1, #48	@ 0x30
 8000a2a:	f005 fa2b 	bl	8005e84 <HAL_I2C_Mem_Write>
 8000a2e:	4603      	mov	r3, r0
	AIC3X_ASD_INTF_CTRLA, I2C_MEMADD_SIZE_8BIT, (uint8_t*) &writeBuffer, 3u, 10);

}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3710      	adds	r7, #16
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <AIC3X_WritePGAGainControl>:

	return HAL_OK;
}

HAL_StatusTypeDef AIC3X_WritePGAGainControl(AIC3X_HandleTypeDef *haic3x,
		AIC3X_PGAGainControl_TypeDef *pPGAGainControl) {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	6039      	str	r1, [r7, #0]
	if (haic3x == NULL) {
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d101      	bne.n	8000a4c <AIC3X_WritePGAGainControl+0x14>
		return HAL_ERROR;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	e038      	b.n	8000abe <AIC3X_WritePGAGainControl+0x86>
	}

	if (pPGAGainControl == NULL) {
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d101      	bne.n	8000a56 <AIC3X_WritePGAGainControl+0x1e>
		return HAL_ERROR;
 8000a52:	2301      	movs	r3, #1
 8000a54:	e033      	b.n	8000abe <AIC3X_WritePGAGainControl+0x86>
	}

	uint16_t writeBuffer = 0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	81fb      	strh	r3, [r7, #14]

	writeBuffer |= pPGAGainControl->LADCMuted << 15;
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	b21b      	sxth	r3, r3
 8000a60:	03db      	lsls	r3, r3, #15
 8000a62:	b21a      	sxth	r2, r3
 8000a64:	89fb      	ldrh	r3, [r7, #14]
 8000a66:	b21b      	sxth	r3, r3
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	b21b      	sxth	r3, r3
 8000a6c:	b29b      	uxth	r3, r3
 8000a6e:	81fb      	strh	r3, [r7, #14]
	writeBuffer |= (pPGAGainControl->LADCGain & AIC3X_PGA_GAIN_MASK) << 8;
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	785b      	ldrb	r3, [r3, #1]
 8000a74:	021b      	lsls	r3, r3, #8
 8000a76:	b29b      	uxth	r3, r3
 8000a78:	f403 43fe 	and.w	r3, r3, #32512	@ 0x7f00
 8000a7c:	b29a      	uxth	r2, r3
 8000a7e:	89fb      	ldrh	r3, [r7, #14]
 8000a80:	4313      	orrs	r3, r2
 8000a82:	b29b      	uxth	r3, r3
 8000a84:	81fb      	strh	r3, [r7, #14]
	writeBuffer |= pPGAGainControl->RADCMuted << 7;
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	789b      	ldrb	r3, [r3, #2]
 8000a8a:	b21b      	sxth	r3, r3
 8000a8c:	01db      	lsls	r3, r3, #7
 8000a8e:	b21a      	sxth	r2, r3
 8000a90:	89fb      	ldrh	r3, [r7, #14]
 8000a92:	b21b      	sxth	r3, r3
 8000a94:	4313      	orrs	r3, r2
 8000a96:	b21b      	sxth	r3, r3
 8000a98:	b29b      	uxth	r3, r3
 8000a9a:	81fb      	strh	r3, [r7, #14]
	writeBuffer |= pPGAGainControl->RADCGain & AIC3X_PGA_GAIN_MASK;
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	78db      	ldrb	r3, [r3, #3]
 8000aa0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000aa4:	b29a      	uxth	r2, r3
 8000aa6:	89fb      	ldrh	r3, [r7, #14]
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	b29b      	uxth	r3, r3
 8000aac:	81fb      	strh	r3, [r7, #14]

	return AIC3X_WriteData(haic3x, LADC_VOL, (uint8_t*) &writeBuffer,
 8000aae:	f107 020e 	add.w	r2, r7, #14
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	210f      	movs	r1, #15
 8000ab6:	6878      	ldr	r0, [r7, #4]
 8000ab8:	f7ff fee8 	bl	800088c <AIC3X_WriteData>
 8000abc:	4603      	mov	r3, r0
			sizeof(writeBuffer));
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3710      	adds	r7, #16
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <AIC3X_WriteADCMixControl>:

	return HAL_OK;
}

HAL_StatusTypeDef AIC3X_WriteADCMixControl(AIC3X_HandleTypeDef *haic3x,
		AIC3X_ADCMixControl_TypeDef *pADCMixControl) {
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b086      	sub	sp, #24
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
 8000ace:	6039      	str	r1, [r7, #0]
	if (haic3x == NULL) {
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d101      	bne.n	8000ada <AIC3X_WriteADCMixControl+0x14>
		return HAL_ERROR;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	e12f      	b.n	8000d3a <AIC3X_WriteADCMixControl+0x274>
	}

	if (pADCMixControl == NULL) {
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d101      	bne.n	8000ae4 <AIC3X_WriteADCMixControl+0x1e>
		return HAL_ERROR;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	e12a      	b.n	8000d3a <AIC3X_WriteADCMixControl+0x274>
	}

	if ((pADCMixControl->LeftADC_MIC2LGain > 8
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	2b08      	cmp	r3, #8
 8000aea:	d903      	bls.n	8000af4 <AIC3X_WriteADCMixControl+0x2e>
			&& pADCMixControl->LeftADC_MIC2LGain < 15)
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	2b0e      	cmp	r3, #14
 8000af2:	d937      	bls.n	8000b64 <AIC3X_WriteADCMixControl+0x9e>
			|| (pADCMixControl->LeftADC_MIC2RGain > 8
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	785b      	ldrb	r3, [r3, #1]
 8000af8:	2b08      	cmp	r3, #8
 8000afa:	d903      	bls.n	8000b04 <AIC3X_WriteADCMixControl+0x3e>
					&& pADCMixControl->LeftADC_MIC2RGain < 15)
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	785b      	ldrb	r3, [r3, #1]
 8000b00:	2b0e      	cmp	r3, #14
 8000b02:	d92f      	bls.n	8000b64 <AIC3X_WriteADCMixControl+0x9e>
			|| (pADCMixControl->RightADC_MIC2LGain > 8
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	789b      	ldrb	r3, [r3, #2]
 8000b08:	2b08      	cmp	r3, #8
 8000b0a:	d903      	bls.n	8000b14 <AIC3X_WriteADCMixControl+0x4e>
					&& pADCMixControl->RightADC_MIC2LGain < 15)
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	789b      	ldrb	r3, [r3, #2]
 8000b10:	2b0e      	cmp	r3, #14
 8000b12:	d927      	bls.n	8000b64 <AIC3X_WriteADCMixControl+0x9e>
			|| (pADCMixControl->RightADC_MIC2RGain > 8
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	78db      	ldrb	r3, [r3, #3]
 8000b18:	2b08      	cmp	r3, #8
 8000b1a:	d903      	bls.n	8000b24 <AIC3X_WriteADCMixControl+0x5e>
					&& pADCMixControl->RightADC_MIC2RGain < 15)
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	78db      	ldrb	r3, [r3, #3]
 8000b20:	2b0e      	cmp	r3, #14
 8000b22:	d91f      	bls.n	8000b64 <AIC3X_WriteADCMixControl+0x9e>
			|| (pADCMixControl->LeftADC_MIC1LPGain > 8
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	795b      	ldrb	r3, [r3, #5]
 8000b28:	2b08      	cmp	r3, #8
 8000b2a:	d903      	bls.n	8000b34 <AIC3X_WriteADCMixControl+0x6e>
					&& pADCMixControl->LeftADC_MIC1LPGain < 15)
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	795b      	ldrb	r3, [r3, #5]
 8000b30:	2b0e      	cmp	r3, #14
 8000b32:	d917      	bls.n	8000b64 <AIC3X_WriteADCMixControl+0x9e>
			|| (pADCMixControl->LeftADC_MIC1RPGain > 8
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	7a5b      	ldrb	r3, [r3, #9]
 8000b38:	2b08      	cmp	r3, #8
 8000b3a:	d903      	bls.n	8000b44 <AIC3X_WriteADCMixControl+0x7e>
					&& pADCMixControl->LeftADC_MIC1RPGain < 15)
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	7a5b      	ldrb	r3, [r3, #9]
 8000b40:	2b0e      	cmp	r3, #14
 8000b42:	d90f      	bls.n	8000b64 <AIC3X_WriteADCMixControl+0x9e>
			|| (pADCMixControl->RightADC_MIC1LPGain > 8
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	7bdb      	ldrb	r3, [r3, #15]
 8000b48:	2b08      	cmp	r3, #8
 8000b4a:	d903      	bls.n	8000b54 <AIC3X_WriteADCMixControl+0x8e>
					&& pADCMixControl->RightADC_MIC1LPGain < 15)
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	7bdb      	ldrb	r3, [r3, #15]
 8000b50:	2b0e      	cmp	r3, #14
 8000b52:	d907      	bls.n	8000b64 <AIC3X_WriteADCMixControl+0x9e>
			|| (pADCMixControl->RightADC_MIC1RPGain > 8
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	7adb      	ldrb	r3, [r3, #11]
 8000b58:	2b08      	cmp	r3, #8
 8000b5a:	d905      	bls.n	8000b68 <AIC3X_WriteADCMixControl+0xa2>
					&& pADCMixControl->RightADC_MIC1RPGain < 15)) {
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	7adb      	ldrb	r3, [r3, #11]
 8000b60:	2b0e      	cmp	r3, #14
 8000b62:	d801      	bhi.n	8000b68 <AIC3X_WriteADCMixControl+0xa2>
		return HAL_ERROR;
 8000b64:	2301      	movs	r3, #1
 8000b66:	e0e8      	b.n	8000d3a <AIC3X_WriteADCMixControl+0x274>
	}

uint16_t writeBufferMIC2 = 0;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	82bb      	strh	r3, [r7, #20]
uint8_t writeBufferLeftADCMIC1LP = 0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	74fb      	strb	r3, [r7, #19]
uint16_t writeBufferMIC1RP = 0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	823b      	strh	r3, [r7, #16]
uint8_t writeBufferRightADCMIC1LP = 0;
 8000b74:	2300      	movs	r3, #0
 8000b76:	73fb      	strb	r3, [r7, #15]

writeBufferMIC2 |= pADCMixControl->LeftADC_MIC2LGain << 12;
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	b21b      	sxth	r3, r3
 8000b7e:	031b      	lsls	r3, r3, #12
 8000b80:	b21a      	sxth	r2, r3
 8000b82:	8abb      	ldrh	r3, [r7, #20]
 8000b84:	b21b      	sxth	r3, r3
 8000b86:	4313      	orrs	r3, r2
 8000b88:	b21b      	sxth	r3, r3
 8000b8a:	b29b      	uxth	r3, r3
 8000b8c:	82bb      	strh	r3, [r7, #20]
writeBufferMIC2 |= pADCMixControl->LeftADC_MIC2RGain << 8;
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	785b      	ldrb	r3, [r3, #1]
 8000b92:	b21b      	sxth	r3, r3
 8000b94:	021b      	lsls	r3, r3, #8
 8000b96:	b21a      	sxth	r2, r3
 8000b98:	8abb      	ldrh	r3, [r7, #20]
 8000b9a:	b21b      	sxth	r3, r3
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	b21b      	sxth	r3, r3
 8000ba0:	b29b      	uxth	r3, r3
 8000ba2:	82bb      	strh	r3, [r7, #20]
writeBufferMIC2 |= pADCMixControl->RightADC_MIC2LGain << 4;
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	789b      	ldrb	r3, [r3, #2]
 8000ba8:	b21b      	sxth	r3, r3
 8000baa:	011b      	lsls	r3, r3, #4
 8000bac:	b21a      	sxth	r2, r3
 8000bae:	8abb      	ldrh	r3, [r7, #20]
 8000bb0:	b21b      	sxth	r3, r3
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	b21b      	sxth	r3, r3
 8000bb6:	b29b      	uxth	r3, r3
 8000bb8:	82bb      	strh	r3, [r7, #20]
writeBufferMIC2 |= pADCMixControl->RightADC_MIC2RGain;
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	78db      	ldrb	r3, [r3, #3]
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	8abb      	ldrh	r3, [r7, #20]
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	b29b      	uxth	r3, r3
 8000bc6:	82bb      	strh	r3, [r7, #20]

writeBufferLeftADCMIC1LP |= pADCMixControl->LeftADC_MIC1LPDifferential << 7;
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	791b      	ldrb	r3, [r3, #4]
 8000bcc:	b25b      	sxtb	r3, r3
 8000bce:	01db      	lsls	r3, r3, #7
 8000bd0:	b25a      	sxtb	r2, r3
 8000bd2:	7cfb      	ldrb	r3, [r7, #19]
 8000bd4:	b25b      	sxtb	r3, r3
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	b25b      	sxtb	r3, r3
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	74fb      	strb	r3, [r7, #19]
writeBufferLeftADCMIC1LP |= pADCMixControl->LeftADC_MIC1LPGain << 3;
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	795b      	ldrb	r3, [r3, #5]
 8000be2:	b25b      	sxtb	r3, r3
 8000be4:	00db      	lsls	r3, r3, #3
 8000be6:	b25a      	sxtb	r2, r3
 8000be8:	7cfb      	ldrb	r3, [r7, #19]
 8000bea:	b25b      	sxtb	r3, r3
 8000bec:	4313      	orrs	r3, r2
 8000bee:	b25b      	sxtb	r3, r3
 8000bf0:	b2db      	uxtb	r3, r3
 8000bf2:	74fb      	strb	r3, [r7, #19]
writeBufferLeftADCMIC1LP |= pADCMixControl->LeftADC_PowerUp << 2;
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	799b      	ldrb	r3, [r3, #6]
 8000bf8:	b25b      	sxtb	r3, r3
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	b25a      	sxtb	r2, r3
 8000bfe:	7cfb      	ldrb	r3, [r7, #19]
 8000c00:	b25b      	sxtb	r3, r3
 8000c02:	4313      	orrs	r3, r2
 8000c04:	b25b      	sxtb	r3, r3
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	74fb      	strb	r3, [r7, #19]
writeBufferLeftADCMIC1LP |= pADCMixControl->LeftADC_PGASoftStepping & AIC3X_LEFT_ADC_MIC1LP_SOFT_STEPPING_MASK;
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	79db      	ldrb	r3, [r3, #7]
 8000c0e:	f003 0303 	and.w	r3, r3, #3
 8000c12:	b2da      	uxtb	r2, r3
 8000c14:	7cfb      	ldrb	r3, [r7, #19]
 8000c16:	4313      	orrs	r3, r2
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	74fb      	strb	r3, [r7, #19]

writeBufferMIC1RP |= pADCMixControl->LeftADC_MIC1RPDifferential << 15;
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	7a1b      	ldrb	r3, [r3, #8]
 8000c20:	b21b      	sxth	r3, r3
 8000c22:	03db      	lsls	r3, r3, #15
 8000c24:	b21a      	sxth	r2, r3
 8000c26:	8a3b      	ldrh	r3, [r7, #16]
 8000c28:	b21b      	sxth	r3, r3
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	b21b      	sxth	r3, r3
 8000c2e:	b29b      	uxth	r3, r3
 8000c30:	823b      	strh	r3, [r7, #16]
writeBufferMIC1RP |= pADCMixControl->LeftADC_MIC1RPGain << 11;
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	7a5b      	ldrb	r3, [r3, #9]
 8000c36:	b21b      	sxth	r3, r3
 8000c38:	02db      	lsls	r3, r3, #11
 8000c3a:	b21a      	sxth	r2, r3
 8000c3c:	8a3b      	ldrh	r3, [r7, #16]
 8000c3e:	b21b      	sxth	r3, r3
 8000c40:	4313      	orrs	r3, r2
 8000c42:	b21b      	sxth	r3, r3
 8000c44:	b29b      	uxth	r3, r3
 8000c46:	823b      	strh	r3, [r7, #16]
writeBufferMIC1RP |= pADCMixControl->RightADC_MIC1RPDifferential << 7;
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	7a9b      	ldrb	r3, [r3, #10]
 8000c4c:	b21b      	sxth	r3, r3
 8000c4e:	01db      	lsls	r3, r3, #7
 8000c50:	b21a      	sxth	r2, r3
 8000c52:	8a3b      	ldrh	r3, [r7, #16]
 8000c54:	b21b      	sxth	r3, r3
 8000c56:	4313      	orrs	r3, r2
 8000c58:	b21b      	sxth	r3, r3
 8000c5a:	b29b      	uxth	r3, r3
 8000c5c:	823b      	strh	r3, [r7, #16]
writeBufferMIC1RP |= pADCMixControl->RightADC_MIC1RPGain << 3;
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	7adb      	ldrb	r3, [r3, #11]
 8000c62:	b21b      	sxth	r3, r3
 8000c64:	00db      	lsls	r3, r3, #3
 8000c66:	b21a      	sxth	r2, r3
 8000c68:	8a3b      	ldrh	r3, [r7, #16]
 8000c6a:	b21b      	sxth	r3, r3
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	b21b      	sxth	r3, r3
 8000c70:	b29b      	uxth	r3, r3
 8000c72:	823b      	strh	r3, [r7, #16]
writeBufferMIC1RP |= pADCMixControl->RightADC_PowerUp << 2;
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	7b1b      	ldrb	r3, [r3, #12]
 8000c78:	b21b      	sxth	r3, r3
 8000c7a:	009b      	lsls	r3, r3, #2
 8000c7c:	b21a      	sxth	r2, r3
 8000c7e:	8a3b      	ldrh	r3, [r7, #16]
 8000c80:	b21b      	sxth	r3, r3
 8000c82:	4313      	orrs	r3, r2
 8000c84:	b21b      	sxth	r3, r3
 8000c86:	b29b      	uxth	r3, r3
 8000c88:	823b      	strh	r3, [r7, #16]
writeBufferMIC1RP |= pADCMixControl->RightADC_PGASoftStepping & AIC3X_RIGHT_ADC_MIC1RP_SOFT_STEPPING_MASK;
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	7b5b      	ldrb	r3, [r3, #13]
 8000c8e:	f003 0303 	and.w	r3, r3, #3
 8000c92:	b29a      	uxth	r2, r3
 8000c94:	8a3b      	ldrh	r3, [r7, #16]
 8000c96:	4313      	orrs	r3, r2
 8000c98:	b29b      	uxth	r3, r3
 8000c9a:	823b      	strh	r3, [r7, #16]

writeBufferRightADCMIC1LP |= pADCMixControl->RightADC_MIC1LPDifferential
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	7b9b      	ldrb	r3, [r3, #14]
 8000ca0:	b25b      	sxtb	r3, r3
 8000ca2:	01db      	lsls	r3, r3, #7
 8000ca4:	b25a      	sxtb	r2, r3
 8000ca6:	7bfb      	ldrb	r3, [r7, #15]
 8000ca8:	b25b      	sxtb	r3, r3
 8000caa:	4313      	orrs	r3, r2
 8000cac:	b25b      	sxtb	r3, r3
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	73fb      	strb	r3, [r7, #15]
<< 7;
writeBufferRightADCMIC1LP |= pADCMixControl->RightADC_MIC1LPGain << 3;
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	7bdb      	ldrb	r3, [r3, #15]
 8000cb6:	b25b      	sxtb	r3, r3
 8000cb8:	00db      	lsls	r3, r3, #3
 8000cba:	b25a      	sxtb	r2, r3
 8000cbc:	7bfb      	ldrb	r3, [r7, #15]
 8000cbe:	b25b      	sxtb	r3, r3
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	b25b      	sxtb	r3, r3
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	73fb      	strb	r3, [r7, #15]

HAL_StatusTypeDef status;

status = AIC3X_WriteData(haic3x, MIC2LR_LADC_CTRL, (uint8_t*) &writeBufferMIC2,
 8000cc8:	f107 0214 	add.w	r2, r7, #20
 8000ccc:	2302      	movs	r3, #2
 8000cce:	2111      	movs	r1, #17
 8000cd0:	6878      	ldr	r0, [r7, #4]
 8000cd2:	f7ff fddb 	bl	800088c <AIC3X_WriteData>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	75fb      	strb	r3, [r7, #23]
		sizeof(writeBufferMIC2));

if (status != HAL_OK) {
 8000cda:	7dfb      	ldrb	r3, [r7, #23]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <AIC3X_WriteADCMixControl+0x21e>
	return status;
 8000ce0:	7dfb      	ldrb	r3, [r7, #23]
 8000ce2:	e02a      	b.n	8000d3a <AIC3X_WriteADCMixControl+0x274>
}

status = AIC3X_WriteData(haic3x, MIC1L_LADC_CTRL, &writeBufferLeftADCMIC1LP,
 8000ce4:	f107 0213 	add.w	r2, r7, #19
 8000ce8:	2301      	movs	r3, #1
 8000cea:	2113      	movs	r1, #19
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f7ff fdcd 	bl	800088c <AIC3X_WriteData>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	75fb      	strb	r3, [r7, #23]
		sizeof(writeBufferLeftADCMIC1LP));

if (status != HAL_OK) {
 8000cf6:	7dfb      	ldrb	r3, [r7, #23]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <AIC3X_WriteADCMixControl+0x23a>
	return status;
 8000cfc:	7dfb      	ldrb	r3, [r7, #23]
 8000cfe:	e01c      	b.n	8000d3a <AIC3X_WriteADCMixControl+0x274>
}

status = AIC3X_WriteData(haic3x, MIC1R_LADC_CTRL, (uint8_t*) &writeBufferMIC1RP,
 8000d00:	f107 0210 	add.w	r2, r7, #16
 8000d04:	2302      	movs	r3, #2
 8000d06:	2115      	movs	r1, #21
 8000d08:	6878      	ldr	r0, [r7, #4]
 8000d0a:	f7ff fdbf 	bl	800088c <AIC3X_WriteData>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	75fb      	strb	r3, [r7, #23]
		sizeof(writeBufferMIC1RP));

if (status != HAL_OK) {
 8000d12:	7dfb      	ldrb	r3, [r7, #23]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <AIC3X_WriteADCMixControl+0x256>
	return status;
 8000d18:	7dfb      	ldrb	r3, [r7, #23]
 8000d1a:	e00e      	b.n	8000d3a <AIC3X_WriteADCMixControl+0x274>
}

status = AIC3X_WriteData(haic3x, MIC1L_RADC_CTRL, &writeBufferRightADCMIC1LP,
 8000d1c:	f107 020f 	add.w	r2, r7, #15
 8000d20:	2301      	movs	r3, #1
 8000d22:	2118      	movs	r1, #24
 8000d24:	6878      	ldr	r0, [r7, #4]
 8000d26:	f7ff fdb1 	bl	800088c <AIC3X_WriteData>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	75fb      	strb	r3, [r7, #23]
		sizeof(writeBufferRightADCMIC1LP));

if (status != HAL_OK) {
 8000d2e:	7dfb      	ldrb	r3, [r7, #23]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <AIC3X_WriteADCMixControl+0x272>
	return status;
 8000d34:	7dfb      	ldrb	r3, [r7, #23]
 8000d36:	e000      	b.n	8000d3a <AIC3X_WriteADCMixControl+0x274>
}

return HAL_OK;
 8000d38:	2300      	movs	r3, #0
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3718      	adds	r7, #24
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <AIC3X_WriteDACPowerControl>:

return HAL_OK;
}

HAL_StatusTypeDef AIC3X_WriteDACPowerControl(AIC3X_HandleTypeDef *haic3x,
	AIC3X_DACPowerControl_TypeDef *pDACPowerControl) {
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b084      	sub	sp, #16
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	6078      	str	r0, [r7, #4]
 8000d4a:	6039      	str	r1, [r7, #0]
if (haic3x == NULL) {
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d101      	bne.n	8000d56 <AIC3X_WriteDACPowerControl+0x14>
	return HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	e035      	b.n	8000dc2 <AIC3X_WriteDACPowerControl+0x80>
}

if (pDACPowerControl == NULL) {
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d101      	bne.n	8000d60 <AIC3X_WriteDACPowerControl+0x1e>
	return HAL_ERROR;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	e030      	b.n	8000dc2 <AIC3X_WriteDACPowerControl+0x80>
}

uint8_t readBuffer;
HAL_StatusTypeDef status;

status = AIC3X_ReadData(haic3x, DAC_PWR, &readBuffer, sizeof(readBuffer));
 8000d60:	f107 020e 	add.w	r2, r7, #14
 8000d64:	2301      	movs	r3, #1
 8000d66:	2125      	movs	r1, #37	@ 0x25
 8000d68:	6878      	ldr	r0, [r7, #4]
 8000d6a:	f7ff fd67 	bl	800083c <AIC3X_ReadData>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	73fb      	strb	r3, [r7, #15]

if (status != HAL_OK) {
 8000d72:	7bfb      	ldrb	r3, [r7, #15]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <AIC3X_WriteDACPowerControl+0x3a>
	return status;
 8000d78:	7bfb      	ldrb	r3, [r7, #15]
 8000d7a:	e022      	b.n	8000dc2 <AIC3X_WriteDACPowerControl+0x80>
}

uint8_t writeBuffer = readBuffer
		& (~(AIC3X_LEFT_DAC_POWER_MASK | AIC3X_RIGHT_DAC_POWER_MASK));
 8000d7c:	7bbb      	ldrb	r3, [r7, #14]
 8000d7e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000d82:	b2db      	uxtb	r3, r3
uint8_t writeBuffer = readBuffer
 8000d84:	737b      	strb	r3, [r7, #13]

writeBuffer |= pDACPowerControl->LeftDACPoweredUp << 7;
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	b25b      	sxtb	r3, r3
 8000d8c:	01db      	lsls	r3, r3, #7
 8000d8e:	b25a      	sxtb	r2, r3
 8000d90:	7b7b      	ldrb	r3, [r7, #13]
 8000d92:	b25b      	sxtb	r3, r3
 8000d94:	4313      	orrs	r3, r2
 8000d96:	b25b      	sxtb	r3, r3
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	737b      	strb	r3, [r7, #13]
writeBuffer |= pDACPowerControl->RightDACPoweredUp << 6;
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	785b      	ldrb	r3, [r3, #1]
 8000da0:	b25b      	sxtb	r3, r3
 8000da2:	019b      	lsls	r3, r3, #6
 8000da4:	b25a      	sxtb	r2, r3
 8000da6:	7b7b      	ldrb	r3, [r7, #13]
 8000da8:	b25b      	sxtb	r3, r3
 8000daa:	4313      	orrs	r3, r2
 8000dac:	b25b      	sxtb	r3, r3
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	737b      	strb	r3, [r7, #13]

return AIC3X_WriteData(haic3x, DAC_PWR, &writeBuffer, sizeof(writeBuffer));
 8000db2:	f107 020d 	add.w	r2, r7, #13
 8000db6:	2301      	movs	r3, #1
 8000db8:	2125      	movs	r1, #37	@ 0x25
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	f7ff fd66 	bl	800088c <AIC3X_WriteData>
 8000dc0:	4603      	mov	r3, r0
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3710      	adds	r7, #16
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <AIC3X_WriteVolControl>:

return HAL_OK;
}

HAL_StatusTypeDef AIC3X_WriteVolControl(AIC3X_HandleTypeDef *haic3x,
	uint8_t reg, AIC3X_VolControl_TypeDef *pVolControl) {
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b086      	sub	sp, #24
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	60f8      	str	r0, [r7, #12]
 8000dd2:	460b      	mov	r3, r1
 8000dd4:	607a      	str	r2, [r7, #4]
 8000dd6:	72fb      	strb	r3, [r7, #11]
if (haic3x == NULL) {
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d101      	bne.n	8000de2 <AIC3X_WriteVolControl+0x18>
	return HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
 8000de0:	e03a      	b.n	8000e58 <AIC3X_WriteVolControl+0x8e>
}

if (pVolControl == NULL) {
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d101      	bne.n	8000dec <AIC3X_WriteVolControl+0x22>
	return HAL_ERROR;
 8000de8:	2301      	movs	r3, #1
 8000dea:	e035      	b.n	8000e58 <AIC3X_WriteVolControl+0x8e>
}

if (pVolControl->Volume > 127) {
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	785b      	ldrb	r3, [r3, #1]
 8000df0:	b25b      	sxtb	r3, r3
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	da01      	bge.n	8000dfa <AIC3X_WriteVolControl+0x30>
	return HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
 8000df8:	e02e      	b.n	8000e58 <AIC3X_WriteVolControl+0x8e>
}

uint8_t writeBuffer = 0;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	75fb      	strb	r3, [r7, #23]
if(reg == LDAC_VOL || reg == RDAC_VOL)
 8000dfe:	7afb      	ldrb	r3, [r7, #11]
 8000e00:	2b2b      	cmp	r3, #43	@ 0x2b
 8000e02:	d002      	beq.n	8000e0a <AIC3X_WriteVolControl+0x40>
 8000e04:	7afb      	ldrb	r3, [r7, #11]
 8000e06:	2b2c      	cmp	r3, #44	@ 0x2c
 8000e08:	d10b      	bne.n	8000e22 <AIC3X_WriteVolControl+0x58>
{
	writeBuffer |= pVolControl->Muted << 7;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	b25b      	sxtb	r3, r3
 8000e10:	01db      	lsls	r3, r3, #7
 8000e12:	b25a      	sxtb	r2, r3
 8000e14:	7dfb      	ldrb	r3, [r7, #23]
 8000e16:	b25b      	sxtb	r3, r3
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	b25b      	sxtb	r3, r3
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	75fb      	strb	r3, [r7, #23]
 8000e20:	e009      	b.n	8000e36 <AIC3X_WriteVolControl+0x6c>
}
else
{
	writeBuffer |= ((~pVolControl->Muted ) << 7) & AIC3X_VOL_MUTED_MASK ;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	43db      	mvns	r3, r3
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	01db      	lsls	r3, r3, #7
 8000e2c:	b2da      	uxtb	r2, r3
 8000e2e:	7dfb      	ldrb	r3, [r7, #23]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	75fb      	strb	r3, [r7, #23]
}
writeBuffer |= pVolControl->Volume & AIC3X_VOL_MASK;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	785b      	ldrb	r3, [r3, #1]
 8000e3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000e3e:	b2da      	uxtb	r2, r3
 8000e40:	7dfb      	ldrb	r3, [r7, #23]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	75fb      	strb	r3, [r7, #23]

return AIC3X_WriteData(haic3x, reg, (uint8_t*) &writeBuffer,
 8000e48:	f107 0217 	add.w	r2, r7, #23
 8000e4c:	7af9      	ldrb	r1, [r7, #11]
 8000e4e:	2301      	movs	r3, #1
 8000e50:	68f8      	ldr	r0, [r7, #12]
 8000e52:	f7ff fd1b 	bl	800088c <AIC3X_WriteData>
 8000e56:	4603      	mov	r3, r0
		sizeof(writeBuffer));
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3718      	adds	r7, #24
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <AIC3X_WriteOutputLevelControl>:

return HAL_OK;
}

HAL_StatusTypeDef AIC3X_WriteOutputLevelControl(AIC3X_HandleTypeDef *haic3x,
	uint8_t reg, AIC3X_OutputLevelControl_TypeDef *pOutputLevelControl) {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b086      	sub	sp, #24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	60f8      	str	r0, [r7, #12]
 8000e68:	460b      	mov	r3, r1
 8000e6a:	607a      	str	r2, [r7, #4]
 8000e6c:	72fb      	strb	r3, [r7, #11]
if (haic3x == NULL) {
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d101      	bne.n	8000e78 <AIC3X_WriteOutputLevelControl+0x18>
	return HAL_ERROR;
 8000e74:	2301      	movs	r3, #1
 8000e76:	e04a      	b.n	8000f0e <AIC3X_WriteOutputLevelControl+0xae>
}

if (pOutputLevelControl == NULL) {
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d101      	bne.n	8000e82 <AIC3X_WriteOutputLevelControl+0x22>
	return HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e045      	b.n	8000f0e <AIC3X_WriteOutputLevelControl+0xae>
}

if(pOutputLevelControl->Level > 9)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	2b09      	cmp	r3, #9
 8000e88:	d901      	bls.n	8000e8e <AIC3X_WriteOutputLevelControl+0x2e>
{
	return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e03f      	b.n	8000f0e <AIC3X_WriteOutputLevelControl+0xae>
}

uint8_t writeBuffer = 0;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	75fb      	strb	r3, [r7, #23]

writeBuffer |= pOutputLevelControl->Level << 4;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	b25b      	sxtb	r3, r3
 8000e98:	011b      	lsls	r3, r3, #4
 8000e9a:	b25a      	sxtb	r2, r3
 8000e9c:	7dfb      	ldrb	r3, [r7, #23]
 8000e9e:	b25b      	sxtb	r3, r3
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	b25b      	sxtb	r3, r3
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	75fb      	strb	r3, [r7, #23]
writeBuffer |= (!pOutputLevelControl->Muted) << 3;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	785b      	ldrb	r3, [r3, #1]
 8000eac:	f083 0301 	eor.w	r3, r3, #1
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	b25b      	sxtb	r3, r3
 8000eb4:	00db      	lsls	r3, r3, #3
 8000eb6:	b25a      	sxtb	r2, r3
 8000eb8:	7dfb      	ldrb	r3, [r7, #23]
 8000eba:	b25b      	sxtb	r3, r3
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	b25b      	sxtb	r3, r3
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	75fb      	strb	r3, [r7, #23]
writeBuffer |= pOutputLevelControl->PowerDownDriveControl << 2;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	789b      	ldrb	r3, [r3, #2]
 8000ec8:	b25b      	sxtb	r3, r3
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	b25a      	sxtb	r2, r3
 8000ece:	7dfb      	ldrb	r3, [r7, #23]
 8000ed0:	b25b      	sxtb	r3, r3
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	b25b      	sxtb	r3, r3
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	75fb      	strb	r3, [r7, #23]
writeBuffer |= pOutputLevelControl->VolumeControlStatus << 1;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	78db      	ldrb	r3, [r3, #3]
 8000ede:	b25b      	sxtb	r3, r3
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	b25a      	sxtb	r2, r3
 8000ee4:	7dfb      	ldrb	r3, [r7, #23]
 8000ee6:	b25b      	sxtb	r3, r3
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	b25b      	sxtb	r3, r3
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	75fb      	strb	r3, [r7, #23]
writeBuffer |= pOutputLevelControl->PowerControl;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	791b      	ldrb	r3, [r3, #4]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	7dfb      	ldrb	r3, [r7, #23]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	75fb      	strb	r3, [r7, #23]

return AIC3X_WriteData(haic3x, reg, (uint8_t*) &writeBuffer,
 8000efe:	f107 0217 	add.w	r2, r7, #23
 8000f02:	7af9      	ldrb	r1, [r7, #11]
 8000f04:	2301      	movs	r3, #1
 8000f06:	68f8      	ldr	r0, [r7, #12]
 8000f08:	f7ff fcc0 	bl	800088c <AIC3X_WriteData>
 8000f0c:	4603      	mov	r3, r0
		sizeof(writeBuffer));
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3718      	adds	r7, #24
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
	...

08000f18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af02      	add	r7, sp, #8
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/

	timeout = 0xFFFF;
 8000f1e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f22:	60fb      	str	r3, [r7, #12]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0))
 8000f24:	bf00      	nop
 8000f26:	4b83      	ldr	r3, [pc, #524]	@ (8001134 <main+0x21c>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d004      	beq.n	8000f3c <main+0x24>
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	1e5a      	subs	r2, r3, #1
 8000f36:	60fa      	str	r2, [r7, #12]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	dcf4      	bgt.n	8000f26 <main+0xe>
		;
	if (timeout < 0) {
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	da01      	bge.n	8000f46 <main+0x2e>
		Error_Handler();
 8000f42:	f001 fe2d 	bl	8002ba0 <Error_Handler>
	}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f46:	f002 f941 	bl	80031cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f4a:	f000 fb5b 	bl	8001604 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000f4e:	f000 fbd7 	bl	8001700 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
	 HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8000f52:	4b78      	ldr	r3, [pc, #480]	@ (8001134 <main+0x21c>)
 8000f54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f58:	4a76      	ldr	r2, [pc, #472]	@ (8001134 <main+0x21c>)
 8000f5a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f5e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f62:	4b74      	ldr	r3, [pc, #464]	@ (8001134 <main+0x21c>)
 8000f64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f6c:	607b      	str	r3, [r7, #4]
 8000f6e:	687b      	ldr	r3, [r7, #4]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8000f70:	2000      	movs	r0, #0
 8000f72:	f004 febd 	bl	8005cf0 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0, 0);
 8000f76:	2100      	movs	r1, #0
 8000f78:	2000      	movs	r0, #0
 8000f7a:	f004 fed3 	bl	8005d24 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 8000f7e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f82:	60fb      	str	r3, [r7, #12]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0))
 8000f84:	bf00      	nop
 8000f86:	4b6b      	ldr	r3, [pc, #428]	@ (8001134 <main+0x21c>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d104      	bne.n	8000f9c <main+0x84>
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	1e5a      	subs	r2, r3, #1
 8000f96:	60fa      	str	r2, [r7, #12]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	dcf4      	bgt.n	8000f86 <main+0x6e>
		;
	if (timeout < 0) {
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	da01      	bge.n	8000fa6 <main+0x8e>
		Error_Handler();
 8000fa2:	f001 fdfd 	bl	8002ba0 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_DMA_Init();
 8000fa6:	f000 fcc7 	bl	8001938 <MX_DMA_Init>
  MX_GPIO_Init();
 8000faa:	f001 fa99 	bl	80024e0 <MX_GPIO_Init>
  MX_MDMA_Init();
 8000fae:	f000 fceb 	bl	8001988 <MX_MDMA_Init>
  MX_SAI1_Init();
 8000fb2:	f000 fc13 	bl	80017dc <MX_SAI1_Init>
  MX_I2C2_Init();
 8000fb6:	f000 fbd3 	bl	8001760 <MX_I2C2_Init>
  MX_USART3_UART_Init();
 8000fba:	f000 fc71 	bl	80018a0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_StatusTypeDef status;
  HAL_StatusTypeDef saiStatus;

	saiStatus = HAL_SAI_Init(&hsai_BlockA1);
 8000fbe:	485e      	ldr	r0, [pc, #376]	@ (8001138 <main+0x220>)
 8000fc0:	f009 fff8 	bl	800afb4 <HAL_SAI_Init>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	72bb      	strb	r3, [r7, #10]
	saiStatus = HAL_SAI_Init(&hsai_BlockB1);
 8000fc8:	485c      	ldr	r0, [pc, #368]	@ (800113c <main+0x224>)
 8000fca:	f009 fff3 	bl	800afb4 <HAL_SAI_Init>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	72bb      	strb	r3, [r7, #10]
	__HAL_SAI_ENABLE(&hsai_BlockA1);
 8000fd2:	4b59      	ldr	r3, [pc, #356]	@ (8001138 <main+0x220>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	4b57      	ldr	r3, [pc, #348]	@ (8001138 <main+0x220>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000fe0:	601a      	str	r2, [r3, #0]
	__HAL_SAI_ENABLE(&hsai_BlockB1);
 8000fe2:	4b56      	ldr	r3, [pc, #344]	@ (800113c <main+0x224>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	4b54      	ldr	r3, [pc, #336]	@ (800113c <main+0x224>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000ff0:	601a      	str	r2, [r3, #0]
	SET_BIT(audio_rx_status, AUDIO_STATUS_L_HALF_PENDING);
 8000ff2:	4b53      	ldr	r3, [pc, #332]	@ (8001140 <main+0x228>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	f043 0301 	orr.w	r3, r3, #1
 8000ffc:	b2da      	uxtb	r2, r3
 8000ffe:	4b50      	ldr	r3, [pc, #320]	@ (8001140 <main+0x228>)
 8001000:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1000);
 8001002:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001006:	f002 f973 	bl	80032f0 <HAL_Delay>

	status = codecSetup();
 800100a:	f001 fccb 	bl	80029a4 <codecSetup>
 800100e:	4603      	mov	r3, r0
 8001010:	727b      	strb	r3, [r7, #9]
	  if(HAL_OK != HAL_SAI_Receive_DMA(&hsai_BlockA1, (uint8_t*)sai_buffer_rx, sizeof(sai_buffer_tx)/sizeof(uint16_t)))
 8001012:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001016:	494b      	ldr	r1, [pc, #300]	@ (8001144 <main+0x22c>)
 8001018:	4847      	ldr	r0, [pc, #284]	@ (8001138 <main+0x220>)
 800101a:	f00a fb2b 	bl	800b674 <HAL_SAI_Receive_DMA>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <main+0x110>
	  {
		Error_Handler();
 8001024:	f001 fdbc 	bl	8002ba0 <Error_Handler>
	  }
	  if(HAL_OK != HAL_SAI_Transmit_DMA(&hsai_BlockB1, (uint8_t*)sai_buffer_tx, sizeof(sai_buffer_tx)/sizeof(uint16_t)))
 8001028:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800102c:	4946      	ldr	r1, [pc, #280]	@ (8001148 <main+0x230>)
 800102e:	4843      	ldr	r0, [pc, #268]	@ (800113c <main+0x224>)
 8001030:	f00a fa6a 	bl	800b508 <HAL_SAI_Transmit_DMA>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <main+0x126>
	  {
		Error_Handler();
 800103a:	f001 fdb1 	bl	8002ba0 <Error_Handler>
	  }

  /* USER CODE END 2 */

  /* Initialize User push-button without interrupt mode. */
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 800103e:	2100      	movs	r1, #0
 8001040:	2000      	movs	r0, #0
 8001042:	f002 f829 	bl	8003098 <BSP_PB_Init>
  bool halfComplete = false;
 8001046:	2300      	movs	r3, #0
 8001048:	72fb      	strb	r3, [r7, #11]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		//Check for completed SAI RX and trigger tranfers from sai to audio buffers
		if (READ_BIT(sai_status,
 800104a:	4b40      	ldr	r3, [pc, #256]	@ (800114c <main+0x234>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	b2db      	uxtb	r3, r3
 8001050:	f003 0302 	and.w	r3, r3, #2
 8001054:	2b00      	cmp	r3, #0
 8001056:	d02b      	beq.n	80010b0 <main+0x198>
				SAI_STATUS_RX_HALF_CPLT) && READ_BIT(audio_rx_status, AUDIO_STATUS_L_HALF_PENDING) == false
 8001058:	4b39      	ldr	r3, [pc, #228]	@ (8001140 <main+0x228>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	b2db      	uxtb	r3, r3
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	2b00      	cmp	r3, #0
 8001064:	d124      	bne.n	80010b0 <main+0x198>
				&& READ_BIT(audio_rx_status, AUDIO_STATUS_L_HALF_CPLT) == false) {
 8001066:	4b36      	ldr	r3, [pc, #216]	@ (8001140 <main+0x228>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	b2db      	uxtb	r3, r3
 800106c:	f003 0302 	and.w	r3, r3, #2
 8001070:	2b00      	cmp	r3, #0
 8001072:	d11d      	bne.n	80010b0 <main+0x198>
			//TODO Check if previous TX was completed

			SET_BIT(audio_rx_status, AUDIO_STATUS_L_HALF_PENDING);
 8001074:	4b32      	ldr	r3, [pc, #200]	@ (8001140 <main+0x228>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	b2db      	uxtb	r3, r3
 800107a:	f043 0301 	orr.w	r3, r3, #1
 800107e:	b2da      	uxtb	r2, r3
 8001080:	4b2f      	ldr	r3, [pc, #188]	@ (8001140 <main+0x228>)
 8001082:	701a      	strb	r2, [r3, #0]
			if (startUp) {
 8001084:	4b32      	ldr	r3, [pc, #200]	@ (8001150 <main+0x238>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	b2db      	uxtb	r3, r3
 800108a:	2b00      	cmp	r3, #0
 800108c:	d00c      	beq.n	80010a8 <main+0x190>
				startUp = false;
 800108e:	4b30      	ldr	r3, [pc, #192]	@ (8001150 <main+0x238>)
 8001090:	2200      	movs	r2, #0
 8001092:	701a      	strb	r2, [r3, #0]
				HAL_MDMA_Start_IT(&hmdma_mdma_channel0_sw_0,
 8001094:	492b      	ldr	r1, [pc, #172]	@ (8001144 <main+0x22c>)
 8001096:	4a2f      	ldr	r2, [pc, #188]	@ (8001154 <main+0x23c>)
 8001098:	2301      	movs	r3, #1
 800109a:	9300      	str	r3, [sp, #0]
 800109c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010a0:	482d      	ldr	r0, [pc, #180]	@ (8001158 <main+0x240>)
 80010a2:	f005 ff00 	bl	8006ea6 <HAL_MDMA_Start_IT>
			if (startUp) {
 80010a6:	e078      	b.n	800119a <main+0x282>
						(uint32_t) sai_buffer_rx,
						(uint32_t) audio_buffer_rx_ch1_l, AUDIO_BUFFER_SIZE / 2,
						1);
			} else {
				HAL_MDMA_GenerateSWRequest(&hmdma_mdma_channel0_sw_0);
 80010a8:	482b      	ldr	r0, [pc, #172]	@ (8001158 <main+0x240>)
 80010aa:	f005 ff7d 	bl	8006fa8 <HAL_MDMA_GenerateSWRequest>
			if (startUp) {
 80010ae:	e074      	b.n	800119a <main+0x282>
			}

		} else if (READ_BIT(audio_rx_status,
 80010b0:	4b23      	ldr	r3, [pc, #140]	@ (8001140 <main+0x228>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	f003 0302 	and.w	r3, r3, #2
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d019      	beq.n	80010f2 <main+0x1da>
				AUDIO_STATUS_L_HALF_CPLT) && READ_BIT(audio_rx_status, AUDIO_STATUS_R_HALF_PENDING) == false
 80010be:	4b20      	ldr	r3, [pc, #128]	@ (8001140 <main+0x228>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	f003 0304 	and.w	r3, r3, #4
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d112      	bne.n	80010f2 <main+0x1da>
				&& READ_BIT(audio_rx_status, AUDIO_STATUS_R_HALF_CPLT) == false) {
 80010cc:	4b1c      	ldr	r3, [pc, #112]	@ (8001140 <main+0x228>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	f003 0308 	and.w	r3, r3, #8
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d10b      	bne.n	80010f2 <main+0x1da>
			SET_BIT(audio_rx_status, AUDIO_STATUS_R_HALF_PENDING);
 80010da:	4b19      	ldr	r3, [pc, #100]	@ (8001140 <main+0x228>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	f043 0304 	orr.w	r3, r3, #4
 80010e4:	b2da      	uxtb	r2, r3
 80010e6:	4b16      	ldr	r3, [pc, #88]	@ (8001140 <main+0x228>)
 80010e8:	701a      	strb	r2, [r3, #0]

			HAL_MDMA_GenerateSWRequest(&hmdma_mdma_channel0_sw_0);
 80010ea:	481b      	ldr	r0, [pc, #108]	@ (8001158 <main+0x240>)
 80010ec:	f005 ff5c 	bl	8006fa8 <HAL_MDMA_GenerateSWRequest>
 80010f0:	e053      	b.n	800119a <main+0x282>
		} else if (READ_BIT(sai_status,
 80010f2:	4b16      	ldr	r3, [pc, #88]	@ (800114c <main+0x234>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	f003 0308 	and.w	r3, r3, #8
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d02d      	beq.n	800115c <main+0x244>
				SAI_STATUS_RX_FULL_CPLT) && READ_BIT(audio_rx_status, AUDIO_STATUS_L_PENDING) == false
 8001100:	4b0f      	ldr	r3, [pc, #60]	@ (8001140 <main+0x228>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	b2db      	uxtb	r3, r3
 8001106:	f003 0310 	and.w	r3, r3, #16
 800110a:	2b00      	cmp	r3, #0
 800110c:	d126      	bne.n	800115c <main+0x244>
				&& READ_BIT(audio_rx_status, AUDIO_STATUS_L_CPLT) == false) {
 800110e:	4b0c      	ldr	r3, [pc, #48]	@ (8001140 <main+0x228>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	b2db      	uxtb	r3, r3
 8001114:	f003 0320 	and.w	r3, r3, #32
 8001118:	2b00      	cmp	r3, #0
 800111a:	d11f      	bne.n	800115c <main+0x244>
			//TODO Check if previous TX was completed

			SET_BIT(audio_rx_status, AUDIO_STATUS_L_PENDING);
 800111c:	4b08      	ldr	r3, [pc, #32]	@ (8001140 <main+0x228>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	b2db      	uxtb	r3, r3
 8001122:	f043 0310 	orr.w	r3, r3, #16
 8001126:	b2da      	uxtb	r2, r3
 8001128:	4b05      	ldr	r3, [pc, #20]	@ (8001140 <main+0x228>)
 800112a:	701a      	strb	r2, [r3, #0]

			HAL_MDMA_GenerateSWRequest(&hmdma_mdma_channel0_sw_0);
 800112c:	480a      	ldr	r0, [pc, #40]	@ (8001158 <main+0x240>)
 800112e:	f005 ff3b 	bl	8006fa8 <HAL_MDMA_GenerateSWRequest>
 8001132:	e032      	b.n	800119a <main+0x282>
 8001134:	58024400 	.word	0x58024400
 8001138:	24000090 	.word	0x24000090
 800113c:	24000128 	.word	0x24000128
 8001140:	24000f18 	.word	0x24000f18
 8001144:	24000718 	.word	0x24000718
 8001148:	24000b18 	.word	0x24000b18
 800114c:	24000f1b 	.word	0x24000f1b
 8001150:	24000008 	.word	0x24000008
 8001154:	20000000 	.word	0x20000000
 8001158:	24000344 	.word	0x24000344
		} else if (READ_BIT(audio_rx_status,
 800115c:	4b91      	ldr	r3, [pc, #580]	@ (80013a4 <main+0x48c>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	b2db      	uxtb	r3, r3
 8001162:	f003 0320 	and.w	r3, r3, #32
 8001166:	2b00      	cmp	r3, #0
 8001168:	d017      	beq.n	800119a <main+0x282>
				AUDIO_STATUS_L_CPLT) && READ_BIT(audio_rx_status, AUDIO_STATUS_R_PENDING) == false
 800116a:	4b8e      	ldr	r3, [pc, #568]	@ (80013a4 <main+0x48c>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	b2db      	uxtb	r3, r3
 8001170:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001174:	2b00      	cmp	r3, #0
 8001176:	d110      	bne.n	800119a <main+0x282>
				&& READ_BIT(audio_rx_status, AUDIO_STATUS_R_CPLT) == false) {
 8001178:	4b8a      	ldr	r3, [pc, #552]	@ (80013a4 <main+0x48c>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	b2db      	uxtb	r3, r3
 800117e:	b25b      	sxtb	r3, r3
 8001180:	2b00      	cmp	r3, #0
 8001182:	db0a      	blt.n	800119a <main+0x282>
			SET_BIT(audio_rx_status, AUDIO_STATUS_R_PENDING);
 8001184:	4b87      	ldr	r3, [pc, #540]	@ (80013a4 <main+0x48c>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	b2db      	uxtb	r3, r3
 800118a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800118e:	b2da      	uxtb	r2, r3
 8001190:	4b84      	ldr	r3, [pc, #528]	@ (80013a4 <main+0x48c>)
 8001192:	701a      	strb	r2, [r3, #0]

			HAL_MDMA_GenerateSWRequest(&hmdma_mdma_channel0_sw_0);
 8001194:	4884      	ldr	r0, [pc, #528]	@ (80013a8 <main+0x490>)
 8001196:	f005 ff07 	bl	8006fa8 <HAL_MDMA_GenerateSWRequest>
		}

		//Check for completed audio rx transfers and run dsp

		if(READ_BIT(audio_rx_status, AUDIO_STATUS_L_HALF_CPLT)
 800119a:	4b82      	ldr	r3, [pc, #520]	@ (80013a4 <main+0x48c>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	f003 0302 	and.w	r3, r3, #2
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d02e      	beq.n	8001206 <main+0x2ee>
				&& READ_BIT(audio_dsp_status, AUDIO_STATUS_L_HALF_PENDING) == false
 80011a8:	4b80      	ldr	r3, [pc, #512]	@ (80013ac <main+0x494>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d127      	bne.n	8001206 <main+0x2ee>
				&& READ_BIT(audio_dsp_status, AUDIO_STATUS_L_HALF_CPLT) == false)
 80011b6:	4b7d      	ldr	r3, [pc, #500]	@ (80013ac <main+0x494>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	f003 0302 	and.w	r3, r3, #2
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d120      	bne.n	8001206 <main+0x2ee>
		{
			SET_BITS(audio_dsp_status, AUDIO_STATUS_L_HALF_PENDING);
 80011c4:	4b79      	ldr	r3, [pc, #484]	@ (80013ac <main+0x494>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	f043 0301 	orr.w	r3, r3, #1
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	4b76      	ldr	r3, [pc, #472]	@ (80013ac <main+0x494>)
 80011d2:	701a      	strb	r2, [r3, #0]
			CLEAR_BIT(audio_dsp_status, AUDIO_STATUS_L_HALF_CPLT);
 80011d4:	4b75      	ldr	r3, [pc, #468]	@ (80013ac <main+0x494>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	f023 0302 	bic.w	r3, r3, #2
 80011de:	b2da      	uxtb	r2, r3
 80011e0:	4b72      	ldr	r3, [pc, #456]	@ (80013ac <main+0x494>)
 80011e2:	701a      	strb	r2, [r3, #0]

			//Do DSP of left channel first half here

			CLEAR_BIT(audio_dsp_status, AUDIO_STATUS_L_HALF_PENDING);
 80011e4:	4b71      	ldr	r3, [pc, #452]	@ (80013ac <main+0x494>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	f023 0301 	bic.w	r3, r3, #1
 80011ee:	b2da      	uxtb	r2, r3
 80011f0:	4b6e      	ldr	r3, [pc, #440]	@ (80013ac <main+0x494>)
 80011f2:	701a      	strb	r2, [r3, #0]
			SET_BIT(audio_dsp_status, AUDIO_STATUS_L_HALF_CPLT);
 80011f4:	4b6d      	ldr	r3, [pc, #436]	@ (80013ac <main+0x494>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	f043 0302 	orr.w	r3, r3, #2
 80011fe:	b2da      	uxtb	r2, r3
 8001200:	4b6a      	ldr	r3, [pc, #424]	@ (80013ac <main+0x494>)
 8001202:	701a      	strb	r2, [r3, #0]
 8001204:	e09e      	b.n	8001344 <main+0x42c>
		}else if(READ_BIT(audio_rx_status, AUDIO_STATUS_R_HALF_CPLT)
 8001206:	4b67      	ldr	r3, [pc, #412]	@ (80013a4 <main+0x48c>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	b2db      	uxtb	r3, r3
 800120c:	f003 0308 	and.w	r3, r3, #8
 8001210:	2b00      	cmp	r3, #0
 8001212:	d02e      	beq.n	8001272 <main+0x35a>
				&& READ_BIT(audio_dsp_status, AUDIO_STATUS_R_HALF_PENDING) == false
 8001214:	4b65      	ldr	r3, [pc, #404]	@ (80013ac <main+0x494>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	b2db      	uxtb	r3, r3
 800121a:	f003 0304 	and.w	r3, r3, #4
 800121e:	2b00      	cmp	r3, #0
 8001220:	d127      	bne.n	8001272 <main+0x35a>
				&& READ_BIT(audio_dsp_status, AUDIO_STATUS_R_HALF_CPLT) == false)
 8001222:	4b62      	ldr	r3, [pc, #392]	@ (80013ac <main+0x494>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	b2db      	uxtb	r3, r3
 8001228:	f003 0308 	and.w	r3, r3, #8
 800122c:	2b00      	cmp	r3, #0
 800122e:	d120      	bne.n	8001272 <main+0x35a>
		{
			SET_BIT(audio_dsp_status, AUDIO_STATUS_R_HALF_PENDING);
 8001230:	4b5e      	ldr	r3, [pc, #376]	@ (80013ac <main+0x494>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	b2db      	uxtb	r3, r3
 8001236:	f043 0304 	orr.w	r3, r3, #4
 800123a:	b2da      	uxtb	r2, r3
 800123c:	4b5b      	ldr	r3, [pc, #364]	@ (80013ac <main+0x494>)
 800123e:	701a      	strb	r2, [r3, #0]
			CLEAR_BIT(audio_dsp_status, AUDIO_STATUS_R_HALF_CPLT);
 8001240:	4b5a      	ldr	r3, [pc, #360]	@ (80013ac <main+0x494>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	b2db      	uxtb	r3, r3
 8001246:	f023 0308 	bic.w	r3, r3, #8
 800124a:	b2da      	uxtb	r2, r3
 800124c:	4b57      	ldr	r3, [pc, #348]	@ (80013ac <main+0x494>)
 800124e:	701a      	strb	r2, [r3, #0]

			//Do DSP of right channel first half here

			CLEAR_BITS(audio_dsp_status, AUDIO_STATUS_R_HALF_PENDING);
 8001250:	4b56      	ldr	r3, [pc, #344]	@ (80013ac <main+0x494>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	b2db      	uxtb	r3, r3
 8001256:	f023 0304 	bic.w	r3, r3, #4
 800125a:	b2da      	uxtb	r2, r3
 800125c:	4b53      	ldr	r3, [pc, #332]	@ (80013ac <main+0x494>)
 800125e:	701a      	strb	r2, [r3, #0]
			SET_BITS(audio_dsp_status, AUDIO_STATUS_R_HALF_CPLT);
 8001260:	4b52      	ldr	r3, [pc, #328]	@ (80013ac <main+0x494>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	b2db      	uxtb	r3, r3
 8001266:	f043 0308 	orr.w	r3, r3, #8
 800126a:	b2da      	uxtb	r2, r3
 800126c:	4b4f      	ldr	r3, [pc, #316]	@ (80013ac <main+0x494>)
 800126e:	701a      	strb	r2, [r3, #0]
 8001270:	e068      	b.n	8001344 <main+0x42c>
		}
		else if(READ_BIT(audio_rx_status, AUDIO_STATUS_L_CPLT)
 8001272:	4b4c      	ldr	r3, [pc, #304]	@ (80013a4 <main+0x48c>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	b2db      	uxtb	r3, r3
 8001278:	f003 0320 	and.w	r3, r3, #32
 800127c:	2b00      	cmp	r3, #0
 800127e:	d02e      	beq.n	80012de <main+0x3c6>
				&& READ_BIT(audio_dsp_status, AUDIO_STATUS_L_PENDING) == false
 8001280:	4b4a      	ldr	r3, [pc, #296]	@ (80013ac <main+0x494>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	b2db      	uxtb	r3, r3
 8001286:	f003 0310 	and.w	r3, r3, #16
 800128a:	2b00      	cmp	r3, #0
 800128c:	d127      	bne.n	80012de <main+0x3c6>
				&& READ_BIT(audio_dsp_status, AUDIO_STATUS_L_CPLT) == false)
 800128e:	4b47      	ldr	r3, [pc, #284]	@ (80013ac <main+0x494>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	b2db      	uxtb	r3, r3
 8001294:	f003 0320 	and.w	r3, r3, #32
 8001298:	2b00      	cmp	r3, #0
 800129a:	d120      	bne.n	80012de <main+0x3c6>
		{
			SET_BITS(audio_dsp_status, AUDIO_STATUS_L_PENDING);
 800129c:	4b43      	ldr	r3, [pc, #268]	@ (80013ac <main+0x494>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	f043 0310 	orr.w	r3, r3, #16
 80012a6:	b2da      	uxtb	r2, r3
 80012a8:	4b40      	ldr	r3, [pc, #256]	@ (80013ac <main+0x494>)
 80012aa:	701a      	strb	r2, [r3, #0]
			CLEAR_BITS(audio_dsp_status, AUDIO_STATUS_L_CPLT);
 80012ac:	4b3f      	ldr	r3, [pc, #252]	@ (80013ac <main+0x494>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	f023 0320 	bic.w	r3, r3, #32
 80012b6:	b2da      	uxtb	r2, r3
 80012b8:	4b3c      	ldr	r3, [pc, #240]	@ (80013ac <main+0x494>)
 80012ba:	701a      	strb	r2, [r3, #0]

			//Do DSP of left channel second half here

			CLEAR_BITS(audio_dsp_status, AUDIO_STATUS_L_PENDING);
 80012bc:	4b3b      	ldr	r3, [pc, #236]	@ (80013ac <main+0x494>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	f023 0310 	bic.w	r3, r3, #16
 80012c6:	b2da      	uxtb	r2, r3
 80012c8:	4b38      	ldr	r3, [pc, #224]	@ (80013ac <main+0x494>)
 80012ca:	701a      	strb	r2, [r3, #0]
			SET_BITS(audio_dsp_status, AUDIO_STATUS_L_CPLT);
 80012cc:	4b37      	ldr	r3, [pc, #220]	@ (80013ac <main+0x494>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	f043 0320 	orr.w	r3, r3, #32
 80012d6:	b2da      	uxtb	r2, r3
 80012d8:	4b34      	ldr	r3, [pc, #208]	@ (80013ac <main+0x494>)
 80012da:	701a      	strb	r2, [r3, #0]
 80012dc:	e032      	b.n	8001344 <main+0x42c>
		}else if(READ_BIT(audio_rx_status, AUDIO_STATUS_R_CPLT)
 80012de:	4b31      	ldr	r3, [pc, #196]	@ (80013a4 <main+0x48c>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	b25b      	sxtb	r3, r3
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	da2c      	bge.n	8001344 <main+0x42c>
				&& READ_BIT(audio_dsp_status, AUDIO_STATUS_R_PENDING) == false
 80012ea:	4b30      	ldr	r3, [pc, #192]	@ (80013ac <main+0x494>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d125      	bne.n	8001344 <main+0x42c>
				&& READ_BIT(audio_dsp_status, AUDIO_STATUS_R_CPLT) == false)
 80012f8:	4b2c      	ldr	r3, [pc, #176]	@ (80013ac <main+0x494>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	b25b      	sxtb	r3, r3
 8001300:	2b00      	cmp	r3, #0
 8001302:	db1f      	blt.n	8001344 <main+0x42c>
		{
			SET_BITS(audio_dsp_status, AUDIO_STATUS_R_PENDING);
 8001304:	4b29      	ldr	r3, [pc, #164]	@ (80013ac <main+0x494>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	b2db      	uxtb	r3, r3
 800130a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800130e:	b2da      	uxtb	r2, r3
 8001310:	4b26      	ldr	r3, [pc, #152]	@ (80013ac <main+0x494>)
 8001312:	701a      	strb	r2, [r3, #0]
			CLEAR_BITS(audio_dsp_status, AUDIO_STATUS_R_CPLT);
 8001314:	4b25      	ldr	r3, [pc, #148]	@ (80013ac <main+0x494>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	b2db      	uxtb	r3, r3
 800131a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800131e:	b2da      	uxtb	r2, r3
 8001320:	4b22      	ldr	r3, [pc, #136]	@ (80013ac <main+0x494>)
 8001322:	701a      	strb	r2, [r3, #0]

			//Do DSP of left channel second half here

			CLEAR_BITS(audio_dsp_status, AUDIO_STATUS_R_PENDING);
 8001324:	4b21      	ldr	r3, [pc, #132]	@ (80013ac <main+0x494>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	b2db      	uxtb	r3, r3
 800132a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800132e:	b2da      	uxtb	r2, r3
 8001330:	4b1e      	ldr	r3, [pc, #120]	@ (80013ac <main+0x494>)
 8001332:	701a      	strb	r2, [r3, #0]
			SET_BITS(audio_dsp_status, AUDIO_STATUS_R_CPLT);
 8001334:	4b1d      	ldr	r3, [pc, #116]	@ (80013ac <main+0x494>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	b2db      	uxtb	r3, r3
 800133a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800133e:	b2da      	uxtb	r2, r3
 8001340:	4b1a      	ldr	r3, [pc, #104]	@ (80013ac <main+0x494>)
 8001342:	701a      	strb	r2, [r3, #0]
		}

		//check for completed dsp and trigger tranfers from audio to sai buffer
		if(READ_BIT(audio_dsp_status, AUDIO_STATUS_L_HALF_CPLT)
 8001344:	4b19      	ldr	r3, [pc, #100]	@ (80013ac <main+0x494>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	b2db      	uxtb	r3, r3
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	2b00      	cmp	r3, #0
 8001350:	d030      	beq.n	80013b4 <main+0x49c>
				&& READ_BIT(audio_rx_status, AUDIO_STATUS_R_HALF_CPLT)
 8001352:	4b14      	ldr	r3, [pc, #80]	@ (80013a4 <main+0x48c>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	b2db      	uxtb	r3, r3
 8001358:	f003 0308 	and.w	r3, r3, #8
 800135c:	2b00      	cmp	r3, #0
 800135e:	d029      	beq.n	80013b4 <main+0x49c>
				&& READ_BIT(audio_tx_status, AUDIO_STATUS_L_HALF_PENDING) == false
 8001360:	4b13      	ldr	r3, [pc, #76]	@ (80013b0 <main+0x498>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	b2db      	uxtb	r3, r3
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	2b00      	cmp	r3, #0
 800136c:	d122      	bne.n	80013b4 <main+0x49c>
				&& READ_BIT(audio_tx_status, AUDIO_STATUS_L_HALF_CPLT) == false)
 800136e:	4b10      	ldr	r3, [pc, #64]	@ (80013b0 <main+0x498>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	b2db      	uxtb	r3, r3
 8001374:	f003 0302 	and.w	r3, r3, #2
 8001378:	2b00      	cmp	r3, #0
 800137a:	d11b      	bne.n	80013b4 <main+0x49c>
		{
			SET_BITS(audio_tx_status, AUDIO_STATUS_L_HALF_PENDING);
 800137c:	4b0c      	ldr	r3, [pc, #48]	@ (80013b0 <main+0x498>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	b2db      	uxtb	r3, r3
 8001382:	f043 0301 	orr.w	r3, r3, #1
 8001386:	b2da      	uxtb	r2, r3
 8001388:	4b09      	ldr	r3, [pc, #36]	@ (80013b0 <main+0x498>)
 800138a:	701a      	strb	r2, [r3, #0]
			CLEAR_BITS(audio_tx_status, AUDIO_STATUS_L_HALF_CPLT);
 800138c:	4b08      	ldr	r3, [pc, #32]	@ (80013b0 <main+0x498>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	b2db      	uxtb	r3, r3
 8001392:	f023 0302 	bic.w	r3, r3, #2
 8001396:	b2da      	uxtb	r2, r3
 8001398:	4b05      	ldr	r3, [pc, #20]	@ (80013b0 <main+0x498>)
 800139a:	701a      	strb	r2, [r3, #0]
			HAL_MDMA_GenerateSWRequest(&hmdma_mdma_channel0_sw_0);
 800139c:	4802      	ldr	r0, [pc, #8]	@ (80013a8 <main+0x490>)
 800139e:	f005 fe03 	bl	8006fa8 <HAL_MDMA_GenerateSWRequest>
 80013a2:	e093      	b.n	80014cc <main+0x5b4>
 80013a4:	24000f18 	.word	0x24000f18
 80013a8:	24000344 	.word	0x24000344
 80013ac:	24000f19 	.word	0x24000f19
 80013b0:	24000f1a 	.word	0x24000f1a
		}else if(READ_BIT(audio_dsp_status, AUDIO_STATUS_R_HALF_CPLT) &&
 80013b4:	4b8e      	ldr	r3, [pc, #568]	@ (80015f0 <main+0x6d8>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	f003 0308 	and.w	r3, r3, #8
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d028      	beq.n	8001414 <main+0x4fc>
				READ_BIT(audio_tx_status, AUDIO_STATUS_L_HALF_CPLT)
 80013c2:	4b8c      	ldr	r3, [pc, #560]	@ (80015f4 <main+0x6dc>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	f003 0302 	and.w	r3, r3, #2
		}else if(READ_BIT(audio_dsp_status, AUDIO_STATUS_R_HALF_CPLT) &&
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d021      	beq.n	8001414 <main+0x4fc>
				&& READ_BIT(audio_tx_status, AUDIO_STATUS_R_HALF_PENDING) == false
 80013d0:	4b88      	ldr	r3, [pc, #544]	@ (80015f4 <main+0x6dc>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	f003 0304 	and.w	r3, r3, #4
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d11a      	bne.n	8001414 <main+0x4fc>
				&& READ_BIT(audio_tx_status, AUDIO_STATUS_R_HALF_CPLT) == false)
 80013de:	4b85      	ldr	r3, [pc, #532]	@ (80015f4 <main+0x6dc>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	f003 0308 	and.w	r3, r3, #8
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d113      	bne.n	8001414 <main+0x4fc>
		{
			SET_BITS(audio_tx_status, AUDIO_STATUS_R_HALF_PENDING);
 80013ec:	4b81      	ldr	r3, [pc, #516]	@ (80015f4 <main+0x6dc>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	f043 0304 	orr.w	r3, r3, #4
 80013f6:	b2da      	uxtb	r2, r3
 80013f8:	4b7e      	ldr	r3, [pc, #504]	@ (80015f4 <main+0x6dc>)
 80013fa:	701a      	strb	r2, [r3, #0]
			CLEAR_BITS(audio_tx_status, AUDIO_STATUS_R_HALF_CPLT);
 80013fc:	4b7d      	ldr	r3, [pc, #500]	@ (80015f4 <main+0x6dc>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	b2db      	uxtb	r3, r3
 8001402:	f023 0308 	bic.w	r3, r3, #8
 8001406:	b2da      	uxtb	r2, r3
 8001408:	4b7a      	ldr	r3, [pc, #488]	@ (80015f4 <main+0x6dc>)
 800140a:	701a      	strb	r2, [r3, #0]
			HAL_MDMA_GenerateSWRequest(&hmdma_mdma_channel0_sw_0);
 800140c:	487a      	ldr	r0, [pc, #488]	@ (80015f8 <main+0x6e0>)
 800140e:	f005 fdcb 	bl	8006fa8 <HAL_MDMA_GenerateSWRequest>
 8001412:	e05b      	b.n	80014cc <main+0x5b4>
		}else if(READ_BIT(audio_dsp_status, AUDIO_STATUS_L_CPLT) &&
 8001414:	4b76      	ldr	r3, [pc, #472]	@ (80015f0 <main+0x6d8>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	b2db      	uxtb	r3, r3
 800141a:	f003 0320 	and.w	r3, r3, #32
 800141e:	2b00      	cmp	r3, #0
 8001420:	d027      	beq.n	8001472 <main+0x55a>
 8001422:	4b76      	ldr	r3, [pc, #472]	@ (80015fc <main+0x6e4>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	b2db      	uxtb	r3, r3
 8001428:	b25b      	sxtb	r3, r3
 800142a:	2b00      	cmp	r3, #0
 800142c:	da21      	bge.n	8001472 <main+0x55a>
				READ_BIT(audio_rx_status, AUDIO_STATUS_R_CPLT)
				&& READ_BIT(audio_tx_status, AUDIO_STATUS_L_PENDING) == false
 800142e:	4b71      	ldr	r3, [pc, #452]	@ (80015f4 <main+0x6dc>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	b2db      	uxtb	r3, r3
 8001434:	f003 0310 	and.w	r3, r3, #16
 8001438:	2b00      	cmp	r3, #0
 800143a:	d11a      	bne.n	8001472 <main+0x55a>
				&& READ_BIT(audio_tx_status, AUDIO_STATUS_L_CPLT) == false)
 800143c:	4b6d      	ldr	r3, [pc, #436]	@ (80015f4 <main+0x6dc>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	b2db      	uxtb	r3, r3
 8001442:	f003 0320 	and.w	r3, r3, #32
 8001446:	2b00      	cmp	r3, #0
 8001448:	d113      	bne.n	8001472 <main+0x55a>
		{
			SET_BITS(audio_tx_status, AUDIO_STATUS_L_PENDING);
 800144a:	4b6a      	ldr	r3, [pc, #424]	@ (80015f4 <main+0x6dc>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	b2db      	uxtb	r3, r3
 8001450:	f043 0310 	orr.w	r3, r3, #16
 8001454:	b2da      	uxtb	r2, r3
 8001456:	4b67      	ldr	r3, [pc, #412]	@ (80015f4 <main+0x6dc>)
 8001458:	701a      	strb	r2, [r3, #0]
			CLEAR_BITS(audio_tx_status, AUDIO_STATUS_L_CPLT);
 800145a:	4b66      	ldr	r3, [pc, #408]	@ (80015f4 <main+0x6dc>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	b2db      	uxtb	r3, r3
 8001460:	f023 0320 	bic.w	r3, r3, #32
 8001464:	b2da      	uxtb	r2, r3
 8001466:	4b63      	ldr	r3, [pc, #396]	@ (80015f4 <main+0x6dc>)
 8001468:	701a      	strb	r2, [r3, #0]
			HAL_MDMA_GenerateSWRequest(&hmdma_mdma_channel0_sw_0);
 800146a:	4863      	ldr	r0, [pc, #396]	@ (80015f8 <main+0x6e0>)
 800146c:	f005 fd9c 	bl	8006fa8 <HAL_MDMA_GenerateSWRequest>
 8001470:	e02c      	b.n	80014cc <main+0x5b4>
		}else if(READ_BIT(audio_dsp_status, AUDIO_STATUS_R_CPLT) &&
 8001472:	4b5f      	ldr	r3, [pc, #380]	@ (80015f0 <main+0x6d8>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	b2db      	uxtb	r3, r3
 8001478:	b25b      	sxtb	r3, r3
 800147a:	2b00      	cmp	r3, #0
 800147c:	da26      	bge.n	80014cc <main+0x5b4>
				READ_BIT(audio_tx_status, AUDIO_STATUS_L_CPLT)
 800147e:	4b5d      	ldr	r3, [pc, #372]	@ (80015f4 <main+0x6dc>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	b2db      	uxtb	r3, r3
 8001484:	f003 0320 	and.w	r3, r3, #32
		}else if(READ_BIT(audio_dsp_status, AUDIO_STATUS_R_CPLT) &&
 8001488:	2b00      	cmp	r3, #0
 800148a:	d01f      	beq.n	80014cc <main+0x5b4>
				&& READ_BIT(audio_tx_status, AUDIO_STATUS_R_PENDING) == false
 800148c:	4b59      	ldr	r3, [pc, #356]	@ (80015f4 <main+0x6dc>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	b2db      	uxtb	r3, r3
 8001492:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001496:	2b00      	cmp	r3, #0
 8001498:	d118      	bne.n	80014cc <main+0x5b4>
				&& READ_BIT(audio_tx_status, AUDIO_STATUS_R_CPLT) == false)
 800149a:	4b56      	ldr	r3, [pc, #344]	@ (80015f4 <main+0x6dc>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	b25b      	sxtb	r3, r3
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	db12      	blt.n	80014cc <main+0x5b4>
		{
			SET_BITS(audio_tx_status, AUDIO_STATUS_R_PENDING);
 80014a6:	4b53      	ldr	r3, [pc, #332]	@ (80015f4 <main+0x6dc>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014b0:	b2da      	uxtb	r2, r3
 80014b2:	4b50      	ldr	r3, [pc, #320]	@ (80015f4 <main+0x6dc>)
 80014b4:	701a      	strb	r2, [r3, #0]
			CLEAR_BITS(audio_tx_status, AUDIO_STATUS_R_CPLT);
 80014b6:	4b4f      	ldr	r3, [pc, #316]	@ (80015f4 <main+0x6dc>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80014c0:	b2da      	uxtb	r2, r3
 80014c2:	4b4c      	ldr	r3, [pc, #304]	@ (80015f4 <main+0x6dc>)
 80014c4:	701a      	strb	r2, [r3, #0]
			HAL_MDMA_GenerateSWRequest(&hmdma_mdma_channel0_sw_0);
 80014c6:	484c      	ldr	r0, [pc, #304]	@ (80015f8 <main+0x6e0>)
 80014c8:	f005 fd6e 	bl	8006fa8 <HAL_MDMA_GenerateSWRequest>
		}
		if(BSP_PB_GetState(BUTTON_USER) == GPIO_PIN_SET){
 80014cc:	2000      	movs	r0, #0
 80014ce:	f001 fe55 	bl	800317c <BSP_PB_GetState>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	f47f adb8 	bne.w	800104a <main+0x132>
		halfComplete = halfComplete==false;
 80014da:	7afb      	ldrb	r3, [r7, #11]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	bf14      	ite	ne
 80014e0:	2301      	movne	r3, #1
 80014e2:	2300      	moveq	r3, #0
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	f083 0301 	eor.w	r3, r3, #1
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	72fb      	strb	r3, [r7, #11]
 80014ee:	7afb      	ldrb	r3, [r7, #11]
 80014f0:	f003 0301 	and.w	r3, r3, #1
 80014f4:	72fb      	strb	r3, [r7, #11]

		if(halfComplete){
 80014f6:	7afb      	ldrb	r3, [r7, #11]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d038      	beq.n	800156e <main+0x656>

			CLEAR_BIT(sai_status, SAI_STATUS_RX_HALF_PENDING);
 80014fc:	4b40      	ldr	r3, [pc, #256]	@ (8001600 <main+0x6e8>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	b2db      	uxtb	r3, r3
 8001502:	f023 0301 	bic.w	r3, r3, #1
 8001506:	b2da      	uxtb	r2, r3
 8001508:	4b3d      	ldr	r3, [pc, #244]	@ (8001600 <main+0x6e8>)
 800150a:	701a      	strb	r2, [r3, #0]
			SET_BIT(sai_status, SAI_STATUS_RX_HALF_CPLT);
 800150c:	4b3c      	ldr	r3, [pc, #240]	@ (8001600 <main+0x6e8>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	b2db      	uxtb	r3, r3
 8001512:	f043 0302 	orr.w	r3, r3, #2
 8001516:	b2da      	uxtb	r2, r3
 8001518:	4b39      	ldr	r3, [pc, #228]	@ (8001600 <main+0x6e8>)
 800151a:	701a      	strb	r2, [r3, #0]
			CLEAR_BIT(sai_status, SAI_STATUS_RX_FULL_CPLT);
 800151c:	4b38      	ldr	r3, [pc, #224]	@ (8001600 <main+0x6e8>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	b2db      	uxtb	r3, r3
 8001522:	f023 0308 	bic.w	r3, r3, #8
 8001526:	b2da      	uxtb	r2, r3
 8001528:	4b35      	ldr	r3, [pc, #212]	@ (8001600 <main+0x6e8>)
 800152a:	701a      	strb	r2, [r3, #0]
			SET_BIT(sai_status, SAI_STATUS_RX_FULL_PENDING);
 800152c:	4b34      	ldr	r3, [pc, #208]	@ (8001600 <main+0x6e8>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	b2db      	uxtb	r3, r3
 8001532:	f043 0304 	orr.w	r3, r3, #4
 8001536:	b2da      	uxtb	r2, r3
 8001538:	4b31      	ldr	r3, [pc, #196]	@ (8001600 <main+0x6e8>)
 800153a:	701a      	strb	r2, [r3, #0]

			CLEAR_BIT(audio_rx_status, AUDIO_STATUS_HALF_PART);
 800153c:	4b2f      	ldr	r3, [pc, #188]	@ (80015fc <main+0x6e4>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	b2db      	uxtb	r3, r3
 8001542:	f023 030f 	bic.w	r3, r3, #15
 8001546:	b2da      	uxtb	r2, r3
 8001548:	4b2c      	ldr	r3, [pc, #176]	@ (80015fc <main+0x6e4>)
 800154a:	701a      	strb	r2, [r3, #0]
			CLEAR_BIT(audio_dsp_status, AUDIO_STATUS_HALF_PART);
 800154c:	4b28      	ldr	r3, [pc, #160]	@ (80015f0 <main+0x6d8>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	b2db      	uxtb	r3, r3
 8001552:	f023 030f 	bic.w	r3, r3, #15
 8001556:	b2da      	uxtb	r2, r3
 8001558:	4b25      	ldr	r3, [pc, #148]	@ (80015f0 <main+0x6d8>)
 800155a:	701a      	strb	r2, [r3, #0]
			CLEAR_BIT(audio_tx_status, AUDIO_STATUS_HALF_PART);
 800155c:	4b25      	ldr	r3, [pc, #148]	@ (80015f4 <main+0x6dc>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	b2db      	uxtb	r3, r3
 8001562:	f023 030f 	bic.w	r3, r3, #15
 8001566:	b2da      	uxtb	r2, r3
 8001568:	4b22      	ldr	r3, [pc, #136]	@ (80015f4 <main+0x6dc>)
 800156a:	701a      	strb	r2, [r3, #0]
 800156c:	e037      	b.n	80015de <main+0x6c6>

		}else
		{

			CLEAR_BIT(sai_status, SAI_STATUS_RX_FULL_PENDING);
 800156e:	4b24      	ldr	r3, [pc, #144]	@ (8001600 <main+0x6e8>)
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	b2db      	uxtb	r3, r3
 8001574:	f023 0304 	bic.w	r3, r3, #4
 8001578:	b2da      	uxtb	r2, r3
 800157a:	4b21      	ldr	r3, [pc, #132]	@ (8001600 <main+0x6e8>)
 800157c:	701a      	strb	r2, [r3, #0]
			SET_BIT(sai_status, SAI_STATUS_RX_FULL_CPLT);
 800157e:	4b20      	ldr	r3, [pc, #128]	@ (8001600 <main+0x6e8>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	b2db      	uxtb	r3, r3
 8001584:	f043 0308 	orr.w	r3, r3, #8
 8001588:	b2da      	uxtb	r2, r3
 800158a:	4b1d      	ldr	r3, [pc, #116]	@ (8001600 <main+0x6e8>)
 800158c:	701a      	strb	r2, [r3, #0]
			CLEAR_BIT(sai_status, SAI_STATUS_RX_HALF_CPLT);
 800158e:	4b1c      	ldr	r3, [pc, #112]	@ (8001600 <main+0x6e8>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	b2db      	uxtb	r3, r3
 8001594:	f023 0302 	bic.w	r3, r3, #2
 8001598:	b2da      	uxtb	r2, r3
 800159a:	4b19      	ldr	r3, [pc, #100]	@ (8001600 <main+0x6e8>)
 800159c:	701a      	strb	r2, [r3, #0]
			SET_BIT(sai_status, SAI_STATUS_RX_HALF_PENDING);
 800159e:	4b18      	ldr	r3, [pc, #96]	@ (8001600 <main+0x6e8>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	f043 0301 	orr.w	r3, r3, #1
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	4b15      	ldr	r3, [pc, #84]	@ (8001600 <main+0x6e8>)
 80015ac:	701a      	strb	r2, [r3, #0]

			CLEAR_BIT(audio_rx_status, AUDIO_STATUS_FULL);
 80015ae:	4b13      	ldr	r3, [pc, #76]	@ (80015fc <main+0x6e4>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	f003 030f 	and.w	r3, r3, #15
 80015b8:	b2da      	uxtb	r2, r3
 80015ba:	4b10      	ldr	r3, [pc, #64]	@ (80015fc <main+0x6e4>)
 80015bc:	701a      	strb	r2, [r3, #0]
			CLEAR_BIT(audio_dsp_status, AUDIO_STATUS_FULL);
 80015be:	4b0c      	ldr	r3, [pc, #48]	@ (80015f0 <main+0x6d8>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	f003 030f 	and.w	r3, r3, #15
 80015c8:	b2da      	uxtb	r2, r3
 80015ca:	4b09      	ldr	r3, [pc, #36]	@ (80015f0 <main+0x6d8>)
 80015cc:	701a      	strb	r2, [r3, #0]
			CLEAR_BIT(audio_tx_status, AUDIO_STATUS_FULL);
 80015ce:	4b09      	ldr	r3, [pc, #36]	@ (80015f4 <main+0x6dc>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	f003 030f 	and.w	r3, r3, #15
 80015d8:	b2da      	uxtb	r2, r3
 80015da:	4b06      	ldr	r3, [pc, #24]	@ (80015f4 <main+0x6dc>)
 80015dc:	701a      	strb	r2, [r3, #0]

		}
		HAL_Delay(2000);
 80015de:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80015e2:	f001 fe85 	bl	80032f0 <HAL_Delay>
		HAL_Delay(1);
 80015e6:	2001      	movs	r0, #1
 80015e8:	f001 fe82 	bl	80032f0 <HAL_Delay>
		if (READ_BIT(sai_status,
 80015ec:	e52d      	b.n	800104a <main+0x132>
 80015ee:	bf00      	nop
 80015f0:	24000f19 	.word	0x24000f19
 80015f4:	24000f1a 	.word	0x24000f1a
 80015f8:	24000344 	.word	0x24000344
 80015fc:	24000f18 	.word	0x24000f18
 8001600:	24000f1b 	.word	0x24000f1b

08001604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b09c      	sub	sp, #112	@ 0x70
 8001608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800160a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800160e:	224c      	movs	r2, #76	@ 0x4c
 8001610:	2100      	movs	r1, #0
 8001612:	4618      	mov	r0, r3
 8001614:	f00b fbfa 	bl	800ce0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001618:	1d3b      	adds	r3, r7, #4
 800161a:	2220      	movs	r2, #32
 800161c:	2100      	movs	r1, #0
 800161e:	4618      	mov	r0, r3
 8001620:	f00b fbf4 	bl	800ce0c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001624:	2004      	movs	r0, #4
 8001626:	f005 ff55 	bl	80074d4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800162a:	2300      	movs	r3, #0
 800162c:	603b      	str	r3, [r7, #0]
 800162e:	4b32      	ldr	r3, [pc, #200]	@ (80016f8 <SystemClock_Config+0xf4>)
 8001630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001632:	4a31      	ldr	r2, [pc, #196]	@ (80016f8 <SystemClock_Config+0xf4>)
 8001634:	f023 0301 	bic.w	r3, r3, #1
 8001638:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800163a:	4b2f      	ldr	r3, [pc, #188]	@ (80016f8 <SystemClock_Config+0xf4>)
 800163c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	603b      	str	r3, [r7, #0]
 8001644:	4b2d      	ldr	r3, [pc, #180]	@ (80016fc <SystemClock_Config+0xf8>)
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800164c:	4a2b      	ldr	r2, [pc, #172]	@ (80016fc <SystemClock_Config+0xf8>)
 800164e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001652:	6193      	str	r3, [r2, #24]
 8001654:	4b29      	ldr	r3, [pc, #164]	@ (80016fc <SystemClock_Config+0xf8>)
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800165c:	603b      	str	r3, [r7, #0]
 800165e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001660:	bf00      	nop
 8001662:	4b26      	ldr	r3, [pc, #152]	@ (80016fc <SystemClock_Config+0xf8>)
 8001664:	699b      	ldr	r3, [r3, #24]
 8001666:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800166a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800166e:	d1f8      	bne.n	8001662 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001670:	2302      	movs	r3, #2
 8001672:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001674:	2301      	movs	r3, #1
 8001676:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001678:	2340      	movs	r3, #64	@ 0x40
 800167a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800167c:	2302      	movs	r3, #2
 800167e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001680:	2300      	movs	r3, #0
 8001682:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001684:	2304      	movs	r3, #4
 8001686:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001688:	2332      	movs	r3, #50	@ 0x32
 800168a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800168c:	2302      	movs	r3, #2
 800168e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 65;
 8001690:	2341      	movs	r3, #65	@ 0x41
 8001692:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001694:	2302      	movs	r3, #2
 8001696:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001698:	230c      	movs	r3, #12
 800169a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800169c:	2300      	movs	r3, #0
 800169e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80016a0:	2300      	movs	r3, #0
 80016a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016a8:	4618      	mov	r0, r3
 80016aa:	f005 ff6d 	bl	8007588 <HAL_RCC_OscConfig>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80016b4:	f001 fa74 	bl	8002ba0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016b8:	233f      	movs	r3, #63	@ 0x3f
 80016ba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016bc:	2303      	movs	r3, #3
 80016be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV4;
 80016c0:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 80016c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80016c6:	2308      	movs	r3, #8
 80016c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80016ca:	2340      	movs	r3, #64	@ 0x40
 80016cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80016ce:	2340      	movs	r3, #64	@ 0x40
 80016d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80016d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016d6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80016d8:	2340      	movs	r3, #64	@ 0x40
 80016da:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80016dc:	1d3b      	adds	r3, r7, #4
 80016de:	2101      	movs	r1, #1
 80016e0:	4618      	mov	r0, r3
 80016e2:	f006 fbab 	bl	8007e3c <HAL_RCC_ClockConfig>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <SystemClock_Config+0xec>
  {
    Error_Handler();
 80016ec:	f001 fa58 	bl	8002ba0 <Error_Handler>
  }
}
 80016f0:	bf00      	nop
 80016f2:	3770      	adds	r7, #112	@ 0x70
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	58000400 	.word	0x58000400
 80016fc:	58024800 	.word	0x58024800

08001700 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b0b0      	sub	sp, #192	@ 0xc0
 8001704:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001706:	463b      	mov	r3, r7
 8001708:	22c0      	movs	r2, #192	@ 0xc0
 800170a:	2100      	movs	r1, #0
 800170c:	4618      	mov	r0, r3
 800170e:	f00b fb7d 	bl	800ce0c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_USART3;
 8001712:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8001716:	f04f 0300 	mov.w	r3, #0
 800171a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 5;
 800171e:	2305      	movs	r3, #5
 8001720:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 24;
 8001722:	2318      	movs	r3, #24
 8001724:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 25;
 8001726:	2319      	movs	r3, #25
 8001728:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 24;
 800172a:	2318      	movs	r3, #24
 800172c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800172e:	2302      	movs	r3, #2
 8001730:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001732:	23c0      	movs	r3, #192	@ 0xc0
 8001734:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001736:	2300      	movs	r3, #0
 8001738:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800173a:	2300      	movs	r3, #0
 800173c:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 800173e:	2301      	movs	r3, #1
 8001740:	65bb      	str	r3, [r7, #88]	@ 0x58
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL2;
 8001742:	2301      	movs	r3, #1
 8001744:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001746:	463b      	mov	r3, r7
 8001748:	4618      	mov	r0, r3
 800174a:	f006 ff03 	bl	8008554 <HAL_RCCEx_PeriphCLKConfig>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8001754:	f001 fa24 	bl	8002ba0 <Error_Handler>
  }
}
 8001758:	bf00      	nop
 800175a:	37c0      	adds	r7, #192	@ 0xc0
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001764:	4b1b      	ldr	r3, [pc, #108]	@ (80017d4 <MX_I2C2_Init+0x74>)
 8001766:	4a1c      	ldr	r2, [pc, #112]	@ (80017d8 <MX_I2C2_Init+0x78>)
 8001768:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000873;
 800176a:	4b1a      	ldr	r3, [pc, #104]	@ (80017d4 <MX_I2C2_Init+0x74>)
 800176c:	f640 0273 	movw	r2, #2163	@ 0x873
 8001770:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001772:	4b18      	ldr	r3, [pc, #96]	@ (80017d4 <MX_I2C2_Init+0x74>)
 8001774:	2200      	movs	r2, #0
 8001776:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001778:	4b16      	ldr	r3, [pc, #88]	@ (80017d4 <MX_I2C2_Init+0x74>)
 800177a:	2201      	movs	r2, #1
 800177c:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800177e:	4b15      	ldr	r3, [pc, #84]	@ (80017d4 <MX_I2C2_Init+0x74>)
 8001780:	2200      	movs	r2, #0
 8001782:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001784:	4b13      	ldr	r3, [pc, #76]	@ (80017d4 <MX_I2C2_Init+0x74>)
 8001786:	2200      	movs	r2, #0
 8001788:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800178a:	4b12      	ldr	r3, [pc, #72]	@ (80017d4 <MX_I2C2_Init+0x74>)
 800178c:	2200      	movs	r2, #0
 800178e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001790:	4b10      	ldr	r3, [pc, #64]	@ (80017d4 <MX_I2C2_Init+0x74>)
 8001792:	2200      	movs	r2, #0
 8001794:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001796:	4b0f      	ldr	r3, [pc, #60]	@ (80017d4 <MX_I2C2_Init+0x74>)
 8001798:	2200      	movs	r2, #0
 800179a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800179c:	480d      	ldr	r0, [pc, #52]	@ (80017d4 <MX_I2C2_Init+0x74>)
 800179e:	f004 fad5 	bl	8005d4c <HAL_I2C_Init>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80017a8:	f001 f9fa 	bl	8002ba0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017ac:	2100      	movs	r1, #0
 80017ae:	4809      	ldr	r0, [pc, #36]	@ (80017d4 <MX_I2C2_Init+0x74>)
 80017b0:	f005 f858 	bl	8006864 <HAL_I2CEx_ConfigAnalogFilter>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80017ba:	f001 f9f1 	bl	8002ba0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80017be:	2100      	movs	r1, #0
 80017c0:	4804      	ldr	r0, [pc, #16]	@ (80017d4 <MX_I2C2_Init+0x74>)
 80017c2:	f005 f89a 	bl	80068fa <HAL_I2CEx_ConfigDigitalFilter>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80017cc:	f001 f9e8 	bl	8002ba0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80017d0:	bf00      	nop
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	2400003c 	.word	0x2400003c
 80017d8:	40005800 	.word	0x40005800

080017dc <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 80017e0:	4b2b      	ldr	r3, [pc, #172]	@ (8001890 <MX_SAI1_Init+0xb4>)
 80017e2:	4a2c      	ldr	r2, [pc, #176]	@ (8001894 <MX_SAI1_Init+0xb8>)
 80017e4:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
 80017e6:	4b2a      	ldr	r3, [pc, #168]	@ (8001890 <MX_SAI1_Init+0xb4>)
 80017e8:	2201      	movs	r2, #1
 80017ea:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 80017ec:	4b28      	ldr	r3, [pc, #160]	@ (8001890 <MX_SAI1_Init+0xb4>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80017f2:	4b27      	ldr	r3, [pc, #156]	@ (8001890 <MX_SAI1_Init+0xb4>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MCK_OVERSAMPLING_DISABLE;
 80017f8:	4b25      	ldr	r3, [pc, #148]	@ (8001890 <MX_SAI1_Init+0xb4>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 80017fe:	4b24      	ldr	r3, [pc, #144]	@ (8001890 <MX_SAI1_Init+0xb4>)
 8001800:	2200      	movs	r2, #0
 8001802:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8001804:	4b22      	ldr	r3, [pc, #136]	@ (8001890 <MX_SAI1_Init+0xb4>)
 8001806:	2201      	movs	r2, #1
 8001808:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 800180a:	4b21      	ldr	r3, [pc, #132]	@ (8001890 <MX_SAI1_Init+0xb4>)
 800180c:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8001810:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001812:	4b1f      	ldr	r3, [pc, #124]	@ (8001890 <MX_SAI1_Init+0xb4>)
 8001814:	2200      	movs	r2, #0
 8001816:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001818:	4b1d      	ldr	r3, [pc, #116]	@ (8001890 <MX_SAI1_Init+0xb4>)
 800181a:	2200      	movs	r2, #0
 800181c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 800181e:	4b1c      	ldr	r3, [pc, #112]	@ (8001890 <MX_SAI1_Init+0xb4>)
 8001820:	2200      	movs	r2, #0
 8001822:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8001824:	2302      	movs	r3, #2
 8001826:	2200      	movs	r2, #0
 8001828:	2100      	movs	r1, #0
 800182a:	4819      	ldr	r0, [pc, #100]	@ (8001890 <MX_SAI1_Init+0xb4>)
 800182c:	f009 fb90 	bl	800af50 <HAL_SAI_InitProtocol>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_SAI1_Init+0x5e>
  {
    Error_Handler();
 8001836:	f001 f9b3 	bl	8002ba0 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 800183a:	4b17      	ldr	r3, [pc, #92]	@ (8001898 <MX_SAI1_Init+0xbc>)
 800183c:	4a17      	ldr	r2, [pc, #92]	@ (800189c <MX_SAI1_Init+0xc0>)
 800183e:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_TX;
 8001840:	4b15      	ldr	r3, [pc, #84]	@ (8001898 <MX_SAI1_Init+0xbc>)
 8001842:	2202      	movs	r2, #2
 8001844:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8001846:	4b14      	ldr	r3, [pc, #80]	@ (8001898 <MX_SAI1_Init+0xbc>)
 8001848:	2201      	movs	r2, #1
 800184a:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800184c:	4b12      	ldr	r3, [pc, #72]	@ (8001898 <MX_SAI1_Init+0xbc>)
 800184e:	2200      	movs	r2, #0
 8001850:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8001852:	4b11      	ldr	r3, [pc, #68]	@ (8001898 <MX_SAI1_Init+0xbc>)
 8001854:	2200      	movs	r2, #0
 8001856:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8001858:	4b0f      	ldr	r3, [pc, #60]	@ (8001898 <MX_SAI1_Init+0xbc>)
 800185a:	2201      	movs	r2, #1
 800185c:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800185e:	4b0e      	ldr	r3, [pc, #56]	@ (8001898 <MX_SAI1_Init+0xbc>)
 8001860:	2200      	movs	r2, #0
 8001862:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001864:	4b0c      	ldr	r3, [pc, #48]	@ (8001898 <MX_SAI1_Init+0xbc>)
 8001866:	2200      	movs	r2, #0
 8001868:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 800186a:	4b0b      	ldr	r3, [pc, #44]	@ (8001898 <MX_SAI1_Init+0xbc>)
 800186c:	2200      	movs	r2, #0
 800186e:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001870:	4b09      	ldr	r3, [pc, #36]	@ (8001898 <MX_SAI1_Init+0xbc>)
 8001872:	2200      	movs	r2, #0
 8001874:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8001876:	2302      	movs	r3, #2
 8001878:	2200      	movs	r2, #0
 800187a:	2100      	movs	r1, #0
 800187c:	4806      	ldr	r0, [pc, #24]	@ (8001898 <MX_SAI1_Init+0xbc>)
 800187e:	f009 fb67 	bl	800af50 <HAL_SAI_InitProtocol>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_SAI1_Init+0xb0>
  {
    Error_Handler();
 8001888:	f001 f98a 	bl	8002ba0 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 800188c:	bf00      	nop
 800188e:	bd80      	pop	{r7, pc}
 8001890:	24000090 	.word	0x24000090
 8001894:	40015804 	.word	0x40015804
 8001898:	24000128 	.word	0x24000128
 800189c:	40015824 	.word	0x40015824

080018a0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80018a4:	4b22      	ldr	r3, [pc, #136]	@ (8001930 <MX_USART3_UART_Init+0x90>)
 80018a6:	4a23      	ldr	r2, [pc, #140]	@ (8001934 <MX_USART3_UART_Init+0x94>)
 80018a8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80018aa:	4b21      	ldr	r3, [pc, #132]	@ (8001930 <MX_USART3_UART_Init+0x90>)
 80018ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018b0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80018b2:	4b1f      	ldr	r3, [pc, #124]	@ (8001930 <MX_USART3_UART_Init+0x90>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80018b8:	4b1d      	ldr	r3, [pc, #116]	@ (8001930 <MX_USART3_UART_Init+0x90>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80018be:	4b1c      	ldr	r3, [pc, #112]	@ (8001930 <MX_USART3_UART_Init+0x90>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80018c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001930 <MX_USART3_UART_Init+0x90>)
 80018c6:	220c      	movs	r2, #12
 80018c8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ca:	4b19      	ldr	r3, [pc, #100]	@ (8001930 <MX_USART3_UART_Init+0x90>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80018d0:	4b17      	ldr	r3, [pc, #92]	@ (8001930 <MX_USART3_UART_Init+0x90>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018d6:	4b16      	ldr	r3, [pc, #88]	@ (8001930 <MX_USART3_UART_Init+0x90>)
 80018d8:	2200      	movs	r2, #0
 80018da:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018dc:	4b14      	ldr	r3, [pc, #80]	@ (8001930 <MX_USART3_UART_Init+0x90>)
 80018de:	2200      	movs	r2, #0
 80018e0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018e2:	4b13      	ldr	r3, [pc, #76]	@ (8001930 <MX_USART3_UART_Init+0x90>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80018e8:	4811      	ldr	r0, [pc, #68]	@ (8001930 <MX_USART3_UART_Init+0x90>)
 80018ea:	f00a f9b2 	bl	800bc52 <HAL_UART_Init>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80018f4:	f001 f954 	bl	8002ba0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018f8:	2100      	movs	r1, #0
 80018fa:	480d      	ldr	r0, [pc, #52]	@ (8001930 <MX_USART3_UART_Init+0x90>)
 80018fc:	f00b f9bb 	bl	800cc76 <HAL_UARTEx_SetTxFifoThreshold>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001906:	f001 f94b 	bl	8002ba0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800190a:	2100      	movs	r1, #0
 800190c:	4808      	ldr	r0, [pc, #32]	@ (8001930 <MX_USART3_UART_Init+0x90>)
 800190e:	f00b f9f0 	bl	800ccf2 <HAL_UARTEx_SetRxFifoThreshold>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001918:	f001 f942 	bl	8002ba0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800191c:	4804      	ldr	r0, [pc, #16]	@ (8001930 <MX_USART3_UART_Init+0x90>)
 800191e:	f00b f971 	bl	800cc04 <HAL_UARTEx_DisableFifoMode>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001928:	f001 f93a 	bl	8002ba0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800192c:	bf00      	nop
 800192e:	bd80      	pop	{r7, pc}
 8001930:	240002b0 	.word	0x240002b0
 8001934:	40004800 	.word	0x40004800

08001938 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800193e:	4b11      	ldr	r3, [pc, #68]	@ (8001984 <MX_DMA_Init+0x4c>)
 8001940:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001944:	4a0f      	ldr	r2, [pc, #60]	@ (8001984 <MX_DMA_Init+0x4c>)
 8001946:	f043 0301 	orr.w	r3, r3, #1
 800194a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800194e:	4b0d      	ldr	r3, [pc, #52]	@ (8001984 <MX_DMA_Init+0x4c>)
 8001950:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001954:	f003 0301 	and.w	r3, r3, #1
 8001958:	607b      	str	r3, [r7, #4]
 800195a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800195c:	2200      	movs	r2, #0
 800195e:	2100      	movs	r1, #0
 8001960:	200b      	movs	r0, #11
 8001962:	f001 fdd0 	bl	8003506 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001966:	200b      	movs	r0, #11
 8001968:	f001 fde7 	bl	800353a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800196c:	2200      	movs	r2, #0
 800196e:	2100      	movs	r1, #0
 8001970:	200c      	movs	r0, #12
 8001972:	f001 fdc8 	bl	8003506 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001976:	200c      	movs	r0, #12
 8001978:	f001 fddf 	bl	800353a <HAL_NVIC_EnableIRQ>

}
 800197c:	bf00      	nop
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	58024400 	.word	0x58024400

08001988 <MX_MDMA_Init>:
  *   node_mdma_channel1_sw_2
  *   node_mdma_channel1_sw_3
  *   node_mdma_channel1_sw_4
  */
static void MX_MDMA_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b096      	sub	sp, #88	@ 0x58
 800198c:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 800198e:	4bb0      	ldr	r3, [pc, #704]	@ (8001c50 <MX_MDMA_Init+0x2c8>)
 8001990:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001994:	4aae      	ldr	r2, [pc, #696]	@ (8001c50 <MX_MDMA_Init+0x2c8>)
 8001996:	f043 0301 	orr.w	r3, r3, #1
 800199a:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800199e:	4bac      	ldr	r3, [pc, #688]	@ (8001c50 <MX_MDMA_Init+0x2c8>)
 80019a0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80019a4:	f003 0301 	and.w	r3, r3, #1
 80019a8:	607b      	str	r3, [r7, #4]
 80019aa:	687b      	ldr	r3, [r7, #4]
  /* Local variables */
  MDMA_LinkNodeConfTypeDef nodeConfig;

  /* Configure MDMA channel MDMA_Channel0 */
  /* Configure MDMA request hmdma_mdma_channel0_sw_0 on MDMA_Channel0 */
  hmdma_mdma_channel0_sw_0.Instance = MDMA_Channel0;
 80019ac:	4ba9      	ldr	r3, [pc, #676]	@ (8001c54 <MX_MDMA_Init+0x2cc>)
 80019ae:	4aaa      	ldr	r2, [pc, #680]	@ (8001c58 <MX_MDMA_Init+0x2d0>)
 80019b0:	601a      	str	r2, [r3, #0]
  hmdma_mdma_channel0_sw_0.Init.Request = MDMA_REQUEST_SW;
 80019b2:	4ba8      	ldr	r3, [pc, #672]	@ (8001c54 <MX_MDMA_Init+0x2cc>)
 80019b4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80019b8:	605a      	str	r2, [r3, #4]
  hmdma_mdma_channel0_sw_0.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 80019ba:	4ba6      	ldr	r3, [pc, #664]	@ (8001c54 <MX_MDMA_Init+0x2cc>)
 80019bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80019c0:	609a      	str	r2, [r3, #8]
  hmdma_mdma_channel0_sw_0.Init.Priority = MDMA_PRIORITY_HIGH;
 80019c2:	4ba4      	ldr	r3, [pc, #656]	@ (8001c54 <MX_MDMA_Init+0x2cc>)
 80019c4:	2280      	movs	r2, #128	@ 0x80
 80019c6:	60da      	str	r2, [r3, #12]
  hmdma_mdma_channel0_sw_0.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 80019c8:	4ba2      	ldr	r3, [pc, #648]	@ (8001c54 <MX_MDMA_Init+0x2cc>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	611a      	str	r2, [r3, #16]
  hmdma_mdma_channel0_sw_0.Init.SourceInc = MDMA_SRC_INC_WORD;
 80019ce:	4ba1      	ldr	r3, [pc, #644]	@ (8001c54 <MX_MDMA_Init+0x2cc>)
 80019d0:	f240 2202 	movw	r2, #514	@ 0x202
 80019d4:	615a      	str	r2, [r3, #20]
  hmdma_mdma_channel0_sw_0.Init.DestinationInc = MDMA_DEST_INC_HALFWORD;
 80019d6:	4b9f      	ldr	r3, [pc, #636]	@ (8001c54 <MX_MDMA_Init+0x2cc>)
 80019d8:	f44f 6281 	mov.w	r2, #1032	@ 0x408
 80019dc:	619a      	str	r2, [r3, #24]
  hmdma_mdma_channel0_sw_0.Init.SourceDataSize = MDMA_SRC_DATASIZE_HALFWORD;
 80019de:	4b9d      	ldr	r3, [pc, #628]	@ (8001c54 <MX_MDMA_Init+0x2cc>)
 80019e0:	2210      	movs	r2, #16
 80019e2:	61da      	str	r2, [r3, #28]
  hmdma_mdma_channel0_sw_0.Init.DestDataSize = MDMA_DEST_DATASIZE_HALFWORD;
 80019e4:	4b9b      	ldr	r3, [pc, #620]	@ (8001c54 <MX_MDMA_Init+0x2cc>)
 80019e6:	2240      	movs	r2, #64	@ 0x40
 80019e8:	621a      	str	r2, [r3, #32]
  hmdma_mdma_channel0_sw_0.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 80019ea:	4b9a      	ldr	r3, [pc, #616]	@ (8001c54 <MX_MDMA_Init+0x2cc>)
 80019ec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80019f0:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma_mdma_channel0_sw_0.Init.BufferTransferLength = AUDIO_SAMPLE_SIZE;
 80019f2:	4b98      	ldr	r3, [pc, #608]	@ (8001c54 <MX_MDMA_Init+0x2cc>)
 80019f4:	2202      	movs	r2, #2
 80019f6:	629a      	str	r2, [r3, #40]	@ 0x28
  hmdma_mdma_channel0_sw_0.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 80019f8:	4b96      	ldr	r3, [pc, #600]	@ (8001c54 <MX_MDMA_Init+0x2cc>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hmdma_mdma_channel0_sw_0.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 80019fe:	4b95      	ldr	r3, [pc, #596]	@ (8001c54 <MX_MDMA_Init+0x2cc>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	631a      	str	r2, [r3, #48]	@ 0x30
  hmdma_mdma_channel0_sw_0.Init.SourceBlockAddressOffset = 0;
 8001a04:	4b93      	ldr	r3, [pc, #588]	@ (8001c54 <MX_MDMA_Init+0x2cc>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	635a      	str	r2, [r3, #52]	@ 0x34
  hmdma_mdma_channel0_sw_0.Init.DestBlockAddressOffset = 0;
 8001a0a:	4b92      	ldr	r3, [pc, #584]	@ (8001c54 <MX_MDMA_Init+0x2cc>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_MDMA_Init(&hmdma_mdma_channel0_sw_0) != HAL_OK)
 8001a10:	4890      	ldr	r0, [pc, #576]	@ (8001c54 <MX_MDMA_Init+0x2cc>)
 8001a12:	f004 ffbe 	bl	8006992 <HAL_MDMA_Init>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <MX_MDMA_Init+0x98>
  {
    Error_Handler();
 8001a1c:	f001 f8c0 	bl	8002ba0 <Error_Handler>
  }

  /* Initialize MDMA link node according to specified parameters */
  nodeConfig.Init.Request = MDMA_REQUEST_SW;
 8001a20:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001a24:	60bb      	str	r3, [r7, #8]
  nodeConfig.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 8001a26:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001a2a:	60fb      	str	r3, [r7, #12]
  nodeConfig.Init.Priority = MDMA_PRIORITY_HIGH;
 8001a2c:	2380      	movs	r3, #128	@ 0x80
 8001a2e:	613b      	str	r3, [r7, #16]
  nodeConfig.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8001a30:	2300      	movs	r3, #0
 8001a32:	617b      	str	r3, [r7, #20]
  nodeConfig.Init.SourceInc = MDMA_SRC_INC_WORD;
 8001a34:	f240 2302 	movw	r3, #514	@ 0x202
 8001a38:	61bb      	str	r3, [r7, #24]
  nodeConfig.Init.DestinationInc = MDMA_DEST_INC_HALFWORD;
 8001a3a:	f44f 6381 	mov.w	r3, #1032	@ 0x408
 8001a3e:	61fb      	str	r3, [r7, #28]
  nodeConfig.Init.SourceDataSize = MDMA_SRC_DATASIZE_HALFWORD;
 8001a40:	2310      	movs	r3, #16
 8001a42:	623b      	str	r3, [r7, #32]
  nodeConfig.Init.DestDataSize = MDMA_DEST_DATASIZE_HALFWORD;
 8001a44:	2340      	movs	r3, #64	@ 0x40
 8001a46:	627b      	str	r3, [r7, #36]	@ 0x24
  nodeConfig.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001a48:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  nodeConfig.Init.BufferTransferLength = AUDIO_SAMPLE_SIZE;
 8001a4e:	2302      	movs	r3, #2
 8001a50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  nodeConfig.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8001a52:	2300      	movs	r3, #0
 8001a54:	633b      	str	r3, [r7, #48]	@ 0x30
  nodeConfig.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8001a56:	2300      	movs	r3, #0
 8001a58:	637b      	str	r3, [r7, #52]	@ 0x34
  nodeConfig.Init.SourceBlockAddressOffset = 0;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	63bb      	str	r3, [r7, #56]	@ 0x38
  nodeConfig.Init.DestBlockAddressOffset = 0;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	63fb      	str	r3, [r7, #60]	@ 0x3c
  nodeConfig.PostRequestMaskAddress = 0;
 8001a62:	2300      	movs	r3, #0
 8001a64:	653b      	str	r3, [r7, #80]	@ 0x50
  nodeConfig.PostRequestMaskData = 0;
 8001a66:	2300      	movs	r3, #0
 8001a68:	657b      	str	r3, [r7, #84]	@ 0x54
  nodeConfig.SrcAddress = (uint32_t) sai_buffer_rx+AUDIO_SAMPLE_SIZE;
 8001a6a:	4b7c      	ldr	r3, [pc, #496]	@ (8001c5c <MX_MDMA_Init+0x2d4>)
 8001a6c:	3302      	adds	r3, #2
 8001a6e:	643b      	str	r3, [r7, #64]	@ 0x40
  nodeConfig.DstAddress = (uint32_t) audio_buffer_rx_ch1_r;
 8001a70:	4b7b      	ldr	r3, [pc, #492]	@ (8001c60 <MX_MDMA_Init+0x2d8>)
 8001a72:	647b      	str	r3, [r7, #68]	@ 0x44
  nodeConfig.BlockDataLength = AUDIO_BUFFER_LENGTH;
 8001a74:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a78:	64bb      	str	r3, [r7, #72]	@ 0x48
  nodeConfig.BlockCount = 1;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_MDMA_LinkedList_CreateNode(&node_mdma_channel0_sw_1, &nodeConfig) != HAL_OK)
 8001a7e:	f107 0308 	add.w	r3, r7, #8
 8001a82:	4619      	mov	r1, r3
 8001a84:	4877      	ldr	r0, [pc, #476]	@ (8001c64 <MX_MDMA_Init+0x2dc>)
 8001a86:	f005 f82b 	bl	8006ae0 <HAL_MDMA_LinkedList_CreateNode>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <MX_MDMA_Init+0x10c>
  {
    Error_Handler();
 8001a90:	f001 f886 	bl	8002ba0 <Error_Handler>
  }
  /* USER CODE BEGIN mdma_channel0_sw_1 */
  HAL_MDMA_RegisterCallback(&hmdma_mdma_channel0_sw_0, HAL_MDMA_XFER_BLOCKCPLT_CB_ID, MDMA_RxXferBlockCpltCallback);
 8001a94:	4a74      	ldr	r2, [pc, #464]	@ (8001c68 <MX_MDMA_Init+0x2e0>)
 8001a96:	2102      	movs	r1, #2
 8001a98:	486e      	ldr	r0, [pc, #440]	@ (8001c54 <MX_MDMA_Init+0x2cc>)
 8001a9a:	f004 ffc7 	bl	8006a2c <HAL_MDMA_RegisterCallback>
  HAL_MDMA_RegisterCallback(&hmdma_mdma_channel0_sw_0, HAL_MDMA_XFER_ERROR_CB_ID, MDMA_RxErrorCallback);
 8001a9e:	4a73      	ldr	r2, [pc, #460]	@ (8001c6c <MX_MDMA_Init+0x2e4>)
 8001aa0:	2104      	movs	r1, #4
 8001aa2:	486c      	ldr	r0, [pc, #432]	@ (8001c54 <MX_MDMA_Init+0x2cc>)
 8001aa4:	f004 ffc2 	bl	8006a2c <HAL_MDMA_RegisterCallback>
  /* USER CODE END mdma_channel0_sw_1 */

  /* Connect a node to the linked list */
  if (HAL_MDMA_LinkedList_AddNode(&hmdma_mdma_channel0_sw_0, &node_mdma_channel0_sw_1, 0) != HAL_OK)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	496e      	ldr	r1, [pc, #440]	@ (8001c64 <MX_MDMA_Init+0x2dc>)
 8001aac:	4869      	ldr	r0, [pc, #420]	@ (8001c54 <MX_MDMA_Init+0x2cc>)
 8001aae:	f005 f8f3 	bl	8006c98 <HAL_MDMA_LinkedList_AddNode>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <MX_MDMA_Init+0x134>
  {
    Error_Handler();
 8001ab8:	f001 f872 	bl	8002ba0 <Error_Handler>
  }

  /* Initialize MDMA link node according to specified parameters */
  nodeConfig.Init.Request = MDMA_REQUEST_SW;
 8001abc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001ac0:	60bb      	str	r3, [r7, #8]
  nodeConfig.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 8001ac2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001ac6:	60fb      	str	r3, [r7, #12]
  nodeConfig.Init.Priority = MDMA_PRIORITY_HIGH;
 8001ac8:	2380      	movs	r3, #128	@ 0x80
 8001aca:	613b      	str	r3, [r7, #16]
  nodeConfig.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8001acc:	2300      	movs	r3, #0
 8001ace:	617b      	str	r3, [r7, #20]
  nodeConfig.Init.SourceInc = MDMA_SRC_INC_HALFWORD;
 8001ad0:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8001ad4:	61bb      	str	r3, [r7, #24]
  nodeConfig.Init.DestinationInc = MDMA_DEST_INC_WORD;
 8001ad6:	f640 0308 	movw	r3, #2056	@ 0x808
 8001ada:	61fb      	str	r3, [r7, #28]
  nodeConfig.Init.SourceDataSize = MDMA_SRC_DATASIZE_HALFWORD;
 8001adc:	2310      	movs	r3, #16
 8001ade:	623b      	str	r3, [r7, #32]
  nodeConfig.Init.DestDataSize = MDMA_DEST_DATASIZE_HALFWORD;
 8001ae0:	2340      	movs	r3, #64	@ 0x40
 8001ae2:	627b      	str	r3, [r7, #36]	@ 0x24
  nodeConfig.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001ae4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
  nodeConfig.Init.BufferTransferLength = AUDIO_SAMPLE_SIZE;
 8001aea:	2302      	movs	r3, #2
 8001aec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  nodeConfig.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8001aee:	2300      	movs	r3, #0
 8001af0:	633b      	str	r3, [r7, #48]	@ 0x30
  nodeConfig.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8001af2:	2300      	movs	r3, #0
 8001af4:	637b      	str	r3, [r7, #52]	@ 0x34
  nodeConfig.Init.SourceBlockAddressOffset = 0;
 8001af6:	2300      	movs	r3, #0
 8001af8:	63bb      	str	r3, [r7, #56]	@ 0x38
  nodeConfig.Init.DestBlockAddressOffset = 0;
 8001afa:	2300      	movs	r3, #0
 8001afc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  nodeConfig.PostRequestMaskAddress = 0;
 8001afe:	2300      	movs	r3, #0
 8001b00:	653b      	str	r3, [r7, #80]	@ 0x50
  nodeConfig.PostRequestMaskData = 0;
 8001b02:	2300      	movs	r3, #0
 8001b04:	657b      	str	r3, [r7, #84]	@ 0x54
  nodeConfig.SrcAddress = (uint32_t) audio_buffer_tx_ch1_l;
 8001b06:	4b5a      	ldr	r3, [pc, #360]	@ (8001c70 <MX_MDMA_Init+0x2e8>)
 8001b08:	643b      	str	r3, [r7, #64]	@ 0x40
  nodeConfig.DstAddress = (uint32_t) sai_buffer_tx;
 8001b0a:	4b5a      	ldr	r3, [pc, #360]	@ (8001c74 <MX_MDMA_Init+0x2ec>)
 8001b0c:	647b      	str	r3, [r7, #68]	@ 0x44
  nodeConfig.BlockDataLength = AUDIO_BUFFER_LENGTH;
 8001b0e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b12:	64bb      	str	r3, [r7, #72]	@ 0x48
  nodeConfig.BlockCount = 1;
 8001b14:	2301      	movs	r3, #1
 8001b16:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_MDMA_LinkedList_CreateNode(&node_mdma_channel0_sw_2, &nodeConfig) != HAL_OK)
 8001b18:	f107 0308 	add.w	r3, r7, #8
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4856      	ldr	r0, [pc, #344]	@ (8001c78 <MX_MDMA_Init+0x2f0>)
 8001b20:	f004 ffde 	bl	8006ae0 <HAL_MDMA_LinkedList_CreateNode>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <MX_MDMA_Init+0x1a6>
  {
    Error_Handler();
 8001b2a:	f001 f839 	bl	8002ba0 <Error_Handler>
  /* USER CODE BEGIN mdma_channel0_sw_2 */

  /* USER CODE END mdma_channel0_sw_2 */

  /* Connect a node to the linked list */
  if (HAL_MDMA_LinkedList_AddNode(&hmdma_mdma_channel0_sw_0, &node_mdma_channel0_sw_2, 0) != HAL_OK)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	4951      	ldr	r1, [pc, #324]	@ (8001c78 <MX_MDMA_Init+0x2f0>)
 8001b32:	4848      	ldr	r0, [pc, #288]	@ (8001c54 <MX_MDMA_Init+0x2cc>)
 8001b34:	f005 f8b0 	bl	8006c98 <HAL_MDMA_LinkedList_AddNode>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <MX_MDMA_Init+0x1ba>
  {
    Error_Handler();
 8001b3e:	f001 f82f 	bl	8002ba0 <Error_Handler>
  }

  /* Initialize MDMA link node according to specified parameters */
  nodeConfig.Init.Request = MDMA_REQUEST_SW;
 8001b42:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001b46:	60bb      	str	r3, [r7, #8]
  nodeConfig.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 8001b48:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001b4c:	60fb      	str	r3, [r7, #12]
  nodeConfig.Init.Priority = MDMA_PRIORITY_HIGH;
 8001b4e:	2380      	movs	r3, #128	@ 0x80
 8001b50:	613b      	str	r3, [r7, #16]
  nodeConfig.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8001b52:	2300      	movs	r3, #0
 8001b54:	617b      	str	r3, [r7, #20]
  nodeConfig.Init.SourceInc = MDMA_SRC_INC_HALFWORD;
 8001b56:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8001b5a:	61bb      	str	r3, [r7, #24]
  nodeConfig.Init.DestinationInc = MDMA_DEST_INC_WORD;
 8001b5c:	f640 0308 	movw	r3, #2056	@ 0x808
 8001b60:	61fb      	str	r3, [r7, #28]
  nodeConfig.Init.SourceDataSize = MDMA_SRC_DATASIZE_HALFWORD;
 8001b62:	2310      	movs	r3, #16
 8001b64:	623b      	str	r3, [r7, #32]
  nodeConfig.Init.DestDataSize = MDMA_DEST_DATASIZE_HALFWORD;
 8001b66:	2340      	movs	r3, #64	@ 0x40
 8001b68:	627b      	str	r3, [r7, #36]	@ 0x24
  nodeConfig.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001b6a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  nodeConfig.Init.BufferTransferLength = AUDIO_SAMPLE_SIZE;
 8001b70:	2302      	movs	r3, #2
 8001b72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  nodeConfig.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8001b74:	2300      	movs	r3, #0
 8001b76:	633b      	str	r3, [r7, #48]	@ 0x30
  nodeConfig.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	637b      	str	r3, [r7, #52]	@ 0x34
  nodeConfig.Init.SourceBlockAddressOffset = 0;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	63bb      	str	r3, [r7, #56]	@ 0x38
  nodeConfig.Init.DestBlockAddressOffset = 0;
 8001b80:	2300      	movs	r3, #0
 8001b82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  nodeConfig.PostRequestMaskAddress = 0;
 8001b84:	2300      	movs	r3, #0
 8001b86:	653b      	str	r3, [r7, #80]	@ 0x50
  nodeConfig.PostRequestMaskData = 0;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	657b      	str	r3, [r7, #84]	@ 0x54
  nodeConfig.SrcAddress = (uint32_t) audio_buffer_tx_ch1_r;
 8001b8c:	4b3b      	ldr	r3, [pc, #236]	@ (8001c7c <MX_MDMA_Init+0x2f4>)
 8001b8e:	643b      	str	r3, [r7, #64]	@ 0x40
  nodeConfig.DstAddress = (uint32_t) sai_buffer_tx+AUDIO_SAMPLE_SIZE;
 8001b90:	4b38      	ldr	r3, [pc, #224]	@ (8001c74 <MX_MDMA_Init+0x2ec>)
 8001b92:	3302      	adds	r3, #2
 8001b94:	647b      	str	r3, [r7, #68]	@ 0x44
  nodeConfig.BlockDataLength = AUDIO_BUFFER_LENGTH;
 8001b96:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b9a:	64bb      	str	r3, [r7, #72]	@ 0x48
  nodeConfig.BlockCount = 1;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_MDMA_LinkedList_CreateNode(&node_mdma_channel0_sw_3, &nodeConfig) != HAL_OK)
 8001ba0:	f107 0308 	add.w	r3, r7, #8
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4836      	ldr	r0, [pc, #216]	@ (8001c80 <MX_MDMA_Init+0x2f8>)
 8001ba8:	f004 ff9a 	bl	8006ae0 <HAL_MDMA_LinkedList_CreateNode>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <MX_MDMA_Init+0x22e>
  {
    Error_Handler();
 8001bb2:	f000 fff5 	bl	8002ba0 <Error_Handler>
  /* USER CODE BEGIN mdma_channel0_sw_3 */

  /* USER CODE END mdma_channel0_sw_3 */

  /* Connect a node to the linked list */
  if (HAL_MDMA_LinkedList_AddNode(&hmdma_mdma_channel0_sw_0, &node_mdma_channel0_sw_3, 0) != HAL_OK)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	4931      	ldr	r1, [pc, #196]	@ (8001c80 <MX_MDMA_Init+0x2f8>)
 8001bba:	4826      	ldr	r0, [pc, #152]	@ (8001c54 <MX_MDMA_Init+0x2cc>)
 8001bbc:	f005 f86c 	bl	8006c98 <HAL_MDMA_LinkedList_AddNode>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <MX_MDMA_Init+0x242>
  {
    Error_Handler();
 8001bc6:	f000 ffeb 	bl	8002ba0 <Error_Handler>
  }

  /* Initialize MDMA link node according to specified parameters */
  nodeConfig.Init.Request = MDMA_REQUEST_SW;
 8001bca:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001bce:	60bb      	str	r3, [r7, #8]
  nodeConfig.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 8001bd0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001bd4:	60fb      	str	r3, [r7, #12]
  nodeConfig.Init.Priority = MDMA_PRIORITY_HIGH;
 8001bd6:	2380      	movs	r3, #128	@ 0x80
 8001bd8:	613b      	str	r3, [r7, #16]
  nodeConfig.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	617b      	str	r3, [r7, #20]
  nodeConfig.Init.SourceInc = MDMA_SRC_INC_WORD;
 8001bde:	f240 2302 	movw	r3, #514	@ 0x202
 8001be2:	61bb      	str	r3, [r7, #24]
  nodeConfig.Init.DestinationInc = MDMA_DEST_INC_HALFWORD;
 8001be4:	f44f 6381 	mov.w	r3, #1032	@ 0x408
 8001be8:	61fb      	str	r3, [r7, #28]
  nodeConfig.Init.SourceDataSize = MDMA_SRC_DATASIZE_HALFWORD;
 8001bea:	2310      	movs	r3, #16
 8001bec:	623b      	str	r3, [r7, #32]
  nodeConfig.Init.DestDataSize = MDMA_DEST_DATASIZE_HALFWORD;
 8001bee:	2340      	movs	r3, #64	@ 0x40
 8001bf0:	627b      	str	r3, [r7, #36]	@ 0x24
  nodeConfig.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001bf2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001bf6:	62bb      	str	r3, [r7, #40]	@ 0x28
  nodeConfig.Init.BufferTransferLength = AUDIO_SAMPLE_SIZE;
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  nodeConfig.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	633b      	str	r3, [r7, #48]	@ 0x30
  nodeConfig.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8001c00:	2300      	movs	r3, #0
 8001c02:	637b      	str	r3, [r7, #52]	@ 0x34
  nodeConfig.Init.SourceBlockAddressOffset = 0;
 8001c04:	2300      	movs	r3, #0
 8001c06:	63bb      	str	r3, [r7, #56]	@ 0x38
  nodeConfig.Init.DestBlockAddressOffset = 0;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  nodeConfig.PostRequestMaskAddress = 0;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	653b      	str	r3, [r7, #80]	@ 0x50
  nodeConfig.PostRequestMaskData = 0;
 8001c10:	2300      	movs	r3, #0
 8001c12:	657b      	str	r3, [r7, #84]	@ 0x54
  nodeConfig.SrcAddress = (uint32_t) sai_buffer_rx+SAI_BUFFER_LENGTH_HALF;
 8001c14:	4b11      	ldr	r3, [pc, #68]	@ (8001c5c <MX_MDMA_Init+0x2d4>)
 8001c16:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001c1a:	643b      	str	r3, [r7, #64]	@ 0x40
  nodeConfig.DstAddress = (uint32_t) audio_buffer_rx_ch1_l+AUDIO_BUFFER_LENGTH_HALF;
 8001c1c:	4b19      	ldr	r3, [pc, #100]	@ (8001c84 <MX_MDMA_Init+0x2fc>)
 8001c1e:	3380      	adds	r3, #128	@ 0x80
 8001c20:	647b      	str	r3, [r7, #68]	@ 0x44
  nodeConfig.BlockDataLength = AUDIO_BUFFER_LENGTH;
 8001c22:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c26:	64bb      	str	r3, [r7, #72]	@ 0x48
  nodeConfig.BlockCount = 1;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_MDMA_LinkedList_CreateNode(&node_mdma_channel0_sw_4, &nodeConfig) != HAL_OK)
 8001c2c:	f107 0308 	add.w	r3, r7, #8
 8001c30:	4619      	mov	r1, r3
 8001c32:	4815      	ldr	r0, [pc, #84]	@ (8001c88 <MX_MDMA_Init+0x300>)
 8001c34:	f004 ff54 	bl	8006ae0 <HAL_MDMA_LinkedList_CreateNode>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <MX_MDMA_Init+0x2ba>
  {
    Error_Handler();
 8001c3e:	f000 ffaf 	bl	8002ba0 <Error_Handler>
  /* USER CODE BEGIN mdma_channel0_sw_4 */

  /* USER CODE END mdma_channel0_sw_4 */

  /* Connect a node to the linked list */
  if (HAL_MDMA_LinkedList_AddNode(&hmdma_mdma_channel0_sw_0, &node_mdma_channel0_sw_4, 0) != HAL_OK)
 8001c42:	2200      	movs	r2, #0
 8001c44:	4910      	ldr	r1, [pc, #64]	@ (8001c88 <MX_MDMA_Init+0x300>)
 8001c46:	4803      	ldr	r0, [pc, #12]	@ (8001c54 <MX_MDMA_Init+0x2cc>)
 8001c48:	f005 f826 	bl	8006c98 <HAL_MDMA_LinkedList_AddNode>
 8001c4c:	e01e      	b.n	8001c8c <MX_MDMA_Init+0x304>
 8001c4e:	bf00      	nop
 8001c50:	58024400 	.word	0x58024400
 8001c54:	24000344 	.word	0x24000344
 8001c58:	52000040 	.word	0x52000040
 8001c5c:	24000718 	.word	0x24000718
 8001c60:	20000200 	.word	0x20000200
 8001c64:	240003b0 	.word	0x240003b0
 8001c68:	080026ed 	.word	0x080026ed
 8001c6c:	0800296d 	.word	0x0800296d
 8001c70:	20000400 	.word	0x20000400
 8001c74:	24000b18 	.word	0x24000b18
 8001c78:	240003d8 	.word	0x240003d8
 8001c7c:	20000600 	.word	0x20000600
 8001c80:	24000400 	.word	0x24000400
 8001c84:	20000000 	.word	0x20000000
 8001c88:	24000428 	.word	0x24000428
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <MX_MDMA_Init+0x30e>
  {
    Error_Handler();
 8001c92:	f000 ff85 	bl	8002ba0 <Error_Handler>
  }

  /* Initialize MDMA link node according to specified parameters */
  nodeConfig.Init.Request = MDMA_REQUEST_SW;
 8001c96:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c9a:	60bb      	str	r3, [r7, #8]
  nodeConfig.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 8001c9c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001ca0:	60fb      	str	r3, [r7, #12]
  nodeConfig.Init.Priority = MDMA_PRIORITY_HIGH;
 8001ca2:	2380      	movs	r3, #128	@ 0x80
 8001ca4:	613b      	str	r3, [r7, #16]
  nodeConfig.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	617b      	str	r3, [r7, #20]
  nodeConfig.Init.SourceInc = MDMA_SRC_INC_WORD;
 8001caa:	f240 2302 	movw	r3, #514	@ 0x202
 8001cae:	61bb      	str	r3, [r7, #24]
  nodeConfig.Init.DestinationInc = MDMA_DEST_INC_HALFWORD;
 8001cb0:	f44f 6381 	mov.w	r3, #1032	@ 0x408
 8001cb4:	61fb      	str	r3, [r7, #28]
  nodeConfig.Init.SourceDataSize = MDMA_SRC_DATASIZE_HALFWORD;
 8001cb6:	2310      	movs	r3, #16
 8001cb8:	623b      	str	r3, [r7, #32]
  nodeConfig.Init.DestDataSize = MDMA_DEST_DATASIZE_HALFWORD;
 8001cba:	2340      	movs	r3, #64	@ 0x40
 8001cbc:	627b      	str	r3, [r7, #36]	@ 0x24
  nodeConfig.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001cbe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001cc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  nodeConfig.Init.BufferTransferLength = AUDIO_SAMPLE_SIZE;
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  nodeConfig.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	633b      	str	r3, [r7, #48]	@ 0x30
  nodeConfig.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	637b      	str	r3, [r7, #52]	@ 0x34
  nodeConfig.Init.SourceBlockAddressOffset = 0;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	63bb      	str	r3, [r7, #56]	@ 0x38
  nodeConfig.Init.DestBlockAddressOffset = 0;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  nodeConfig.PostRequestMaskAddress = 0;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	653b      	str	r3, [r7, #80]	@ 0x50
  nodeConfig.PostRequestMaskData = 0;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	657b      	str	r3, [r7, #84]	@ 0x54
  nodeConfig.SrcAddress = (uint32_t) sai_buffer_rx+SAI_BUFFER_LENGTH_HALF+AUDIO_SAMPLE_SIZE;
 8001ce0:	4baf      	ldr	r3, [pc, #700]	@ (8001fa0 <MX_MDMA_Init+0x618>)
 8001ce2:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001ce6:	643b      	str	r3, [r7, #64]	@ 0x40
  nodeConfig.DstAddress = (uint32_t) audio_buffer_rx_ch1_r+AUDIO_BUFFER_LENGTH_HALF;
 8001ce8:	4bae      	ldr	r3, [pc, #696]	@ (8001fa4 <MX_MDMA_Init+0x61c>)
 8001cea:	3380      	adds	r3, #128	@ 0x80
 8001cec:	647b      	str	r3, [r7, #68]	@ 0x44
  nodeConfig.BlockDataLength = AUDIO_BUFFER_LENGTH;
 8001cee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001cf2:	64bb      	str	r3, [r7, #72]	@ 0x48
  nodeConfig.BlockCount = 1;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_MDMA_LinkedList_CreateNode(&node_mdma_channel0_sw_5, &nodeConfig) != HAL_OK)
 8001cf8:	f107 0308 	add.w	r3, r7, #8
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	48aa      	ldr	r0, [pc, #680]	@ (8001fa8 <MX_MDMA_Init+0x620>)
 8001d00:	f004 feee 	bl	8006ae0 <HAL_MDMA_LinkedList_CreateNode>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <MX_MDMA_Init+0x386>
  {
    Error_Handler();
 8001d0a:	f000 ff49 	bl	8002ba0 <Error_Handler>
  /* USER CODE BEGIN mdma_channel0_sw_5 */

  /* USER CODE END mdma_channel0_sw_5 */

  /* Connect a node to the linked list */
  if (HAL_MDMA_LinkedList_AddNode(&hmdma_mdma_channel0_sw_0, &node_mdma_channel0_sw_5, 0) != HAL_OK)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	49a5      	ldr	r1, [pc, #660]	@ (8001fa8 <MX_MDMA_Init+0x620>)
 8001d12:	48a6      	ldr	r0, [pc, #664]	@ (8001fac <MX_MDMA_Init+0x624>)
 8001d14:	f004 ffc0 	bl	8006c98 <HAL_MDMA_LinkedList_AddNode>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <MX_MDMA_Init+0x39a>
  {
    Error_Handler();
 8001d1e:	f000 ff3f 	bl	8002ba0 <Error_Handler>
  }

  /* Initialize MDMA link node according to specified parameters */
  nodeConfig.Init.Request = MDMA_REQUEST_SW;
 8001d22:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001d26:	60bb      	str	r3, [r7, #8]
  nodeConfig.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 8001d28:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001d2c:	60fb      	str	r3, [r7, #12]
  nodeConfig.Init.Priority = MDMA_PRIORITY_HIGH;
 8001d2e:	2380      	movs	r3, #128	@ 0x80
 8001d30:	613b      	str	r3, [r7, #16]
  nodeConfig.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8001d32:	2300      	movs	r3, #0
 8001d34:	617b      	str	r3, [r7, #20]
  nodeConfig.Init.SourceInc = MDMA_SRC_INC_HALFWORD;
 8001d36:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8001d3a:	61bb      	str	r3, [r7, #24]
  nodeConfig.Init.DestinationInc = MDMA_DEST_INC_WORD;
 8001d3c:	f640 0308 	movw	r3, #2056	@ 0x808
 8001d40:	61fb      	str	r3, [r7, #28]
  nodeConfig.Init.SourceDataSize = MDMA_SRC_DATASIZE_HALFWORD;
 8001d42:	2310      	movs	r3, #16
 8001d44:	623b      	str	r3, [r7, #32]
  nodeConfig.Init.DestDataSize = MDMA_DEST_DATASIZE_HALFWORD;
 8001d46:	2340      	movs	r3, #64	@ 0x40
 8001d48:	627b      	str	r3, [r7, #36]	@ 0x24
  nodeConfig.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001d4a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  nodeConfig.Init.BufferTransferLength = AUDIO_SAMPLE_SIZE;
 8001d50:	2302      	movs	r3, #2
 8001d52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  nodeConfig.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8001d54:	2300      	movs	r3, #0
 8001d56:	633b      	str	r3, [r7, #48]	@ 0x30
  nodeConfig.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	637b      	str	r3, [r7, #52]	@ 0x34
  nodeConfig.Init.SourceBlockAddressOffset = 0;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	63bb      	str	r3, [r7, #56]	@ 0x38
  nodeConfig.Init.DestBlockAddressOffset = 0;
 8001d60:	2300      	movs	r3, #0
 8001d62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  nodeConfig.PostRequestMaskAddress = 0;
 8001d64:	2300      	movs	r3, #0
 8001d66:	653b      	str	r3, [r7, #80]	@ 0x50
  nodeConfig.PostRequestMaskData = 0;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	657b      	str	r3, [r7, #84]	@ 0x54
  nodeConfig.SrcAddress = (uint32_t) audio_buffer_tx_ch1_l+AUDIO_BUFFER_LENGTH_HALF;
 8001d6c:	4b90      	ldr	r3, [pc, #576]	@ (8001fb0 <MX_MDMA_Init+0x628>)
 8001d6e:	3380      	adds	r3, #128	@ 0x80
 8001d70:	643b      	str	r3, [r7, #64]	@ 0x40
  nodeConfig.DstAddress = (uint32_t) sai_buffer_tx+SAI_BUFFER_LENGTH_HALF;
 8001d72:	4b90      	ldr	r3, [pc, #576]	@ (8001fb4 <MX_MDMA_Init+0x62c>)
 8001d74:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001d78:	647b      	str	r3, [r7, #68]	@ 0x44
  nodeConfig.BlockDataLength = AUDIO_BUFFER_LENGTH;
 8001d7a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d7e:	64bb      	str	r3, [r7, #72]	@ 0x48
  nodeConfig.BlockCount = 1;
 8001d80:	2301      	movs	r3, #1
 8001d82:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_MDMA_LinkedList_CreateNode(&node_mdma_channel0_sw_6, &nodeConfig) != HAL_OK)
 8001d84:	f107 0308 	add.w	r3, r7, #8
 8001d88:	4619      	mov	r1, r3
 8001d8a:	488b      	ldr	r0, [pc, #556]	@ (8001fb8 <MX_MDMA_Init+0x630>)
 8001d8c:	f004 fea8 	bl	8006ae0 <HAL_MDMA_LinkedList_CreateNode>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <MX_MDMA_Init+0x412>
  {
    Error_Handler();
 8001d96:	f000 ff03 	bl	8002ba0 <Error_Handler>
  /* USER CODE BEGIN mdma_channel0_sw_6 */

  /* USER CODE END mdma_channel0_sw_6 */

  /* Connect a node to the linked list */
  if (HAL_MDMA_LinkedList_AddNode(&hmdma_mdma_channel0_sw_0, &node_mdma_channel0_sw_6, 0) != HAL_OK)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	4986      	ldr	r1, [pc, #536]	@ (8001fb8 <MX_MDMA_Init+0x630>)
 8001d9e:	4883      	ldr	r0, [pc, #524]	@ (8001fac <MX_MDMA_Init+0x624>)
 8001da0:	f004 ff7a 	bl	8006c98 <HAL_MDMA_LinkedList_AddNode>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <MX_MDMA_Init+0x426>
  {
    Error_Handler();
 8001daa:	f000 fef9 	bl	8002ba0 <Error_Handler>
  }

  /* Initialize MDMA link node according to specified parameters */
  nodeConfig.Init.Request = MDMA_REQUEST_SW;
 8001dae:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001db2:	60bb      	str	r3, [r7, #8]
  nodeConfig.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 8001db4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001db8:	60fb      	str	r3, [r7, #12]
  nodeConfig.Init.Priority = MDMA_PRIORITY_HIGH;
 8001dba:	2380      	movs	r3, #128	@ 0x80
 8001dbc:	613b      	str	r3, [r7, #16]
  nodeConfig.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	617b      	str	r3, [r7, #20]
  nodeConfig.Init.SourceInc = MDMA_SRC_INC_HALFWORD;
 8001dc2:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8001dc6:	61bb      	str	r3, [r7, #24]
  nodeConfig.Init.DestinationInc = MDMA_DEST_INC_WORD;
 8001dc8:	f640 0308 	movw	r3, #2056	@ 0x808
 8001dcc:	61fb      	str	r3, [r7, #28]
  nodeConfig.Init.SourceDataSize = MDMA_SRC_DATASIZE_HALFWORD;
 8001dce:	2310      	movs	r3, #16
 8001dd0:	623b      	str	r3, [r7, #32]
  nodeConfig.Init.DestDataSize = MDMA_DEST_DATASIZE_HALFWORD;
 8001dd2:	2340      	movs	r3, #64	@ 0x40
 8001dd4:	627b      	str	r3, [r7, #36]	@ 0x24
  nodeConfig.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001dd6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001dda:	62bb      	str	r3, [r7, #40]	@ 0x28
  nodeConfig.Init.BufferTransferLength = AUDIO_SAMPLE_SIZE;
 8001ddc:	2302      	movs	r3, #2
 8001dde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  nodeConfig.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8001de0:	2300      	movs	r3, #0
 8001de2:	633b      	str	r3, [r7, #48]	@ 0x30
  nodeConfig.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8001de4:	2300      	movs	r3, #0
 8001de6:	637b      	str	r3, [r7, #52]	@ 0x34
  nodeConfig.Init.SourceBlockAddressOffset = 0;
 8001de8:	2300      	movs	r3, #0
 8001dea:	63bb      	str	r3, [r7, #56]	@ 0x38
  nodeConfig.Init.DestBlockAddressOffset = 0;
 8001dec:	2300      	movs	r3, #0
 8001dee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  nodeConfig.PostRequestMaskAddress = 0;
 8001df0:	2300      	movs	r3, #0
 8001df2:	653b      	str	r3, [r7, #80]	@ 0x50
  nodeConfig.PostRequestMaskData = 0;
 8001df4:	2300      	movs	r3, #0
 8001df6:	657b      	str	r3, [r7, #84]	@ 0x54
  nodeConfig.SrcAddress = (uint32_t) audio_buffer_tx_ch1_r+AUDIO_BUFFER_LENGTH_HALF;
 8001df8:	4b70      	ldr	r3, [pc, #448]	@ (8001fbc <MX_MDMA_Init+0x634>)
 8001dfa:	3380      	adds	r3, #128	@ 0x80
 8001dfc:	643b      	str	r3, [r7, #64]	@ 0x40
  nodeConfig.DstAddress = (uint32_t) sai_buffer_tx+SAI_BUFFER_LENGTH_HALF+AUDIO_SAMPLE_SIZE;
 8001dfe:	4b6d      	ldr	r3, [pc, #436]	@ (8001fb4 <MX_MDMA_Init+0x62c>)
 8001e00:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001e04:	647b      	str	r3, [r7, #68]	@ 0x44
  nodeConfig.BlockDataLength = AUDIO_BUFFER_LENGTH;
 8001e06:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e0a:	64bb      	str	r3, [r7, #72]	@ 0x48
  nodeConfig.BlockCount = 1;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_MDMA_LinkedList_CreateNode(&node_mdma_channel0_sw_7, &nodeConfig) != HAL_OK)
 8001e10:	f107 0308 	add.w	r3, r7, #8
 8001e14:	4619      	mov	r1, r3
 8001e16:	486a      	ldr	r0, [pc, #424]	@ (8001fc0 <MX_MDMA_Init+0x638>)
 8001e18:	f004 fe62 	bl	8006ae0 <HAL_MDMA_LinkedList_CreateNode>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <MX_MDMA_Init+0x49e>
  {
    Error_Handler();
 8001e22:	f000 febd 	bl	8002ba0 <Error_Handler>
  /* USER CODE BEGIN mdma_channel0_sw_7 */

  /* USER CODE END mdma_channel0_sw_7 */

  /* Connect a node to the linked list */
  if (HAL_MDMA_LinkedList_AddNode(&hmdma_mdma_channel0_sw_0, &node_mdma_channel0_sw_7, 0) != HAL_OK)
 8001e26:	2200      	movs	r2, #0
 8001e28:	4965      	ldr	r1, [pc, #404]	@ (8001fc0 <MX_MDMA_Init+0x638>)
 8001e2a:	4860      	ldr	r0, [pc, #384]	@ (8001fac <MX_MDMA_Init+0x624>)
 8001e2c:	f004 ff34 	bl	8006c98 <HAL_MDMA_LinkedList_AddNode>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <MX_MDMA_Init+0x4b2>
  {
    Error_Handler();
 8001e36:	f000 feb3 	bl	8002ba0 <Error_Handler>
  }

  /* Initialize MDMA link node according to specified parameters */
  nodeConfig.Init.Request = MDMA_REQUEST_SW;
 8001e3a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001e3e:	60bb      	str	r3, [r7, #8]
  nodeConfig.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 8001e40:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001e44:	60fb      	str	r3, [r7, #12]
  nodeConfig.Init.Priority = MDMA_PRIORITY_HIGH;
 8001e46:	2380      	movs	r3, #128	@ 0x80
 8001e48:	613b      	str	r3, [r7, #16]
  nodeConfig.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	617b      	str	r3, [r7, #20]
  nodeConfig.Init.SourceInc = MDMA_SRC_INC_WORD;
 8001e4e:	f240 2302 	movw	r3, #514	@ 0x202
 8001e52:	61bb      	str	r3, [r7, #24]
  nodeConfig.Init.DestinationInc = MDMA_DEST_INC_HALFWORD;
 8001e54:	f44f 6381 	mov.w	r3, #1032	@ 0x408
 8001e58:	61fb      	str	r3, [r7, #28]
  nodeConfig.Init.SourceDataSize = MDMA_SRC_DATASIZE_HALFWORD;
 8001e5a:	2310      	movs	r3, #16
 8001e5c:	623b      	str	r3, [r7, #32]
  nodeConfig.Init.DestDataSize = MDMA_DEST_DATASIZE_HALFWORD;
 8001e5e:	2340      	movs	r3, #64	@ 0x40
 8001e60:	627b      	str	r3, [r7, #36]	@ 0x24
  nodeConfig.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001e62:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e66:	62bb      	str	r3, [r7, #40]	@ 0x28
  nodeConfig.Init.BufferTransferLength = AUDIO_SAMPLE_SIZE;
 8001e68:	2302      	movs	r3, #2
 8001e6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  nodeConfig.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	633b      	str	r3, [r7, #48]	@ 0x30
  nodeConfig.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8001e70:	2300      	movs	r3, #0
 8001e72:	637b      	str	r3, [r7, #52]	@ 0x34
  nodeConfig.Init.SourceBlockAddressOffset = 0;
 8001e74:	2300      	movs	r3, #0
 8001e76:	63bb      	str	r3, [r7, #56]	@ 0x38
  nodeConfig.Init.DestBlockAddressOffset = 0;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  nodeConfig.PostRequestMaskAddress = 0;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	653b      	str	r3, [r7, #80]	@ 0x50
  nodeConfig.PostRequestMaskData = 0;
 8001e80:	2300      	movs	r3, #0
 8001e82:	657b      	str	r3, [r7, #84]	@ 0x54
  nodeConfig.SrcAddress = (uint32_t) sai_buffer_rx;
 8001e84:	4b46      	ldr	r3, [pc, #280]	@ (8001fa0 <MX_MDMA_Init+0x618>)
 8001e86:	643b      	str	r3, [r7, #64]	@ 0x40
  nodeConfig.DstAddress = (uint32_t) audio_buffer_rx_ch1_l;
 8001e88:	4b4e      	ldr	r3, [pc, #312]	@ (8001fc4 <MX_MDMA_Init+0x63c>)
 8001e8a:	647b      	str	r3, [r7, #68]	@ 0x44
  nodeConfig.BlockDataLength = AUDIO_BUFFER_LENGTH;
 8001e8c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e90:	64bb      	str	r3, [r7, #72]	@ 0x48
  nodeConfig.BlockCount = 1;
 8001e92:	2301      	movs	r3, #1
 8001e94:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_MDMA_LinkedList_CreateNode(&node_mdma_channel0_sw_8, &nodeConfig) != HAL_OK)
 8001e96:	f107 0308 	add.w	r3, r7, #8
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	484a      	ldr	r0, [pc, #296]	@ (8001fc8 <MX_MDMA_Init+0x640>)
 8001e9e:	f004 fe1f 	bl	8006ae0 <HAL_MDMA_LinkedList_CreateNode>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <MX_MDMA_Init+0x524>
  {
    Error_Handler();
 8001ea8:	f000 fe7a 	bl	8002ba0 <Error_Handler>
  /* USER CODE BEGIN mdma_channel0_sw_8 */

  /* USER CODE END mdma_channel0_sw_8 */

  /* Connect a node to the linked list */
  if (HAL_MDMA_LinkedList_AddNode(&hmdma_mdma_channel0_sw_0, &node_mdma_channel0_sw_8, 0) != HAL_OK)
 8001eac:	2200      	movs	r2, #0
 8001eae:	4946      	ldr	r1, [pc, #280]	@ (8001fc8 <MX_MDMA_Init+0x640>)
 8001eb0:	483e      	ldr	r0, [pc, #248]	@ (8001fac <MX_MDMA_Init+0x624>)
 8001eb2:	f004 fef1 	bl	8006c98 <HAL_MDMA_LinkedList_AddNode>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <MX_MDMA_Init+0x538>
  {
    Error_Handler();
 8001ebc:	f000 fe70 	bl	8002ba0 <Error_Handler>
  }

  /* Make the linked list circular by connecting the last node to the first */
  if (HAL_MDMA_LinkedList_EnableCircularMode(&hmdma_mdma_channel0_sw_0) != HAL_OK)
 8001ec0:	483a      	ldr	r0, [pc, #232]	@ (8001fac <MX_MDMA_Init+0x624>)
 8001ec2:	f004 ffad 	bl	8006e20 <HAL_MDMA_LinkedList_EnableCircularMode>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <MX_MDMA_Init+0x548>
  {
    Error_Handler();
 8001ecc:	f000 fe68 	bl	8002ba0 <Error_Handler>
  }

  /* Configure MDMA channel MDMA_Channel2 */
  /* Configure MDMA request hmdma_mdma_channel2_sw_0 on MDMA_Channel2 */
  hmdma_mdma_channel2_sw_0.Instance = MDMA_Channel2;
 8001ed0:	4b3e      	ldr	r3, [pc, #248]	@ (8001fcc <MX_MDMA_Init+0x644>)
 8001ed2:	4a3f      	ldr	r2, [pc, #252]	@ (8001fd0 <MX_MDMA_Init+0x648>)
 8001ed4:	601a      	str	r2, [r3, #0]
  hmdma_mdma_channel2_sw_0.Init.Request = MDMA_REQUEST_SW;
 8001ed6:	4b3d      	ldr	r3, [pc, #244]	@ (8001fcc <MX_MDMA_Init+0x644>)
 8001ed8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001edc:	605a      	str	r2, [r3, #4]
  hmdma_mdma_channel2_sw_0.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 8001ede:	4b3b      	ldr	r3, [pc, #236]	@ (8001fcc <MX_MDMA_Init+0x644>)
 8001ee0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001ee4:	609a      	str	r2, [r3, #8]
  hmdma_mdma_channel2_sw_0.Init.Priority = MDMA_PRIORITY_HIGH;
 8001ee6:	4b39      	ldr	r3, [pc, #228]	@ (8001fcc <MX_MDMA_Init+0x644>)
 8001ee8:	2280      	movs	r2, #128	@ 0x80
 8001eea:	60da      	str	r2, [r3, #12]
  hmdma_mdma_channel2_sw_0.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8001eec:	4b37      	ldr	r3, [pc, #220]	@ (8001fcc <MX_MDMA_Init+0x644>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	611a      	str	r2, [r3, #16]
  hmdma_mdma_channel2_sw_0.Init.SourceInc = MDMA_SRC_INC_HALFWORD;
 8001ef2:	4b36      	ldr	r3, [pc, #216]	@ (8001fcc <MX_MDMA_Init+0x644>)
 8001ef4:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8001ef8:	615a      	str	r2, [r3, #20]
  hmdma_mdma_channel2_sw_0.Init.DestinationInc = MDMA_DEST_INC_WORD;
 8001efa:	4b34      	ldr	r3, [pc, #208]	@ (8001fcc <MX_MDMA_Init+0x644>)
 8001efc:	f640 0208 	movw	r2, #2056	@ 0x808
 8001f00:	619a      	str	r2, [r3, #24]
  hmdma_mdma_channel2_sw_0.Init.SourceDataSize = MDMA_SRC_DATASIZE_HALFWORD;
 8001f02:	4b32      	ldr	r3, [pc, #200]	@ (8001fcc <MX_MDMA_Init+0x644>)
 8001f04:	2210      	movs	r2, #16
 8001f06:	61da      	str	r2, [r3, #28]
  hmdma_mdma_channel2_sw_0.Init.DestDataSize = MDMA_DEST_DATASIZE_HALFWORD;
 8001f08:	4b30      	ldr	r3, [pc, #192]	@ (8001fcc <MX_MDMA_Init+0x644>)
 8001f0a:	2240      	movs	r2, #64	@ 0x40
 8001f0c:	621a      	str	r2, [r3, #32]
  hmdma_mdma_channel2_sw_0.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001f0e:	4b2f      	ldr	r3, [pc, #188]	@ (8001fcc <MX_MDMA_Init+0x644>)
 8001f10:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f14:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma_mdma_channel2_sw_0.Init.BufferTransferLength = AUDIO_SAMPLE_SIZE;
 8001f16:	4b2d      	ldr	r3, [pc, #180]	@ (8001fcc <MX_MDMA_Init+0x644>)
 8001f18:	2202      	movs	r2, #2
 8001f1a:	629a      	str	r2, [r3, #40]	@ 0x28
  hmdma_mdma_channel2_sw_0.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8001f1c:	4b2b      	ldr	r3, [pc, #172]	@ (8001fcc <MX_MDMA_Init+0x644>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	62da      	str	r2, [r3, #44]	@ 0x2c
  hmdma_mdma_channel2_sw_0.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8001f22:	4b2a      	ldr	r3, [pc, #168]	@ (8001fcc <MX_MDMA_Init+0x644>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	631a      	str	r2, [r3, #48]	@ 0x30
  hmdma_mdma_channel2_sw_0.Init.SourceBlockAddressOffset = 0;
 8001f28:	4b28      	ldr	r3, [pc, #160]	@ (8001fcc <MX_MDMA_Init+0x644>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	635a      	str	r2, [r3, #52]	@ 0x34
  hmdma_mdma_channel2_sw_0.Init.DestBlockAddressOffset = 0;
 8001f2e:	4b27      	ldr	r3, [pc, #156]	@ (8001fcc <MX_MDMA_Init+0x644>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_MDMA_Init(&hmdma_mdma_channel2_sw_0) != HAL_OK)
 8001f34:	4825      	ldr	r0, [pc, #148]	@ (8001fcc <MX_MDMA_Init+0x644>)
 8001f36:	f004 fd2c 	bl	8006992 <HAL_MDMA_Init>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <MX_MDMA_Init+0x5bc>
  {
    Error_Handler();
 8001f40:	f000 fe2e 	bl	8002ba0 <Error_Handler>
  }

  /* Initialize MDMA link node according to specified parameters */
  nodeConfig.Init.Request = MDMA_REQUEST_SW;
 8001f44:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001f48:	60bb      	str	r3, [r7, #8]
  nodeConfig.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 8001f4a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001f4e:	60fb      	str	r3, [r7, #12]
  nodeConfig.Init.Priority = MDMA_PRIORITY_HIGH;
 8001f50:	2380      	movs	r3, #128	@ 0x80
 8001f52:	613b      	str	r3, [r7, #16]
  nodeConfig.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8001f54:	2300      	movs	r3, #0
 8001f56:	617b      	str	r3, [r7, #20]
  nodeConfig.Init.SourceInc = MDMA_SRC_INC_HALFWORD;
 8001f58:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8001f5c:	61bb      	str	r3, [r7, #24]
  nodeConfig.Init.DestinationInc = MDMA_DEST_INC_WORD;
 8001f5e:	f640 0308 	movw	r3, #2056	@ 0x808
 8001f62:	61fb      	str	r3, [r7, #28]
  nodeConfig.Init.SourceDataSize = MDMA_SRC_DATASIZE_HALFWORD;
 8001f64:	2310      	movs	r3, #16
 8001f66:	623b      	str	r3, [r7, #32]
  nodeConfig.Init.DestDataSize = MDMA_DEST_DATASIZE_HALFWORD;
 8001f68:	2340      	movs	r3, #64	@ 0x40
 8001f6a:	627b      	str	r3, [r7, #36]	@ 0x24
  nodeConfig.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001f6c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f70:	62bb      	str	r3, [r7, #40]	@ 0x28
  nodeConfig.Init.BufferTransferLength = AUDIO_SAMPLE_SIZE;
 8001f72:	2302      	movs	r3, #2
 8001f74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  nodeConfig.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8001f76:	2300      	movs	r3, #0
 8001f78:	633b      	str	r3, [r7, #48]	@ 0x30
  nodeConfig.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	637b      	str	r3, [r7, #52]	@ 0x34
  nodeConfig.Init.SourceBlockAddressOffset = 0;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	63bb      	str	r3, [r7, #56]	@ 0x38
  nodeConfig.Init.DestBlockAddressOffset = 0;
 8001f82:	2300      	movs	r3, #0
 8001f84:	63fb      	str	r3, [r7, #60]	@ 0x3c
  nodeConfig.PostRequestMaskAddress = 0;
 8001f86:	2300      	movs	r3, #0
 8001f88:	653b      	str	r3, [r7, #80]	@ 0x50
  nodeConfig.PostRequestMaskData = 0;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	657b      	str	r3, [r7, #84]	@ 0x54
  nodeConfig.SrcAddress = audio_buffer_tx_ch1_l;
 8001f8e:	4b08      	ldr	r3, [pc, #32]	@ (8001fb0 <MX_MDMA_Init+0x628>)
 8001f90:	643b      	str	r3, [r7, #64]	@ 0x40
  nodeConfig.DstAddress = sai_buffer_tx;
 8001f92:	4b08      	ldr	r3, [pc, #32]	@ (8001fb4 <MX_MDMA_Init+0x62c>)
 8001f94:	647b      	str	r3, [r7, #68]	@ 0x44
  nodeConfig.BlockDataLength = AUDIO_BUFFER_LENGTH;
 8001f96:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001f9c:	e01a      	b.n	8001fd4 <MX_MDMA_Init+0x64c>
 8001f9e:	bf00      	nop
 8001fa0:	24000718 	.word	0x24000718
 8001fa4:	20000200 	.word	0x20000200
 8001fa8:	24000450 	.word	0x24000450
 8001fac:	24000344 	.word	0x24000344
 8001fb0:	20000400 	.word	0x20000400
 8001fb4:	24000b18 	.word	0x24000b18
 8001fb8:	24000478 	.word	0x24000478
 8001fbc:	20000600 	.word	0x20000600
 8001fc0:	240004a0 	.word	0x240004a0
 8001fc4:	20000000 	.word	0x20000000
 8001fc8:	240004c8 	.word	0x240004c8
 8001fcc:	240004f0 	.word	0x240004f0
 8001fd0:	520000c0 	.word	0x520000c0
  nodeConfig.BlockCount = 1;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_MDMA_LinkedList_CreateNode(&node_mdma_channel2_sw_1, &nodeConfig) != HAL_OK)
 8001fd8:	f107 0308 	add.w	r3, r7, #8
 8001fdc:	4619      	mov	r1, r3
 8001fde:	48ae      	ldr	r0, [pc, #696]	@ (8002298 <MX_MDMA_Init+0x910>)
 8001fe0:	f004 fd7e 	bl	8006ae0 <HAL_MDMA_LinkedList_CreateNode>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <MX_MDMA_Init+0x666>
  {
    Error_Handler();
 8001fea:	f000 fdd9 	bl	8002ba0 <Error_Handler>
  /* USER CODE BEGIN mdma_channel2_sw_1 */

  /* USER CODE END mdma_channel2_sw_1 */

  /* Connect a node to the linked list */
  if (HAL_MDMA_LinkedList_AddNode(&hmdma_mdma_channel2_sw_0, &node_mdma_channel2_sw_1, 0) != HAL_OK)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	49a9      	ldr	r1, [pc, #676]	@ (8002298 <MX_MDMA_Init+0x910>)
 8001ff2:	48aa      	ldr	r0, [pc, #680]	@ (800229c <MX_MDMA_Init+0x914>)
 8001ff4:	f004 fe50 	bl	8006c98 <HAL_MDMA_LinkedList_AddNode>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <MX_MDMA_Init+0x67a>
  {
    Error_Handler();
 8001ffe:	f000 fdcf 	bl	8002ba0 <Error_Handler>
  }

  /* Initialize MDMA link node according to specified parameters */
  nodeConfig.Init.Request = MDMA_REQUEST_SW;
 8002002:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002006:	60bb      	str	r3, [r7, #8]
  nodeConfig.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 8002008:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800200c:	60fb      	str	r3, [r7, #12]
  nodeConfig.Init.Priority = MDMA_PRIORITY_HIGH;
 800200e:	2380      	movs	r3, #128	@ 0x80
 8002010:	613b      	str	r3, [r7, #16]
  nodeConfig.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8002012:	2300      	movs	r3, #0
 8002014:	617b      	str	r3, [r7, #20]
  nodeConfig.Init.SourceInc = MDMA_SRC_INC_HALFWORD;
 8002016:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800201a:	61bb      	str	r3, [r7, #24]
  nodeConfig.Init.DestinationInc = MDMA_DEST_INC_WORD;
 800201c:	f640 0308 	movw	r3, #2056	@ 0x808
 8002020:	61fb      	str	r3, [r7, #28]
  nodeConfig.Init.SourceDataSize = MDMA_SRC_DATASIZE_HALFWORD;
 8002022:	2310      	movs	r3, #16
 8002024:	623b      	str	r3, [r7, #32]
  nodeConfig.Init.DestDataSize = MDMA_DEST_DATASIZE_HALFWORD;
 8002026:	2340      	movs	r3, #64	@ 0x40
 8002028:	627b      	str	r3, [r7, #36]	@ 0x24
  nodeConfig.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 800202a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800202e:	62bb      	str	r3, [r7, #40]	@ 0x28
  nodeConfig.Init.BufferTransferLength = AUDIO_SAMPLE_SIZE;
 8002030:	2302      	movs	r3, #2
 8002032:	62fb      	str	r3, [r7, #44]	@ 0x2c
  nodeConfig.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8002034:	2300      	movs	r3, #0
 8002036:	633b      	str	r3, [r7, #48]	@ 0x30
  nodeConfig.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8002038:	2300      	movs	r3, #0
 800203a:	637b      	str	r3, [r7, #52]	@ 0x34
  nodeConfig.Init.SourceBlockAddressOffset = 0;
 800203c:	2300      	movs	r3, #0
 800203e:	63bb      	str	r3, [r7, #56]	@ 0x38
  nodeConfig.Init.DestBlockAddressOffset = 0;
 8002040:	2300      	movs	r3, #0
 8002042:	63fb      	str	r3, [r7, #60]	@ 0x3c
  nodeConfig.PostRequestMaskAddress = 0;
 8002044:	2300      	movs	r3, #0
 8002046:	653b      	str	r3, [r7, #80]	@ 0x50
  nodeConfig.PostRequestMaskData = 0;
 8002048:	2300      	movs	r3, #0
 800204a:	657b      	str	r3, [r7, #84]	@ 0x54
  nodeConfig.SrcAddress = audio_buffer_tx_ch1_r;
 800204c:	4b94      	ldr	r3, [pc, #592]	@ (80022a0 <MX_MDMA_Init+0x918>)
 800204e:	643b      	str	r3, [r7, #64]	@ 0x40
  nodeConfig.DstAddress = sai_buffer_tx+1;
 8002050:	4b94      	ldr	r3, [pc, #592]	@ (80022a4 <MX_MDMA_Init+0x91c>)
 8002052:	647b      	str	r3, [r7, #68]	@ 0x44
  nodeConfig.BlockDataLength = AUDIO_BUFFER_LENGTH;
 8002054:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002058:	64bb      	str	r3, [r7, #72]	@ 0x48
  nodeConfig.BlockCount = 1;
 800205a:	2301      	movs	r3, #1
 800205c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_MDMA_LinkedList_CreateNode(&node_mdma_channel2_sw_2, &nodeConfig) != HAL_OK)
 800205e:	f107 0308 	add.w	r3, r7, #8
 8002062:	4619      	mov	r1, r3
 8002064:	4890      	ldr	r0, [pc, #576]	@ (80022a8 <MX_MDMA_Init+0x920>)
 8002066:	f004 fd3b 	bl	8006ae0 <HAL_MDMA_LinkedList_CreateNode>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <MX_MDMA_Init+0x6ec>
  {
    Error_Handler();
 8002070:	f000 fd96 	bl	8002ba0 <Error_Handler>
  /* USER CODE BEGIN mdma_channel2_sw_2 */

  /* USER CODE END mdma_channel2_sw_2 */

  /* Connect a node to the linked list */
  if (HAL_MDMA_LinkedList_AddNode(&hmdma_mdma_channel2_sw_0, &node_mdma_channel2_sw_2, 0) != HAL_OK)
 8002074:	2200      	movs	r2, #0
 8002076:	498c      	ldr	r1, [pc, #560]	@ (80022a8 <MX_MDMA_Init+0x920>)
 8002078:	4888      	ldr	r0, [pc, #544]	@ (800229c <MX_MDMA_Init+0x914>)
 800207a:	f004 fe0d 	bl	8006c98 <HAL_MDMA_LinkedList_AddNode>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <MX_MDMA_Init+0x700>
  {
    Error_Handler();
 8002084:	f000 fd8c 	bl	8002ba0 <Error_Handler>
  }

  /* Initialize MDMA link node according to specified parameters */
  nodeConfig.Init.Request = MDMA_REQUEST_SW;
 8002088:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800208c:	60bb      	str	r3, [r7, #8]
  nodeConfig.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 800208e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002092:	60fb      	str	r3, [r7, #12]
  nodeConfig.Init.Priority = MDMA_PRIORITY_HIGH;
 8002094:	2380      	movs	r3, #128	@ 0x80
 8002096:	613b      	str	r3, [r7, #16]
  nodeConfig.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8002098:	2300      	movs	r3, #0
 800209a:	617b      	str	r3, [r7, #20]
  nodeConfig.Init.SourceInc = MDMA_SRC_INC_HALFWORD;
 800209c:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80020a0:	61bb      	str	r3, [r7, #24]
  nodeConfig.Init.DestinationInc = MDMA_DEST_INC_WORD;
 80020a2:	f640 0308 	movw	r3, #2056	@ 0x808
 80020a6:	61fb      	str	r3, [r7, #28]
  nodeConfig.Init.SourceDataSize = MDMA_SRC_DATASIZE_HALFWORD;
 80020a8:	2310      	movs	r3, #16
 80020aa:	623b      	str	r3, [r7, #32]
  nodeConfig.Init.DestDataSize = MDMA_DEST_DATASIZE_HALFWORD;
 80020ac:	2340      	movs	r3, #64	@ 0x40
 80020ae:	627b      	str	r3, [r7, #36]	@ 0x24
  nodeConfig.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 80020b0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80020b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  nodeConfig.Init.BufferTransferLength = AUDIO_SAMPLE_SIZE;
 80020b6:	2302      	movs	r3, #2
 80020b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  nodeConfig.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 80020ba:	2300      	movs	r3, #0
 80020bc:	633b      	str	r3, [r7, #48]	@ 0x30
  nodeConfig.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 80020be:	2300      	movs	r3, #0
 80020c0:	637b      	str	r3, [r7, #52]	@ 0x34
  nodeConfig.Init.SourceBlockAddressOffset = 0;
 80020c2:	2300      	movs	r3, #0
 80020c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  nodeConfig.Init.DestBlockAddressOffset = 0;
 80020c6:	2300      	movs	r3, #0
 80020c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  nodeConfig.PostRequestMaskAddress = 0;
 80020ca:	2300      	movs	r3, #0
 80020cc:	653b      	str	r3, [r7, #80]	@ 0x50
  nodeConfig.PostRequestMaskData = 0;
 80020ce:	2300      	movs	r3, #0
 80020d0:	657b      	str	r3, [r7, #84]	@ 0x54
  nodeConfig.SrcAddress = audio_buffer_tx_ch1_l+AUDIO_BUFFER_LENGTH_HALF;
 80020d2:	4b76      	ldr	r3, [pc, #472]	@ (80022ac <MX_MDMA_Init+0x924>)
 80020d4:	643b      	str	r3, [r7, #64]	@ 0x40
  nodeConfig.DstAddress = sai_buffer_tx+SAI_BUFFER_LENGTH_HALF;
 80020d6:	4b76      	ldr	r3, [pc, #472]	@ (80022b0 <MX_MDMA_Init+0x928>)
 80020d8:	647b      	str	r3, [r7, #68]	@ 0x44
  nodeConfig.BlockDataLength = AUDIO_BUFFER_LENGTH;
 80020da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020de:	64bb      	str	r3, [r7, #72]	@ 0x48
  nodeConfig.BlockCount = 1;
 80020e0:	2301      	movs	r3, #1
 80020e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_MDMA_LinkedList_CreateNode(&node_mdma_channel2_sw_3, &nodeConfig) != HAL_OK)
 80020e4:	f107 0308 	add.w	r3, r7, #8
 80020e8:	4619      	mov	r1, r3
 80020ea:	4872      	ldr	r0, [pc, #456]	@ (80022b4 <MX_MDMA_Init+0x92c>)
 80020ec:	f004 fcf8 	bl	8006ae0 <HAL_MDMA_LinkedList_CreateNode>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <MX_MDMA_Init+0x772>
  {
    Error_Handler();
 80020f6:	f000 fd53 	bl	8002ba0 <Error_Handler>
  /* USER CODE BEGIN mdma_channel2_sw_3 */

  /* USER CODE END mdma_channel2_sw_3 */

  /* Connect a node to the linked list */
  if (HAL_MDMA_LinkedList_AddNode(&hmdma_mdma_channel2_sw_0, &node_mdma_channel2_sw_3, 0) != HAL_OK)
 80020fa:	2200      	movs	r2, #0
 80020fc:	496d      	ldr	r1, [pc, #436]	@ (80022b4 <MX_MDMA_Init+0x92c>)
 80020fe:	4867      	ldr	r0, [pc, #412]	@ (800229c <MX_MDMA_Init+0x914>)
 8002100:	f004 fdca 	bl	8006c98 <HAL_MDMA_LinkedList_AddNode>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <MX_MDMA_Init+0x786>
  {
    Error_Handler();
 800210a:	f000 fd49 	bl	8002ba0 <Error_Handler>
  }

  /* Initialize MDMA link node according to specified parameters */
  nodeConfig.Init.Request = MDMA_REQUEST_SW;
 800210e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002112:	60bb      	str	r3, [r7, #8]
  nodeConfig.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 8002114:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002118:	60fb      	str	r3, [r7, #12]
  nodeConfig.Init.Priority = MDMA_PRIORITY_HIGH;
 800211a:	2380      	movs	r3, #128	@ 0x80
 800211c:	613b      	str	r3, [r7, #16]
  nodeConfig.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 800211e:	2300      	movs	r3, #0
 8002120:	617b      	str	r3, [r7, #20]
  nodeConfig.Init.SourceInc = MDMA_SRC_INC_HALFWORD;
 8002122:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8002126:	61bb      	str	r3, [r7, #24]
  nodeConfig.Init.DestinationInc = MDMA_DEST_INC_WORD;
 8002128:	f640 0308 	movw	r3, #2056	@ 0x808
 800212c:	61fb      	str	r3, [r7, #28]
  nodeConfig.Init.SourceDataSize = MDMA_SRC_DATASIZE_HALFWORD;
 800212e:	2310      	movs	r3, #16
 8002130:	623b      	str	r3, [r7, #32]
  nodeConfig.Init.DestDataSize = MDMA_DEST_DATASIZE_HALFWORD;
 8002132:	2340      	movs	r3, #64	@ 0x40
 8002134:	627b      	str	r3, [r7, #36]	@ 0x24
  nodeConfig.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8002136:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800213a:	62bb      	str	r3, [r7, #40]	@ 0x28
  nodeConfig.Init.BufferTransferLength = AUDIO_SAMPLE_SIZE;
 800213c:	2302      	movs	r3, #2
 800213e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  nodeConfig.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8002140:	2300      	movs	r3, #0
 8002142:	633b      	str	r3, [r7, #48]	@ 0x30
  nodeConfig.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8002144:	2300      	movs	r3, #0
 8002146:	637b      	str	r3, [r7, #52]	@ 0x34
  nodeConfig.Init.SourceBlockAddressOffset = 0;
 8002148:	2300      	movs	r3, #0
 800214a:	63bb      	str	r3, [r7, #56]	@ 0x38
  nodeConfig.Init.DestBlockAddressOffset = 0;
 800214c:	2300      	movs	r3, #0
 800214e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  nodeConfig.PostRequestMaskAddress = 0;
 8002150:	2300      	movs	r3, #0
 8002152:	653b      	str	r3, [r7, #80]	@ 0x50
  nodeConfig.PostRequestMaskData = 0;
 8002154:	2300      	movs	r3, #0
 8002156:	657b      	str	r3, [r7, #84]	@ 0x54
  nodeConfig.SrcAddress = audio_buffer_tx_ch1_r+AUDIO_BUFFER_LENGTH_HALF;
 8002158:	4b57      	ldr	r3, [pc, #348]	@ (80022b8 <MX_MDMA_Init+0x930>)
 800215a:	643b      	str	r3, [r7, #64]	@ 0x40
  nodeConfig.DstAddress = sai_buffer_tx+SAI_BUFFER_LENGTH_HALF+1;
 800215c:	4b57      	ldr	r3, [pc, #348]	@ (80022bc <MX_MDMA_Init+0x934>)
 800215e:	647b      	str	r3, [r7, #68]	@ 0x44
  nodeConfig.BlockDataLength = AUDIO_BUFFER_LENGTH;
 8002160:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002164:	64bb      	str	r3, [r7, #72]	@ 0x48
  nodeConfig.BlockCount = 1;
 8002166:	2301      	movs	r3, #1
 8002168:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_MDMA_LinkedList_CreateNode(&node_mdma_channel2_sw_4, &nodeConfig) != HAL_OK)
 800216a:	f107 0308 	add.w	r3, r7, #8
 800216e:	4619      	mov	r1, r3
 8002170:	4853      	ldr	r0, [pc, #332]	@ (80022c0 <MX_MDMA_Init+0x938>)
 8002172:	f004 fcb5 	bl	8006ae0 <HAL_MDMA_LinkedList_CreateNode>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <MX_MDMA_Init+0x7f8>
  {
    Error_Handler();
 800217c:	f000 fd10 	bl	8002ba0 <Error_Handler>
  /* USER CODE BEGIN mdma_channel2_sw_4 */

  /* USER CODE END mdma_channel2_sw_4 */

  /* Connect a node to the linked list */
  if (HAL_MDMA_LinkedList_AddNode(&hmdma_mdma_channel2_sw_0, &node_mdma_channel2_sw_4, 0) != HAL_OK)
 8002180:	2200      	movs	r2, #0
 8002182:	494f      	ldr	r1, [pc, #316]	@ (80022c0 <MX_MDMA_Init+0x938>)
 8002184:	4845      	ldr	r0, [pc, #276]	@ (800229c <MX_MDMA_Init+0x914>)
 8002186:	f004 fd87 	bl	8006c98 <HAL_MDMA_LinkedList_AddNode>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <MX_MDMA_Init+0x80c>
  {
    Error_Handler();
 8002190:	f000 fd06 	bl	8002ba0 <Error_Handler>
  }

  /* Make the linked list circular by connecting the last node to the first */
  if (HAL_MDMA_LinkedList_EnableCircularMode(&hmdma_mdma_channel2_sw_0) != HAL_OK)
 8002194:	4841      	ldr	r0, [pc, #260]	@ (800229c <MX_MDMA_Init+0x914>)
 8002196:	f004 fe43 	bl	8006e20 <HAL_MDMA_LinkedList_EnableCircularMode>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <MX_MDMA_Init+0x81c>
  {
    Error_Handler();
 80021a0:	f000 fcfe 	bl	8002ba0 <Error_Handler>
  }

  /* Configure MDMA channel MDMA_Channel1 */
  /* Configure MDMA request hmdma_mdma_channel1_sw_0 on MDMA_Channel1 */
  hmdma_mdma_channel1_sw_0.Instance = MDMA_Channel1;
 80021a4:	4b47      	ldr	r3, [pc, #284]	@ (80022c4 <MX_MDMA_Init+0x93c>)
 80021a6:	4a48      	ldr	r2, [pc, #288]	@ (80022c8 <MX_MDMA_Init+0x940>)
 80021a8:	601a      	str	r2, [r3, #0]
  hmdma_mdma_channel1_sw_0.Init.Request = MDMA_REQUEST_SW;
 80021aa:	4b46      	ldr	r3, [pc, #280]	@ (80022c4 <MX_MDMA_Init+0x93c>)
 80021ac:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80021b0:	605a      	str	r2, [r3, #4]
  hmdma_mdma_channel1_sw_0.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 80021b2:	4b44      	ldr	r3, [pc, #272]	@ (80022c4 <MX_MDMA_Init+0x93c>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	609a      	str	r2, [r3, #8]
  hmdma_mdma_channel1_sw_0.Init.Priority = MDMA_PRIORITY_HIGH;
 80021b8:	4b42      	ldr	r3, [pc, #264]	@ (80022c4 <MX_MDMA_Init+0x93c>)
 80021ba:	2280      	movs	r2, #128	@ 0x80
 80021bc:	60da      	str	r2, [r3, #12]
  hmdma_mdma_channel1_sw_0.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 80021be:	4b41      	ldr	r3, [pc, #260]	@ (80022c4 <MX_MDMA_Init+0x93c>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	611a      	str	r2, [r3, #16]
  hmdma_mdma_channel1_sw_0.Init.SourceInc = MDMA_SRC_INC_HALFWORD;
 80021c4:	4b3f      	ldr	r3, [pc, #252]	@ (80022c4 <MX_MDMA_Init+0x93c>)
 80021c6:	f44f 7281 	mov.w	r2, #258	@ 0x102
 80021ca:	615a      	str	r2, [r3, #20]
  hmdma_mdma_channel1_sw_0.Init.DestinationInc = MDMA_DEST_INC_WORD;
 80021cc:	4b3d      	ldr	r3, [pc, #244]	@ (80022c4 <MX_MDMA_Init+0x93c>)
 80021ce:	f640 0208 	movw	r2, #2056	@ 0x808
 80021d2:	619a      	str	r2, [r3, #24]
  hmdma_mdma_channel1_sw_0.Init.SourceDataSize = MDMA_SRC_DATASIZE_HALFWORD;
 80021d4:	4b3b      	ldr	r3, [pc, #236]	@ (80022c4 <MX_MDMA_Init+0x93c>)
 80021d6:	2210      	movs	r2, #16
 80021d8:	61da      	str	r2, [r3, #28]
  hmdma_mdma_channel1_sw_0.Init.DestDataSize = MDMA_DEST_DATASIZE_HALFWORD;
 80021da:	4b3a      	ldr	r3, [pc, #232]	@ (80022c4 <MX_MDMA_Init+0x93c>)
 80021dc:	2240      	movs	r2, #64	@ 0x40
 80021de:	621a      	str	r2, [r3, #32]
  hmdma_mdma_channel1_sw_0.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 80021e0:	4b38      	ldr	r3, [pc, #224]	@ (80022c4 <MX_MDMA_Init+0x93c>)
 80021e2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80021e6:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma_mdma_channel1_sw_0.Init.BufferTransferLength = AUDIO_SAMPLE_SIZE;
 80021e8:	4b36      	ldr	r3, [pc, #216]	@ (80022c4 <MX_MDMA_Init+0x93c>)
 80021ea:	2202      	movs	r2, #2
 80021ec:	629a      	str	r2, [r3, #40]	@ 0x28
  hmdma_mdma_channel1_sw_0.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 80021ee:	4b35      	ldr	r3, [pc, #212]	@ (80022c4 <MX_MDMA_Init+0x93c>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hmdma_mdma_channel1_sw_0.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 80021f4:	4b33      	ldr	r3, [pc, #204]	@ (80022c4 <MX_MDMA_Init+0x93c>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	631a      	str	r2, [r3, #48]	@ 0x30
  hmdma_mdma_channel1_sw_0.Init.SourceBlockAddressOffset = 0;
 80021fa:	4b32      	ldr	r3, [pc, #200]	@ (80022c4 <MX_MDMA_Init+0x93c>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	635a      	str	r2, [r3, #52]	@ 0x34
  hmdma_mdma_channel1_sw_0.Init.DestBlockAddressOffset = 0;
 8002200:	4b30      	ldr	r3, [pc, #192]	@ (80022c4 <MX_MDMA_Init+0x93c>)
 8002202:	2200      	movs	r2, #0
 8002204:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_MDMA_Init(&hmdma_mdma_channel1_sw_0) != HAL_OK)
 8002206:	482f      	ldr	r0, [pc, #188]	@ (80022c4 <MX_MDMA_Init+0x93c>)
 8002208:	f004 fbc3 	bl	8006992 <HAL_MDMA_Init>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <MX_MDMA_Init+0x88e>
  {
    Error_Handler();
 8002212:	f000 fcc5 	bl	8002ba0 <Error_Handler>
  }

  /* Initialize MDMA link node according to specified parameters */
  nodeConfig.Init.Request = MDMA_REQUEST_SW;
 8002216:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800221a:	60bb      	str	r3, [r7, #8]
  nodeConfig.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 800221c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002220:	60fb      	str	r3, [r7, #12]
  nodeConfig.Init.Priority = MDMA_PRIORITY_HIGH;
 8002222:	2380      	movs	r3, #128	@ 0x80
 8002224:	613b      	str	r3, [r7, #16]
  nodeConfig.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8002226:	2300      	movs	r3, #0
 8002228:	617b      	str	r3, [r7, #20]
  nodeConfig.Init.SourceInc = MDMA_SRC_INC_HALFWORD;
 800222a:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800222e:	61bb      	str	r3, [r7, #24]
  nodeConfig.Init.DestinationInc = MDMA_DEST_INC_WORD;
 8002230:	f640 0308 	movw	r3, #2056	@ 0x808
 8002234:	61fb      	str	r3, [r7, #28]
  nodeConfig.Init.SourceDataSize = MDMA_SRC_DATASIZE_HALFWORD;
 8002236:	2310      	movs	r3, #16
 8002238:	623b      	str	r3, [r7, #32]
  nodeConfig.Init.DestDataSize = MDMA_DEST_DATASIZE_HALFWORD;
 800223a:	2340      	movs	r3, #64	@ 0x40
 800223c:	627b      	str	r3, [r7, #36]	@ 0x24
  nodeConfig.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 800223e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002242:	62bb      	str	r3, [r7, #40]	@ 0x28
  nodeConfig.Init.BufferTransferLength = AUDIO_SAMPLE_SIZE;
 8002244:	2302      	movs	r3, #2
 8002246:	62fb      	str	r3, [r7, #44]	@ 0x2c
  nodeConfig.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8002248:	2300      	movs	r3, #0
 800224a:	633b      	str	r3, [r7, #48]	@ 0x30
  nodeConfig.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 800224c:	2300      	movs	r3, #0
 800224e:	637b      	str	r3, [r7, #52]	@ 0x34
  nodeConfig.Init.SourceBlockAddressOffset = 0;
 8002250:	2300      	movs	r3, #0
 8002252:	63bb      	str	r3, [r7, #56]	@ 0x38
  nodeConfig.Init.DestBlockAddressOffset = 0;
 8002254:	2300      	movs	r3, #0
 8002256:	63fb      	str	r3, [r7, #60]	@ 0x3c
  nodeConfig.PostRequestMaskAddress = 0;
 8002258:	2300      	movs	r3, #0
 800225a:	653b      	str	r3, [r7, #80]	@ 0x50
  nodeConfig.PostRequestMaskData = 0;
 800225c:	2300      	movs	r3, #0
 800225e:	657b      	str	r3, [r7, #84]	@ 0x54
  nodeConfig.SrcAddress = audio_buffer_tx_ch1_l;
 8002260:	4b1a      	ldr	r3, [pc, #104]	@ (80022cc <MX_MDMA_Init+0x944>)
 8002262:	643b      	str	r3, [r7, #64]	@ 0x40
  nodeConfig.DstAddress = sai_buffer_tx;
 8002264:	4b1a      	ldr	r3, [pc, #104]	@ (80022d0 <MX_MDMA_Init+0x948>)
 8002266:	647b      	str	r3, [r7, #68]	@ 0x44
  nodeConfig.BlockDataLength = AUDIO_BUFFER_LENGTH;
 8002268:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800226c:	64bb      	str	r3, [r7, #72]	@ 0x48
  nodeConfig.BlockCount = 1;
 800226e:	2301      	movs	r3, #1
 8002270:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_MDMA_LinkedList_CreateNode(&node_mdma_channel1_sw_1, &nodeConfig) != HAL_OK)
 8002272:	f107 0308 	add.w	r3, r7, #8
 8002276:	4619      	mov	r1, r3
 8002278:	4816      	ldr	r0, [pc, #88]	@ (80022d4 <MX_MDMA_Init+0x94c>)
 800227a:	f004 fc31 	bl	8006ae0 <HAL_MDMA_LinkedList_CreateNode>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <MX_MDMA_Init+0x900>
  {
    Error_Handler();
 8002284:	f000 fc8c 	bl	8002ba0 <Error_Handler>
  }
  /* USER CODE BEGIN mdma_channel1_sw_1 */
  HAL_MDMA_RegisterCallback(&hmdma_mdma_channel1_sw_0, HAL_MDMA_XFER_BLOCKCPLT_CB_ID, MDMA_TxXferBlockCpltCallback);
 8002288:	4a13      	ldr	r2, [pc, #76]	@ (80022d8 <MX_MDMA_Init+0x950>)
 800228a:	2102      	movs	r1, #2
 800228c:	480d      	ldr	r0, [pc, #52]	@ (80022c4 <MX_MDMA_Init+0x93c>)
 800228e:	f004 fbcd 	bl	8006a2c <HAL_MDMA_RegisterCallback>
  HAL_MDMA_RegisterCallback(&hmdma_mdma_channel1_sw_0, HAL_MDMA_XFER_ERROR_CB_ID, MDMA_TxErrorCallback);
 8002292:	4a12      	ldr	r2, [pc, #72]	@ (80022dc <MX_MDMA_Init+0x954>)
 8002294:	2104      	movs	r1, #4
 8002296:	e023      	b.n	80022e0 <MX_MDMA_Init+0x958>
 8002298:	2400055c 	.word	0x2400055c
 800229c:	240004f0 	.word	0x240004f0
 80022a0:	20000600 	.word	0x20000600
 80022a4:	24000b1a 	.word	0x24000b1a
 80022a8:	24000584 	.word	0x24000584
 80022ac:	20000500 	.word	0x20000500
 80022b0:	24000d18 	.word	0x24000d18
 80022b4:	240005ac 	.word	0x240005ac
 80022b8:	20000700 	.word	0x20000700
 80022bc:	24000d1a 	.word	0x24000d1a
 80022c0:	240005d4 	.word	0x240005d4
 80022c4:	240005fc 	.word	0x240005fc
 80022c8:	52000080 	.word	0x52000080
 80022cc:	20000400 	.word	0x20000400
 80022d0:	24000b18 	.word	0x24000b18
 80022d4:	24000668 	.word	0x24000668
 80022d8:	08002929 	.word	0x08002929
 80022dc:	08002985 	.word	0x08002985
 80022e0:	4874      	ldr	r0, [pc, #464]	@ (80024b4 <MX_MDMA_Init+0xb2c>)
 80022e2:	f004 fba3 	bl	8006a2c <HAL_MDMA_RegisterCallback>
  /* USER CODE END mdma_channel1_sw_1 */

  /* Connect a node to the linked list */
  if (HAL_MDMA_LinkedList_AddNode(&hmdma_mdma_channel1_sw_0, &node_mdma_channel1_sw_1, 0) != HAL_OK)
 80022e6:	2200      	movs	r2, #0
 80022e8:	4973      	ldr	r1, [pc, #460]	@ (80024b8 <MX_MDMA_Init+0xb30>)
 80022ea:	4872      	ldr	r0, [pc, #456]	@ (80024b4 <MX_MDMA_Init+0xb2c>)
 80022ec:	f004 fcd4 	bl	8006c98 <HAL_MDMA_LinkedList_AddNode>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <MX_MDMA_Init+0x972>
  {
    Error_Handler();
 80022f6:	f000 fc53 	bl	8002ba0 <Error_Handler>
  }

  /* Initialize MDMA link node according to specified parameters */
  nodeConfig.Init.Request = MDMA_REQUEST_SW;
 80022fa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80022fe:	60bb      	str	r3, [r7, #8]
  nodeConfig.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 8002300:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002304:	60fb      	str	r3, [r7, #12]
  nodeConfig.Init.Priority = MDMA_PRIORITY_HIGH;
 8002306:	2380      	movs	r3, #128	@ 0x80
 8002308:	613b      	str	r3, [r7, #16]
  nodeConfig.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 800230a:	2300      	movs	r3, #0
 800230c:	617b      	str	r3, [r7, #20]
  nodeConfig.Init.SourceInc = MDMA_SRC_INC_HALFWORD;
 800230e:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8002312:	61bb      	str	r3, [r7, #24]
  nodeConfig.Init.DestinationInc = MDMA_DEST_INC_WORD;
 8002314:	f640 0308 	movw	r3, #2056	@ 0x808
 8002318:	61fb      	str	r3, [r7, #28]
  nodeConfig.Init.SourceDataSize = MDMA_SRC_DATASIZE_HALFWORD;
 800231a:	2310      	movs	r3, #16
 800231c:	623b      	str	r3, [r7, #32]
  nodeConfig.Init.DestDataSize = MDMA_DEST_DATASIZE_HALFWORD;
 800231e:	2340      	movs	r3, #64	@ 0x40
 8002320:	627b      	str	r3, [r7, #36]	@ 0x24
  nodeConfig.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8002322:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002326:	62bb      	str	r3, [r7, #40]	@ 0x28
  nodeConfig.Init.BufferTransferLength = AUDIO_SAMPLE_SIZE;
 8002328:	2302      	movs	r3, #2
 800232a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  nodeConfig.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 800232c:	2300      	movs	r3, #0
 800232e:	633b      	str	r3, [r7, #48]	@ 0x30
  nodeConfig.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8002330:	2300      	movs	r3, #0
 8002332:	637b      	str	r3, [r7, #52]	@ 0x34
  nodeConfig.Init.SourceBlockAddressOffset = 0;
 8002334:	2300      	movs	r3, #0
 8002336:	63bb      	str	r3, [r7, #56]	@ 0x38
  nodeConfig.Init.DestBlockAddressOffset = 0;
 8002338:	2300      	movs	r3, #0
 800233a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  nodeConfig.PostRequestMaskAddress = 0;
 800233c:	2300      	movs	r3, #0
 800233e:	653b      	str	r3, [r7, #80]	@ 0x50
  nodeConfig.PostRequestMaskData = 0;
 8002340:	2300      	movs	r3, #0
 8002342:	657b      	str	r3, [r7, #84]	@ 0x54
  nodeConfig.SrcAddress = audio_buffer_tx_ch1_r;
 8002344:	4b5d      	ldr	r3, [pc, #372]	@ (80024bc <MX_MDMA_Init+0xb34>)
 8002346:	643b      	str	r3, [r7, #64]	@ 0x40
  nodeConfig.DstAddress = sai_buffer_tx+1;
 8002348:	4b5d      	ldr	r3, [pc, #372]	@ (80024c0 <MX_MDMA_Init+0xb38>)
 800234a:	647b      	str	r3, [r7, #68]	@ 0x44
  nodeConfig.BlockDataLength = AUDIO_BUFFER_LENGTH;
 800234c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002350:	64bb      	str	r3, [r7, #72]	@ 0x48
  nodeConfig.BlockCount = 1;
 8002352:	2301      	movs	r3, #1
 8002354:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_MDMA_LinkedList_CreateNode(&node_mdma_channel1_sw_2, &nodeConfig) != HAL_OK)
 8002356:	f107 0308 	add.w	r3, r7, #8
 800235a:	4619      	mov	r1, r3
 800235c:	4859      	ldr	r0, [pc, #356]	@ (80024c4 <MX_MDMA_Init+0xb3c>)
 800235e:	f004 fbbf 	bl	8006ae0 <HAL_MDMA_LinkedList_CreateNode>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <MX_MDMA_Init+0x9e4>
  {
    Error_Handler();
 8002368:	f000 fc1a 	bl	8002ba0 <Error_Handler>
  /* USER CODE BEGIN mdma_channel1_sw_2 */

  /* USER CODE END mdma_channel1_sw_2 */

  /* Connect a node to the linked list */
  if (HAL_MDMA_LinkedList_AddNode(&hmdma_mdma_channel1_sw_0, &node_mdma_channel1_sw_2, 0) != HAL_OK)
 800236c:	2200      	movs	r2, #0
 800236e:	4955      	ldr	r1, [pc, #340]	@ (80024c4 <MX_MDMA_Init+0xb3c>)
 8002370:	4850      	ldr	r0, [pc, #320]	@ (80024b4 <MX_MDMA_Init+0xb2c>)
 8002372:	f004 fc91 	bl	8006c98 <HAL_MDMA_LinkedList_AddNode>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <MX_MDMA_Init+0x9f8>
  {
    Error_Handler();
 800237c:	f000 fc10 	bl	8002ba0 <Error_Handler>
  }

  /* Initialize MDMA link node according to specified parameters */
  nodeConfig.Init.Request = MDMA_REQUEST_SW;
 8002380:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002384:	60bb      	str	r3, [r7, #8]
  nodeConfig.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 8002386:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800238a:	60fb      	str	r3, [r7, #12]
  nodeConfig.Init.Priority = MDMA_PRIORITY_HIGH;
 800238c:	2380      	movs	r3, #128	@ 0x80
 800238e:	613b      	str	r3, [r7, #16]
  nodeConfig.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8002390:	2300      	movs	r3, #0
 8002392:	617b      	str	r3, [r7, #20]
  nodeConfig.Init.SourceInc = MDMA_SRC_INC_HALFWORD;
 8002394:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8002398:	61bb      	str	r3, [r7, #24]
  nodeConfig.Init.DestinationInc = MDMA_DEST_INC_WORD;
 800239a:	f640 0308 	movw	r3, #2056	@ 0x808
 800239e:	61fb      	str	r3, [r7, #28]
  nodeConfig.Init.SourceDataSize = MDMA_SRC_DATASIZE_HALFWORD;
 80023a0:	2310      	movs	r3, #16
 80023a2:	623b      	str	r3, [r7, #32]
  nodeConfig.Init.DestDataSize = MDMA_DEST_DATASIZE_HALFWORD;
 80023a4:	2340      	movs	r3, #64	@ 0x40
 80023a6:	627b      	str	r3, [r7, #36]	@ 0x24
  nodeConfig.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 80023a8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80023ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  nodeConfig.Init.BufferTransferLength = AUDIO_SAMPLE_SIZE;
 80023ae:	2302      	movs	r3, #2
 80023b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  nodeConfig.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 80023b2:	2300      	movs	r3, #0
 80023b4:	633b      	str	r3, [r7, #48]	@ 0x30
  nodeConfig.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 80023b6:	2300      	movs	r3, #0
 80023b8:	637b      	str	r3, [r7, #52]	@ 0x34
  nodeConfig.Init.SourceBlockAddressOffset = 0;
 80023ba:	2300      	movs	r3, #0
 80023bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  nodeConfig.Init.DestBlockAddressOffset = 0;
 80023be:	2300      	movs	r3, #0
 80023c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  nodeConfig.PostRequestMaskAddress = 0;
 80023c2:	2300      	movs	r3, #0
 80023c4:	653b      	str	r3, [r7, #80]	@ 0x50
  nodeConfig.PostRequestMaskData = 0;
 80023c6:	2300      	movs	r3, #0
 80023c8:	657b      	str	r3, [r7, #84]	@ 0x54
  nodeConfig.SrcAddress = audio_buffer_tx_ch1_l+AUDIO_BUFFER_LENGTH_HALF;
 80023ca:	4b3f      	ldr	r3, [pc, #252]	@ (80024c8 <MX_MDMA_Init+0xb40>)
 80023cc:	643b      	str	r3, [r7, #64]	@ 0x40
  nodeConfig.DstAddress = sai_buffer_tx+SAI_BUFFER_LENGTH_HALF;
 80023ce:	4b3f      	ldr	r3, [pc, #252]	@ (80024cc <MX_MDMA_Init+0xb44>)
 80023d0:	647b      	str	r3, [r7, #68]	@ 0x44
  nodeConfig.BlockDataLength = AUDIO_BUFFER_LENGTH;
 80023d2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80023d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  nodeConfig.BlockCount = 1;
 80023d8:	2301      	movs	r3, #1
 80023da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_MDMA_LinkedList_CreateNode(&node_mdma_channel1_sw_3, &nodeConfig) != HAL_OK)
 80023dc:	f107 0308 	add.w	r3, r7, #8
 80023e0:	4619      	mov	r1, r3
 80023e2:	483b      	ldr	r0, [pc, #236]	@ (80024d0 <MX_MDMA_Init+0xb48>)
 80023e4:	f004 fb7c 	bl	8006ae0 <HAL_MDMA_LinkedList_CreateNode>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <MX_MDMA_Init+0xa6a>
  {
    Error_Handler();
 80023ee:	f000 fbd7 	bl	8002ba0 <Error_Handler>
  /* USER CODE BEGIN mdma_channel1_sw_3 */

  /* USER CODE END mdma_channel1_sw_3 */

  /* Connect a node to the linked list */
  if (HAL_MDMA_LinkedList_AddNode(&hmdma_mdma_channel1_sw_0, &node_mdma_channel1_sw_3, 0) != HAL_OK)
 80023f2:	2200      	movs	r2, #0
 80023f4:	4936      	ldr	r1, [pc, #216]	@ (80024d0 <MX_MDMA_Init+0xb48>)
 80023f6:	482f      	ldr	r0, [pc, #188]	@ (80024b4 <MX_MDMA_Init+0xb2c>)
 80023f8:	f004 fc4e 	bl	8006c98 <HAL_MDMA_LinkedList_AddNode>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <MX_MDMA_Init+0xa7e>
  {
    Error_Handler();
 8002402:	f000 fbcd 	bl	8002ba0 <Error_Handler>
  }

  /* Initialize MDMA link node according to specified parameters */
  nodeConfig.Init.Request = MDMA_REQUEST_SW;
 8002406:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800240a:	60bb      	str	r3, [r7, #8]
  nodeConfig.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 800240c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002410:	60fb      	str	r3, [r7, #12]
  nodeConfig.Init.Priority = MDMA_PRIORITY_HIGH;
 8002412:	2380      	movs	r3, #128	@ 0x80
 8002414:	613b      	str	r3, [r7, #16]
  nodeConfig.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8002416:	2300      	movs	r3, #0
 8002418:	617b      	str	r3, [r7, #20]
  nodeConfig.Init.SourceInc = MDMA_SRC_INC_HALFWORD;
 800241a:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800241e:	61bb      	str	r3, [r7, #24]
  nodeConfig.Init.DestinationInc = MDMA_DEST_INC_WORD;
 8002420:	f640 0308 	movw	r3, #2056	@ 0x808
 8002424:	61fb      	str	r3, [r7, #28]
  nodeConfig.Init.SourceDataSize = MDMA_SRC_DATASIZE_HALFWORD;
 8002426:	2310      	movs	r3, #16
 8002428:	623b      	str	r3, [r7, #32]
  nodeConfig.Init.DestDataSize = MDMA_DEST_DATASIZE_HALFWORD;
 800242a:	2340      	movs	r3, #64	@ 0x40
 800242c:	627b      	str	r3, [r7, #36]	@ 0x24
  nodeConfig.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 800242e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002432:	62bb      	str	r3, [r7, #40]	@ 0x28
  nodeConfig.Init.BufferTransferLength = AUDIO_SAMPLE_SIZE;
 8002434:	2302      	movs	r3, #2
 8002436:	62fb      	str	r3, [r7, #44]	@ 0x2c
  nodeConfig.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8002438:	2300      	movs	r3, #0
 800243a:	633b      	str	r3, [r7, #48]	@ 0x30
  nodeConfig.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 800243c:	2300      	movs	r3, #0
 800243e:	637b      	str	r3, [r7, #52]	@ 0x34
  nodeConfig.Init.SourceBlockAddressOffset = 0;
 8002440:	2300      	movs	r3, #0
 8002442:	63bb      	str	r3, [r7, #56]	@ 0x38
  nodeConfig.Init.DestBlockAddressOffset = 0;
 8002444:	2300      	movs	r3, #0
 8002446:	63fb      	str	r3, [r7, #60]	@ 0x3c
  nodeConfig.PostRequestMaskAddress = 0;
 8002448:	2300      	movs	r3, #0
 800244a:	653b      	str	r3, [r7, #80]	@ 0x50
  nodeConfig.PostRequestMaskData = 0;
 800244c:	2300      	movs	r3, #0
 800244e:	657b      	str	r3, [r7, #84]	@ 0x54
  nodeConfig.SrcAddress = audio_buffer_tx_ch1_r+AUDIO_BUFFER_LENGTH_HALF;
 8002450:	4b20      	ldr	r3, [pc, #128]	@ (80024d4 <MX_MDMA_Init+0xb4c>)
 8002452:	643b      	str	r3, [r7, #64]	@ 0x40
  nodeConfig.DstAddress = sai_buffer_tx+SAI_BUFFER_LENGTH_HALF+1;
 8002454:	4b20      	ldr	r3, [pc, #128]	@ (80024d8 <MX_MDMA_Init+0xb50>)
 8002456:	647b      	str	r3, [r7, #68]	@ 0x44
  nodeConfig.BlockDataLength = AUDIO_BUFFER_LENGTH;
 8002458:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800245c:	64bb      	str	r3, [r7, #72]	@ 0x48
  nodeConfig.BlockCount = 1;
 800245e:	2301      	movs	r3, #1
 8002460:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_MDMA_LinkedList_CreateNode(&node_mdma_channel1_sw_4, &nodeConfig) != HAL_OK)
 8002462:	f107 0308 	add.w	r3, r7, #8
 8002466:	4619      	mov	r1, r3
 8002468:	481c      	ldr	r0, [pc, #112]	@ (80024dc <MX_MDMA_Init+0xb54>)
 800246a:	f004 fb39 	bl	8006ae0 <HAL_MDMA_LinkedList_CreateNode>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <MX_MDMA_Init+0xaf0>
  {
    Error_Handler();
 8002474:	f000 fb94 	bl	8002ba0 <Error_Handler>
  /* USER CODE BEGIN mdma_channel1_sw_4 */

  /* USER CODE END mdma_channel1_sw_4 */

  /* Connect a node to the linked list */
  if (HAL_MDMA_LinkedList_AddNode(&hmdma_mdma_channel1_sw_0, &node_mdma_channel1_sw_4, 0) != HAL_OK)
 8002478:	2200      	movs	r2, #0
 800247a:	4918      	ldr	r1, [pc, #96]	@ (80024dc <MX_MDMA_Init+0xb54>)
 800247c:	480d      	ldr	r0, [pc, #52]	@ (80024b4 <MX_MDMA_Init+0xb2c>)
 800247e:	f004 fc0b 	bl	8006c98 <HAL_MDMA_LinkedList_AddNode>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d001      	beq.n	800248c <MX_MDMA_Init+0xb04>
  {
    Error_Handler();
 8002488:	f000 fb8a 	bl	8002ba0 <Error_Handler>
  }

  /* Make the linked list circular by connecting the last node to the first */
  if (HAL_MDMA_LinkedList_EnableCircularMode(&hmdma_mdma_channel1_sw_0) != HAL_OK)
 800248c:	4809      	ldr	r0, [pc, #36]	@ (80024b4 <MX_MDMA_Init+0xb2c>)
 800248e:	f004 fcc7 	bl	8006e20 <HAL_MDMA_LinkedList_EnableCircularMode>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <MX_MDMA_Init+0xb14>
  {
    Error_Handler();
 8002498:	f000 fb82 	bl	8002ba0 <Error_Handler>
  }

  /* MDMA interrupt initialization */
  /* MDMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MDMA_IRQn, 0, 0);
 800249c:	2200      	movs	r2, #0
 800249e:	2100      	movs	r1, #0
 80024a0:	207a      	movs	r0, #122	@ 0x7a
 80024a2:	f001 f830 	bl	8003506 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 80024a6:	207a      	movs	r0, #122	@ 0x7a
 80024a8:	f001 f847 	bl	800353a <HAL_NVIC_EnableIRQ>

}
 80024ac:	bf00      	nop
 80024ae:	3758      	adds	r7, #88	@ 0x58
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	240005fc 	.word	0x240005fc
 80024b8:	24000668 	.word	0x24000668
 80024bc:	20000600 	.word	0x20000600
 80024c0:	24000b1a 	.word	0x24000b1a
 80024c4:	24000690 	.word	0x24000690
 80024c8:	20000500 	.word	0x20000500
 80024cc:	24000d18 	.word	0x24000d18
 80024d0:	240006b8 	.word	0x240006b8
 80024d4:	20000700 	.word	0x20000700
 80024d8:	24000d1a 	.word	0x24000d1a
 80024dc:	240006e0 	.word	0x240006e0

080024e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b08c      	sub	sp, #48	@ 0x30
 80024e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e6:	f107 031c 	add.w	r3, r7, #28
 80024ea:	2200      	movs	r2, #0
 80024ec:	601a      	str	r2, [r3, #0]
 80024ee:	605a      	str	r2, [r3, #4]
 80024f0:	609a      	str	r2, [r3, #8]
 80024f2:	60da      	str	r2, [r3, #12]
 80024f4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80024f6:	4b63      	ldr	r3, [pc, #396]	@ (8002684 <MX_GPIO_Init+0x1a4>)
 80024f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024fc:	4a61      	ldr	r2, [pc, #388]	@ (8002684 <MX_GPIO_Init+0x1a4>)
 80024fe:	f043 0310 	orr.w	r3, r3, #16
 8002502:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002506:	4b5f      	ldr	r3, [pc, #380]	@ (8002684 <MX_GPIO_Init+0x1a4>)
 8002508:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800250c:	f003 0310 	and.w	r3, r3, #16
 8002510:	61bb      	str	r3, [r7, #24]
 8002512:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002514:	4b5b      	ldr	r3, [pc, #364]	@ (8002684 <MX_GPIO_Init+0x1a4>)
 8002516:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800251a:	4a5a      	ldr	r2, [pc, #360]	@ (8002684 <MX_GPIO_Init+0x1a4>)
 800251c:	f043 0304 	orr.w	r3, r3, #4
 8002520:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002524:	4b57      	ldr	r3, [pc, #348]	@ (8002684 <MX_GPIO_Init+0x1a4>)
 8002526:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800252a:	f003 0304 	and.w	r3, r3, #4
 800252e:	617b      	str	r3, [r7, #20]
 8002530:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002532:	4b54      	ldr	r3, [pc, #336]	@ (8002684 <MX_GPIO_Init+0x1a4>)
 8002534:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002538:	4a52      	ldr	r2, [pc, #328]	@ (8002684 <MX_GPIO_Init+0x1a4>)
 800253a:	f043 0301 	orr.w	r3, r3, #1
 800253e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002542:	4b50      	ldr	r3, [pc, #320]	@ (8002684 <MX_GPIO_Init+0x1a4>)
 8002544:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002548:	f003 0301 	and.w	r3, r3, #1
 800254c:	613b      	str	r3, [r7, #16]
 800254e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002550:	4b4c      	ldr	r3, [pc, #304]	@ (8002684 <MX_GPIO_Init+0x1a4>)
 8002552:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002556:	4a4b      	ldr	r2, [pc, #300]	@ (8002684 <MX_GPIO_Init+0x1a4>)
 8002558:	f043 0302 	orr.w	r3, r3, #2
 800255c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002560:	4b48      	ldr	r3, [pc, #288]	@ (8002684 <MX_GPIO_Init+0x1a4>)
 8002562:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	60fb      	str	r3, [r7, #12]
 800256c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800256e:	4b45      	ldr	r3, [pc, #276]	@ (8002684 <MX_GPIO_Init+0x1a4>)
 8002570:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002574:	4a43      	ldr	r2, [pc, #268]	@ (8002684 <MX_GPIO_Init+0x1a4>)
 8002576:	f043 0308 	orr.w	r3, r3, #8
 800257a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800257e:	4b41      	ldr	r3, [pc, #260]	@ (8002684 <MX_GPIO_Init+0x1a4>)
 8002580:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002584:	f003 0308 	and.w	r3, r3, #8
 8002588:	60bb      	str	r3, [r7, #8]
 800258a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800258c:	4b3d      	ldr	r3, [pc, #244]	@ (8002684 <MX_GPIO_Init+0x1a4>)
 800258e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002592:	4a3c      	ldr	r2, [pc, #240]	@ (8002684 <MX_GPIO_Init+0x1a4>)
 8002594:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002598:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800259c:	4b39      	ldr	r3, [pc, #228]	@ (8002684 <MX_GPIO_Init+0x1a4>)
 800259e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025a6:	607b      	str	r3, [r7, #4]
 80025a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_RESET);
 80025aa:	2200      	movs	r2, #0
 80025ac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80025b0:	4835      	ldr	r0, [pc, #212]	@ (8002688 <MX_GPIO_Init+0x1a8>)
 80025b2:	f003 fb83 	bl	8005cbc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80025b6:	2332      	movs	r3, #50	@ 0x32
 80025b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ba:	2302      	movs	r3, #2
 80025bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025be:	2300      	movs	r3, #0
 80025c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c2:	2300      	movs	r3, #0
 80025c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80025c6:	230b      	movs	r3, #11
 80025c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025ca:	f107 031c 	add.w	r3, r7, #28
 80025ce:	4619      	mov	r1, r3
 80025d0:	482e      	ldr	r0, [pc, #184]	@ (800268c <MX_GPIO_Init+0x1ac>)
 80025d2:	f003 f9ab 	bl	800592c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80025d6:	2386      	movs	r3, #134	@ 0x86
 80025d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025da:	2302      	movs	r3, #2
 80025dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025de:	2300      	movs	r3, #0
 80025e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e2:	2300      	movs	r3, #0
 80025e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80025e6:	230b      	movs	r3, #11
 80025e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ea:	f107 031c 	add.w	r3, r7, #28
 80025ee:	4619      	mov	r1, r3
 80025f0:	4827      	ldr	r0, [pc, #156]	@ (8002690 <MX_GPIO_Init+0x1b0>)
 80025f2:	f003 f99b 	bl	800592c <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_Pin */
  GPIO_InitStruct.Pin = RESET_Pin;
 80025f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80025fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025fc:	2301      	movs	r3, #1
 80025fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002600:	2300      	movs	r3, #0
 8002602:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002604:	2303      	movs	r3, #3
 8002606:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 8002608:	f107 031c 	add.w	r3, r7, #28
 800260c:	4619      	mov	r1, r3
 800260e:	481e      	ldr	r0, [pc, #120]	@ (8002688 <MX_GPIO_Init+0x1a8>)
 8002610:	f003 f98c 	bl	800592c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002614:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002618:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800261a:	2302      	movs	r3, #2
 800261c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261e:	2300      	movs	r3, #0
 8002620:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002622:	2300      	movs	r3, #0
 8002624:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002626:	230b      	movs	r3, #11
 8002628:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800262a:	f107 031c 	add.w	r3, r7, #28
 800262e:	4619      	mov	r1, r3
 8002630:	4818      	ldr	r0, [pc, #96]	@ (8002694 <MX_GPIO_Init+0x1b4>)
 8002632:	f003 f97b 	bl	800592c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8002636:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 800263a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800263c:	2302      	movs	r3, #2
 800263e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002640:	2300      	movs	r3, #0
 8002642:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002644:	2300      	movs	r3, #0
 8002646:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002648:	230a      	movs	r3, #10
 800264a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800264c:	f107 031c 	add.w	r3, r7, #28
 8002650:	4619      	mov	r1, r3
 8002652:	480f      	ldr	r0, [pc, #60]	@ (8002690 <MX_GPIO_Init+0x1b0>)
 8002654:	f003 f96a 	bl	800592c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8002658:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800265c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800265e:	2302      	movs	r3, #2
 8002660:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002662:	2300      	movs	r3, #0
 8002664:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002666:	2300      	movs	r3, #0
 8002668:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800266a:	230b      	movs	r3, #11
 800266c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800266e:	f107 031c 	add.w	r3, r7, #28
 8002672:	4619      	mov	r1, r3
 8002674:	4808      	ldr	r0, [pc, #32]	@ (8002698 <MX_GPIO_Init+0x1b8>)
 8002676:	f003 f959 	bl	800592c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800267a:	bf00      	nop
 800267c:	3730      	adds	r7, #48	@ 0x30
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	58024400 	.word	0x58024400
 8002688:	58021000 	.word	0x58021000
 800268c:	58020800 	.word	0x58020800
 8002690:	58020000 	.word	0x58020000
 8002694:	58020400 	.word	0x58020400
 8002698:	58021800 	.word	0x58021800

0800269c <HAL_SAI_RxHalfCpltCallback>:

/* USER CODE BEGIN 4 */
//TODO Adress/Size aligment error, Read error
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai) {
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
//	else{
//		HAL_MDMA_GenerateSWRequest(&hmdma_mdma_channel0_sw_0);
//	}
	//memcpy(&sai_buffer_tx[0], &sai_buffer_rx[0], AUDIO_BUFFER_SIZE/2 * sizeof(uint16_t));

}
 80026a4:	bf00      	nop
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <HAL_SAI_RxCpltCallback>:

void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai) {
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
//	CLEAR_BIT(audio_dsp_status, AUDIO_STATUS_FULL);
//	CLEAR_BIT(audio_tx_status, AUDIO_STATUS_FULL);

    //memcpy(&sai_buffer_tx[AUDIO_BUFFER_SIZE/2], &sai_buffer_rx[AUDIO_BUFFER_SIZE/2], AUDIO_BUFFER_SIZE/2 * sizeof(uint16_t));

}
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <HAL_SAI_TxHalfCpltCallback>:

void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai) {
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
	//CLEAR_BIT(audio_tx_status, AUDIO_STATUS_FULL);

}
 80026cc:	bf00      	nop
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr

080026d8 <HAL_SAI_TxCpltCallback>:

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai) {
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
	//CLEAR_BIT(audio_tx_status, AUDIO_STATUS_HALF_PART);
}
 80026e0:	bf00      	nop
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr

080026ec <MDMA_RxXferBlockCpltCallback>:

void MDMA_RxXferBlockCpltCallback(MDMA_HandleTypeDef *_hdma)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
	transfercounter++;
 80026f4:	4b89      	ldr	r3, [pc, #548]	@ (800291c <MDMA_RxXferBlockCpltCallback+0x230>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	3301      	adds	r3, #1
 80026fa:	4a88      	ldr	r2, [pc, #544]	@ (800291c <MDMA_RxXferBlockCpltCallback+0x230>)
 80026fc:	6013      	str	r3, [r2, #0]
	uint32_t transferCounter = transfercounter;
 80026fe:	4b87      	ldr	r3, [pc, #540]	@ (800291c <MDMA_RxXferBlockCpltCallback+0x230>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	60fb      	str	r3, [r7, #12]
	uint8_t nextNodeIndex = 0;
 8002704:	2300      	movs	r3, #0
 8002706:	75fb      	strb	r3, [r7, #23]
	MDMA_LinkNodeTypeDef* currNode = _hdma->FirstLinkedListNodeAddress;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800270c:	613b      	str	r3, [r7, #16]
	for(; nextNodeIndex < _hdma->LinkedListNodeCounter && currNode != (MDMA_LinkNodeTypeDef*)_hdma->Instance->CLAR; nextNodeIndex++, currNode = (MDMA_LinkNodeTypeDef*)currNode->CLAR)
 800270e:	e005      	b.n	800271c <MDMA_RxXferBlockCpltCallback+0x30>
 8002710:	7dfb      	ldrb	r3, [r7, #23]
 8002712:	3301      	adds	r3, #1
 8002714:	75fb      	strb	r3, [r7, #23]
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	695b      	ldr	r3, [r3, #20]
 800271a:	613b      	str	r3, [r7, #16]
 800271c:	7dfa      	ldrb	r2, [r7, #23]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002722:	429a      	cmp	r2, r3
 8002724:	d206      	bcs.n	8002734 <MDMA_RxXferBlockCpltCallback+0x48>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800272c:	461a      	mov	r2, r3
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	4293      	cmp	r3, r2
 8002732:	d1ed      	bne.n	8002710 <MDMA_RxXferBlockCpltCallback+0x24>
	{
	}
	switch(nextNodeIndex){
 8002734:	7dfb      	ldrb	r3, [r7, #23]
 8002736:	2b07      	cmp	r3, #7
 8002738:	f200 80ec 	bhi.w	8002914 <MDMA_RxXferBlockCpltCallback+0x228>
 800273c:	a201      	add	r2, pc, #4	@ (adr r2, 8002744 <MDMA_RxXferBlockCpltCallback+0x58>)
 800273e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002742:	bf00      	nop
 8002744:	08002765 	.word	0x08002765
 8002748:	0800279b 	.word	0x0800279b
 800274c:	080027d1 	.word	0x080027d1
 8002750:	08002807 	.word	0x08002807
 8002754:	0800283d 	.word	0x0800283d
 8002758:	08002873 	.word	0x08002873
 800275c:	080028a9 	.word	0x080028a9
 8002760:	080028df 	.word	0x080028df
	case 0:
		if(READ_BIT(audio_tx_status, AUDIO_STATUS_R_PENDING)){
 8002764:	4b6e      	ldr	r3, [pc, #440]	@ (8002920 <MDMA_RxXferBlockCpltCallback+0x234>)
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	b2db      	uxtb	r3, r3
 800276a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800276e:	2b00      	cmp	r3, #0
 8002770:	d010      	beq.n	8002794 <MDMA_RxXferBlockCpltCallback+0xa8>
			SET_BIT(audio_tx_status, AUDIO_STATUS_R_CPLT);
 8002772:	4b6b      	ldr	r3, [pc, #428]	@ (8002920 <MDMA_RxXferBlockCpltCallback+0x234>)
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	b2db      	uxtb	r3, r3
 8002778:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800277c:	b2da      	uxtb	r2, r3
 800277e:	4b68      	ldr	r3, [pc, #416]	@ (8002920 <MDMA_RxXferBlockCpltCallback+0x234>)
 8002780:	701a      	strb	r2, [r3, #0]
			CLEAR_BIT(audio_tx_status, AUDIO_STATUS_R_PENDING);
 8002782:	4b67      	ldr	r3, [pc, #412]	@ (8002920 <MDMA_RxXferBlockCpltCallback+0x234>)
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	b2db      	uxtb	r3, r3
 8002788:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800278c:	b2da      	uxtb	r2, r3
 800278e:	4b64      	ldr	r3, [pc, #400]	@ (8002920 <MDMA_RxXferBlockCpltCallback+0x234>)
 8002790:	701a      	strb	r2, [r3, #0]
		}else{
			Error_Handler();
		}
		break;
 8002792:	e0bf      	b.n	8002914 <MDMA_RxXferBlockCpltCallback+0x228>
			Error_Handler();
 8002794:	f000 fa04 	bl	8002ba0 <Error_Handler>
		break;
 8002798:	e0bc      	b.n	8002914 <MDMA_RxXferBlockCpltCallback+0x228>
	case 1:
		if(READ_BIT(audio_rx_status, AUDIO_STATUS_L_HALF_PENDING)){
 800279a:	4b62      	ldr	r3, [pc, #392]	@ (8002924 <MDMA_RxXferBlockCpltCallback+0x238>)
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	f003 0301 	and.w	r3, r3, #1
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d010      	beq.n	80027ca <MDMA_RxXferBlockCpltCallback+0xde>
			SET_BIT(audio_rx_status, AUDIO_STATUS_L_HALF_CPLT);
 80027a8:	4b5e      	ldr	r3, [pc, #376]	@ (8002924 <MDMA_RxXferBlockCpltCallback+0x238>)
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	f043 0302 	orr.w	r3, r3, #2
 80027b2:	b2da      	uxtb	r2, r3
 80027b4:	4b5b      	ldr	r3, [pc, #364]	@ (8002924 <MDMA_RxXferBlockCpltCallback+0x238>)
 80027b6:	701a      	strb	r2, [r3, #0]
			CLEAR_BIT(audio_rx_status, AUDIO_STATUS_L_HALF_PENDING);
 80027b8:	4b5a      	ldr	r3, [pc, #360]	@ (8002924 <MDMA_RxXferBlockCpltCallback+0x238>)
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	f023 0301 	bic.w	r3, r3, #1
 80027c2:	b2da      	uxtb	r2, r3
 80027c4:	4b57      	ldr	r3, [pc, #348]	@ (8002924 <MDMA_RxXferBlockCpltCallback+0x238>)
 80027c6:	701a      	strb	r2, [r3, #0]
		}else{
			Error_Handler();
		}
		break;
 80027c8:	e0a4      	b.n	8002914 <MDMA_RxXferBlockCpltCallback+0x228>
			Error_Handler();
 80027ca:	f000 f9e9 	bl	8002ba0 <Error_Handler>
		break;
 80027ce:	e0a1      	b.n	8002914 <MDMA_RxXferBlockCpltCallback+0x228>
	case 2:
		if(READ_BIT(audio_rx_status, AUDIO_STATUS_R_HALF_PENDING)){
 80027d0:	4b54      	ldr	r3, [pc, #336]	@ (8002924 <MDMA_RxXferBlockCpltCallback+0x238>)
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	f003 0304 	and.w	r3, r3, #4
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d010      	beq.n	8002800 <MDMA_RxXferBlockCpltCallback+0x114>
			SET_BIT(audio_rx_status, AUDIO_STATUS_R_HALF_CPLT);
 80027de:	4b51      	ldr	r3, [pc, #324]	@ (8002924 <MDMA_RxXferBlockCpltCallback+0x238>)
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	f043 0308 	orr.w	r3, r3, #8
 80027e8:	b2da      	uxtb	r2, r3
 80027ea:	4b4e      	ldr	r3, [pc, #312]	@ (8002924 <MDMA_RxXferBlockCpltCallback+0x238>)
 80027ec:	701a      	strb	r2, [r3, #0]
			CLEAR_BIT(audio_rx_status, AUDIO_STATUS_R_HALF_PENDING);
 80027ee:	4b4d      	ldr	r3, [pc, #308]	@ (8002924 <MDMA_RxXferBlockCpltCallback+0x238>)
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	f023 0304 	bic.w	r3, r3, #4
 80027f8:	b2da      	uxtb	r2, r3
 80027fa:	4b4a      	ldr	r3, [pc, #296]	@ (8002924 <MDMA_RxXferBlockCpltCallback+0x238>)
 80027fc:	701a      	strb	r2, [r3, #0]
		}else{
			Error_Handler();
		}
		break;
 80027fe:	e089      	b.n	8002914 <MDMA_RxXferBlockCpltCallback+0x228>
			Error_Handler();
 8002800:	f000 f9ce 	bl	8002ba0 <Error_Handler>
		break;
 8002804:	e086      	b.n	8002914 <MDMA_RxXferBlockCpltCallback+0x228>
	case 3:
		if(READ_BIT(audio_tx_status, AUDIO_STATUS_L_HALF_PENDING)){
 8002806:	4b46      	ldr	r3, [pc, #280]	@ (8002920 <MDMA_RxXferBlockCpltCallback+0x234>)
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	b2db      	uxtb	r3, r3
 800280c:	f003 0301 	and.w	r3, r3, #1
 8002810:	2b00      	cmp	r3, #0
 8002812:	d010      	beq.n	8002836 <MDMA_RxXferBlockCpltCallback+0x14a>
			SET_BIT(audio_tx_status, AUDIO_STATUS_L_HALF_CPLT);
 8002814:	4b42      	ldr	r3, [pc, #264]	@ (8002920 <MDMA_RxXferBlockCpltCallback+0x234>)
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	b2db      	uxtb	r3, r3
 800281a:	f043 0302 	orr.w	r3, r3, #2
 800281e:	b2da      	uxtb	r2, r3
 8002820:	4b3f      	ldr	r3, [pc, #252]	@ (8002920 <MDMA_RxXferBlockCpltCallback+0x234>)
 8002822:	701a      	strb	r2, [r3, #0]
			CLEAR_BIT(audio_tx_status, AUDIO_STATUS_L_HALF_PENDING);
 8002824:	4b3e      	ldr	r3, [pc, #248]	@ (8002920 <MDMA_RxXferBlockCpltCallback+0x234>)
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	b2db      	uxtb	r3, r3
 800282a:	f023 0301 	bic.w	r3, r3, #1
 800282e:	b2da      	uxtb	r2, r3
 8002830:	4b3b      	ldr	r3, [pc, #236]	@ (8002920 <MDMA_RxXferBlockCpltCallback+0x234>)
 8002832:	701a      	strb	r2, [r3, #0]
		}else{
			Error_Handler();
		}
		break;
 8002834:	e06e      	b.n	8002914 <MDMA_RxXferBlockCpltCallback+0x228>
			Error_Handler();
 8002836:	f000 f9b3 	bl	8002ba0 <Error_Handler>
		break;
 800283a:	e06b      	b.n	8002914 <MDMA_RxXferBlockCpltCallback+0x228>
	case 4:
		if(READ_BIT(audio_tx_status, AUDIO_STATUS_R_HALF_PENDING)){
 800283c:	4b38      	ldr	r3, [pc, #224]	@ (8002920 <MDMA_RxXferBlockCpltCallback+0x234>)
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	b2db      	uxtb	r3, r3
 8002842:	f003 0304 	and.w	r3, r3, #4
 8002846:	2b00      	cmp	r3, #0
 8002848:	d010      	beq.n	800286c <MDMA_RxXferBlockCpltCallback+0x180>
			SET_BIT(audio_tx_status, AUDIO_STATUS_R_HALF_CPLT);
 800284a:	4b35      	ldr	r3, [pc, #212]	@ (8002920 <MDMA_RxXferBlockCpltCallback+0x234>)
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	b2db      	uxtb	r3, r3
 8002850:	f043 0308 	orr.w	r3, r3, #8
 8002854:	b2da      	uxtb	r2, r3
 8002856:	4b32      	ldr	r3, [pc, #200]	@ (8002920 <MDMA_RxXferBlockCpltCallback+0x234>)
 8002858:	701a      	strb	r2, [r3, #0]
			CLEAR_BIT(audio_tx_status, AUDIO_STATUS_R_HALF_PENDING);
 800285a:	4b31      	ldr	r3, [pc, #196]	@ (8002920 <MDMA_RxXferBlockCpltCallback+0x234>)
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	b2db      	uxtb	r3, r3
 8002860:	f023 0304 	bic.w	r3, r3, #4
 8002864:	b2da      	uxtb	r2, r3
 8002866:	4b2e      	ldr	r3, [pc, #184]	@ (8002920 <MDMA_RxXferBlockCpltCallback+0x234>)
 8002868:	701a      	strb	r2, [r3, #0]
		}else{
			Error_Handler();
		}
		break;
 800286a:	e053      	b.n	8002914 <MDMA_RxXferBlockCpltCallback+0x228>
			Error_Handler();
 800286c:	f000 f998 	bl	8002ba0 <Error_Handler>
		break;
 8002870:	e050      	b.n	8002914 <MDMA_RxXferBlockCpltCallback+0x228>
	case 5:
		if(READ_BIT(audio_rx_status, AUDIO_STATUS_L_PENDING)){
 8002872:	4b2c      	ldr	r3, [pc, #176]	@ (8002924 <MDMA_RxXferBlockCpltCallback+0x238>)
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	b2db      	uxtb	r3, r3
 8002878:	f003 0310 	and.w	r3, r3, #16
 800287c:	2b00      	cmp	r3, #0
 800287e:	d010      	beq.n	80028a2 <MDMA_RxXferBlockCpltCallback+0x1b6>
			SET_BIT(audio_rx_status, AUDIO_STATUS_L_CPLT);
 8002880:	4b28      	ldr	r3, [pc, #160]	@ (8002924 <MDMA_RxXferBlockCpltCallback+0x238>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	b2db      	uxtb	r3, r3
 8002886:	f043 0320 	orr.w	r3, r3, #32
 800288a:	b2da      	uxtb	r2, r3
 800288c:	4b25      	ldr	r3, [pc, #148]	@ (8002924 <MDMA_RxXferBlockCpltCallback+0x238>)
 800288e:	701a      	strb	r2, [r3, #0]
			CLEAR_BIT(audio_rx_status, AUDIO_STATUS_L_PENDING);
 8002890:	4b24      	ldr	r3, [pc, #144]	@ (8002924 <MDMA_RxXferBlockCpltCallback+0x238>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	b2db      	uxtb	r3, r3
 8002896:	f023 0310 	bic.w	r3, r3, #16
 800289a:	b2da      	uxtb	r2, r3
 800289c:	4b21      	ldr	r3, [pc, #132]	@ (8002924 <MDMA_RxXferBlockCpltCallback+0x238>)
 800289e:	701a      	strb	r2, [r3, #0]
		}else{
			Error_Handler();
		}
		break;
 80028a0:	e038      	b.n	8002914 <MDMA_RxXferBlockCpltCallback+0x228>
			Error_Handler();
 80028a2:	f000 f97d 	bl	8002ba0 <Error_Handler>
		break;
 80028a6:	e035      	b.n	8002914 <MDMA_RxXferBlockCpltCallback+0x228>
	case 6:
		if(READ_BIT(audio_rx_status, AUDIO_STATUS_R_PENDING)){
 80028a8:	4b1e      	ldr	r3, [pc, #120]	@ (8002924 <MDMA_RxXferBlockCpltCallback+0x238>)
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d010      	beq.n	80028d8 <MDMA_RxXferBlockCpltCallback+0x1ec>
			SET_BIT(audio_rx_status, AUDIO_STATUS_R_CPLT);
 80028b6:	4b1b      	ldr	r3, [pc, #108]	@ (8002924 <MDMA_RxXferBlockCpltCallback+0x238>)
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80028c0:	b2da      	uxtb	r2, r3
 80028c2:	4b18      	ldr	r3, [pc, #96]	@ (8002924 <MDMA_RxXferBlockCpltCallback+0x238>)
 80028c4:	701a      	strb	r2, [r3, #0]
			CLEAR_BIT(audio_rx_status, AUDIO_STATUS_R_PENDING);
 80028c6:	4b17      	ldr	r3, [pc, #92]	@ (8002924 <MDMA_RxXferBlockCpltCallback+0x238>)
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80028d0:	b2da      	uxtb	r2, r3
 80028d2:	4b14      	ldr	r3, [pc, #80]	@ (8002924 <MDMA_RxXferBlockCpltCallback+0x238>)
 80028d4:	701a      	strb	r2, [r3, #0]
		}else{
			Error_Handler();
		}
		break;
 80028d6:	e01d      	b.n	8002914 <MDMA_RxXferBlockCpltCallback+0x228>
			Error_Handler();
 80028d8:	f000 f962 	bl	8002ba0 <Error_Handler>
		break;
 80028dc:	e01a      	b.n	8002914 <MDMA_RxXferBlockCpltCallback+0x228>

	case 7:
		if(READ_BIT(audio_tx_status, AUDIO_STATUS_L_PENDING)){
 80028de:	4b10      	ldr	r3, [pc, #64]	@ (8002920 <MDMA_RxXferBlockCpltCallback+0x234>)
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	f003 0310 	and.w	r3, r3, #16
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d010      	beq.n	800290e <MDMA_RxXferBlockCpltCallback+0x222>
			SET_BIT(audio_tx_status, AUDIO_STATUS_L_CPLT);
 80028ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002920 <MDMA_RxXferBlockCpltCallback+0x234>)
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	f043 0320 	orr.w	r3, r3, #32
 80028f6:	b2da      	uxtb	r2, r3
 80028f8:	4b09      	ldr	r3, [pc, #36]	@ (8002920 <MDMA_RxXferBlockCpltCallback+0x234>)
 80028fa:	701a      	strb	r2, [r3, #0]
			CLEAR_BIT(audio_tx_status, AUDIO_STATUS_L_PENDING);
 80028fc:	4b08      	ldr	r3, [pc, #32]	@ (8002920 <MDMA_RxXferBlockCpltCallback+0x234>)
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	b2db      	uxtb	r3, r3
 8002902:	f023 0310 	bic.w	r3, r3, #16
 8002906:	b2da      	uxtb	r2, r3
 8002908:	4b05      	ldr	r3, [pc, #20]	@ (8002920 <MDMA_RxXferBlockCpltCallback+0x234>)
 800290a:	701a      	strb	r2, [r3, #0]
		}else{
			Error_Handler();
		}
		break;
 800290c:	e001      	b.n	8002912 <MDMA_RxXferBlockCpltCallback+0x226>
			Error_Handler();
 800290e:	f000 f947 	bl	8002ba0 <Error_Handler>
		break;
 8002912:	bf00      	nop
	}
}
 8002914:	bf00      	nop
 8002916:	3718      	adds	r7, #24
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	24000f1c 	.word	0x24000f1c
 8002920:	24000f1a 	.word	0x24000f1a
 8002924:	24000f18 	.word	0x24000f18

08002928 <MDMA_TxXferBlockCpltCallback>:

void MDMA_TxXferBlockCpltCallback(MDMA_HandleTypeDef *_hdma)
{
 8002928:	b480      	push	{r7}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
	uint8_t nextNodeIndex = 0;
 8002930:	2300      	movs	r3, #0
 8002932:	73fb      	strb	r3, [r7, #15]
	MDMA_LinkNodeTypeDef* currNode = _hdma->FirstLinkedListNodeAddress;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002938:	60bb      	str	r3, [r7, #8]
	for(; nextNodeIndex < _hdma->LinkedListNodeCounter && currNode != (MDMA_LinkNodeTypeDef*)_hdma->Instance->CLAR; nextNodeIndex++, currNode = (MDMA_LinkNodeTypeDef*)currNode->CLAR)
 800293a:	e005      	b.n	8002948 <MDMA_TxXferBlockCpltCallback+0x20>
 800293c:	7bfb      	ldrb	r3, [r7, #15]
 800293e:	3301      	adds	r3, #1
 8002940:	73fb      	strb	r3, [r7, #15]
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	60bb      	str	r3, [r7, #8]
 8002948:	7bfa      	ldrb	r2, [r7, #15]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800294e:	429a      	cmp	r2, r3
 8002950:	d206      	bcs.n	8002960 <MDMA_TxXferBlockCpltCallback+0x38>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002958:	461a      	mov	r2, r3
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	4293      	cmp	r3, r2
 800295e:	d1ed      	bne.n	800293c <MDMA_TxXferBlockCpltCallback+0x14>
//	case 3:
//		audio_tx_ch1_l_pending = false;
//		audio_tx_ch1_l_cplt = true;
//		break;
//	}
}
 8002960:	bf00      	nop
 8002962:	3714      	adds	r7, #20
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <MDMA_RxErrorCallback>:

void MDMA_RxErrorCallback(MDMA_HandleTypeDef *_hdma){
 800296c:	b480      	push	{r7}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
uint8_t b = 9;
 8002974:	2309      	movs	r3, #9
 8002976:	73fb      	strb	r3, [r7, #15]
}
 8002978:	bf00      	nop
 800297a:	3714      	adds	r7, #20
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <MDMA_TxErrorCallback>:

void MDMA_TxErrorCallback(MDMA_HandleTypeDef *_hdma){
 8002984:	b480      	push	{r7}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]

uint8_t b = 9;
 800298c:	2309      	movs	r3, #9
 800298e:	73fb      	strb	r3, [r7, #15]
uint32_t c = _hdma->ErrorCode;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002994:	60bb      	str	r3, [r7, #8]
}
 8002996:	bf00      	nop
 8002998:	3714      	adds	r7, #20
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
	...

080029a4 <codecSetup>:

HAL_StatusTypeDef codecSetup(){
 80029a4:	b590      	push	{r4, r7, lr}
 80029a6:	b08f      	sub	sp, #60	@ 0x3c
 80029a8:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status;

	aic3xHandle.hi2c = &hi2c2;
 80029aa:	4b77      	ldr	r3, [pc, #476]	@ (8002b88 <codecSetup+0x1e4>)
 80029ac:	4a77      	ldr	r2, [pc, #476]	@ (8002b8c <codecSetup+0x1e8>)
 80029ae:	601a      	str	r2, [r3, #0]
	aic3xHandle.rst_port = RESET_GPIO_Port;
 80029b0:	4b75      	ldr	r3, [pc, #468]	@ (8002b88 <codecSetup+0x1e4>)
 80029b2:	4a77      	ldr	r2, [pc, #476]	@ (8002b90 <codecSetup+0x1ec>)
 80029b4:	605a      	str	r2, [r3, #4]
	aic3xHandle.rst_pin = RESET_Pin;
 80029b6:	4b74      	ldr	r3, [pc, #464]	@ (8002b88 <codecSetup+0x1e4>)
 80029b8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80029bc:	811a      	strh	r2, [r3, #8]


	status = AIC3X_Init(&aic3xHandle);
 80029be:	4872      	ldr	r0, [pc, #456]	@ (8002b88 <codecSetup+0x1e4>)
 80029c0:	f7fd fee6 	bl	8000790 <AIC3X_Init>
 80029c4:	4603      	mov	r3, r0
 80029c6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	if (status != HAL_OK) {
 80029ca:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d002      	beq.n	80029d8 <codecSetup+0x34>
		return status;
 80029d2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80029d6:	e0d3      	b.n	8002b80 <codecSetup+0x1dc>
	}

	AIC3X_ASDIntCtrl_TypeDef asdIntCtrl = {
 80029d8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80029dc:	2200      	movs	r2, #0
 80029de:	601a      	str	r2, [r3, #0]
 80029e0:	605a      	str	r2, [r3, #4]
 80029e2:	609a      	str	r2, [r3, #8]
 80029e4:	2301      	movs	r3, #1
 80029e6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
			.ReSyncMute = false,
			.WordOffset = 0
	};


	status = AIC3X_WriteASDataIntfControl(&aic3xHandle, &asdIntCtrl);
 80029ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80029ee:	4619      	mov	r1, r3
 80029f0:	4865      	ldr	r0, [pc, #404]	@ (8002b88 <codecSetup+0x1e4>)
 80029f2:	f7fd ffb2 	bl	800095a <AIC3X_WriteASDataIntfControl>
 80029f6:	4603      	mov	r3, r0
 80029f8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	if (status != HAL_OK) {
 80029fc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d002      	beq.n	8002a0a <codecSetup+0x66>
		return status;
 8002a04:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002a08:	e0ba      	b.n	8002b80 <codecSetup+0x1dc>
//	  				.PllR = 8
//	  		};
//
//	  		status = USER_AIC3X_WritePllProgramming(&aic3xHandle, &pllProgramming);

	AIC3X_PGAGainControl_TypeDef pgaGainControl = {
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	627b      	str	r3, [r7, #36]	@ 0x24
			.RADCMuted = false,
			.RADCGain = 0
	};


	AIC3X_ADCMixControl_TypeDef adcMixControl = {
 8002a0e:	4b61      	ldr	r3, [pc, #388]	@ (8002b94 <codecSetup+0x1f0>)
 8002a10:	f107 0414 	add.w	r4, r7, #20
 8002a14:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a16:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				.RightADC_PGASoftStepping = 0b00,
				.RightADC_MIC1LPDifferential = false,
				.RightADC_MIC1LPGain = 0b1111
	};

	status = AIC3X_WriteADCMixControl(&aic3xHandle, &adcMixControl);
 8002a1a:	f107 0314 	add.w	r3, r7, #20
 8002a1e:	4619      	mov	r1, r3
 8002a20:	4859      	ldr	r0, [pc, #356]	@ (8002b88 <codecSetup+0x1e4>)
 8002a22:	f7fe f850 	bl	8000ac6 <AIC3X_WriteADCMixControl>
 8002a26:	4603      	mov	r3, r0
 8002a28:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	if (status != HAL_OK) {
 8002a2c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d002      	beq.n	8002a3a <codecSetup+0x96>
		return status;
 8002a34:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002a38:	e0a2      	b.n	8002b80 <codecSetup+0x1dc>
	}

	status = AIC3X_WritePGAGainControl(&aic3xHandle, &pgaGainControl);
 8002a3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a3e:	4619      	mov	r1, r3
 8002a40:	4851      	ldr	r0, [pc, #324]	@ (8002b88 <codecSetup+0x1e4>)
 8002a42:	f7fd fff9 	bl	8000a38 <AIC3X_WritePGAGainControl>
 8002a46:	4603      	mov	r3, r0
 8002a48:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	if (status != HAL_OK) {
 8002a4c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d002      	beq.n	8002a5a <codecSetup+0xb6>
		return status;
 8002a54:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002a58:	e092      	b.n	8002b80 <codecSetup+0x1dc>
	}


	AIC3X_DataPathControl_TypeDef dataPathControl = {
 8002a5a:	4b4f      	ldr	r3, [pc, #316]	@ (8002b98 <codecSetup+0x1f4>)
 8002a5c:	881b      	ldrh	r3, [r3, #0]
 8002a5e:	823b      	strh	r3, [r7, #16]
			.LeftDACDataPath = AIC3X_DATAPATH_STRAIGHT,
			.RightDACDataPath = AIC3X_DATAPATH_STRAIGHT
	};

	status = AIC3X_WriteDataPathControl(&aic3xHandle, &dataPathControl);
 8002a60:	f107 0310 	add.w	r3, r7, #16
 8002a64:	4619      	mov	r1, r3
 8002a66:	4848      	ldr	r0, [pc, #288]	@ (8002b88 <codecSetup+0x1e4>)
 8002a68:	f7fd ff38 	bl	80008dc <AIC3X_WriteDataPathControl>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	if (status != HAL_OK) {
 8002a72:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d002      	beq.n	8002a80 <codecSetup+0xdc>
		return status;
 8002a7a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002a7e:	e07f      	b.n	8002b80 <codecSetup+0x1dc>
	}

	AIC3X_DACPowerControl_TypeDef dacPowerControl = {
 8002a80:	4b46      	ldr	r3, [pc, #280]	@ (8002b9c <codecSetup+0x1f8>)
 8002a82:	881b      	ldrh	r3, [r3, #0]
 8002a84:	81bb      	strh	r3, [r7, #12]
			.LeftDACPoweredUp = true,
			.RightDACPoweredUp = true
	};

	status = AIC3X_WriteDACPowerControl(&aic3xHandle, &dacPowerControl);
 8002a86:	f107 030c 	add.w	r3, r7, #12
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	483e      	ldr	r0, [pc, #248]	@ (8002b88 <codecSetup+0x1e4>)
 8002a8e:	f7fe f958 	bl	8000d42 <AIC3X_WriteDACPowerControl>
 8002a92:	4603      	mov	r3, r0
 8002a94:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	if (status != HAL_OK) {
 8002a98:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d002      	beq.n	8002aa6 <codecSetup+0x102>
		return status;
 8002aa0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002aa4:	e06c      	b.n	8002b80 <codecSetup+0x1dc>
	}


	AIC3X_VolControl_TypeDef defaultVolControl = {
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	723b      	strb	r3, [r7, #8]
 8002aaa:	2300      	movs	r3, #0
 8002aac:	727b      	strb	r3, [r7, #9]
			.Muted = false,
			.Volume = 0,
	};

	status = AIC3X_WriteVolControl(&aic3xHandle,LDAC_VOL, &defaultVolControl);
 8002aae:	f107 0308 	add.w	r3, r7, #8
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	212b      	movs	r1, #43	@ 0x2b
 8002ab6:	4834      	ldr	r0, [pc, #208]	@ (8002b88 <codecSetup+0x1e4>)
 8002ab8:	f7fe f987 	bl	8000dca <AIC3X_WriteVolControl>
 8002abc:	4603      	mov	r3, r0
 8002abe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	if (status != HAL_OK) {
 8002ac2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d002      	beq.n	8002ad0 <codecSetup+0x12c>
		return status;
 8002aca:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002ace:	e057      	b.n	8002b80 <codecSetup+0x1dc>
	}

	status = AIC3X_WriteVolControl(&aic3xHandle,RDAC_VOL, &defaultVolControl);
 8002ad0:	f107 0308 	add.w	r3, r7, #8
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	212c      	movs	r1, #44	@ 0x2c
 8002ad8:	482b      	ldr	r0, [pc, #172]	@ (8002b88 <codecSetup+0x1e4>)
 8002ada:	f7fe f976 	bl	8000dca <AIC3X_WriteVolControl>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	if (status != HAL_OK) {
 8002ae4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d002      	beq.n	8002af2 <codecSetup+0x14e>
		return status;
 8002aec:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002af0:	e046      	b.n	8002b80 <codecSetup+0x1dc>
	}

	status = AIC3X_WriteVolControl(&aic3xHandle,DACL1_2_LLOPM_VOL, &defaultVolControl);
 8002af2:	f107 0308 	add.w	r3, r7, #8
 8002af6:	461a      	mov	r2, r3
 8002af8:	2152      	movs	r1, #82	@ 0x52
 8002afa:	4823      	ldr	r0, [pc, #140]	@ (8002b88 <codecSetup+0x1e4>)
 8002afc:	f7fe f965 	bl	8000dca <AIC3X_WriteVolControl>
 8002b00:	4603      	mov	r3, r0
 8002b02:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	if (status != HAL_OK) {
 8002b06:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d002      	beq.n	8002b14 <codecSetup+0x170>
		return status;
 8002b0e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002b12:	e035      	b.n	8002b80 <codecSetup+0x1dc>
	}

	status = AIC3X_WriteVolControl(&aic3xHandle,DACR1_2_RLOPM_VOL, &defaultVolControl);
 8002b14:	f107 0308 	add.w	r3, r7, #8
 8002b18:	461a      	mov	r2, r3
 8002b1a:	215c      	movs	r1, #92	@ 0x5c
 8002b1c:	481a      	ldr	r0, [pc, #104]	@ (8002b88 <codecSetup+0x1e4>)
 8002b1e:	f7fe f954 	bl	8000dca <AIC3X_WriteVolControl>
 8002b22:	4603      	mov	r3, r0
 8002b24:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	if (status != HAL_OK) {
 8002b28:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d002      	beq.n	8002b36 <codecSetup+0x192>
		return status;
 8002b30:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002b34:	e024      	b.n	8002b80 <codecSetup+0x1dc>
	}

	AIC3X_OutputLevelControl_TypeDef defaultOutputLevelControl = {
 8002b36:	2300      	movs	r3, #0
 8002b38:	703b      	strb	r3, [r7, #0]
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	707b      	strb	r3, [r7, #1]
 8002b3e:	2300      	movs	r3, #0
 8002b40:	70bb      	strb	r3, [r7, #2]
 8002b42:	2300      	movs	r3, #0
 8002b44:	70fb      	strb	r3, [r7, #3]
 8002b46:	2301      	movs	r3, #1
 8002b48:	713b      	strb	r3, [r7, #4]
			.PowerDownDriveControl = false,
			.VolumeControlStatus = false,
			.PowerControl = true
	};

	status = AIC3X_WriteOutputLevelControl(&aic3xHandle, LLOPM_CTRL, &defaultOutputLevelControl);
 8002b4a:	463b      	mov	r3, r7
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	2156      	movs	r1, #86	@ 0x56
 8002b50:	480d      	ldr	r0, [pc, #52]	@ (8002b88 <codecSetup+0x1e4>)
 8002b52:	f7fe f985 	bl	8000e60 <AIC3X_WriteOutputLevelControl>
 8002b56:	4603      	mov	r3, r0
 8002b58:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	if (status != HAL_OK) {
 8002b5c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d002      	beq.n	8002b6a <codecSetup+0x1c6>
		return status;
 8002b64:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002b68:	e00a      	b.n	8002b80 <codecSetup+0x1dc>
	}

	status = AIC3X_WriteOutputLevelControl(&aic3xHandle, RLOPM_CTRL, &defaultOutputLevelControl);
 8002b6a:	463b      	mov	r3, r7
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	215d      	movs	r1, #93	@ 0x5d
 8002b70:	4805      	ldr	r0, [pc, #20]	@ (8002b88 <codecSetup+0x1e4>)
 8002b72:	f7fe f975 	bl	8000e60 <AIC3X_WriteOutputLevelControl>
 8002b76:	4603      	mov	r3, r0
 8002b78:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	return status;
 8002b7c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	373c      	adds	r7, #60	@ 0x3c
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd90      	pop	{r4, r7, pc}
 8002b88:	24000708 	.word	0x24000708
 8002b8c:	2400003c 	.word	0x2400003c
 8002b90:	58021000 	.word	0x58021000
 8002b94:	0800ce7c 	.word	0x0800ce7c
 8002b98:	0800ce8c 	.word	0x0800ce8c
 8002b9c:	0800ce90 	.word	0x0800ce90

08002ba0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ba4:	b672      	cpsid	i
}
 8002ba6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
		__BKPT();
 8002ba8:	be00      	bkpt	0x0000
 8002baa:	e7fd      	b.n	8002ba8 <Error_Handler+0x8>

08002bac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bb2:	4b0a      	ldr	r3, [pc, #40]	@ (8002bdc <HAL_MspInit+0x30>)
 8002bb4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002bb8:	4a08      	ldr	r2, [pc, #32]	@ (8002bdc <HAL_MspInit+0x30>)
 8002bba:	f043 0302 	orr.w	r3, r3, #2
 8002bbe:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002bc2:	4b06      	ldr	r3, [pc, #24]	@ (8002bdc <HAL_MspInit+0x30>)
 8002bc4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	607b      	str	r3, [r7, #4]
 8002bce:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bd0:	bf00      	nop
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr
 8002bdc:	58024400 	.word	0x58024400

08002be0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b0ba      	sub	sp, #232	@ 0xe8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002be8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002bec:	2200      	movs	r2, #0
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	605a      	str	r2, [r3, #4]
 8002bf2:	609a      	str	r2, [r3, #8]
 8002bf4:	60da      	str	r2, [r3, #12]
 8002bf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002bf8:	f107 0310 	add.w	r3, r7, #16
 8002bfc:	22c0      	movs	r2, #192	@ 0xc0
 8002bfe:	2100      	movs	r1, #0
 8002c00:	4618      	mov	r0, r3
 8002c02:	f00a f903 	bl	800ce0c <memset>
  if(hi2c->Instance==I2C2)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a30      	ldr	r2, [pc, #192]	@ (8002ccc <HAL_I2C_MspInit+0xec>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d158      	bne.n	8002cc2 <HAL_I2C_MspInit+0xe2>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002c10:	f04f 0208 	mov.w	r2, #8
 8002c14:	f04f 0300 	mov.w	r3, #0
 8002c18:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 32;
 8002c1c:	2320      	movs	r3, #32
 8002c1e:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 129;
 8002c20:	2381      	movs	r3, #129	@ 0x81
 8002c22:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8002c24:	2302      	movs	r3, #2
 8002c26:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8002c28:	2302      	movs	r3, #2
 8002c2a:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 100;
 8002c2c:	2364      	movs	r3, #100	@ 0x64
 8002c2e:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 8002c30:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c34:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8002c36:	2300      	movs	r3, #0
 8002c38:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_PLL3;
 8002c3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c42:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c46:	f107 0310 	add.w	r3, r7, #16
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f005 fc82 	bl	8008554 <HAL_RCCEx_PeriphCLKConfig>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <HAL_I2C_MspInit+0x7a>
    {
      Error_Handler();
 8002c56:	f7ff ffa3 	bl	8002ba0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c5a:	4b1d      	ldr	r3, [pc, #116]	@ (8002cd0 <HAL_I2C_MspInit+0xf0>)
 8002c5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c60:	4a1b      	ldr	r2, [pc, #108]	@ (8002cd0 <HAL_I2C_MspInit+0xf0>)
 8002c62:	f043 0302 	orr.w	r3, r3, #2
 8002c66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002c6a:	4b19      	ldr	r3, [pc, #100]	@ (8002cd0 <HAL_I2C_MspInit+0xf0>)
 8002c6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	60fb      	str	r3, [r7, #12]
 8002c76:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002c78:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002c7c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c80:	2312      	movs	r3, #18
 8002c82:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c86:	2301      	movs	r3, #1
 8002c88:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002c92:	2304      	movs	r3, #4
 8002c94:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c98:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	480d      	ldr	r0, [pc, #52]	@ (8002cd4 <HAL_I2C_MspInit+0xf4>)
 8002ca0:	f002 fe44 	bl	800592c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002ca4:	4b0a      	ldr	r3, [pc, #40]	@ (8002cd0 <HAL_I2C_MspInit+0xf0>)
 8002ca6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002caa:	4a09      	ldr	r2, [pc, #36]	@ (8002cd0 <HAL_I2C_MspInit+0xf0>)
 8002cac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002cb0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002cb4:	4b06      	ldr	r3, [pc, #24]	@ (8002cd0 <HAL_I2C_MspInit+0xf0>)
 8002cb6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002cba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cbe:	60bb      	str	r3, [r7, #8]
 8002cc0:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8002cc2:	bf00      	nop
 8002cc4:	37e8      	adds	r7, #232	@ 0xe8
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	40005800 	.word	0x40005800
 8002cd0:	58024400 	.word	0x58024400
 8002cd4:	58020400 	.word	0x58020400

08002cd8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b08a      	sub	sp, #40	@ 0x28
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ce0:	f107 0314 	add.w	r3, r7, #20
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	601a      	str	r2, [r3, #0]
 8002ce8:	605a      	str	r2, [r3, #4]
 8002cea:	609a      	str	r2, [r3, #8]
 8002cec:	60da      	str	r2, [r3, #12]
 8002cee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a1a      	ldr	r2, [pc, #104]	@ (8002d60 <HAL_UART_MspInit+0x88>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d12e      	bne.n	8002d58 <HAL_UART_MspInit+0x80>
  {
    /* USER CODE BEGIN USART3_MspInit 0 */

    /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002cfa:	4b1a      	ldr	r3, [pc, #104]	@ (8002d64 <HAL_UART_MspInit+0x8c>)
 8002cfc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002d00:	4a18      	ldr	r2, [pc, #96]	@ (8002d64 <HAL_UART_MspInit+0x8c>)
 8002d02:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d06:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002d0a:	4b16      	ldr	r3, [pc, #88]	@ (8002d64 <HAL_UART_MspInit+0x8c>)
 8002d0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002d10:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d14:	613b      	str	r3, [r7, #16]
 8002d16:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d18:	4b12      	ldr	r3, [pc, #72]	@ (8002d64 <HAL_UART_MspInit+0x8c>)
 8002d1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d1e:	4a11      	ldr	r2, [pc, #68]	@ (8002d64 <HAL_UART_MspInit+0x8c>)
 8002d20:	f043 0308 	orr.w	r3, r3, #8
 8002d24:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002d28:	4b0e      	ldr	r3, [pc, #56]	@ (8002d64 <HAL_UART_MspInit+0x8c>)
 8002d2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d2e:	f003 0308 	and.w	r3, r3, #8
 8002d32:	60fb      	str	r3, [r7, #12]
 8002d34:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002d36:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002d3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d40:	2300      	movs	r3, #0
 8002d42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d44:	2300      	movs	r3, #0
 8002d46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002d48:	2307      	movs	r3, #7
 8002d4a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d4c:	f107 0314 	add.w	r3, r7, #20
 8002d50:	4619      	mov	r1, r3
 8002d52:	4805      	ldr	r0, [pc, #20]	@ (8002d68 <HAL_UART_MspInit+0x90>)
 8002d54:	f002 fdea 	bl	800592c <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8002d58:	bf00      	nop
 8002d5a:	3728      	adds	r7, #40	@ 0x28
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	40004800 	.word	0x40004800
 8002d64:	58024400 	.word	0x58024400
 8002d68:	58020c00 	.word	0x58020c00

08002d6c <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_b;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b08e      	sub	sp, #56	@ 0x38
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a7c      	ldr	r2, [pc, #496]	@ (8002f6c <HAL_SAI_MspInit+0x200>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d176      	bne.n	8002e6c <HAL_SAI_MspInit+0x100>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8002d7e:	4b7c      	ldr	r3, [pc, #496]	@ (8002f70 <HAL_SAI_MspInit+0x204>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d10e      	bne.n	8002da4 <HAL_SAI_MspInit+0x38>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002d86:	4b7b      	ldr	r3, [pc, #492]	@ (8002f74 <HAL_SAI_MspInit+0x208>)
 8002d88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002d8c:	4a79      	ldr	r2, [pc, #484]	@ (8002f74 <HAL_SAI_MspInit+0x208>)
 8002d8e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002d92:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002d96:	4b77      	ldr	r3, [pc, #476]	@ (8002f74 <HAL_SAI_MspInit+0x208>)
 8002d98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002d9c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002da0:	613b      	str	r3, [r7, #16]
 8002da2:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8002da4:	4b72      	ldr	r3, [pc, #456]	@ (8002f70 <HAL_SAI_MspInit+0x204>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	3301      	adds	r3, #1
 8002daa:	4a71      	ldr	r2, [pc, #452]	@ (8002f70 <HAL_SAI_MspInit+0x204>)
 8002dac:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002dae:	2374      	movs	r3, #116	@ 0x74
 8002db0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db2:	2302      	movs	r3, #2
 8002db4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db6:	2300      	movs	r3, #0
 8002db8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002dbe:	2306      	movs	r3, #6
 8002dc0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002dc2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	486b      	ldr	r0, [pc, #428]	@ (8002f78 <HAL_SAI_MspInit+0x20c>)
 8002dca:	f002 fdaf 	bl	800592c <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA1_Stream0;
 8002dce:	4b6b      	ldr	r3, [pc, #428]	@ (8002f7c <HAL_SAI_MspInit+0x210>)
 8002dd0:	4a6b      	ldr	r2, [pc, #428]	@ (8002f80 <HAL_SAI_MspInit+0x214>)
 8002dd2:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 8002dd4:	4b69      	ldr	r3, [pc, #420]	@ (8002f7c <HAL_SAI_MspInit+0x210>)
 8002dd6:	2257      	movs	r2, #87	@ 0x57
 8002dd8:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002dda:	4b68      	ldr	r3, [pc, #416]	@ (8002f7c <HAL_SAI_MspInit+0x210>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8002de0:	4b66      	ldr	r3, [pc, #408]	@ (8002f7c <HAL_SAI_MspInit+0x210>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8002de6:	4b65      	ldr	r3, [pc, #404]	@ (8002f7c <HAL_SAI_MspInit+0x210>)
 8002de8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002dec:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002dee:	4b63      	ldr	r3, [pc, #396]	@ (8002f7c <HAL_SAI_MspInit+0x210>)
 8002df0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002df4:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002df6:	4b61      	ldr	r3, [pc, #388]	@ (8002f7c <HAL_SAI_MspInit+0x210>)
 8002df8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002dfc:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8002dfe:	4b5f      	ldr	r3, [pc, #380]	@ (8002f7c <HAL_SAI_MspInit+0x210>)
 8002e00:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002e04:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_HIGH;
 8002e06:	4b5d      	ldr	r3, [pc, #372]	@ (8002f7c <HAL_SAI_MspInit+0x210>)
 8002e08:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002e0c:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e0e:	4b5b      	ldr	r3, [pc, #364]	@ (8002f7c <HAL_SAI_MspInit+0x210>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8002e14:	4859      	ldr	r0, [pc, #356]	@ (8002f7c <HAL_SAI_MspInit+0x210>)
 8002e16:	f000 fbab 	bl	8003570 <HAL_DMA_Init>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d001      	beq.n	8002e24 <HAL_SAI_MspInit+0xb8>
    {
      Error_Handler();
 8002e20:	f7ff febe 	bl	8002ba0 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 8002e24:	2306      	movs	r3, #6
 8002e26:	617b      	str	r3, [r7, #20]
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_RISING;
 8002e28:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e2c:	61bb      	str	r3, [r7, #24]
    pSyncConfig.SyncEnable = DISABLE;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	773b      	strb	r3, [r7, #28]
    pSyncConfig.EventEnable = ENABLE;
 8002e32:	2301      	movs	r3, #1
 8002e34:	777b      	strb	r3, [r7, #29]
    pSyncConfig.RequestNumber = 1;
 8002e36:	2301      	movs	r3, #1
 8002e38:	623b      	str	r3, [r7, #32]
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai1_a, &pSyncConfig) != HAL_OK)
 8002e3a:	f107 0314 	add.w	r3, r7, #20
 8002e3e:	4619      	mov	r1, r3
 8002e40:	484e      	ldr	r0, [pc, #312]	@ (8002f7c <HAL_SAI_MspInit+0x210>)
 8002e42:	f002 fc79 	bl	8005738 <HAL_DMAEx_ConfigMuxSync>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d001      	beq.n	8002e50 <HAL_SAI_MspInit+0xe4>
    {
      Error_Handler();
 8002e4c:	f7ff fea8 	bl	8002ba0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	4a4a      	ldr	r2, [pc, #296]	@ (8002f7c <HAL_SAI_MspInit+0x210>)
 8002e54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8002e58:	4a48      	ldr	r2, [pc, #288]	@ (8002f7c <HAL_SAI_MspInit+0x210>)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6393      	str	r3, [r2, #56]	@ 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a46      	ldr	r2, [pc, #280]	@ (8002f7c <HAL_SAI_MspInit+0x210>)
 8002e62:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002e66:	4a45      	ldr	r2, [pc, #276]	@ (8002f7c <HAL_SAI_MspInit+0x210>)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6393      	str	r3, [r2, #56]	@ 0x38

    }
    if(hsai->Instance==SAI1_Block_B)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a44      	ldr	r2, [pc, #272]	@ (8002f84 <HAL_SAI_MspInit+0x218>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d176      	bne.n	8002f64 <HAL_SAI_MspInit+0x1f8>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 8002e76:	4b3e      	ldr	r3, [pc, #248]	@ (8002f70 <HAL_SAI_MspInit+0x204>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d10e      	bne.n	8002e9c <HAL_SAI_MspInit+0x130>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002e7e:	4b3d      	ldr	r3, [pc, #244]	@ (8002f74 <HAL_SAI_MspInit+0x208>)
 8002e80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002e84:	4a3b      	ldr	r2, [pc, #236]	@ (8002f74 <HAL_SAI_MspInit+0x208>)
 8002e86:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002e8a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002e8e:	4b39      	ldr	r3, [pc, #228]	@ (8002f74 <HAL_SAI_MspInit+0x208>)
 8002e90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002e94:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e98:	60fb      	str	r3, [r7, #12]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8002e9c:	4b34      	ldr	r3, [pc, #208]	@ (8002f70 <HAL_SAI_MspInit+0x204>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	4a33      	ldr	r2, [pc, #204]	@ (8002f70 <HAL_SAI_MspInit+0x204>)
 8002ea4:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002ea6:	2308      	movs	r3, #8
 8002ea8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eaa:	2302      	movs	r3, #2
 8002eac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002eb6:	2306      	movs	r3, #6
 8002eb8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002eba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	482d      	ldr	r0, [pc, #180]	@ (8002f78 <HAL_SAI_MspInit+0x20c>)
 8002ec2:	f002 fd33 	bl	800592c <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA1_Stream1;
 8002ec6:	4b30      	ldr	r3, [pc, #192]	@ (8002f88 <HAL_SAI_MspInit+0x21c>)
 8002ec8:	4a30      	ldr	r2, [pc, #192]	@ (8002f8c <HAL_SAI_MspInit+0x220>)
 8002eca:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 8002ecc:	4b2e      	ldr	r3, [pc, #184]	@ (8002f88 <HAL_SAI_MspInit+0x21c>)
 8002ece:	2258      	movs	r2, #88	@ 0x58
 8002ed0:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ed2:	4b2d      	ldr	r3, [pc, #180]	@ (8002f88 <HAL_SAI_MspInit+0x21c>)
 8002ed4:	2240      	movs	r2, #64	@ 0x40
 8002ed6:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ed8:	4b2b      	ldr	r3, [pc, #172]	@ (8002f88 <HAL_SAI_MspInit+0x21c>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 8002ede:	4b2a      	ldr	r3, [pc, #168]	@ (8002f88 <HAL_SAI_MspInit+0x21c>)
 8002ee0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ee4:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002ee6:	4b28      	ldr	r3, [pc, #160]	@ (8002f88 <HAL_SAI_MspInit+0x21c>)
 8002ee8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002eec:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002eee:	4b26      	ldr	r3, [pc, #152]	@ (8002f88 <HAL_SAI_MspInit+0x21c>)
 8002ef0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002ef4:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 8002ef6:	4b24      	ldr	r3, [pc, #144]	@ (8002f88 <HAL_SAI_MspInit+0x21c>)
 8002ef8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002efc:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_HIGH;
 8002efe:	4b22      	ldr	r3, [pc, #136]	@ (8002f88 <HAL_SAI_MspInit+0x21c>)
 8002f00:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002f04:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f06:	4b20      	ldr	r3, [pc, #128]	@ (8002f88 <HAL_SAI_MspInit+0x21c>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8002f0c:	481e      	ldr	r0, [pc, #120]	@ (8002f88 <HAL_SAI_MspInit+0x21c>)
 8002f0e:	f000 fb2f 	bl	8003570 <HAL_DMA_Init>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d001      	beq.n	8002f1c <HAL_SAI_MspInit+0x1b0>
    {
      Error_Handler();
 8002f18:	f7ff fe42 	bl	8002ba0 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_DMAMUX1_CH0_EVT;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	617b      	str	r3, [r7, #20]
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_RISING;
 8002f20:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f24:	61bb      	str	r3, [r7, #24]
    pSyncConfig.SyncEnable = ENABLE;
 8002f26:	2301      	movs	r3, #1
 8002f28:	773b      	strb	r3, [r7, #28]
    pSyncConfig.EventEnable = DISABLE;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	777b      	strb	r3, [r7, #29]
    pSyncConfig.RequestNumber = 1;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	623b      	str	r3, [r7, #32]
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai1_b, &pSyncConfig) != HAL_OK)
 8002f32:	f107 0314 	add.w	r3, r7, #20
 8002f36:	4619      	mov	r1, r3
 8002f38:	4813      	ldr	r0, [pc, #76]	@ (8002f88 <HAL_SAI_MspInit+0x21c>)
 8002f3a:	f002 fbfd 	bl	8005738 <HAL_DMAEx_ConfigMuxSync>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d001      	beq.n	8002f48 <HAL_SAI_MspInit+0x1dc>
    {
      Error_Handler();
 8002f44:	f7ff fe2c 	bl	8002ba0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4a0f      	ldr	r2, [pc, #60]	@ (8002f88 <HAL_SAI_MspInit+0x21c>)
 8002f4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8002f50:	4a0d      	ldr	r2, [pc, #52]	@ (8002f88 <HAL_SAI_MspInit+0x21c>)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a0b      	ldr	r2, [pc, #44]	@ (8002f88 <HAL_SAI_MspInit+0x21c>)
 8002f5a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002f5e:	4a0a      	ldr	r2, [pc, #40]	@ (8002f88 <HAL_SAI_MspInit+0x21c>)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6393      	str	r3, [r2, #56]	@ 0x38
    }
}
 8002f64:	bf00      	nop
 8002f66:	3738      	adds	r7, #56	@ 0x38
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	40015804 	.word	0x40015804
 8002f70:	24000f20 	.word	0x24000f20
 8002f74:	58024400 	.word	0x58024400
 8002f78:	58021000 	.word	0x58021000
 8002f7c:	240001c0 	.word	0x240001c0
 8002f80:	40020010 	.word	0x40020010
 8002f84:	40015824 	.word	0x40015824
 8002f88:	24000238 	.word	0x24000238
 8002f8c:	40020028 	.word	0x40020028

08002f90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f90:	b480      	push	{r7}
 8002f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002f94:	bf00      	nop
 8002f96:	e7fd      	b.n	8002f94 <NMI_Handler+0x4>

08002f98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f9c:	bf00      	nop
 8002f9e:	e7fd      	b.n	8002f9c <HardFault_Handler+0x4>

08002fa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fa4:	bf00      	nop
 8002fa6:	e7fd      	b.n	8002fa4 <MemManage_Handler+0x4>

08002fa8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002fac:	bf00      	nop
 8002fae:	e7fd      	b.n	8002fac <BusFault_Handler+0x4>

08002fb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fb4:	bf00      	nop
 8002fb6:	e7fd      	b.n	8002fb4 <UsageFault_Handler+0x4>

08002fb8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002fbc:	bf00      	nop
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr

08002fc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fca:	bf00      	nop
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002fd8:	bf00      	nop
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr

08002fe2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fe6:	f000 f963 	bl	80032b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fea:	bf00      	nop
 8002fec:	bd80      	pop	{r7, pc}
	...

08002ff0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8002ff4:	4802      	ldr	r0, [pc, #8]	@ (8003000 <DMA1_Stream0_IRQHandler+0x10>)
 8002ff6:	f001 f881 	bl	80040fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002ffa:	bf00      	nop
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	240001c0 	.word	0x240001c0

08003004 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 8003008:	4802      	ldr	r0, [pc, #8]	@ (8003014 <DMA1_Stream1_IRQHandler+0x10>)
 800300a:	f001 f877 	bl	80040fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800300e:	bf00      	nop
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	24000238 	.word	0x24000238

08003018 <MDMA_IRQHandler>:

/**
  * @brief This function handles MDMA global interrupt.
  */
void MDMA_IRQHandler(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_mdma_channel0_sw_0);
 800301c:	4805      	ldr	r0, [pc, #20]	@ (8003034 <MDMA_IRQHandler+0x1c>)
 800301e:	f003 fffd 	bl	800701c <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_mdma_channel1_sw_0);
 8003022:	4805      	ldr	r0, [pc, #20]	@ (8003038 <MDMA_IRQHandler+0x20>)
 8003024:	f003 fffa 	bl	800701c <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_mdma_channel2_sw_0);
 8003028:	4804      	ldr	r0, [pc, #16]	@ (800303c <MDMA_IRQHandler+0x24>)
 800302a:	f003 fff7 	bl	800701c <HAL_MDMA_IRQHandler>
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 800302e:	bf00      	nop
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	24000344 	.word	0x24000344
 8003038:	240005fc 	.word	0x240005fc
 800303c:	240004f0 	.word	0x240004f0

08003040 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003040:	f8df d038 	ldr.w	sp, [pc, #56]	@ 800307c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8003044:	f7fd fb8c 	bl	8000760 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003048:	f7fd fadc 	bl	8000604 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800304c:	480c      	ldr	r0, [pc, #48]	@ (8003080 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800304e:	490d      	ldr	r1, [pc, #52]	@ (8003084 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003050:	4a0d      	ldr	r2, [pc, #52]	@ (8003088 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003052:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003054:	e002      	b.n	800305c <LoopCopyDataInit>

08003056 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003056:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003058:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800305a:	3304      	adds	r3, #4

0800305c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800305c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800305e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003060:	d3f9      	bcc.n	8003056 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003062:	4a0a      	ldr	r2, [pc, #40]	@ (800308c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003064:	4c0a      	ldr	r4, [pc, #40]	@ (8003090 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003066:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003068:	e001      	b.n	800306e <LoopFillZerobss>

0800306a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800306a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800306c:	3204      	adds	r2, #4

0800306e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800306e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003070:	d3fb      	bcc.n	800306a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003072:	f009 fed3 	bl	800ce1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003076:	f7fd ff4f 	bl	8000f18 <main>
  bx  lr
 800307a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800307c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003080:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003084:	24000020 	.word	0x24000020
  ldr r2, =_sidata
 8003088:	0800cee8 	.word	0x0800cee8
  ldr r2, =_sbss
 800308c:	24000020 	.word	0x24000020
  ldr r4, =_ebss
 8003090:	24000f30 	.word	0x24000f30

08003094 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003094:	e7fe      	b.n	8003094 <ADC3_IRQHandler>
	...

08003098 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b088      	sub	sp, #32
 800309c:	af00      	add	r7, sp, #0
 800309e:	4603      	mov	r3, r0
 80030a0:	460a      	mov	r2, r1
 80030a2:	71fb      	strb	r3, [r7, #7]
 80030a4:	4613      	mov	r3, r2
 80030a6:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 80030a8:	4b2e      	ldr	r3, [pc, #184]	@ (8003164 <BSP_PB_Init+0xcc>)
 80030aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80030ae:	4a2d      	ldr	r2, [pc, #180]	@ (8003164 <BSP_PB_Init+0xcc>)
 80030b0:	f043 0304 	orr.w	r3, r3, #4
 80030b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80030b8:	4b2a      	ldr	r3, [pc, #168]	@ (8003164 <BSP_PB_Init+0xcc>)
 80030ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80030be:	f003 0304 	and.w	r3, r3, #4
 80030c2:	60bb      	str	r3, [r7, #8]
 80030c4:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 80030c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80030ca:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80030cc:	2302      	movs	r3, #2
 80030ce:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80030d0:	2302      	movs	r3, #2
 80030d2:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 80030d4:	79bb      	ldrb	r3, [r7, #6]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d10c      	bne.n	80030f4 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80030da:	2300      	movs	r3, #0
 80030dc:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 80030de:	79fb      	ldrb	r3, [r7, #7]
 80030e0:	4a21      	ldr	r2, [pc, #132]	@ (8003168 <BSP_PB_Init+0xd0>)
 80030e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030e6:	f107 020c 	add.w	r2, r7, #12
 80030ea:	4611      	mov	r1, r2
 80030ec:	4618      	mov	r0, r3
 80030ee:	f002 fc1d 	bl	800592c <HAL_GPIO_Init>
 80030f2:	e031      	b.n	8003158 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80030f4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80030f8:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80030fa:	79fb      	ldrb	r3, [r7, #7]
 80030fc:	4a1a      	ldr	r2, [pc, #104]	@ (8003168 <BSP_PB_Init+0xd0>)
 80030fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003102:	f107 020c 	add.w	r2, r7, #12
 8003106:	4611      	mov	r1, r2
 8003108:	4618      	mov	r0, r3
 800310a:	f002 fc0f 	bl	800592c <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 800310e:	79fb      	ldrb	r3, [r7, #7]
 8003110:	00db      	lsls	r3, r3, #3
 8003112:	4a16      	ldr	r2, [pc, #88]	@ (800316c <BSP_PB_Init+0xd4>)
 8003114:	441a      	add	r2, r3
 8003116:	79fb      	ldrb	r3, [r7, #7]
 8003118:	4915      	ldr	r1, [pc, #84]	@ (8003170 <BSP_PB_Init+0xd8>)
 800311a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800311e:	4619      	mov	r1, r3
 8003120:	4610      	mov	r0, r2
 8003122:	f002 fbee 	bl	8005902 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8003126:	79fb      	ldrb	r3, [r7, #7]
 8003128:	00db      	lsls	r3, r3, #3
 800312a:	4a10      	ldr	r2, [pc, #64]	@ (800316c <BSP_PB_Init+0xd4>)
 800312c:	1898      	adds	r0, r3, r2
 800312e:	79fb      	ldrb	r3, [r7, #7]
 8003130:	4a10      	ldr	r2, [pc, #64]	@ (8003174 <BSP_PB_Init+0xdc>)
 8003132:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003136:	461a      	mov	r2, r3
 8003138:	2100      	movs	r1, #0
 800313a:	f002 fbc3 	bl	80058c4 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 800313e:	2028      	movs	r0, #40	@ 0x28
 8003140:	79fb      	ldrb	r3, [r7, #7]
 8003142:	4a0d      	ldr	r2, [pc, #52]	@ (8003178 <BSP_PB_Init+0xe0>)
 8003144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003148:	2200      	movs	r2, #0
 800314a:	4619      	mov	r1, r3
 800314c:	f000 f9db 	bl	8003506 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8003150:	2328      	movs	r3, #40	@ 0x28
 8003152:	4618      	mov	r0, r3
 8003154:	f000 f9f1 	bl	800353a <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	3720      	adds	r7, #32
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	58024400 	.word	0x58024400
 8003168:	2400000c 	.word	0x2400000c
 800316c:	24000f24 	.word	0x24000f24
 8003170:	0800cea4 	.word	0x0800cea4
 8003174:	24000010 	.word	0x24000010
 8003178:	24000014 	.word	0x24000014

0800317c <BSP_PB_GetState>:
  *          This parameter can be one of the following values:
  *            @arg  BUTTON_USER: Wakeup Push Button
  * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
  */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	4603      	mov	r3, r0
 8003184:	71fb      	strb	r3, [r7, #7]
  return (int32_t)HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8003186:	79fb      	ldrb	r3, [r7, #7]
 8003188:	4a06      	ldr	r2, [pc, #24]	@ (80031a4 <BSP_PB_GetState+0x28>)
 800318a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800318e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003192:	4611      	mov	r1, r2
 8003194:	4618      	mov	r0, r3
 8003196:	f002 fd79 	bl	8005c8c <HAL_GPIO_ReadPin>
 800319a:	4603      	mov	r3, r0
}
 800319c:	4618      	mov	r0, r3
 800319e:	3708      	adds	r7, #8
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	2400000c 	.word	0x2400000c

080031a8 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	4603      	mov	r3, r0
 80031b0:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 80031b2:	bf00      	nop
 80031b4:	370c      	adds	r7, #12
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr

080031be <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80031be:	b580      	push	{r7, lr}
 80031c0:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80031c2:	2000      	movs	r0, #0
 80031c4:	f7ff fff0 	bl	80031a8 <BSP_PB_Callback>
}
 80031c8:	bf00      	nop
 80031ca:	bd80      	pop	{r7, pc}

080031cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031d2:	2003      	movs	r0, #3
 80031d4:	f000 f98c 	bl	80034f0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80031d8:	f004 ffe6 	bl	80081a8 <HAL_RCC_GetSysClockFreq>
 80031dc:	4602      	mov	r2, r0
 80031de:	4b15      	ldr	r3, [pc, #84]	@ (8003234 <HAL_Init+0x68>)
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	0a1b      	lsrs	r3, r3, #8
 80031e4:	f003 030f 	and.w	r3, r3, #15
 80031e8:	4913      	ldr	r1, [pc, #76]	@ (8003238 <HAL_Init+0x6c>)
 80031ea:	5ccb      	ldrb	r3, [r1, r3]
 80031ec:	f003 031f 	and.w	r3, r3, #31
 80031f0:	fa22 f303 	lsr.w	r3, r2, r3
 80031f4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80031f6:	4b0f      	ldr	r3, [pc, #60]	@ (8003234 <HAL_Init+0x68>)
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	f003 030f 	and.w	r3, r3, #15
 80031fe:	4a0e      	ldr	r2, [pc, #56]	@ (8003238 <HAL_Init+0x6c>)
 8003200:	5cd3      	ldrb	r3, [r2, r3]
 8003202:	f003 031f 	and.w	r3, r3, #31
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	fa22 f303 	lsr.w	r3, r2, r3
 800320c:	4a0b      	ldr	r2, [pc, #44]	@ (800323c <HAL_Init+0x70>)
 800320e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003210:	4a0b      	ldr	r2, [pc, #44]	@ (8003240 <HAL_Init+0x74>)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003216:	2000      	movs	r0, #0
 8003218:	f000 f814 	bl	8003244 <HAL_InitTick>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d001      	beq.n	8003226 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e002      	b.n	800322c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003226:	f7ff fcc1 	bl	8002bac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	3708      	adds	r7, #8
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	58024400 	.word	0x58024400
 8003238:	0800ce94 	.word	0x0800ce94
 800323c:	24000004 	.word	0x24000004
 8003240:	24000000 	.word	0x24000000

08003244 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800324c:	4b15      	ldr	r3, [pc, #84]	@ (80032a4 <HAL_InitTick+0x60>)
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d101      	bne.n	8003258 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e021      	b.n	800329c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003258:	4b13      	ldr	r3, [pc, #76]	@ (80032a8 <HAL_InitTick+0x64>)
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	4b11      	ldr	r3, [pc, #68]	@ (80032a4 <HAL_InitTick+0x60>)
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	4619      	mov	r1, r3
 8003262:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003266:	fbb3 f3f1 	udiv	r3, r3, r1
 800326a:	fbb2 f3f3 	udiv	r3, r2, r3
 800326e:	4618      	mov	r0, r3
 8003270:	f000 f971 	bl	8003556 <HAL_SYSTICK_Config>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d001      	beq.n	800327e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e00e      	b.n	800329c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2b0f      	cmp	r3, #15
 8003282:	d80a      	bhi.n	800329a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003284:	2200      	movs	r2, #0
 8003286:	6879      	ldr	r1, [r7, #4]
 8003288:	f04f 30ff 	mov.w	r0, #4294967295
 800328c:	f000 f93b 	bl	8003506 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003290:	4a06      	ldr	r2, [pc, #24]	@ (80032ac <HAL_InitTick+0x68>)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003296:	2300      	movs	r3, #0
 8003298:	e000      	b.n	800329c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
}
 800329c:	4618      	mov	r0, r3
 800329e:	3708      	adds	r7, #8
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	2400001c 	.word	0x2400001c
 80032a8:	24000000 	.word	0x24000000
 80032ac:	24000018 	.word	0x24000018

080032b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032b0:	b480      	push	{r7}
 80032b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80032b4:	4b06      	ldr	r3, [pc, #24]	@ (80032d0 <HAL_IncTick+0x20>)
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	461a      	mov	r2, r3
 80032ba:	4b06      	ldr	r3, [pc, #24]	@ (80032d4 <HAL_IncTick+0x24>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4413      	add	r3, r2
 80032c0:	4a04      	ldr	r2, [pc, #16]	@ (80032d4 <HAL_IncTick+0x24>)
 80032c2:	6013      	str	r3, [r2, #0]
}
 80032c4:	bf00      	nop
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	2400001c 	.word	0x2400001c
 80032d4:	24000f2c 	.word	0x24000f2c

080032d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0
  return uwTick;
 80032dc:	4b03      	ldr	r3, [pc, #12]	@ (80032ec <HAL_GetTick+0x14>)
 80032de:	681b      	ldr	r3, [r3, #0]
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	24000f2c 	.word	0x24000f2c

080032f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032f8:	f7ff ffee 	bl	80032d8 <HAL_GetTick>
 80032fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003308:	d005      	beq.n	8003316 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800330a:	4b0a      	ldr	r3, [pc, #40]	@ (8003334 <HAL_Delay+0x44>)
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	461a      	mov	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	4413      	add	r3, r2
 8003314:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003316:	bf00      	nop
 8003318:	f7ff ffde 	bl	80032d8 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	429a      	cmp	r2, r3
 8003326:	d8f7      	bhi.n	8003318 <HAL_Delay+0x28>
  {
  }
}
 8003328:	bf00      	nop
 800332a:	bf00      	nop
 800332c:	3710      	adds	r7, #16
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	2400001c 	.word	0x2400001c

08003338 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003338:	b480      	push	{r7}
 800333a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800333c:	4b03      	ldr	r3, [pc, #12]	@ (800334c <HAL_GetREVID+0x14>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	0c1b      	lsrs	r3, r3, #16
}
 8003342:	4618      	mov	r0, r3
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr
 800334c:	5c001000 	.word	0x5c001000

08003350 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003350:	b480      	push	{r7}
 8003352:	b085      	sub	sp, #20
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f003 0307 	and.w	r3, r3, #7
 800335e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003360:	4b0b      	ldr	r3, [pc, #44]	@ (8003390 <__NVIC_SetPriorityGrouping+0x40>)
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003366:	68ba      	ldr	r2, [r7, #8]
 8003368:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800336c:	4013      	ands	r3, r2
 800336e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003378:	4b06      	ldr	r3, [pc, #24]	@ (8003394 <__NVIC_SetPriorityGrouping+0x44>)
 800337a:	4313      	orrs	r3, r2
 800337c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800337e:	4a04      	ldr	r2, [pc, #16]	@ (8003390 <__NVIC_SetPriorityGrouping+0x40>)
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	60d3      	str	r3, [r2, #12]
}
 8003384:	bf00      	nop
 8003386:	3714      	adds	r7, #20
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr
 8003390:	e000ed00 	.word	0xe000ed00
 8003394:	05fa0000 	.word	0x05fa0000

08003398 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003398:	b480      	push	{r7}
 800339a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800339c:	4b04      	ldr	r3, [pc, #16]	@ (80033b0 <__NVIC_GetPriorityGrouping+0x18>)
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	0a1b      	lsrs	r3, r3, #8
 80033a2:	f003 0307 	and.w	r3, r3, #7
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr
 80033b0:	e000ed00 	.word	0xe000ed00

080033b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	4603      	mov	r3, r0
 80033bc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80033be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	db0b      	blt.n	80033de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033c6:	88fb      	ldrh	r3, [r7, #6]
 80033c8:	f003 021f 	and.w	r2, r3, #31
 80033cc:	4907      	ldr	r1, [pc, #28]	@ (80033ec <__NVIC_EnableIRQ+0x38>)
 80033ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033d2:	095b      	lsrs	r3, r3, #5
 80033d4:	2001      	movs	r0, #1
 80033d6:	fa00 f202 	lsl.w	r2, r0, r2
 80033da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80033de:	bf00      	nop
 80033e0:	370c      	adds	r7, #12
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	e000e100 	.word	0xe000e100

080033f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	4603      	mov	r3, r0
 80033f8:	6039      	str	r1, [r7, #0]
 80033fa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80033fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003400:	2b00      	cmp	r3, #0
 8003402:	db0a      	blt.n	800341a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	b2da      	uxtb	r2, r3
 8003408:	490c      	ldr	r1, [pc, #48]	@ (800343c <__NVIC_SetPriority+0x4c>)
 800340a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800340e:	0112      	lsls	r2, r2, #4
 8003410:	b2d2      	uxtb	r2, r2
 8003412:	440b      	add	r3, r1
 8003414:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003418:	e00a      	b.n	8003430 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	b2da      	uxtb	r2, r3
 800341e:	4908      	ldr	r1, [pc, #32]	@ (8003440 <__NVIC_SetPriority+0x50>)
 8003420:	88fb      	ldrh	r3, [r7, #6]
 8003422:	f003 030f 	and.w	r3, r3, #15
 8003426:	3b04      	subs	r3, #4
 8003428:	0112      	lsls	r2, r2, #4
 800342a:	b2d2      	uxtb	r2, r2
 800342c:	440b      	add	r3, r1
 800342e:	761a      	strb	r2, [r3, #24]
}
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr
 800343c:	e000e100 	.word	0xe000e100
 8003440:	e000ed00 	.word	0xe000ed00

08003444 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003444:	b480      	push	{r7}
 8003446:	b089      	sub	sp, #36	@ 0x24
 8003448:	af00      	add	r7, sp, #0
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f003 0307 	and.w	r3, r3, #7
 8003456:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	f1c3 0307 	rsb	r3, r3, #7
 800345e:	2b04      	cmp	r3, #4
 8003460:	bf28      	it	cs
 8003462:	2304      	movcs	r3, #4
 8003464:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	3304      	adds	r3, #4
 800346a:	2b06      	cmp	r3, #6
 800346c:	d902      	bls.n	8003474 <NVIC_EncodePriority+0x30>
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	3b03      	subs	r3, #3
 8003472:	e000      	b.n	8003476 <NVIC_EncodePriority+0x32>
 8003474:	2300      	movs	r3, #0
 8003476:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003478:	f04f 32ff 	mov.w	r2, #4294967295
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	fa02 f303 	lsl.w	r3, r2, r3
 8003482:	43da      	mvns	r2, r3
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	401a      	ands	r2, r3
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800348c:	f04f 31ff 	mov.w	r1, #4294967295
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	fa01 f303 	lsl.w	r3, r1, r3
 8003496:	43d9      	mvns	r1, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800349c:	4313      	orrs	r3, r2
         );
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3724      	adds	r7, #36	@ 0x24
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
	...

080034ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	3b01      	subs	r3, #1
 80034b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80034bc:	d301      	bcc.n	80034c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034be:	2301      	movs	r3, #1
 80034c0:	e00f      	b.n	80034e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034c2:	4a0a      	ldr	r2, [pc, #40]	@ (80034ec <SysTick_Config+0x40>)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	3b01      	subs	r3, #1
 80034c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034ca:	210f      	movs	r1, #15
 80034cc:	f04f 30ff 	mov.w	r0, #4294967295
 80034d0:	f7ff ff8e 	bl	80033f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034d4:	4b05      	ldr	r3, [pc, #20]	@ (80034ec <SysTick_Config+0x40>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034da:	4b04      	ldr	r3, [pc, #16]	@ (80034ec <SysTick_Config+0x40>)
 80034dc:	2207      	movs	r2, #7
 80034de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3708      	adds	r7, #8
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	e000e010 	.word	0xe000e010

080034f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f7ff ff29 	bl	8003350 <__NVIC_SetPriorityGrouping>
}
 80034fe:	bf00      	nop
 8003500:	3708      	adds	r7, #8
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}

08003506 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003506:	b580      	push	{r7, lr}
 8003508:	b086      	sub	sp, #24
 800350a:	af00      	add	r7, sp, #0
 800350c:	4603      	mov	r3, r0
 800350e:	60b9      	str	r1, [r7, #8]
 8003510:	607a      	str	r2, [r7, #4]
 8003512:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003514:	f7ff ff40 	bl	8003398 <__NVIC_GetPriorityGrouping>
 8003518:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	68b9      	ldr	r1, [r7, #8]
 800351e:	6978      	ldr	r0, [r7, #20]
 8003520:	f7ff ff90 	bl	8003444 <NVIC_EncodePriority>
 8003524:	4602      	mov	r2, r0
 8003526:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800352a:	4611      	mov	r1, r2
 800352c:	4618      	mov	r0, r3
 800352e:	f7ff ff5f 	bl	80033f0 <__NVIC_SetPriority>
}
 8003532:	bf00      	nop
 8003534:	3718      	adds	r7, #24
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800353a:	b580      	push	{r7, lr}
 800353c:	b082      	sub	sp, #8
 800353e:	af00      	add	r7, sp, #0
 8003540:	4603      	mov	r3, r0
 8003542:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003544:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003548:	4618      	mov	r0, r3
 800354a:	f7ff ff33 	bl	80033b4 <__NVIC_EnableIRQ>
}
 800354e:	bf00      	nop
 8003550:	3708      	adds	r7, #8
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}

08003556 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003556:	b580      	push	{r7, lr}
 8003558:	b082      	sub	sp, #8
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f7ff ffa4 	bl	80034ac <SysTick_Config>
 8003564:	4603      	mov	r3, r0
}
 8003566:	4618      	mov	r0, r3
 8003568:	3708      	adds	r7, #8
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
	...

08003570 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b086      	sub	sp, #24
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003578:	f7ff feae 	bl	80032d8 <HAL_GetTick>
 800357c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d101      	bne.n	8003588 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e316      	b.n	8003bb6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a66      	ldr	r2, [pc, #408]	@ (8003728 <HAL_DMA_Init+0x1b8>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d04a      	beq.n	8003628 <HAL_DMA_Init+0xb8>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a65      	ldr	r2, [pc, #404]	@ (800372c <HAL_DMA_Init+0x1bc>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d045      	beq.n	8003628 <HAL_DMA_Init+0xb8>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a63      	ldr	r2, [pc, #396]	@ (8003730 <HAL_DMA_Init+0x1c0>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d040      	beq.n	8003628 <HAL_DMA_Init+0xb8>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a62      	ldr	r2, [pc, #392]	@ (8003734 <HAL_DMA_Init+0x1c4>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d03b      	beq.n	8003628 <HAL_DMA_Init+0xb8>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a60      	ldr	r2, [pc, #384]	@ (8003738 <HAL_DMA_Init+0x1c8>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d036      	beq.n	8003628 <HAL_DMA_Init+0xb8>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a5f      	ldr	r2, [pc, #380]	@ (800373c <HAL_DMA_Init+0x1cc>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d031      	beq.n	8003628 <HAL_DMA_Init+0xb8>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a5d      	ldr	r2, [pc, #372]	@ (8003740 <HAL_DMA_Init+0x1d0>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d02c      	beq.n	8003628 <HAL_DMA_Init+0xb8>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a5c      	ldr	r2, [pc, #368]	@ (8003744 <HAL_DMA_Init+0x1d4>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d027      	beq.n	8003628 <HAL_DMA_Init+0xb8>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a5a      	ldr	r2, [pc, #360]	@ (8003748 <HAL_DMA_Init+0x1d8>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d022      	beq.n	8003628 <HAL_DMA_Init+0xb8>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a59      	ldr	r2, [pc, #356]	@ (800374c <HAL_DMA_Init+0x1dc>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d01d      	beq.n	8003628 <HAL_DMA_Init+0xb8>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a57      	ldr	r2, [pc, #348]	@ (8003750 <HAL_DMA_Init+0x1e0>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d018      	beq.n	8003628 <HAL_DMA_Init+0xb8>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a56      	ldr	r2, [pc, #344]	@ (8003754 <HAL_DMA_Init+0x1e4>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d013      	beq.n	8003628 <HAL_DMA_Init+0xb8>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a54      	ldr	r2, [pc, #336]	@ (8003758 <HAL_DMA_Init+0x1e8>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d00e      	beq.n	8003628 <HAL_DMA_Init+0xb8>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a53      	ldr	r2, [pc, #332]	@ (800375c <HAL_DMA_Init+0x1ec>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d009      	beq.n	8003628 <HAL_DMA_Init+0xb8>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a51      	ldr	r2, [pc, #324]	@ (8003760 <HAL_DMA_Init+0x1f0>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d004      	beq.n	8003628 <HAL_DMA_Init+0xb8>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a50      	ldr	r2, [pc, #320]	@ (8003764 <HAL_DMA_Init+0x1f4>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d101      	bne.n	800362c <HAL_DMA_Init+0xbc>
 8003628:	2301      	movs	r3, #1
 800362a:	e000      	b.n	800362e <HAL_DMA_Init+0xbe>
 800362c:	2300      	movs	r3, #0
 800362e:	2b00      	cmp	r3, #0
 8003630:	f000 813b 	beq.w	80038aa <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2202      	movs	r2, #2
 8003638:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a37      	ldr	r2, [pc, #220]	@ (8003728 <HAL_DMA_Init+0x1b8>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d04a      	beq.n	80036e4 <HAL_DMA_Init+0x174>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a36      	ldr	r2, [pc, #216]	@ (800372c <HAL_DMA_Init+0x1bc>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d045      	beq.n	80036e4 <HAL_DMA_Init+0x174>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a34      	ldr	r2, [pc, #208]	@ (8003730 <HAL_DMA_Init+0x1c0>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d040      	beq.n	80036e4 <HAL_DMA_Init+0x174>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a33      	ldr	r2, [pc, #204]	@ (8003734 <HAL_DMA_Init+0x1c4>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d03b      	beq.n	80036e4 <HAL_DMA_Init+0x174>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a31      	ldr	r2, [pc, #196]	@ (8003738 <HAL_DMA_Init+0x1c8>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d036      	beq.n	80036e4 <HAL_DMA_Init+0x174>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a30      	ldr	r2, [pc, #192]	@ (800373c <HAL_DMA_Init+0x1cc>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d031      	beq.n	80036e4 <HAL_DMA_Init+0x174>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a2e      	ldr	r2, [pc, #184]	@ (8003740 <HAL_DMA_Init+0x1d0>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d02c      	beq.n	80036e4 <HAL_DMA_Init+0x174>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a2d      	ldr	r2, [pc, #180]	@ (8003744 <HAL_DMA_Init+0x1d4>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d027      	beq.n	80036e4 <HAL_DMA_Init+0x174>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a2b      	ldr	r2, [pc, #172]	@ (8003748 <HAL_DMA_Init+0x1d8>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d022      	beq.n	80036e4 <HAL_DMA_Init+0x174>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a2a      	ldr	r2, [pc, #168]	@ (800374c <HAL_DMA_Init+0x1dc>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d01d      	beq.n	80036e4 <HAL_DMA_Init+0x174>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a28      	ldr	r2, [pc, #160]	@ (8003750 <HAL_DMA_Init+0x1e0>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d018      	beq.n	80036e4 <HAL_DMA_Init+0x174>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a27      	ldr	r2, [pc, #156]	@ (8003754 <HAL_DMA_Init+0x1e4>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d013      	beq.n	80036e4 <HAL_DMA_Init+0x174>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a25      	ldr	r2, [pc, #148]	@ (8003758 <HAL_DMA_Init+0x1e8>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d00e      	beq.n	80036e4 <HAL_DMA_Init+0x174>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a24      	ldr	r2, [pc, #144]	@ (800375c <HAL_DMA_Init+0x1ec>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d009      	beq.n	80036e4 <HAL_DMA_Init+0x174>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a22      	ldr	r2, [pc, #136]	@ (8003760 <HAL_DMA_Init+0x1f0>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d004      	beq.n	80036e4 <HAL_DMA_Init+0x174>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a21      	ldr	r2, [pc, #132]	@ (8003764 <HAL_DMA_Init+0x1f4>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d108      	bne.n	80036f6 <HAL_DMA_Init+0x186>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f022 0201 	bic.w	r2, r2, #1
 80036f2:	601a      	str	r2, [r3, #0]
 80036f4:	e007      	b.n	8003706 <HAL_DMA_Init+0x196>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f022 0201 	bic.w	r2, r2, #1
 8003704:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003706:	e02f      	b.n	8003768 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003708:	f7ff fde6 	bl	80032d8 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b05      	cmp	r3, #5
 8003714:	d928      	bls.n	8003768 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2220      	movs	r2, #32
 800371a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2203      	movs	r2, #3
 8003720:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e246      	b.n	8003bb6 <HAL_DMA_Init+0x646>
 8003728:	40020010 	.word	0x40020010
 800372c:	40020028 	.word	0x40020028
 8003730:	40020040 	.word	0x40020040
 8003734:	40020058 	.word	0x40020058
 8003738:	40020070 	.word	0x40020070
 800373c:	40020088 	.word	0x40020088
 8003740:	400200a0 	.word	0x400200a0
 8003744:	400200b8 	.word	0x400200b8
 8003748:	40020410 	.word	0x40020410
 800374c:	40020428 	.word	0x40020428
 8003750:	40020440 	.word	0x40020440
 8003754:	40020458 	.word	0x40020458
 8003758:	40020470 	.word	0x40020470
 800375c:	40020488 	.word	0x40020488
 8003760:	400204a0 	.word	0x400204a0
 8003764:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1c8      	bne.n	8003708 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800377e:	697a      	ldr	r2, [r7, #20]
 8003780:	4b83      	ldr	r3, [pc, #524]	@ (8003990 <HAL_DMA_Init+0x420>)
 8003782:	4013      	ands	r3, r2
 8003784:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800378e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	691b      	ldr	r3, [r3, #16]
 8003794:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800379a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	699b      	ldr	r3, [r3, #24]
 80037a0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037a6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a1b      	ldr	r3, [r3, #32]
 80037ac:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80037ae:	697a      	ldr	r2, [r7, #20]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b8:	2b04      	cmp	r3, #4
 80037ba:	d107      	bne.n	80037cc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037c4:	4313      	orrs	r3, r2
 80037c6:	697a      	ldr	r2, [r7, #20]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80037cc:	4b71      	ldr	r3, [pc, #452]	@ (8003994 <HAL_DMA_Init+0x424>)
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	4b71      	ldr	r3, [pc, #452]	@ (8003998 <HAL_DMA_Init+0x428>)
 80037d2:	4013      	ands	r3, r2
 80037d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80037d8:	d328      	bcc.n	800382c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	2b28      	cmp	r3, #40	@ 0x28
 80037e0:	d903      	bls.n	80037ea <HAL_DMA_Init+0x27a>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	2b2e      	cmp	r3, #46	@ 0x2e
 80037e8:	d917      	bls.n	800381a <HAL_DMA_Init+0x2aa>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	2b3e      	cmp	r3, #62	@ 0x3e
 80037f0:	d903      	bls.n	80037fa <HAL_DMA_Init+0x28a>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	2b42      	cmp	r3, #66	@ 0x42
 80037f8:	d90f      	bls.n	800381a <HAL_DMA_Init+0x2aa>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	2b46      	cmp	r3, #70	@ 0x46
 8003800:	d903      	bls.n	800380a <HAL_DMA_Init+0x29a>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	2b48      	cmp	r3, #72	@ 0x48
 8003808:	d907      	bls.n	800381a <HAL_DMA_Init+0x2aa>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	2b4e      	cmp	r3, #78	@ 0x4e
 8003810:	d905      	bls.n	800381e <HAL_DMA_Init+0x2ae>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	2b52      	cmp	r3, #82	@ 0x52
 8003818:	d801      	bhi.n	800381e <HAL_DMA_Init+0x2ae>
 800381a:	2301      	movs	r3, #1
 800381c:	e000      	b.n	8003820 <HAL_DMA_Init+0x2b0>
 800381e:	2300      	movs	r3, #0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d003      	beq.n	800382c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800382a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	697a      	ldr	r2, [r7, #20]
 8003832:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	695b      	ldr	r3, [r3, #20]
 800383a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	f023 0307 	bic.w	r3, r3, #7
 8003842:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003848:	697a      	ldr	r2, [r7, #20]
 800384a:	4313      	orrs	r3, r2
 800384c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003852:	2b04      	cmp	r3, #4
 8003854:	d117      	bne.n	8003886 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800385a:	697a      	ldr	r2, [r7, #20]
 800385c:	4313      	orrs	r3, r2
 800385e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00e      	beq.n	8003886 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f001 fddb 	bl	8005424 <DMA_CheckFifoParam>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d008      	beq.n	8003886 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2240      	movs	r2, #64	@ 0x40
 8003878:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2201      	movs	r2, #1
 800387e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e197      	b.n	8003bb6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	697a      	ldr	r2, [r7, #20]
 800388c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f001 fd16 	bl	80052c0 <DMA_CalcBaseAndBitshift>
 8003894:	4603      	mov	r3, r0
 8003896:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800389c:	f003 031f 	and.w	r3, r3, #31
 80038a0:	223f      	movs	r2, #63	@ 0x3f
 80038a2:	409a      	lsls	r2, r3
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	609a      	str	r2, [r3, #8]
 80038a8:	e0cd      	b.n	8003a46 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a3b      	ldr	r2, [pc, #236]	@ (800399c <HAL_DMA_Init+0x42c>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d022      	beq.n	80038fa <HAL_DMA_Init+0x38a>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a39      	ldr	r2, [pc, #228]	@ (80039a0 <HAL_DMA_Init+0x430>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d01d      	beq.n	80038fa <HAL_DMA_Init+0x38a>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a38      	ldr	r2, [pc, #224]	@ (80039a4 <HAL_DMA_Init+0x434>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d018      	beq.n	80038fa <HAL_DMA_Init+0x38a>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a36      	ldr	r2, [pc, #216]	@ (80039a8 <HAL_DMA_Init+0x438>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d013      	beq.n	80038fa <HAL_DMA_Init+0x38a>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a35      	ldr	r2, [pc, #212]	@ (80039ac <HAL_DMA_Init+0x43c>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d00e      	beq.n	80038fa <HAL_DMA_Init+0x38a>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a33      	ldr	r2, [pc, #204]	@ (80039b0 <HAL_DMA_Init+0x440>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d009      	beq.n	80038fa <HAL_DMA_Init+0x38a>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a32      	ldr	r2, [pc, #200]	@ (80039b4 <HAL_DMA_Init+0x444>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d004      	beq.n	80038fa <HAL_DMA_Init+0x38a>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a30      	ldr	r2, [pc, #192]	@ (80039b8 <HAL_DMA_Init+0x448>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d101      	bne.n	80038fe <HAL_DMA_Init+0x38e>
 80038fa:	2301      	movs	r3, #1
 80038fc:	e000      	b.n	8003900 <HAL_DMA_Init+0x390>
 80038fe:	2300      	movs	r3, #0
 8003900:	2b00      	cmp	r3, #0
 8003902:	f000 8097 	beq.w	8003a34 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a24      	ldr	r2, [pc, #144]	@ (800399c <HAL_DMA_Init+0x42c>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d021      	beq.n	8003954 <HAL_DMA_Init+0x3e4>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a22      	ldr	r2, [pc, #136]	@ (80039a0 <HAL_DMA_Init+0x430>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d01c      	beq.n	8003954 <HAL_DMA_Init+0x3e4>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a21      	ldr	r2, [pc, #132]	@ (80039a4 <HAL_DMA_Init+0x434>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d017      	beq.n	8003954 <HAL_DMA_Init+0x3e4>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a1f      	ldr	r2, [pc, #124]	@ (80039a8 <HAL_DMA_Init+0x438>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d012      	beq.n	8003954 <HAL_DMA_Init+0x3e4>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a1e      	ldr	r2, [pc, #120]	@ (80039ac <HAL_DMA_Init+0x43c>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d00d      	beq.n	8003954 <HAL_DMA_Init+0x3e4>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a1c      	ldr	r2, [pc, #112]	@ (80039b0 <HAL_DMA_Init+0x440>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d008      	beq.n	8003954 <HAL_DMA_Init+0x3e4>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a1b      	ldr	r2, [pc, #108]	@ (80039b4 <HAL_DMA_Init+0x444>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d003      	beq.n	8003954 <HAL_DMA_Init+0x3e4>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a19      	ldr	r2, [pc, #100]	@ (80039b8 <HAL_DMA_Init+0x448>)
 8003952:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2202      	movs	r2, #2
 8003958:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800396c:	697a      	ldr	r2, [r7, #20]
 800396e:	4b13      	ldr	r3, [pc, #76]	@ (80039bc <HAL_DMA_Init+0x44c>)
 8003970:	4013      	ands	r3, r2
 8003972:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	2b40      	cmp	r3, #64	@ 0x40
 800397a:	d021      	beq.n	80039c0 <HAL_DMA_Init+0x450>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	2b80      	cmp	r3, #128	@ 0x80
 8003982:	d102      	bne.n	800398a <HAL_DMA_Init+0x41a>
 8003984:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003988:	e01b      	b.n	80039c2 <HAL_DMA_Init+0x452>
 800398a:	2300      	movs	r3, #0
 800398c:	e019      	b.n	80039c2 <HAL_DMA_Init+0x452>
 800398e:	bf00      	nop
 8003990:	fe10803f 	.word	0xfe10803f
 8003994:	5c001000 	.word	0x5c001000
 8003998:	ffff0000 	.word	0xffff0000
 800399c:	58025408 	.word	0x58025408
 80039a0:	5802541c 	.word	0x5802541c
 80039a4:	58025430 	.word	0x58025430
 80039a8:	58025444 	.word	0x58025444
 80039ac:	58025458 	.word	0x58025458
 80039b0:	5802546c 	.word	0x5802546c
 80039b4:	58025480 	.word	0x58025480
 80039b8:	58025494 	.word	0x58025494
 80039bc:	fffe000f 	.word	0xfffe000f
 80039c0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	68d2      	ldr	r2, [r2, #12]
 80039c6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80039c8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80039d0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80039d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	699b      	ldr	r3, [r3, #24]
 80039de:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80039e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	69db      	ldr	r3, [r3, #28]
 80039e6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80039e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a1b      	ldr	r3, [r3, #32]
 80039ee:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80039f0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80039f2:	697a      	ldr	r2, [r7, #20]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	697a      	ldr	r2, [r7, #20]
 80039fe:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	461a      	mov	r2, r3
 8003a06:	4b6e      	ldr	r3, [pc, #440]	@ (8003bc0 <HAL_DMA_Init+0x650>)
 8003a08:	4413      	add	r3, r2
 8003a0a:	4a6e      	ldr	r2, [pc, #440]	@ (8003bc4 <HAL_DMA_Init+0x654>)
 8003a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a10:	091b      	lsrs	r3, r3, #4
 8003a12:	009a      	lsls	r2, r3, #2
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f001 fc51 	bl	80052c0 <DMA_CalcBaseAndBitshift>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a26:	f003 031f 	and.w	r3, r3, #31
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	409a      	lsls	r2, r3
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	605a      	str	r2, [r3, #4]
 8003a32:	e008      	b.n	8003a46 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2240      	movs	r2, #64	@ 0x40
 8003a38:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2203      	movs	r2, #3
 8003a3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e0b7      	b.n	8003bb6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a5f      	ldr	r2, [pc, #380]	@ (8003bc8 <HAL_DMA_Init+0x658>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d072      	beq.n	8003b36 <HAL_DMA_Init+0x5c6>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a5d      	ldr	r2, [pc, #372]	@ (8003bcc <HAL_DMA_Init+0x65c>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d06d      	beq.n	8003b36 <HAL_DMA_Init+0x5c6>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a5c      	ldr	r2, [pc, #368]	@ (8003bd0 <HAL_DMA_Init+0x660>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d068      	beq.n	8003b36 <HAL_DMA_Init+0x5c6>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a5a      	ldr	r2, [pc, #360]	@ (8003bd4 <HAL_DMA_Init+0x664>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d063      	beq.n	8003b36 <HAL_DMA_Init+0x5c6>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a59      	ldr	r2, [pc, #356]	@ (8003bd8 <HAL_DMA_Init+0x668>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d05e      	beq.n	8003b36 <HAL_DMA_Init+0x5c6>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a57      	ldr	r2, [pc, #348]	@ (8003bdc <HAL_DMA_Init+0x66c>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d059      	beq.n	8003b36 <HAL_DMA_Init+0x5c6>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a56      	ldr	r2, [pc, #344]	@ (8003be0 <HAL_DMA_Init+0x670>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d054      	beq.n	8003b36 <HAL_DMA_Init+0x5c6>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a54      	ldr	r2, [pc, #336]	@ (8003be4 <HAL_DMA_Init+0x674>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d04f      	beq.n	8003b36 <HAL_DMA_Init+0x5c6>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a53      	ldr	r2, [pc, #332]	@ (8003be8 <HAL_DMA_Init+0x678>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d04a      	beq.n	8003b36 <HAL_DMA_Init+0x5c6>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a51      	ldr	r2, [pc, #324]	@ (8003bec <HAL_DMA_Init+0x67c>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d045      	beq.n	8003b36 <HAL_DMA_Init+0x5c6>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a50      	ldr	r2, [pc, #320]	@ (8003bf0 <HAL_DMA_Init+0x680>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d040      	beq.n	8003b36 <HAL_DMA_Init+0x5c6>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a4e      	ldr	r2, [pc, #312]	@ (8003bf4 <HAL_DMA_Init+0x684>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d03b      	beq.n	8003b36 <HAL_DMA_Init+0x5c6>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a4d      	ldr	r2, [pc, #308]	@ (8003bf8 <HAL_DMA_Init+0x688>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d036      	beq.n	8003b36 <HAL_DMA_Init+0x5c6>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a4b      	ldr	r2, [pc, #300]	@ (8003bfc <HAL_DMA_Init+0x68c>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d031      	beq.n	8003b36 <HAL_DMA_Init+0x5c6>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a4a      	ldr	r2, [pc, #296]	@ (8003c00 <HAL_DMA_Init+0x690>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d02c      	beq.n	8003b36 <HAL_DMA_Init+0x5c6>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a48      	ldr	r2, [pc, #288]	@ (8003c04 <HAL_DMA_Init+0x694>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d027      	beq.n	8003b36 <HAL_DMA_Init+0x5c6>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a47      	ldr	r2, [pc, #284]	@ (8003c08 <HAL_DMA_Init+0x698>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d022      	beq.n	8003b36 <HAL_DMA_Init+0x5c6>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a45      	ldr	r2, [pc, #276]	@ (8003c0c <HAL_DMA_Init+0x69c>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d01d      	beq.n	8003b36 <HAL_DMA_Init+0x5c6>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a44      	ldr	r2, [pc, #272]	@ (8003c10 <HAL_DMA_Init+0x6a0>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d018      	beq.n	8003b36 <HAL_DMA_Init+0x5c6>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a42      	ldr	r2, [pc, #264]	@ (8003c14 <HAL_DMA_Init+0x6a4>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d013      	beq.n	8003b36 <HAL_DMA_Init+0x5c6>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a41      	ldr	r2, [pc, #260]	@ (8003c18 <HAL_DMA_Init+0x6a8>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d00e      	beq.n	8003b36 <HAL_DMA_Init+0x5c6>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a3f      	ldr	r2, [pc, #252]	@ (8003c1c <HAL_DMA_Init+0x6ac>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d009      	beq.n	8003b36 <HAL_DMA_Init+0x5c6>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a3e      	ldr	r2, [pc, #248]	@ (8003c20 <HAL_DMA_Init+0x6b0>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d004      	beq.n	8003b36 <HAL_DMA_Init+0x5c6>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a3c      	ldr	r2, [pc, #240]	@ (8003c24 <HAL_DMA_Init+0x6b4>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d101      	bne.n	8003b3a <HAL_DMA_Init+0x5ca>
 8003b36:	2301      	movs	r3, #1
 8003b38:	e000      	b.n	8003b3c <HAL_DMA_Init+0x5cc>
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d032      	beq.n	8003ba6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f001 fceb 	bl	800551c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	2b80      	cmp	r3, #128	@ 0x80
 8003b4c:	d102      	bne.n	8003b54 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685a      	ldr	r2, [r3, #4]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b5c:	b2d2      	uxtb	r2, r2
 8003b5e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003b68:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d010      	beq.n	8003b94 <HAL_DMA_Init+0x624>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	2b08      	cmp	r3, #8
 8003b78:	d80c      	bhi.n	8003b94 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f001 fd68 	bl	8005650 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b84:	2200      	movs	r2, #0
 8003b86:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003b90:	605a      	str	r2, [r3, #4]
 8003b92:	e008      	b.n	8003ba6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3718      	adds	r7, #24
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	a7fdabf8 	.word	0xa7fdabf8
 8003bc4:	cccccccd 	.word	0xcccccccd
 8003bc8:	40020010 	.word	0x40020010
 8003bcc:	40020028 	.word	0x40020028
 8003bd0:	40020040 	.word	0x40020040
 8003bd4:	40020058 	.word	0x40020058
 8003bd8:	40020070 	.word	0x40020070
 8003bdc:	40020088 	.word	0x40020088
 8003be0:	400200a0 	.word	0x400200a0
 8003be4:	400200b8 	.word	0x400200b8
 8003be8:	40020410 	.word	0x40020410
 8003bec:	40020428 	.word	0x40020428
 8003bf0:	40020440 	.word	0x40020440
 8003bf4:	40020458 	.word	0x40020458
 8003bf8:	40020470 	.word	0x40020470
 8003bfc:	40020488 	.word	0x40020488
 8003c00:	400204a0 	.word	0x400204a0
 8003c04:	400204b8 	.word	0x400204b8
 8003c08:	58025408 	.word	0x58025408
 8003c0c:	5802541c 	.word	0x5802541c
 8003c10:	58025430 	.word	0x58025430
 8003c14:	58025444 	.word	0x58025444
 8003c18:	58025458 	.word	0x58025458
 8003c1c:	5802546c 	.word	0x5802546c
 8003c20:	58025480 	.word	0x58025480
 8003c24:	58025494 	.word	0x58025494

08003c28 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b086      	sub	sp, #24
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	607a      	str	r2, [r7, #4]
 8003c34:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c36:	2300      	movs	r3, #0
 8003c38:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d101      	bne.n	8003c44 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e226      	b.n	8004092 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d101      	bne.n	8003c52 <HAL_DMA_Start_IT+0x2a>
 8003c4e:	2302      	movs	r3, #2
 8003c50:	e21f      	b.n	8004092 <HAL_DMA_Start_IT+0x46a>
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2201      	movs	r2, #1
 8003c56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	f040 820a 	bne.w	800407c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2202      	movs	r2, #2
 8003c6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a68      	ldr	r2, [pc, #416]	@ (8003e1c <HAL_DMA_Start_IT+0x1f4>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d04a      	beq.n	8003d16 <HAL_DMA_Start_IT+0xee>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a66      	ldr	r2, [pc, #408]	@ (8003e20 <HAL_DMA_Start_IT+0x1f8>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d045      	beq.n	8003d16 <HAL_DMA_Start_IT+0xee>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a65      	ldr	r2, [pc, #404]	@ (8003e24 <HAL_DMA_Start_IT+0x1fc>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d040      	beq.n	8003d16 <HAL_DMA_Start_IT+0xee>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a63      	ldr	r2, [pc, #396]	@ (8003e28 <HAL_DMA_Start_IT+0x200>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d03b      	beq.n	8003d16 <HAL_DMA_Start_IT+0xee>
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a62      	ldr	r2, [pc, #392]	@ (8003e2c <HAL_DMA_Start_IT+0x204>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d036      	beq.n	8003d16 <HAL_DMA_Start_IT+0xee>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a60      	ldr	r2, [pc, #384]	@ (8003e30 <HAL_DMA_Start_IT+0x208>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d031      	beq.n	8003d16 <HAL_DMA_Start_IT+0xee>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a5f      	ldr	r2, [pc, #380]	@ (8003e34 <HAL_DMA_Start_IT+0x20c>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d02c      	beq.n	8003d16 <HAL_DMA_Start_IT+0xee>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a5d      	ldr	r2, [pc, #372]	@ (8003e38 <HAL_DMA_Start_IT+0x210>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d027      	beq.n	8003d16 <HAL_DMA_Start_IT+0xee>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a5c      	ldr	r2, [pc, #368]	@ (8003e3c <HAL_DMA_Start_IT+0x214>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d022      	beq.n	8003d16 <HAL_DMA_Start_IT+0xee>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a5a      	ldr	r2, [pc, #360]	@ (8003e40 <HAL_DMA_Start_IT+0x218>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d01d      	beq.n	8003d16 <HAL_DMA_Start_IT+0xee>
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a59      	ldr	r2, [pc, #356]	@ (8003e44 <HAL_DMA_Start_IT+0x21c>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d018      	beq.n	8003d16 <HAL_DMA_Start_IT+0xee>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a57      	ldr	r2, [pc, #348]	@ (8003e48 <HAL_DMA_Start_IT+0x220>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d013      	beq.n	8003d16 <HAL_DMA_Start_IT+0xee>
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a56      	ldr	r2, [pc, #344]	@ (8003e4c <HAL_DMA_Start_IT+0x224>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d00e      	beq.n	8003d16 <HAL_DMA_Start_IT+0xee>
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a54      	ldr	r2, [pc, #336]	@ (8003e50 <HAL_DMA_Start_IT+0x228>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d009      	beq.n	8003d16 <HAL_DMA_Start_IT+0xee>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a53      	ldr	r2, [pc, #332]	@ (8003e54 <HAL_DMA_Start_IT+0x22c>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d004      	beq.n	8003d16 <HAL_DMA_Start_IT+0xee>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a51      	ldr	r2, [pc, #324]	@ (8003e58 <HAL_DMA_Start_IT+0x230>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d108      	bne.n	8003d28 <HAL_DMA_Start_IT+0x100>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f022 0201 	bic.w	r2, r2, #1
 8003d24:	601a      	str	r2, [r3, #0]
 8003d26:	e007      	b.n	8003d38 <HAL_DMA_Start_IT+0x110>
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f022 0201 	bic.w	r2, r2, #1
 8003d36:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	68b9      	ldr	r1, [r7, #8]
 8003d3e:	68f8      	ldr	r0, [r7, #12]
 8003d40:	f001 f912 	bl	8004f68 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a34      	ldr	r2, [pc, #208]	@ (8003e1c <HAL_DMA_Start_IT+0x1f4>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d04a      	beq.n	8003de4 <HAL_DMA_Start_IT+0x1bc>
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a33      	ldr	r2, [pc, #204]	@ (8003e20 <HAL_DMA_Start_IT+0x1f8>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d045      	beq.n	8003de4 <HAL_DMA_Start_IT+0x1bc>
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a31      	ldr	r2, [pc, #196]	@ (8003e24 <HAL_DMA_Start_IT+0x1fc>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d040      	beq.n	8003de4 <HAL_DMA_Start_IT+0x1bc>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a30      	ldr	r2, [pc, #192]	@ (8003e28 <HAL_DMA_Start_IT+0x200>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d03b      	beq.n	8003de4 <HAL_DMA_Start_IT+0x1bc>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a2e      	ldr	r2, [pc, #184]	@ (8003e2c <HAL_DMA_Start_IT+0x204>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d036      	beq.n	8003de4 <HAL_DMA_Start_IT+0x1bc>
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a2d      	ldr	r2, [pc, #180]	@ (8003e30 <HAL_DMA_Start_IT+0x208>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d031      	beq.n	8003de4 <HAL_DMA_Start_IT+0x1bc>
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a2b      	ldr	r2, [pc, #172]	@ (8003e34 <HAL_DMA_Start_IT+0x20c>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d02c      	beq.n	8003de4 <HAL_DMA_Start_IT+0x1bc>
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a2a      	ldr	r2, [pc, #168]	@ (8003e38 <HAL_DMA_Start_IT+0x210>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d027      	beq.n	8003de4 <HAL_DMA_Start_IT+0x1bc>
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a28      	ldr	r2, [pc, #160]	@ (8003e3c <HAL_DMA_Start_IT+0x214>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d022      	beq.n	8003de4 <HAL_DMA_Start_IT+0x1bc>
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a27      	ldr	r2, [pc, #156]	@ (8003e40 <HAL_DMA_Start_IT+0x218>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d01d      	beq.n	8003de4 <HAL_DMA_Start_IT+0x1bc>
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a25      	ldr	r2, [pc, #148]	@ (8003e44 <HAL_DMA_Start_IT+0x21c>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d018      	beq.n	8003de4 <HAL_DMA_Start_IT+0x1bc>
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a24      	ldr	r2, [pc, #144]	@ (8003e48 <HAL_DMA_Start_IT+0x220>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d013      	beq.n	8003de4 <HAL_DMA_Start_IT+0x1bc>
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a22      	ldr	r2, [pc, #136]	@ (8003e4c <HAL_DMA_Start_IT+0x224>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d00e      	beq.n	8003de4 <HAL_DMA_Start_IT+0x1bc>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a21      	ldr	r2, [pc, #132]	@ (8003e50 <HAL_DMA_Start_IT+0x228>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d009      	beq.n	8003de4 <HAL_DMA_Start_IT+0x1bc>
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a1f      	ldr	r2, [pc, #124]	@ (8003e54 <HAL_DMA_Start_IT+0x22c>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d004      	beq.n	8003de4 <HAL_DMA_Start_IT+0x1bc>
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a1e      	ldr	r2, [pc, #120]	@ (8003e58 <HAL_DMA_Start_IT+0x230>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d101      	bne.n	8003de8 <HAL_DMA_Start_IT+0x1c0>
 8003de4:	2301      	movs	r3, #1
 8003de6:	e000      	b.n	8003dea <HAL_DMA_Start_IT+0x1c2>
 8003de8:	2300      	movs	r3, #0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d036      	beq.n	8003e5c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f023 021e 	bic.w	r2, r3, #30
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f042 0216 	orr.w	r2, r2, #22
 8003e00:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d03e      	beq.n	8003e88 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f042 0208 	orr.w	r2, r2, #8
 8003e18:	601a      	str	r2, [r3, #0]
 8003e1a:	e035      	b.n	8003e88 <HAL_DMA_Start_IT+0x260>
 8003e1c:	40020010 	.word	0x40020010
 8003e20:	40020028 	.word	0x40020028
 8003e24:	40020040 	.word	0x40020040
 8003e28:	40020058 	.word	0x40020058
 8003e2c:	40020070 	.word	0x40020070
 8003e30:	40020088 	.word	0x40020088
 8003e34:	400200a0 	.word	0x400200a0
 8003e38:	400200b8 	.word	0x400200b8
 8003e3c:	40020410 	.word	0x40020410
 8003e40:	40020428 	.word	0x40020428
 8003e44:	40020440 	.word	0x40020440
 8003e48:	40020458 	.word	0x40020458
 8003e4c:	40020470 	.word	0x40020470
 8003e50:	40020488 	.word	0x40020488
 8003e54:	400204a0 	.word	0x400204a0
 8003e58:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f023 020e 	bic.w	r2, r3, #14
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f042 020a 	orr.w	r2, r2, #10
 8003e6e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d007      	beq.n	8003e88 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f042 0204 	orr.w	r2, r2, #4
 8003e86:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a83      	ldr	r2, [pc, #524]	@ (800409c <HAL_DMA_Start_IT+0x474>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d072      	beq.n	8003f78 <HAL_DMA_Start_IT+0x350>
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a82      	ldr	r2, [pc, #520]	@ (80040a0 <HAL_DMA_Start_IT+0x478>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d06d      	beq.n	8003f78 <HAL_DMA_Start_IT+0x350>
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a80      	ldr	r2, [pc, #512]	@ (80040a4 <HAL_DMA_Start_IT+0x47c>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d068      	beq.n	8003f78 <HAL_DMA_Start_IT+0x350>
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a7f      	ldr	r2, [pc, #508]	@ (80040a8 <HAL_DMA_Start_IT+0x480>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d063      	beq.n	8003f78 <HAL_DMA_Start_IT+0x350>
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a7d      	ldr	r2, [pc, #500]	@ (80040ac <HAL_DMA_Start_IT+0x484>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d05e      	beq.n	8003f78 <HAL_DMA_Start_IT+0x350>
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a7c      	ldr	r2, [pc, #496]	@ (80040b0 <HAL_DMA_Start_IT+0x488>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d059      	beq.n	8003f78 <HAL_DMA_Start_IT+0x350>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a7a      	ldr	r2, [pc, #488]	@ (80040b4 <HAL_DMA_Start_IT+0x48c>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d054      	beq.n	8003f78 <HAL_DMA_Start_IT+0x350>
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a79      	ldr	r2, [pc, #484]	@ (80040b8 <HAL_DMA_Start_IT+0x490>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d04f      	beq.n	8003f78 <HAL_DMA_Start_IT+0x350>
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a77      	ldr	r2, [pc, #476]	@ (80040bc <HAL_DMA_Start_IT+0x494>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d04a      	beq.n	8003f78 <HAL_DMA_Start_IT+0x350>
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a76      	ldr	r2, [pc, #472]	@ (80040c0 <HAL_DMA_Start_IT+0x498>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d045      	beq.n	8003f78 <HAL_DMA_Start_IT+0x350>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a74      	ldr	r2, [pc, #464]	@ (80040c4 <HAL_DMA_Start_IT+0x49c>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d040      	beq.n	8003f78 <HAL_DMA_Start_IT+0x350>
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a73      	ldr	r2, [pc, #460]	@ (80040c8 <HAL_DMA_Start_IT+0x4a0>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d03b      	beq.n	8003f78 <HAL_DMA_Start_IT+0x350>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a71      	ldr	r2, [pc, #452]	@ (80040cc <HAL_DMA_Start_IT+0x4a4>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d036      	beq.n	8003f78 <HAL_DMA_Start_IT+0x350>
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a70      	ldr	r2, [pc, #448]	@ (80040d0 <HAL_DMA_Start_IT+0x4a8>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d031      	beq.n	8003f78 <HAL_DMA_Start_IT+0x350>
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a6e      	ldr	r2, [pc, #440]	@ (80040d4 <HAL_DMA_Start_IT+0x4ac>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d02c      	beq.n	8003f78 <HAL_DMA_Start_IT+0x350>
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a6d      	ldr	r2, [pc, #436]	@ (80040d8 <HAL_DMA_Start_IT+0x4b0>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d027      	beq.n	8003f78 <HAL_DMA_Start_IT+0x350>
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a6b      	ldr	r2, [pc, #428]	@ (80040dc <HAL_DMA_Start_IT+0x4b4>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d022      	beq.n	8003f78 <HAL_DMA_Start_IT+0x350>
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a6a      	ldr	r2, [pc, #424]	@ (80040e0 <HAL_DMA_Start_IT+0x4b8>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d01d      	beq.n	8003f78 <HAL_DMA_Start_IT+0x350>
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a68      	ldr	r2, [pc, #416]	@ (80040e4 <HAL_DMA_Start_IT+0x4bc>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d018      	beq.n	8003f78 <HAL_DMA_Start_IT+0x350>
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a67      	ldr	r2, [pc, #412]	@ (80040e8 <HAL_DMA_Start_IT+0x4c0>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d013      	beq.n	8003f78 <HAL_DMA_Start_IT+0x350>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a65      	ldr	r2, [pc, #404]	@ (80040ec <HAL_DMA_Start_IT+0x4c4>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d00e      	beq.n	8003f78 <HAL_DMA_Start_IT+0x350>
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a64      	ldr	r2, [pc, #400]	@ (80040f0 <HAL_DMA_Start_IT+0x4c8>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d009      	beq.n	8003f78 <HAL_DMA_Start_IT+0x350>
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a62      	ldr	r2, [pc, #392]	@ (80040f4 <HAL_DMA_Start_IT+0x4cc>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d004      	beq.n	8003f78 <HAL_DMA_Start_IT+0x350>
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a61      	ldr	r2, [pc, #388]	@ (80040f8 <HAL_DMA_Start_IT+0x4d0>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d101      	bne.n	8003f7c <HAL_DMA_Start_IT+0x354>
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e000      	b.n	8003f7e <HAL_DMA_Start_IT+0x356>
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d01a      	beq.n	8003fb8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d007      	beq.n	8003fa0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f9a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f9e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d007      	beq.n	8003fb8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003fb2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003fb6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a37      	ldr	r2, [pc, #220]	@ (800409c <HAL_DMA_Start_IT+0x474>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d04a      	beq.n	8004058 <HAL_DMA_Start_IT+0x430>
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a36      	ldr	r2, [pc, #216]	@ (80040a0 <HAL_DMA_Start_IT+0x478>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d045      	beq.n	8004058 <HAL_DMA_Start_IT+0x430>
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a34      	ldr	r2, [pc, #208]	@ (80040a4 <HAL_DMA_Start_IT+0x47c>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d040      	beq.n	8004058 <HAL_DMA_Start_IT+0x430>
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a33      	ldr	r2, [pc, #204]	@ (80040a8 <HAL_DMA_Start_IT+0x480>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d03b      	beq.n	8004058 <HAL_DMA_Start_IT+0x430>
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a31      	ldr	r2, [pc, #196]	@ (80040ac <HAL_DMA_Start_IT+0x484>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d036      	beq.n	8004058 <HAL_DMA_Start_IT+0x430>
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a30      	ldr	r2, [pc, #192]	@ (80040b0 <HAL_DMA_Start_IT+0x488>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d031      	beq.n	8004058 <HAL_DMA_Start_IT+0x430>
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a2e      	ldr	r2, [pc, #184]	@ (80040b4 <HAL_DMA_Start_IT+0x48c>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d02c      	beq.n	8004058 <HAL_DMA_Start_IT+0x430>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a2d      	ldr	r2, [pc, #180]	@ (80040b8 <HAL_DMA_Start_IT+0x490>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d027      	beq.n	8004058 <HAL_DMA_Start_IT+0x430>
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a2b      	ldr	r2, [pc, #172]	@ (80040bc <HAL_DMA_Start_IT+0x494>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d022      	beq.n	8004058 <HAL_DMA_Start_IT+0x430>
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a2a      	ldr	r2, [pc, #168]	@ (80040c0 <HAL_DMA_Start_IT+0x498>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d01d      	beq.n	8004058 <HAL_DMA_Start_IT+0x430>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a28      	ldr	r2, [pc, #160]	@ (80040c4 <HAL_DMA_Start_IT+0x49c>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d018      	beq.n	8004058 <HAL_DMA_Start_IT+0x430>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a27      	ldr	r2, [pc, #156]	@ (80040c8 <HAL_DMA_Start_IT+0x4a0>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d013      	beq.n	8004058 <HAL_DMA_Start_IT+0x430>
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a25      	ldr	r2, [pc, #148]	@ (80040cc <HAL_DMA_Start_IT+0x4a4>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d00e      	beq.n	8004058 <HAL_DMA_Start_IT+0x430>
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a24      	ldr	r2, [pc, #144]	@ (80040d0 <HAL_DMA_Start_IT+0x4a8>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d009      	beq.n	8004058 <HAL_DMA_Start_IT+0x430>
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a22      	ldr	r2, [pc, #136]	@ (80040d4 <HAL_DMA_Start_IT+0x4ac>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d004      	beq.n	8004058 <HAL_DMA_Start_IT+0x430>
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a21      	ldr	r2, [pc, #132]	@ (80040d8 <HAL_DMA_Start_IT+0x4b0>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d108      	bne.n	800406a <HAL_DMA_Start_IT+0x442>
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f042 0201 	orr.w	r2, r2, #1
 8004066:	601a      	str	r2, [r3, #0]
 8004068:	e012      	b.n	8004090 <HAL_DMA_Start_IT+0x468>
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f042 0201 	orr.w	r2, r2, #1
 8004078:	601a      	str	r2, [r3, #0]
 800407a:	e009      	b.n	8004090 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004082:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2200      	movs	r2, #0
 8004088:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004090:	7dfb      	ldrb	r3, [r7, #23]
}
 8004092:	4618      	mov	r0, r3
 8004094:	3718      	adds	r7, #24
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	40020010 	.word	0x40020010
 80040a0:	40020028 	.word	0x40020028
 80040a4:	40020040 	.word	0x40020040
 80040a8:	40020058 	.word	0x40020058
 80040ac:	40020070 	.word	0x40020070
 80040b0:	40020088 	.word	0x40020088
 80040b4:	400200a0 	.word	0x400200a0
 80040b8:	400200b8 	.word	0x400200b8
 80040bc:	40020410 	.word	0x40020410
 80040c0:	40020428 	.word	0x40020428
 80040c4:	40020440 	.word	0x40020440
 80040c8:	40020458 	.word	0x40020458
 80040cc:	40020470 	.word	0x40020470
 80040d0:	40020488 	.word	0x40020488
 80040d4:	400204a0 	.word	0x400204a0
 80040d8:	400204b8 	.word	0x400204b8
 80040dc:	58025408 	.word	0x58025408
 80040e0:	5802541c 	.word	0x5802541c
 80040e4:	58025430 	.word	0x58025430
 80040e8:	58025444 	.word	0x58025444
 80040ec:	58025458 	.word	0x58025458
 80040f0:	5802546c 	.word	0x5802546c
 80040f4:	58025480 	.word	0x58025480
 80040f8:	58025494 	.word	0x58025494

080040fc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b08a      	sub	sp, #40	@ 0x28
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004104:	2300      	movs	r3, #0
 8004106:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004108:	4b67      	ldr	r3, [pc, #412]	@ (80042a8 <HAL_DMA_IRQHandler+0x1ac>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a67      	ldr	r2, [pc, #412]	@ (80042ac <HAL_DMA_IRQHandler+0x1b0>)
 800410e:	fba2 2303 	umull	r2, r3, r2, r3
 8004112:	0a9b      	lsrs	r3, r3, #10
 8004114:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800411a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004120:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004122:	6a3b      	ldr	r3, [r7, #32]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a5f      	ldr	r2, [pc, #380]	@ (80042b0 <HAL_DMA_IRQHandler+0x1b4>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d04a      	beq.n	80041ce <HAL_DMA_IRQHandler+0xd2>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a5d      	ldr	r2, [pc, #372]	@ (80042b4 <HAL_DMA_IRQHandler+0x1b8>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d045      	beq.n	80041ce <HAL_DMA_IRQHandler+0xd2>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a5c      	ldr	r2, [pc, #368]	@ (80042b8 <HAL_DMA_IRQHandler+0x1bc>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d040      	beq.n	80041ce <HAL_DMA_IRQHandler+0xd2>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a5a      	ldr	r2, [pc, #360]	@ (80042bc <HAL_DMA_IRQHandler+0x1c0>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d03b      	beq.n	80041ce <HAL_DMA_IRQHandler+0xd2>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a59      	ldr	r2, [pc, #356]	@ (80042c0 <HAL_DMA_IRQHandler+0x1c4>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d036      	beq.n	80041ce <HAL_DMA_IRQHandler+0xd2>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a57      	ldr	r2, [pc, #348]	@ (80042c4 <HAL_DMA_IRQHandler+0x1c8>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d031      	beq.n	80041ce <HAL_DMA_IRQHandler+0xd2>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a56      	ldr	r2, [pc, #344]	@ (80042c8 <HAL_DMA_IRQHandler+0x1cc>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d02c      	beq.n	80041ce <HAL_DMA_IRQHandler+0xd2>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a54      	ldr	r2, [pc, #336]	@ (80042cc <HAL_DMA_IRQHandler+0x1d0>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d027      	beq.n	80041ce <HAL_DMA_IRQHandler+0xd2>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a53      	ldr	r2, [pc, #332]	@ (80042d0 <HAL_DMA_IRQHandler+0x1d4>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d022      	beq.n	80041ce <HAL_DMA_IRQHandler+0xd2>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a51      	ldr	r2, [pc, #324]	@ (80042d4 <HAL_DMA_IRQHandler+0x1d8>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d01d      	beq.n	80041ce <HAL_DMA_IRQHandler+0xd2>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a50      	ldr	r2, [pc, #320]	@ (80042d8 <HAL_DMA_IRQHandler+0x1dc>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d018      	beq.n	80041ce <HAL_DMA_IRQHandler+0xd2>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a4e      	ldr	r2, [pc, #312]	@ (80042dc <HAL_DMA_IRQHandler+0x1e0>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d013      	beq.n	80041ce <HAL_DMA_IRQHandler+0xd2>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a4d      	ldr	r2, [pc, #308]	@ (80042e0 <HAL_DMA_IRQHandler+0x1e4>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d00e      	beq.n	80041ce <HAL_DMA_IRQHandler+0xd2>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a4b      	ldr	r2, [pc, #300]	@ (80042e4 <HAL_DMA_IRQHandler+0x1e8>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d009      	beq.n	80041ce <HAL_DMA_IRQHandler+0xd2>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a4a      	ldr	r2, [pc, #296]	@ (80042e8 <HAL_DMA_IRQHandler+0x1ec>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d004      	beq.n	80041ce <HAL_DMA_IRQHandler+0xd2>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a48      	ldr	r2, [pc, #288]	@ (80042ec <HAL_DMA_IRQHandler+0x1f0>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d101      	bne.n	80041d2 <HAL_DMA_IRQHandler+0xd6>
 80041ce:	2301      	movs	r3, #1
 80041d0:	e000      	b.n	80041d4 <HAL_DMA_IRQHandler+0xd8>
 80041d2:	2300      	movs	r3, #0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	f000 842b 	beq.w	8004a30 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041de:	f003 031f 	and.w	r3, r3, #31
 80041e2:	2208      	movs	r2, #8
 80041e4:	409a      	lsls	r2, r3
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	4013      	ands	r3, r2
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	f000 80a2 	beq.w	8004334 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a2e      	ldr	r2, [pc, #184]	@ (80042b0 <HAL_DMA_IRQHandler+0x1b4>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d04a      	beq.n	8004290 <HAL_DMA_IRQHandler+0x194>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a2d      	ldr	r2, [pc, #180]	@ (80042b4 <HAL_DMA_IRQHandler+0x1b8>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d045      	beq.n	8004290 <HAL_DMA_IRQHandler+0x194>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a2b      	ldr	r2, [pc, #172]	@ (80042b8 <HAL_DMA_IRQHandler+0x1bc>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d040      	beq.n	8004290 <HAL_DMA_IRQHandler+0x194>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a2a      	ldr	r2, [pc, #168]	@ (80042bc <HAL_DMA_IRQHandler+0x1c0>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d03b      	beq.n	8004290 <HAL_DMA_IRQHandler+0x194>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a28      	ldr	r2, [pc, #160]	@ (80042c0 <HAL_DMA_IRQHandler+0x1c4>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d036      	beq.n	8004290 <HAL_DMA_IRQHandler+0x194>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a27      	ldr	r2, [pc, #156]	@ (80042c4 <HAL_DMA_IRQHandler+0x1c8>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d031      	beq.n	8004290 <HAL_DMA_IRQHandler+0x194>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a25      	ldr	r2, [pc, #148]	@ (80042c8 <HAL_DMA_IRQHandler+0x1cc>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d02c      	beq.n	8004290 <HAL_DMA_IRQHandler+0x194>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a24      	ldr	r2, [pc, #144]	@ (80042cc <HAL_DMA_IRQHandler+0x1d0>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d027      	beq.n	8004290 <HAL_DMA_IRQHandler+0x194>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a22      	ldr	r2, [pc, #136]	@ (80042d0 <HAL_DMA_IRQHandler+0x1d4>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d022      	beq.n	8004290 <HAL_DMA_IRQHandler+0x194>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a21      	ldr	r2, [pc, #132]	@ (80042d4 <HAL_DMA_IRQHandler+0x1d8>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d01d      	beq.n	8004290 <HAL_DMA_IRQHandler+0x194>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a1f      	ldr	r2, [pc, #124]	@ (80042d8 <HAL_DMA_IRQHandler+0x1dc>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d018      	beq.n	8004290 <HAL_DMA_IRQHandler+0x194>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a1e      	ldr	r2, [pc, #120]	@ (80042dc <HAL_DMA_IRQHandler+0x1e0>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d013      	beq.n	8004290 <HAL_DMA_IRQHandler+0x194>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a1c      	ldr	r2, [pc, #112]	@ (80042e0 <HAL_DMA_IRQHandler+0x1e4>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d00e      	beq.n	8004290 <HAL_DMA_IRQHandler+0x194>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a1b      	ldr	r2, [pc, #108]	@ (80042e4 <HAL_DMA_IRQHandler+0x1e8>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d009      	beq.n	8004290 <HAL_DMA_IRQHandler+0x194>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a19      	ldr	r2, [pc, #100]	@ (80042e8 <HAL_DMA_IRQHandler+0x1ec>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d004      	beq.n	8004290 <HAL_DMA_IRQHandler+0x194>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a18      	ldr	r2, [pc, #96]	@ (80042ec <HAL_DMA_IRQHandler+0x1f0>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d12f      	bne.n	80042f0 <HAL_DMA_IRQHandler+0x1f4>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0304 	and.w	r3, r3, #4
 800429a:	2b00      	cmp	r3, #0
 800429c:	bf14      	ite	ne
 800429e:	2301      	movne	r3, #1
 80042a0:	2300      	moveq	r3, #0
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	e02e      	b.n	8004304 <HAL_DMA_IRQHandler+0x208>
 80042a6:	bf00      	nop
 80042a8:	24000000 	.word	0x24000000
 80042ac:	1b4e81b5 	.word	0x1b4e81b5
 80042b0:	40020010 	.word	0x40020010
 80042b4:	40020028 	.word	0x40020028
 80042b8:	40020040 	.word	0x40020040
 80042bc:	40020058 	.word	0x40020058
 80042c0:	40020070 	.word	0x40020070
 80042c4:	40020088 	.word	0x40020088
 80042c8:	400200a0 	.word	0x400200a0
 80042cc:	400200b8 	.word	0x400200b8
 80042d0:	40020410 	.word	0x40020410
 80042d4:	40020428 	.word	0x40020428
 80042d8:	40020440 	.word	0x40020440
 80042dc:	40020458 	.word	0x40020458
 80042e0:	40020470 	.word	0x40020470
 80042e4:	40020488 	.word	0x40020488
 80042e8:	400204a0 	.word	0x400204a0
 80042ec:	400204b8 	.word	0x400204b8
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0308 	and.w	r3, r3, #8
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	bf14      	ite	ne
 80042fe:	2301      	movne	r3, #1
 8004300:	2300      	moveq	r3, #0
 8004302:	b2db      	uxtb	r3, r3
 8004304:	2b00      	cmp	r3, #0
 8004306:	d015      	beq.n	8004334 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f022 0204 	bic.w	r2, r2, #4
 8004316:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800431c:	f003 031f 	and.w	r3, r3, #31
 8004320:	2208      	movs	r2, #8
 8004322:	409a      	lsls	r2, r3
 8004324:	6a3b      	ldr	r3, [r7, #32]
 8004326:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800432c:	f043 0201 	orr.w	r2, r3, #1
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004338:	f003 031f 	and.w	r3, r3, #31
 800433c:	69ba      	ldr	r2, [r7, #24]
 800433e:	fa22 f303 	lsr.w	r3, r2, r3
 8004342:	f003 0301 	and.w	r3, r3, #1
 8004346:	2b00      	cmp	r3, #0
 8004348:	d06e      	beq.n	8004428 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a69      	ldr	r2, [pc, #420]	@ (80044f4 <HAL_DMA_IRQHandler+0x3f8>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d04a      	beq.n	80043ea <HAL_DMA_IRQHandler+0x2ee>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a67      	ldr	r2, [pc, #412]	@ (80044f8 <HAL_DMA_IRQHandler+0x3fc>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d045      	beq.n	80043ea <HAL_DMA_IRQHandler+0x2ee>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a66      	ldr	r2, [pc, #408]	@ (80044fc <HAL_DMA_IRQHandler+0x400>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d040      	beq.n	80043ea <HAL_DMA_IRQHandler+0x2ee>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a64      	ldr	r2, [pc, #400]	@ (8004500 <HAL_DMA_IRQHandler+0x404>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d03b      	beq.n	80043ea <HAL_DMA_IRQHandler+0x2ee>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a63      	ldr	r2, [pc, #396]	@ (8004504 <HAL_DMA_IRQHandler+0x408>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d036      	beq.n	80043ea <HAL_DMA_IRQHandler+0x2ee>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a61      	ldr	r2, [pc, #388]	@ (8004508 <HAL_DMA_IRQHandler+0x40c>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d031      	beq.n	80043ea <HAL_DMA_IRQHandler+0x2ee>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a60      	ldr	r2, [pc, #384]	@ (800450c <HAL_DMA_IRQHandler+0x410>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d02c      	beq.n	80043ea <HAL_DMA_IRQHandler+0x2ee>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a5e      	ldr	r2, [pc, #376]	@ (8004510 <HAL_DMA_IRQHandler+0x414>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d027      	beq.n	80043ea <HAL_DMA_IRQHandler+0x2ee>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a5d      	ldr	r2, [pc, #372]	@ (8004514 <HAL_DMA_IRQHandler+0x418>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d022      	beq.n	80043ea <HAL_DMA_IRQHandler+0x2ee>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a5b      	ldr	r2, [pc, #364]	@ (8004518 <HAL_DMA_IRQHandler+0x41c>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d01d      	beq.n	80043ea <HAL_DMA_IRQHandler+0x2ee>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a5a      	ldr	r2, [pc, #360]	@ (800451c <HAL_DMA_IRQHandler+0x420>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d018      	beq.n	80043ea <HAL_DMA_IRQHandler+0x2ee>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a58      	ldr	r2, [pc, #352]	@ (8004520 <HAL_DMA_IRQHandler+0x424>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d013      	beq.n	80043ea <HAL_DMA_IRQHandler+0x2ee>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a57      	ldr	r2, [pc, #348]	@ (8004524 <HAL_DMA_IRQHandler+0x428>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d00e      	beq.n	80043ea <HAL_DMA_IRQHandler+0x2ee>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a55      	ldr	r2, [pc, #340]	@ (8004528 <HAL_DMA_IRQHandler+0x42c>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d009      	beq.n	80043ea <HAL_DMA_IRQHandler+0x2ee>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a54      	ldr	r2, [pc, #336]	@ (800452c <HAL_DMA_IRQHandler+0x430>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d004      	beq.n	80043ea <HAL_DMA_IRQHandler+0x2ee>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a52      	ldr	r2, [pc, #328]	@ (8004530 <HAL_DMA_IRQHandler+0x434>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d10a      	bne.n	8004400 <HAL_DMA_IRQHandler+0x304>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	695b      	ldr	r3, [r3, #20]
 80043f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	bf14      	ite	ne
 80043f8:	2301      	movne	r3, #1
 80043fa:	2300      	moveq	r3, #0
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	e003      	b.n	8004408 <HAL_DMA_IRQHandler+0x30c>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	2300      	movs	r3, #0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d00d      	beq.n	8004428 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004410:	f003 031f 	and.w	r3, r3, #31
 8004414:	2201      	movs	r2, #1
 8004416:	409a      	lsls	r2, r3
 8004418:	6a3b      	ldr	r3, [r7, #32]
 800441a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004420:	f043 0202 	orr.w	r2, r3, #2
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800442c:	f003 031f 	and.w	r3, r3, #31
 8004430:	2204      	movs	r2, #4
 8004432:	409a      	lsls	r2, r3
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	4013      	ands	r3, r2
 8004438:	2b00      	cmp	r3, #0
 800443a:	f000 808f 	beq.w	800455c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a2c      	ldr	r2, [pc, #176]	@ (80044f4 <HAL_DMA_IRQHandler+0x3f8>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d04a      	beq.n	80044de <HAL_DMA_IRQHandler+0x3e2>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a2a      	ldr	r2, [pc, #168]	@ (80044f8 <HAL_DMA_IRQHandler+0x3fc>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d045      	beq.n	80044de <HAL_DMA_IRQHandler+0x3e2>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a29      	ldr	r2, [pc, #164]	@ (80044fc <HAL_DMA_IRQHandler+0x400>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d040      	beq.n	80044de <HAL_DMA_IRQHandler+0x3e2>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a27      	ldr	r2, [pc, #156]	@ (8004500 <HAL_DMA_IRQHandler+0x404>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d03b      	beq.n	80044de <HAL_DMA_IRQHandler+0x3e2>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a26      	ldr	r2, [pc, #152]	@ (8004504 <HAL_DMA_IRQHandler+0x408>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d036      	beq.n	80044de <HAL_DMA_IRQHandler+0x3e2>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a24      	ldr	r2, [pc, #144]	@ (8004508 <HAL_DMA_IRQHandler+0x40c>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d031      	beq.n	80044de <HAL_DMA_IRQHandler+0x3e2>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a23      	ldr	r2, [pc, #140]	@ (800450c <HAL_DMA_IRQHandler+0x410>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d02c      	beq.n	80044de <HAL_DMA_IRQHandler+0x3e2>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a21      	ldr	r2, [pc, #132]	@ (8004510 <HAL_DMA_IRQHandler+0x414>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d027      	beq.n	80044de <HAL_DMA_IRQHandler+0x3e2>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a20      	ldr	r2, [pc, #128]	@ (8004514 <HAL_DMA_IRQHandler+0x418>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d022      	beq.n	80044de <HAL_DMA_IRQHandler+0x3e2>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a1e      	ldr	r2, [pc, #120]	@ (8004518 <HAL_DMA_IRQHandler+0x41c>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d01d      	beq.n	80044de <HAL_DMA_IRQHandler+0x3e2>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a1d      	ldr	r2, [pc, #116]	@ (800451c <HAL_DMA_IRQHandler+0x420>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d018      	beq.n	80044de <HAL_DMA_IRQHandler+0x3e2>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a1b      	ldr	r2, [pc, #108]	@ (8004520 <HAL_DMA_IRQHandler+0x424>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d013      	beq.n	80044de <HAL_DMA_IRQHandler+0x3e2>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a1a      	ldr	r2, [pc, #104]	@ (8004524 <HAL_DMA_IRQHandler+0x428>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d00e      	beq.n	80044de <HAL_DMA_IRQHandler+0x3e2>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a18      	ldr	r2, [pc, #96]	@ (8004528 <HAL_DMA_IRQHandler+0x42c>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d009      	beq.n	80044de <HAL_DMA_IRQHandler+0x3e2>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a17      	ldr	r2, [pc, #92]	@ (800452c <HAL_DMA_IRQHandler+0x430>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d004      	beq.n	80044de <HAL_DMA_IRQHandler+0x3e2>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a15      	ldr	r2, [pc, #84]	@ (8004530 <HAL_DMA_IRQHandler+0x434>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d12a      	bne.n	8004534 <HAL_DMA_IRQHandler+0x438>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 0302 	and.w	r3, r3, #2
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	bf14      	ite	ne
 80044ec:	2301      	movne	r3, #1
 80044ee:	2300      	moveq	r3, #0
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	e023      	b.n	800453c <HAL_DMA_IRQHandler+0x440>
 80044f4:	40020010 	.word	0x40020010
 80044f8:	40020028 	.word	0x40020028
 80044fc:	40020040 	.word	0x40020040
 8004500:	40020058 	.word	0x40020058
 8004504:	40020070 	.word	0x40020070
 8004508:	40020088 	.word	0x40020088
 800450c:	400200a0 	.word	0x400200a0
 8004510:	400200b8 	.word	0x400200b8
 8004514:	40020410 	.word	0x40020410
 8004518:	40020428 	.word	0x40020428
 800451c:	40020440 	.word	0x40020440
 8004520:	40020458 	.word	0x40020458
 8004524:	40020470 	.word	0x40020470
 8004528:	40020488 	.word	0x40020488
 800452c:	400204a0 	.word	0x400204a0
 8004530:	400204b8 	.word	0x400204b8
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2300      	movs	r3, #0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d00d      	beq.n	800455c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004544:	f003 031f 	and.w	r3, r3, #31
 8004548:	2204      	movs	r2, #4
 800454a:	409a      	lsls	r2, r3
 800454c:	6a3b      	ldr	r3, [r7, #32]
 800454e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004554:	f043 0204 	orr.w	r2, r3, #4
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004560:	f003 031f 	and.w	r3, r3, #31
 8004564:	2210      	movs	r2, #16
 8004566:	409a      	lsls	r2, r3
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	4013      	ands	r3, r2
 800456c:	2b00      	cmp	r3, #0
 800456e:	f000 80a6 	beq.w	80046be <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a85      	ldr	r2, [pc, #532]	@ (800478c <HAL_DMA_IRQHandler+0x690>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d04a      	beq.n	8004612 <HAL_DMA_IRQHandler+0x516>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a83      	ldr	r2, [pc, #524]	@ (8004790 <HAL_DMA_IRQHandler+0x694>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d045      	beq.n	8004612 <HAL_DMA_IRQHandler+0x516>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a82      	ldr	r2, [pc, #520]	@ (8004794 <HAL_DMA_IRQHandler+0x698>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d040      	beq.n	8004612 <HAL_DMA_IRQHandler+0x516>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a80      	ldr	r2, [pc, #512]	@ (8004798 <HAL_DMA_IRQHandler+0x69c>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d03b      	beq.n	8004612 <HAL_DMA_IRQHandler+0x516>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a7f      	ldr	r2, [pc, #508]	@ (800479c <HAL_DMA_IRQHandler+0x6a0>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d036      	beq.n	8004612 <HAL_DMA_IRQHandler+0x516>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a7d      	ldr	r2, [pc, #500]	@ (80047a0 <HAL_DMA_IRQHandler+0x6a4>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d031      	beq.n	8004612 <HAL_DMA_IRQHandler+0x516>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a7c      	ldr	r2, [pc, #496]	@ (80047a4 <HAL_DMA_IRQHandler+0x6a8>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d02c      	beq.n	8004612 <HAL_DMA_IRQHandler+0x516>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a7a      	ldr	r2, [pc, #488]	@ (80047a8 <HAL_DMA_IRQHandler+0x6ac>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d027      	beq.n	8004612 <HAL_DMA_IRQHandler+0x516>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a79      	ldr	r2, [pc, #484]	@ (80047ac <HAL_DMA_IRQHandler+0x6b0>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d022      	beq.n	8004612 <HAL_DMA_IRQHandler+0x516>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a77      	ldr	r2, [pc, #476]	@ (80047b0 <HAL_DMA_IRQHandler+0x6b4>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d01d      	beq.n	8004612 <HAL_DMA_IRQHandler+0x516>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a76      	ldr	r2, [pc, #472]	@ (80047b4 <HAL_DMA_IRQHandler+0x6b8>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d018      	beq.n	8004612 <HAL_DMA_IRQHandler+0x516>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a74      	ldr	r2, [pc, #464]	@ (80047b8 <HAL_DMA_IRQHandler+0x6bc>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d013      	beq.n	8004612 <HAL_DMA_IRQHandler+0x516>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a73      	ldr	r2, [pc, #460]	@ (80047bc <HAL_DMA_IRQHandler+0x6c0>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d00e      	beq.n	8004612 <HAL_DMA_IRQHandler+0x516>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a71      	ldr	r2, [pc, #452]	@ (80047c0 <HAL_DMA_IRQHandler+0x6c4>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d009      	beq.n	8004612 <HAL_DMA_IRQHandler+0x516>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a70      	ldr	r2, [pc, #448]	@ (80047c4 <HAL_DMA_IRQHandler+0x6c8>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d004      	beq.n	8004612 <HAL_DMA_IRQHandler+0x516>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a6e      	ldr	r2, [pc, #440]	@ (80047c8 <HAL_DMA_IRQHandler+0x6cc>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d10a      	bne.n	8004628 <HAL_DMA_IRQHandler+0x52c>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 0308 	and.w	r3, r3, #8
 800461c:	2b00      	cmp	r3, #0
 800461e:	bf14      	ite	ne
 8004620:	2301      	movne	r3, #1
 8004622:	2300      	moveq	r3, #0
 8004624:	b2db      	uxtb	r3, r3
 8004626:	e009      	b.n	800463c <HAL_DMA_IRQHandler+0x540>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0304 	and.w	r3, r3, #4
 8004632:	2b00      	cmp	r3, #0
 8004634:	bf14      	ite	ne
 8004636:	2301      	movne	r3, #1
 8004638:	2300      	moveq	r3, #0
 800463a:	b2db      	uxtb	r3, r3
 800463c:	2b00      	cmp	r3, #0
 800463e:	d03e      	beq.n	80046be <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004644:	f003 031f 	and.w	r3, r3, #31
 8004648:	2210      	movs	r2, #16
 800464a:	409a      	lsls	r2, r3
 800464c:	6a3b      	ldr	r3, [r7, #32]
 800464e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d018      	beq.n	8004690 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d108      	bne.n	800467e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004670:	2b00      	cmp	r3, #0
 8004672:	d024      	beq.n	80046be <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	4798      	blx	r3
 800467c:	e01f      	b.n	80046be <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004682:	2b00      	cmp	r3, #0
 8004684:	d01b      	beq.n	80046be <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	4798      	blx	r3
 800468e:	e016      	b.n	80046be <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800469a:	2b00      	cmp	r3, #0
 800469c:	d107      	bne.n	80046ae <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f022 0208 	bic.w	r2, r2, #8
 80046ac:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d003      	beq.n	80046be <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046c2:	f003 031f 	and.w	r3, r3, #31
 80046c6:	2220      	movs	r2, #32
 80046c8:	409a      	lsls	r2, r3
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	4013      	ands	r3, r2
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	f000 8110 	beq.w	80048f4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a2c      	ldr	r2, [pc, #176]	@ (800478c <HAL_DMA_IRQHandler+0x690>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d04a      	beq.n	8004774 <HAL_DMA_IRQHandler+0x678>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a2b      	ldr	r2, [pc, #172]	@ (8004790 <HAL_DMA_IRQHandler+0x694>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d045      	beq.n	8004774 <HAL_DMA_IRQHandler+0x678>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a29      	ldr	r2, [pc, #164]	@ (8004794 <HAL_DMA_IRQHandler+0x698>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d040      	beq.n	8004774 <HAL_DMA_IRQHandler+0x678>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a28      	ldr	r2, [pc, #160]	@ (8004798 <HAL_DMA_IRQHandler+0x69c>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d03b      	beq.n	8004774 <HAL_DMA_IRQHandler+0x678>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a26      	ldr	r2, [pc, #152]	@ (800479c <HAL_DMA_IRQHandler+0x6a0>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d036      	beq.n	8004774 <HAL_DMA_IRQHandler+0x678>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a25      	ldr	r2, [pc, #148]	@ (80047a0 <HAL_DMA_IRQHandler+0x6a4>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d031      	beq.n	8004774 <HAL_DMA_IRQHandler+0x678>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a23      	ldr	r2, [pc, #140]	@ (80047a4 <HAL_DMA_IRQHandler+0x6a8>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d02c      	beq.n	8004774 <HAL_DMA_IRQHandler+0x678>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a22      	ldr	r2, [pc, #136]	@ (80047a8 <HAL_DMA_IRQHandler+0x6ac>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d027      	beq.n	8004774 <HAL_DMA_IRQHandler+0x678>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a20      	ldr	r2, [pc, #128]	@ (80047ac <HAL_DMA_IRQHandler+0x6b0>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d022      	beq.n	8004774 <HAL_DMA_IRQHandler+0x678>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a1f      	ldr	r2, [pc, #124]	@ (80047b0 <HAL_DMA_IRQHandler+0x6b4>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d01d      	beq.n	8004774 <HAL_DMA_IRQHandler+0x678>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a1d      	ldr	r2, [pc, #116]	@ (80047b4 <HAL_DMA_IRQHandler+0x6b8>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d018      	beq.n	8004774 <HAL_DMA_IRQHandler+0x678>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a1c      	ldr	r2, [pc, #112]	@ (80047b8 <HAL_DMA_IRQHandler+0x6bc>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d013      	beq.n	8004774 <HAL_DMA_IRQHandler+0x678>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a1a      	ldr	r2, [pc, #104]	@ (80047bc <HAL_DMA_IRQHandler+0x6c0>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d00e      	beq.n	8004774 <HAL_DMA_IRQHandler+0x678>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a19      	ldr	r2, [pc, #100]	@ (80047c0 <HAL_DMA_IRQHandler+0x6c4>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d009      	beq.n	8004774 <HAL_DMA_IRQHandler+0x678>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a17      	ldr	r2, [pc, #92]	@ (80047c4 <HAL_DMA_IRQHandler+0x6c8>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d004      	beq.n	8004774 <HAL_DMA_IRQHandler+0x678>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a16      	ldr	r2, [pc, #88]	@ (80047c8 <HAL_DMA_IRQHandler+0x6cc>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d12b      	bne.n	80047cc <HAL_DMA_IRQHandler+0x6d0>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0310 	and.w	r3, r3, #16
 800477e:	2b00      	cmp	r3, #0
 8004780:	bf14      	ite	ne
 8004782:	2301      	movne	r3, #1
 8004784:	2300      	moveq	r3, #0
 8004786:	b2db      	uxtb	r3, r3
 8004788:	e02a      	b.n	80047e0 <HAL_DMA_IRQHandler+0x6e4>
 800478a:	bf00      	nop
 800478c:	40020010 	.word	0x40020010
 8004790:	40020028 	.word	0x40020028
 8004794:	40020040 	.word	0x40020040
 8004798:	40020058 	.word	0x40020058
 800479c:	40020070 	.word	0x40020070
 80047a0:	40020088 	.word	0x40020088
 80047a4:	400200a0 	.word	0x400200a0
 80047a8:	400200b8 	.word	0x400200b8
 80047ac:	40020410 	.word	0x40020410
 80047b0:	40020428 	.word	0x40020428
 80047b4:	40020440 	.word	0x40020440
 80047b8:	40020458 	.word	0x40020458
 80047bc:	40020470 	.word	0x40020470
 80047c0:	40020488 	.word	0x40020488
 80047c4:	400204a0 	.word	0x400204a0
 80047c8:	400204b8 	.word	0x400204b8
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0302 	and.w	r3, r3, #2
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	bf14      	ite	ne
 80047da:	2301      	movne	r3, #1
 80047dc:	2300      	moveq	r3, #0
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	f000 8087 	beq.w	80048f4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047ea:	f003 031f 	and.w	r3, r3, #31
 80047ee:	2220      	movs	r2, #32
 80047f0:	409a      	lsls	r2, r3
 80047f2:	6a3b      	ldr	r3, [r7, #32]
 80047f4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	2b04      	cmp	r3, #4
 8004800:	d139      	bne.n	8004876 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f022 0216 	bic.w	r2, r2, #22
 8004810:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	695a      	ldr	r2, [r3, #20]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004820:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004826:	2b00      	cmp	r3, #0
 8004828:	d103      	bne.n	8004832 <HAL_DMA_IRQHandler+0x736>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800482e:	2b00      	cmp	r3, #0
 8004830:	d007      	beq.n	8004842 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f022 0208 	bic.w	r2, r2, #8
 8004840:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004846:	f003 031f 	and.w	r3, r3, #31
 800484a:	223f      	movs	r2, #63	@ 0x3f
 800484c:	409a      	lsls	r2, r3
 800484e:	6a3b      	ldr	r3, [r7, #32]
 8004850:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2201      	movs	r2, #1
 8004856:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004866:	2b00      	cmp	r3, #0
 8004868:	f000 834a 	beq.w	8004f00 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	4798      	blx	r3
          }
          return;
 8004874:	e344      	b.n	8004f00 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004880:	2b00      	cmp	r3, #0
 8004882:	d018      	beq.n	80048b6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800488e:	2b00      	cmp	r3, #0
 8004890:	d108      	bne.n	80048a4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004896:	2b00      	cmp	r3, #0
 8004898:	d02c      	beq.n	80048f4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	4798      	blx	r3
 80048a2:	e027      	b.n	80048f4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d023      	beq.n	80048f4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	4798      	blx	r3
 80048b4:	e01e      	b.n	80048f4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d10f      	bne.n	80048e4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f022 0210 	bic.w	r2, r2, #16
 80048d2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d003      	beq.n	80048f4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	f000 8306 	beq.w	8004f0a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004902:	f003 0301 	and.w	r3, r3, #1
 8004906:	2b00      	cmp	r3, #0
 8004908:	f000 8088 	beq.w	8004a1c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2204      	movs	r2, #4
 8004910:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a7a      	ldr	r2, [pc, #488]	@ (8004b04 <HAL_DMA_IRQHandler+0xa08>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d04a      	beq.n	80049b4 <HAL_DMA_IRQHandler+0x8b8>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a79      	ldr	r2, [pc, #484]	@ (8004b08 <HAL_DMA_IRQHandler+0xa0c>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d045      	beq.n	80049b4 <HAL_DMA_IRQHandler+0x8b8>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a77      	ldr	r2, [pc, #476]	@ (8004b0c <HAL_DMA_IRQHandler+0xa10>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d040      	beq.n	80049b4 <HAL_DMA_IRQHandler+0x8b8>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a76      	ldr	r2, [pc, #472]	@ (8004b10 <HAL_DMA_IRQHandler+0xa14>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d03b      	beq.n	80049b4 <HAL_DMA_IRQHandler+0x8b8>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a74      	ldr	r2, [pc, #464]	@ (8004b14 <HAL_DMA_IRQHandler+0xa18>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d036      	beq.n	80049b4 <HAL_DMA_IRQHandler+0x8b8>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a73      	ldr	r2, [pc, #460]	@ (8004b18 <HAL_DMA_IRQHandler+0xa1c>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d031      	beq.n	80049b4 <HAL_DMA_IRQHandler+0x8b8>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a71      	ldr	r2, [pc, #452]	@ (8004b1c <HAL_DMA_IRQHandler+0xa20>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d02c      	beq.n	80049b4 <HAL_DMA_IRQHandler+0x8b8>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a70      	ldr	r2, [pc, #448]	@ (8004b20 <HAL_DMA_IRQHandler+0xa24>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d027      	beq.n	80049b4 <HAL_DMA_IRQHandler+0x8b8>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a6e      	ldr	r2, [pc, #440]	@ (8004b24 <HAL_DMA_IRQHandler+0xa28>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d022      	beq.n	80049b4 <HAL_DMA_IRQHandler+0x8b8>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a6d      	ldr	r2, [pc, #436]	@ (8004b28 <HAL_DMA_IRQHandler+0xa2c>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d01d      	beq.n	80049b4 <HAL_DMA_IRQHandler+0x8b8>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a6b      	ldr	r2, [pc, #428]	@ (8004b2c <HAL_DMA_IRQHandler+0xa30>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d018      	beq.n	80049b4 <HAL_DMA_IRQHandler+0x8b8>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a6a      	ldr	r2, [pc, #424]	@ (8004b30 <HAL_DMA_IRQHandler+0xa34>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d013      	beq.n	80049b4 <HAL_DMA_IRQHandler+0x8b8>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a68      	ldr	r2, [pc, #416]	@ (8004b34 <HAL_DMA_IRQHandler+0xa38>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d00e      	beq.n	80049b4 <HAL_DMA_IRQHandler+0x8b8>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a67      	ldr	r2, [pc, #412]	@ (8004b38 <HAL_DMA_IRQHandler+0xa3c>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d009      	beq.n	80049b4 <HAL_DMA_IRQHandler+0x8b8>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a65      	ldr	r2, [pc, #404]	@ (8004b3c <HAL_DMA_IRQHandler+0xa40>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d004      	beq.n	80049b4 <HAL_DMA_IRQHandler+0x8b8>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a64      	ldr	r2, [pc, #400]	@ (8004b40 <HAL_DMA_IRQHandler+0xa44>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d108      	bne.n	80049c6 <HAL_DMA_IRQHandler+0x8ca>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f022 0201 	bic.w	r2, r2, #1
 80049c2:	601a      	str	r2, [r3, #0]
 80049c4:	e007      	b.n	80049d6 <HAL_DMA_IRQHandler+0x8da>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f022 0201 	bic.w	r2, r2, #1
 80049d4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	3301      	adds	r3, #1
 80049da:	60fb      	str	r3, [r7, #12]
 80049dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049de:	429a      	cmp	r2, r3
 80049e0:	d307      	bcc.n	80049f2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0301 	and.w	r3, r3, #1
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d1f2      	bne.n	80049d6 <HAL_DMA_IRQHandler+0x8da>
 80049f0:	e000      	b.n	80049f4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80049f2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0301 	and.w	r3, r3, #1
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d004      	beq.n	8004a0c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2203      	movs	r2, #3
 8004a06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8004a0a:	e003      	b.n	8004a14 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	f000 8272 	beq.w	8004f0a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	4798      	blx	r3
 8004a2e:	e26c      	b.n	8004f0a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a43      	ldr	r2, [pc, #268]	@ (8004b44 <HAL_DMA_IRQHandler+0xa48>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d022      	beq.n	8004a80 <HAL_DMA_IRQHandler+0x984>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a42      	ldr	r2, [pc, #264]	@ (8004b48 <HAL_DMA_IRQHandler+0xa4c>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d01d      	beq.n	8004a80 <HAL_DMA_IRQHandler+0x984>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a40      	ldr	r2, [pc, #256]	@ (8004b4c <HAL_DMA_IRQHandler+0xa50>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d018      	beq.n	8004a80 <HAL_DMA_IRQHandler+0x984>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a3f      	ldr	r2, [pc, #252]	@ (8004b50 <HAL_DMA_IRQHandler+0xa54>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d013      	beq.n	8004a80 <HAL_DMA_IRQHandler+0x984>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a3d      	ldr	r2, [pc, #244]	@ (8004b54 <HAL_DMA_IRQHandler+0xa58>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d00e      	beq.n	8004a80 <HAL_DMA_IRQHandler+0x984>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a3c      	ldr	r2, [pc, #240]	@ (8004b58 <HAL_DMA_IRQHandler+0xa5c>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d009      	beq.n	8004a80 <HAL_DMA_IRQHandler+0x984>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a3a      	ldr	r2, [pc, #232]	@ (8004b5c <HAL_DMA_IRQHandler+0xa60>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d004      	beq.n	8004a80 <HAL_DMA_IRQHandler+0x984>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a39      	ldr	r2, [pc, #228]	@ (8004b60 <HAL_DMA_IRQHandler+0xa64>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d101      	bne.n	8004a84 <HAL_DMA_IRQHandler+0x988>
 8004a80:	2301      	movs	r3, #1
 8004a82:	e000      	b.n	8004a86 <HAL_DMA_IRQHandler+0x98a>
 8004a84:	2300      	movs	r3, #0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	f000 823f 	beq.w	8004f0a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a98:	f003 031f 	and.w	r3, r3, #31
 8004a9c:	2204      	movs	r2, #4
 8004a9e:	409a      	lsls	r2, r3
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	f000 80cd 	beq.w	8004c44 <HAL_DMA_IRQHandler+0xb48>
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	f003 0304 	and.w	r3, r3, #4
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	f000 80c7 	beq.w	8004c44 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004aba:	f003 031f 	and.w	r3, r3, #31
 8004abe:	2204      	movs	r2, #4
 8004ac0:	409a      	lsls	r2, r3
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d049      	beq.n	8004b64 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d109      	bne.n	8004aee <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	f000 8210 	beq.w	8004f04 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004aec:	e20a      	b.n	8004f04 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	f000 8206 	beq.w	8004f04 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b00:	e200      	b.n	8004f04 <HAL_DMA_IRQHandler+0xe08>
 8004b02:	bf00      	nop
 8004b04:	40020010 	.word	0x40020010
 8004b08:	40020028 	.word	0x40020028
 8004b0c:	40020040 	.word	0x40020040
 8004b10:	40020058 	.word	0x40020058
 8004b14:	40020070 	.word	0x40020070
 8004b18:	40020088 	.word	0x40020088
 8004b1c:	400200a0 	.word	0x400200a0
 8004b20:	400200b8 	.word	0x400200b8
 8004b24:	40020410 	.word	0x40020410
 8004b28:	40020428 	.word	0x40020428
 8004b2c:	40020440 	.word	0x40020440
 8004b30:	40020458 	.word	0x40020458
 8004b34:	40020470 	.word	0x40020470
 8004b38:	40020488 	.word	0x40020488
 8004b3c:	400204a0 	.word	0x400204a0
 8004b40:	400204b8 	.word	0x400204b8
 8004b44:	58025408 	.word	0x58025408
 8004b48:	5802541c 	.word	0x5802541c
 8004b4c:	58025430 	.word	0x58025430
 8004b50:	58025444 	.word	0x58025444
 8004b54:	58025458 	.word	0x58025458
 8004b58:	5802546c 	.word	0x5802546c
 8004b5c:	58025480 	.word	0x58025480
 8004b60:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	f003 0320 	and.w	r3, r3, #32
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d160      	bne.n	8004c30 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a7f      	ldr	r2, [pc, #508]	@ (8004d70 <HAL_DMA_IRQHandler+0xc74>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d04a      	beq.n	8004c0e <HAL_DMA_IRQHandler+0xb12>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a7d      	ldr	r2, [pc, #500]	@ (8004d74 <HAL_DMA_IRQHandler+0xc78>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d045      	beq.n	8004c0e <HAL_DMA_IRQHandler+0xb12>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a7c      	ldr	r2, [pc, #496]	@ (8004d78 <HAL_DMA_IRQHandler+0xc7c>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d040      	beq.n	8004c0e <HAL_DMA_IRQHandler+0xb12>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a7a      	ldr	r2, [pc, #488]	@ (8004d7c <HAL_DMA_IRQHandler+0xc80>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d03b      	beq.n	8004c0e <HAL_DMA_IRQHandler+0xb12>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a79      	ldr	r2, [pc, #484]	@ (8004d80 <HAL_DMA_IRQHandler+0xc84>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d036      	beq.n	8004c0e <HAL_DMA_IRQHandler+0xb12>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a77      	ldr	r2, [pc, #476]	@ (8004d84 <HAL_DMA_IRQHandler+0xc88>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d031      	beq.n	8004c0e <HAL_DMA_IRQHandler+0xb12>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a76      	ldr	r2, [pc, #472]	@ (8004d88 <HAL_DMA_IRQHandler+0xc8c>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d02c      	beq.n	8004c0e <HAL_DMA_IRQHandler+0xb12>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a74      	ldr	r2, [pc, #464]	@ (8004d8c <HAL_DMA_IRQHandler+0xc90>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d027      	beq.n	8004c0e <HAL_DMA_IRQHandler+0xb12>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a73      	ldr	r2, [pc, #460]	@ (8004d90 <HAL_DMA_IRQHandler+0xc94>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d022      	beq.n	8004c0e <HAL_DMA_IRQHandler+0xb12>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a71      	ldr	r2, [pc, #452]	@ (8004d94 <HAL_DMA_IRQHandler+0xc98>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d01d      	beq.n	8004c0e <HAL_DMA_IRQHandler+0xb12>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a70      	ldr	r2, [pc, #448]	@ (8004d98 <HAL_DMA_IRQHandler+0xc9c>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d018      	beq.n	8004c0e <HAL_DMA_IRQHandler+0xb12>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a6e      	ldr	r2, [pc, #440]	@ (8004d9c <HAL_DMA_IRQHandler+0xca0>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d013      	beq.n	8004c0e <HAL_DMA_IRQHandler+0xb12>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a6d      	ldr	r2, [pc, #436]	@ (8004da0 <HAL_DMA_IRQHandler+0xca4>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d00e      	beq.n	8004c0e <HAL_DMA_IRQHandler+0xb12>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a6b      	ldr	r2, [pc, #428]	@ (8004da4 <HAL_DMA_IRQHandler+0xca8>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d009      	beq.n	8004c0e <HAL_DMA_IRQHandler+0xb12>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a6a      	ldr	r2, [pc, #424]	@ (8004da8 <HAL_DMA_IRQHandler+0xcac>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d004      	beq.n	8004c0e <HAL_DMA_IRQHandler+0xb12>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a68      	ldr	r2, [pc, #416]	@ (8004dac <HAL_DMA_IRQHandler+0xcb0>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d108      	bne.n	8004c20 <HAL_DMA_IRQHandler+0xb24>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f022 0208 	bic.w	r2, r2, #8
 8004c1c:	601a      	str	r2, [r3, #0]
 8004c1e:	e007      	b.n	8004c30 <HAL_DMA_IRQHandler+0xb34>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f022 0204 	bic.w	r2, r2, #4
 8004c2e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	f000 8165 	beq.w	8004f04 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c42:	e15f      	b.n	8004f04 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c48:	f003 031f 	and.w	r3, r3, #31
 8004c4c:	2202      	movs	r2, #2
 8004c4e:	409a      	lsls	r2, r3
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	4013      	ands	r3, r2
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	f000 80c5 	beq.w	8004de4 <HAL_DMA_IRQHandler+0xce8>
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	f003 0302 	and.w	r3, r3, #2
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	f000 80bf 	beq.w	8004de4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c6a:	f003 031f 	and.w	r3, r3, #31
 8004c6e:	2202      	movs	r2, #2
 8004c70:	409a      	lsls	r2, r3
 8004c72:	69fb      	ldr	r3, [r7, #28]
 8004c74:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d018      	beq.n	8004cb2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d109      	bne.n	8004c9e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	f000 813a 	beq.w	8004f08 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c9c:	e134      	b.n	8004f08 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	f000 8130 	beq.w	8004f08 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004cb0:	e12a      	b.n	8004f08 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	f003 0320 	and.w	r3, r3, #32
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	f040 8089 	bne.w	8004dd0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a2b      	ldr	r2, [pc, #172]	@ (8004d70 <HAL_DMA_IRQHandler+0xc74>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d04a      	beq.n	8004d5e <HAL_DMA_IRQHandler+0xc62>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a29      	ldr	r2, [pc, #164]	@ (8004d74 <HAL_DMA_IRQHandler+0xc78>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d045      	beq.n	8004d5e <HAL_DMA_IRQHandler+0xc62>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a28      	ldr	r2, [pc, #160]	@ (8004d78 <HAL_DMA_IRQHandler+0xc7c>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d040      	beq.n	8004d5e <HAL_DMA_IRQHandler+0xc62>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a26      	ldr	r2, [pc, #152]	@ (8004d7c <HAL_DMA_IRQHandler+0xc80>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d03b      	beq.n	8004d5e <HAL_DMA_IRQHandler+0xc62>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a25      	ldr	r2, [pc, #148]	@ (8004d80 <HAL_DMA_IRQHandler+0xc84>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d036      	beq.n	8004d5e <HAL_DMA_IRQHandler+0xc62>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a23      	ldr	r2, [pc, #140]	@ (8004d84 <HAL_DMA_IRQHandler+0xc88>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d031      	beq.n	8004d5e <HAL_DMA_IRQHandler+0xc62>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a22      	ldr	r2, [pc, #136]	@ (8004d88 <HAL_DMA_IRQHandler+0xc8c>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d02c      	beq.n	8004d5e <HAL_DMA_IRQHandler+0xc62>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a20      	ldr	r2, [pc, #128]	@ (8004d8c <HAL_DMA_IRQHandler+0xc90>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d027      	beq.n	8004d5e <HAL_DMA_IRQHandler+0xc62>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a1f      	ldr	r2, [pc, #124]	@ (8004d90 <HAL_DMA_IRQHandler+0xc94>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d022      	beq.n	8004d5e <HAL_DMA_IRQHandler+0xc62>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a1d      	ldr	r2, [pc, #116]	@ (8004d94 <HAL_DMA_IRQHandler+0xc98>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d01d      	beq.n	8004d5e <HAL_DMA_IRQHandler+0xc62>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a1c      	ldr	r2, [pc, #112]	@ (8004d98 <HAL_DMA_IRQHandler+0xc9c>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d018      	beq.n	8004d5e <HAL_DMA_IRQHandler+0xc62>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a1a      	ldr	r2, [pc, #104]	@ (8004d9c <HAL_DMA_IRQHandler+0xca0>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d013      	beq.n	8004d5e <HAL_DMA_IRQHandler+0xc62>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a19      	ldr	r2, [pc, #100]	@ (8004da0 <HAL_DMA_IRQHandler+0xca4>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d00e      	beq.n	8004d5e <HAL_DMA_IRQHandler+0xc62>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a17      	ldr	r2, [pc, #92]	@ (8004da4 <HAL_DMA_IRQHandler+0xca8>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d009      	beq.n	8004d5e <HAL_DMA_IRQHandler+0xc62>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a16      	ldr	r2, [pc, #88]	@ (8004da8 <HAL_DMA_IRQHandler+0xcac>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d004      	beq.n	8004d5e <HAL_DMA_IRQHandler+0xc62>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a14      	ldr	r2, [pc, #80]	@ (8004dac <HAL_DMA_IRQHandler+0xcb0>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d128      	bne.n	8004db0 <HAL_DMA_IRQHandler+0xcb4>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f022 0214 	bic.w	r2, r2, #20
 8004d6c:	601a      	str	r2, [r3, #0]
 8004d6e:	e027      	b.n	8004dc0 <HAL_DMA_IRQHandler+0xcc4>
 8004d70:	40020010 	.word	0x40020010
 8004d74:	40020028 	.word	0x40020028
 8004d78:	40020040 	.word	0x40020040
 8004d7c:	40020058 	.word	0x40020058
 8004d80:	40020070 	.word	0x40020070
 8004d84:	40020088 	.word	0x40020088
 8004d88:	400200a0 	.word	0x400200a0
 8004d8c:	400200b8 	.word	0x400200b8
 8004d90:	40020410 	.word	0x40020410
 8004d94:	40020428 	.word	0x40020428
 8004d98:	40020440 	.word	0x40020440
 8004d9c:	40020458 	.word	0x40020458
 8004da0:	40020470 	.word	0x40020470
 8004da4:	40020488 	.word	0x40020488
 8004da8:	400204a0 	.word	0x400204a0
 8004dac:	400204b8 	.word	0x400204b8
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f022 020a 	bic.w	r2, r2, #10
 8004dbe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	f000 8097 	beq.w	8004f08 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004de2:	e091      	b.n	8004f08 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004de8:	f003 031f 	and.w	r3, r3, #31
 8004dec:	2208      	movs	r2, #8
 8004dee:	409a      	lsls	r2, r3
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	4013      	ands	r3, r2
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	f000 8088 	beq.w	8004f0a <HAL_DMA_IRQHandler+0xe0e>
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	f003 0308 	and.w	r3, r3, #8
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	f000 8082 	beq.w	8004f0a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a41      	ldr	r2, [pc, #260]	@ (8004f10 <HAL_DMA_IRQHandler+0xe14>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d04a      	beq.n	8004ea6 <HAL_DMA_IRQHandler+0xdaa>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a3f      	ldr	r2, [pc, #252]	@ (8004f14 <HAL_DMA_IRQHandler+0xe18>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d045      	beq.n	8004ea6 <HAL_DMA_IRQHandler+0xdaa>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a3e      	ldr	r2, [pc, #248]	@ (8004f18 <HAL_DMA_IRQHandler+0xe1c>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d040      	beq.n	8004ea6 <HAL_DMA_IRQHandler+0xdaa>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a3c      	ldr	r2, [pc, #240]	@ (8004f1c <HAL_DMA_IRQHandler+0xe20>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d03b      	beq.n	8004ea6 <HAL_DMA_IRQHandler+0xdaa>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a3b      	ldr	r2, [pc, #236]	@ (8004f20 <HAL_DMA_IRQHandler+0xe24>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d036      	beq.n	8004ea6 <HAL_DMA_IRQHandler+0xdaa>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a39      	ldr	r2, [pc, #228]	@ (8004f24 <HAL_DMA_IRQHandler+0xe28>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d031      	beq.n	8004ea6 <HAL_DMA_IRQHandler+0xdaa>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a38      	ldr	r2, [pc, #224]	@ (8004f28 <HAL_DMA_IRQHandler+0xe2c>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d02c      	beq.n	8004ea6 <HAL_DMA_IRQHandler+0xdaa>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a36      	ldr	r2, [pc, #216]	@ (8004f2c <HAL_DMA_IRQHandler+0xe30>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d027      	beq.n	8004ea6 <HAL_DMA_IRQHandler+0xdaa>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a35      	ldr	r2, [pc, #212]	@ (8004f30 <HAL_DMA_IRQHandler+0xe34>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d022      	beq.n	8004ea6 <HAL_DMA_IRQHandler+0xdaa>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a33      	ldr	r2, [pc, #204]	@ (8004f34 <HAL_DMA_IRQHandler+0xe38>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d01d      	beq.n	8004ea6 <HAL_DMA_IRQHandler+0xdaa>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a32      	ldr	r2, [pc, #200]	@ (8004f38 <HAL_DMA_IRQHandler+0xe3c>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d018      	beq.n	8004ea6 <HAL_DMA_IRQHandler+0xdaa>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a30      	ldr	r2, [pc, #192]	@ (8004f3c <HAL_DMA_IRQHandler+0xe40>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d013      	beq.n	8004ea6 <HAL_DMA_IRQHandler+0xdaa>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a2f      	ldr	r2, [pc, #188]	@ (8004f40 <HAL_DMA_IRQHandler+0xe44>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d00e      	beq.n	8004ea6 <HAL_DMA_IRQHandler+0xdaa>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a2d      	ldr	r2, [pc, #180]	@ (8004f44 <HAL_DMA_IRQHandler+0xe48>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d009      	beq.n	8004ea6 <HAL_DMA_IRQHandler+0xdaa>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a2c      	ldr	r2, [pc, #176]	@ (8004f48 <HAL_DMA_IRQHandler+0xe4c>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d004      	beq.n	8004ea6 <HAL_DMA_IRQHandler+0xdaa>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a2a      	ldr	r2, [pc, #168]	@ (8004f4c <HAL_DMA_IRQHandler+0xe50>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d108      	bne.n	8004eb8 <HAL_DMA_IRQHandler+0xdbc>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f022 021c 	bic.w	r2, r2, #28
 8004eb4:	601a      	str	r2, [r3, #0]
 8004eb6:	e007      	b.n	8004ec8 <HAL_DMA_IRQHandler+0xdcc>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f022 020e 	bic.w	r2, r2, #14
 8004ec6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ecc:	f003 031f 	and.w	r3, r3, #31
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	409a      	lsls	r2, r3
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d009      	beq.n	8004f0a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	4798      	blx	r3
 8004efe:	e004      	b.n	8004f0a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004f00:	bf00      	nop
 8004f02:	e002      	b.n	8004f0a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f04:	bf00      	nop
 8004f06:	e000      	b.n	8004f0a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f08:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004f0a:	3728      	adds	r7, #40	@ 0x28
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	40020010 	.word	0x40020010
 8004f14:	40020028 	.word	0x40020028
 8004f18:	40020040 	.word	0x40020040
 8004f1c:	40020058 	.word	0x40020058
 8004f20:	40020070 	.word	0x40020070
 8004f24:	40020088 	.word	0x40020088
 8004f28:	400200a0 	.word	0x400200a0
 8004f2c:	400200b8 	.word	0x400200b8
 8004f30:	40020410 	.word	0x40020410
 8004f34:	40020428 	.word	0x40020428
 8004f38:	40020440 	.word	0x40020440
 8004f3c:	40020458 	.word	0x40020458
 8004f40:	40020470 	.word	0x40020470
 8004f44:	40020488 	.word	0x40020488
 8004f48:	400204a0 	.word	0x400204a0
 8004f4c:	400204b8 	.word	0x400204b8

08004f50 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b083      	sub	sp, #12
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b087      	sub	sp, #28
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	607a      	str	r2, [r7, #4]
 8004f74:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f7a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f80:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a7f      	ldr	r2, [pc, #508]	@ (8005184 <DMA_SetConfig+0x21c>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d072      	beq.n	8005072 <DMA_SetConfig+0x10a>
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a7d      	ldr	r2, [pc, #500]	@ (8005188 <DMA_SetConfig+0x220>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d06d      	beq.n	8005072 <DMA_SetConfig+0x10a>
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a7c      	ldr	r2, [pc, #496]	@ (800518c <DMA_SetConfig+0x224>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d068      	beq.n	8005072 <DMA_SetConfig+0x10a>
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a7a      	ldr	r2, [pc, #488]	@ (8005190 <DMA_SetConfig+0x228>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d063      	beq.n	8005072 <DMA_SetConfig+0x10a>
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a79      	ldr	r2, [pc, #484]	@ (8005194 <DMA_SetConfig+0x22c>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d05e      	beq.n	8005072 <DMA_SetConfig+0x10a>
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a77      	ldr	r2, [pc, #476]	@ (8005198 <DMA_SetConfig+0x230>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d059      	beq.n	8005072 <DMA_SetConfig+0x10a>
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a76      	ldr	r2, [pc, #472]	@ (800519c <DMA_SetConfig+0x234>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d054      	beq.n	8005072 <DMA_SetConfig+0x10a>
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a74      	ldr	r2, [pc, #464]	@ (80051a0 <DMA_SetConfig+0x238>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d04f      	beq.n	8005072 <DMA_SetConfig+0x10a>
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a73      	ldr	r2, [pc, #460]	@ (80051a4 <DMA_SetConfig+0x23c>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d04a      	beq.n	8005072 <DMA_SetConfig+0x10a>
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a71      	ldr	r2, [pc, #452]	@ (80051a8 <DMA_SetConfig+0x240>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d045      	beq.n	8005072 <DMA_SetConfig+0x10a>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a70      	ldr	r2, [pc, #448]	@ (80051ac <DMA_SetConfig+0x244>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d040      	beq.n	8005072 <DMA_SetConfig+0x10a>
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a6e      	ldr	r2, [pc, #440]	@ (80051b0 <DMA_SetConfig+0x248>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d03b      	beq.n	8005072 <DMA_SetConfig+0x10a>
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a6d      	ldr	r2, [pc, #436]	@ (80051b4 <DMA_SetConfig+0x24c>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d036      	beq.n	8005072 <DMA_SetConfig+0x10a>
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a6b      	ldr	r2, [pc, #428]	@ (80051b8 <DMA_SetConfig+0x250>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d031      	beq.n	8005072 <DMA_SetConfig+0x10a>
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a6a      	ldr	r2, [pc, #424]	@ (80051bc <DMA_SetConfig+0x254>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d02c      	beq.n	8005072 <DMA_SetConfig+0x10a>
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a68      	ldr	r2, [pc, #416]	@ (80051c0 <DMA_SetConfig+0x258>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d027      	beq.n	8005072 <DMA_SetConfig+0x10a>
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a67      	ldr	r2, [pc, #412]	@ (80051c4 <DMA_SetConfig+0x25c>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d022      	beq.n	8005072 <DMA_SetConfig+0x10a>
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a65      	ldr	r2, [pc, #404]	@ (80051c8 <DMA_SetConfig+0x260>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d01d      	beq.n	8005072 <DMA_SetConfig+0x10a>
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a64      	ldr	r2, [pc, #400]	@ (80051cc <DMA_SetConfig+0x264>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d018      	beq.n	8005072 <DMA_SetConfig+0x10a>
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a62      	ldr	r2, [pc, #392]	@ (80051d0 <DMA_SetConfig+0x268>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d013      	beq.n	8005072 <DMA_SetConfig+0x10a>
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a61      	ldr	r2, [pc, #388]	@ (80051d4 <DMA_SetConfig+0x26c>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d00e      	beq.n	8005072 <DMA_SetConfig+0x10a>
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a5f      	ldr	r2, [pc, #380]	@ (80051d8 <DMA_SetConfig+0x270>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d009      	beq.n	8005072 <DMA_SetConfig+0x10a>
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a5e      	ldr	r2, [pc, #376]	@ (80051dc <DMA_SetConfig+0x274>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d004      	beq.n	8005072 <DMA_SetConfig+0x10a>
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a5c      	ldr	r2, [pc, #368]	@ (80051e0 <DMA_SetConfig+0x278>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d101      	bne.n	8005076 <DMA_SetConfig+0x10e>
 8005072:	2301      	movs	r3, #1
 8005074:	e000      	b.n	8005078 <DMA_SetConfig+0x110>
 8005076:	2300      	movs	r3, #0
 8005078:	2b00      	cmp	r3, #0
 800507a:	d00d      	beq.n	8005098 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005084:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800508a:	2b00      	cmp	r3, #0
 800508c:	d004      	beq.n	8005098 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005092:	68fa      	ldr	r2, [r7, #12]
 8005094:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005096:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a39      	ldr	r2, [pc, #228]	@ (8005184 <DMA_SetConfig+0x21c>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d04a      	beq.n	8005138 <DMA_SetConfig+0x1d0>
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a38      	ldr	r2, [pc, #224]	@ (8005188 <DMA_SetConfig+0x220>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d045      	beq.n	8005138 <DMA_SetConfig+0x1d0>
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a36      	ldr	r2, [pc, #216]	@ (800518c <DMA_SetConfig+0x224>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d040      	beq.n	8005138 <DMA_SetConfig+0x1d0>
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a35      	ldr	r2, [pc, #212]	@ (8005190 <DMA_SetConfig+0x228>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d03b      	beq.n	8005138 <DMA_SetConfig+0x1d0>
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a33      	ldr	r2, [pc, #204]	@ (8005194 <DMA_SetConfig+0x22c>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d036      	beq.n	8005138 <DMA_SetConfig+0x1d0>
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a32      	ldr	r2, [pc, #200]	@ (8005198 <DMA_SetConfig+0x230>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d031      	beq.n	8005138 <DMA_SetConfig+0x1d0>
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a30      	ldr	r2, [pc, #192]	@ (800519c <DMA_SetConfig+0x234>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d02c      	beq.n	8005138 <DMA_SetConfig+0x1d0>
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a2f      	ldr	r2, [pc, #188]	@ (80051a0 <DMA_SetConfig+0x238>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d027      	beq.n	8005138 <DMA_SetConfig+0x1d0>
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a2d      	ldr	r2, [pc, #180]	@ (80051a4 <DMA_SetConfig+0x23c>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d022      	beq.n	8005138 <DMA_SetConfig+0x1d0>
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a2c      	ldr	r2, [pc, #176]	@ (80051a8 <DMA_SetConfig+0x240>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d01d      	beq.n	8005138 <DMA_SetConfig+0x1d0>
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a2a      	ldr	r2, [pc, #168]	@ (80051ac <DMA_SetConfig+0x244>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d018      	beq.n	8005138 <DMA_SetConfig+0x1d0>
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a29      	ldr	r2, [pc, #164]	@ (80051b0 <DMA_SetConfig+0x248>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d013      	beq.n	8005138 <DMA_SetConfig+0x1d0>
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a27      	ldr	r2, [pc, #156]	@ (80051b4 <DMA_SetConfig+0x24c>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d00e      	beq.n	8005138 <DMA_SetConfig+0x1d0>
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a26      	ldr	r2, [pc, #152]	@ (80051b8 <DMA_SetConfig+0x250>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d009      	beq.n	8005138 <DMA_SetConfig+0x1d0>
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a24      	ldr	r2, [pc, #144]	@ (80051bc <DMA_SetConfig+0x254>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d004      	beq.n	8005138 <DMA_SetConfig+0x1d0>
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a23      	ldr	r2, [pc, #140]	@ (80051c0 <DMA_SetConfig+0x258>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d101      	bne.n	800513c <DMA_SetConfig+0x1d4>
 8005138:	2301      	movs	r3, #1
 800513a:	e000      	b.n	800513e <DMA_SetConfig+0x1d6>
 800513c:	2300      	movs	r3, #0
 800513e:	2b00      	cmp	r3, #0
 8005140:	d059      	beq.n	80051f6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005146:	f003 031f 	and.w	r3, r3, #31
 800514a:	223f      	movs	r2, #63	@ 0x3f
 800514c:	409a      	lsls	r2, r3
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005160:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	683a      	ldr	r2, [r7, #0]
 8005168:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	2b40      	cmp	r3, #64	@ 0x40
 8005170:	d138      	bne.n	80051e4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68ba      	ldr	r2, [r7, #8]
 8005180:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005182:	e086      	b.n	8005292 <DMA_SetConfig+0x32a>
 8005184:	40020010 	.word	0x40020010
 8005188:	40020028 	.word	0x40020028
 800518c:	40020040 	.word	0x40020040
 8005190:	40020058 	.word	0x40020058
 8005194:	40020070 	.word	0x40020070
 8005198:	40020088 	.word	0x40020088
 800519c:	400200a0 	.word	0x400200a0
 80051a0:	400200b8 	.word	0x400200b8
 80051a4:	40020410 	.word	0x40020410
 80051a8:	40020428 	.word	0x40020428
 80051ac:	40020440 	.word	0x40020440
 80051b0:	40020458 	.word	0x40020458
 80051b4:	40020470 	.word	0x40020470
 80051b8:	40020488 	.word	0x40020488
 80051bc:	400204a0 	.word	0x400204a0
 80051c0:	400204b8 	.word	0x400204b8
 80051c4:	58025408 	.word	0x58025408
 80051c8:	5802541c 	.word	0x5802541c
 80051cc:	58025430 	.word	0x58025430
 80051d0:	58025444 	.word	0x58025444
 80051d4:	58025458 	.word	0x58025458
 80051d8:	5802546c 	.word	0x5802546c
 80051dc:	58025480 	.word	0x58025480
 80051e0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68ba      	ldr	r2, [r7, #8]
 80051ea:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	60da      	str	r2, [r3, #12]
}
 80051f4:	e04d      	b.n	8005292 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a29      	ldr	r2, [pc, #164]	@ (80052a0 <DMA_SetConfig+0x338>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d022      	beq.n	8005246 <DMA_SetConfig+0x2de>
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a27      	ldr	r2, [pc, #156]	@ (80052a4 <DMA_SetConfig+0x33c>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d01d      	beq.n	8005246 <DMA_SetConfig+0x2de>
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a26      	ldr	r2, [pc, #152]	@ (80052a8 <DMA_SetConfig+0x340>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d018      	beq.n	8005246 <DMA_SetConfig+0x2de>
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a24      	ldr	r2, [pc, #144]	@ (80052ac <DMA_SetConfig+0x344>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d013      	beq.n	8005246 <DMA_SetConfig+0x2de>
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a23      	ldr	r2, [pc, #140]	@ (80052b0 <DMA_SetConfig+0x348>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d00e      	beq.n	8005246 <DMA_SetConfig+0x2de>
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a21      	ldr	r2, [pc, #132]	@ (80052b4 <DMA_SetConfig+0x34c>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d009      	beq.n	8005246 <DMA_SetConfig+0x2de>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a20      	ldr	r2, [pc, #128]	@ (80052b8 <DMA_SetConfig+0x350>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d004      	beq.n	8005246 <DMA_SetConfig+0x2de>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a1e      	ldr	r2, [pc, #120]	@ (80052bc <DMA_SetConfig+0x354>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d101      	bne.n	800524a <DMA_SetConfig+0x2e2>
 8005246:	2301      	movs	r3, #1
 8005248:	e000      	b.n	800524c <DMA_SetConfig+0x2e4>
 800524a:	2300      	movs	r3, #0
 800524c:	2b00      	cmp	r3, #0
 800524e:	d020      	beq.n	8005292 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005254:	f003 031f 	and.w	r3, r3, #31
 8005258:	2201      	movs	r2, #1
 800525a:	409a      	lsls	r2, r3
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	683a      	ldr	r2, [r7, #0]
 8005266:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	2b40      	cmp	r3, #64	@ 0x40
 800526e:	d108      	bne.n	8005282 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	68ba      	ldr	r2, [r7, #8]
 800527e:	60da      	str	r2, [r3, #12]
}
 8005280:	e007      	b.n	8005292 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68ba      	ldr	r2, [r7, #8]
 8005288:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	60da      	str	r2, [r3, #12]
}
 8005292:	bf00      	nop
 8005294:	371c      	adds	r7, #28
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr
 800529e:	bf00      	nop
 80052a0:	58025408 	.word	0x58025408
 80052a4:	5802541c 	.word	0x5802541c
 80052a8:	58025430 	.word	0x58025430
 80052ac:	58025444 	.word	0x58025444
 80052b0:	58025458 	.word	0x58025458
 80052b4:	5802546c 	.word	0x5802546c
 80052b8:	58025480 	.word	0x58025480
 80052bc:	58025494 	.word	0x58025494

080052c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b085      	sub	sp, #20
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a42      	ldr	r2, [pc, #264]	@ (80053d8 <DMA_CalcBaseAndBitshift+0x118>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d04a      	beq.n	8005368 <DMA_CalcBaseAndBitshift+0xa8>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a41      	ldr	r2, [pc, #260]	@ (80053dc <DMA_CalcBaseAndBitshift+0x11c>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d045      	beq.n	8005368 <DMA_CalcBaseAndBitshift+0xa8>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a3f      	ldr	r2, [pc, #252]	@ (80053e0 <DMA_CalcBaseAndBitshift+0x120>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d040      	beq.n	8005368 <DMA_CalcBaseAndBitshift+0xa8>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a3e      	ldr	r2, [pc, #248]	@ (80053e4 <DMA_CalcBaseAndBitshift+0x124>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d03b      	beq.n	8005368 <DMA_CalcBaseAndBitshift+0xa8>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a3c      	ldr	r2, [pc, #240]	@ (80053e8 <DMA_CalcBaseAndBitshift+0x128>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d036      	beq.n	8005368 <DMA_CalcBaseAndBitshift+0xa8>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a3b      	ldr	r2, [pc, #236]	@ (80053ec <DMA_CalcBaseAndBitshift+0x12c>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d031      	beq.n	8005368 <DMA_CalcBaseAndBitshift+0xa8>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a39      	ldr	r2, [pc, #228]	@ (80053f0 <DMA_CalcBaseAndBitshift+0x130>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d02c      	beq.n	8005368 <DMA_CalcBaseAndBitshift+0xa8>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a38      	ldr	r2, [pc, #224]	@ (80053f4 <DMA_CalcBaseAndBitshift+0x134>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d027      	beq.n	8005368 <DMA_CalcBaseAndBitshift+0xa8>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a36      	ldr	r2, [pc, #216]	@ (80053f8 <DMA_CalcBaseAndBitshift+0x138>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d022      	beq.n	8005368 <DMA_CalcBaseAndBitshift+0xa8>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a35      	ldr	r2, [pc, #212]	@ (80053fc <DMA_CalcBaseAndBitshift+0x13c>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d01d      	beq.n	8005368 <DMA_CalcBaseAndBitshift+0xa8>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a33      	ldr	r2, [pc, #204]	@ (8005400 <DMA_CalcBaseAndBitshift+0x140>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d018      	beq.n	8005368 <DMA_CalcBaseAndBitshift+0xa8>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a32      	ldr	r2, [pc, #200]	@ (8005404 <DMA_CalcBaseAndBitshift+0x144>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d013      	beq.n	8005368 <DMA_CalcBaseAndBitshift+0xa8>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a30      	ldr	r2, [pc, #192]	@ (8005408 <DMA_CalcBaseAndBitshift+0x148>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d00e      	beq.n	8005368 <DMA_CalcBaseAndBitshift+0xa8>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a2f      	ldr	r2, [pc, #188]	@ (800540c <DMA_CalcBaseAndBitshift+0x14c>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d009      	beq.n	8005368 <DMA_CalcBaseAndBitshift+0xa8>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a2d      	ldr	r2, [pc, #180]	@ (8005410 <DMA_CalcBaseAndBitshift+0x150>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d004      	beq.n	8005368 <DMA_CalcBaseAndBitshift+0xa8>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a2c      	ldr	r2, [pc, #176]	@ (8005414 <DMA_CalcBaseAndBitshift+0x154>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d101      	bne.n	800536c <DMA_CalcBaseAndBitshift+0xac>
 8005368:	2301      	movs	r3, #1
 800536a:	e000      	b.n	800536e <DMA_CalcBaseAndBitshift+0xae>
 800536c:	2300      	movs	r3, #0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d024      	beq.n	80053bc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	b2db      	uxtb	r3, r3
 8005378:	3b10      	subs	r3, #16
 800537a:	4a27      	ldr	r2, [pc, #156]	@ (8005418 <DMA_CalcBaseAndBitshift+0x158>)
 800537c:	fba2 2303 	umull	r2, r3, r2, r3
 8005380:	091b      	lsrs	r3, r3, #4
 8005382:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f003 0307 	and.w	r3, r3, #7
 800538a:	4a24      	ldr	r2, [pc, #144]	@ (800541c <DMA_CalcBaseAndBitshift+0x15c>)
 800538c:	5cd3      	ldrb	r3, [r2, r3]
 800538e:	461a      	mov	r2, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2b03      	cmp	r3, #3
 8005398:	d908      	bls.n	80053ac <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	461a      	mov	r2, r3
 80053a0:	4b1f      	ldr	r3, [pc, #124]	@ (8005420 <DMA_CalcBaseAndBitshift+0x160>)
 80053a2:	4013      	ands	r3, r2
 80053a4:	1d1a      	adds	r2, r3, #4
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	659a      	str	r2, [r3, #88]	@ 0x58
 80053aa:	e00d      	b.n	80053c8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	461a      	mov	r2, r3
 80053b2:	4b1b      	ldr	r3, [pc, #108]	@ (8005420 <DMA_CalcBaseAndBitshift+0x160>)
 80053b4:	4013      	ands	r3, r2
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80053ba:	e005      	b.n	80053c8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3714      	adds	r7, #20
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr
 80053d8:	40020010 	.word	0x40020010
 80053dc:	40020028 	.word	0x40020028
 80053e0:	40020040 	.word	0x40020040
 80053e4:	40020058 	.word	0x40020058
 80053e8:	40020070 	.word	0x40020070
 80053ec:	40020088 	.word	0x40020088
 80053f0:	400200a0 	.word	0x400200a0
 80053f4:	400200b8 	.word	0x400200b8
 80053f8:	40020410 	.word	0x40020410
 80053fc:	40020428 	.word	0x40020428
 8005400:	40020440 	.word	0x40020440
 8005404:	40020458 	.word	0x40020458
 8005408:	40020470 	.word	0x40020470
 800540c:	40020488 	.word	0x40020488
 8005410:	400204a0 	.word	0x400204a0
 8005414:	400204b8 	.word	0x400204b8
 8005418:	aaaaaaab 	.word	0xaaaaaaab
 800541c:	0800cea8 	.word	0x0800cea8
 8005420:	fffffc00 	.word	0xfffffc00

08005424 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8005424:	b480      	push	{r7}
 8005426:	b085      	sub	sp, #20
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800542c:	2300      	movs	r3, #0
 800542e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	699b      	ldr	r3, [r3, #24]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d120      	bne.n	800547a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800543c:	2b03      	cmp	r3, #3
 800543e:	d858      	bhi.n	80054f2 <DMA_CheckFifoParam+0xce>
 8005440:	a201      	add	r2, pc, #4	@ (adr r2, 8005448 <DMA_CheckFifoParam+0x24>)
 8005442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005446:	bf00      	nop
 8005448:	08005459 	.word	0x08005459
 800544c:	0800546b 	.word	0x0800546b
 8005450:	08005459 	.word	0x08005459
 8005454:	080054f3 	.word	0x080054f3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800545c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005460:	2b00      	cmp	r3, #0
 8005462:	d048      	beq.n	80054f6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005468:	e045      	b.n	80054f6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800546e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005472:	d142      	bne.n	80054fa <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005478:	e03f      	b.n	80054fa <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	699b      	ldr	r3, [r3, #24]
 800547e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005482:	d123      	bne.n	80054cc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005488:	2b03      	cmp	r3, #3
 800548a:	d838      	bhi.n	80054fe <DMA_CheckFifoParam+0xda>
 800548c:	a201      	add	r2, pc, #4	@ (adr r2, 8005494 <DMA_CheckFifoParam+0x70>)
 800548e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005492:	bf00      	nop
 8005494:	080054a5 	.word	0x080054a5
 8005498:	080054ab 	.word	0x080054ab
 800549c:	080054a5 	.word	0x080054a5
 80054a0:	080054bd 	.word	0x080054bd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	73fb      	strb	r3, [r7, #15]
        break;
 80054a8:	e030      	b.n	800550c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d025      	beq.n	8005502 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80054ba:	e022      	b.n	8005502 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054c0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80054c4:	d11f      	bne.n	8005506 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80054ca:	e01c      	b.n	8005506 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054d0:	2b02      	cmp	r3, #2
 80054d2:	d902      	bls.n	80054da <DMA_CheckFifoParam+0xb6>
 80054d4:	2b03      	cmp	r3, #3
 80054d6:	d003      	beq.n	80054e0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80054d8:	e018      	b.n	800550c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	73fb      	strb	r3, [r7, #15]
        break;
 80054de:	e015      	b.n	800550c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d00e      	beq.n	800550a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	73fb      	strb	r3, [r7, #15]
    break;
 80054f0:	e00b      	b.n	800550a <DMA_CheckFifoParam+0xe6>
        break;
 80054f2:	bf00      	nop
 80054f4:	e00a      	b.n	800550c <DMA_CheckFifoParam+0xe8>
        break;
 80054f6:	bf00      	nop
 80054f8:	e008      	b.n	800550c <DMA_CheckFifoParam+0xe8>
        break;
 80054fa:	bf00      	nop
 80054fc:	e006      	b.n	800550c <DMA_CheckFifoParam+0xe8>
        break;
 80054fe:	bf00      	nop
 8005500:	e004      	b.n	800550c <DMA_CheckFifoParam+0xe8>
        break;
 8005502:	bf00      	nop
 8005504:	e002      	b.n	800550c <DMA_CheckFifoParam+0xe8>
        break;
 8005506:	bf00      	nop
 8005508:	e000      	b.n	800550c <DMA_CheckFifoParam+0xe8>
    break;
 800550a:	bf00      	nop
    }
  }

  return status;
 800550c:	7bfb      	ldrb	r3, [r7, #15]
}
 800550e:	4618      	mov	r0, r3
 8005510:	3714      	adds	r7, #20
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr
 800551a:	bf00      	nop

0800551c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800551c:	b480      	push	{r7}
 800551e:	b085      	sub	sp, #20
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a38      	ldr	r2, [pc, #224]	@ (8005610 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d022      	beq.n	800557a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a36      	ldr	r2, [pc, #216]	@ (8005614 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d01d      	beq.n	800557a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a35      	ldr	r2, [pc, #212]	@ (8005618 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d018      	beq.n	800557a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a33      	ldr	r2, [pc, #204]	@ (800561c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d013      	beq.n	800557a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a32      	ldr	r2, [pc, #200]	@ (8005620 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d00e      	beq.n	800557a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a30      	ldr	r2, [pc, #192]	@ (8005624 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d009      	beq.n	800557a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a2f      	ldr	r2, [pc, #188]	@ (8005628 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d004      	beq.n	800557a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a2d      	ldr	r2, [pc, #180]	@ (800562c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d101      	bne.n	800557e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800557a:	2301      	movs	r3, #1
 800557c:	e000      	b.n	8005580 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800557e:	2300      	movs	r3, #0
 8005580:	2b00      	cmp	r3, #0
 8005582:	d01a      	beq.n	80055ba <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	b2db      	uxtb	r3, r3
 800558a:	3b08      	subs	r3, #8
 800558c:	4a28      	ldr	r2, [pc, #160]	@ (8005630 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800558e:	fba2 2303 	umull	r2, r3, r2, r3
 8005592:	091b      	lsrs	r3, r3, #4
 8005594:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	4b26      	ldr	r3, [pc, #152]	@ (8005634 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800559a:	4413      	add	r3, r2
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	461a      	mov	r2, r3
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	4a24      	ldr	r2, [pc, #144]	@ (8005638 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80055a8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f003 031f 	and.w	r3, r3, #31
 80055b0:	2201      	movs	r2, #1
 80055b2:	409a      	lsls	r2, r3
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80055b8:	e024      	b.n	8005604 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	3b10      	subs	r3, #16
 80055c2:	4a1e      	ldr	r2, [pc, #120]	@ (800563c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80055c4:	fba2 2303 	umull	r2, r3, r2, r3
 80055c8:	091b      	lsrs	r3, r3, #4
 80055ca:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	4a1c      	ldr	r2, [pc, #112]	@ (8005640 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d806      	bhi.n	80055e2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	4a1b      	ldr	r2, [pc, #108]	@ (8005644 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d902      	bls.n	80055e2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	3308      	adds	r3, #8
 80055e0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80055e2:	68fa      	ldr	r2, [r7, #12]
 80055e4:	4b18      	ldr	r3, [pc, #96]	@ (8005648 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80055e6:	4413      	add	r3, r2
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	461a      	mov	r2, r3
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a16      	ldr	r2, [pc, #88]	@ (800564c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80055f4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f003 031f 	and.w	r3, r3, #31
 80055fc:	2201      	movs	r2, #1
 80055fe:	409a      	lsls	r2, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005604:	bf00      	nop
 8005606:	3714      	adds	r7, #20
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr
 8005610:	58025408 	.word	0x58025408
 8005614:	5802541c 	.word	0x5802541c
 8005618:	58025430 	.word	0x58025430
 800561c:	58025444 	.word	0x58025444
 8005620:	58025458 	.word	0x58025458
 8005624:	5802546c 	.word	0x5802546c
 8005628:	58025480 	.word	0x58025480
 800562c:	58025494 	.word	0x58025494
 8005630:	cccccccd 	.word	0xcccccccd
 8005634:	16009600 	.word	0x16009600
 8005638:	58025880 	.word	0x58025880
 800563c:	aaaaaaab 	.word	0xaaaaaaab
 8005640:	400204b8 	.word	0x400204b8
 8005644:	4002040f 	.word	0x4002040f
 8005648:	10008200 	.word	0x10008200
 800564c:	40020880 	.word	0x40020880

08005650 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005650:	b480      	push	{r7}
 8005652:	b085      	sub	sp, #20
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	b2db      	uxtb	r3, r3
 800565e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d04a      	beq.n	80056fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2b08      	cmp	r3, #8
 800566a:	d847      	bhi.n	80056fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a25      	ldr	r2, [pc, #148]	@ (8005708 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d022      	beq.n	80056bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a24      	ldr	r2, [pc, #144]	@ (800570c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d01d      	beq.n	80056bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a22      	ldr	r2, [pc, #136]	@ (8005710 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d018      	beq.n	80056bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a21      	ldr	r2, [pc, #132]	@ (8005714 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d013      	beq.n	80056bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a1f      	ldr	r2, [pc, #124]	@ (8005718 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d00e      	beq.n	80056bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a1e      	ldr	r2, [pc, #120]	@ (800571c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d009      	beq.n	80056bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a1c      	ldr	r2, [pc, #112]	@ (8005720 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d004      	beq.n	80056bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a1b      	ldr	r2, [pc, #108]	@ (8005724 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d101      	bne.n	80056c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80056bc:	2301      	movs	r3, #1
 80056be:	e000      	b.n	80056c2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80056c0:	2300      	movs	r3, #0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d00a      	beq.n	80056dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80056c6:	68fa      	ldr	r2, [r7, #12]
 80056c8:	4b17      	ldr	r3, [pc, #92]	@ (8005728 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80056ca:	4413      	add	r3, r2
 80056cc:	009b      	lsls	r3, r3, #2
 80056ce:	461a      	mov	r2, r3
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	4a15      	ldr	r2, [pc, #84]	@ (800572c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80056d8:	671a      	str	r2, [r3, #112]	@ 0x70
 80056da:	e009      	b.n	80056f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80056dc:	68fa      	ldr	r2, [r7, #12]
 80056de:	4b14      	ldr	r3, [pc, #80]	@ (8005730 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80056e0:	4413      	add	r3, r2
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	461a      	mov	r2, r3
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a11      	ldr	r2, [pc, #68]	@ (8005734 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80056ee:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	3b01      	subs	r3, #1
 80056f4:	2201      	movs	r2, #1
 80056f6:	409a      	lsls	r2, r3
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80056fc:	bf00      	nop
 80056fe:	3714      	adds	r7, #20
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr
 8005708:	58025408 	.word	0x58025408
 800570c:	5802541c 	.word	0x5802541c
 8005710:	58025430 	.word	0x58025430
 8005714:	58025444 	.word	0x58025444
 8005718:	58025458 	.word	0x58025458
 800571c:	5802546c 	.word	0x5802546c
 8005720:	58025480 	.word	0x58025480
 8005724:	58025494 	.word	0x58025494
 8005728:	1600963f 	.word	0x1600963f
 800572c:	58025940 	.word	0x58025940
 8005730:	1000823f 	.word	0x1000823f
 8005734:	40020940 	.word	0x40020940

08005738 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA Stream.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8005738:	b480      	push	{r7}
 800573a:	b085      	sub	sp, #20
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]
  uint32_t syncSignalID = 0;
 8005742:	2300      	movs	r3, #0
 8005744:	60fb      	str	r3, [r7, #12]
  uint32_t syncPolarity = 0;
 8005746:	2300      	movs	r3, #0
 8005748:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  if(pSyncConfig->SyncEnable == ENABLE)
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	7a1b      	ldrb	r3, [r3, #8]
 800574e:	2b01      	cmp	r3, #1
 8005750:	d154      	bne.n	80057fc <HAL_DMAEx_ConfigMuxSync+0xc4>
  {
    assert_param(IS_DMAMUX_SYNC_POLARITY(pSyncConfig->SyncPolarity));

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a4b      	ldr	r2, [pc, #300]	@ (8005884 <HAL_DMAEx_ConfigMuxSync+0x14c>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d049      	beq.n	80057f0 <HAL_DMAEx_ConfigMuxSync+0xb8>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a49      	ldr	r2, [pc, #292]	@ (8005888 <HAL_DMAEx_ConfigMuxSync+0x150>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d044      	beq.n	80057f0 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a48      	ldr	r2, [pc, #288]	@ (800588c <HAL_DMAEx_ConfigMuxSync+0x154>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d03f      	beq.n	80057f0 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a46      	ldr	r2, [pc, #280]	@ (8005890 <HAL_DMAEx_ConfigMuxSync+0x158>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d03a      	beq.n	80057f0 <HAL_DMAEx_ConfigMuxSync+0xb8>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a45      	ldr	r2, [pc, #276]	@ (8005894 <HAL_DMAEx_ConfigMuxSync+0x15c>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d035      	beq.n	80057f0 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a43      	ldr	r2, [pc, #268]	@ (8005898 <HAL_DMAEx_ConfigMuxSync+0x160>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d030      	beq.n	80057f0 <HAL_DMAEx_ConfigMuxSync+0xb8>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a42      	ldr	r2, [pc, #264]	@ (800589c <HAL_DMAEx_ConfigMuxSync+0x164>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d02b      	beq.n	80057f0 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a40      	ldr	r2, [pc, #256]	@ (80058a0 <HAL_DMAEx_ConfigMuxSync+0x168>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d026      	beq.n	80057f0 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a3f      	ldr	r2, [pc, #252]	@ (80058a4 <HAL_DMAEx_ConfigMuxSync+0x16c>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d021      	beq.n	80057f0 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a3d      	ldr	r2, [pc, #244]	@ (80058a8 <HAL_DMAEx_ConfigMuxSync+0x170>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d01c      	beq.n	80057f0 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a3c      	ldr	r2, [pc, #240]	@ (80058ac <HAL_DMAEx_ConfigMuxSync+0x174>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d017      	beq.n	80057f0 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a3a      	ldr	r2, [pc, #232]	@ (80058b0 <HAL_DMAEx_ConfigMuxSync+0x178>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d012      	beq.n	80057f0 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a39      	ldr	r2, [pc, #228]	@ (80058b4 <HAL_DMAEx_ConfigMuxSync+0x17c>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d00d      	beq.n	80057f0 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a37      	ldr	r2, [pc, #220]	@ (80058b8 <HAL_DMAEx_ConfigMuxSync+0x180>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d008      	beq.n	80057f0 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a36      	ldr	r2, [pc, #216]	@ (80058bc <HAL_DMAEx_ConfigMuxSync+0x184>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d003      	beq.n	80057f0 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a34      	ldr	r2, [pc, #208]	@ (80058c0 <HAL_DMAEx_ConfigMuxSync+0x188>)
 80057ee:	4293      	cmp	r3, r2
    }
    else
    {
      assert_param(IS_BDMA_DMAMUX_SYNC_SIGNAL_ID(pSyncConfig->SyncSignalID));
    }
    syncSignalID = pSyncConfig->SyncSignalID;
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	60fb      	str	r3, [r7, #12]
    syncPolarity = pSyncConfig->SyncPolarity;
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	60bb      	str	r3, [r7, #8]
  }

  /*Check if the DMA state is ready */
  if(hdma->State == HAL_DMA_STATE_READY)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005802:	b2db      	uxtb	r3, r3
 8005804:	2b01      	cmp	r3, #1
 8005806:	d131      	bne.n	800586c <HAL_DMAEx_ConfigMuxSync+0x134>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800580e:	2b01      	cmp	r3, #1
 8005810:	d101      	bne.n	8005816 <HAL_DMAEx_ConfigMuxSync+0xde>
 8005812:	2302      	movs	r3, #2
 8005814:	e02f      	b.n	8005876 <HAL_DMAEx_ConfigMuxSync+0x13e>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2201      	movs	r2, #1
 800581a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the synchronization and event generation before applying a new config */
    CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005828:	f422 3281 	bic.w	r2, r2, #66048	@ 0x10200
 800582c:	601a      	str	r2, [r3, #0]

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	b2d9      	uxtb	r1, r3
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	061a      	lsls	r2, r3, #24
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	3b01      	subs	r3, #1
 8005840:	04db      	lsls	r3, r3, #19
 8005842:	431a      	orrs	r2, r3
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	431a      	orrs	r2, r3
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	7a1b      	ldrb	r3, [r3, #8]
 800584c:	041b      	lsls	r3, r3, #16
 800584e:	431a      	orrs	r2, r3
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	7a5b      	ldrb	r3, [r3, #9]
 8005854:	025b      	lsls	r3, r3, #9
 8005856:	431a      	orrs	r2, r3
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800585c:	430a      	orrs	r2, r1
 800585e:	601a      	str	r2, [r3, #0]
               ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               syncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)    | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

      /* Process Locked */
    __HAL_UNLOCK(hdma);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8005868:	2300      	movs	r3, #0
 800586a:	e004      	b.n	8005876 <HAL_DMAEx_ConfigMuxSync+0x13e>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005872:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return error status */
    return HAL_ERROR;
 8005874:	2301      	movs	r3, #1
  }
}
 8005876:	4618      	mov	r0, r3
 8005878:	3714      	adds	r7, #20
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr
 8005882:	bf00      	nop
 8005884:	40020010 	.word	0x40020010
 8005888:	40020028 	.word	0x40020028
 800588c:	40020040 	.word	0x40020040
 8005890:	40020058 	.word	0x40020058
 8005894:	40020070 	.word	0x40020070
 8005898:	40020088 	.word	0x40020088
 800589c:	400200a0 	.word	0x400200a0
 80058a0:	400200b8 	.word	0x400200b8
 80058a4:	40020410 	.word	0x40020410
 80058a8:	40020428 	.word	0x40020428
 80058ac:	40020440 	.word	0x40020440
 80058b0:	40020458 	.word	0x40020458
 80058b4:	40020470 	.word	0x40020470
 80058b8:	40020488 	.word	0x40020488
 80058bc:	400204a0 	.word	0x400204a0
 80058c0:	400204b8 	.word	0x400204b8

080058c4 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80058c4:	b480      	push	{r7}
 80058c6:	b087      	sub	sp, #28
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	60f8      	str	r0, [r7, #12]
 80058cc:	460b      	mov	r3, r1
 80058ce:	607a      	str	r2, [r7, #4]
 80058d0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80058d2:	2300      	movs	r3, #0
 80058d4:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d101      	bne.n	80058e0 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	e00a      	b.n	80058f6 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 80058e0:	7afb      	ldrb	r3, [r7, #11]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d103      	bne.n	80058ee <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	605a      	str	r2, [r3, #4]
      break;
 80058ec:	e002      	b.n	80058f4 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	75fb      	strb	r3, [r7, #23]
      break;
 80058f2:	bf00      	nop
  }

  return status;
 80058f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	371c      	adds	r7, #28
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr

08005902 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8005902:	b480      	push	{r7}
 8005904:	b083      	sub	sp, #12
 8005906:	af00      	add	r7, sp, #0
 8005908:	6078      	str	r0, [r7, #4]
 800590a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d101      	bne.n	8005916 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	e003      	b.n	800591e <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	683a      	ldr	r2, [r7, #0]
 800591a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800591c:	2300      	movs	r3, #0
  }
}
 800591e:	4618      	mov	r0, r3
 8005920:	370c      	adds	r7, #12
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr
	...

0800592c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800592c:	b480      	push	{r7}
 800592e:	b089      	sub	sp, #36	@ 0x24
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005936:	2300      	movs	r3, #0
 8005938:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800593a:	4b89      	ldr	r3, [pc, #548]	@ (8005b60 <HAL_GPIO_Init+0x234>)
 800593c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800593e:	e194      	b.n	8005c6a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	2101      	movs	r1, #1
 8005946:	69fb      	ldr	r3, [r7, #28]
 8005948:	fa01 f303 	lsl.w	r3, r1, r3
 800594c:	4013      	ands	r3, r2
 800594e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	2b00      	cmp	r3, #0
 8005954:	f000 8186 	beq.w	8005c64 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	f003 0303 	and.w	r3, r3, #3
 8005960:	2b01      	cmp	r3, #1
 8005962:	d005      	beq.n	8005970 <HAL_GPIO_Init+0x44>
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	f003 0303 	and.w	r3, r3, #3
 800596c:	2b02      	cmp	r3, #2
 800596e:	d130      	bne.n	80059d2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	005b      	lsls	r3, r3, #1
 800597a:	2203      	movs	r2, #3
 800597c:	fa02 f303 	lsl.w	r3, r2, r3
 8005980:	43db      	mvns	r3, r3
 8005982:	69ba      	ldr	r2, [r7, #24]
 8005984:	4013      	ands	r3, r2
 8005986:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	68da      	ldr	r2, [r3, #12]
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	005b      	lsls	r3, r3, #1
 8005990:	fa02 f303 	lsl.w	r3, r2, r3
 8005994:	69ba      	ldr	r2, [r7, #24]
 8005996:	4313      	orrs	r3, r2
 8005998:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	69ba      	ldr	r2, [r7, #24]
 800599e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80059a6:	2201      	movs	r2, #1
 80059a8:	69fb      	ldr	r3, [r7, #28]
 80059aa:	fa02 f303 	lsl.w	r3, r2, r3
 80059ae:	43db      	mvns	r3, r3
 80059b0:	69ba      	ldr	r2, [r7, #24]
 80059b2:	4013      	ands	r3, r2
 80059b4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	091b      	lsrs	r3, r3, #4
 80059bc:	f003 0201 	and.w	r2, r3, #1
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	fa02 f303 	lsl.w	r3, r2, r3
 80059c6:	69ba      	ldr	r2, [r7, #24]
 80059c8:	4313      	orrs	r3, r2
 80059ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	69ba      	ldr	r2, [r7, #24]
 80059d0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	f003 0303 	and.w	r3, r3, #3
 80059da:	2b03      	cmp	r3, #3
 80059dc:	d017      	beq.n	8005a0e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80059e4:	69fb      	ldr	r3, [r7, #28]
 80059e6:	005b      	lsls	r3, r3, #1
 80059e8:	2203      	movs	r2, #3
 80059ea:	fa02 f303 	lsl.w	r3, r2, r3
 80059ee:	43db      	mvns	r3, r3
 80059f0:	69ba      	ldr	r2, [r7, #24]
 80059f2:	4013      	ands	r3, r2
 80059f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	689a      	ldr	r2, [r3, #8]
 80059fa:	69fb      	ldr	r3, [r7, #28]
 80059fc:	005b      	lsls	r3, r3, #1
 80059fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005a02:	69ba      	ldr	r2, [r7, #24]
 8005a04:	4313      	orrs	r3, r2
 8005a06:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	69ba      	ldr	r2, [r7, #24]
 8005a0c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	f003 0303 	and.w	r3, r3, #3
 8005a16:	2b02      	cmp	r3, #2
 8005a18:	d123      	bne.n	8005a62 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	08da      	lsrs	r2, r3, #3
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	3208      	adds	r2, #8
 8005a22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005a28:	69fb      	ldr	r3, [r7, #28]
 8005a2a:	f003 0307 	and.w	r3, r3, #7
 8005a2e:	009b      	lsls	r3, r3, #2
 8005a30:	220f      	movs	r2, #15
 8005a32:	fa02 f303 	lsl.w	r3, r2, r3
 8005a36:	43db      	mvns	r3, r3
 8005a38:	69ba      	ldr	r2, [r7, #24]
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	691a      	ldr	r2, [r3, #16]
 8005a42:	69fb      	ldr	r3, [r7, #28]
 8005a44:	f003 0307 	and.w	r3, r3, #7
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a4e:	69ba      	ldr	r2, [r7, #24]
 8005a50:	4313      	orrs	r3, r2
 8005a52:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	08da      	lsrs	r2, r3, #3
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	3208      	adds	r2, #8
 8005a5c:	69b9      	ldr	r1, [r7, #24]
 8005a5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	005b      	lsls	r3, r3, #1
 8005a6c:	2203      	movs	r2, #3
 8005a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a72:	43db      	mvns	r3, r3
 8005a74:	69ba      	ldr	r2, [r7, #24]
 8005a76:	4013      	ands	r3, r2
 8005a78:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	f003 0203 	and.w	r2, r3, #3
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	005b      	lsls	r3, r3, #1
 8005a86:	fa02 f303 	lsl.w	r3, r2, r3
 8005a8a:	69ba      	ldr	r2, [r7, #24]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	69ba      	ldr	r2, [r7, #24]
 8005a94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	f000 80e0 	beq.w	8005c64 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005aa4:	4b2f      	ldr	r3, [pc, #188]	@ (8005b64 <HAL_GPIO_Init+0x238>)
 8005aa6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005aaa:	4a2e      	ldr	r2, [pc, #184]	@ (8005b64 <HAL_GPIO_Init+0x238>)
 8005aac:	f043 0302 	orr.w	r3, r3, #2
 8005ab0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005ab4:	4b2b      	ldr	r3, [pc, #172]	@ (8005b64 <HAL_GPIO_Init+0x238>)
 8005ab6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005aba:	f003 0302 	and.w	r3, r3, #2
 8005abe:	60fb      	str	r3, [r7, #12]
 8005ac0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005ac2:	4a29      	ldr	r2, [pc, #164]	@ (8005b68 <HAL_GPIO_Init+0x23c>)
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	089b      	lsrs	r3, r3, #2
 8005ac8:	3302      	adds	r3, #2
 8005aca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ace:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	f003 0303 	and.w	r3, r3, #3
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	220f      	movs	r2, #15
 8005ada:	fa02 f303 	lsl.w	r3, r2, r3
 8005ade:	43db      	mvns	r3, r3
 8005ae0:	69ba      	ldr	r2, [r7, #24]
 8005ae2:	4013      	ands	r3, r2
 8005ae4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a20      	ldr	r2, [pc, #128]	@ (8005b6c <HAL_GPIO_Init+0x240>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d052      	beq.n	8005b94 <HAL_GPIO_Init+0x268>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4a1f      	ldr	r2, [pc, #124]	@ (8005b70 <HAL_GPIO_Init+0x244>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d031      	beq.n	8005b5a <HAL_GPIO_Init+0x22e>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4a1e      	ldr	r2, [pc, #120]	@ (8005b74 <HAL_GPIO_Init+0x248>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d02b      	beq.n	8005b56 <HAL_GPIO_Init+0x22a>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4a1d      	ldr	r2, [pc, #116]	@ (8005b78 <HAL_GPIO_Init+0x24c>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d025      	beq.n	8005b52 <HAL_GPIO_Init+0x226>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	4a1c      	ldr	r2, [pc, #112]	@ (8005b7c <HAL_GPIO_Init+0x250>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d01f      	beq.n	8005b4e <HAL_GPIO_Init+0x222>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4a1b      	ldr	r2, [pc, #108]	@ (8005b80 <HAL_GPIO_Init+0x254>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d019      	beq.n	8005b4a <HAL_GPIO_Init+0x21e>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	4a1a      	ldr	r2, [pc, #104]	@ (8005b84 <HAL_GPIO_Init+0x258>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d013      	beq.n	8005b46 <HAL_GPIO_Init+0x21a>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a19      	ldr	r2, [pc, #100]	@ (8005b88 <HAL_GPIO_Init+0x25c>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d00d      	beq.n	8005b42 <HAL_GPIO_Init+0x216>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a18      	ldr	r2, [pc, #96]	@ (8005b8c <HAL_GPIO_Init+0x260>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d007      	beq.n	8005b3e <HAL_GPIO_Init+0x212>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a17      	ldr	r2, [pc, #92]	@ (8005b90 <HAL_GPIO_Init+0x264>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d101      	bne.n	8005b3a <HAL_GPIO_Init+0x20e>
 8005b36:	2309      	movs	r3, #9
 8005b38:	e02d      	b.n	8005b96 <HAL_GPIO_Init+0x26a>
 8005b3a:	230a      	movs	r3, #10
 8005b3c:	e02b      	b.n	8005b96 <HAL_GPIO_Init+0x26a>
 8005b3e:	2308      	movs	r3, #8
 8005b40:	e029      	b.n	8005b96 <HAL_GPIO_Init+0x26a>
 8005b42:	2307      	movs	r3, #7
 8005b44:	e027      	b.n	8005b96 <HAL_GPIO_Init+0x26a>
 8005b46:	2306      	movs	r3, #6
 8005b48:	e025      	b.n	8005b96 <HAL_GPIO_Init+0x26a>
 8005b4a:	2305      	movs	r3, #5
 8005b4c:	e023      	b.n	8005b96 <HAL_GPIO_Init+0x26a>
 8005b4e:	2304      	movs	r3, #4
 8005b50:	e021      	b.n	8005b96 <HAL_GPIO_Init+0x26a>
 8005b52:	2303      	movs	r3, #3
 8005b54:	e01f      	b.n	8005b96 <HAL_GPIO_Init+0x26a>
 8005b56:	2302      	movs	r3, #2
 8005b58:	e01d      	b.n	8005b96 <HAL_GPIO_Init+0x26a>
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e01b      	b.n	8005b96 <HAL_GPIO_Init+0x26a>
 8005b5e:	bf00      	nop
 8005b60:	58000080 	.word	0x58000080
 8005b64:	58024400 	.word	0x58024400
 8005b68:	58000400 	.word	0x58000400
 8005b6c:	58020000 	.word	0x58020000
 8005b70:	58020400 	.word	0x58020400
 8005b74:	58020800 	.word	0x58020800
 8005b78:	58020c00 	.word	0x58020c00
 8005b7c:	58021000 	.word	0x58021000
 8005b80:	58021400 	.word	0x58021400
 8005b84:	58021800 	.word	0x58021800
 8005b88:	58021c00 	.word	0x58021c00
 8005b8c:	58022000 	.word	0x58022000
 8005b90:	58022400 	.word	0x58022400
 8005b94:	2300      	movs	r3, #0
 8005b96:	69fa      	ldr	r2, [r7, #28]
 8005b98:	f002 0203 	and.w	r2, r2, #3
 8005b9c:	0092      	lsls	r2, r2, #2
 8005b9e:	4093      	lsls	r3, r2
 8005ba0:	69ba      	ldr	r2, [r7, #24]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005ba6:	4938      	ldr	r1, [pc, #224]	@ (8005c88 <HAL_GPIO_Init+0x35c>)
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	089b      	lsrs	r3, r3, #2
 8005bac:	3302      	adds	r3, #2
 8005bae:	69ba      	ldr	r2, [r7, #24]
 8005bb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005bb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	43db      	mvns	r3, r3
 8005bc0:	69ba      	ldr	r2, [r7, #24]
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d003      	beq.n	8005bda <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005bd2:	69ba      	ldr	r2, [r7, #24]
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005bda:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005be2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	43db      	mvns	r3, r3
 8005bee:	69ba      	ldr	r2, [r7, #24]
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d003      	beq.n	8005c08 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005c00:	69ba      	ldr	r2, [r7, #24]
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005c08:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005c0c:	69bb      	ldr	r3, [r7, #24]
 8005c0e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	43db      	mvns	r3, r3
 8005c1a:	69ba      	ldr	r2, [r7, #24]
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d003      	beq.n	8005c34 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005c2c:	69ba      	ldr	r2, [r7, #24]
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	69ba      	ldr	r2, [r7, #24]
 8005c38:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	43db      	mvns	r3, r3
 8005c44:	69ba      	ldr	r2, [r7, #24]
 8005c46:	4013      	ands	r3, r2
 8005c48:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d003      	beq.n	8005c5e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005c56:	69ba      	ldr	r2, [r7, #24]
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	69ba      	ldr	r2, [r7, #24]
 8005c62:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005c64:	69fb      	ldr	r3, [r7, #28]
 8005c66:	3301      	adds	r3, #1
 8005c68:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	69fb      	ldr	r3, [r7, #28]
 8005c70:	fa22 f303 	lsr.w	r3, r2, r3
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	f47f ae63 	bne.w	8005940 <HAL_GPIO_Init+0x14>
  }
}
 8005c7a:	bf00      	nop
 8005c7c:	bf00      	nop
 8005c7e:	3724      	adds	r7, #36	@ 0x24
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr
 8005c88:	58000400 	.word	0x58000400

08005c8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b085      	sub	sp, #20
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	460b      	mov	r3, r1
 8005c96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	691a      	ldr	r2, [r3, #16]
 8005c9c:	887b      	ldrh	r3, [r7, #2]
 8005c9e:	4013      	ands	r3, r2
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d002      	beq.n	8005caa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	73fb      	strb	r3, [r7, #15]
 8005ca8:	e001      	b.n	8005cae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005caa:	2300      	movs	r3, #0
 8005cac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3714      	adds	r7, #20
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b083      	sub	sp, #12
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	460b      	mov	r3, r1
 8005cc6:	807b      	strh	r3, [r7, #2]
 8005cc8:	4613      	mov	r3, r2
 8005cca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005ccc:	787b      	ldrb	r3, [r7, #1]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d003      	beq.n	8005cda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005cd2:	887a      	ldrh	r2, [r7, #2]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005cd8:	e003      	b.n	8005ce2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005cda:	887b      	ldrh	r3, [r7, #2]
 8005cdc:	041a      	lsls	r2, r3, #16
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	619a      	str	r2, [r3, #24]
}
 8005ce2:	bf00      	nop
 8005ce4:	370c      	adds	r7, #12
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr
	...

08005cf0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b083      	sub	sp, #12
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8005cf8:	4a08      	ldr	r2, [pc, #32]	@ (8005d1c <HAL_HSEM_FastTake+0x2c>)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	3320      	adds	r3, #32
 8005cfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d02:	4a07      	ldr	r2, [pc, #28]	@ (8005d20 <HAL_HSEM_FastTake+0x30>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d101      	bne.n	8005d0c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	e000      	b.n	8005d0e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	370c      	adds	r7, #12
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop
 8005d1c:	58026400 	.word	0x58026400
 8005d20:	80000300 	.word	0x80000300

08005d24 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8005d2e:	4906      	ldr	r1, [pc, #24]	@ (8005d48 <HAL_HSEM_Release+0x24>)
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8005d3c:	bf00      	nop
 8005d3e:	370c      	adds	r7, #12
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr
 8005d48:	58026400 	.word	0x58026400

08005d4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b082      	sub	sp, #8
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d101      	bne.n	8005d5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e08b      	b.n	8005e76 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d106      	bne.n	8005d78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f7fc ff34 	bl	8002be0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2224      	movs	r2, #36	@ 0x24
 8005d7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f022 0201 	bic.w	r2, r2, #1
 8005d8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	685a      	ldr	r2, [r3, #4]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005d9c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	689a      	ldr	r2, [r3, #8]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005dac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	68db      	ldr	r3, [r3, #12]
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d107      	bne.n	8005dc6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	689a      	ldr	r2, [r3, #8]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005dc2:	609a      	str	r2, [r3, #8]
 8005dc4:	e006      	b.n	8005dd4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	689a      	ldr	r2, [r3, #8]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005dd2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	2b02      	cmp	r3, #2
 8005dda:	d108      	bne.n	8005dee <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	685a      	ldr	r2, [r3, #4]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005dea:	605a      	str	r2, [r3, #4]
 8005dec:	e007      	b.n	8005dfe <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	685a      	ldr	r2, [r3, #4]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005dfc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	6859      	ldr	r1, [r3, #4]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	4b1d      	ldr	r3, [pc, #116]	@ (8005e80 <HAL_I2C_Init+0x134>)
 8005e0a:	430b      	orrs	r3, r1
 8005e0c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	68da      	ldr	r2, [r3, #12]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005e1c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	691a      	ldr	r2, [r3, #16]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	695b      	ldr	r3, [r3, #20]
 8005e26:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	699b      	ldr	r3, [r3, #24]
 8005e2e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	430a      	orrs	r2, r1
 8005e36:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	69d9      	ldr	r1, [r3, #28]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6a1a      	ldr	r2, [r3, #32]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	430a      	orrs	r2, r1
 8005e46:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f042 0201 	orr.w	r2, r2, #1
 8005e56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2220      	movs	r2, #32
 8005e62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3708      	adds	r7, #8
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
 8005e7e:	bf00      	nop
 8005e80:	02008000 	.word	0x02008000

08005e84 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b088      	sub	sp, #32
 8005e88:	af02      	add	r7, sp, #8
 8005e8a:	60f8      	str	r0, [r7, #12]
 8005e8c:	4608      	mov	r0, r1
 8005e8e:	4611      	mov	r1, r2
 8005e90:	461a      	mov	r2, r3
 8005e92:	4603      	mov	r3, r0
 8005e94:	817b      	strh	r3, [r7, #10]
 8005e96:	460b      	mov	r3, r1
 8005e98:	813b      	strh	r3, [r7, #8]
 8005e9a:	4613      	mov	r3, r2
 8005e9c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	2b20      	cmp	r3, #32
 8005ea8:	f040 80f9 	bne.w	800609e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005eac:	6a3b      	ldr	r3, [r7, #32]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d002      	beq.n	8005eb8 <HAL_I2C_Mem_Write+0x34>
 8005eb2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d105      	bne.n	8005ec4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ebe:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e0ed      	b.n	80060a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d101      	bne.n	8005ed2 <HAL_I2C_Mem_Write+0x4e>
 8005ece:	2302      	movs	r3, #2
 8005ed0:	e0e6      	b.n	80060a0 <HAL_I2C_Mem_Write+0x21c>
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005eda:	f7fd f9fd 	bl	80032d8 <HAL_GetTick>
 8005ede:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	9300      	str	r3, [sp, #0]
 8005ee4:	2319      	movs	r3, #25
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005eec:	68f8      	ldr	r0, [r7, #12]
 8005eee:	f000 fac3 	bl	8006478 <I2C_WaitOnFlagUntilTimeout>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d001      	beq.n	8005efc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	e0d1      	b.n	80060a0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2221      	movs	r2, #33	@ 0x21
 8005f00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2240      	movs	r2, #64	@ 0x40
 8005f08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	6a3a      	ldr	r2, [r7, #32]
 8005f16:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005f1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2200      	movs	r2, #0
 8005f22:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005f24:	88f8      	ldrh	r0, [r7, #6]
 8005f26:	893a      	ldrh	r2, [r7, #8]
 8005f28:	8979      	ldrh	r1, [r7, #10]
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	9301      	str	r3, [sp, #4]
 8005f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f30:	9300      	str	r3, [sp, #0]
 8005f32:	4603      	mov	r3, r0
 8005f34:	68f8      	ldr	r0, [r7, #12]
 8005f36:	f000 f9d3 	bl	80062e0 <I2C_RequestMemoryWrite>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d005      	beq.n	8005f4c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e0a9      	b.n	80060a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	2bff      	cmp	r3, #255	@ 0xff
 8005f54:	d90e      	bls.n	8005f74 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	22ff      	movs	r2, #255	@ 0xff
 8005f5a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f60:	b2da      	uxtb	r2, r3
 8005f62:	8979      	ldrh	r1, [r7, #10]
 8005f64:	2300      	movs	r3, #0
 8005f66:	9300      	str	r3, [sp, #0]
 8005f68:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005f6c:	68f8      	ldr	r0, [r7, #12]
 8005f6e:	f000 fc47 	bl	8006800 <I2C_TransferConfig>
 8005f72:	e00f      	b.n	8005f94 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f78:	b29a      	uxth	r2, r3
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f82:	b2da      	uxtb	r2, r3
 8005f84:	8979      	ldrh	r1, [r7, #10]
 8005f86:	2300      	movs	r3, #0
 8005f88:	9300      	str	r3, [sp, #0]
 8005f8a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005f8e:	68f8      	ldr	r0, [r7, #12]
 8005f90:	f000 fc36 	bl	8006800 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f94:	697a      	ldr	r2, [r7, #20]
 8005f96:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f98:	68f8      	ldr	r0, [r7, #12]
 8005f9a:	f000 fac6 	bl	800652a <I2C_WaitOnTXISFlagUntilTimeout>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d001      	beq.n	8005fa8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e07b      	b.n	80060a0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fac:	781a      	ldrb	r2, [r3, #0]
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fb8:	1c5a      	adds	r2, r3, #1
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	3b01      	subs	r3, #1
 8005fc6:	b29a      	uxth	r2, r3
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fd0:	3b01      	subs	r3, #1
 8005fd2:	b29a      	uxth	r2, r3
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d034      	beq.n	800604c <HAL_I2C_Mem_Write+0x1c8>
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d130      	bne.n	800604c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	9300      	str	r3, [sp, #0]
 8005fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	2180      	movs	r1, #128	@ 0x80
 8005ff4:	68f8      	ldr	r0, [r7, #12]
 8005ff6:	f000 fa3f 	bl	8006478 <I2C_WaitOnFlagUntilTimeout>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d001      	beq.n	8006004 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	e04d      	b.n	80060a0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006008:	b29b      	uxth	r3, r3
 800600a:	2bff      	cmp	r3, #255	@ 0xff
 800600c:	d90e      	bls.n	800602c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	22ff      	movs	r2, #255	@ 0xff
 8006012:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006018:	b2da      	uxtb	r2, r3
 800601a:	8979      	ldrh	r1, [r7, #10]
 800601c:	2300      	movs	r3, #0
 800601e:	9300      	str	r3, [sp, #0]
 8006020:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006024:	68f8      	ldr	r0, [r7, #12]
 8006026:	f000 fbeb 	bl	8006800 <I2C_TransferConfig>
 800602a:	e00f      	b.n	800604c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006030:	b29a      	uxth	r2, r3
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800603a:	b2da      	uxtb	r2, r3
 800603c:	8979      	ldrh	r1, [r7, #10]
 800603e:	2300      	movs	r3, #0
 8006040:	9300      	str	r3, [sp, #0]
 8006042:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006046:	68f8      	ldr	r0, [r7, #12]
 8006048:	f000 fbda 	bl	8006800 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006050:	b29b      	uxth	r3, r3
 8006052:	2b00      	cmp	r3, #0
 8006054:	d19e      	bne.n	8005f94 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006056:	697a      	ldr	r2, [r7, #20]
 8006058:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800605a:	68f8      	ldr	r0, [r7, #12]
 800605c:	f000 faac 	bl	80065b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006060:	4603      	mov	r3, r0
 8006062:	2b00      	cmp	r3, #0
 8006064:	d001      	beq.n	800606a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	e01a      	b.n	80060a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	2220      	movs	r2, #32
 8006070:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	6859      	ldr	r1, [r3, #4]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	4b0a      	ldr	r3, [pc, #40]	@ (80060a8 <HAL_I2C_Mem_Write+0x224>)
 800607e:	400b      	ands	r3, r1
 8006080:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2220      	movs	r2, #32
 8006086:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2200      	movs	r2, #0
 800608e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2200      	movs	r2, #0
 8006096:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800609a:	2300      	movs	r3, #0
 800609c:	e000      	b.n	80060a0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800609e:	2302      	movs	r3, #2
  }
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3718      	adds	r7, #24
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}
 80060a8:	fe00e800 	.word	0xfe00e800

080060ac <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b088      	sub	sp, #32
 80060b0:	af02      	add	r7, sp, #8
 80060b2:	60f8      	str	r0, [r7, #12]
 80060b4:	4608      	mov	r0, r1
 80060b6:	4611      	mov	r1, r2
 80060b8:	461a      	mov	r2, r3
 80060ba:	4603      	mov	r3, r0
 80060bc:	817b      	strh	r3, [r7, #10]
 80060be:	460b      	mov	r3, r1
 80060c0:	813b      	strh	r3, [r7, #8]
 80060c2:	4613      	mov	r3, r2
 80060c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	2b20      	cmp	r3, #32
 80060d0:	f040 80fd 	bne.w	80062ce <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80060d4:	6a3b      	ldr	r3, [r7, #32]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d002      	beq.n	80060e0 <HAL_I2C_Mem_Read+0x34>
 80060da:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d105      	bne.n	80060ec <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80060e6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	e0f1      	b.n	80062d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d101      	bne.n	80060fa <HAL_I2C_Mem_Read+0x4e>
 80060f6:	2302      	movs	r3, #2
 80060f8:	e0ea      	b.n	80062d0 <HAL_I2C_Mem_Read+0x224>
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2201      	movs	r2, #1
 80060fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006102:	f7fd f8e9 	bl	80032d8 <HAL_GetTick>
 8006106:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	9300      	str	r3, [sp, #0]
 800610c:	2319      	movs	r3, #25
 800610e:	2201      	movs	r2, #1
 8006110:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006114:	68f8      	ldr	r0, [r7, #12]
 8006116:	f000 f9af 	bl	8006478 <I2C_WaitOnFlagUntilTimeout>
 800611a:	4603      	mov	r3, r0
 800611c:	2b00      	cmp	r3, #0
 800611e:	d001      	beq.n	8006124 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	e0d5      	b.n	80062d0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2222      	movs	r2, #34	@ 0x22
 8006128:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2240      	movs	r2, #64	@ 0x40
 8006130:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2200      	movs	r2, #0
 8006138:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	6a3a      	ldr	r2, [r7, #32]
 800613e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006144:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2200      	movs	r2, #0
 800614a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800614c:	88f8      	ldrh	r0, [r7, #6]
 800614e:	893a      	ldrh	r2, [r7, #8]
 8006150:	8979      	ldrh	r1, [r7, #10]
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	9301      	str	r3, [sp, #4]
 8006156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006158:	9300      	str	r3, [sp, #0]
 800615a:	4603      	mov	r3, r0
 800615c:	68f8      	ldr	r0, [r7, #12]
 800615e:	f000 f913 	bl	8006388 <I2C_RequestMemoryRead>
 8006162:	4603      	mov	r3, r0
 8006164:	2b00      	cmp	r3, #0
 8006166:	d005      	beq.n	8006174 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2200      	movs	r2, #0
 800616c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006170:	2301      	movs	r3, #1
 8006172:	e0ad      	b.n	80062d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006178:	b29b      	uxth	r3, r3
 800617a:	2bff      	cmp	r3, #255	@ 0xff
 800617c:	d90e      	bls.n	800619c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	22ff      	movs	r2, #255	@ 0xff
 8006182:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006188:	b2da      	uxtb	r2, r3
 800618a:	8979      	ldrh	r1, [r7, #10]
 800618c:	4b52      	ldr	r3, [pc, #328]	@ (80062d8 <HAL_I2C_Mem_Read+0x22c>)
 800618e:	9300      	str	r3, [sp, #0]
 8006190:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006194:	68f8      	ldr	r0, [r7, #12]
 8006196:	f000 fb33 	bl	8006800 <I2C_TransferConfig>
 800619a:	e00f      	b.n	80061bc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061a0:	b29a      	uxth	r2, r3
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061aa:	b2da      	uxtb	r2, r3
 80061ac:	8979      	ldrh	r1, [r7, #10]
 80061ae:	4b4a      	ldr	r3, [pc, #296]	@ (80062d8 <HAL_I2C_Mem_Read+0x22c>)
 80061b0:	9300      	str	r3, [sp, #0]
 80061b2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80061b6:	68f8      	ldr	r0, [r7, #12]
 80061b8:	f000 fb22 	bl	8006800 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	9300      	str	r3, [sp, #0]
 80061c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061c2:	2200      	movs	r2, #0
 80061c4:	2104      	movs	r1, #4
 80061c6:	68f8      	ldr	r0, [r7, #12]
 80061c8:	f000 f956 	bl	8006478 <I2C_WaitOnFlagUntilTimeout>
 80061cc:	4603      	mov	r3, r0
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d001      	beq.n	80061d6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	e07c      	b.n	80062d0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061e0:	b2d2      	uxtb	r2, r2
 80061e2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061e8:	1c5a      	adds	r2, r3, #1
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061f2:	3b01      	subs	r3, #1
 80061f4:	b29a      	uxth	r2, r3
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061fe:	b29b      	uxth	r3, r3
 8006200:	3b01      	subs	r3, #1
 8006202:	b29a      	uxth	r2, r3
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800620c:	b29b      	uxth	r3, r3
 800620e:	2b00      	cmp	r3, #0
 8006210:	d034      	beq.n	800627c <HAL_I2C_Mem_Read+0x1d0>
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006216:	2b00      	cmp	r3, #0
 8006218:	d130      	bne.n	800627c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	9300      	str	r3, [sp, #0]
 800621e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006220:	2200      	movs	r2, #0
 8006222:	2180      	movs	r1, #128	@ 0x80
 8006224:	68f8      	ldr	r0, [r7, #12]
 8006226:	f000 f927 	bl	8006478 <I2C_WaitOnFlagUntilTimeout>
 800622a:	4603      	mov	r3, r0
 800622c:	2b00      	cmp	r3, #0
 800622e:	d001      	beq.n	8006234 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	e04d      	b.n	80062d0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006238:	b29b      	uxth	r3, r3
 800623a:	2bff      	cmp	r3, #255	@ 0xff
 800623c:	d90e      	bls.n	800625c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	22ff      	movs	r2, #255	@ 0xff
 8006242:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006248:	b2da      	uxtb	r2, r3
 800624a:	8979      	ldrh	r1, [r7, #10]
 800624c:	2300      	movs	r3, #0
 800624e:	9300      	str	r3, [sp, #0]
 8006250:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006254:	68f8      	ldr	r0, [r7, #12]
 8006256:	f000 fad3 	bl	8006800 <I2C_TransferConfig>
 800625a:	e00f      	b.n	800627c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006260:	b29a      	uxth	r2, r3
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800626a:	b2da      	uxtb	r2, r3
 800626c:	8979      	ldrh	r1, [r7, #10]
 800626e:	2300      	movs	r3, #0
 8006270:	9300      	str	r3, [sp, #0]
 8006272:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006276:	68f8      	ldr	r0, [r7, #12]
 8006278:	f000 fac2 	bl	8006800 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006280:	b29b      	uxth	r3, r3
 8006282:	2b00      	cmp	r3, #0
 8006284:	d19a      	bne.n	80061bc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006286:	697a      	ldr	r2, [r7, #20]
 8006288:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800628a:	68f8      	ldr	r0, [r7, #12]
 800628c:	f000 f994 	bl	80065b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006290:	4603      	mov	r3, r0
 8006292:	2b00      	cmp	r3, #0
 8006294:	d001      	beq.n	800629a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	e01a      	b.n	80062d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	2220      	movs	r2, #32
 80062a0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	6859      	ldr	r1, [r3, #4]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	4b0b      	ldr	r3, [pc, #44]	@ (80062dc <HAL_I2C_Mem_Read+0x230>)
 80062ae:	400b      	ands	r3, r1
 80062b0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2220      	movs	r2, #32
 80062b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2200      	movs	r2, #0
 80062be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2200      	movs	r2, #0
 80062c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80062ca:	2300      	movs	r3, #0
 80062cc:	e000      	b.n	80062d0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80062ce:	2302      	movs	r3, #2
  }
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3718      	adds	r7, #24
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}
 80062d8:	80002400 	.word	0x80002400
 80062dc:	fe00e800 	.word	0xfe00e800

080062e0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b086      	sub	sp, #24
 80062e4:	af02      	add	r7, sp, #8
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	4608      	mov	r0, r1
 80062ea:	4611      	mov	r1, r2
 80062ec:	461a      	mov	r2, r3
 80062ee:	4603      	mov	r3, r0
 80062f0:	817b      	strh	r3, [r7, #10]
 80062f2:	460b      	mov	r3, r1
 80062f4:	813b      	strh	r3, [r7, #8]
 80062f6:	4613      	mov	r3, r2
 80062f8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80062fa:	88fb      	ldrh	r3, [r7, #6]
 80062fc:	b2da      	uxtb	r2, r3
 80062fe:	8979      	ldrh	r1, [r7, #10]
 8006300:	4b20      	ldr	r3, [pc, #128]	@ (8006384 <I2C_RequestMemoryWrite+0xa4>)
 8006302:	9300      	str	r3, [sp, #0]
 8006304:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006308:	68f8      	ldr	r0, [r7, #12]
 800630a:	f000 fa79 	bl	8006800 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800630e:	69fa      	ldr	r2, [r7, #28]
 8006310:	69b9      	ldr	r1, [r7, #24]
 8006312:	68f8      	ldr	r0, [r7, #12]
 8006314:	f000 f909 	bl	800652a <I2C_WaitOnTXISFlagUntilTimeout>
 8006318:	4603      	mov	r3, r0
 800631a:	2b00      	cmp	r3, #0
 800631c:	d001      	beq.n	8006322 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	e02c      	b.n	800637c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006322:	88fb      	ldrh	r3, [r7, #6]
 8006324:	2b01      	cmp	r3, #1
 8006326:	d105      	bne.n	8006334 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006328:	893b      	ldrh	r3, [r7, #8]
 800632a:	b2da      	uxtb	r2, r3
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	629a      	str	r2, [r3, #40]	@ 0x28
 8006332:	e015      	b.n	8006360 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006334:	893b      	ldrh	r3, [r7, #8]
 8006336:	0a1b      	lsrs	r3, r3, #8
 8006338:	b29b      	uxth	r3, r3
 800633a:	b2da      	uxtb	r2, r3
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006342:	69fa      	ldr	r2, [r7, #28]
 8006344:	69b9      	ldr	r1, [r7, #24]
 8006346:	68f8      	ldr	r0, [r7, #12]
 8006348:	f000 f8ef 	bl	800652a <I2C_WaitOnTXISFlagUntilTimeout>
 800634c:	4603      	mov	r3, r0
 800634e:	2b00      	cmp	r3, #0
 8006350:	d001      	beq.n	8006356 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	e012      	b.n	800637c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006356:	893b      	ldrh	r3, [r7, #8]
 8006358:	b2da      	uxtb	r2, r3
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006360:	69fb      	ldr	r3, [r7, #28]
 8006362:	9300      	str	r3, [sp, #0]
 8006364:	69bb      	ldr	r3, [r7, #24]
 8006366:	2200      	movs	r2, #0
 8006368:	2180      	movs	r1, #128	@ 0x80
 800636a:	68f8      	ldr	r0, [r7, #12]
 800636c:	f000 f884 	bl	8006478 <I2C_WaitOnFlagUntilTimeout>
 8006370:	4603      	mov	r3, r0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d001      	beq.n	800637a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	e000      	b.n	800637c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800637a:	2300      	movs	r3, #0
}
 800637c:	4618      	mov	r0, r3
 800637e:	3710      	adds	r7, #16
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}
 8006384:	80002000 	.word	0x80002000

08006388 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b086      	sub	sp, #24
 800638c:	af02      	add	r7, sp, #8
 800638e:	60f8      	str	r0, [r7, #12]
 8006390:	4608      	mov	r0, r1
 8006392:	4611      	mov	r1, r2
 8006394:	461a      	mov	r2, r3
 8006396:	4603      	mov	r3, r0
 8006398:	817b      	strh	r3, [r7, #10]
 800639a:	460b      	mov	r3, r1
 800639c:	813b      	strh	r3, [r7, #8]
 800639e:	4613      	mov	r3, r2
 80063a0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80063a2:	88fb      	ldrh	r3, [r7, #6]
 80063a4:	b2da      	uxtb	r2, r3
 80063a6:	8979      	ldrh	r1, [r7, #10]
 80063a8:	4b20      	ldr	r3, [pc, #128]	@ (800642c <I2C_RequestMemoryRead+0xa4>)
 80063aa:	9300      	str	r3, [sp, #0]
 80063ac:	2300      	movs	r3, #0
 80063ae:	68f8      	ldr	r0, [r7, #12]
 80063b0:	f000 fa26 	bl	8006800 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063b4:	69fa      	ldr	r2, [r7, #28]
 80063b6:	69b9      	ldr	r1, [r7, #24]
 80063b8:	68f8      	ldr	r0, [r7, #12]
 80063ba:	f000 f8b6 	bl	800652a <I2C_WaitOnTXISFlagUntilTimeout>
 80063be:	4603      	mov	r3, r0
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d001      	beq.n	80063c8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	e02c      	b.n	8006422 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80063c8:	88fb      	ldrh	r3, [r7, #6]
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d105      	bne.n	80063da <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80063ce:	893b      	ldrh	r3, [r7, #8]
 80063d0:	b2da      	uxtb	r2, r3
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	629a      	str	r2, [r3, #40]	@ 0x28
 80063d8:	e015      	b.n	8006406 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80063da:	893b      	ldrh	r3, [r7, #8]
 80063dc:	0a1b      	lsrs	r3, r3, #8
 80063de:	b29b      	uxth	r3, r3
 80063e0:	b2da      	uxtb	r2, r3
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063e8:	69fa      	ldr	r2, [r7, #28]
 80063ea:	69b9      	ldr	r1, [r7, #24]
 80063ec:	68f8      	ldr	r0, [r7, #12]
 80063ee:	f000 f89c 	bl	800652a <I2C_WaitOnTXISFlagUntilTimeout>
 80063f2:	4603      	mov	r3, r0
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d001      	beq.n	80063fc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	e012      	b.n	8006422 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80063fc:	893b      	ldrh	r3, [r7, #8]
 80063fe:	b2da      	uxtb	r2, r3
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006406:	69fb      	ldr	r3, [r7, #28]
 8006408:	9300      	str	r3, [sp, #0]
 800640a:	69bb      	ldr	r3, [r7, #24]
 800640c:	2200      	movs	r2, #0
 800640e:	2140      	movs	r1, #64	@ 0x40
 8006410:	68f8      	ldr	r0, [r7, #12]
 8006412:	f000 f831 	bl	8006478 <I2C_WaitOnFlagUntilTimeout>
 8006416:	4603      	mov	r3, r0
 8006418:	2b00      	cmp	r3, #0
 800641a:	d001      	beq.n	8006420 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	e000      	b.n	8006422 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006420:	2300      	movs	r3, #0
}
 8006422:	4618      	mov	r0, r3
 8006424:	3710      	adds	r7, #16
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}
 800642a:	bf00      	nop
 800642c:	80002000 	.word	0x80002000

08006430 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	699b      	ldr	r3, [r3, #24]
 800643e:	f003 0302 	and.w	r3, r3, #2
 8006442:	2b02      	cmp	r3, #2
 8006444:	d103      	bne.n	800644e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	2200      	movs	r2, #0
 800644c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	699b      	ldr	r3, [r3, #24]
 8006454:	f003 0301 	and.w	r3, r3, #1
 8006458:	2b01      	cmp	r3, #1
 800645a:	d007      	beq.n	800646c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	699a      	ldr	r2, [r3, #24]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f042 0201 	orr.w	r2, r2, #1
 800646a:	619a      	str	r2, [r3, #24]
  }
}
 800646c:	bf00      	nop
 800646e:	370c      	adds	r7, #12
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr

08006478 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b084      	sub	sp, #16
 800647c:	af00      	add	r7, sp, #0
 800647e:	60f8      	str	r0, [r7, #12]
 8006480:	60b9      	str	r1, [r7, #8]
 8006482:	603b      	str	r3, [r7, #0]
 8006484:	4613      	mov	r3, r2
 8006486:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006488:	e03b      	b.n	8006502 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800648a:	69ba      	ldr	r2, [r7, #24]
 800648c:	6839      	ldr	r1, [r7, #0]
 800648e:	68f8      	ldr	r0, [r7, #12]
 8006490:	f000 f8d6 	bl	8006640 <I2C_IsErrorOccurred>
 8006494:	4603      	mov	r3, r0
 8006496:	2b00      	cmp	r3, #0
 8006498:	d001      	beq.n	800649e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	e041      	b.n	8006522 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064a4:	d02d      	beq.n	8006502 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064a6:	f7fc ff17 	bl	80032d8 <HAL_GetTick>
 80064aa:	4602      	mov	r2, r0
 80064ac:	69bb      	ldr	r3, [r7, #24]
 80064ae:	1ad3      	subs	r3, r2, r3
 80064b0:	683a      	ldr	r2, [r7, #0]
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d302      	bcc.n	80064bc <I2C_WaitOnFlagUntilTimeout+0x44>
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d122      	bne.n	8006502 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	699a      	ldr	r2, [r3, #24]
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	4013      	ands	r3, r2
 80064c6:	68ba      	ldr	r2, [r7, #8]
 80064c8:	429a      	cmp	r2, r3
 80064ca:	bf0c      	ite	eq
 80064cc:	2301      	moveq	r3, #1
 80064ce:	2300      	movne	r3, #0
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	461a      	mov	r2, r3
 80064d4:	79fb      	ldrb	r3, [r7, #7]
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d113      	bne.n	8006502 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064de:	f043 0220 	orr.w	r2, r3, #32
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2220      	movs	r2, #32
 80064ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2200      	movs	r2, #0
 80064f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2200      	movs	r2, #0
 80064fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	e00f      	b.n	8006522 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	699a      	ldr	r2, [r3, #24]
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	4013      	ands	r3, r2
 800650c:	68ba      	ldr	r2, [r7, #8]
 800650e:	429a      	cmp	r2, r3
 8006510:	bf0c      	ite	eq
 8006512:	2301      	moveq	r3, #1
 8006514:	2300      	movne	r3, #0
 8006516:	b2db      	uxtb	r3, r3
 8006518:	461a      	mov	r2, r3
 800651a:	79fb      	ldrb	r3, [r7, #7]
 800651c:	429a      	cmp	r2, r3
 800651e:	d0b4      	beq.n	800648a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006520:	2300      	movs	r3, #0
}
 8006522:	4618      	mov	r0, r3
 8006524:	3710      	adds	r7, #16
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}

0800652a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800652a:	b580      	push	{r7, lr}
 800652c:	b084      	sub	sp, #16
 800652e:	af00      	add	r7, sp, #0
 8006530:	60f8      	str	r0, [r7, #12]
 8006532:	60b9      	str	r1, [r7, #8]
 8006534:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006536:	e033      	b.n	80065a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	68b9      	ldr	r1, [r7, #8]
 800653c:	68f8      	ldr	r0, [r7, #12]
 800653e:	f000 f87f 	bl	8006640 <I2C_IsErrorOccurred>
 8006542:	4603      	mov	r3, r0
 8006544:	2b00      	cmp	r3, #0
 8006546:	d001      	beq.n	800654c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	e031      	b.n	80065b0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006552:	d025      	beq.n	80065a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006554:	f7fc fec0 	bl	80032d8 <HAL_GetTick>
 8006558:	4602      	mov	r2, r0
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	1ad3      	subs	r3, r2, r3
 800655e:	68ba      	ldr	r2, [r7, #8]
 8006560:	429a      	cmp	r2, r3
 8006562:	d302      	bcc.n	800656a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d11a      	bne.n	80065a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	699b      	ldr	r3, [r3, #24]
 8006570:	f003 0302 	and.w	r3, r3, #2
 8006574:	2b02      	cmp	r3, #2
 8006576:	d013      	beq.n	80065a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800657c:	f043 0220 	orr.w	r2, r3, #32
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2220      	movs	r2, #32
 8006588:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2200      	movs	r2, #0
 8006590:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2200      	movs	r2, #0
 8006598:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	e007      	b.n	80065b0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	699b      	ldr	r3, [r3, #24]
 80065a6:	f003 0302 	and.w	r3, r3, #2
 80065aa:	2b02      	cmp	r3, #2
 80065ac:	d1c4      	bne.n	8006538 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80065ae:	2300      	movs	r3, #0
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3710      	adds	r7, #16
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	60b9      	str	r1, [r7, #8]
 80065c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80065c4:	e02f      	b.n	8006626 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80065c6:	687a      	ldr	r2, [r7, #4]
 80065c8:	68b9      	ldr	r1, [r7, #8]
 80065ca:	68f8      	ldr	r0, [r7, #12]
 80065cc:	f000 f838 	bl	8006640 <I2C_IsErrorOccurred>
 80065d0:	4603      	mov	r3, r0
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d001      	beq.n	80065da <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	e02d      	b.n	8006636 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065da:	f7fc fe7d 	bl	80032d8 <HAL_GetTick>
 80065de:	4602      	mov	r2, r0
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	1ad3      	subs	r3, r2, r3
 80065e4:	68ba      	ldr	r2, [r7, #8]
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d302      	bcc.n	80065f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d11a      	bne.n	8006626 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	699b      	ldr	r3, [r3, #24]
 80065f6:	f003 0320 	and.w	r3, r3, #32
 80065fa:	2b20      	cmp	r3, #32
 80065fc:	d013      	beq.n	8006626 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006602:	f043 0220 	orr.w	r2, r3, #32
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2220      	movs	r2, #32
 800660e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2200      	movs	r2, #0
 8006616:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2200      	movs	r2, #0
 800661e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	e007      	b.n	8006636 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	699b      	ldr	r3, [r3, #24]
 800662c:	f003 0320 	and.w	r3, r3, #32
 8006630:	2b20      	cmp	r3, #32
 8006632:	d1c8      	bne.n	80065c6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006634:	2300      	movs	r3, #0
}
 8006636:	4618      	mov	r0, r3
 8006638:	3710      	adds	r7, #16
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
	...

08006640 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b08a      	sub	sp, #40	@ 0x28
 8006644:	af00      	add	r7, sp, #0
 8006646:	60f8      	str	r0, [r7, #12]
 8006648:	60b9      	str	r1, [r7, #8]
 800664a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800664c:	2300      	movs	r3, #0
 800664e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	699b      	ldr	r3, [r3, #24]
 8006658:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800665a:	2300      	movs	r3, #0
 800665c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006662:	69bb      	ldr	r3, [r7, #24]
 8006664:	f003 0310 	and.w	r3, r3, #16
 8006668:	2b00      	cmp	r3, #0
 800666a:	d068      	beq.n	800673e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	2210      	movs	r2, #16
 8006672:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006674:	e049      	b.n	800670a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800667c:	d045      	beq.n	800670a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800667e:	f7fc fe2b 	bl	80032d8 <HAL_GetTick>
 8006682:	4602      	mov	r2, r0
 8006684:	69fb      	ldr	r3, [r7, #28]
 8006686:	1ad3      	subs	r3, r2, r3
 8006688:	68ba      	ldr	r2, [r7, #8]
 800668a:	429a      	cmp	r2, r3
 800668c:	d302      	bcc.n	8006694 <I2C_IsErrorOccurred+0x54>
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d13a      	bne.n	800670a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800669e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80066a6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	699b      	ldr	r3, [r3, #24]
 80066ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80066b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80066b6:	d121      	bne.n	80066fc <I2C_IsErrorOccurred+0xbc>
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80066be:	d01d      	beq.n	80066fc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80066c0:	7cfb      	ldrb	r3, [r7, #19]
 80066c2:	2b20      	cmp	r3, #32
 80066c4:	d01a      	beq.n	80066fc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	685a      	ldr	r2, [r3, #4]
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80066d4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80066d6:	f7fc fdff 	bl	80032d8 <HAL_GetTick>
 80066da:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80066dc:	e00e      	b.n	80066fc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80066de:	f7fc fdfb 	bl	80032d8 <HAL_GetTick>
 80066e2:	4602      	mov	r2, r0
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	1ad3      	subs	r3, r2, r3
 80066e8:	2b19      	cmp	r3, #25
 80066ea:	d907      	bls.n	80066fc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80066ec:	6a3b      	ldr	r3, [r7, #32]
 80066ee:	f043 0320 	orr.w	r3, r3, #32
 80066f2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80066fa:	e006      	b.n	800670a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	699b      	ldr	r3, [r3, #24]
 8006702:	f003 0320 	and.w	r3, r3, #32
 8006706:	2b20      	cmp	r3, #32
 8006708:	d1e9      	bne.n	80066de <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	699b      	ldr	r3, [r3, #24]
 8006710:	f003 0320 	and.w	r3, r3, #32
 8006714:	2b20      	cmp	r3, #32
 8006716:	d003      	beq.n	8006720 <I2C_IsErrorOccurred+0xe0>
 8006718:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800671c:	2b00      	cmp	r3, #0
 800671e:	d0aa      	beq.n	8006676 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006720:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006724:	2b00      	cmp	r3, #0
 8006726:	d103      	bne.n	8006730 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	2220      	movs	r2, #32
 800672e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006730:	6a3b      	ldr	r3, [r7, #32]
 8006732:	f043 0304 	orr.w	r3, r3, #4
 8006736:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	699b      	ldr	r3, [r3, #24]
 8006744:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006746:	69bb      	ldr	r3, [r7, #24]
 8006748:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800674c:	2b00      	cmp	r3, #0
 800674e:	d00b      	beq.n	8006768 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006750:	6a3b      	ldr	r3, [r7, #32]
 8006752:	f043 0301 	orr.w	r3, r3, #1
 8006756:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006760:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006768:	69bb      	ldr	r3, [r7, #24]
 800676a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800676e:	2b00      	cmp	r3, #0
 8006770:	d00b      	beq.n	800678a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006772:	6a3b      	ldr	r3, [r7, #32]
 8006774:	f043 0308 	orr.w	r3, r3, #8
 8006778:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006782:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800678a:	69bb      	ldr	r3, [r7, #24]
 800678c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006790:	2b00      	cmp	r3, #0
 8006792:	d00b      	beq.n	80067ac <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006794:	6a3b      	ldr	r3, [r7, #32]
 8006796:	f043 0302 	orr.w	r3, r3, #2
 800679a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80067a4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80067ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d01c      	beq.n	80067ee <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80067b4:	68f8      	ldr	r0, [r7, #12]
 80067b6:	f7ff fe3b 	bl	8006430 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	6859      	ldr	r1, [r3, #4]
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	4b0d      	ldr	r3, [pc, #52]	@ (80067fc <I2C_IsErrorOccurred+0x1bc>)
 80067c6:	400b      	ands	r3, r1
 80067c8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80067ce:	6a3b      	ldr	r3, [r7, #32]
 80067d0:	431a      	orrs	r2, r3
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2220      	movs	r2, #32
 80067da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2200      	movs	r2, #0
 80067e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2200      	movs	r2, #0
 80067ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80067ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3728      	adds	r7, #40	@ 0x28
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop
 80067fc:	fe00e800 	.word	0xfe00e800

08006800 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006800:	b480      	push	{r7}
 8006802:	b087      	sub	sp, #28
 8006804:	af00      	add	r7, sp, #0
 8006806:	60f8      	str	r0, [r7, #12]
 8006808:	607b      	str	r3, [r7, #4]
 800680a:	460b      	mov	r3, r1
 800680c:	817b      	strh	r3, [r7, #10]
 800680e:	4613      	mov	r3, r2
 8006810:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006812:	897b      	ldrh	r3, [r7, #10]
 8006814:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006818:	7a7b      	ldrb	r3, [r7, #9]
 800681a:	041b      	lsls	r3, r3, #16
 800681c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006820:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006826:	6a3b      	ldr	r3, [r7, #32]
 8006828:	4313      	orrs	r3, r2
 800682a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800682e:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	685a      	ldr	r2, [r3, #4]
 8006836:	6a3b      	ldr	r3, [r7, #32]
 8006838:	0d5b      	lsrs	r3, r3, #21
 800683a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800683e:	4b08      	ldr	r3, [pc, #32]	@ (8006860 <I2C_TransferConfig+0x60>)
 8006840:	430b      	orrs	r3, r1
 8006842:	43db      	mvns	r3, r3
 8006844:	ea02 0103 	and.w	r1, r2, r3
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	697a      	ldr	r2, [r7, #20]
 800684e:	430a      	orrs	r2, r1
 8006850:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006852:	bf00      	nop
 8006854:	371c      	adds	r7, #28
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr
 800685e:	bf00      	nop
 8006860:	03ff63ff 	.word	0x03ff63ff

08006864 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006864:	b480      	push	{r7}
 8006866:	b083      	sub	sp, #12
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006874:	b2db      	uxtb	r3, r3
 8006876:	2b20      	cmp	r3, #32
 8006878:	d138      	bne.n	80068ec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006880:	2b01      	cmp	r3, #1
 8006882:	d101      	bne.n	8006888 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006884:	2302      	movs	r3, #2
 8006886:	e032      	b.n	80068ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2201      	movs	r2, #1
 800688c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2224      	movs	r2, #36	@ 0x24
 8006894:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f022 0201 	bic.w	r2, r2, #1
 80068a6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	681a      	ldr	r2, [r3, #0]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80068b6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	6819      	ldr	r1, [r3, #0]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	683a      	ldr	r2, [r7, #0]
 80068c4:	430a      	orrs	r2, r1
 80068c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f042 0201 	orr.w	r2, r2, #1
 80068d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2220      	movs	r2, #32
 80068dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80068e8:	2300      	movs	r3, #0
 80068ea:	e000      	b.n	80068ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80068ec:	2302      	movs	r3, #2
  }
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	370c      	adds	r7, #12
 80068f2:	46bd      	mov	sp, r7
 80068f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f8:	4770      	bx	lr

080068fa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80068fa:	b480      	push	{r7}
 80068fc:	b085      	sub	sp, #20
 80068fe:	af00      	add	r7, sp, #0
 8006900:	6078      	str	r0, [r7, #4]
 8006902:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800690a:	b2db      	uxtb	r3, r3
 800690c:	2b20      	cmp	r3, #32
 800690e:	d139      	bne.n	8006984 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006916:	2b01      	cmp	r3, #1
 8006918:	d101      	bne.n	800691e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800691a:	2302      	movs	r3, #2
 800691c:	e033      	b.n	8006986 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2201      	movs	r2, #1
 8006922:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2224      	movs	r2, #36	@ 0x24
 800692a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f022 0201 	bic.w	r2, r2, #1
 800693c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800694c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	021b      	lsls	r3, r3, #8
 8006952:	68fa      	ldr	r2, [r7, #12]
 8006954:	4313      	orrs	r3, r2
 8006956:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	68fa      	ldr	r2, [r7, #12]
 800695e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	681a      	ldr	r2, [r3, #0]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f042 0201 	orr.w	r2, r2, #1
 800696e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2220      	movs	r2, #32
 8006974:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2200      	movs	r2, #0
 800697c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006980:	2300      	movs	r3, #0
 8006982:	e000      	b.n	8006986 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006984:	2302      	movs	r3, #2
  }
}
 8006986:	4618      	mov	r0, r3
 8006988:	3714      	adds	r7, #20
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr

08006992 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8006992:	b580      	push	{r7, lr}
 8006994:	b084      	sub	sp, #16
 8006996:	af00      	add	r7, sp, #0
 8006998:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800699a:	f7fc fc9d 	bl	80032d8 <HAL_GetTick>
 800699e:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d101      	bne.n	80069aa <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 80069a6:	2301      	movs	r3, #1
 80069a8:	e03b      	b.n	8006a22 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2200      	movs	r2, #0
 80069ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2202      	movs	r2, #2
 80069b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	68da      	ldr	r2, [r3, #12]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f022 0201 	bic.w	r2, r2, #1
 80069c8:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80069ca:	e00f      	b.n	80069ec <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 80069cc:	f7fc fc84 	bl	80032d8 <HAL_GetTick>
 80069d0:	4602      	mov	r2, r0
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	1ad3      	subs	r3, r2, r3
 80069d6:	2b05      	cmp	r3, #5
 80069d8:	d908      	bls.n	80069ec <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2240      	movs	r2, #64	@ 0x40
 80069de:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2203      	movs	r2, #3
 80069e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      return HAL_ERROR;
 80069e8:	2301      	movs	r3, #1
 80069ea:	e01a      	b.n	8006a22 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	68db      	ldr	r3, [r3, #12]
 80069f2:	f003 0301 	and.w	r3, r3, #1
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d1e8      	bne.n	80069cc <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 fcd2 	bl	80073a4 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2200      	movs	r2, #0
 8006a04:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2200      	movs	r2, #0
 8006a16:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006a20:	2300      	movs	r3, #0
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3710      	adds	r7, #16
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
	...

08006a2c <HAL_MDMA_RegisterCallback>:
  * @param  CallbackID:           User Callback identifier
  * @param  pCallback:            pointer to callbacsk function.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_RegisterCallback(MDMA_HandleTypeDef *hmdma, HAL_MDMA_CallbackIDTypeDef CallbackID, void (* pCallback)(MDMA_HandleTypeDef *_hmdma))
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b087      	sub	sp, #28
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	60f8      	str	r0, [r7, #12]
 8006a34:	460b      	mov	r3, r1
 8006a36:	607a      	str	r2, [r7, #4]
 8006a38:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d101      	bne.n	8006a48 <HAL_MDMA_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8006a44:	2301      	movs	r3, #1
 8006a46:	e044      	b.n	8006ad2 <HAL_MDMA_RegisterCallback+0xa6>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	d101      	bne.n	8006a56 <HAL_MDMA_RegisterCallback+0x2a>
 8006a52:	2302      	movs	r3, #2
 8006a54:	e03d      	b.n	8006ad2 <HAL_MDMA_RegisterCallback+0xa6>
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2201      	movs	r2, #1
 8006a5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	d12a      	bne.n	8006ac0 <HAL_MDMA_RegisterCallback+0x94>
  {
    switch (CallbackID)
 8006a6a:	7afb      	ldrb	r3, [r7, #11]
 8006a6c:	2b05      	cmp	r3, #5
 8006a6e:	d82a      	bhi.n	8006ac6 <HAL_MDMA_RegisterCallback+0x9a>
 8006a70:	a201      	add	r2, pc, #4	@ (adr r2, 8006a78 <HAL_MDMA_RegisterCallback+0x4c>)
 8006a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a76:	bf00      	nop
 8006a78:	08006a91 	.word	0x08006a91
 8006a7c:	08006a99 	.word	0x08006a99
 8006a80:	08006aa1 	.word	0x08006aa1
 8006a84:	08006aa9 	.word	0x08006aa9
 8006a88:	08006ab1 	.word	0x08006ab1
 8006a8c:	08006ab9 	.word	0x08006ab9
    {
    case  HAL_MDMA_XFER_CPLT_CB_ID:
      hmdma->XferCpltCallback = pCallback;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	645a      	str	r2, [r3, #68]	@ 0x44
      break;
 8006a96:	e017      	b.n	8006ac8 <HAL_MDMA_RegisterCallback+0x9c>

    case  HAL_MDMA_XFER_BUFFERCPLT_CB_ID:
      hmdma->XferBufferCpltCallback = pCallback;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	649a      	str	r2, [r3, #72]	@ 0x48
      break;
 8006a9e:	e013      	b.n	8006ac8 <HAL_MDMA_RegisterCallback+0x9c>

    case  HAL_MDMA_XFER_BLOCKCPLT_CB_ID:
      hmdma->XferBlockCpltCallback = pCallback;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	64da      	str	r2, [r3, #76]	@ 0x4c
      break;
 8006aa6:	e00f      	b.n	8006ac8 <HAL_MDMA_RegisterCallback+0x9c>

    case  HAL_MDMA_XFER_REPBLOCKCPLT_CB_ID:
      hmdma->XferRepeatBlockCpltCallback = pCallback;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006aae:	e00b      	b.n	8006ac8 <HAL_MDMA_RegisterCallback+0x9c>

    case  HAL_MDMA_XFER_ERROR_CB_ID:
      hmdma->XferErrorCallback = pCallback;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006ab6:	e007      	b.n	8006ac8 <HAL_MDMA_RegisterCallback+0x9c>

    case  HAL_MDMA_XFER_ABORT_CB_ID:
      hmdma->XferAbortCallback = pCallback;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	687a      	ldr	r2, [r7, #4]
 8006abc:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8006abe:	e003      	b.n	8006ac8 <HAL_MDMA_RegisterCallback+0x9c>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	75fb      	strb	r3, [r7, #23]
 8006ac4:	e000      	b.n	8006ac8 <HAL_MDMA_RegisterCallback+0x9c>
      break;
 8006ac6:	bf00      	nop
  }

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006ad0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	371c      	adds	r7, #28
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr
 8006ade:	bf00      	nop

08006ae0 <HAL_MDMA_LinkedList_CreateNode>:
  * @param  pNodeConfig: Pointer to a MDMA_LinkNodeConfTypeDef structure that contains
  *               the configuration information for the specified MDMA Linked List Node.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_LinkedList_CreateNode(MDMA_LinkNodeTypeDef *pNode, MDMA_LinkNodeConfTypeDef *pNodeConfig)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b085      	sub	sp, #20
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	6039      	str	r1, [r7, #0]
  uint32_t addressMask;
  uint32_t blockoffset;

  /* Check the MDMA peripheral state */
  if((pNode == NULL) || (pNodeConfig == NULL))
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d002      	beq.n	8006af6 <HAL_MDMA_LinkedList_CreateNode+0x16>
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d101      	bne.n	8006afa <HAL_MDMA_LinkedList_CreateNode+0x1a>
  {
    return HAL_ERROR;
 8006af6:	2301      	movs	r3, #1
 8006af8:	e0c8      	b.n	8006c8c <HAL_MDMA_LinkedList_CreateNode+0x1ac>
  assert_param(IS_MDMA_TRANSFER_LENGTH(pNodeConfig->BlockDataLength));
  assert_param(IS_MDMA_BLOCK_COUNT(pNodeConfig->BlockCount));


  /* Configure next Link node Address Register to zero */
  pNode->CLAR =  0;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2200      	movs	r2, #0
 8006afe:	615a      	str	r2, [r3, #20]

  /* Configure the Link Node registers*/
  pNode->CTBR   = 0;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2200      	movs	r2, #0
 8006b04:	619a      	str	r2, [r3, #24]
  pNode->CMAR   = 0;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	621a      	str	r2, [r3, #32]
  pNode->CMDR   = 0;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	625a      	str	r2, [r3, #36]	@ 0x24
  pNode->Reserved = 0;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2200      	movs	r2, #0
 8006b16:	61da      	str	r2, [r3, #28]

  /* Write new CTCR Register value */
  pNode->CTCR =  pNodeConfig->Init.SourceInc | pNodeConfig->Init.DestinationInc | \
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	691a      	ldr	r2, [r3, #16]
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	695b      	ldr	r3, [r3, #20]
 8006b20:	431a      	orrs	r2, r3
    pNodeConfig->Init.SourceDataSize | pNodeConfig->Init.DestDataSize           | \
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	699b      	ldr	r3, [r3, #24]
  pNode->CTCR =  pNodeConfig->Init.SourceInc | pNodeConfig->Init.DestinationInc | \
 8006b26:	431a      	orrs	r2, r3
    pNodeConfig->Init.SourceDataSize | pNodeConfig->Init.DestDataSize           | \
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	69db      	ldr	r3, [r3, #28]
 8006b2c:	431a      	orrs	r2, r3
      pNodeConfig->Init.DataAlignment| pNodeConfig->Init.SourceBurst            | \
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	6a1b      	ldr	r3, [r3, #32]
    pNodeConfig->Init.SourceDataSize | pNodeConfig->Init.DestDataSize           | \
 8006b32:	431a      	orrs	r2, r3
      pNodeConfig->Init.DataAlignment| pNodeConfig->Init.SourceBurst            | \
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b38:	431a      	orrs	r2, r3
        pNodeConfig->Init.DestBurst                                             | \
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      pNodeConfig->Init.DataAlignment| pNodeConfig->Init.SourceBurst            | \
 8006b3e:	431a      	orrs	r2, r3
          ((pNodeConfig->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b44:	3b01      	subs	r3, #1
 8006b46:	049b      	lsls	r3, r3, #18
        pNodeConfig->Init.DestBurst                                             | \
 8006b48:	431a      	orrs	r2, r3
            pNodeConfig->Init.TransferTriggerMode;
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	685b      	ldr	r3, [r3, #4]
          ((pNodeConfig->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8006b4e:	431a      	orrs	r2, r3
  pNode->CTCR =  pNodeConfig->Init.SourceInc | pNodeConfig->Init.DestinationInc | \
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	601a      	str	r2, [r3, #0]

  /* If SW request set the CTCR register to SW Request Mode*/
  if(pNodeConfig->Init.Request == MDMA_REQUEST_SW)
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b5c:	d105      	bne.n	8006b6a <HAL_MDMA_LinkedList_CreateNode+0x8a>
  {
    pNode->CTCR |= MDMA_CTCR_SWRM;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	601a      	str	r2, [r3, #0]
  -If the request is done by SW : BWM could be set to 1 or 0.
  -If the request is done by a peripheral :
     If mask address not set (0) => BWM must be set to 0
     If mask address set (different than 0) => BWM could be set to 1 or 0
  */
  if((pNodeConfig->Init.Request == MDMA_REQUEST_SW) || (pNodeConfig->PostRequestMaskAddress != 0U))
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b72:	d003      	beq.n	8006b7c <HAL_MDMA_LinkedList_CreateNode+0x9c>
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d005      	beq.n	8006b88 <HAL_MDMA_LinkedList_CreateNode+0xa8>
  {
    pNode->CTCR |=  MDMA_CTCR_BWM;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	601a      	str	r2, [r3, #0]
  }

  /* Set the new CBNDTR Register value */
  pNode->CBNDTR = ((pNodeConfig->BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC;
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b8c:	3b01      	subs	r3, #1
 8006b8e:	051a      	lsls	r2, r3, #20
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	605a      	str	r2, [r3, #4]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(pNodeConfig->Init.SourceBlockAddressOffset < 0)
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	da0e      	bge.n	8006bba <HAL_MDMA_LinkedList_CreateNode+0xda>
  {
    pNode->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	605a      	str	r2, [r3, #4]
    /*write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- pNodeConfig->Init.SourceBlockAddressOffset);
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bac:	425b      	negs	r3, r3
 8006bae:	60fb      	str	r3, [r7, #12]
    pNode->CBRUR = blockoffset & 0x0000FFFFU;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	b29a      	uxth	r2, r3
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	611a      	str	r2, [r3, #16]
 8006bb8:	e004      	b.n	8006bc4 <HAL_MDMA_LinkedList_CreateNode+0xe4>
  }
  else
  {
    /*write new CBRUR Register value : source repeat block offset */
    pNode->CBRUR = (((uint32_t) pNodeConfig->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bbe:	b29a      	uxth	r2, r3
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	611a      	str	r2, [r3, #16]
  }

  /* if block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(pNodeConfig->Init.DestBlockAddressOffset < 0)
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	da11      	bge.n	8006bf0 <HAL_MDMA_LinkedList_CreateNode+0x110>
  {
    pNode->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	605a      	str	r2, [r3, #4]
    /*write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- pNodeConfig->Init.DestBlockAddressOffset);
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bdc:	425b      	negs	r3, r3
 8006bde:	60fb      	str	r3, [r7, #12]
    pNode->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	691a      	ldr	r2, [r3, #16]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	041b      	lsls	r3, r3, #16
 8006be8:	431a      	orrs	r2, r3
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	611a      	str	r2, [r3, #16]
 8006bee:	e007      	b.n	8006c00 <HAL_MDMA_LinkedList_CreateNode+0x120>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    pNode->CBRUR |= ((((uint32_t)pNodeConfig->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	691a      	ldr	r2, [r3, #16]
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bf8:	041b      	lsls	r3, r3, #16
 8006bfa:	431a      	orrs	r2, r3
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	611a      	str	r2, [r3, #16]
  }

  /* Configure MDMA Link Node data length */
  pNode->CBNDTR |=  pNodeConfig->BlockDataLength;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	685a      	ldr	r2, [r3, #4]
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c08:	431a      	orrs	r2, r3
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	605a      	str	r2, [r3, #4]

  /* Configure MDMA Link Node destination address */
  pNode->CDAR = pNodeConfig->DstAddress;
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	60da      	str	r2, [r3, #12]

  /* Configure MDMA Link Node Source address */
  pNode->CSAR = pNodeConfig->SrcAddress;
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	609a      	str	r2, [r3, #8]

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData,  */
  if(pNodeConfig->Init.Request != MDMA_REQUEST_SW)
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c26:	d00c      	beq.n	8006c42 <HAL_MDMA_LinkedList_CreateNode+0x162>
  {
    /* Set the HW request in CTBR register  */
    pNode->CTBR = pNodeConfig->Init.Request & MDMA_CTBR_TSEL;
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	b2da      	uxtb	r2, r3
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	619a      	str	r2, [r3, #24]
    /* Set the HW request clear Mask and Data */
    pNode->CMAR = pNodeConfig->PostRequestMaskAddress;
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	621a      	str	r2, [r3, #32]
    pNode->CMDR = pNodeConfig->PostRequestMaskData;
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  addressMask = pNodeConfig->SrcAddress & 0xFF000000U;
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c46:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8006c4a:	60bb      	str	r3, [r7, #8]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c52:	d002      	beq.n	8006c5a <HAL_MDMA_LinkedList_CreateNode+0x17a>
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d105      	bne.n	8006c66 <HAL_MDMA_LinkedList_CreateNode+0x186>
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    pNode->CTBR |= MDMA_CTBR_SBUS;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	699b      	ldr	r3, [r3, #24]
 8006c5e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	619a      	str	r2, [r3, #24]
  }

  addressMask = pNodeConfig->DstAddress & 0xFF000000U;
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c6a:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8006c6e:	60bb      	str	r3, [r7, #8]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c76:	d002      	beq.n	8006c7e <HAL_MDMA_LinkedList_CreateNode+0x19e>
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d105      	bne.n	8006c8a <HAL_MDMA_LinkedList_CreateNode+0x1aa>
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    pNode->CTBR |= MDMA_CTBR_DBUS;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	699b      	ldr	r3, [r3, #24]
 8006c82:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	619a      	str	r2, [r3, #24]
  }

  return HAL_OK;
 8006c8a:	2300      	movs	r3, #0
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3714      	adds	r7, #20
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr

08006c98 <HAL_MDMA_LinkedList_AddNode>:
  *                    at the end of the list
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_LinkedList_AddNode(MDMA_HandleTypeDef *hmdma, MDMA_LinkNodeTypeDef *pNewNode, const MDMA_LinkNodeTypeDef *pPrevNode)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b089      	sub	sp, #36	@ 0x24
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	60f8      	str	r0, [r7, #12]
 8006ca0:	60b9      	str	r1, [r7, #8]
 8006ca2:	607a      	str	r2, [r7, #4]
  MDMA_LinkNodeTypeDef *pNode;
  uint32_t counter = 0, nodeInserted = 0;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	61bb      	str	r3, [r7, #24]
 8006ca8:	2300      	movs	r3, #0
 8006caa:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006cac:	2300      	movs	r3, #0
 8006cae:	74fb      	strb	r3, [r7, #19]

  /* Check the MDMA peripheral handle */
  if((hmdma == NULL) || (pNewNode == NULL))
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d002      	beq.n	8006cbc <HAL_MDMA_LinkedList_AddNode+0x24>
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d101      	bne.n	8006cc0 <HAL_MDMA_LinkedList_AddNode+0x28>
  {
    return HAL_ERROR;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	e0a9      	b.n	8006e14 <HAL_MDMA_LinkedList_AddNode+0x17c>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	d101      	bne.n	8006cce <HAL_MDMA_LinkedList_AddNode+0x36>
 8006cca:	2302      	movs	r3, #2
 8006ccc:	e0a2      	b.n	8006e14 <HAL_MDMA_LinkedList_AddNode+0x17c>
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	f040 8093 	bne.w	8006e0a <HAL_MDMA_LinkedList_AddNode+0x172>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2202      	movs	r2, #2
 8006ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Check if this is the first node (after the Inititlization node) */
    if((uint32_t)hmdma->FirstLinkedListNodeAddress == 0U)
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d116      	bne.n	8006d22 <HAL_MDMA_LinkedList_AddNode+0x8a>
    {
      if(pPrevNode == NULL)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d110      	bne.n	8006d1c <HAL_MDMA_LinkedList_AddNode+0x84>
      {
        /* if this is the first node after the initialization
        connect this node to the node 0 by updating
        the MDMA channel CLAR register to this node address */
        hmdma->Instance->CLAR = (uint32_t)pNewNode;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	68ba      	ldr	r2, [r7, #8]
 8006d00:	625a      	str	r2, [r3, #36]	@ 0x24
        /* Set the MDMA handle First linked List node*/
        hmdma->FirstLinkedListNodeAddress = pNewNode;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	68ba      	ldr	r2, [r7, #8]
 8006d06:	65da      	str	r2, [r3, #92]	@ 0x5c

        /*reset New node link */
        pNewNode->CLAR = 0;
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	615a      	str	r2, [r3, #20]

        /* Update the Handle last node address */
        hmdma->LastLinkedListNodeAddress = pNewNode;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	68ba      	ldr	r2, [r7, #8]
 8006d12:	661a      	str	r2, [r3, #96]	@ 0x60

        hmdma->LinkedListNodeCounter = 1;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2201      	movs	r2, #1
 8006d18:	665a      	str	r2, [r3, #100]	@ 0x64
 8006d1a:	e06c      	b.n	8006df6 <HAL_MDMA_LinkedList_AddNode+0x15e>
      }
      else
      {
        hal_status = HAL_ERROR;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	74fb      	strb	r3, [r7, #19]
 8006d20:	e069      	b.n	8006df6 <HAL_MDMA_LinkedList_AddNode+0x15e>
      }
    }
    else if(hmdma->FirstLinkedListNodeAddress != pNewNode)
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d26:	68ba      	ldr	r2, [r7, #8]
 8006d28:	429a      	cmp	r2, r3
 8006d2a:	d062      	beq.n	8006df2 <HAL_MDMA_LinkedList_AddNode+0x15a>
    {
      /* Check if the node to insert already exists*/
      pNode = hmdma->FirstLinkedListNodeAddress;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d30:	61fb      	str	r3, [r7, #28]
      while((counter < hmdma->LinkedListNodeCounter) && (hal_status == HAL_OK))
 8006d32:	e00c      	b.n	8006d4e <HAL_MDMA_LinkedList_AddNode+0xb6>
      {
        if(pNode->CLAR == (uint32_t)pNewNode)
 8006d34:	69fb      	ldr	r3, [r7, #28]
 8006d36:	695a      	ldr	r2, [r3, #20]
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d101      	bne.n	8006d42 <HAL_MDMA_LinkedList_AddNode+0xaa>
        {
          hal_status = HAL_ERROR; /* error this node already exist in the linked list and it is not first node */
 8006d3e:	2301      	movs	r3, #1
 8006d40:	74fb      	strb	r3, [r7, #19]
        }
        pNode = (MDMA_LinkNodeTypeDef *)pNode->CLAR;
 8006d42:	69fb      	ldr	r3, [r7, #28]
 8006d44:	695b      	ldr	r3, [r3, #20]
 8006d46:	61fb      	str	r3, [r7, #28]
        counter++;
 8006d48:	69bb      	ldr	r3, [r7, #24]
 8006d4a:	3301      	adds	r3, #1
 8006d4c:	61bb      	str	r3, [r7, #24]
      while((counter < hmdma->LinkedListNodeCounter) && (hal_status == HAL_OK))
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d52:	69ba      	ldr	r2, [r7, #24]
 8006d54:	429a      	cmp	r2, r3
 8006d56:	d202      	bcs.n	8006d5e <HAL_MDMA_LinkedList_AddNode+0xc6>
 8006d58:	7cfb      	ldrb	r3, [r7, #19]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d0ea      	beq.n	8006d34 <HAL_MDMA_LinkedList_AddNode+0x9c>
      }

      if(hal_status == HAL_OK)
 8006d5e:	7cfb      	ldrb	r3, [r7, #19]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d148      	bne.n	8006df6 <HAL_MDMA_LinkedList_AddNode+0x15e>
      {
        /* Check if the previous node is the last one in the current list or zero */
        if((pPrevNode == hmdma->LastLinkedListNodeAddress) || (pPrevNode == NULL))
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d002      	beq.n	8006d74 <HAL_MDMA_LinkedList_AddNode+0xdc>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d111      	bne.n	8006d98 <HAL_MDMA_LinkedList_AddNode+0x100>
        {
          /* insert the new node at the end of the list */
          pNewNode->CLAR = hmdma->LastLinkedListNodeAddress->CLAR;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d78:	695a      	ldr	r2, [r3, #20]
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	615a      	str	r2, [r3, #20]
          hmdma->LastLinkedListNodeAddress->CLAR = (uint32_t)pNewNode;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d82:	68ba      	ldr	r2, [r7, #8]
 8006d84:	615a      	str	r2, [r3, #20]
          /* Update the Handle last node address */
          hmdma->LastLinkedListNodeAddress = pNewNode;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	68ba      	ldr	r2, [r7, #8]
 8006d8a:	661a      	str	r2, [r3, #96]	@ 0x60
          /* Increment the linked list node counter */
          hmdma->LinkedListNodeCounter++;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d90:	1c5a      	adds	r2, r3, #1
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	665a      	str	r2, [r3, #100]	@ 0x64
 8006d96:	e02e      	b.n	8006df6 <HAL_MDMA_LinkedList_AddNode+0x15e>
        }
        else
        {
          /*insert the new node after the pPreviousNode node */
          pNode = hmdma->FirstLinkedListNodeAddress;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d9c:	61fb      	str	r3, [r7, #28]
          counter = 0;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	61bb      	str	r3, [r7, #24]
          while((counter < hmdma->LinkedListNodeCounter) && (nodeInserted == 0U))
 8006da2:	e018      	b.n	8006dd6 <HAL_MDMA_LinkedList_AddNode+0x13e>
          {
            counter++;
 8006da4:	69bb      	ldr	r3, [r7, #24]
 8006da6:	3301      	adds	r3, #1
 8006da8:	61bb      	str	r3, [r7, #24]
            if(pNode == pPrevNode)
 8006daa:	69fa      	ldr	r2, [r7, #28]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d10e      	bne.n	8006dd0 <HAL_MDMA_LinkedList_AddNode+0x138>
            {
              /*Insert the new node after the previous one */
              pNewNode->CLAR = pNode->CLAR;
 8006db2:	69fb      	ldr	r3, [r7, #28]
 8006db4:	695a      	ldr	r2, [r3, #20]
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	615a      	str	r2, [r3, #20]
              pNode->CLAR = (uint32_t)pNewNode;
 8006dba:	68ba      	ldr	r2, [r7, #8]
 8006dbc:	69fb      	ldr	r3, [r7, #28]
 8006dbe:	615a      	str	r2, [r3, #20]
              /* Increment the linked list node counter */
              hmdma->LinkedListNodeCounter++;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006dc4:	1c5a      	adds	r2, r3, #1
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	665a      	str	r2, [r3, #100]	@ 0x64
              nodeInserted = 1;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	617b      	str	r3, [r7, #20]
 8006dce:	e002      	b.n	8006dd6 <HAL_MDMA_LinkedList_AddNode+0x13e>
            }
            else
            {
              pNode = (MDMA_LinkNodeTypeDef *)pNode->CLAR;
 8006dd0:	69fb      	ldr	r3, [r7, #28]
 8006dd2:	695b      	ldr	r3, [r3, #20]
 8006dd4:	61fb      	str	r3, [r7, #28]
          while((counter < hmdma->LinkedListNodeCounter) && (nodeInserted == 0U))
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006dda:	69ba      	ldr	r2, [r7, #24]
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	d202      	bcs.n	8006de6 <HAL_MDMA_LinkedList_AddNode+0x14e>
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d0de      	beq.n	8006da4 <HAL_MDMA_LinkedList_AddNode+0x10c>
            }
          }

          if(nodeInserted == 0U)
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d104      	bne.n	8006df6 <HAL_MDMA_LinkedList_AddNode+0x15e>
          {
            hal_status = HAL_ERROR;
 8006dec:	2301      	movs	r3, #1
 8006dee:	74fb      	strb	r3, [r7, #19]
 8006df0:	e001      	b.n	8006df6 <HAL_MDMA_LinkedList_AddNode+0x15e>
        }
      }
    }
    else
    {
      hal_status = HAL_ERROR;
 8006df2:	2301      	movs	r3, #1
 8006df4:	74fb      	strb	r3, [r7, #19]
    }

    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    hmdma->State = HAL_MDMA_STATE_READY;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2201      	movs	r2, #1
 8006e02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return hal_status;
 8006e06:	7cfb      	ldrb	r3, [r7, #19]
 8006e08:	e004      	b.n	8006e14 <HAL_MDMA_LinkedList_AddNode+0x17c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Return error status */
    return HAL_BUSY;
 8006e12:	2302      	movs	r3, #2
  }
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3724      	adds	r7, #36	@ 0x24
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr

08006e20 <HAL_MDMA_LinkedList_EnableCircularMode>:
  * @param  hmdma : Pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_LinkedList_EnableCircularMode(MDMA_HandleTypeDef *hmdma)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b085      	sub	sp, #20
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	73fb      	strb	r3, [r7, #15]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d101      	bne.n	8006e36 <HAL_MDMA_LinkedList_EnableCircularMode+0x16>
  {
    return HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	e031      	b.n	8006e9a <HAL_MDMA_LinkedList_EnableCircularMode+0x7a>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d101      	bne.n	8006e44 <HAL_MDMA_LinkedList_EnableCircularMode+0x24>
 8006e40:	2302      	movs	r3, #2
 8006e42:	e02a      	b.n	8006e9a <HAL_MDMA_LinkedList_EnableCircularMode+0x7a>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2201      	movs	r2, #1
 8006e48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d117      	bne.n	8006e88 <HAL_MDMA_LinkedList_EnableCircularMode+0x68>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2202      	movs	r2, #2
 8006e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* If first and last node are null (no nodes in the list) : return error*/
    if(((uint32_t)hmdma->FirstLinkedListNodeAddress == 0U) || ((uint32_t)hmdma->LastLinkedListNodeAddress == 0U) || (hmdma->LinkedListNodeCounter == 0U))
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d007      	beq.n	8006e78 <HAL_MDMA_LinkedList_EnableCircularMode+0x58>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d003      	beq.n	8006e78 <HAL_MDMA_LinkedList_EnableCircularMode+0x58>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d102      	bne.n	8006e7e <HAL_MDMA_LinkedList_EnableCircularMode+0x5e>
    {
      hal_status = HAL_ERROR;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	73fb      	strb	r3, [r7, #15]
 8006e7c:	e004      	b.n	8006e88 <HAL_MDMA_LinkedList_EnableCircularMode+0x68>
    }
    else
    {
      /* to enable circular mode Last Node should be connected to first node */
      hmdma->LastLinkedListNodeAddress->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e86:	615a      	str	r2, [r3, #20]
    }

  }
  /* Process unlocked */
  __HAL_UNLOCK(hmdma);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  hmdma->State = HAL_MDMA_STATE_READY;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2201      	movs	r2, #1
 8006e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return hal_status;
 8006e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3714      	adds	r7, #20
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr

08006ea6 <HAL_MDMA_Start_IT>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount      : The number of a blocks to be transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Start_IT(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 8006ea6:	b580      	push	{r7, lr}
 8006ea8:	b086      	sub	sp, #24
 8006eaa:	af02      	add	r7, sp, #8
 8006eac:	60f8      	str	r0, [r7, #12]
 8006eae:	60b9      	str	r1, [r7, #8]
 8006eb0:	607a      	str	r2, [r7, #4]
 8006eb2:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_MDMA_TRANSFER_LENGTH(BlockDataLength));
  assert_param(IS_MDMA_BLOCK_COUNT(BlockCount));

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d101      	bne.n	8006ebe <HAL_MDMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	e070      	b.n	8006fa0 <HAL_MDMA_Start_IT+0xfa>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d101      	bne.n	8006ecc <HAL_MDMA_Start_IT+0x26>
 8006ec8:	2302      	movs	r3, #2
 8006eca:	e069      	b.n	8006fa0 <HAL_MDMA_Start_IT+0xfa>
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2201      	movs	r2, #1
 8006ed0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d158      	bne.n	8006f92 <HAL_MDMA_Start_IT+0xec>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	2202      	movs	r2, #2
 8006ee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Initialize the error code */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2200      	movs	r2, #0
 8006eec:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Disable the peripheral */
    __HAL_MDMA_DISABLE(hmdma);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	68da      	ldr	r2, [r3, #12]
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f022 0201 	bic.w	r2, r2, #1
 8006efc:	60da      	str	r2, [r3, #12]

    /* Configure the source, destination address and the data length */
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
 8006efe:	69bb      	ldr	r3, [r7, #24]
 8006f00:	9300      	str	r3, [sp, #0]
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	68b9      	ldr	r1, [r7, #8]
 8006f08:	68f8      	ldr	r0, [r7, #12]
 8006f0a:	f000 f9db 	bl	80072c4 <MDMA_SetConfig>

    /* Enable Common interrupts i.e Transfer Error IT and Channel Transfer Complete IT*/
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	68da      	ldr	r2, [r3, #12]
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f042 0206 	orr.w	r2, r2, #6
 8006f1c:	60da      	str	r2, [r3, #12]

    if(hmdma->XferBlockCpltCallback != NULL)
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d007      	beq.n	8006f36 <HAL_MDMA_Start_IT+0x90>
    {
      /* if Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	68da      	ldr	r2, [r3, #12]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f042 0210 	orr.w	r2, r2, #16
 8006f34:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d007      	beq.n	8006f4e <HAL_MDMA_Start_IT+0xa8>
    {
      /* if Repeated Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	68da      	ldr	r2, [r3, #12]
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f042 0208 	orr.w	r2, r2, #8
 8006f4c:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferBufferCpltCallback != NULL)
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d007      	beq.n	8006f66 <HAL_MDMA_Start_IT+0xc0>
    {
      /* if buffer transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	68da      	ldr	r2, [r3, #12]
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f042 0220 	orr.w	r2, r2, #32
 8006f64:	60da      	str	r2, [r3, #12]
    }

    /* Enable the Peripheral */
    __HAL_MDMA_ENABLE(hmdma);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	68da      	ldr	r2, [r3, #12]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f042 0201 	orr.w	r2, r2, #1
 8006f74:	60da      	str	r2, [r3, #12]

    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f7e:	d10e      	bne.n	8006f9e <HAL_MDMA_Start_IT+0xf8>
    {
      /* activate If SW request mode*/
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	68da      	ldr	r2, [r3, #12]
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8006f8e:	60da      	str	r2, [r3, #12]
 8006f90:	e005      	b.n	8006f9e <HAL_MDMA_Start_IT+0xf8>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2200      	movs	r2, #0
 8006f96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Return error status */
    return HAL_BUSY;
 8006f9a:	2302      	movs	r3, #2
 8006f9c:	e000      	b.n	8006fa0 <HAL_MDMA_Start_IT+0xfa>
  }

  return HAL_OK;
 8006f9e:	2300      	movs	r3, #0
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3710      	adds	r7, #16
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}

08006fa8 <HAL_MDMA_GenerateSWRequest>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_GenerateSWRequest(MDMA_HandleTypeDef *hmdma)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b085      	sub	sp, #20
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  uint32_t request_mode;

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d101      	bne.n	8006fba <HAL_MDMA_GenerateSWRequest+0x12>
  {
    return HAL_ERROR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	e02a      	b.n	8007010 <HAL_MDMA_GenerateSWRequest+0x68>
  }

  /* Get the softawre request mode */
  request_mode = hmdma->Instance->CTCR & MDMA_CTCR_SWRM;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	691b      	ldr	r3, [r3, #16]
 8006fc0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006fc4:	60fb      	str	r3, [r7, #12]

  if((hmdma->Instance->CCR &  MDMA_CCR_EN) == 0U)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	68db      	ldr	r3, [r3, #12]
 8006fcc:	f003 0301 	and.w	r3, r3, #1
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d104      	bne.n	8006fde <HAL_MDMA_GenerateSWRequest+0x36>
  {
    /* if no Transfer on going (MDMA enable bit not set) return error */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2280      	movs	r2, #128	@ 0x80
 8006fd8:	669a      	str	r2, [r3, #104]	@ 0x68

    return HAL_ERROR;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	e018      	b.n	8007010 <HAL_MDMA_GenerateSWRequest+0x68>
  }
  else if(((hmdma->Instance->CISR &  MDMA_CISR_CRQA) != 0U) || (request_mode == 0U))
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d102      	bne.n	8006ff2 <HAL_MDMA_GenerateSWRequest+0x4a>
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d105      	bne.n	8006ffe <HAL_MDMA_GenerateSWRequest+0x56>
  {
    /* if an MDMA ongoing request has not yet end or if request mode is not SW request return error */
    hmdma->ErrorCode = HAL_MDMA_ERROR_BUSY;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006ff8:	669a      	str	r2, [r3, #104]	@ 0x68

    return HAL_ERROR;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	e008      	b.n	8007010 <HAL_MDMA_GenerateSWRequest+0x68>
  }
  else
  {
    /* Set the SW request bit to activate the request on the Channel */
    hmdma->Instance->CCR |= MDMA_CCR_SWRQ;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	68da      	ldr	r2, [r3, #12]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800700c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800700e:	2300      	movs	r3, #0
  }
}
 8007010:	4618      	mov	r0, r3
 8007012:	3714      	adds	r7, #20
 8007014:	46bd      	mov	sp, r7
 8007016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701a:	4770      	bx	lr

0800701c <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b086      	sub	sp, #24
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 8007024:	2300      	movs	r3, #0
 8007026:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007028:	4b91      	ldr	r3, [pc, #580]	@ (8007270 <HAL_MDMA_IRQHandler+0x254>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a91      	ldr	r2, [pc, #580]	@ (8007274 <HAL_MDMA_IRQHandler+0x258>)
 800702e:	fba2 2303 	umull	r2, r3, r2, r3
 8007032:	0a9b      	lsrs	r3, r3, #10
 8007034:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	461a      	mov	r2, r3
 800703c:	4b8e      	ldr	r3, [pc, #568]	@ (8007278 <HAL_MDMA_IRQHandler+0x25c>)
 800703e:	4413      	add	r3, r2
 8007040:	099b      	lsrs	r3, r3, #6
 8007042:	f003 031f 	and.w	r3, r3, #31
 8007046:	2201      	movs	r2, #1
 8007048:	fa02 f303 	lsl.w	r3, r2, r3
 800704c:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800704e:	f04f 43a4 	mov.w	r3, #1375731712	@ 0x52000000
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	4013      	ands	r3, r2
 8007058:	2b00      	cmp	r3, #0
 800705a:	f000 812d 	beq.w	80072b8 <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f003 0301 	and.w	r3, r3, #1
 8007068:	2b00      	cmp	r3, #0
 800706a:	d054      	beq.n	8007116 <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	68db      	ldr	r3, [r3, #12]
 8007072:	f003 0302 	and.w	r3, r3, #2
 8007076:	2b00      	cmp	r3, #0
 8007078:	d04d      	beq.n	8007116 <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	68da      	ldr	r2, [r3, #12]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f022 0202 	bic.w	r2, r2, #2
 8007088:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007098:	2b00      	cmp	r3, #0
 800709a:	d106      	bne.n	80070aa <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80070a0:	f043 0201 	orr.w	r2, r3, #1
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	669a      	str	r2, [r3, #104]	@ 0x68
 80070a8:	e005      	b.n	80070b6 <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80070ae:	f043 0202 	orr.w	r2, r3, #2
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d005      	beq.n	80070cc <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80070c4:	f043 0204 	orr.w	r2, r3, #4
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d005      	beq.n	80070e2 <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80070da:	f043 0208 	orr.w	r2, r3, #8
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d005      	beq.n	80070f8 <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80070f0:	f043 0210 	orr.w	r2, r3, #16
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d005      	beq.n	800710e <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007106:	f043 0220 	orr.w	r2, r3, #32
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	2201      	movs	r2, #1
 8007114:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f003 0310 	and.w	r3, r3, #16
 8007120:	2b00      	cmp	r3, #0
 8007122:	d012      	beq.n	800714a <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	68db      	ldr	r3, [r3, #12]
 800712a:	f003 0320 	and.w	r3, r3, #32
 800712e:	2b00      	cmp	r3, #0
 8007130:	d00b      	beq.n	800714a <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	2210      	movs	r2, #16
 8007138:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800713e:	2b00      	cmp	r3, #0
 8007140:	d003      	beq.n	800714a <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f003 0308 	and.w	r3, r3, #8
 8007154:	2b00      	cmp	r3, #0
 8007156:	d012      	beq.n	800717e <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	68db      	ldr	r3, [r3, #12]
 800715e:	f003 0310 	and.w	r3, r3, #16
 8007162:	2b00      	cmp	r3, #0
 8007164:	d00b      	beq.n	800717e <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	2208      	movs	r2, #8
 800716c:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007172:	2b00      	cmp	r3, #0
 8007174:	d003      	beq.n	800717e <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f003 0304 	and.w	r3, r3, #4
 8007188:	2b00      	cmp	r3, #0
 800718a:	d012      	beq.n	80071b2 <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	68db      	ldr	r3, [r3, #12]
 8007192:	f003 0308 	and.w	r3, r3, #8
 8007196:	2b00      	cmp	r3, #0
 8007198:	d00b      	beq.n	80071b2 <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	2204      	movs	r2, #4
 80071a0:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d003      	beq.n	80071b2 <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f003 0302 	and.w	r3, r3, #2
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d039      	beq.n	8007234 <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	68db      	ldr	r3, [r3, #12]
 80071c6:	f003 0304 	and.w	r3, r3, #4
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d032      	beq.n	8007234 <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	68da      	ldr	r2, [r3, #12]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 80071dc:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071e4:	b2db      	uxtb	r3, r3
 80071e6:	2b04      	cmp	r3, #4
 80071e8:	d110      	bne.n	800720c <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2200      	movs	r2, #0
 80071ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2201      	movs	r2, #1
 80071f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        if(hmdma->XferAbortCallback != NULL)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d05c      	beq.n	80072bc <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	4798      	blx	r3
        }
        return;
 800720a:	e057      	b.n	80072bc <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	2202      	movs	r2, #2
 8007212:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2200      	movs	r2, #0
 8007218:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2201      	movs	r2, #1
 8007220:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if(hmdma->XferCpltCallback != NULL)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007228:	2b00      	cmp	r3, #0
 800722a:	d003      	beq.n	8007234 <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007238:	2b00      	cmp	r3, #0
 800723a:	d040      	beq.n	80072be <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2204      	movs	r2, #4
 8007240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	68da      	ldr	r2, [r3, #12]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f022 0201 	bic.w	r2, r2, #1
 8007252:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	3301      	adds	r3, #1
 8007258:	60bb      	str	r3, [r7, #8]
 800725a:	697a      	ldr	r2, [r7, #20]
 800725c:	429a      	cmp	r2, r3
 800725e:	d30d      	bcc.n	800727c <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	68db      	ldr	r3, [r3, #12]
 8007266:	f003 0301 	and.w	r3, r3, #1
 800726a:	2b00      	cmp	r3, #0
 800726c:	d1f2      	bne.n	8007254 <HAL_MDMA_IRQHandler+0x238>
 800726e:	e006      	b.n	800727e <HAL_MDMA_IRQHandler+0x262>
 8007270:	24000000 	.word	0x24000000
 8007274:	1b4e81b5 	.word	0x1b4e81b5
 8007278:	adffffc0 	.word	0xadffffc0
        break;
 800727c:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2200      	movs	r2, #0
 8007282:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	68db      	ldr	r3, [r3, #12]
 800728c:	f003 0301 	and.w	r3, r3, #1
 8007290:	2b00      	cmp	r3, #0
 8007292:	d004      	beq.n	800729e <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2203      	movs	r2, #3
 8007298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800729c:	e003      	b.n	80072a6 <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2201      	movs	r2, #1
 80072a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d007      	beq.n	80072be <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	4798      	blx	r3
 80072b6:	e002      	b.n	80072be <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 80072b8:	bf00      	nop
 80072ba:	e000      	b.n	80072be <HAL_MDMA_IRQHandler+0x2a2>
        return;
 80072bc:	bf00      	nop
    }
  }
}
 80072be:	3718      	adds	r7, #24
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <MDMA_SetConfig>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount: The number of blocks to be transferred
  * @retval HAL status
  */
static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b087      	sub	sp, #28
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	60f8      	str	r0, [r7, #12]
 80072cc:	60b9      	str	r1, [r7, #8]
 80072ce:	607a      	str	r2, [r7, #4]
 80072d0:	603b      	str	r3, [r7, #0]
  uint32_t addressMask;

  /* Configure the MDMA Channel data length */
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	695a      	ldr	r2, [r3, #20]
 80072d8:	4b31      	ldr	r3, [pc, #196]	@ (80073a0 <MDMA_SetConfig+0xdc>)
 80072da:	4013      	ands	r3, r2
 80072dc:	683a      	ldr	r2, [r7, #0]
 80072de:	f3c2 0110 	ubfx	r1, r2, #0, #17
 80072e2:	68fa      	ldr	r2, [r7, #12]
 80072e4:	6812      	ldr	r2, [r2, #0]
 80072e6:	430b      	orrs	r3, r1
 80072e8:	6153      	str	r3, [r2, #20]

  /* Configure the MDMA block repeat count */
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	695b      	ldr	r3, [r3, #20]
 80072f0:	f3c3 0113 	ubfx	r1, r3, #0, #20
 80072f4:	6a3b      	ldr	r3, [r7, #32]
 80072f6:	3b01      	subs	r3, #1
 80072f8:	051a      	lsls	r2, r3, #20
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	430a      	orrs	r2, r1
 8007300:	615a      	str	r2, [r3, #20]

  /* Clear all interrupt flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	221f      	movs	r2, #31
 8007308:	605a      	str	r2, [r3, #4]

  /* Configure MDMA Channel destination address */
  hmdma->Instance->CDAR = DstAddress;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	687a      	ldr	r2, [r7, #4]
 8007310:	61da      	str	r2, [r3, #28]

  /* Configure MDMA Channel Source address */
  hmdma->Instance->CSAR = SrcAddress;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	68ba      	ldr	r2, [r7, #8]
 8007318:	619a      	str	r2, [r3, #24]

  addressMask = SrcAddress & 0xFF000000U;
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8007320:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007328:	d002      	beq.n	8007330 <MDMA_SetConfig+0x6c>
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d108      	bne.n	8007342 <MDMA_SetConfig+0x7e>
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800733e:	629a      	str	r2, [r3, #40]	@ 0x28
 8007340:	e007      	b.n	8007352 <MDMA_SetConfig+0x8e>
  }
  else
  {
    /*The AXI bus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8007350:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  addressMask = DstAddress & 0xFF000000U;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8007358:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007360:	d002      	beq.n	8007368 <MDMA_SetConfig+0xa4>
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d108      	bne.n	800737a <MDMA_SetConfig+0xb6>
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8007376:	629a      	str	r2, [r3, #40]	@ 0x28
 8007378:	e007      	b.n	800738a <MDMA_SetConfig+0xc6>
  }
  else
  {
    /*The AXI bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8007388:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Set the linked list register to the first node of the list */
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8007394:	bf00      	nop
 8007396:	371c      	adds	r7, #28
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr
 80073a0:	fffe0000 	.word	0xfffe0000

080073a4 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b085      	sub	sp, #20
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	68d9      	ldr	r1, [r3, #12]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	691a      	ldr	r2, [r3, #16]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	430a      	orrs	r2, r1
 80073ba:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	695a      	ldr	r2, [r3, #20]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	699b      	ldr	r3, [r3, #24]
 80073c4:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80073ca:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6a1b      	ldr	r3, [r3, #32]
 80073d0:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 80073d6:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073dc:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 80073e2:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073e8:	3b01      	subs	r3, #1
 80073ea:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 80073ec:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80073f8:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80073fa:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007404:	d107      	bne.n	8007416 <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	691a      	ldr	r2, [r3, #16]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 8007414:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	2200      	movs	r2, #0
 800741c:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007422:	2b00      	cmp	r3, #0
 8007424:	da11      	bge.n	800744a <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	695a      	ldr	r2, [r3, #20]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8007434:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800743a:	425b      	negs	r3, r3
 800743c:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	68fa      	ldr	r2, [r7, #12]
 8007444:	b292      	uxth	r2, r2
 8007446:	621a      	str	r2, [r3, #32]
 8007448:	e006      	b.n	8007458 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800744e:	461a      	mov	r2, r3
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	b292      	uxth	r2, r2
 8007456:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800745c:	2b00      	cmp	r3, #0
 800745e:	da15      	bge.n	800748c <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	695a      	ldr	r2, [r3, #20]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 800746e:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007474:	425b      	negs	r3, r3
 8007476:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	6a19      	ldr	r1, [r3, #32]
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	041a      	lsls	r2, r3, #16
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	430a      	orrs	r2, r1
 8007488:	621a      	str	r2, [r3, #32]
 800748a:	e009      	b.n	80074a0 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	6a19      	ldr	r1, [r3, #32]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007496:	041a      	lsls	r2, r3, #16
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	430a      	orrs	r2, r1
 800749e:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074a8:	d006      	beq.n	80074b8 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	685a      	ldr	r2, [r3, #4]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	b2d2      	uxtb	r2, r2
 80074b4:	629a      	str	r2, [r3, #40]	@ 0x28
 80074b6:	e003      	b.n	80074c0 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	2200      	movs	r2, #0
 80074be:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	2200      	movs	r2, #0
 80074c6:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80074c8:	bf00      	nop
 80074ca:	3714      	adds	r7, #20
 80074cc:	46bd      	mov	sp, r7
 80074ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d2:	4770      	bx	lr

080074d4 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b084      	sub	sp, #16
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80074dc:	4b29      	ldr	r3, [pc, #164]	@ (8007584 <HAL_PWREx_ConfigSupply+0xb0>)
 80074de:	68db      	ldr	r3, [r3, #12]
 80074e0:	f003 0307 	and.w	r3, r3, #7
 80074e4:	2b06      	cmp	r3, #6
 80074e6:	d00a      	beq.n	80074fe <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80074e8:	4b26      	ldr	r3, [pc, #152]	@ (8007584 <HAL_PWREx_ConfigSupply+0xb0>)
 80074ea:	68db      	ldr	r3, [r3, #12]
 80074ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d001      	beq.n	80074fa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	e040      	b.n	800757c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80074fa:	2300      	movs	r3, #0
 80074fc:	e03e      	b.n	800757c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80074fe:	4b21      	ldr	r3, [pc, #132]	@ (8007584 <HAL_PWREx_ConfigSupply+0xb0>)
 8007500:	68db      	ldr	r3, [r3, #12]
 8007502:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8007506:	491f      	ldr	r1, [pc, #124]	@ (8007584 <HAL_PWREx_ConfigSupply+0xb0>)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	4313      	orrs	r3, r2
 800750c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800750e:	f7fb fee3 	bl	80032d8 <HAL_GetTick>
 8007512:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007514:	e009      	b.n	800752a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007516:	f7fb fedf 	bl	80032d8 <HAL_GetTick>
 800751a:	4602      	mov	r2, r0
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	1ad3      	subs	r3, r2, r3
 8007520:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007524:	d901      	bls.n	800752a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007526:	2301      	movs	r3, #1
 8007528:	e028      	b.n	800757c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800752a:	4b16      	ldr	r3, [pc, #88]	@ (8007584 <HAL_PWREx_ConfigSupply+0xb0>)
 800752c:	685b      	ldr	r3, [r3, #4]
 800752e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007532:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007536:	d1ee      	bne.n	8007516 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2b1e      	cmp	r3, #30
 800753c:	d008      	beq.n	8007550 <HAL_PWREx_ConfigSupply+0x7c>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2b2e      	cmp	r3, #46	@ 0x2e
 8007542:	d005      	beq.n	8007550 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2b1d      	cmp	r3, #29
 8007548:	d002      	beq.n	8007550 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2b2d      	cmp	r3, #45	@ 0x2d
 800754e:	d114      	bne.n	800757a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8007550:	f7fb fec2 	bl	80032d8 <HAL_GetTick>
 8007554:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8007556:	e009      	b.n	800756c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007558:	f7fb febe 	bl	80032d8 <HAL_GetTick>
 800755c:	4602      	mov	r2, r0
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	1ad3      	subs	r3, r2, r3
 8007562:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007566:	d901      	bls.n	800756c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8007568:	2301      	movs	r3, #1
 800756a:	e007      	b.n	800757c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800756c:	4b05      	ldr	r3, [pc, #20]	@ (8007584 <HAL_PWREx_ConfigSupply+0xb0>)
 800756e:	68db      	ldr	r3, [r3, #12]
 8007570:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007574:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007578:	d1ee      	bne.n	8007558 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800757a:	2300      	movs	r3, #0
}
 800757c:	4618      	mov	r0, r3
 800757e:	3710      	adds	r7, #16
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}
 8007584:	58024800 	.word	0x58024800

08007588 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b08c      	sub	sp, #48	@ 0x30
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d102      	bne.n	800759c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007596:	2301      	movs	r3, #1
 8007598:	f000 bc48 	b.w	8007e2c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f003 0301 	and.w	r3, r3, #1
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	f000 8088 	beq.w	80076ba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80075aa:	4b99      	ldr	r3, [pc, #612]	@ (8007810 <HAL_RCC_OscConfig+0x288>)
 80075ac:	691b      	ldr	r3, [r3, #16]
 80075ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80075b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80075b4:	4b96      	ldr	r3, [pc, #600]	@ (8007810 <HAL_RCC_OscConfig+0x288>)
 80075b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80075ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075bc:	2b10      	cmp	r3, #16
 80075be:	d007      	beq.n	80075d0 <HAL_RCC_OscConfig+0x48>
 80075c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075c2:	2b18      	cmp	r3, #24
 80075c4:	d111      	bne.n	80075ea <HAL_RCC_OscConfig+0x62>
 80075c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075c8:	f003 0303 	and.w	r3, r3, #3
 80075cc:	2b02      	cmp	r3, #2
 80075ce:	d10c      	bne.n	80075ea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075d0:	4b8f      	ldr	r3, [pc, #572]	@ (8007810 <HAL_RCC_OscConfig+0x288>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d06d      	beq.n	80076b8 <HAL_RCC_OscConfig+0x130>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d169      	bne.n	80076b8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80075e4:	2301      	movs	r3, #1
 80075e6:	f000 bc21 	b.w	8007e2c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80075f2:	d106      	bne.n	8007602 <HAL_RCC_OscConfig+0x7a>
 80075f4:	4b86      	ldr	r3, [pc, #536]	@ (8007810 <HAL_RCC_OscConfig+0x288>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a85      	ldr	r2, [pc, #532]	@ (8007810 <HAL_RCC_OscConfig+0x288>)
 80075fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80075fe:	6013      	str	r3, [r2, #0]
 8007600:	e02e      	b.n	8007660 <HAL_RCC_OscConfig+0xd8>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d10c      	bne.n	8007624 <HAL_RCC_OscConfig+0x9c>
 800760a:	4b81      	ldr	r3, [pc, #516]	@ (8007810 <HAL_RCC_OscConfig+0x288>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a80      	ldr	r2, [pc, #512]	@ (8007810 <HAL_RCC_OscConfig+0x288>)
 8007610:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007614:	6013      	str	r3, [r2, #0]
 8007616:	4b7e      	ldr	r3, [pc, #504]	@ (8007810 <HAL_RCC_OscConfig+0x288>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a7d      	ldr	r2, [pc, #500]	@ (8007810 <HAL_RCC_OscConfig+0x288>)
 800761c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007620:	6013      	str	r3, [r2, #0]
 8007622:	e01d      	b.n	8007660 <HAL_RCC_OscConfig+0xd8>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800762c:	d10c      	bne.n	8007648 <HAL_RCC_OscConfig+0xc0>
 800762e:	4b78      	ldr	r3, [pc, #480]	@ (8007810 <HAL_RCC_OscConfig+0x288>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a77      	ldr	r2, [pc, #476]	@ (8007810 <HAL_RCC_OscConfig+0x288>)
 8007634:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007638:	6013      	str	r3, [r2, #0]
 800763a:	4b75      	ldr	r3, [pc, #468]	@ (8007810 <HAL_RCC_OscConfig+0x288>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a74      	ldr	r2, [pc, #464]	@ (8007810 <HAL_RCC_OscConfig+0x288>)
 8007640:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007644:	6013      	str	r3, [r2, #0]
 8007646:	e00b      	b.n	8007660 <HAL_RCC_OscConfig+0xd8>
 8007648:	4b71      	ldr	r3, [pc, #452]	@ (8007810 <HAL_RCC_OscConfig+0x288>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a70      	ldr	r2, [pc, #448]	@ (8007810 <HAL_RCC_OscConfig+0x288>)
 800764e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007652:	6013      	str	r3, [r2, #0]
 8007654:	4b6e      	ldr	r3, [pc, #440]	@ (8007810 <HAL_RCC_OscConfig+0x288>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a6d      	ldr	r2, [pc, #436]	@ (8007810 <HAL_RCC_OscConfig+0x288>)
 800765a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800765e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d013      	beq.n	8007690 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007668:	f7fb fe36 	bl	80032d8 <HAL_GetTick>
 800766c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800766e:	e008      	b.n	8007682 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007670:	f7fb fe32 	bl	80032d8 <HAL_GetTick>
 8007674:	4602      	mov	r2, r0
 8007676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007678:	1ad3      	subs	r3, r2, r3
 800767a:	2b64      	cmp	r3, #100	@ 0x64
 800767c:	d901      	bls.n	8007682 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800767e:	2303      	movs	r3, #3
 8007680:	e3d4      	b.n	8007e2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007682:	4b63      	ldr	r3, [pc, #396]	@ (8007810 <HAL_RCC_OscConfig+0x288>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800768a:	2b00      	cmp	r3, #0
 800768c:	d0f0      	beq.n	8007670 <HAL_RCC_OscConfig+0xe8>
 800768e:	e014      	b.n	80076ba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007690:	f7fb fe22 	bl	80032d8 <HAL_GetTick>
 8007694:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007696:	e008      	b.n	80076aa <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007698:	f7fb fe1e 	bl	80032d8 <HAL_GetTick>
 800769c:	4602      	mov	r2, r0
 800769e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a0:	1ad3      	subs	r3, r2, r3
 80076a2:	2b64      	cmp	r3, #100	@ 0x64
 80076a4:	d901      	bls.n	80076aa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80076a6:	2303      	movs	r3, #3
 80076a8:	e3c0      	b.n	8007e2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80076aa:	4b59      	ldr	r3, [pc, #356]	@ (8007810 <HAL_RCC_OscConfig+0x288>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d1f0      	bne.n	8007698 <HAL_RCC_OscConfig+0x110>
 80076b6:	e000      	b.n	80076ba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80076b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f003 0302 	and.w	r3, r3, #2
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	f000 80ca 	beq.w	800785c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80076c8:	4b51      	ldr	r3, [pc, #324]	@ (8007810 <HAL_RCC_OscConfig+0x288>)
 80076ca:	691b      	ldr	r3, [r3, #16]
 80076cc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80076d0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80076d2:	4b4f      	ldr	r3, [pc, #316]	@ (8007810 <HAL_RCC_OscConfig+0x288>)
 80076d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076d6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80076d8:	6a3b      	ldr	r3, [r7, #32]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d007      	beq.n	80076ee <HAL_RCC_OscConfig+0x166>
 80076de:	6a3b      	ldr	r3, [r7, #32]
 80076e0:	2b18      	cmp	r3, #24
 80076e2:	d156      	bne.n	8007792 <HAL_RCC_OscConfig+0x20a>
 80076e4:	69fb      	ldr	r3, [r7, #28]
 80076e6:	f003 0303 	and.w	r3, r3, #3
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d151      	bne.n	8007792 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80076ee:	4b48      	ldr	r3, [pc, #288]	@ (8007810 <HAL_RCC_OscConfig+0x288>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f003 0304 	and.w	r3, r3, #4
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d005      	beq.n	8007706 <HAL_RCC_OscConfig+0x17e>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	68db      	ldr	r3, [r3, #12]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d101      	bne.n	8007706 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8007702:	2301      	movs	r3, #1
 8007704:	e392      	b.n	8007e2c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007706:	4b42      	ldr	r3, [pc, #264]	@ (8007810 <HAL_RCC_OscConfig+0x288>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f023 0219 	bic.w	r2, r3, #25
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	493f      	ldr	r1, [pc, #252]	@ (8007810 <HAL_RCC_OscConfig+0x288>)
 8007714:	4313      	orrs	r3, r2
 8007716:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007718:	f7fb fdde 	bl	80032d8 <HAL_GetTick>
 800771c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800771e:	e008      	b.n	8007732 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007720:	f7fb fdda 	bl	80032d8 <HAL_GetTick>
 8007724:	4602      	mov	r2, r0
 8007726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007728:	1ad3      	subs	r3, r2, r3
 800772a:	2b02      	cmp	r3, #2
 800772c:	d901      	bls.n	8007732 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800772e:	2303      	movs	r3, #3
 8007730:	e37c      	b.n	8007e2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007732:	4b37      	ldr	r3, [pc, #220]	@ (8007810 <HAL_RCC_OscConfig+0x288>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f003 0304 	and.w	r3, r3, #4
 800773a:	2b00      	cmp	r3, #0
 800773c:	d0f0      	beq.n	8007720 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800773e:	f7fb fdfb 	bl	8003338 <HAL_GetREVID>
 8007742:	4603      	mov	r3, r0
 8007744:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007748:	4293      	cmp	r3, r2
 800774a:	d817      	bhi.n	800777c <HAL_RCC_OscConfig+0x1f4>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	691b      	ldr	r3, [r3, #16]
 8007750:	2b40      	cmp	r3, #64	@ 0x40
 8007752:	d108      	bne.n	8007766 <HAL_RCC_OscConfig+0x1de>
 8007754:	4b2e      	ldr	r3, [pc, #184]	@ (8007810 <HAL_RCC_OscConfig+0x288>)
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800775c:	4a2c      	ldr	r2, [pc, #176]	@ (8007810 <HAL_RCC_OscConfig+0x288>)
 800775e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007762:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007764:	e07a      	b.n	800785c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007766:	4b2a      	ldr	r3, [pc, #168]	@ (8007810 <HAL_RCC_OscConfig+0x288>)
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	691b      	ldr	r3, [r3, #16]
 8007772:	031b      	lsls	r3, r3, #12
 8007774:	4926      	ldr	r1, [pc, #152]	@ (8007810 <HAL_RCC_OscConfig+0x288>)
 8007776:	4313      	orrs	r3, r2
 8007778:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800777a:	e06f      	b.n	800785c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800777c:	4b24      	ldr	r3, [pc, #144]	@ (8007810 <HAL_RCC_OscConfig+0x288>)
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	691b      	ldr	r3, [r3, #16]
 8007788:	061b      	lsls	r3, r3, #24
 800778a:	4921      	ldr	r1, [pc, #132]	@ (8007810 <HAL_RCC_OscConfig+0x288>)
 800778c:	4313      	orrs	r3, r2
 800778e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007790:	e064      	b.n	800785c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	68db      	ldr	r3, [r3, #12]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d047      	beq.n	800782a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800779a:	4b1d      	ldr	r3, [pc, #116]	@ (8007810 <HAL_RCC_OscConfig+0x288>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f023 0219 	bic.w	r2, r3, #25
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	68db      	ldr	r3, [r3, #12]
 80077a6:	491a      	ldr	r1, [pc, #104]	@ (8007810 <HAL_RCC_OscConfig+0x288>)
 80077a8:	4313      	orrs	r3, r2
 80077aa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077ac:	f7fb fd94 	bl	80032d8 <HAL_GetTick>
 80077b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80077b2:	e008      	b.n	80077c6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80077b4:	f7fb fd90 	bl	80032d8 <HAL_GetTick>
 80077b8:	4602      	mov	r2, r0
 80077ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077bc:	1ad3      	subs	r3, r2, r3
 80077be:	2b02      	cmp	r3, #2
 80077c0:	d901      	bls.n	80077c6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80077c2:	2303      	movs	r3, #3
 80077c4:	e332      	b.n	8007e2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80077c6:	4b12      	ldr	r3, [pc, #72]	@ (8007810 <HAL_RCC_OscConfig+0x288>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f003 0304 	and.w	r3, r3, #4
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d0f0      	beq.n	80077b4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077d2:	f7fb fdb1 	bl	8003338 <HAL_GetREVID>
 80077d6:	4603      	mov	r3, r0
 80077d8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80077dc:	4293      	cmp	r3, r2
 80077de:	d819      	bhi.n	8007814 <HAL_RCC_OscConfig+0x28c>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	691b      	ldr	r3, [r3, #16]
 80077e4:	2b40      	cmp	r3, #64	@ 0x40
 80077e6:	d108      	bne.n	80077fa <HAL_RCC_OscConfig+0x272>
 80077e8:	4b09      	ldr	r3, [pc, #36]	@ (8007810 <HAL_RCC_OscConfig+0x288>)
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80077f0:	4a07      	ldr	r2, [pc, #28]	@ (8007810 <HAL_RCC_OscConfig+0x288>)
 80077f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80077f6:	6053      	str	r3, [r2, #4]
 80077f8:	e030      	b.n	800785c <HAL_RCC_OscConfig+0x2d4>
 80077fa:	4b05      	ldr	r3, [pc, #20]	@ (8007810 <HAL_RCC_OscConfig+0x288>)
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	691b      	ldr	r3, [r3, #16]
 8007806:	031b      	lsls	r3, r3, #12
 8007808:	4901      	ldr	r1, [pc, #4]	@ (8007810 <HAL_RCC_OscConfig+0x288>)
 800780a:	4313      	orrs	r3, r2
 800780c:	604b      	str	r3, [r1, #4]
 800780e:	e025      	b.n	800785c <HAL_RCC_OscConfig+0x2d4>
 8007810:	58024400 	.word	0x58024400
 8007814:	4b9a      	ldr	r3, [pc, #616]	@ (8007a80 <HAL_RCC_OscConfig+0x4f8>)
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	691b      	ldr	r3, [r3, #16]
 8007820:	061b      	lsls	r3, r3, #24
 8007822:	4997      	ldr	r1, [pc, #604]	@ (8007a80 <HAL_RCC_OscConfig+0x4f8>)
 8007824:	4313      	orrs	r3, r2
 8007826:	604b      	str	r3, [r1, #4]
 8007828:	e018      	b.n	800785c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800782a:	4b95      	ldr	r3, [pc, #596]	@ (8007a80 <HAL_RCC_OscConfig+0x4f8>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4a94      	ldr	r2, [pc, #592]	@ (8007a80 <HAL_RCC_OscConfig+0x4f8>)
 8007830:	f023 0301 	bic.w	r3, r3, #1
 8007834:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007836:	f7fb fd4f 	bl	80032d8 <HAL_GetTick>
 800783a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800783c:	e008      	b.n	8007850 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800783e:	f7fb fd4b 	bl	80032d8 <HAL_GetTick>
 8007842:	4602      	mov	r2, r0
 8007844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007846:	1ad3      	subs	r3, r2, r3
 8007848:	2b02      	cmp	r3, #2
 800784a:	d901      	bls.n	8007850 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800784c:	2303      	movs	r3, #3
 800784e:	e2ed      	b.n	8007e2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007850:	4b8b      	ldr	r3, [pc, #556]	@ (8007a80 <HAL_RCC_OscConfig+0x4f8>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f003 0304 	and.w	r3, r3, #4
 8007858:	2b00      	cmp	r3, #0
 800785a:	d1f0      	bne.n	800783e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f003 0310 	and.w	r3, r3, #16
 8007864:	2b00      	cmp	r3, #0
 8007866:	f000 80a9 	beq.w	80079bc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800786a:	4b85      	ldr	r3, [pc, #532]	@ (8007a80 <HAL_RCC_OscConfig+0x4f8>)
 800786c:	691b      	ldr	r3, [r3, #16]
 800786e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007872:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007874:	4b82      	ldr	r3, [pc, #520]	@ (8007a80 <HAL_RCC_OscConfig+0x4f8>)
 8007876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007878:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800787a:	69bb      	ldr	r3, [r7, #24]
 800787c:	2b08      	cmp	r3, #8
 800787e:	d007      	beq.n	8007890 <HAL_RCC_OscConfig+0x308>
 8007880:	69bb      	ldr	r3, [r7, #24]
 8007882:	2b18      	cmp	r3, #24
 8007884:	d13a      	bne.n	80078fc <HAL_RCC_OscConfig+0x374>
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	f003 0303 	and.w	r3, r3, #3
 800788c:	2b01      	cmp	r3, #1
 800788e:	d135      	bne.n	80078fc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007890:	4b7b      	ldr	r3, [pc, #492]	@ (8007a80 <HAL_RCC_OscConfig+0x4f8>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007898:	2b00      	cmp	r3, #0
 800789a:	d005      	beq.n	80078a8 <HAL_RCC_OscConfig+0x320>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	69db      	ldr	r3, [r3, #28]
 80078a0:	2b80      	cmp	r3, #128	@ 0x80
 80078a2:	d001      	beq.n	80078a8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80078a4:	2301      	movs	r3, #1
 80078a6:	e2c1      	b.n	8007e2c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80078a8:	f7fb fd46 	bl	8003338 <HAL_GetREVID>
 80078ac:	4603      	mov	r3, r0
 80078ae:	f241 0203 	movw	r2, #4099	@ 0x1003
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d817      	bhi.n	80078e6 <HAL_RCC_OscConfig+0x35e>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6a1b      	ldr	r3, [r3, #32]
 80078ba:	2b20      	cmp	r3, #32
 80078bc:	d108      	bne.n	80078d0 <HAL_RCC_OscConfig+0x348>
 80078be:	4b70      	ldr	r3, [pc, #448]	@ (8007a80 <HAL_RCC_OscConfig+0x4f8>)
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80078c6:	4a6e      	ldr	r2, [pc, #440]	@ (8007a80 <HAL_RCC_OscConfig+0x4f8>)
 80078c8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80078cc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80078ce:	e075      	b.n	80079bc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80078d0:	4b6b      	ldr	r3, [pc, #428]	@ (8007a80 <HAL_RCC_OscConfig+0x4f8>)
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6a1b      	ldr	r3, [r3, #32]
 80078dc:	069b      	lsls	r3, r3, #26
 80078de:	4968      	ldr	r1, [pc, #416]	@ (8007a80 <HAL_RCC_OscConfig+0x4f8>)
 80078e0:	4313      	orrs	r3, r2
 80078e2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80078e4:	e06a      	b.n	80079bc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80078e6:	4b66      	ldr	r3, [pc, #408]	@ (8007a80 <HAL_RCC_OscConfig+0x4f8>)
 80078e8:	68db      	ldr	r3, [r3, #12]
 80078ea:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6a1b      	ldr	r3, [r3, #32]
 80078f2:	061b      	lsls	r3, r3, #24
 80078f4:	4962      	ldr	r1, [pc, #392]	@ (8007a80 <HAL_RCC_OscConfig+0x4f8>)
 80078f6:	4313      	orrs	r3, r2
 80078f8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80078fa:	e05f      	b.n	80079bc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	69db      	ldr	r3, [r3, #28]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d042      	beq.n	800798a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007904:	4b5e      	ldr	r3, [pc, #376]	@ (8007a80 <HAL_RCC_OscConfig+0x4f8>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a5d      	ldr	r2, [pc, #372]	@ (8007a80 <HAL_RCC_OscConfig+0x4f8>)
 800790a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800790e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007910:	f7fb fce2 	bl	80032d8 <HAL_GetTick>
 8007914:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007916:	e008      	b.n	800792a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007918:	f7fb fcde 	bl	80032d8 <HAL_GetTick>
 800791c:	4602      	mov	r2, r0
 800791e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007920:	1ad3      	subs	r3, r2, r3
 8007922:	2b02      	cmp	r3, #2
 8007924:	d901      	bls.n	800792a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007926:	2303      	movs	r3, #3
 8007928:	e280      	b.n	8007e2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800792a:	4b55      	ldr	r3, [pc, #340]	@ (8007a80 <HAL_RCC_OscConfig+0x4f8>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007932:	2b00      	cmp	r3, #0
 8007934:	d0f0      	beq.n	8007918 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007936:	f7fb fcff 	bl	8003338 <HAL_GetREVID>
 800793a:	4603      	mov	r3, r0
 800793c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007940:	4293      	cmp	r3, r2
 8007942:	d817      	bhi.n	8007974 <HAL_RCC_OscConfig+0x3ec>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6a1b      	ldr	r3, [r3, #32]
 8007948:	2b20      	cmp	r3, #32
 800794a:	d108      	bne.n	800795e <HAL_RCC_OscConfig+0x3d6>
 800794c:	4b4c      	ldr	r3, [pc, #304]	@ (8007a80 <HAL_RCC_OscConfig+0x4f8>)
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8007954:	4a4a      	ldr	r2, [pc, #296]	@ (8007a80 <HAL_RCC_OscConfig+0x4f8>)
 8007956:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800795a:	6053      	str	r3, [r2, #4]
 800795c:	e02e      	b.n	80079bc <HAL_RCC_OscConfig+0x434>
 800795e:	4b48      	ldr	r3, [pc, #288]	@ (8007a80 <HAL_RCC_OscConfig+0x4f8>)
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6a1b      	ldr	r3, [r3, #32]
 800796a:	069b      	lsls	r3, r3, #26
 800796c:	4944      	ldr	r1, [pc, #272]	@ (8007a80 <HAL_RCC_OscConfig+0x4f8>)
 800796e:	4313      	orrs	r3, r2
 8007970:	604b      	str	r3, [r1, #4]
 8007972:	e023      	b.n	80079bc <HAL_RCC_OscConfig+0x434>
 8007974:	4b42      	ldr	r3, [pc, #264]	@ (8007a80 <HAL_RCC_OscConfig+0x4f8>)
 8007976:	68db      	ldr	r3, [r3, #12]
 8007978:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6a1b      	ldr	r3, [r3, #32]
 8007980:	061b      	lsls	r3, r3, #24
 8007982:	493f      	ldr	r1, [pc, #252]	@ (8007a80 <HAL_RCC_OscConfig+0x4f8>)
 8007984:	4313      	orrs	r3, r2
 8007986:	60cb      	str	r3, [r1, #12]
 8007988:	e018      	b.n	80079bc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800798a:	4b3d      	ldr	r3, [pc, #244]	@ (8007a80 <HAL_RCC_OscConfig+0x4f8>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4a3c      	ldr	r2, [pc, #240]	@ (8007a80 <HAL_RCC_OscConfig+0x4f8>)
 8007990:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007994:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007996:	f7fb fc9f 	bl	80032d8 <HAL_GetTick>
 800799a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800799c:	e008      	b.n	80079b0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800799e:	f7fb fc9b 	bl	80032d8 <HAL_GetTick>
 80079a2:	4602      	mov	r2, r0
 80079a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079a6:	1ad3      	subs	r3, r2, r3
 80079a8:	2b02      	cmp	r3, #2
 80079aa:	d901      	bls.n	80079b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80079ac:	2303      	movs	r3, #3
 80079ae:	e23d      	b.n	8007e2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80079b0:	4b33      	ldr	r3, [pc, #204]	@ (8007a80 <HAL_RCC_OscConfig+0x4f8>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d1f0      	bne.n	800799e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f003 0308 	and.w	r3, r3, #8
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d036      	beq.n	8007a36 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	695b      	ldr	r3, [r3, #20]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d019      	beq.n	8007a04 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80079d0:	4b2b      	ldr	r3, [pc, #172]	@ (8007a80 <HAL_RCC_OscConfig+0x4f8>)
 80079d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80079d4:	4a2a      	ldr	r2, [pc, #168]	@ (8007a80 <HAL_RCC_OscConfig+0x4f8>)
 80079d6:	f043 0301 	orr.w	r3, r3, #1
 80079da:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079dc:	f7fb fc7c 	bl	80032d8 <HAL_GetTick>
 80079e0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80079e2:	e008      	b.n	80079f6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80079e4:	f7fb fc78 	bl	80032d8 <HAL_GetTick>
 80079e8:	4602      	mov	r2, r0
 80079ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ec:	1ad3      	subs	r3, r2, r3
 80079ee:	2b02      	cmp	r3, #2
 80079f0:	d901      	bls.n	80079f6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80079f2:	2303      	movs	r3, #3
 80079f4:	e21a      	b.n	8007e2c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80079f6:	4b22      	ldr	r3, [pc, #136]	@ (8007a80 <HAL_RCC_OscConfig+0x4f8>)
 80079f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80079fa:	f003 0302 	and.w	r3, r3, #2
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d0f0      	beq.n	80079e4 <HAL_RCC_OscConfig+0x45c>
 8007a02:	e018      	b.n	8007a36 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007a04:	4b1e      	ldr	r3, [pc, #120]	@ (8007a80 <HAL_RCC_OscConfig+0x4f8>)
 8007a06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a08:	4a1d      	ldr	r2, [pc, #116]	@ (8007a80 <HAL_RCC_OscConfig+0x4f8>)
 8007a0a:	f023 0301 	bic.w	r3, r3, #1
 8007a0e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a10:	f7fb fc62 	bl	80032d8 <HAL_GetTick>
 8007a14:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007a16:	e008      	b.n	8007a2a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007a18:	f7fb fc5e 	bl	80032d8 <HAL_GetTick>
 8007a1c:	4602      	mov	r2, r0
 8007a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a20:	1ad3      	subs	r3, r2, r3
 8007a22:	2b02      	cmp	r3, #2
 8007a24:	d901      	bls.n	8007a2a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007a26:	2303      	movs	r3, #3
 8007a28:	e200      	b.n	8007e2c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007a2a:	4b15      	ldr	r3, [pc, #84]	@ (8007a80 <HAL_RCC_OscConfig+0x4f8>)
 8007a2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a2e:	f003 0302 	and.w	r3, r3, #2
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d1f0      	bne.n	8007a18 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f003 0320 	and.w	r3, r3, #32
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d039      	beq.n	8007ab6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	699b      	ldr	r3, [r3, #24]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d01c      	beq.n	8007a84 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8007a80 <HAL_RCC_OscConfig+0x4f8>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a0c      	ldr	r2, [pc, #48]	@ (8007a80 <HAL_RCC_OscConfig+0x4f8>)
 8007a50:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007a54:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007a56:	f7fb fc3f 	bl	80032d8 <HAL_GetTick>
 8007a5a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007a5c:	e008      	b.n	8007a70 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007a5e:	f7fb fc3b 	bl	80032d8 <HAL_GetTick>
 8007a62:	4602      	mov	r2, r0
 8007a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a66:	1ad3      	subs	r3, r2, r3
 8007a68:	2b02      	cmp	r3, #2
 8007a6a:	d901      	bls.n	8007a70 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8007a6c:	2303      	movs	r3, #3
 8007a6e:	e1dd      	b.n	8007e2c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007a70:	4b03      	ldr	r3, [pc, #12]	@ (8007a80 <HAL_RCC_OscConfig+0x4f8>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d0f0      	beq.n	8007a5e <HAL_RCC_OscConfig+0x4d6>
 8007a7c:	e01b      	b.n	8007ab6 <HAL_RCC_OscConfig+0x52e>
 8007a7e:	bf00      	nop
 8007a80:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007a84:	4b9b      	ldr	r3, [pc, #620]	@ (8007cf4 <HAL_RCC_OscConfig+0x76c>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4a9a      	ldr	r2, [pc, #616]	@ (8007cf4 <HAL_RCC_OscConfig+0x76c>)
 8007a8a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007a8e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007a90:	f7fb fc22 	bl	80032d8 <HAL_GetTick>
 8007a94:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007a96:	e008      	b.n	8007aaa <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007a98:	f7fb fc1e 	bl	80032d8 <HAL_GetTick>
 8007a9c:	4602      	mov	r2, r0
 8007a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aa0:	1ad3      	subs	r3, r2, r3
 8007aa2:	2b02      	cmp	r3, #2
 8007aa4:	d901      	bls.n	8007aaa <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8007aa6:	2303      	movs	r3, #3
 8007aa8:	e1c0      	b.n	8007e2c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007aaa:	4b92      	ldr	r3, [pc, #584]	@ (8007cf4 <HAL_RCC_OscConfig+0x76c>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d1f0      	bne.n	8007a98 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f003 0304 	and.w	r3, r3, #4
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	f000 8081 	beq.w	8007bc6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007ac4:	4b8c      	ldr	r3, [pc, #560]	@ (8007cf8 <HAL_RCC_OscConfig+0x770>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a8b      	ldr	r2, [pc, #556]	@ (8007cf8 <HAL_RCC_OscConfig+0x770>)
 8007aca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ace:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007ad0:	f7fb fc02 	bl	80032d8 <HAL_GetTick>
 8007ad4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007ad6:	e008      	b.n	8007aea <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ad8:	f7fb fbfe 	bl	80032d8 <HAL_GetTick>
 8007adc:	4602      	mov	r2, r0
 8007ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ae0:	1ad3      	subs	r3, r2, r3
 8007ae2:	2b64      	cmp	r3, #100	@ 0x64
 8007ae4:	d901      	bls.n	8007aea <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007ae6:	2303      	movs	r3, #3
 8007ae8:	e1a0      	b.n	8007e2c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007aea:	4b83      	ldr	r3, [pc, #524]	@ (8007cf8 <HAL_RCC_OscConfig+0x770>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d0f0      	beq.n	8007ad8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	2b01      	cmp	r3, #1
 8007afc:	d106      	bne.n	8007b0c <HAL_RCC_OscConfig+0x584>
 8007afe:	4b7d      	ldr	r3, [pc, #500]	@ (8007cf4 <HAL_RCC_OscConfig+0x76c>)
 8007b00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b02:	4a7c      	ldr	r2, [pc, #496]	@ (8007cf4 <HAL_RCC_OscConfig+0x76c>)
 8007b04:	f043 0301 	orr.w	r3, r3, #1
 8007b08:	6713      	str	r3, [r2, #112]	@ 0x70
 8007b0a:	e02d      	b.n	8007b68 <HAL_RCC_OscConfig+0x5e0>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	689b      	ldr	r3, [r3, #8]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d10c      	bne.n	8007b2e <HAL_RCC_OscConfig+0x5a6>
 8007b14:	4b77      	ldr	r3, [pc, #476]	@ (8007cf4 <HAL_RCC_OscConfig+0x76c>)
 8007b16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b18:	4a76      	ldr	r2, [pc, #472]	@ (8007cf4 <HAL_RCC_OscConfig+0x76c>)
 8007b1a:	f023 0301 	bic.w	r3, r3, #1
 8007b1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007b20:	4b74      	ldr	r3, [pc, #464]	@ (8007cf4 <HAL_RCC_OscConfig+0x76c>)
 8007b22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b24:	4a73      	ldr	r2, [pc, #460]	@ (8007cf4 <HAL_RCC_OscConfig+0x76c>)
 8007b26:	f023 0304 	bic.w	r3, r3, #4
 8007b2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8007b2c:	e01c      	b.n	8007b68 <HAL_RCC_OscConfig+0x5e0>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	689b      	ldr	r3, [r3, #8]
 8007b32:	2b05      	cmp	r3, #5
 8007b34:	d10c      	bne.n	8007b50 <HAL_RCC_OscConfig+0x5c8>
 8007b36:	4b6f      	ldr	r3, [pc, #444]	@ (8007cf4 <HAL_RCC_OscConfig+0x76c>)
 8007b38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b3a:	4a6e      	ldr	r2, [pc, #440]	@ (8007cf4 <HAL_RCC_OscConfig+0x76c>)
 8007b3c:	f043 0304 	orr.w	r3, r3, #4
 8007b40:	6713      	str	r3, [r2, #112]	@ 0x70
 8007b42:	4b6c      	ldr	r3, [pc, #432]	@ (8007cf4 <HAL_RCC_OscConfig+0x76c>)
 8007b44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b46:	4a6b      	ldr	r2, [pc, #428]	@ (8007cf4 <HAL_RCC_OscConfig+0x76c>)
 8007b48:	f043 0301 	orr.w	r3, r3, #1
 8007b4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8007b4e:	e00b      	b.n	8007b68 <HAL_RCC_OscConfig+0x5e0>
 8007b50:	4b68      	ldr	r3, [pc, #416]	@ (8007cf4 <HAL_RCC_OscConfig+0x76c>)
 8007b52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b54:	4a67      	ldr	r2, [pc, #412]	@ (8007cf4 <HAL_RCC_OscConfig+0x76c>)
 8007b56:	f023 0301 	bic.w	r3, r3, #1
 8007b5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8007b5c:	4b65      	ldr	r3, [pc, #404]	@ (8007cf4 <HAL_RCC_OscConfig+0x76c>)
 8007b5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b60:	4a64      	ldr	r2, [pc, #400]	@ (8007cf4 <HAL_RCC_OscConfig+0x76c>)
 8007b62:	f023 0304 	bic.w	r3, r3, #4
 8007b66:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	689b      	ldr	r3, [r3, #8]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d015      	beq.n	8007b9c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b70:	f7fb fbb2 	bl	80032d8 <HAL_GetTick>
 8007b74:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007b76:	e00a      	b.n	8007b8e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b78:	f7fb fbae 	bl	80032d8 <HAL_GetTick>
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b80:	1ad3      	subs	r3, r2, r3
 8007b82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d901      	bls.n	8007b8e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8007b8a:	2303      	movs	r3, #3
 8007b8c:	e14e      	b.n	8007e2c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007b8e:	4b59      	ldr	r3, [pc, #356]	@ (8007cf4 <HAL_RCC_OscConfig+0x76c>)
 8007b90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b92:	f003 0302 	and.w	r3, r3, #2
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d0ee      	beq.n	8007b78 <HAL_RCC_OscConfig+0x5f0>
 8007b9a:	e014      	b.n	8007bc6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b9c:	f7fb fb9c 	bl	80032d8 <HAL_GetTick>
 8007ba0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007ba2:	e00a      	b.n	8007bba <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ba4:	f7fb fb98 	bl	80032d8 <HAL_GetTick>
 8007ba8:	4602      	mov	r2, r0
 8007baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bac:	1ad3      	subs	r3, r2, r3
 8007bae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d901      	bls.n	8007bba <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8007bb6:	2303      	movs	r3, #3
 8007bb8:	e138      	b.n	8007e2c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007bba:	4b4e      	ldr	r3, [pc, #312]	@ (8007cf4 <HAL_RCC_OscConfig+0x76c>)
 8007bbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bbe:	f003 0302 	and.w	r3, r3, #2
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d1ee      	bne.n	8007ba4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	f000 812d 	beq.w	8007e2a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007bd0:	4b48      	ldr	r3, [pc, #288]	@ (8007cf4 <HAL_RCC_OscConfig+0x76c>)
 8007bd2:	691b      	ldr	r3, [r3, #16]
 8007bd4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007bd8:	2b18      	cmp	r3, #24
 8007bda:	f000 80bd 	beq.w	8007d58 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007be2:	2b02      	cmp	r3, #2
 8007be4:	f040 809e 	bne.w	8007d24 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007be8:	4b42      	ldr	r3, [pc, #264]	@ (8007cf4 <HAL_RCC_OscConfig+0x76c>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a41      	ldr	r2, [pc, #260]	@ (8007cf4 <HAL_RCC_OscConfig+0x76c>)
 8007bee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007bf2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bf4:	f7fb fb70 	bl	80032d8 <HAL_GetTick>
 8007bf8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007bfa:	e008      	b.n	8007c0e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007bfc:	f7fb fb6c 	bl	80032d8 <HAL_GetTick>
 8007c00:	4602      	mov	r2, r0
 8007c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c04:	1ad3      	subs	r3, r2, r3
 8007c06:	2b02      	cmp	r3, #2
 8007c08:	d901      	bls.n	8007c0e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8007c0a:	2303      	movs	r3, #3
 8007c0c:	e10e      	b.n	8007e2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007c0e:	4b39      	ldr	r3, [pc, #228]	@ (8007cf4 <HAL_RCC_OscConfig+0x76c>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d1f0      	bne.n	8007bfc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007c1a:	4b36      	ldr	r3, [pc, #216]	@ (8007cf4 <HAL_RCC_OscConfig+0x76c>)
 8007c1c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007c1e:	4b37      	ldr	r3, [pc, #220]	@ (8007cfc <HAL_RCC_OscConfig+0x774>)
 8007c20:	4013      	ands	r3, r2
 8007c22:	687a      	ldr	r2, [r7, #4]
 8007c24:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8007c26:	687a      	ldr	r2, [r7, #4]
 8007c28:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007c2a:	0112      	lsls	r2, r2, #4
 8007c2c:	430a      	orrs	r2, r1
 8007c2e:	4931      	ldr	r1, [pc, #196]	@ (8007cf4 <HAL_RCC_OscConfig+0x76c>)
 8007c30:	4313      	orrs	r3, r2
 8007c32:	628b      	str	r3, [r1, #40]	@ 0x28
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c38:	3b01      	subs	r3, #1
 8007c3a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c42:	3b01      	subs	r3, #1
 8007c44:	025b      	lsls	r3, r3, #9
 8007c46:	b29b      	uxth	r3, r3
 8007c48:	431a      	orrs	r2, r3
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c4e:	3b01      	subs	r3, #1
 8007c50:	041b      	lsls	r3, r3, #16
 8007c52:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007c56:	431a      	orrs	r2, r3
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c5c:	3b01      	subs	r3, #1
 8007c5e:	061b      	lsls	r3, r3, #24
 8007c60:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007c64:	4923      	ldr	r1, [pc, #140]	@ (8007cf4 <HAL_RCC_OscConfig+0x76c>)
 8007c66:	4313      	orrs	r3, r2
 8007c68:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007c6a:	4b22      	ldr	r3, [pc, #136]	@ (8007cf4 <HAL_RCC_OscConfig+0x76c>)
 8007c6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c6e:	4a21      	ldr	r2, [pc, #132]	@ (8007cf4 <HAL_RCC_OscConfig+0x76c>)
 8007c70:	f023 0301 	bic.w	r3, r3, #1
 8007c74:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007c76:	4b1f      	ldr	r3, [pc, #124]	@ (8007cf4 <HAL_RCC_OscConfig+0x76c>)
 8007c78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007c7a:	4b21      	ldr	r3, [pc, #132]	@ (8007d00 <HAL_RCC_OscConfig+0x778>)
 8007c7c:	4013      	ands	r3, r2
 8007c7e:	687a      	ldr	r2, [r7, #4]
 8007c80:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007c82:	00d2      	lsls	r2, r2, #3
 8007c84:	491b      	ldr	r1, [pc, #108]	@ (8007cf4 <HAL_RCC_OscConfig+0x76c>)
 8007c86:	4313      	orrs	r3, r2
 8007c88:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007c8a:	4b1a      	ldr	r3, [pc, #104]	@ (8007cf4 <HAL_RCC_OscConfig+0x76c>)
 8007c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c8e:	f023 020c 	bic.w	r2, r3, #12
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c96:	4917      	ldr	r1, [pc, #92]	@ (8007cf4 <HAL_RCC_OscConfig+0x76c>)
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007c9c:	4b15      	ldr	r3, [pc, #84]	@ (8007cf4 <HAL_RCC_OscConfig+0x76c>)
 8007c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ca0:	f023 0202 	bic.w	r2, r3, #2
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ca8:	4912      	ldr	r1, [pc, #72]	@ (8007cf4 <HAL_RCC_OscConfig+0x76c>)
 8007caa:	4313      	orrs	r3, r2
 8007cac:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007cae:	4b11      	ldr	r3, [pc, #68]	@ (8007cf4 <HAL_RCC_OscConfig+0x76c>)
 8007cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cb2:	4a10      	ldr	r2, [pc, #64]	@ (8007cf4 <HAL_RCC_OscConfig+0x76c>)
 8007cb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007cb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cba:	4b0e      	ldr	r3, [pc, #56]	@ (8007cf4 <HAL_RCC_OscConfig+0x76c>)
 8007cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cbe:	4a0d      	ldr	r2, [pc, #52]	@ (8007cf4 <HAL_RCC_OscConfig+0x76c>)
 8007cc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007cc4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8007cf4 <HAL_RCC_OscConfig+0x76c>)
 8007cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cca:	4a0a      	ldr	r2, [pc, #40]	@ (8007cf4 <HAL_RCC_OscConfig+0x76c>)
 8007ccc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007cd0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007cd2:	4b08      	ldr	r3, [pc, #32]	@ (8007cf4 <HAL_RCC_OscConfig+0x76c>)
 8007cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cd6:	4a07      	ldr	r2, [pc, #28]	@ (8007cf4 <HAL_RCC_OscConfig+0x76c>)
 8007cd8:	f043 0301 	orr.w	r3, r3, #1
 8007cdc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007cde:	4b05      	ldr	r3, [pc, #20]	@ (8007cf4 <HAL_RCC_OscConfig+0x76c>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4a04      	ldr	r2, [pc, #16]	@ (8007cf4 <HAL_RCC_OscConfig+0x76c>)
 8007ce4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007ce8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cea:	f7fb faf5 	bl	80032d8 <HAL_GetTick>
 8007cee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007cf0:	e011      	b.n	8007d16 <HAL_RCC_OscConfig+0x78e>
 8007cf2:	bf00      	nop
 8007cf4:	58024400 	.word	0x58024400
 8007cf8:	58024800 	.word	0x58024800
 8007cfc:	fffffc0c 	.word	0xfffffc0c
 8007d00:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d04:	f7fb fae8 	bl	80032d8 <HAL_GetTick>
 8007d08:	4602      	mov	r2, r0
 8007d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d0c:	1ad3      	subs	r3, r2, r3
 8007d0e:	2b02      	cmp	r3, #2
 8007d10:	d901      	bls.n	8007d16 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8007d12:	2303      	movs	r3, #3
 8007d14:	e08a      	b.n	8007e2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007d16:	4b47      	ldr	r3, [pc, #284]	@ (8007e34 <HAL_RCC_OscConfig+0x8ac>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d0f0      	beq.n	8007d04 <HAL_RCC_OscConfig+0x77c>
 8007d22:	e082      	b.n	8007e2a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d24:	4b43      	ldr	r3, [pc, #268]	@ (8007e34 <HAL_RCC_OscConfig+0x8ac>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4a42      	ldr	r2, [pc, #264]	@ (8007e34 <HAL_RCC_OscConfig+0x8ac>)
 8007d2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007d2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d30:	f7fb fad2 	bl	80032d8 <HAL_GetTick>
 8007d34:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007d36:	e008      	b.n	8007d4a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d38:	f7fb face 	bl	80032d8 <HAL_GetTick>
 8007d3c:	4602      	mov	r2, r0
 8007d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d40:	1ad3      	subs	r3, r2, r3
 8007d42:	2b02      	cmp	r3, #2
 8007d44:	d901      	bls.n	8007d4a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8007d46:	2303      	movs	r3, #3
 8007d48:	e070      	b.n	8007e2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007d4a:	4b3a      	ldr	r3, [pc, #232]	@ (8007e34 <HAL_RCC_OscConfig+0x8ac>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d1f0      	bne.n	8007d38 <HAL_RCC_OscConfig+0x7b0>
 8007d56:	e068      	b.n	8007e2a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007d58:	4b36      	ldr	r3, [pc, #216]	@ (8007e34 <HAL_RCC_OscConfig+0x8ac>)
 8007d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d5c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007d5e:	4b35      	ldr	r3, [pc, #212]	@ (8007e34 <HAL_RCC_OscConfig+0x8ac>)
 8007d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d62:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	d031      	beq.n	8007dd0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	f003 0203 	and.w	r2, r3, #3
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007d76:	429a      	cmp	r2, r3
 8007d78:	d12a      	bne.n	8007dd0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	091b      	lsrs	r3, r3, #4
 8007d7e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d122      	bne.n	8007dd0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d94:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007d96:	429a      	cmp	r2, r3
 8007d98:	d11a      	bne.n	8007dd0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	0a5b      	lsrs	r3, r3, #9
 8007d9e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007da6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007da8:	429a      	cmp	r2, r3
 8007daa:	d111      	bne.n	8007dd0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	0c1b      	lsrs	r3, r3, #16
 8007db0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007db8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	d108      	bne.n	8007dd0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	0e1b      	lsrs	r3, r3, #24
 8007dc2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dca:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	d001      	beq.n	8007dd4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	e02b      	b.n	8007e2c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007dd4:	4b17      	ldr	r3, [pc, #92]	@ (8007e34 <HAL_RCC_OscConfig+0x8ac>)
 8007dd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007dd8:	08db      	lsrs	r3, r3, #3
 8007dda:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007dde:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007de4:	693a      	ldr	r2, [r7, #16]
 8007de6:	429a      	cmp	r2, r3
 8007de8:	d01f      	beq.n	8007e2a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007dea:	4b12      	ldr	r3, [pc, #72]	@ (8007e34 <HAL_RCC_OscConfig+0x8ac>)
 8007dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dee:	4a11      	ldr	r2, [pc, #68]	@ (8007e34 <HAL_RCC_OscConfig+0x8ac>)
 8007df0:	f023 0301 	bic.w	r3, r3, #1
 8007df4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007df6:	f7fb fa6f 	bl	80032d8 <HAL_GetTick>
 8007dfa:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007dfc:	bf00      	nop
 8007dfe:	f7fb fa6b 	bl	80032d8 <HAL_GetTick>
 8007e02:	4602      	mov	r2, r0
 8007e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d0f9      	beq.n	8007dfe <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007e0a:	4b0a      	ldr	r3, [pc, #40]	@ (8007e34 <HAL_RCC_OscConfig+0x8ac>)
 8007e0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007e0e:	4b0a      	ldr	r3, [pc, #40]	@ (8007e38 <HAL_RCC_OscConfig+0x8b0>)
 8007e10:	4013      	ands	r3, r2
 8007e12:	687a      	ldr	r2, [r7, #4]
 8007e14:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007e16:	00d2      	lsls	r2, r2, #3
 8007e18:	4906      	ldr	r1, [pc, #24]	@ (8007e34 <HAL_RCC_OscConfig+0x8ac>)
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8007e1e:	4b05      	ldr	r3, [pc, #20]	@ (8007e34 <HAL_RCC_OscConfig+0x8ac>)
 8007e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e22:	4a04      	ldr	r2, [pc, #16]	@ (8007e34 <HAL_RCC_OscConfig+0x8ac>)
 8007e24:	f043 0301 	orr.w	r3, r3, #1
 8007e28:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007e2a:	2300      	movs	r3, #0
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3730      	adds	r7, #48	@ 0x30
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}
 8007e34:	58024400 	.word	0x58024400
 8007e38:	ffff0007 	.word	0xffff0007

08007e3c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b086      	sub	sp, #24
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
 8007e44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d101      	bne.n	8007e50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	e19c      	b.n	800818a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007e50:	4b8a      	ldr	r3, [pc, #552]	@ (800807c <HAL_RCC_ClockConfig+0x240>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f003 030f 	and.w	r3, r3, #15
 8007e58:	683a      	ldr	r2, [r7, #0]
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d910      	bls.n	8007e80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e5e:	4b87      	ldr	r3, [pc, #540]	@ (800807c <HAL_RCC_ClockConfig+0x240>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f023 020f 	bic.w	r2, r3, #15
 8007e66:	4985      	ldr	r1, [pc, #532]	@ (800807c <HAL_RCC_ClockConfig+0x240>)
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e6e:	4b83      	ldr	r3, [pc, #524]	@ (800807c <HAL_RCC_ClockConfig+0x240>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f003 030f 	and.w	r3, r3, #15
 8007e76:	683a      	ldr	r2, [r7, #0]
 8007e78:	429a      	cmp	r2, r3
 8007e7a:	d001      	beq.n	8007e80 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	e184      	b.n	800818a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f003 0304 	and.w	r3, r3, #4
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d010      	beq.n	8007eae <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	691a      	ldr	r2, [r3, #16]
 8007e90:	4b7b      	ldr	r3, [pc, #492]	@ (8008080 <HAL_RCC_ClockConfig+0x244>)
 8007e92:	699b      	ldr	r3, [r3, #24]
 8007e94:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	d908      	bls.n	8007eae <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007e9c:	4b78      	ldr	r3, [pc, #480]	@ (8008080 <HAL_RCC_ClockConfig+0x244>)
 8007e9e:	699b      	ldr	r3, [r3, #24]
 8007ea0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	691b      	ldr	r3, [r3, #16]
 8007ea8:	4975      	ldr	r1, [pc, #468]	@ (8008080 <HAL_RCC_ClockConfig+0x244>)
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f003 0308 	and.w	r3, r3, #8
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d010      	beq.n	8007edc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	695a      	ldr	r2, [r3, #20]
 8007ebe:	4b70      	ldr	r3, [pc, #448]	@ (8008080 <HAL_RCC_ClockConfig+0x244>)
 8007ec0:	69db      	ldr	r3, [r3, #28]
 8007ec2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007ec6:	429a      	cmp	r2, r3
 8007ec8:	d908      	bls.n	8007edc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007eca:	4b6d      	ldr	r3, [pc, #436]	@ (8008080 <HAL_RCC_ClockConfig+0x244>)
 8007ecc:	69db      	ldr	r3, [r3, #28]
 8007ece:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	695b      	ldr	r3, [r3, #20]
 8007ed6:	496a      	ldr	r1, [pc, #424]	@ (8008080 <HAL_RCC_ClockConfig+0x244>)
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f003 0310 	and.w	r3, r3, #16
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d010      	beq.n	8007f0a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	699a      	ldr	r2, [r3, #24]
 8007eec:	4b64      	ldr	r3, [pc, #400]	@ (8008080 <HAL_RCC_ClockConfig+0x244>)
 8007eee:	69db      	ldr	r3, [r3, #28]
 8007ef0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	d908      	bls.n	8007f0a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007ef8:	4b61      	ldr	r3, [pc, #388]	@ (8008080 <HAL_RCC_ClockConfig+0x244>)
 8007efa:	69db      	ldr	r3, [r3, #28]
 8007efc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	699b      	ldr	r3, [r3, #24]
 8007f04:	495e      	ldr	r1, [pc, #376]	@ (8008080 <HAL_RCC_ClockConfig+0x244>)
 8007f06:	4313      	orrs	r3, r2
 8007f08:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f003 0320 	and.w	r3, r3, #32
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d010      	beq.n	8007f38 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	69da      	ldr	r2, [r3, #28]
 8007f1a:	4b59      	ldr	r3, [pc, #356]	@ (8008080 <HAL_RCC_ClockConfig+0x244>)
 8007f1c:	6a1b      	ldr	r3, [r3, #32]
 8007f1e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d908      	bls.n	8007f38 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007f26:	4b56      	ldr	r3, [pc, #344]	@ (8008080 <HAL_RCC_ClockConfig+0x244>)
 8007f28:	6a1b      	ldr	r3, [r3, #32]
 8007f2a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	69db      	ldr	r3, [r3, #28]
 8007f32:	4953      	ldr	r1, [pc, #332]	@ (8008080 <HAL_RCC_ClockConfig+0x244>)
 8007f34:	4313      	orrs	r3, r2
 8007f36:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f003 0302 	and.w	r3, r3, #2
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d010      	beq.n	8007f66 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	68da      	ldr	r2, [r3, #12]
 8007f48:	4b4d      	ldr	r3, [pc, #308]	@ (8008080 <HAL_RCC_ClockConfig+0x244>)
 8007f4a:	699b      	ldr	r3, [r3, #24]
 8007f4c:	f003 030f 	and.w	r3, r3, #15
 8007f50:	429a      	cmp	r2, r3
 8007f52:	d908      	bls.n	8007f66 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007f54:	4b4a      	ldr	r3, [pc, #296]	@ (8008080 <HAL_RCC_ClockConfig+0x244>)
 8007f56:	699b      	ldr	r3, [r3, #24]
 8007f58:	f023 020f 	bic.w	r2, r3, #15
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	68db      	ldr	r3, [r3, #12]
 8007f60:	4947      	ldr	r1, [pc, #284]	@ (8008080 <HAL_RCC_ClockConfig+0x244>)
 8007f62:	4313      	orrs	r3, r2
 8007f64:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f003 0301 	and.w	r3, r3, #1
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d055      	beq.n	800801e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007f72:	4b43      	ldr	r3, [pc, #268]	@ (8008080 <HAL_RCC_ClockConfig+0x244>)
 8007f74:	699b      	ldr	r3, [r3, #24]
 8007f76:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	689b      	ldr	r3, [r3, #8]
 8007f7e:	4940      	ldr	r1, [pc, #256]	@ (8008080 <HAL_RCC_ClockConfig+0x244>)
 8007f80:	4313      	orrs	r3, r2
 8007f82:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	2b02      	cmp	r3, #2
 8007f8a:	d107      	bne.n	8007f9c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007f8c:	4b3c      	ldr	r3, [pc, #240]	@ (8008080 <HAL_RCC_ClockConfig+0x244>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d121      	bne.n	8007fdc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007f98:	2301      	movs	r3, #1
 8007f9a:	e0f6      	b.n	800818a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	2b03      	cmp	r3, #3
 8007fa2:	d107      	bne.n	8007fb4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007fa4:	4b36      	ldr	r3, [pc, #216]	@ (8008080 <HAL_RCC_ClockConfig+0x244>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d115      	bne.n	8007fdc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	e0ea      	b.n	800818a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	2b01      	cmp	r3, #1
 8007fba:	d107      	bne.n	8007fcc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007fbc:	4b30      	ldr	r3, [pc, #192]	@ (8008080 <HAL_RCC_ClockConfig+0x244>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d109      	bne.n	8007fdc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007fc8:	2301      	movs	r3, #1
 8007fca:	e0de      	b.n	800818a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007fcc:	4b2c      	ldr	r3, [pc, #176]	@ (8008080 <HAL_RCC_ClockConfig+0x244>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f003 0304 	and.w	r3, r3, #4
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d101      	bne.n	8007fdc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007fd8:	2301      	movs	r3, #1
 8007fda:	e0d6      	b.n	800818a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007fdc:	4b28      	ldr	r3, [pc, #160]	@ (8008080 <HAL_RCC_ClockConfig+0x244>)
 8007fde:	691b      	ldr	r3, [r3, #16]
 8007fe0:	f023 0207 	bic.w	r2, r3, #7
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	685b      	ldr	r3, [r3, #4]
 8007fe8:	4925      	ldr	r1, [pc, #148]	@ (8008080 <HAL_RCC_ClockConfig+0x244>)
 8007fea:	4313      	orrs	r3, r2
 8007fec:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fee:	f7fb f973 	bl	80032d8 <HAL_GetTick>
 8007ff2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ff4:	e00a      	b.n	800800c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ff6:	f7fb f96f 	bl	80032d8 <HAL_GetTick>
 8007ffa:	4602      	mov	r2, r0
 8007ffc:	697b      	ldr	r3, [r7, #20]
 8007ffe:	1ad3      	subs	r3, r2, r3
 8008000:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008004:	4293      	cmp	r3, r2
 8008006:	d901      	bls.n	800800c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008008:	2303      	movs	r3, #3
 800800a:	e0be      	b.n	800818a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800800c:	4b1c      	ldr	r3, [pc, #112]	@ (8008080 <HAL_RCC_ClockConfig+0x244>)
 800800e:	691b      	ldr	r3, [r3, #16]
 8008010:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	00db      	lsls	r3, r3, #3
 800801a:	429a      	cmp	r2, r3
 800801c:	d1eb      	bne.n	8007ff6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f003 0302 	and.w	r3, r3, #2
 8008026:	2b00      	cmp	r3, #0
 8008028:	d010      	beq.n	800804c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	68da      	ldr	r2, [r3, #12]
 800802e:	4b14      	ldr	r3, [pc, #80]	@ (8008080 <HAL_RCC_ClockConfig+0x244>)
 8008030:	699b      	ldr	r3, [r3, #24]
 8008032:	f003 030f 	and.w	r3, r3, #15
 8008036:	429a      	cmp	r2, r3
 8008038:	d208      	bcs.n	800804c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800803a:	4b11      	ldr	r3, [pc, #68]	@ (8008080 <HAL_RCC_ClockConfig+0x244>)
 800803c:	699b      	ldr	r3, [r3, #24]
 800803e:	f023 020f 	bic.w	r2, r3, #15
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	68db      	ldr	r3, [r3, #12]
 8008046:	490e      	ldr	r1, [pc, #56]	@ (8008080 <HAL_RCC_ClockConfig+0x244>)
 8008048:	4313      	orrs	r3, r2
 800804a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800804c:	4b0b      	ldr	r3, [pc, #44]	@ (800807c <HAL_RCC_ClockConfig+0x240>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f003 030f 	and.w	r3, r3, #15
 8008054:	683a      	ldr	r2, [r7, #0]
 8008056:	429a      	cmp	r2, r3
 8008058:	d214      	bcs.n	8008084 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800805a:	4b08      	ldr	r3, [pc, #32]	@ (800807c <HAL_RCC_ClockConfig+0x240>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f023 020f 	bic.w	r2, r3, #15
 8008062:	4906      	ldr	r1, [pc, #24]	@ (800807c <HAL_RCC_ClockConfig+0x240>)
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	4313      	orrs	r3, r2
 8008068:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800806a:	4b04      	ldr	r3, [pc, #16]	@ (800807c <HAL_RCC_ClockConfig+0x240>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f003 030f 	and.w	r3, r3, #15
 8008072:	683a      	ldr	r2, [r7, #0]
 8008074:	429a      	cmp	r2, r3
 8008076:	d005      	beq.n	8008084 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008078:	2301      	movs	r3, #1
 800807a:	e086      	b.n	800818a <HAL_RCC_ClockConfig+0x34e>
 800807c:	52002000 	.word	0x52002000
 8008080:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f003 0304 	and.w	r3, r3, #4
 800808c:	2b00      	cmp	r3, #0
 800808e:	d010      	beq.n	80080b2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	691a      	ldr	r2, [r3, #16]
 8008094:	4b3f      	ldr	r3, [pc, #252]	@ (8008194 <HAL_RCC_ClockConfig+0x358>)
 8008096:	699b      	ldr	r3, [r3, #24]
 8008098:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800809c:	429a      	cmp	r2, r3
 800809e:	d208      	bcs.n	80080b2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80080a0:	4b3c      	ldr	r3, [pc, #240]	@ (8008194 <HAL_RCC_ClockConfig+0x358>)
 80080a2:	699b      	ldr	r3, [r3, #24]
 80080a4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	691b      	ldr	r3, [r3, #16]
 80080ac:	4939      	ldr	r1, [pc, #228]	@ (8008194 <HAL_RCC_ClockConfig+0x358>)
 80080ae:	4313      	orrs	r3, r2
 80080b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f003 0308 	and.w	r3, r3, #8
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d010      	beq.n	80080e0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	695a      	ldr	r2, [r3, #20]
 80080c2:	4b34      	ldr	r3, [pc, #208]	@ (8008194 <HAL_RCC_ClockConfig+0x358>)
 80080c4:	69db      	ldr	r3, [r3, #28]
 80080c6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80080ca:	429a      	cmp	r2, r3
 80080cc:	d208      	bcs.n	80080e0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80080ce:	4b31      	ldr	r3, [pc, #196]	@ (8008194 <HAL_RCC_ClockConfig+0x358>)
 80080d0:	69db      	ldr	r3, [r3, #28]
 80080d2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	695b      	ldr	r3, [r3, #20]
 80080da:	492e      	ldr	r1, [pc, #184]	@ (8008194 <HAL_RCC_ClockConfig+0x358>)
 80080dc:	4313      	orrs	r3, r2
 80080de:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f003 0310 	and.w	r3, r3, #16
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d010      	beq.n	800810e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	699a      	ldr	r2, [r3, #24]
 80080f0:	4b28      	ldr	r3, [pc, #160]	@ (8008194 <HAL_RCC_ClockConfig+0x358>)
 80080f2:	69db      	ldr	r3, [r3, #28]
 80080f4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80080f8:	429a      	cmp	r2, r3
 80080fa:	d208      	bcs.n	800810e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80080fc:	4b25      	ldr	r3, [pc, #148]	@ (8008194 <HAL_RCC_ClockConfig+0x358>)
 80080fe:	69db      	ldr	r3, [r3, #28]
 8008100:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	699b      	ldr	r3, [r3, #24]
 8008108:	4922      	ldr	r1, [pc, #136]	@ (8008194 <HAL_RCC_ClockConfig+0x358>)
 800810a:	4313      	orrs	r3, r2
 800810c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f003 0320 	and.w	r3, r3, #32
 8008116:	2b00      	cmp	r3, #0
 8008118:	d010      	beq.n	800813c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	69da      	ldr	r2, [r3, #28]
 800811e:	4b1d      	ldr	r3, [pc, #116]	@ (8008194 <HAL_RCC_ClockConfig+0x358>)
 8008120:	6a1b      	ldr	r3, [r3, #32]
 8008122:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008126:	429a      	cmp	r2, r3
 8008128:	d208      	bcs.n	800813c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800812a:	4b1a      	ldr	r3, [pc, #104]	@ (8008194 <HAL_RCC_ClockConfig+0x358>)
 800812c:	6a1b      	ldr	r3, [r3, #32]
 800812e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	69db      	ldr	r3, [r3, #28]
 8008136:	4917      	ldr	r1, [pc, #92]	@ (8008194 <HAL_RCC_ClockConfig+0x358>)
 8008138:	4313      	orrs	r3, r2
 800813a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800813c:	f000 f834 	bl	80081a8 <HAL_RCC_GetSysClockFreq>
 8008140:	4602      	mov	r2, r0
 8008142:	4b14      	ldr	r3, [pc, #80]	@ (8008194 <HAL_RCC_ClockConfig+0x358>)
 8008144:	699b      	ldr	r3, [r3, #24]
 8008146:	0a1b      	lsrs	r3, r3, #8
 8008148:	f003 030f 	and.w	r3, r3, #15
 800814c:	4912      	ldr	r1, [pc, #72]	@ (8008198 <HAL_RCC_ClockConfig+0x35c>)
 800814e:	5ccb      	ldrb	r3, [r1, r3]
 8008150:	f003 031f 	and.w	r3, r3, #31
 8008154:	fa22 f303 	lsr.w	r3, r2, r3
 8008158:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800815a:	4b0e      	ldr	r3, [pc, #56]	@ (8008194 <HAL_RCC_ClockConfig+0x358>)
 800815c:	699b      	ldr	r3, [r3, #24]
 800815e:	f003 030f 	and.w	r3, r3, #15
 8008162:	4a0d      	ldr	r2, [pc, #52]	@ (8008198 <HAL_RCC_ClockConfig+0x35c>)
 8008164:	5cd3      	ldrb	r3, [r2, r3]
 8008166:	f003 031f 	and.w	r3, r3, #31
 800816a:	693a      	ldr	r2, [r7, #16]
 800816c:	fa22 f303 	lsr.w	r3, r2, r3
 8008170:	4a0a      	ldr	r2, [pc, #40]	@ (800819c <HAL_RCC_ClockConfig+0x360>)
 8008172:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008174:	4a0a      	ldr	r2, [pc, #40]	@ (80081a0 <HAL_RCC_ClockConfig+0x364>)
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800817a:	4b0a      	ldr	r3, [pc, #40]	@ (80081a4 <HAL_RCC_ClockConfig+0x368>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4618      	mov	r0, r3
 8008180:	f7fb f860 	bl	8003244 <HAL_InitTick>
 8008184:	4603      	mov	r3, r0
 8008186:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008188:	7bfb      	ldrb	r3, [r7, #15]
}
 800818a:	4618      	mov	r0, r3
 800818c:	3718      	adds	r7, #24
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
 8008192:	bf00      	nop
 8008194:	58024400 	.word	0x58024400
 8008198:	0800ce94 	.word	0x0800ce94
 800819c:	24000004 	.word	0x24000004
 80081a0:	24000000 	.word	0x24000000
 80081a4:	24000018 	.word	0x24000018

080081a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b089      	sub	sp, #36	@ 0x24
 80081ac:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80081ae:	4bb3      	ldr	r3, [pc, #716]	@ (800847c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80081b0:	691b      	ldr	r3, [r3, #16]
 80081b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80081b6:	2b18      	cmp	r3, #24
 80081b8:	f200 8155 	bhi.w	8008466 <HAL_RCC_GetSysClockFreq+0x2be>
 80081bc:	a201      	add	r2, pc, #4	@ (adr r2, 80081c4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80081be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081c2:	bf00      	nop
 80081c4:	08008229 	.word	0x08008229
 80081c8:	08008467 	.word	0x08008467
 80081cc:	08008467 	.word	0x08008467
 80081d0:	08008467 	.word	0x08008467
 80081d4:	08008467 	.word	0x08008467
 80081d8:	08008467 	.word	0x08008467
 80081dc:	08008467 	.word	0x08008467
 80081e0:	08008467 	.word	0x08008467
 80081e4:	0800824f 	.word	0x0800824f
 80081e8:	08008467 	.word	0x08008467
 80081ec:	08008467 	.word	0x08008467
 80081f0:	08008467 	.word	0x08008467
 80081f4:	08008467 	.word	0x08008467
 80081f8:	08008467 	.word	0x08008467
 80081fc:	08008467 	.word	0x08008467
 8008200:	08008467 	.word	0x08008467
 8008204:	08008255 	.word	0x08008255
 8008208:	08008467 	.word	0x08008467
 800820c:	08008467 	.word	0x08008467
 8008210:	08008467 	.word	0x08008467
 8008214:	08008467 	.word	0x08008467
 8008218:	08008467 	.word	0x08008467
 800821c:	08008467 	.word	0x08008467
 8008220:	08008467 	.word	0x08008467
 8008224:	0800825b 	.word	0x0800825b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008228:	4b94      	ldr	r3, [pc, #592]	@ (800847c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f003 0320 	and.w	r3, r3, #32
 8008230:	2b00      	cmp	r3, #0
 8008232:	d009      	beq.n	8008248 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008234:	4b91      	ldr	r3, [pc, #580]	@ (800847c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	08db      	lsrs	r3, r3, #3
 800823a:	f003 0303 	and.w	r3, r3, #3
 800823e:	4a90      	ldr	r2, [pc, #576]	@ (8008480 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008240:	fa22 f303 	lsr.w	r3, r2, r3
 8008244:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008246:	e111      	b.n	800846c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008248:	4b8d      	ldr	r3, [pc, #564]	@ (8008480 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800824a:	61bb      	str	r3, [r7, #24]
      break;
 800824c:	e10e      	b.n	800846c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800824e:	4b8d      	ldr	r3, [pc, #564]	@ (8008484 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008250:	61bb      	str	r3, [r7, #24]
      break;
 8008252:	e10b      	b.n	800846c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008254:	4b8c      	ldr	r3, [pc, #560]	@ (8008488 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008256:	61bb      	str	r3, [r7, #24]
      break;
 8008258:	e108      	b.n	800846c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800825a:	4b88      	ldr	r3, [pc, #544]	@ (800847c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800825c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800825e:	f003 0303 	and.w	r3, r3, #3
 8008262:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008264:	4b85      	ldr	r3, [pc, #532]	@ (800847c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008268:	091b      	lsrs	r3, r3, #4
 800826a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800826e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008270:	4b82      	ldr	r3, [pc, #520]	@ (800847c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008274:	f003 0301 	and.w	r3, r3, #1
 8008278:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800827a:	4b80      	ldr	r3, [pc, #512]	@ (800847c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800827c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800827e:	08db      	lsrs	r3, r3, #3
 8008280:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008284:	68fa      	ldr	r2, [r7, #12]
 8008286:	fb02 f303 	mul.w	r3, r2, r3
 800828a:	ee07 3a90 	vmov	s15, r3
 800828e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008292:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8008296:	693b      	ldr	r3, [r7, #16]
 8008298:	2b00      	cmp	r3, #0
 800829a:	f000 80e1 	beq.w	8008460 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	2b02      	cmp	r3, #2
 80082a2:	f000 8083 	beq.w	80083ac <HAL_RCC_GetSysClockFreq+0x204>
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	2b02      	cmp	r3, #2
 80082aa:	f200 80a1 	bhi.w	80083f0 <HAL_RCC_GetSysClockFreq+0x248>
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d003      	beq.n	80082bc <HAL_RCC_GetSysClockFreq+0x114>
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	2b01      	cmp	r3, #1
 80082b8:	d056      	beq.n	8008368 <HAL_RCC_GetSysClockFreq+0x1c0>
 80082ba:	e099      	b.n	80083f0 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80082bc:	4b6f      	ldr	r3, [pc, #444]	@ (800847c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f003 0320 	and.w	r3, r3, #32
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d02d      	beq.n	8008324 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80082c8:	4b6c      	ldr	r3, [pc, #432]	@ (800847c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	08db      	lsrs	r3, r3, #3
 80082ce:	f003 0303 	and.w	r3, r3, #3
 80082d2:	4a6b      	ldr	r2, [pc, #428]	@ (8008480 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80082d4:	fa22 f303 	lsr.w	r3, r2, r3
 80082d8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	ee07 3a90 	vmov	s15, r3
 80082e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	ee07 3a90 	vmov	s15, r3
 80082ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082f2:	4b62      	ldr	r3, [pc, #392]	@ (800847c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80082f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082fa:	ee07 3a90 	vmov	s15, r3
 80082fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008302:	ed97 6a02 	vldr	s12, [r7, #8]
 8008306:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800848c <HAL_RCC_GetSysClockFreq+0x2e4>
 800830a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800830e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008312:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008316:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800831a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800831e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008322:	e087      	b.n	8008434 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	ee07 3a90 	vmov	s15, r3
 800832a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800832e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8008490 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008332:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008336:	4b51      	ldr	r3, [pc, #324]	@ (800847c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800833a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800833e:	ee07 3a90 	vmov	s15, r3
 8008342:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008346:	ed97 6a02 	vldr	s12, [r7, #8]
 800834a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800848c <HAL_RCC_GetSysClockFreq+0x2e4>
 800834e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008352:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008356:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800835a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800835e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008362:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008366:	e065      	b.n	8008434 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	ee07 3a90 	vmov	s15, r3
 800836e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008372:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8008494 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008376:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800837a:	4b40      	ldr	r3, [pc, #256]	@ (800847c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800837c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800837e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008382:	ee07 3a90 	vmov	s15, r3
 8008386:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800838a:	ed97 6a02 	vldr	s12, [r7, #8]
 800838e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800848c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008392:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008396:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800839a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800839e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80083aa:	e043      	b.n	8008434 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	ee07 3a90 	vmov	s15, r3
 80083b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083b6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8008498 <HAL_RCC_GetSysClockFreq+0x2f0>
 80083ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083be:	4b2f      	ldr	r3, [pc, #188]	@ (800847c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083c6:	ee07 3a90 	vmov	s15, r3
 80083ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80083d2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800848c <HAL_RCC_GetSysClockFreq+0x2e4>
 80083d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80083e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80083ee:	e021      	b.n	8008434 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80083f0:	693b      	ldr	r3, [r7, #16]
 80083f2:	ee07 3a90 	vmov	s15, r3
 80083f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083fa:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8008494 <HAL_RCC_GetSysClockFreq+0x2ec>
 80083fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008402:	4b1e      	ldr	r3, [pc, #120]	@ (800847c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008406:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800840a:	ee07 3a90 	vmov	s15, r3
 800840e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008412:	ed97 6a02 	vldr	s12, [r7, #8]
 8008416:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800848c <HAL_RCC_GetSysClockFreq+0x2e4>
 800841a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800841e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008422:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008426:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800842a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800842e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008432:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008434:	4b11      	ldr	r3, [pc, #68]	@ (800847c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008438:	0a5b      	lsrs	r3, r3, #9
 800843a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800843e:	3301      	adds	r3, #1
 8008440:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	ee07 3a90 	vmov	s15, r3
 8008448:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800844c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008450:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008454:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008458:	ee17 3a90 	vmov	r3, s15
 800845c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800845e:	e005      	b.n	800846c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008460:	2300      	movs	r3, #0
 8008462:	61bb      	str	r3, [r7, #24]
      break;
 8008464:	e002      	b.n	800846c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008466:	4b07      	ldr	r3, [pc, #28]	@ (8008484 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008468:	61bb      	str	r3, [r7, #24]
      break;
 800846a:	bf00      	nop
  }

  return sysclockfreq;
 800846c:	69bb      	ldr	r3, [r7, #24]
}
 800846e:	4618      	mov	r0, r3
 8008470:	3724      	adds	r7, #36	@ 0x24
 8008472:	46bd      	mov	sp, r7
 8008474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008478:	4770      	bx	lr
 800847a:	bf00      	nop
 800847c:	58024400 	.word	0x58024400
 8008480:	03d09000 	.word	0x03d09000
 8008484:	003d0900 	.word	0x003d0900
 8008488:	017d7840 	.word	0x017d7840
 800848c:	46000000 	.word	0x46000000
 8008490:	4c742400 	.word	0x4c742400
 8008494:	4a742400 	.word	0x4a742400
 8008498:	4bbebc20 	.word	0x4bbebc20

0800849c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b082      	sub	sp, #8
 80084a0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80084a2:	f7ff fe81 	bl	80081a8 <HAL_RCC_GetSysClockFreq>
 80084a6:	4602      	mov	r2, r0
 80084a8:	4b10      	ldr	r3, [pc, #64]	@ (80084ec <HAL_RCC_GetHCLKFreq+0x50>)
 80084aa:	699b      	ldr	r3, [r3, #24]
 80084ac:	0a1b      	lsrs	r3, r3, #8
 80084ae:	f003 030f 	and.w	r3, r3, #15
 80084b2:	490f      	ldr	r1, [pc, #60]	@ (80084f0 <HAL_RCC_GetHCLKFreq+0x54>)
 80084b4:	5ccb      	ldrb	r3, [r1, r3]
 80084b6:	f003 031f 	and.w	r3, r3, #31
 80084ba:	fa22 f303 	lsr.w	r3, r2, r3
 80084be:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80084c0:	4b0a      	ldr	r3, [pc, #40]	@ (80084ec <HAL_RCC_GetHCLKFreq+0x50>)
 80084c2:	699b      	ldr	r3, [r3, #24]
 80084c4:	f003 030f 	and.w	r3, r3, #15
 80084c8:	4a09      	ldr	r2, [pc, #36]	@ (80084f0 <HAL_RCC_GetHCLKFreq+0x54>)
 80084ca:	5cd3      	ldrb	r3, [r2, r3]
 80084cc:	f003 031f 	and.w	r3, r3, #31
 80084d0:	687a      	ldr	r2, [r7, #4]
 80084d2:	fa22 f303 	lsr.w	r3, r2, r3
 80084d6:	4a07      	ldr	r2, [pc, #28]	@ (80084f4 <HAL_RCC_GetHCLKFreq+0x58>)
 80084d8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80084da:	4a07      	ldr	r2, [pc, #28]	@ (80084f8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80084e0:	4b04      	ldr	r3, [pc, #16]	@ (80084f4 <HAL_RCC_GetHCLKFreq+0x58>)
 80084e2:	681b      	ldr	r3, [r3, #0]
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	3708      	adds	r7, #8
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}
 80084ec:	58024400 	.word	0x58024400
 80084f0:	0800ce94 	.word	0x0800ce94
 80084f4:	24000004 	.word	0x24000004
 80084f8:	24000000 	.word	0x24000000

080084fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008500:	f7ff ffcc 	bl	800849c <HAL_RCC_GetHCLKFreq>
 8008504:	4602      	mov	r2, r0
 8008506:	4b06      	ldr	r3, [pc, #24]	@ (8008520 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008508:	69db      	ldr	r3, [r3, #28]
 800850a:	091b      	lsrs	r3, r3, #4
 800850c:	f003 0307 	and.w	r3, r3, #7
 8008510:	4904      	ldr	r1, [pc, #16]	@ (8008524 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008512:	5ccb      	ldrb	r3, [r1, r3]
 8008514:	f003 031f 	and.w	r3, r3, #31
 8008518:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800851c:	4618      	mov	r0, r3
 800851e:	bd80      	pop	{r7, pc}
 8008520:	58024400 	.word	0x58024400
 8008524:	0800ce94 	.word	0x0800ce94

08008528 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800852c:	f7ff ffb6 	bl	800849c <HAL_RCC_GetHCLKFreq>
 8008530:	4602      	mov	r2, r0
 8008532:	4b06      	ldr	r3, [pc, #24]	@ (800854c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008534:	69db      	ldr	r3, [r3, #28]
 8008536:	0a1b      	lsrs	r3, r3, #8
 8008538:	f003 0307 	and.w	r3, r3, #7
 800853c:	4904      	ldr	r1, [pc, #16]	@ (8008550 <HAL_RCC_GetPCLK2Freq+0x28>)
 800853e:	5ccb      	ldrb	r3, [r1, r3]
 8008540:	f003 031f 	and.w	r3, r3, #31
 8008544:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008548:	4618      	mov	r0, r3
 800854a:	bd80      	pop	{r7, pc}
 800854c:	58024400 	.word	0x58024400
 8008550:	0800ce94 	.word	0x0800ce94

08008554 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008554:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008558:	b0ca      	sub	sp, #296	@ 0x128
 800855a:	af00      	add	r7, sp, #0
 800855c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008560:	2300      	movs	r3, #0
 8008562:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008566:	2300      	movs	r3, #0
 8008568:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800856c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008574:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8008578:	2500      	movs	r5, #0
 800857a:	ea54 0305 	orrs.w	r3, r4, r5
 800857e:	d049      	beq.n	8008614 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008580:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008584:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008586:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800858a:	d02f      	beq.n	80085ec <HAL_RCCEx_PeriphCLKConfig+0x98>
 800858c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008590:	d828      	bhi.n	80085e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008592:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008596:	d01a      	beq.n	80085ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008598:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800859c:	d822      	bhi.n	80085e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d003      	beq.n	80085aa <HAL_RCCEx_PeriphCLKConfig+0x56>
 80085a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80085a6:	d007      	beq.n	80085b8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80085a8:	e01c      	b.n	80085e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085aa:	4bb8      	ldr	r3, [pc, #736]	@ (800888c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80085ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085ae:	4ab7      	ldr	r2, [pc, #732]	@ (800888c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80085b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80085b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80085b6:	e01a      	b.n	80085ee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80085b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085bc:	3308      	adds	r3, #8
 80085be:	2102      	movs	r1, #2
 80085c0:	4618      	mov	r0, r3
 80085c2:	f002 fb61 	bl	800ac88 <RCCEx_PLL2_Config>
 80085c6:	4603      	mov	r3, r0
 80085c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80085cc:	e00f      	b.n	80085ee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80085ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085d2:	3328      	adds	r3, #40	@ 0x28
 80085d4:	2102      	movs	r1, #2
 80085d6:	4618      	mov	r0, r3
 80085d8:	f002 fc08 	bl	800adec <RCCEx_PLL3_Config>
 80085dc:	4603      	mov	r3, r0
 80085de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80085e2:	e004      	b.n	80085ee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80085e4:	2301      	movs	r3, #1
 80085e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80085ea:	e000      	b.n	80085ee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80085ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d10a      	bne.n	800860c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80085f6:	4ba5      	ldr	r3, [pc, #660]	@ (800888c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80085f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085fa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80085fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008602:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008604:	4aa1      	ldr	r2, [pc, #644]	@ (800888c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008606:	430b      	orrs	r3, r1
 8008608:	6513      	str	r3, [r2, #80]	@ 0x50
 800860a:	e003      	b.n	8008614 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800860c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008610:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008614:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800861c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8008620:	f04f 0900 	mov.w	r9, #0
 8008624:	ea58 0309 	orrs.w	r3, r8, r9
 8008628:	d047      	beq.n	80086ba <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800862a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800862e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008630:	2b04      	cmp	r3, #4
 8008632:	d82a      	bhi.n	800868a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008634:	a201      	add	r2, pc, #4	@ (adr r2, 800863c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800863a:	bf00      	nop
 800863c:	08008651 	.word	0x08008651
 8008640:	0800865f 	.word	0x0800865f
 8008644:	08008675 	.word	0x08008675
 8008648:	08008693 	.word	0x08008693
 800864c:	08008693 	.word	0x08008693
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008650:	4b8e      	ldr	r3, [pc, #568]	@ (800888c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008654:	4a8d      	ldr	r2, [pc, #564]	@ (800888c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008656:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800865a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800865c:	e01a      	b.n	8008694 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800865e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008662:	3308      	adds	r3, #8
 8008664:	2100      	movs	r1, #0
 8008666:	4618      	mov	r0, r3
 8008668:	f002 fb0e 	bl	800ac88 <RCCEx_PLL2_Config>
 800866c:	4603      	mov	r3, r0
 800866e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008672:	e00f      	b.n	8008694 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008674:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008678:	3328      	adds	r3, #40	@ 0x28
 800867a:	2100      	movs	r1, #0
 800867c:	4618      	mov	r0, r3
 800867e:	f002 fbb5 	bl	800adec <RCCEx_PLL3_Config>
 8008682:	4603      	mov	r3, r0
 8008684:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008688:	e004      	b.n	8008694 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800868a:	2301      	movs	r3, #1
 800868c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008690:	e000      	b.n	8008694 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008692:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008694:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008698:	2b00      	cmp	r3, #0
 800869a:	d10a      	bne.n	80086b2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800869c:	4b7b      	ldr	r3, [pc, #492]	@ (800888c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800869e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086a0:	f023 0107 	bic.w	r1, r3, #7
 80086a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086aa:	4a78      	ldr	r2, [pc, #480]	@ (800888c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80086ac:	430b      	orrs	r3, r1
 80086ae:	6513      	str	r3, [r2, #80]	@ 0x50
 80086b0:	e003      	b.n	80086ba <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80086ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086c2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80086c6:	f04f 0b00 	mov.w	fp, #0
 80086ca:	ea5a 030b 	orrs.w	r3, sl, fp
 80086ce:	d04c      	beq.n	800876a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80086d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80086d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80086da:	d030      	beq.n	800873e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80086dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80086e0:	d829      	bhi.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80086e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80086e4:	d02d      	beq.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80086e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80086e8:	d825      	bhi.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80086ea:	2b80      	cmp	r3, #128	@ 0x80
 80086ec:	d018      	beq.n	8008720 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80086ee:	2b80      	cmp	r3, #128	@ 0x80
 80086f0:	d821      	bhi.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d002      	beq.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80086f6:	2b40      	cmp	r3, #64	@ 0x40
 80086f8:	d007      	beq.n	800870a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80086fa:	e01c      	b.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086fc:	4b63      	ldr	r3, [pc, #396]	@ (800888c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80086fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008700:	4a62      	ldr	r2, [pc, #392]	@ (800888c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008702:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008706:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008708:	e01c      	b.n	8008744 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800870a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800870e:	3308      	adds	r3, #8
 8008710:	2100      	movs	r1, #0
 8008712:	4618      	mov	r0, r3
 8008714:	f002 fab8 	bl	800ac88 <RCCEx_PLL2_Config>
 8008718:	4603      	mov	r3, r0
 800871a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800871e:	e011      	b.n	8008744 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008720:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008724:	3328      	adds	r3, #40	@ 0x28
 8008726:	2100      	movs	r1, #0
 8008728:	4618      	mov	r0, r3
 800872a:	f002 fb5f 	bl	800adec <RCCEx_PLL3_Config>
 800872e:	4603      	mov	r3, r0
 8008730:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008734:	e006      	b.n	8008744 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008736:	2301      	movs	r3, #1
 8008738:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800873c:	e002      	b.n	8008744 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800873e:	bf00      	nop
 8008740:	e000      	b.n	8008744 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008742:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008744:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008748:	2b00      	cmp	r3, #0
 800874a:	d10a      	bne.n	8008762 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800874c:	4b4f      	ldr	r3, [pc, #316]	@ (800888c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800874e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008750:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8008754:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008758:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800875a:	4a4c      	ldr	r2, [pc, #304]	@ (800888c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800875c:	430b      	orrs	r3, r1
 800875e:	6513      	str	r3, [r2, #80]	@ 0x50
 8008760:	e003      	b.n	800876a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008762:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008766:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800876a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800876e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008772:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8008776:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800877a:	2300      	movs	r3, #0
 800877c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8008780:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8008784:	460b      	mov	r3, r1
 8008786:	4313      	orrs	r3, r2
 8008788:	d053      	beq.n	8008832 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800878a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800878e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008792:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008796:	d035      	beq.n	8008804 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8008798:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800879c:	d82e      	bhi.n	80087fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800879e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80087a2:	d031      	beq.n	8008808 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80087a4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80087a8:	d828      	bhi.n	80087fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80087aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80087ae:	d01a      	beq.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80087b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80087b4:	d822      	bhi.n	80087fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d003      	beq.n	80087c2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80087ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80087be:	d007      	beq.n	80087d0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80087c0:	e01c      	b.n	80087fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80087c2:	4b32      	ldr	r3, [pc, #200]	@ (800888c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80087c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087c6:	4a31      	ldr	r2, [pc, #196]	@ (800888c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80087c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80087cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80087ce:	e01c      	b.n	800880a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80087d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087d4:	3308      	adds	r3, #8
 80087d6:	2100      	movs	r1, #0
 80087d8:	4618      	mov	r0, r3
 80087da:	f002 fa55 	bl	800ac88 <RCCEx_PLL2_Config>
 80087de:	4603      	mov	r3, r0
 80087e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80087e4:	e011      	b.n	800880a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80087e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087ea:	3328      	adds	r3, #40	@ 0x28
 80087ec:	2100      	movs	r1, #0
 80087ee:	4618      	mov	r0, r3
 80087f0:	f002 fafc 	bl	800adec <RCCEx_PLL3_Config>
 80087f4:	4603      	mov	r3, r0
 80087f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80087fa:	e006      	b.n	800880a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80087fc:	2301      	movs	r3, #1
 80087fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008802:	e002      	b.n	800880a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008804:	bf00      	nop
 8008806:	e000      	b.n	800880a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008808:	bf00      	nop
    }

    if (ret == HAL_OK)
 800880a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800880e:	2b00      	cmp	r3, #0
 8008810:	d10b      	bne.n	800882a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008812:	4b1e      	ldr	r3, [pc, #120]	@ (800888c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008814:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008816:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800881a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800881e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008822:	4a1a      	ldr	r2, [pc, #104]	@ (800888c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008824:	430b      	orrs	r3, r1
 8008826:	6593      	str	r3, [r2, #88]	@ 0x58
 8008828:	e003      	b.n	8008832 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800882a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800882e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008832:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800883a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800883e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008842:	2300      	movs	r3, #0
 8008844:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008848:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800884c:	460b      	mov	r3, r1
 800884e:	4313      	orrs	r3, r2
 8008850:	d056      	beq.n	8008900 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008852:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008856:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800885a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800885e:	d038      	beq.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008860:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008864:	d831      	bhi.n	80088ca <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008866:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800886a:	d034      	beq.n	80088d6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800886c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008870:	d82b      	bhi.n	80088ca <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008872:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008876:	d01d      	beq.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8008878:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800887c:	d825      	bhi.n	80088ca <HAL_RCCEx_PeriphCLKConfig+0x376>
 800887e:	2b00      	cmp	r3, #0
 8008880:	d006      	beq.n	8008890 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8008882:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008886:	d00a      	beq.n	800889e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008888:	e01f      	b.n	80088ca <HAL_RCCEx_PeriphCLKConfig+0x376>
 800888a:	bf00      	nop
 800888c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008890:	4ba2      	ldr	r3, [pc, #648]	@ (8008b1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008894:	4aa1      	ldr	r2, [pc, #644]	@ (8008b1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008896:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800889a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800889c:	e01c      	b.n	80088d8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800889e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088a2:	3308      	adds	r3, #8
 80088a4:	2100      	movs	r1, #0
 80088a6:	4618      	mov	r0, r3
 80088a8:	f002 f9ee 	bl	800ac88 <RCCEx_PLL2_Config>
 80088ac:	4603      	mov	r3, r0
 80088ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80088b2:	e011      	b.n	80088d8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80088b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088b8:	3328      	adds	r3, #40	@ 0x28
 80088ba:	2100      	movs	r1, #0
 80088bc:	4618      	mov	r0, r3
 80088be:	f002 fa95 	bl	800adec <RCCEx_PLL3_Config>
 80088c2:	4603      	mov	r3, r0
 80088c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80088c8:	e006      	b.n	80088d8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80088ca:	2301      	movs	r3, #1
 80088cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80088d0:	e002      	b.n	80088d8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80088d2:	bf00      	nop
 80088d4:	e000      	b.n	80088d8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80088d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d10b      	bne.n	80088f8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80088e0:	4b8e      	ldr	r3, [pc, #568]	@ (8008b1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80088e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80088e4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80088e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088ec:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80088f0:	4a8a      	ldr	r2, [pc, #552]	@ (8008b1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80088f2:	430b      	orrs	r3, r1
 80088f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80088f6:	e003      	b.n	8008900 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008900:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008908:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800890c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008910:	2300      	movs	r3, #0
 8008912:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008916:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800891a:	460b      	mov	r3, r1
 800891c:	4313      	orrs	r3, r2
 800891e:	d03a      	beq.n	8008996 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8008920:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008926:	2b30      	cmp	r3, #48	@ 0x30
 8008928:	d01f      	beq.n	800896a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800892a:	2b30      	cmp	r3, #48	@ 0x30
 800892c:	d819      	bhi.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800892e:	2b20      	cmp	r3, #32
 8008930:	d00c      	beq.n	800894c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8008932:	2b20      	cmp	r3, #32
 8008934:	d815      	bhi.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008936:	2b00      	cmp	r3, #0
 8008938:	d019      	beq.n	800896e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800893a:	2b10      	cmp	r3, #16
 800893c:	d111      	bne.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800893e:	4b77      	ldr	r3, [pc, #476]	@ (8008b1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008942:	4a76      	ldr	r2, [pc, #472]	@ (8008b1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008944:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008948:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800894a:	e011      	b.n	8008970 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800894c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008950:	3308      	adds	r3, #8
 8008952:	2102      	movs	r1, #2
 8008954:	4618      	mov	r0, r3
 8008956:	f002 f997 	bl	800ac88 <RCCEx_PLL2_Config>
 800895a:	4603      	mov	r3, r0
 800895c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008960:	e006      	b.n	8008970 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008962:	2301      	movs	r3, #1
 8008964:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008968:	e002      	b.n	8008970 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800896a:	bf00      	nop
 800896c:	e000      	b.n	8008970 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800896e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008970:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008974:	2b00      	cmp	r3, #0
 8008976:	d10a      	bne.n	800898e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008978:	4b68      	ldr	r3, [pc, #416]	@ (8008b1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800897a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800897c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008980:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008984:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008986:	4a65      	ldr	r2, [pc, #404]	@ (8008b1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008988:	430b      	orrs	r3, r1
 800898a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800898c:	e003      	b.n	8008996 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800898e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008992:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008996:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800899a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800899e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80089a2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80089a6:	2300      	movs	r3, #0
 80089a8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80089ac:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80089b0:	460b      	mov	r3, r1
 80089b2:	4313      	orrs	r3, r2
 80089b4:	d051      	beq.n	8008a5a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80089b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80089bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80089c0:	d035      	beq.n	8008a2e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80089c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80089c6:	d82e      	bhi.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80089c8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80089cc:	d031      	beq.n	8008a32 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80089ce:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80089d2:	d828      	bhi.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80089d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80089d8:	d01a      	beq.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80089da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80089de:	d822      	bhi.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d003      	beq.n	80089ec <HAL_RCCEx_PeriphCLKConfig+0x498>
 80089e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80089e8:	d007      	beq.n	80089fa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80089ea:	e01c      	b.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089ec:	4b4b      	ldr	r3, [pc, #300]	@ (8008b1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80089ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089f0:	4a4a      	ldr	r2, [pc, #296]	@ (8008b1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80089f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80089f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80089f8:	e01c      	b.n	8008a34 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80089fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089fe:	3308      	adds	r3, #8
 8008a00:	2100      	movs	r1, #0
 8008a02:	4618      	mov	r0, r3
 8008a04:	f002 f940 	bl	800ac88 <RCCEx_PLL2_Config>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008a0e:	e011      	b.n	8008a34 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a14:	3328      	adds	r3, #40	@ 0x28
 8008a16:	2100      	movs	r1, #0
 8008a18:	4618      	mov	r0, r3
 8008a1a:	f002 f9e7 	bl	800adec <RCCEx_PLL3_Config>
 8008a1e:	4603      	mov	r3, r0
 8008a20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008a24:	e006      	b.n	8008a34 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a26:	2301      	movs	r3, #1
 8008a28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008a2c:	e002      	b.n	8008a34 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008a2e:	bf00      	nop
 8008a30:	e000      	b.n	8008a34 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008a32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d10a      	bne.n	8008a52 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008a3c:	4b37      	ldr	r3, [pc, #220]	@ (8008b1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008a3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a40:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008a44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a4a:	4a34      	ldr	r2, [pc, #208]	@ (8008b1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008a4c:	430b      	orrs	r3, r1
 8008a4e:	6513      	str	r3, [r2, #80]	@ 0x50
 8008a50:	e003      	b.n	8008a5a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a62:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8008a66:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008a70:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8008a74:	460b      	mov	r3, r1
 8008a76:	4313      	orrs	r3, r2
 8008a78:	d056      	beq.n	8008b28 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008a84:	d033      	beq.n	8008aee <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8008a86:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008a8a:	d82c      	bhi.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008a8c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008a90:	d02f      	beq.n	8008af2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8008a92:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008a96:	d826      	bhi.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008a98:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008a9c:	d02b      	beq.n	8008af6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8008a9e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008aa2:	d820      	bhi.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008aa4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008aa8:	d012      	beq.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8008aaa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008aae:	d81a      	bhi.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d022      	beq.n	8008afa <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8008ab4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ab8:	d115      	bne.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008abe:	3308      	adds	r3, #8
 8008ac0:	2101      	movs	r1, #1
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f002 f8e0 	bl	800ac88 <RCCEx_PLL2_Config>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008ace:	e015      	b.n	8008afc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ad4:	3328      	adds	r3, #40	@ 0x28
 8008ad6:	2101      	movs	r1, #1
 8008ad8:	4618      	mov	r0, r3
 8008ada:	f002 f987 	bl	800adec <RCCEx_PLL3_Config>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008ae4:	e00a      	b.n	8008afc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008aec:	e006      	b.n	8008afc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008aee:	bf00      	nop
 8008af0:	e004      	b.n	8008afc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008af2:	bf00      	nop
 8008af4:	e002      	b.n	8008afc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008af6:	bf00      	nop
 8008af8:	e000      	b.n	8008afc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008afa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008afc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d10d      	bne.n	8008b20 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008b04:	4b05      	ldr	r3, [pc, #20]	@ (8008b1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008b06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b08:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8008b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b10:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008b12:	4a02      	ldr	r2, [pc, #8]	@ (8008b1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008b14:	430b      	orrs	r3, r1
 8008b16:	6513      	str	r3, [r2, #80]	@ 0x50
 8008b18:	e006      	b.n	8008b28 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8008b1a:	bf00      	nop
 8008b1c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b24:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008b28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b30:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8008b34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008b38:	2300      	movs	r3, #0
 8008b3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008b3e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8008b42:	460b      	mov	r3, r1
 8008b44:	4313      	orrs	r3, r2
 8008b46:	d055      	beq.n	8008bf4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008b48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b4c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008b50:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008b54:	d033      	beq.n	8008bbe <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8008b56:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008b5a:	d82c      	bhi.n	8008bb6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b60:	d02f      	beq.n	8008bc2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8008b62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b66:	d826      	bhi.n	8008bb6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008b68:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008b6c:	d02b      	beq.n	8008bc6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8008b6e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008b72:	d820      	bhi.n	8008bb6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008b74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b78:	d012      	beq.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8008b7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b7e:	d81a      	bhi.n	8008bb6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d022      	beq.n	8008bca <HAL_RCCEx_PeriphCLKConfig+0x676>
 8008b84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008b88:	d115      	bne.n	8008bb6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b8e:	3308      	adds	r3, #8
 8008b90:	2101      	movs	r1, #1
 8008b92:	4618      	mov	r0, r3
 8008b94:	f002 f878 	bl	800ac88 <RCCEx_PLL2_Config>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008b9e:	e015      	b.n	8008bcc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ba4:	3328      	adds	r3, #40	@ 0x28
 8008ba6:	2101      	movs	r1, #1
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f002 f91f 	bl	800adec <RCCEx_PLL3_Config>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008bb4:	e00a      	b.n	8008bcc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008bbc:	e006      	b.n	8008bcc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008bbe:	bf00      	nop
 8008bc0:	e004      	b.n	8008bcc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008bc2:	bf00      	nop
 8008bc4:	e002      	b.n	8008bcc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008bc6:	bf00      	nop
 8008bc8:	e000      	b.n	8008bcc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008bca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008bcc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d10b      	bne.n	8008bec <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008bd4:	4ba3      	ldr	r3, [pc, #652]	@ (8008e64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008bd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bd8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008bdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008be0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008be4:	4a9f      	ldr	r2, [pc, #636]	@ (8008e64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008be6:	430b      	orrs	r3, r1
 8008be8:	6593      	str	r3, [r2, #88]	@ 0x58
 8008bea:	e003      	b.n	8008bf4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008bf0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008bf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bfc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8008c00:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008c04:	2300      	movs	r3, #0
 8008c06:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008c0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008c0e:	460b      	mov	r3, r1
 8008c10:	4313      	orrs	r3, r2
 8008c12:	d037      	beq.n	8008c84 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008c14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c1e:	d00e      	beq.n	8008c3e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8008c20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c24:	d816      	bhi.n	8008c54 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d018      	beq.n	8008c5c <HAL_RCCEx_PeriphCLKConfig+0x708>
 8008c2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c2e:	d111      	bne.n	8008c54 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c30:	4b8c      	ldr	r3, [pc, #560]	@ (8008e64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c34:	4a8b      	ldr	r2, [pc, #556]	@ (8008e64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008c36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008c3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008c3c:	e00f      	b.n	8008c5e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c42:	3308      	adds	r3, #8
 8008c44:	2101      	movs	r1, #1
 8008c46:	4618      	mov	r0, r3
 8008c48:	f002 f81e 	bl	800ac88 <RCCEx_PLL2_Config>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008c52:	e004      	b.n	8008c5e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c54:	2301      	movs	r3, #1
 8008c56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008c5a:	e000      	b.n	8008c5e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8008c5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d10a      	bne.n	8008c7c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008c66:	4b7f      	ldr	r3, [pc, #508]	@ (8008e64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008c68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c6a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c74:	4a7b      	ldr	r2, [pc, #492]	@ (8008e64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008c76:	430b      	orrs	r3, r1
 8008c78:	6513      	str	r3, [r2, #80]	@ 0x50
 8008c7a:	e003      	b.n	8008c84 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008c84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c8c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8008c90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008c94:	2300      	movs	r3, #0
 8008c96:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008c9a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8008c9e:	460b      	mov	r3, r1
 8008ca0:	4313      	orrs	r3, r2
 8008ca2:	d039      	beq.n	8008d18 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ca8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008caa:	2b03      	cmp	r3, #3
 8008cac:	d81c      	bhi.n	8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8008cae:	a201      	add	r2, pc, #4	@ (adr r2, 8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8008cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cb4:	08008cf1 	.word	0x08008cf1
 8008cb8:	08008cc5 	.word	0x08008cc5
 8008cbc:	08008cd3 	.word	0x08008cd3
 8008cc0:	08008cf1 	.word	0x08008cf1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008cc4:	4b67      	ldr	r3, [pc, #412]	@ (8008e64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cc8:	4a66      	ldr	r2, [pc, #408]	@ (8008e64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008cca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008cce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008cd0:	e00f      	b.n	8008cf2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cd6:	3308      	adds	r3, #8
 8008cd8:	2102      	movs	r1, #2
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f001 ffd4 	bl	800ac88 <RCCEx_PLL2_Config>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008ce6:	e004      	b.n	8008cf2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008ce8:	2301      	movs	r3, #1
 8008cea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008cee:	e000      	b.n	8008cf2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8008cf0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008cf2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d10a      	bne.n	8008d10 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008cfa:	4b5a      	ldr	r3, [pc, #360]	@ (8008e64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008cfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008cfe:	f023 0103 	bic.w	r1, r3, #3
 8008d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008d08:	4a56      	ldr	r2, [pc, #344]	@ (8008e64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008d0a:	430b      	orrs	r3, r1
 8008d0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008d0e:	e003      	b.n	8008d18 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d14:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008d18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d20:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8008d24:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008d28:	2300      	movs	r3, #0
 8008d2a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008d2e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8008d32:	460b      	mov	r3, r1
 8008d34:	4313      	orrs	r3, r2
 8008d36:	f000 809f 	beq.w	8008e78 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008d3a:	4b4b      	ldr	r3, [pc, #300]	@ (8008e68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	4a4a      	ldr	r2, [pc, #296]	@ (8008e68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008d40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008d44:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008d46:	f7fa fac7 	bl	80032d8 <HAL_GetTick>
 8008d4a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008d4e:	e00b      	b.n	8008d68 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d50:	f7fa fac2 	bl	80032d8 <HAL_GetTick>
 8008d54:	4602      	mov	r2, r0
 8008d56:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8008d5a:	1ad3      	subs	r3, r2, r3
 8008d5c:	2b64      	cmp	r3, #100	@ 0x64
 8008d5e:	d903      	bls.n	8008d68 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8008d60:	2303      	movs	r3, #3
 8008d62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008d66:	e005      	b.n	8008d74 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008d68:	4b3f      	ldr	r3, [pc, #252]	@ (8008e68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d0ed      	beq.n	8008d50 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8008d74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d179      	bne.n	8008e70 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008d7c:	4b39      	ldr	r3, [pc, #228]	@ (8008e64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008d7e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008d80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d84:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008d88:	4053      	eors	r3, r2
 8008d8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d015      	beq.n	8008dbe <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008d92:	4b34      	ldr	r3, [pc, #208]	@ (8008e64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008d94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008d9a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008d9e:	4b31      	ldr	r3, [pc, #196]	@ (8008e64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008da0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008da2:	4a30      	ldr	r2, [pc, #192]	@ (8008e64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008da4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008da8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008daa:	4b2e      	ldr	r3, [pc, #184]	@ (8008e64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008dac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008dae:	4a2d      	ldr	r2, [pc, #180]	@ (8008e64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008db0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008db4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008db6:	4a2b      	ldr	r2, [pc, #172]	@ (8008e64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008db8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8008dbc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dc2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008dc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008dca:	d118      	bne.n	8008dfe <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dcc:	f7fa fa84 	bl	80032d8 <HAL_GetTick>
 8008dd0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008dd4:	e00d      	b.n	8008df2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008dd6:	f7fa fa7f 	bl	80032d8 <HAL_GetTick>
 8008dda:	4602      	mov	r2, r0
 8008ddc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8008de0:	1ad2      	subs	r2, r2, r3
 8008de2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008de6:	429a      	cmp	r2, r3
 8008de8:	d903      	bls.n	8008df2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8008dea:	2303      	movs	r3, #3
 8008dec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8008df0:	e005      	b.n	8008dfe <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008df2:	4b1c      	ldr	r3, [pc, #112]	@ (8008e64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008df4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008df6:	f003 0302 	and.w	r3, r3, #2
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d0eb      	beq.n	8008dd6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8008dfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d129      	bne.n	8008e5a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e0a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008e0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008e12:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008e16:	d10e      	bne.n	8008e36 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8008e18:	4b12      	ldr	r3, [pc, #72]	@ (8008e64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e1a:	691b      	ldr	r3, [r3, #16]
 8008e1c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8008e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e24:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008e28:	091a      	lsrs	r2, r3, #4
 8008e2a:	4b10      	ldr	r3, [pc, #64]	@ (8008e6c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8008e2c:	4013      	ands	r3, r2
 8008e2e:	4a0d      	ldr	r2, [pc, #52]	@ (8008e64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e30:	430b      	orrs	r3, r1
 8008e32:	6113      	str	r3, [r2, #16]
 8008e34:	e005      	b.n	8008e42 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8008e36:	4b0b      	ldr	r3, [pc, #44]	@ (8008e64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e38:	691b      	ldr	r3, [r3, #16]
 8008e3a:	4a0a      	ldr	r2, [pc, #40]	@ (8008e64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e3c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008e40:	6113      	str	r3, [r2, #16]
 8008e42:	4b08      	ldr	r3, [pc, #32]	@ (8008e64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e44:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8008e46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e4a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008e4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008e52:	4a04      	ldr	r2, [pc, #16]	@ (8008e64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e54:	430b      	orrs	r3, r1
 8008e56:	6713      	str	r3, [r2, #112]	@ 0x70
 8008e58:	e00e      	b.n	8008e78 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008e5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8008e62:	e009      	b.n	8008e78 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008e64:	58024400 	.word	0x58024400
 8008e68:	58024800 	.word	0x58024800
 8008e6c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e80:	f002 0301 	and.w	r3, r2, #1
 8008e84:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008e88:	2300      	movs	r3, #0
 8008e8a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008e8e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008e92:	460b      	mov	r3, r1
 8008e94:	4313      	orrs	r3, r2
 8008e96:	f000 8089 	beq.w	8008fac <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8008e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e9e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008ea0:	2b28      	cmp	r3, #40	@ 0x28
 8008ea2:	d86b      	bhi.n	8008f7c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8008ea4:	a201      	add	r2, pc, #4	@ (adr r2, 8008eac <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eaa:	bf00      	nop
 8008eac:	08008f85 	.word	0x08008f85
 8008eb0:	08008f7d 	.word	0x08008f7d
 8008eb4:	08008f7d 	.word	0x08008f7d
 8008eb8:	08008f7d 	.word	0x08008f7d
 8008ebc:	08008f7d 	.word	0x08008f7d
 8008ec0:	08008f7d 	.word	0x08008f7d
 8008ec4:	08008f7d 	.word	0x08008f7d
 8008ec8:	08008f7d 	.word	0x08008f7d
 8008ecc:	08008f51 	.word	0x08008f51
 8008ed0:	08008f7d 	.word	0x08008f7d
 8008ed4:	08008f7d 	.word	0x08008f7d
 8008ed8:	08008f7d 	.word	0x08008f7d
 8008edc:	08008f7d 	.word	0x08008f7d
 8008ee0:	08008f7d 	.word	0x08008f7d
 8008ee4:	08008f7d 	.word	0x08008f7d
 8008ee8:	08008f7d 	.word	0x08008f7d
 8008eec:	08008f67 	.word	0x08008f67
 8008ef0:	08008f7d 	.word	0x08008f7d
 8008ef4:	08008f7d 	.word	0x08008f7d
 8008ef8:	08008f7d 	.word	0x08008f7d
 8008efc:	08008f7d 	.word	0x08008f7d
 8008f00:	08008f7d 	.word	0x08008f7d
 8008f04:	08008f7d 	.word	0x08008f7d
 8008f08:	08008f7d 	.word	0x08008f7d
 8008f0c:	08008f85 	.word	0x08008f85
 8008f10:	08008f7d 	.word	0x08008f7d
 8008f14:	08008f7d 	.word	0x08008f7d
 8008f18:	08008f7d 	.word	0x08008f7d
 8008f1c:	08008f7d 	.word	0x08008f7d
 8008f20:	08008f7d 	.word	0x08008f7d
 8008f24:	08008f7d 	.word	0x08008f7d
 8008f28:	08008f7d 	.word	0x08008f7d
 8008f2c:	08008f85 	.word	0x08008f85
 8008f30:	08008f7d 	.word	0x08008f7d
 8008f34:	08008f7d 	.word	0x08008f7d
 8008f38:	08008f7d 	.word	0x08008f7d
 8008f3c:	08008f7d 	.word	0x08008f7d
 8008f40:	08008f7d 	.word	0x08008f7d
 8008f44:	08008f7d 	.word	0x08008f7d
 8008f48:	08008f7d 	.word	0x08008f7d
 8008f4c:	08008f85 	.word	0x08008f85
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f54:	3308      	adds	r3, #8
 8008f56:	2101      	movs	r1, #1
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f001 fe95 	bl	800ac88 <RCCEx_PLL2_Config>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008f64:	e00f      	b.n	8008f86 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f6a:	3328      	adds	r3, #40	@ 0x28
 8008f6c:	2101      	movs	r1, #1
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f001 ff3c 	bl	800adec <RCCEx_PLL3_Config>
 8008f74:	4603      	mov	r3, r0
 8008f76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008f7a:	e004      	b.n	8008f86 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008f82:	e000      	b.n	8008f86 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8008f84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d10a      	bne.n	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008f8e:	4bbf      	ldr	r3, [pc, #764]	@ (800928c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008f90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f92:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8008f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f9a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008f9c:	4abb      	ldr	r2, [pc, #748]	@ (800928c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008f9e:	430b      	orrs	r3, r1
 8008fa0:	6553      	str	r3, [r2, #84]	@ 0x54
 8008fa2:	e003      	b.n	8008fac <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fa4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008fa8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008fac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fb4:	f002 0302 	and.w	r3, r2, #2
 8008fb8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008fc2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8008fc6:	460b      	mov	r3, r1
 8008fc8:	4313      	orrs	r3, r2
 8008fca:	d041      	beq.n	8009050 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008fcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fd0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008fd2:	2b05      	cmp	r3, #5
 8008fd4:	d824      	bhi.n	8009020 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8008fd6:	a201      	add	r2, pc, #4	@ (adr r2, 8008fdc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8008fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fdc:	08009029 	.word	0x08009029
 8008fe0:	08008ff5 	.word	0x08008ff5
 8008fe4:	0800900b 	.word	0x0800900b
 8008fe8:	08009029 	.word	0x08009029
 8008fec:	08009029 	.word	0x08009029
 8008ff0:	08009029 	.word	0x08009029
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008ff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ff8:	3308      	adds	r3, #8
 8008ffa:	2101      	movs	r1, #1
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	f001 fe43 	bl	800ac88 <RCCEx_PLL2_Config>
 8009002:	4603      	mov	r3, r0
 8009004:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009008:	e00f      	b.n	800902a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800900a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800900e:	3328      	adds	r3, #40	@ 0x28
 8009010:	2101      	movs	r1, #1
 8009012:	4618      	mov	r0, r3
 8009014:	f001 feea 	bl	800adec <RCCEx_PLL3_Config>
 8009018:	4603      	mov	r3, r0
 800901a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800901e:	e004      	b.n	800902a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009020:	2301      	movs	r3, #1
 8009022:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009026:	e000      	b.n	800902a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8009028:	bf00      	nop
    }

    if (ret == HAL_OK)
 800902a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800902e:	2b00      	cmp	r3, #0
 8009030:	d10a      	bne.n	8009048 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009032:	4b96      	ldr	r3, [pc, #600]	@ (800928c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009034:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009036:	f023 0107 	bic.w	r1, r3, #7
 800903a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800903e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009040:	4a92      	ldr	r2, [pc, #584]	@ (800928c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009042:	430b      	orrs	r3, r1
 8009044:	6553      	str	r3, [r2, #84]	@ 0x54
 8009046:	e003      	b.n	8009050 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009048:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800904c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009050:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009058:	f002 0304 	and.w	r3, r2, #4
 800905c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009060:	2300      	movs	r3, #0
 8009062:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009066:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800906a:	460b      	mov	r3, r1
 800906c:	4313      	orrs	r3, r2
 800906e:	d044      	beq.n	80090fa <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009070:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009074:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009078:	2b05      	cmp	r3, #5
 800907a:	d825      	bhi.n	80090c8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800907c:	a201      	add	r2, pc, #4	@ (adr r2, 8009084 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800907e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009082:	bf00      	nop
 8009084:	080090d1 	.word	0x080090d1
 8009088:	0800909d 	.word	0x0800909d
 800908c:	080090b3 	.word	0x080090b3
 8009090:	080090d1 	.word	0x080090d1
 8009094:	080090d1 	.word	0x080090d1
 8009098:	080090d1 	.word	0x080090d1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800909c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090a0:	3308      	adds	r3, #8
 80090a2:	2101      	movs	r1, #1
 80090a4:	4618      	mov	r0, r3
 80090a6:	f001 fdef 	bl	800ac88 <RCCEx_PLL2_Config>
 80090aa:	4603      	mov	r3, r0
 80090ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80090b0:	e00f      	b.n	80090d2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80090b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090b6:	3328      	adds	r3, #40	@ 0x28
 80090b8:	2101      	movs	r1, #1
 80090ba:	4618      	mov	r0, r3
 80090bc:	f001 fe96 	bl	800adec <RCCEx_PLL3_Config>
 80090c0:	4603      	mov	r3, r0
 80090c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80090c6:	e004      	b.n	80090d2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80090c8:	2301      	movs	r3, #1
 80090ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80090ce:	e000      	b.n	80090d2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80090d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d10b      	bne.n	80090f2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80090da:	4b6c      	ldr	r3, [pc, #432]	@ (800928c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80090dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090de:	f023 0107 	bic.w	r1, r3, #7
 80090e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80090ea:	4a68      	ldr	r2, [pc, #416]	@ (800928c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80090ec:	430b      	orrs	r3, r1
 80090ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80090f0:	e003      	b.n	80090fa <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80090f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80090fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009102:	f002 0320 	and.w	r3, r2, #32
 8009106:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800910a:	2300      	movs	r3, #0
 800910c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009110:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009114:	460b      	mov	r3, r1
 8009116:	4313      	orrs	r3, r2
 8009118:	d055      	beq.n	80091c6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800911a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800911e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009122:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009126:	d033      	beq.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8009128:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800912c:	d82c      	bhi.n	8009188 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800912e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009132:	d02f      	beq.n	8009194 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8009134:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009138:	d826      	bhi.n	8009188 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800913a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800913e:	d02b      	beq.n	8009198 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8009140:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009144:	d820      	bhi.n	8009188 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009146:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800914a:	d012      	beq.n	8009172 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800914c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009150:	d81a      	bhi.n	8009188 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009152:	2b00      	cmp	r3, #0
 8009154:	d022      	beq.n	800919c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8009156:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800915a:	d115      	bne.n	8009188 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800915c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009160:	3308      	adds	r3, #8
 8009162:	2100      	movs	r1, #0
 8009164:	4618      	mov	r0, r3
 8009166:	f001 fd8f 	bl	800ac88 <RCCEx_PLL2_Config>
 800916a:	4603      	mov	r3, r0
 800916c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009170:	e015      	b.n	800919e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009172:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009176:	3328      	adds	r3, #40	@ 0x28
 8009178:	2102      	movs	r1, #2
 800917a:	4618      	mov	r0, r3
 800917c:	f001 fe36 	bl	800adec <RCCEx_PLL3_Config>
 8009180:	4603      	mov	r3, r0
 8009182:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009186:	e00a      	b.n	800919e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009188:	2301      	movs	r3, #1
 800918a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800918e:	e006      	b.n	800919e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009190:	bf00      	nop
 8009192:	e004      	b.n	800919e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009194:	bf00      	nop
 8009196:	e002      	b.n	800919e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009198:	bf00      	nop
 800919a:	e000      	b.n	800919e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800919c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800919e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d10b      	bne.n	80091be <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80091a6:	4b39      	ldr	r3, [pc, #228]	@ (800928c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80091a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091aa:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80091ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091b6:	4a35      	ldr	r2, [pc, #212]	@ (800928c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80091b8:	430b      	orrs	r3, r1
 80091ba:	6553      	str	r3, [r2, #84]	@ 0x54
 80091bc:	e003      	b.n	80091c6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80091c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80091c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ce:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80091d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80091d6:	2300      	movs	r3, #0
 80091d8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80091dc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80091e0:	460b      	mov	r3, r1
 80091e2:	4313      	orrs	r3, r2
 80091e4:	d058      	beq.n	8009298 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80091e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80091ee:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80091f2:	d033      	beq.n	800925c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80091f4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80091f8:	d82c      	bhi.n	8009254 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80091fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80091fe:	d02f      	beq.n	8009260 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8009200:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009204:	d826      	bhi.n	8009254 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009206:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800920a:	d02b      	beq.n	8009264 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800920c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009210:	d820      	bhi.n	8009254 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009212:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009216:	d012      	beq.n	800923e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8009218:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800921c:	d81a      	bhi.n	8009254 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800921e:	2b00      	cmp	r3, #0
 8009220:	d022      	beq.n	8009268 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8009222:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009226:	d115      	bne.n	8009254 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009228:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800922c:	3308      	adds	r3, #8
 800922e:	2100      	movs	r1, #0
 8009230:	4618      	mov	r0, r3
 8009232:	f001 fd29 	bl	800ac88 <RCCEx_PLL2_Config>
 8009236:	4603      	mov	r3, r0
 8009238:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800923c:	e015      	b.n	800926a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800923e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009242:	3328      	adds	r3, #40	@ 0x28
 8009244:	2102      	movs	r1, #2
 8009246:	4618      	mov	r0, r3
 8009248:	f001 fdd0 	bl	800adec <RCCEx_PLL3_Config>
 800924c:	4603      	mov	r3, r0
 800924e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009252:	e00a      	b.n	800926a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009254:	2301      	movs	r3, #1
 8009256:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800925a:	e006      	b.n	800926a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800925c:	bf00      	nop
 800925e:	e004      	b.n	800926a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009260:	bf00      	nop
 8009262:	e002      	b.n	800926a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009264:	bf00      	nop
 8009266:	e000      	b.n	800926a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009268:	bf00      	nop
    }

    if (ret == HAL_OK)
 800926a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800926e:	2b00      	cmp	r3, #0
 8009270:	d10e      	bne.n	8009290 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009272:	4b06      	ldr	r3, [pc, #24]	@ (800928c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009274:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009276:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800927a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800927e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009282:	4a02      	ldr	r2, [pc, #8]	@ (800928c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009284:	430b      	orrs	r3, r1
 8009286:	6593      	str	r3, [r2, #88]	@ 0x58
 8009288:	e006      	b.n	8009298 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800928a:	bf00      	nop
 800928c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009290:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009294:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009298:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800929c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092a0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80092a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80092a8:	2300      	movs	r3, #0
 80092aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80092ae:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80092b2:	460b      	mov	r3, r1
 80092b4:	4313      	orrs	r3, r2
 80092b6:	d055      	beq.n	8009364 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80092b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092bc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80092c0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80092c4:	d033      	beq.n	800932e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80092c6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80092ca:	d82c      	bhi.n	8009326 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80092cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80092d0:	d02f      	beq.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80092d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80092d6:	d826      	bhi.n	8009326 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80092d8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80092dc:	d02b      	beq.n	8009336 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80092de:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80092e2:	d820      	bhi.n	8009326 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80092e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80092e8:	d012      	beq.n	8009310 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80092ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80092ee:	d81a      	bhi.n	8009326 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d022      	beq.n	800933a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80092f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80092f8:	d115      	bne.n	8009326 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80092fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092fe:	3308      	adds	r3, #8
 8009300:	2100      	movs	r1, #0
 8009302:	4618      	mov	r0, r3
 8009304:	f001 fcc0 	bl	800ac88 <RCCEx_PLL2_Config>
 8009308:	4603      	mov	r3, r0
 800930a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800930e:	e015      	b.n	800933c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009310:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009314:	3328      	adds	r3, #40	@ 0x28
 8009316:	2102      	movs	r1, #2
 8009318:	4618      	mov	r0, r3
 800931a:	f001 fd67 	bl	800adec <RCCEx_PLL3_Config>
 800931e:	4603      	mov	r3, r0
 8009320:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009324:	e00a      	b.n	800933c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009326:	2301      	movs	r3, #1
 8009328:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800932c:	e006      	b.n	800933c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800932e:	bf00      	nop
 8009330:	e004      	b.n	800933c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009332:	bf00      	nop
 8009334:	e002      	b.n	800933c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009336:	bf00      	nop
 8009338:	e000      	b.n	800933c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800933a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800933c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009340:	2b00      	cmp	r3, #0
 8009342:	d10b      	bne.n	800935c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009344:	4ba1      	ldr	r3, [pc, #644]	@ (80095cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009346:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009348:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800934c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009350:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009354:	4a9d      	ldr	r2, [pc, #628]	@ (80095cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009356:	430b      	orrs	r3, r1
 8009358:	6593      	str	r3, [r2, #88]	@ 0x58
 800935a:	e003      	b.n	8009364 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800935c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009360:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009364:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800936c:	f002 0308 	and.w	r3, r2, #8
 8009370:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009374:	2300      	movs	r3, #0
 8009376:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800937a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800937e:	460b      	mov	r3, r1
 8009380:	4313      	orrs	r3, r2
 8009382:	d01e      	beq.n	80093c2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8009384:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009388:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800938c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009390:	d10c      	bne.n	80093ac <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009392:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009396:	3328      	adds	r3, #40	@ 0x28
 8009398:	2102      	movs	r1, #2
 800939a:	4618      	mov	r0, r3
 800939c:	f001 fd26 	bl	800adec <RCCEx_PLL3_Config>
 80093a0:	4603      	mov	r3, r0
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d002      	beq.n	80093ac <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80093a6:	2301      	movs	r3, #1
 80093a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80093ac:	4b87      	ldr	r3, [pc, #540]	@ (80095cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80093ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093b0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80093b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80093bc:	4a83      	ldr	r2, [pc, #524]	@ (80095cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80093be:	430b      	orrs	r3, r1
 80093c0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80093c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ca:	f002 0310 	and.w	r3, r2, #16
 80093ce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80093d2:	2300      	movs	r3, #0
 80093d4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80093d8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80093dc:	460b      	mov	r3, r1
 80093de:	4313      	orrs	r3, r2
 80093e0:	d01e      	beq.n	8009420 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80093e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80093ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80093ee:	d10c      	bne.n	800940a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80093f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093f4:	3328      	adds	r3, #40	@ 0x28
 80093f6:	2102      	movs	r1, #2
 80093f8:	4618      	mov	r0, r3
 80093fa:	f001 fcf7 	bl	800adec <RCCEx_PLL3_Config>
 80093fe:	4603      	mov	r3, r0
 8009400:	2b00      	cmp	r3, #0
 8009402:	d002      	beq.n	800940a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8009404:	2301      	movs	r3, #1
 8009406:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800940a:	4b70      	ldr	r3, [pc, #448]	@ (80095cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800940c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800940e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009412:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009416:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800941a:	4a6c      	ldr	r2, [pc, #432]	@ (80095cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800941c:	430b      	orrs	r3, r1
 800941e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009420:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009428:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800942c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009430:	2300      	movs	r3, #0
 8009432:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009436:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800943a:	460b      	mov	r3, r1
 800943c:	4313      	orrs	r3, r2
 800943e:	d03e      	beq.n	80094be <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009440:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009444:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009448:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800944c:	d022      	beq.n	8009494 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800944e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009452:	d81b      	bhi.n	800948c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8009454:	2b00      	cmp	r3, #0
 8009456:	d003      	beq.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8009458:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800945c:	d00b      	beq.n	8009476 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800945e:	e015      	b.n	800948c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009460:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009464:	3308      	adds	r3, #8
 8009466:	2100      	movs	r1, #0
 8009468:	4618      	mov	r0, r3
 800946a:	f001 fc0d 	bl	800ac88 <RCCEx_PLL2_Config>
 800946e:	4603      	mov	r3, r0
 8009470:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009474:	e00f      	b.n	8009496 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009476:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800947a:	3328      	adds	r3, #40	@ 0x28
 800947c:	2102      	movs	r1, #2
 800947e:	4618      	mov	r0, r3
 8009480:	f001 fcb4 	bl	800adec <RCCEx_PLL3_Config>
 8009484:	4603      	mov	r3, r0
 8009486:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800948a:	e004      	b.n	8009496 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800948c:	2301      	movs	r3, #1
 800948e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009492:	e000      	b.n	8009496 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8009494:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009496:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800949a:	2b00      	cmp	r3, #0
 800949c:	d10b      	bne.n	80094b6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800949e:	4b4b      	ldr	r3, [pc, #300]	@ (80095cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80094a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094a2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80094a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80094ae:	4a47      	ldr	r2, [pc, #284]	@ (80095cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80094b0:	430b      	orrs	r3, r1
 80094b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80094b4:	e003      	b.n	80094be <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80094ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80094be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80094ca:	67bb      	str	r3, [r7, #120]	@ 0x78
 80094cc:	2300      	movs	r3, #0
 80094ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80094d0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80094d4:	460b      	mov	r3, r1
 80094d6:	4313      	orrs	r3, r2
 80094d8:	d03b      	beq.n	8009552 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80094da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094e2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80094e6:	d01f      	beq.n	8009528 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80094e8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80094ec:	d818      	bhi.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80094ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80094f2:	d003      	beq.n	80094fc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80094f4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80094f8:	d007      	beq.n	800950a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80094fa:	e011      	b.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094fc:	4b33      	ldr	r3, [pc, #204]	@ (80095cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80094fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009500:	4a32      	ldr	r2, [pc, #200]	@ (80095cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009502:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009506:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009508:	e00f      	b.n	800952a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800950a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800950e:	3328      	adds	r3, #40	@ 0x28
 8009510:	2101      	movs	r1, #1
 8009512:	4618      	mov	r0, r3
 8009514:	f001 fc6a 	bl	800adec <RCCEx_PLL3_Config>
 8009518:	4603      	mov	r3, r0
 800951a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800951e:	e004      	b.n	800952a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009520:	2301      	movs	r3, #1
 8009522:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009526:	e000      	b.n	800952a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8009528:	bf00      	nop
    }

    if (ret == HAL_OK)
 800952a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800952e:	2b00      	cmp	r3, #0
 8009530:	d10b      	bne.n	800954a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009532:	4b26      	ldr	r3, [pc, #152]	@ (80095cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009534:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009536:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800953a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800953e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009542:	4a22      	ldr	r2, [pc, #136]	@ (80095cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009544:	430b      	orrs	r3, r1
 8009546:	6553      	str	r3, [r2, #84]	@ 0x54
 8009548:	e003      	b.n	8009552 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800954a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800954e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009552:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800955a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800955e:	673b      	str	r3, [r7, #112]	@ 0x70
 8009560:	2300      	movs	r3, #0
 8009562:	677b      	str	r3, [r7, #116]	@ 0x74
 8009564:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8009568:	460b      	mov	r3, r1
 800956a:	4313      	orrs	r3, r2
 800956c:	d034      	beq.n	80095d8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800956e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009572:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009574:	2b00      	cmp	r3, #0
 8009576:	d003      	beq.n	8009580 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8009578:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800957c:	d007      	beq.n	800958e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800957e:	e011      	b.n	80095a4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009580:	4b12      	ldr	r3, [pc, #72]	@ (80095cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009584:	4a11      	ldr	r2, [pc, #68]	@ (80095cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009586:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800958a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800958c:	e00e      	b.n	80095ac <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800958e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009592:	3308      	adds	r3, #8
 8009594:	2102      	movs	r1, #2
 8009596:	4618      	mov	r0, r3
 8009598:	f001 fb76 	bl	800ac88 <RCCEx_PLL2_Config>
 800959c:	4603      	mov	r3, r0
 800959e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80095a2:	e003      	b.n	80095ac <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80095a4:	2301      	movs	r3, #1
 80095a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80095aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d10d      	bne.n	80095d0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80095b4:	4b05      	ldr	r3, [pc, #20]	@ (80095cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80095b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80095b8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80095bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095c2:	4a02      	ldr	r2, [pc, #8]	@ (80095cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80095c4:	430b      	orrs	r3, r1
 80095c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80095c8:	e006      	b.n	80095d8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80095ca:	bf00      	nop
 80095cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80095d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80095d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095e0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80095e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80095e6:	2300      	movs	r3, #0
 80095e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80095ea:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80095ee:	460b      	mov	r3, r1
 80095f0:	4313      	orrs	r3, r2
 80095f2:	d00c      	beq.n	800960e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80095f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095f8:	3328      	adds	r3, #40	@ 0x28
 80095fa:	2102      	movs	r1, #2
 80095fc:	4618      	mov	r0, r3
 80095fe:	f001 fbf5 	bl	800adec <RCCEx_PLL3_Config>
 8009602:	4603      	mov	r3, r0
 8009604:	2b00      	cmp	r3, #0
 8009606:	d002      	beq.n	800960e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8009608:	2301      	movs	r3, #1
 800960a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800960e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009616:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800961a:	663b      	str	r3, [r7, #96]	@ 0x60
 800961c:	2300      	movs	r3, #0
 800961e:	667b      	str	r3, [r7, #100]	@ 0x64
 8009620:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8009624:	460b      	mov	r3, r1
 8009626:	4313      	orrs	r3, r2
 8009628:	d038      	beq.n	800969c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800962a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800962e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009632:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009636:	d018      	beq.n	800966a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8009638:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800963c:	d811      	bhi.n	8009662 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800963e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009642:	d014      	beq.n	800966e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8009644:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009648:	d80b      	bhi.n	8009662 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800964a:	2b00      	cmp	r3, #0
 800964c:	d011      	beq.n	8009672 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800964e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009652:	d106      	bne.n	8009662 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009654:	4bc3      	ldr	r3, [pc, #780]	@ (8009964 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009658:	4ac2      	ldr	r2, [pc, #776]	@ (8009964 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800965a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800965e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009660:	e008      	b.n	8009674 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009662:	2301      	movs	r3, #1
 8009664:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009668:	e004      	b.n	8009674 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800966a:	bf00      	nop
 800966c:	e002      	b.n	8009674 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800966e:	bf00      	nop
 8009670:	e000      	b.n	8009674 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009672:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009674:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009678:	2b00      	cmp	r3, #0
 800967a:	d10b      	bne.n	8009694 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800967c:	4bb9      	ldr	r3, [pc, #740]	@ (8009964 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800967e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009680:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009684:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009688:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800968c:	4ab5      	ldr	r2, [pc, #724]	@ (8009964 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800968e:	430b      	orrs	r3, r1
 8009690:	6553      	str	r3, [r2, #84]	@ 0x54
 8009692:	e003      	b.n	800969c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009694:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009698:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800969c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096a4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80096a8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80096aa:	2300      	movs	r3, #0
 80096ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80096ae:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80096b2:	460b      	mov	r3, r1
 80096b4:	4313      	orrs	r3, r2
 80096b6:	d009      	beq.n	80096cc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80096b8:	4baa      	ldr	r3, [pc, #680]	@ (8009964 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80096ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096bc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80096c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80096c6:	4aa7      	ldr	r2, [pc, #668]	@ (8009964 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80096c8:	430b      	orrs	r3, r1
 80096ca:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80096cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096d4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80096d8:	653b      	str	r3, [r7, #80]	@ 0x50
 80096da:	2300      	movs	r3, #0
 80096dc:	657b      	str	r3, [r7, #84]	@ 0x54
 80096de:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80096e2:	460b      	mov	r3, r1
 80096e4:	4313      	orrs	r3, r2
 80096e6:	d00a      	beq.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80096e8:	4b9e      	ldr	r3, [pc, #632]	@ (8009964 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80096ea:	691b      	ldr	r3, [r3, #16]
 80096ec:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80096f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096f4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80096f8:	4a9a      	ldr	r2, [pc, #616]	@ (8009964 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80096fa:	430b      	orrs	r3, r1
 80096fc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80096fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009706:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800970a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800970c:	2300      	movs	r3, #0
 800970e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009710:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8009714:	460b      	mov	r3, r1
 8009716:	4313      	orrs	r3, r2
 8009718:	d009      	beq.n	800972e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800971a:	4b92      	ldr	r3, [pc, #584]	@ (8009964 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800971c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800971e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8009722:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009726:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009728:	4a8e      	ldr	r2, [pc, #568]	@ (8009964 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800972a:	430b      	orrs	r3, r1
 800972c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800972e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009736:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800973a:	643b      	str	r3, [r7, #64]	@ 0x40
 800973c:	2300      	movs	r3, #0
 800973e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009740:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009744:	460b      	mov	r3, r1
 8009746:	4313      	orrs	r3, r2
 8009748:	d00e      	beq.n	8009768 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800974a:	4b86      	ldr	r3, [pc, #536]	@ (8009964 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800974c:	691b      	ldr	r3, [r3, #16]
 800974e:	4a85      	ldr	r2, [pc, #532]	@ (8009964 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009750:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009754:	6113      	str	r3, [r2, #16]
 8009756:	4b83      	ldr	r3, [pc, #524]	@ (8009964 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009758:	6919      	ldr	r1, [r3, #16]
 800975a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800975e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009762:	4a80      	ldr	r2, [pc, #512]	@ (8009964 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009764:	430b      	orrs	r3, r1
 8009766:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009768:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800976c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009770:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8009774:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009776:	2300      	movs	r3, #0
 8009778:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800977a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800977e:	460b      	mov	r3, r1
 8009780:	4313      	orrs	r3, r2
 8009782:	d009      	beq.n	8009798 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009784:	4b77      	ldr	r3, [pc, #476]	@ (8009964 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009786:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009788:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800978c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009790:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009792:	4a74      	ldr	r2, [pc, #464]	@ (8009964 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009794:	430b      	orrs	r3, r1
 8009796:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009798:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800979c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097a0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80097a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80097a6:	2300      	movs	r3, #0
 80097a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80097aa:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80097ae:	460b      	mov	r3, r1
 80097b0:	4313      	orrs	r3, r2
 80097b2:	d00a      	beq.n	80097ca <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80097b4:	4b6b      	ldr	r3, [pc, #428]	@ (8009964 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80097b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097b8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80097bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80097c4:	4a67      	ldr	r2, [pc, #412]	@ (8009964 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80097c6:	430b      	orrs	r3, r1
 80097c8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80097ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097d2:	2100      	movs	r1, #0
 80097d4:	62b9      	str	r1, [r7, #40]	@ 0x28
 80097d6:	f003 0301 	and.w	r3, r3, #1
 80097da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80097dc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80097e0:	460b      	mov	r3, r1
 80097e2:	4313      	orrs	r3, r2
 80097e4:	d011      	beq.n	800980a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80097e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097ea:	3308      	adds	r3, #8
 80097ec:	2100      	movs	r1, #0
 80097ee:	4618      	mov	r0, r3
 80097f0:	f001 fa4a 	bl	800ac88 <RCCEx_PLL2_Config>
 80097f4:	4603      	mov	r3, r0
 80097f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80097fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d003      	beq.n	800980a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009802:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009806:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800980a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800980e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009812:	2100      	movs	r1, #0
 8009814:	6239      	str	r1, [r7, #32]
 8009816:	f003 0302 	and.w	r3, r3, #2
 800981a:	627b      	str	r3, [r7, #36]	@ 0x24
 800981c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009820:	460b      	mov	r3, r1
 8009822:	4313      	orrs	r3, r2
 8009824:	d011      	beq.n	800984a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009826:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800982a:	3308      	adds	r3, #8
 800982c:	2101      	movs	r1, #1
 800982e:	4618      	mov	r0, r3
 8009830:	f001 fa2a 	bl	800ac88 <RCCEx_PLL2_Config>
 8009834:	4603      	mov	r3, r0
 8009836:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800983a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800983e:	2b00      	cmp	r3, #0
 8009840:	d003      	beq.n	800984a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009842:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009846:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800984a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800984e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009852:	2100      	movs	r1, #0
 8009854:	61b9      	str	r1, [r7, #24]
 8009856:	f003 0304 	and.w	r3, r3, #4
 800985a:	61fb      	str	r3, [r7, #28]
 800985c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009860:	460b      	mov	r3, r1
 8009862:	4313      	orrs	r3, r2
 8009864:	d011      	beq.n	800988a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009866:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800986a:	3308      	adds	r3, #8
 800986c:	2102      	movs	r1, #2
 800986e:	4618      	mov	r0, r3
 8009870:	f001 fa0a 	bl	800ac88 <RCCEx_PLL2_Config>
 8009874:	4603      	mov	r3, r0
 8009876:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800987a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800987e:	2b00      	cmp	r3, #0
 8009880:	d003      	beq.n	800988a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009882:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009886:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800988a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800988e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009892:	2100      	movs	r1, #0
 8009894:	6139      	str	r1, [r7, #16]
 8009896:	f003 0308 	and.w	r3, r3, #8
 800989a:	617b      	str	r3, [r7, #20]
 800989c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80098a0:	460b      	mov	r3, r1
 80098a2:	4313      	orrs	r3, r2
 80098a4:	d011      	beq.n	80098ca <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80098a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098aa:	3328      	adds	r3, #40	@ 0x28
 80098ac:	2100      	movs	r1, #0
 80098ae:	4618      	mov	r0, r3
 80098b0:	f001 fa9c 	bl	800adec <RCCEx_PLL3_Config>
 80098b4:	4603      	mov	r3, r0
 80098b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80098ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d003      	beq.n	80098ca <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80098c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80098ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d2:	2100      	movs	r1, #0
 80098d4:	60b9      	str	r1, [r7, #8]
 80098d6:	f003 0310 	and.w	r3, r3, #16
 80098da:	60fb      	str	r3, [r7, #12]
 80098dc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80098e0:	460b      	mov	r3, r1
 80098e2:	4313      	orrs	r3, r2
 80098e4:	d011      	beq.n	800990a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80098e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098ea:	3328      	adds	r3, #40	@ 0x28
 80098ec:	2101      	movs	r1, #1
 80098ee:	4618      	mov	r0, r3
 80098f0:	f001 fa7c 	bl	800adec <RCCEx_PLL3_Config>
 80098f4:	4603      	mov	r3, r0
 80098f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80098fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d003      	beq.n	800990a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009902:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009906:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800990a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800990e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009912:	2100      	movs	r1, #0
 8009914:	6039      	str	r1, [r7, #0]
 8009916:	f003 0320 	and.w	r3, r3, #32
 800991a:	607b      	str	r3, [r7, #4]
 800991c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009920:	460b      	mov	r3, r1
 8009922:	4313      	orrs	r3, r2
 8009924:	d011      	beq.n	800994a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009926:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800992a:	3328      	adds	r3, #40	@ 0x28
 800992c:	2102      	movs	r1, #2
 800992e:	4618      	mov	r0, r3
 8009930:	f001 fa5c 	bl	800adec <RCCEx_PLL3_Config>
 8009934:	4603      	mov	r3, r0
 8009936:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800993a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800993e:	2b00      	cmp	r3, #0
 8009940:	d003      	beq.n	800994a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009942:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009946:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800994a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800994e:	2b00      	cmp	r3, #0
 8009950:	d101      	bne.n	8009956 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8009952:	2300      	movs	r3, #0
 8009954:	e000      	b.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8009956:	2301      	movs	r3, #1
}
 8009958:	4618      	mov	r0, r3
 800995a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800995e:	46bd      	mov	sp, r7
 8009960:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009964:	58024400 	.word	0x58024400

08009968 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b090      	sub	sp, #64	@ 0x40
 800996c:	af00      	add	r7, sp, #0
 800996e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009972:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009976:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800997a:	430b      	orrs	r3, r1
 800997c:	f040 8094 	bne.w	8009aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8009980:	4b9e      	ldr	r3, [pc, #632]	@ (8009bfc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009982:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009984:	f003 0307 	and.w	r3, r3, #7
 8009988:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800998a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800998c:	2b04      	cmp	r3, #4
 800998e:	f200 8087 	bhi.w	8009aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8009992:	a201      	add	r2, pc, #4	@ (adr r2, 8009998 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8009994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009998:	080099ad 	.word	0x080099ad
 800999c:	080099d5 	.word	0x080099d5
 80099a0:	080099fd 	.word	0x080099fd
 80099a4:	08009a99 	.word	0x08009a99
 80099a8:	08009a25 	.word	0x08009a25
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80099ac:	4b93      	ldr	r3, [pc, #588]	@ (8009bfc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80099b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80099b8:	d108      	bne.n	80099cc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80099ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80099be:	4618      	mov	r0, r3
 80099c0:	f001 f810 	bl	800a9e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80099c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80099c8:	f000 bd45 	b.w	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80099cc:	2300      	movs	r3, #0
 80099ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099d0:	f000 bd41 	b.w	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80099d4:	4b89      	ldr	r3, [pc, #548]	@ (8009bfc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80099dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80099e0:	d108      	bne.n	80099f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80099e2:	f107 0318 	add.w	r3, r7, #24
 80099e6:	4618      	mov	r0, r3
 80099e8:	f000 fd54 	bl	800a494 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80099ec:	69bb      	ldr	r3, [r7, #24]
 80099ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80099f0:	f000 bd31 	b.w	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80099f4:	2300      	movs	r3, #0
 80099f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099f8:	f000 bd2d 	b.w	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80099fc:	4b7f      	ldr	r3, [pc, #508]	@ (8009bfc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009a04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a08:	d108      	bne.n	8009a1c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a0a:	f107 030c 	add.w	r3, r7, #12
 8009a0e:	4618      	mov	r0, r3
 8009a10:	f000 fe94 	bl	800a73c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a18:	f000 bd1d 	b.w	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a20:	f000 bd19 	b.w	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009a24:	4b75      	ldr	r3, [pc, #468]	@ (8009bfc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009a26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009a28:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009a2c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009a2e:	4b73      	ldr	r3, [pc, #460]	@ (8009bfc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f003 0304 	and.w	r3, r3, #4
 8009a36:	2b04      	cmp	r3, #4
 8009a38:	d10c      	bne.n	8009a54 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8009a3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d109      	bne.n	8009a54 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009a40:	4b6e      	ldr	r3, [pc, #440]	@ (8009bfc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	08db      	lsrs	r3, r3, #3
 8009a46:	f003 0303 	and.w	r3, r3, #3
 8009a4a:	4a6d      	ldr	r2, [pc, #436]	@ (8009c00 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009a4c:	fa22 f303 	lsr.w	r3, r2, r3
 8009a50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a52:	e01f      	b.n	8009a94 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009a54:	4b69      	ldr	r3, [pc, #420]	@ (8009bfc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009a60:	d106      	bne.n	8009a70 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8009a62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a64:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009a68:	d102      	bne.n	8009a70 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009a6a:	4b66      	ldr	r3, [pc, #408]	@ (8009c04 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009a6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a6e:	e011      	b.n	8009a94 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009a70:	4b62      	ldr	r3, [pc, #392]	@ (8009bfc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a78:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009a7c:	d106      	bne.n	8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8009a7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a84:	d102      	bne.n	8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009a86:	4b60      	ldr	r3, [pc, #384]	@ (8009c08 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009a88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a8a:	e003      	b.n	8009a94 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009a90:	f000 bce1 	b.w	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009a94:	f000 bcdf 	b.w	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009a98:	4b5c      	ldr	r3, [pc, #368]	@ (8009c0c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a9c:	f000 bcdb 	b.w	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009aa4:	f000 bcd7 	b.w	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8009aa8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009aac:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8009ab0:	430b      	orrs	r3, r1
 8009ab2:	f040 80ad 	bne.w	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8009ab6:	4b51      	ldr	r3, [pc, #324]	@ (8009bfc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009ab8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009aba:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8009abe:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ac2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ac6:	d056      	beq.n	8009b76 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8009ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ace:	f200 8090 	bhi.w	8009bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ad4:	2bc0      	cmp	r3, #192	@ 0xc0
 8009ad6:	f000 8088 	beq.w	8009bea <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8009ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009adc:	2bc0      	cmp	r3, #192	@ 0xc0
 8009ade:	f200 8088 	bhi.w	8009bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ae4:	2b80      	cmp	r3, #128	@ 0x80
 8009ae6:	d032      	beq.n	8009b4e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8009ae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aea:	2b80      	cmp	r3, #128	@ 0x80
 8009aec:	f200 8081 	bhi.w	8009bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d003      	beq.n	8009afe <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8009af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009af8:	2b40      	cmp	r3, #64	@ 0x40
 8009afa:	d014      	beq.n	8009b26 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8009afc:	e079      	b.n	8009bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009afe:	4b3f      	ldr	r3, [pc, #252]	@ (8009bfc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009b06:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009b0a:	d108      	bne.n	8009b1e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009b0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009b10:	4618      	mov	r0, r3
 8009b12:	f000 ff67 	bl	800a9e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b1a:	f000 bc9c 	b.w	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b22:	f000 bc98 	b.w	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009b26:	4b35      	ldr	r3, [pc, #212]	@ (8009bfc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009b2e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009b32:	d108      	bne.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b34:	f107 0318 	add.w	r3, r7, #24
 8009b38:	4618      	mov	r0, r3
 8009b3a:	f000 fcab 	bl	800a494 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009b3e:	69bb      	ldr	r3, [r7, #24]
 8009b40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b42:	f000 bc88 	b.w	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b46:	2300      	movs	r3, #0
 8009b48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b4a:	f000 bc84 	b.w	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009b4e:	4b2b      	ldr	r3, [pc, #172]	@ (8009bfc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009b56:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b5a:	d108      	bne.n	8009b6e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b5c:	f107 030c 	add.w	r3, r7, #12
 8009b60:	4618      	mov	r0, r3
 8009b62:	f000 fdeb 	bl	800a73c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b6a:	f000 bc74 	b.w	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b72:	f000 bc70 	b.w	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009b76:	4b21      	ldr	r3, [pc, #132]	@ (8009bfc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009b78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b7a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009b7e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009b80:	4b1e      	ldr	r3, [pc, #120]	@ (8009bfc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f003 0304 	and.w	r3, r3, #4
 8009b88:	2b04      	cmp	r3, #4
 8009b8a:	d10c      	bne.n	8009ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8009b8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d109      	bne.n	8009ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009b92:	4b1a      	ldr	r3, [pc, #104]	@ (8009bfc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	08db      	lsrs	r3, r3, #3
 8009b98:	f003 0303 	and.w	r3, r3, #3
 8009b9c:	4a18      	ldr	r2, [pc, #96]	@ (8009c00 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8009ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009ba4:	e01f      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009ba6:	4b15      	ldr	r3, [pc, #84]	@ (8009bfc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009bae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009bb2:	d106      	bne.n	8009bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8009bb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bb6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009bba:	d102      	bne.n	8009bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009bbc:	4b11      	ldr	r3, [pc, #68]	@ (8009c04 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009bbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009bc0:	e011      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009bc2:	4b0e      	ldr	r3, [pc, #56]	@ (8009bfc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009bca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009bce:	d106      	bne.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8009bd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bd2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009bd6:	d102      	bne.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009bd8:	4b0b      	ldr	r3, [pc, #44]	@ (8009c08 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009bdc:	e003      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009bde:	2300      	movs	r3, #0
 8009be0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009be2:	f000 bc38 	b.w	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009be6:	f000 bc36 	b.w	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009bea:	4b08      	ldr	r3, [pc, #32]	@ (8009c0c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009bec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bee:	f000 bc32 	b.w	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bf6:	f000 bc2e 	b.w	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009bfa:	bf00      	nop
 8009bfc:	58024400 	.word	0x58024400
 8009c00:	03d09000 	.word	0x03d09000
 8009c04:	003d0900 	.word	0x003d0900
 8009c08:	017d7840 	.word	0x017d7840
 8009c0c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009c10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c14:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8009c18:	430b      	orrs	r3, r1
 8009c1a:	f040 809c 	bne.w	8009d56 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8009c1e:	4b9e      	ldr	r3, [pc, #632]	@ (8009e98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009c20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c22:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8009c26:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c2a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009c2e:	d054      	beq.n	8009cda <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8009c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c32:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009c36:	f200 808b 	bhi.w	8009d50 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c3c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009c40:	f000 8083 	beq.w	8009d4a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8009c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c46:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009c4a:	f200 8081 	bhi.w	8009d50 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c50:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009c54:	d02f      	beq.n	8009cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8009c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c58:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009c5c:	d878      	bhi.n	8009d50 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d004      	beq.n	8009c6e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8009c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c66:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009c6a:	d012      	beq.n	8009c92 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8009c6c:	e070      	b.n	8009d50 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009c6e:	4b8a      	ldr	r3, [pc, #552]	@ (8009e98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009c76:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009c7a:	d107      	bne.n	8009c8c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009c7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009c80:	4618      	mov	r0, r3
 8009c82:	f000 feaf 	bl	800a9e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009c86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c8a:	e3e4      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c90:	e3e1      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009c92:	4b81      	ldr	r3, [pc, #516]	@ (8009e98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009c9a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009c9e:	d107      	bne.n	8009cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ca0:	f107 0318 	add.w	r3, r7, #24
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	f000 fbf5 	bl	800a494 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009caa:	69bb      	ldr	r3, [r7, #24]
 8009cac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009cae:	e3d2      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cb4:	e3cf      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009cb6:	4b78      	ldr	r3, [pc, #480]	@ (8009e98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009cbe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009cc2:	d107      	bne.n	8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009cc4:	f107 030c 	add.w	r3, r7, #12
 8009cc8:	4618      	mov	r0, r3
 8009cca:	f000 fd37 	bl	800a73c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009cd2:	e3c0      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cd8:	e3bd      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009cda:	4b6f      	ldr	r3, [pc, #444]	@ (8009e98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009cdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009cde:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009ce2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009ce4:	4b6c      	ldr	r3, [pc, #432]	@ (8009e98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f003 0304 	and.w	r3, r3, #4
 8009cec:	2b04      	cmp	r3, #4
 8009cee:	d10c      	bne.n	8009d0a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8009cf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d109      	bne.n	8009d0a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009cf6:	4b68      	ldr	r3, [pc, #416]	@ (8009e98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	08db      	lsrs	r3, r3, #3
 8009cfc:	f003 0303 	and.w	r3, r3, #3
 8009d00:	4a66      	ldr	r2, [pc, #408]	@ (8009e9c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009d02:	fa22 f303 	lsr.w	r3, r2, r3
 8009d06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009d08:	e01e      	b.n	8009d48 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009d0a:	4b63      	ldr	r3, [pc, #396]	@ (8009e98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009d16:	d106      	bne.n	8009d26 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8009d18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009d1e:	d102      	bne.n	8009d26 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009d20:	4b5f      	ldr	r3, [pc, #380]	@ (8009ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8009d22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009d24:	e010      	b.n	8009d48 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009d26:	4b5c      	ldr	r3, [pc, #368]	@ (8009e98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d2e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009d32:	d106      	bne.n	8009d42 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8009d34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009d3a:	d102      	bne.n	8009d42 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009d3c:	4b59      	ldr	r3, [pc, #356]	@ (8009ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8009d3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009d40:	e002      	b.n	8009d48 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009d42:	2300      	movs	r3, #0
 8009d44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009d46:	e386      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009d48:	e385      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009d4a:	4b57      	ldr	r3, [pc, #348]	@ (8009ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009d4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d4e:	e382      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009d50:	2300      	movs	r3, #0
 8009d52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d54:	e37f      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009d56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d5a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8009d5e:	430b      	orrs	r3, r1
 8009d60:	f040 80a7 	bne.w	8009eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8009d64:	4b4c      	ldr	r3, [pc, #304]	@ (8009e98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009d66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d68:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8009d6c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d70:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009d74:	d055      	beq.n	8009e22 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8009d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d78:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009d7c:	f200 8096 	bhi.w	8009eac <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d82:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009d86:	f000 8084 	beq.w	8009e92 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8009d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d8c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009d90:	f200 808c 	bhi.w	8009eac <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d96:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009d9a:	d030      	beq.n	8009dfe <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8009d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d9e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009da2:	f200 8083 	bhi.w	8009eac <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d004      	beq.n	8009db6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8009dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009db2:	d012      	beq.n	8009dda <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8009db4:	e07a      	b.n	8009eac <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009db6:	4b38      	ldr	r3, [pc, #224]	@ (8009e98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009dbe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009dc2:	d107      	bne.n	8009dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009dc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009dc8:	4618      	mov	r0, r3
 8009dca:	f000 fe0b 	bl	800a9e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009dd2:	e340      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009dd8:	e33d      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009dda:	4b2f      	ldr	r3, [pc, #188]	@ (8009e98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009de2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009de6:	d107      	bne.n	8009df8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009de8:	f107 0318 	add.w	r3, r7, #24
 8009dec:	4618      	mov	r0, r3
 8009dee:	f000 fb51 	bl	800a494 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009df2:	69bb      	ldr	r3, [r7, #24]
 8009df4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009df6:	e32e      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009df8:	2300      	movs	r3, #0
 8009dfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009dfc:	e32b      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009dfe:	4b26      	ldr	r3, [pc, #152]	@ (8009e98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009e06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009e0a:	d107      	bne.n	8009e1c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e0c:	f107 030c 	add.w	r3, r7, #12
 8009e10:	4618      	mov	r0, r3
 8009e12:	f000 fc93 	bl	800a73c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e1a:	e31c      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e20:	e319      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009e22:	4b1d      	ldr	r3, [pc, #116]	@ (8009e98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e26:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009e2a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009e2c:	4b1a      	ldr	r3, [pc, #104]	@ (8009e98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f003 0304 	and.w	r3, r3, #4
 8009e34:	2b04      	cmp	r3, #4
 8009e36:	d10c      	bne.n	8009e52 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8009e38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d109      	bne.n	8009e52 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009e3e:	4b16      	ldr	r3, [pc, #88]	@ (8009e98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	08db      	lsrs	r3, r3, #3
 8009e44:	f003 0303 	and.w	r3, r3, #3
 8009e48:	4a14      	ldr	r2, [pc, #80]	@ (8009e9c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009e4a:	fa22 f303 	lsr.w	r3, r2, r3
 8009e4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009e50:	e01e      	b.n	8009e90 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009e52:	4b11      	ldr	r3, [pc, #68]	@ (8009e98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e5e:	d106      	bne.n	8009e6e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8009e60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e62:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009e66:	d102      	bne.n	8009e6e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009e68:	4b0d      	ldr	r3, [pc, #52]	@ (8009ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8009e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009e6c:	e010      	b.n	8009e90 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009e6e:	4b0a      	ldr	r3, [pc, #40]	@ (8009e98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009e76:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009e7a:	d106      	bne.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8009e7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e7e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009e82:	d102      	bne.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009e84:	4b07      	ldr	r3, [pc, #28]	@ (8009ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8009e86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009e88:	e002      	b.n	8009e90 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009e8e:	e2e2      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009e90:	e2e1      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009e92:	4b05      	ldr	r3, [pc, #20]	@ (8009ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009e94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e96:	e2de      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009e98:	58024400 	.word	0x58024400
 8009e9c:	03d09000 	.word	0x03d09000
 8009ea0:	003d0900 	.word	0x003d0900
 8009ea4:	017d7840 	.word	0x017d7840
 8009ea8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8009eac:	2300      	movs	r3, #0
 8009eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009eb0:	e2d1      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009eb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009eb6:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8009eba:	430b      	orrs	r3, r1
 8009ebc:	f040 809c 	bne.w	8009ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8009ec0:	4b93      	ldr	r3, [pc, #588]	@ (800a110 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009ec2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ec4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8009ec8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009eca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ecc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009ed0:	d054      	beq.n	8009f7c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8009ed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ed4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009ed8:	f200 808b 	bhi.w	8009ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009edc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ede:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009ee2:	f000 8083 	beq.w	8009fec <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8009ee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ee8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009eec:	f200 8081 	bhi.w	8009ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009ef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ef2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009ef6:	d02f      	beq.n	8009f58 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8009ef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009efa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009efe:	d878      	bhi.n	8009ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009f00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d004      	beq.n	8009f10 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8009f06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009f0c:	d012      	beq.n	8009f34 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8009f0e:	e070      	b.n	8009ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009f10:	4b7f      	ldr	r3, [pc, #508]	@ (800a110 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009f18:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009f1c:	d107      	bne.n	8009f2e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009f1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009f22:	4618      	mov	r0, r3
 8009f24:	f000 fd5e 	bl	800a9e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f2c:	e293      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f2e:	2300      	movs	r3, #0
 8009f30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f32:	e290      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009f34:	4b76      	ldr	r3, [pc, #472]	@ (800a110 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009f3c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009f40:	d107      	bne.n	8009f52 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f42:	f107 0318 	add.w	r3, r7, #24
 8009f46:	4618      	mov	r0, r3
 8009f48:	f000 faa4 	bl	800a494 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009f4c:	69bb      	ldr	r3, [r7, #24]
 8009f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f50:	e281      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f52:	2300      	movs	r3, #0
 8009f54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f56:	e27e      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009f58:	4b6d      	ldr	r3, [pc, #436]	@ (800a110 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009f60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009f64:	d107      	bne.n	8009f76 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f66:	f107 030c 	add.w	r3, r7, #12
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	f000 fbe6 	bl	800a73c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f74:	e26f      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f76:	2300      	movs	r3, #0
 8009f78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f7a:	e26c      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009f7c:	4b64      	ldr	r3, [pc, #400]	@ (800a110 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009f7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009f80:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009f84:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009f86:	4b62      	ldr	r3, [pc, #392]	@ (800a110 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	f003 0304 	and.w	r3, r3, #4
 8009f8e:	2b04      	cmp	r3, #4
 8009f90:	d10c      	bne.n	8009fac <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8009f92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d109      	bne.n	8009fac <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009f98:	4b5d      	ldr	r3, [pc, #372]	@ (800a110 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	08db      	lsrs	r3, r3, #3
 8009f9e:	f003 0303 	and.w	r3, r3, #3
 8009fa2:	4a5c      	ldr	r2, [pc, #368]	@ (800a114 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8009fa4:	fa22 f303 	lsr.w	r3, r2, r3
 8009fa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009faa:	e01e      	b.n	8009fea <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009fac:	4b58      	ldr	r3, [pc, #352]	@ (800a110 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009fb4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009fb8:	d106      	bne.n	8009fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8009fba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fbc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009fc0:	d102      	bne.n	8009fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009fc2:	4b55      	ldr	r3, [pc, #340]	@ (800a118 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009fc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009fc6:	e010      	b.n	8009fea <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009fc8:	4b51      	ldr	r3, [pc, #324]	@ (800a110 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009fd0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009fd4:	d106      	bne.n	8009fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8009fd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fd8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009fdc:	d102      	bne.n	8009fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009fde:	4b4f      	ldr	r3, [pc, #316]	@ (800a11c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009fe0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009fe2:	e002      	b.n	8009fea <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009fe8:	e235      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009fea:	e234      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009fec:	4b4c      	ldr	r3, [pc, #304]	@ (800a120 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8009fee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ff0:	e231      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ff6:	e22e      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8009ff8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ffc:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800a000:	430b      	orrs	r3, r1
 800a002:	f040 808f 	bne.w	800a124 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800a006:	4b42      	ldr	r3, [pc, #264]	@ (800a110 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a008:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a00a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800a00e:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800a010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a012:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a016:	d06b      	beq.n	800a0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800a018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a01a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a01e:	d874      	bhi.n	800a10a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a022:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a026:	d056      	beq.n	800a0d6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800a028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a02a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a02e:	d86c      	bhi.n	800a10a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a032:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a036:	d03b      	beq.n	800a0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800a038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a03a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a03e:	d864      	bhi.n	800a10a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a042:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a046:	d021      	beq.n	800a08c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800a048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a04a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a04e:	d85c      	bhi.n	800a10a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a052:	2b00      	cmp	r3, #0
 800a054:	d004      	beq.n	800a060 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800a056:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a058:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a05c:	d004      	beq.n	800a068 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800a05e:	e054      	b.n	800a10a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800a060:	f7fe fa4c 	bl	80084fc <HAL_RCC_GetPCLK1Freq>
 800a064:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a066:	e1f6      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a068:	4b29      	ldr	r3, [pc, #164]	@ (800a110 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a070:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a074:	d107      	bne.n	800a086 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a076:	f107 0318 	add.w	r3, r7, #24
 800a07a:	4618      	mov	r0, r3
 800a07c:	f000 fa0a 	bl	800a494 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a080:	69fb      	ldr	r3, [r7, #28]
 800a082:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a084:	e1e7      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a086:	2300      	movs	r3, #0
 800a088:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a08a:	e1e4      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a08c:	4b20      	ldr	r3, [pc, #128]	@ (800a110 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a094:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a098:	d107      	bne.n	800a0aa <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a09a:	f107 030c 	add.w	r3, r7, #12
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f000 fb4c 	bl	800a73c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a0a4:	693b      	ldr	r3, [r7, #16]
 800a0a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0a8:	e1d5      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0ae:	e1d2      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a0b0:	4b17      	ldr	r3, [pc, #92]	@ (800a110 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	f003 0304 	and.w	r3, r3, #4
 800a0b8:	2b04      	cmp	r3, #4
 800a0ba:	d109      	bne.n	800a0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a0bc:	4b14      	ldr	r3, [pc, #80]	@ (800a110 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	08db      	lsrs	r3, r3, #3
 800a0c2:	f003 0303 	and.w	r3, r3, #3
 800a0c6:	4a13      	ldr	r2, [pc, #76]	@ (800a114 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a0c8:	fa22 f303 	lsr.w	r3, r2, r3
 800a0cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0ce:	e1c2      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0d4:	e1bf      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a0d6:	4b0e      	ldr	r3, [pc, #56]	@ (800a110 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a0de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a0e2:	d102      	bne.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800a0e4:	4b0c      	ldr	r3, [pc, #48]	@ (800a118 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a0e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0e8:	e1b5      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0ee:	e1b2      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a0f0:	4b07      	ldr	r3, [pc, #28]	@ (800a110 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a0f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a0fc:	d102      	bne.n	800a104 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800a0fe:	4b07      	ldr	r3, [pc, #28]	@ (800a11c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a100:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a102:	e1a8      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a104:	2300      	movs	r3, #0
 800a106:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a108:	e1a5      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a10a:	2300      	movs	r3, #0
 800a10c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a10e:	e1a2      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a110:	58024400 	.word	0x58024400
 800a114:	03d09000 	.word	0x03d09000
 800a118:	003d0900 	.word	0x003d0900
 800a11c:	017d7840 	.word	0x017d7840
 800a120:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a124:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a128:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800a12c:	430b      	orrs	r3, r1
 800a12e:	d173      	bne.n	800a218 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a130:	4b9c      	ldr	r3, [pc, #624]	@ (800a3a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a132:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a134:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a138:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a13a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a13c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a140:	d02f      	beq.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800a142:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a144:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a148:	d863      	bhi.n	800a212 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800a14a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d004      	beq.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800a150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a152:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a156:	d012      	beq.n	800a17e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800a158:	e05b      	b.n	800a212 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a15a:	4b92      	ldr	r3, [pc, #584]	@ (800a3a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a162:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a166:	d107      	bne.n	800a178 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a168:	f107 0318 	add.w	r3, r7, #24
 800a16c:	4618      	mov	r0, r3
 800a16e:	f000 f991 	bl	800a494 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a172:	69bb      	ldr	r3, [r7, #24]
 800a174:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a176:	e16e      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a178:	2300      	movs	r3, #0
 800a17a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a17c:	e16b      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a17e:	4b89      	ldr	r3, [pc, #548]	@ (800a3a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a186:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a18a:	d107      	bne.n	800a19c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a18c:	f107 030c 	add.w	r3, r7, #12
 800a190:	4618      	mov	r0, r3
 800a192:	f000 fad3 	bl	800a73c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a196:	697b      	ldr	r3, [r7, #20]
 800a198:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a19a:	e15c      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a19c:	2300      	movs	r3, #0
 800a19e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1a0:	e159      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a1a2:	4b80      	ldr	r3, [pc, #512]	@ (800a3a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a1a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a1a6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a1aa:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a1ac:	4b7d      	ldr	r3, [pc, #500]	@ (800a3a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	f003 0304 	and.w	r3, r3, #4
 800a1b4:	2b04      	cmp	r3, #4
 800a1b6:	d10c      	bne.n	800a1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800a1b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d109      	bne.n	800a1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a1be:	4b79      	ldr	r3, [pc, #484]	@ (800a3a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	08db      	lsrs	r3, r3, #3
 800a1c4:	f003 0303 	and.w	r3, r3, #3
 800a1c8:	4a77      	ldr	r2, [pc, #476]	@ (800a3a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a1ca:	fa22 f303 	lsr.w	r3, r2, r3
 800a1ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a1d0:	e01e      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a1d2:	4b74      	ldr	r3, [pc, #464]	@ (800a3a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a1da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a1de:	d106      	bne.n	800a1ee <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800a1e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a1e6:	d102      	bne.n	800a1ee <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a1e8:	4b70      	ldr	r3, [pc, #448]	@ (800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a1ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a1ec:	e010      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a1ee:	4b6d      	ldr	r3, [pc, #436]	@ (800a3a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a1f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a1fa:	d106      	bne.n	800a20a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800a1fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a202:	d102      	bne.n	800a20a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a204:	4b6a      	ldr	r3, [pc, #424]	@ (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a206:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a208:	e002      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a20a:	2300      	movs	r3, #0
 800a20c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a20e:	e122      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a210:	e121      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a212:	2300      	movs	r3, #0
 800a214:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a216:	e11e      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a218:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a21c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800a220:	430b      	orrs	r3, r1
 800a222:	d133      	bne.n	800a28c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a224:	4b5f      	ldr	r3, [pc, #380]	@ (800a3a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a226:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a228:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a22c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a22e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a230:	2b00      	cmp	r3, #0
 800a232:	d004      	beq.n	800a23e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800a234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a236:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a23a:	d012      	beq.n	800a262 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800a23c:	e023      	b.n	800a286 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a23e:	4b59      	ldr	r3, [pc, #356]	@ (800a3a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a246:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a24a:	d107      	bne.n	800a25c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a24c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a250:	4618      	mov	r0, r3
 800a252:	f000 fbc7 	bl	800a9e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a258:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a25a:	e0fc      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a25c:	2300      	movs	r3, #0
 800a25e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a260:	e0f9      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a262:	4b50      	ldr	r3, [pc, #320]	@ (800a3a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a26a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a26e:	d107      	bne.n	800a280 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a270:	f107 0318 	add.w	r3, r7, #24
 800a274:	4618      	mov	r0, r3
 800a276:	f000 f90d 	bl	800a494 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a27a:	6a3b      	ldr	r3, [r7, #32]
 800a27c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a27e:	e0ea      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a280:	2300      	movs	r3, #0
 800a282:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a284:	e0e7      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a286:	2300      	movs	r3, #0
 800a288:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a28a:	e0e4      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a28c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a290:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800a294:	430b      	orrs	r3, r1
 800a296:	f040 808d 	bne.w	800a3b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800a29a:	4b42      	ldr	r3, [pc, #264]	@ (800a3a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a29c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a29e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800a2a2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a2a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a2aa:	d06b      	beq.n	800a384 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800a2ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a2b2:	d874      	bhi.n	800a39e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a2b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a2ba:	d056      	beq.n	800a36a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800a2bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a2c2:	d86c      	bhi.n	800a39e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a2c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2c6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a2ca:	d03b      	beq.n	800a344 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800a2cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2ce:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a2d2:	d864      	bhi.n	800a39e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a2d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a2da:	d021      	beq.n	800a320 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800a2dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a2e2:	d85c      	bhi.n	800a39e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a2e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d004      	beq.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800a2ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a2f0:	d004      	beq.n	800a2fc <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800a2f2:	e054      	b.n	800a39e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a2f4:	f000 f8b8 	bl	800a468 <HAL_RCCEx_GetD3PCLK1Freq>
 800a2f8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a2fa:	e0ac      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a2fc:	4b29      	ldr	r3, [pc, #164]	@ (800a3a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a304:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a308:	d107      	bne.n	800a31a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a30a:	f107 0318 	add.w	r3, r7, #24
 800a30e:	4618      	mov	r0, r3
 800a310:	f000 f8c0 	bl	800a494 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a314:	69fb      	ldr	r3, [r7, #28]
 800a316:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a318:	e09d      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a31a:	2300      	movs	r3, #0
 800a31c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a31e:	e09a      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a320:	4b20      	ldr	r3, [pc, #128]	@ (800a3a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a328:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a32c:	d107      	bne.n	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a32e:	f107 030c 	add.w	r3, r7, #12
 800a332:	4618      	mov	r0, r3
 800a334:	f000 fa02 	bl	800a73c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a338:	693b      	ldr	r3, [r7, #16]
 800a33a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a33c:	e08b      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a33e:	2300      	movs	r3, #0
 800a340:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a342:	e088      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a344:	4b17      	ldr	r3, [pc, #92]	@ (800a3a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f003 0304 	and.w	r3, r3, #4
 800a34c:	2b04      	cmp	r3, #4
 800a34e:	d109      	bne.n	800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a350:	4b14      	ldr	r3, [pc, #80]	@ (800a3a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	08db      	lsrs	r3, r3, #3
 800a356:	f003 0303 	and.w	r3, r3, #3
 800a35a:	4a13      	ldr	r2, [pc, #76]	@ (800a3a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a35c:	fa22 f303 	lsr.w	r3, r2, r3
 800a360:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a362:	e078      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a364:	2300      	movs	r3, #0
 800a366:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a368:	e075      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a36a:	4b0e      	ldr	r3, [pc, #56]	@ (800a3a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a372:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a376:	d102      	bne.n	800a37e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800a378:	4b0c      	ldr	r3, [pc, #48]	@ (800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a37a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a37c:	e06b      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a37e:	2300      	movs	r3, #0
 800a380:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a382:	e068      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a384:	4b07      	ldr	r3, [pc, #28]	@ (800a3a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a38c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a390:	d102      	bne.n	800a398 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800a392:	4b07      	ldr	r3, [pc, #28]	@ (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a394:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a396:	e05e      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a398:	2300      	movs	r3, #0
 800a39a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a39c:	e05b      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800a39e:	2300      	movs	r3, #0
 800a3a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3a2:	e058      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a3a4:	58024400 	.word	0x58024400
 800a3a8:	03d09000 	.word	0x03d09000
 800a3ac:	003d0900 	.word	0x003d0900
 800a3b0:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a3b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3b8:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800a3bc:	430b      	orrs	r3, r1
 800a3be:	d148      	bne.n	800a452 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800a3c0:	4b27      	ldr	r3, [pc, #156]	@ (800a460 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a3c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a3c4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a3c8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a3ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a3d0:	d02a      	beq.n	800a428 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800a3d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a3d8:	d838      	bhi.n	800a44c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800a3da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d004      	beq.n	800a3ea <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800a3e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a3e6:	d00d      	beq.n	800a404 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800a3e8:	e030      	b.n	800a44c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a3ea:	4b1d      	ldr	r3, [pc, #116]	@ (800a460 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a3f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a3f6:	d102      	bne.n	800a3fe <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800a3f8:	4b1a      	ldr	r3, [pc, #104]	@ (800a464 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800a3fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a3fc:	e02b      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a3fe:	2300      	movs	r3, #0
 800a400:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a402:	e028      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a404:	4b16      	ldr	r3, [pc, #88]	@ (800a460 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a40c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a410:	d107      	bne.n	800a422 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a412:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a416:	4618      	mov	r0, r3
 800a418:	f000 fae4 	bl	800a9e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a41c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a41e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a420:	e019      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a422:	2300      	movs	r3, #0
 800a424:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a426:	e016      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a428:	4b0d      	ldr	r3, [pc, #52]	@ (800a460 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a430:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a434:	d107      	bne.n	800a446 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a436:	f107 0318 	add.w	r3, r7, #24
 800a43a:	4618      	mov	r0, r3
 800a43c:	f000 f82a 	bl	800a494 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a440:	69fb      	ldr	r3, [r7, #28]
 800a442:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a444:	e007      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a446:	2300      	movs	r3, #0
 800a448:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a44a:	e004      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a44c:	2300      	movs	r3, #0
 800a44e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a450:	e001      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800a452:	2300      	movs	r3, #0
 800a454:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800a456:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a458:	4618      	mov	r0, r3
 800a45a:	3740      	adds	r7, #64	@ 0x40
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bd80      	pop	{r7, pc}
 800a460:	58024400 	.word	0x58024400
 800a464:	017d7840 	.word	0x017d7840

0800a468 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a46c:	f7fe f816 	bl	800849c <HAL_RCC_GetHCLKFreq>
 800a470:	4602      	mov	r2, r0
 800a472:	4b06      	ldr	r3, [pc, #24]	@ (800a48c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a474:	6a1b      	ldr	r3, [r3, #32]
 800a476:	091b      	lsrs	r3, r3, #4
 800a478:	f003 0307 	and.w	r3, r3, #7
 800a47c:	4904      	ldr	r1, [pc, #16]	@ (800a490 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a47e:	5ccb      	ldrb	r3, [r1, r3]
 800a480:	f003 031f 	and.w	r3, r3, #31
 800a484:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a488:	4618      	mov	r0, r3
 800a48a:	bd80      	pop	{r7, pc}
 800a48c:	58024400 	.word	0x58024400
 800a490:	0800ce94 	.word	0x0800ce94

0800a494 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a494:	b480      	push	{r7}
 800a496:	b089      	sub	sp, #36	@ 0x24
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a49c:	4ba1      	ldr	r3, [pc, #644]	@ (800a724 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a49e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4a0:	f003 0303 	and.w	r3, r3, #3
 800a4a4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a4a6:	4b9f      	ldr	r3, [pc, #636]	@ (800a724 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a4a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4aa:	0b1b      	lsrs	r3, r3, #12
 800a4ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a4b0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a4b2:	4b9c      	ldr	r3, [pc, #624]	@ (800a724 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a4b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4b6:	091b      	lsrs	r3, r3, #4
 800a4b8:	f003 0301 	and.w	r3, r3, #1
 800a4bc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a4be:	4b99      	ldr	r3, [pc, #612]	@ (800a724 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a4c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a4c2:	08db      	lsrs	r3, r3, #3
 800a4c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a4c8:	693a      	ldr	r2, [r7, #16]
 800a4ca:	fb02 f303 	mul.w	r3, r2, r3
 800a4ce:	ee07 3a90 	vmov	s15, r3
 800a4d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a4da:	697b      	ldr	r3, [r7, #20]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	f000 8111 	beq.w	800a704 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a4e2:	69bb      	ldr	r3, [r7, #24]
 800a4e4:	2b02      	cmp	r3, #2
 800a4e6:	f000 8083 	beq.w	800a5f0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a4ea:	69bb      	ldr	r3, [r7, #24]
 800a4ec:	2b02      	cmp	r3, #2
 800a4ee:	f200 80a1 	bhi.w	800a634 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a4f2:	69bb      	ldr	r3, [r7, #24]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d003      	beq.n	800a500 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a4f8:	69bb      	ldr	r3, [r7, #24]
 800a4fa:	2b01      	cmp	r3, #1
 800a4fc:	d056      	beq.n	800a5ac <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a4fe:	e099      	b.n	800a634 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a500:	4b88      	ldr	r3, [pc, #544]	@ (800a724 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	f003 0320 	and.w	r3, r3, #32
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d02d      	beq.n	800a568 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a50c:	4b85      	ldr	r3, [pc, #532]	@ (800a724 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	08db      	lsrs	r3, r3, #3
 800a512:	f003 0303 	and.w	r3, r3, #3
 800a516:	4a84      	ldr	r2, [pc, #528]	@ (800a728 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a518:	fa22 f303 	lsr.w	r3, r2, r3
 800a51c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a51e:	68bb      	ldr	r3, [r7, #8]
 800a520:	ee07 3a90 	vmov	s15, r3
 800a524:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a528:	697b      	ldr	r3, [r7, #20]
 800a52a:	ee07 3a90 	vmov	s15, r3
 800a52e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a532:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a536:	4b7b      	ldr	r3, [pc, #492]	@ (800a724 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a538:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a53a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a53e:	ee07 3a90 	vmov	s15, r3
 800a542:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a546:	ed97 6a03 	vldr	s12, [r7, #12]
 800a54a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a72c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a54e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a552:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a556:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a55a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a55e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a562:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a566:	e087      	b.n	800a678 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a568:	697b      	ldr	r3, [r7, #20]
 800a56a:	ee07 3a90 	vmov	s15, r3
 800a56e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a572:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a730 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a576:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a57a:	4b6a      	ldr	r3, [pc, #424]	@ (800a724 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a57c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a57e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a582:	ee07 3a90 	vmov	s15, r3
 800a586:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a58a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a58e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a72c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a592:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a596:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a59a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a59e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a5aa:	e065      	b.n	800a678 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a5ac:	697b      	ldr	r3, [r7, #20]
 800a5ae:	ee07 3a90 	vmov	s15, r3
 800a5b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5b6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a734 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a5ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5be:	4b59      	ldr	r3, [pc, #356]	@ (800a724 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a5c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5c6:	ee07 3a90 	vmov	s15, r3
 800a5ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5ce:	ed97 6a03 	vldr	s12, [r7, #12]
 800a5d2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a72c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a5d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a5e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a5ee:	e043      	b.n	800a678 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a5f0:	697b      	ldr	r3, [r7, #20]
 800a5f2:	ee07 3a90 	vmov	s15, r3
 800a5f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5fa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a738 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a5fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a602:	4b48      	ldr	r3, [pc, #288]	@ (800a724 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a604:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a60a:	ee07 3a90 	vmov	s15, r3
 800a60e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a612:	ed97 6a03 	vldr	s12, [r7, #12]
 800a616:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a72c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a61a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a61e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a622:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a626:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a62a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a62e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a632:	e021      	b.n	800a678 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a634:	697b      	ldr	r3, [r7, #20]
 800a636:	ee07 3a90 	vmov	s15, r3
 800a63a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a63e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a734 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a642:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a646:	4b37      	ldr	r3, [pc, #220]	@ (800a724 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a648:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a64a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a64e:	ee07 3a90 	vmov	s15, r3
 800a652:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a656:	ed97 6a03 	vldr	s12, [r7, #12]
 800a65a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a72c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a65e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a662:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a666:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a66a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a66e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a672:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a676:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800a678:	4b2a      	ldr	r3, [pc, #168]	@ (800a724 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a67a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a67c:	0a5b      	lsrs	r3, r3, #9
 800a67e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a682:	ee07 3a90 	vmov	s15, r3
 800a686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a68a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a68e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a692:	edd7 6a07 	vldr	s13, [r7, #28]
 800a696:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a69a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a69e:	ee17 2a90 	vmov	r2, s15
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800a6a6:	4b1f      	ldr	r3, [pc, #124]	@ (800a724 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a6a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6aa:	0c1b      	lsrs	r3, r3, #16
 800a6ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a6b0:	ee07 3a90 	vmov	s15, r3
 800a6b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6b8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a6bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a6c0:	edd7 6a07 	vldr	s13, [r7, #28]
 800a6c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a6c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6cc:	ee17 2a90 	vmov	r2, s15
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800a6d4:	4b13      	ldr	r3, [pc, #76]	@ (800a724 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a6d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6d8:	0e1b      	lsrs	r3, r3, #24
 800a6da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a6de:	ee07 3a90 	vmov	s15, r3
 800a6e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a6ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a6ee:	edd7 6a07 	vldr	s13, [r7, #28]
 800a6f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a6f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6fa:	ee17 2a90 	vmov	r2, s15
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a702:	e008      	b.n	800a716 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2200      	movs	r2, #0
 800a708:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2200      	movs	r2, #0
 800a70e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2200      	movs	r2, #0
 800a714:	609a      	str	r2, [r3, #8]
}
 800a716:	bf00      	nop
 800a718:	3724      	adds	r7, #36	@ 0x24
 800a71a:	46bd      	mov	sp, r7
 800a71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a720:	4770      	bx	lr
 800a722:	bf00      	nop
 800a724:	58024400 	.word	0x58024400
 800a728:	03d09000 	.word	0x03d09000
 800a72c:	46000000 	.word	0x46000000
 800a730:	4c742400 	.word	0x4c742400
 800a734:	4a742400 	.word	0x4a742400
 800a738:	4bbebc20 	.word	0x4bbebc20

0800a73c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800a73c:	b480      	push	{r7}
 800a73e:	b089      	sub	sp, #36	@ 0x24
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a744:	4ba1      	ldr	r3, [pc, #644]	@ (800a9cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a748:	f003 0303 	and.w	r3, r3, #3
 800a74c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800a74e:	4b9f      	ldr	r3, [pc, #636]	@ (800a9cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a752:	0d1b      	lsrs	r3, r3, #20
 800a754:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a758:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a75a:	4b9c      	ldr	r3, [pc, #624]	@ (800a9cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a75c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a75e:	0a1b      	lsrs	r3, r3, #8
 800a760:	f003 0301 	and.w	r3, r3, #1
 800a764:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800a766:	4b99      	ldr	r3, [pc, #612]	@ (800a9cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a76a:	08db      	lsrs	r3, r3, #3
 800a76c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a770:	693a      	ldr	r2, [r7, #16]
 800a772:	fb02 f303 	mul.w	r3, r2, r3
 800a776:	ee07 3a90 	vmov	s15, r3
 800a77a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a77e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a782:	697b      	ldr	r3, [r7, #20]
 800a784:	2b00      	cmp	r3, #0
 800a786:	f000 8111 	beq.w	800a9ac <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a78a:	69bb      	ldr	r3, [r7, #24]
 800a78c:	2b02      	cmp	r3, #2
 800a78e:	f000 8083 	beq.w	800a898 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a792:	69bb      	ldr	r3, [r7, #24]
 800a794:	2b02      	cmp	r3, #2
 800a796:	f200 80a1 	bhi.w	800a8dc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a79a:	69bb      	ldr	r3, [r7, #24]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d003      	beq.n	800a7a8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a7a0:	69bb      	ldr	r3, [r7, #24]
 800a7a2:	2b01      	cmp	r3, #1
 800a7a4:	d056      	beq.n	800a854 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a7a6:	e099      	b.n	800a8dc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a7a8:	4b88      	ldr	r3, [pc, #544]	@ (800a9cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f003 0320 	and.w	r3, r3, #32
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d02d      	beq.n	800a810 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a7b4:	4b85      	ldr	r3, [pc, #532]	@ (800a9cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	08db      	lsrs	r3, r3, #3
 800a7ba:	f003 0303 	and.w	r3, r3, #3
 800a7be:	4a84      	ldr	r2, [pc, #528]	@ (800a9d0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a7c0:	fa22 f303 	lsr.w	r3, r2, r3
 800a7c4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	ee07 3a90 	vmov	s15, r3
 800a7cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7d0:	697b      	ldr	r3, [r7, #20]
 800a7d2:	ee07 3a90 	vmov	s15, r3
 800a7d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7de:	4b7b      	ldr	r3, [pc, #492]	@ (800a9cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a7e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7e6:	ee07 3a90 	vmov	s15, r3
 800a7ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7ee:	ed97 6a03 	vldr	s12, [r7, #12]
 800a7f2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a9d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a7f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a802:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a806:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a80a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a80e:	e087      	b.n	800a920 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a810:	697b      	ldr	r3, [r7, #20]
 800a812:	ee07 3a90 	vmov	s15, r3
 800a816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a81a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a9d8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a81e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a822:	4b6a      	ldr	r3, [pc, #424]	@ (800a9cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a826:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a82a:	ee07 3a90 	vmov	s15, r3
 800a82e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a832:	ed97 6a03 	vldr	s12, [r7, #12]
 800a836:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a9d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a83a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a83e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a842:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a846:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a84a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a84e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a852:	e065      	b.n	800a920 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a854:	697b      	ldr	r3, [r7, #20]
 800a856:	ee07 3a90 	vmov	s15, r3
 800a85a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a85e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a9dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a862:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a866:	4b59      	ldr	r3, [pc, #356]	@ (800a9cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a86a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a86e:	ee07 3a90 	vmov	s15, r3
 800a872:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a876:	ed97 6a03 	vldr	s12, [r7, #12]
 800a87a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a9d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a87e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a882:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a886:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a88a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a88e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a892:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a896:	e043      	b.n	800a920 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a898:	697b      	ldr	r3, [r7, #20]
 800a89a:	ee07 3a90 	vmov	s15, r3
 800a89e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8a2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a9e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a8a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a8aa:	4b48      	ldr	r3, [pc, #288]	@ (800a9cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a8ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8b2:	ee07 3a90 	vmov	s15, r3
 800a8b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800a8be:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a9d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a8c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a8ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a8da:	e021      	b.n	800a920 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a8dc:	697b      	ldr	r3, [r7, #20]
 800a8de:	ee07 3a90 	vmov	s15, r3
 800a8e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8e6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a9dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a8ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a8ee:	4b37      	ldr	r3, [pc, #220]	@ (800a9cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a8f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8f6:	ee07 3a90 	vmov	s15, r3
 800a8fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800a902:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a9d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a906:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a90a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a90e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a912:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a91a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a91e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800a920:	4b2a      	ldr	r3, [pc, #168]	@ (800a9cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a924:	0a5b      	lsrs	r3, r3, #9
 800a926:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a92a:	ee07 3a90 	vmov	s15, r3
 800a92e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a932:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a936:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a93a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a93e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a942:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a946:	ee17 2a90 	vmov	r2, s15
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800a94e:	4b1f      	ldr	r3, [pc, #124]	@ (800a9cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a952:	0c1b      	lsrs	r3, r3, #16
 800a954:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a958:	ee07 3a90 	vmov	s15, r3
 800a95c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a960:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a964:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a968:	edd7 6a07 	vldr	s13, [r7, #28]
 800a96c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a970:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a974:	ee17 2a90 	vmov	r2, s15
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800a97c:	4b13      	ldr	r3, [pc, #76]	@ (800a9cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a97e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a980:	0e1b      	lsrs	r3, r3, #24
 800a982:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a986:	ee07 3a90 	vmov	s15, r3
 800a98a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a98e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a992:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a996:	edd7 6a07 	vldr	s13, [r7, #28]
 800a99a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a99e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a9a2:	ee17 2a90 	vmov	r2, s15
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a9aa:	e008      	b.n	800a9be <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	609a      	str	r2, [r3, #8]
}
 800a9be:	bf00      	nop
 800a9c0:	3724      	adds	r7, #36	@ 0x24
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c8:	4770      	bx	lr
 800a9ca:	bf00      	nop
 800a9cc:	58024400 	.word	0x58024400
 800a9d0:	03d09000 	.word	0x03d09000
 800a9d4:	46000000 	.word	0x46000000
 800a9d8:	4c742400 	.word	0x4c742400
 800a9dc:	4a742400 	.word	0x4a742400
 800a9e0:	4bbebc20 	.word	0x4bbebc20

0800a9e4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800a9e4:	b480      	push	{r7}
 800a9e6:	b089      	sub	sp, #36	@ 0x24
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a9ec:	4ba0      	ldr	r3, [pc, #640]	@ (800ac70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a9ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9f0:	f003 0303 	and.w	r3, r3, #3
 800a9f4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800a9f6:	4b9e      	ldr	r3, [pc, #632]	@ (800ac70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a9f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9fa:	091b      	lsrs	r3, r3, #4
 800a9fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800aa00:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800aa02:	4b9b      	ldr	r3, [pc, #620]	@ (800ac70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aa04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa06:	f003 0301 	and.w	r3, r3, #1
 800aa0a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800aa0c:	4b98      	ldr	r3, [pc, #608]	@ (800ac70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aa0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa10:	08db      	lsrs	r3, r3, #3
 800aa12:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aa16:	693a      	ldr	r2, [r7, #16]
 800aa18:	fb02 f303 	mul.w	r3, r2, r3
 800aa1c:	ee07 3a90 	vmov	s15, r3
 800aa20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa24:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800aa28:	697b      	ldr	r3, [r7, #20]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	f000 8111 	beq.w	800ac52 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800aa30:	69bb      	ldr	r3, [r7, #24]
 800aa32:	2b02      	cmp	r3, #2
 800aa34:	f000 8083 	beq.w	800ab3e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800aa38:	69bb      	ldr	r3, [r7, #24]
 800aa3a:	2b02      	cmp	r3, #2
 800aa3c:	f200 80a1 	bhi.w	800ab82 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800aa40:	69bb      	ldr	r3, [r7, #24]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d003      	beq.n	800aa4e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800aa46:	69bb      	ldr	r3, [r7, #24]
 800aa48:	2b01      	cmp	r3, #1
 800aa4a:	d056      	beq.n	800aafa <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800aa4c:	e099      	b.n	800ab82 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa4e:	4b88      	ldr	r3, [pc, #544]	@ (800ac70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f003 0320 	and.w	r3, r3, #32
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d02d      	beq.n	800aab6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aa5a:	4b85      	ldr	r3, [pc, #532]	@ (800ac70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	08db      	lsrs	r3, r3, #3
 800aa60:	f003 0303 	and.w	r3, r3, #3
 800aa64:	4a83      	ldr	r2, [pc, #524]	@ (800ac74 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800aa66:	fa22 f303 	lsr.w	r3, r2, r3
 800aa6a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	ee07 3a90 	vmov	s15, r3
 800aa72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	ee07 3a90 	vmov	s15, r3
 800aa7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa84:	4b7a      	ldr	r3, [pc, #488]	@ (800ac70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aa86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa8c:	ee07 3a90 	vmov	s15, r3
 800aa90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa94:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa98:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800ac78 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800aa9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aaa0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aaa4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aaa8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aaac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aab0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800aab4:	e087      	b.n	800abc6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aab6:	697b      	ldr	r3, [r7, #20]
 800aab8:	ee07 3a90 	vmov	s15, r3
 800aabc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aac0:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800ac7c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800aac4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aac8:	4b69      	ldr	r3, [pc, #420]	@ (800ac70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aaca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aacc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aad0:	ee07 3a90 	vmov	s15, r3
 800aad4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aad8:	ed97 6a03 	vldr	s12, [r7, #12]
 800aadc:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800ac78 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800aae0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aae4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aae8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aaec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aaf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aaf4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aaf8:	e065      	b.n	800abc6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aafa:	697b      	ldr	r3, [r7, #20]
 800aafc:	ee07 3a90 	vmov	s15, r3
 800ab00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab04:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800ac80 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800ab08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab0c:	4b58      	ldr	r3, [pc, #352]	@ (800ac70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ab0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab14:	ee07 3a90 	vmov	s15, r3
 800ab18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab1c:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab20:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800ac78 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ab24:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab28:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab2c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ab30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab34:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab38:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab3c:	e043      	b.n	800abc6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ab3e:	697b      	ldr	r3, [r7, #20]
 800ab40:	ee07 3a90 	vmov	s15, r3
 800ab44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab48:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800ac84 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800ab4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab50:	4b47      	ldr	r3, [pc, #284]	@ (800ac70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ab52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab58:	ee07 3a90 	vmov	s15, r3
 800ab5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab60:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab64:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800ac78 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ab68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab70:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ab74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab78:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab7c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab80:	e021      	b.n	800abc6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ab82:	697b      	ldr	r3, [r7, #20]
 800ab84:	ee07 3a90 	vmov	s15, r3
 800ab88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab8c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800ac7c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ab90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab94:	4b36      	ldr	r3, [pc, #216]	@ (800ac70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ab96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab9c:	ee07 3a90 	vmov	s15, r3
 800aba0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aba4:	ed97 6a03 	vldr	s12, [r7, #12]
 800aba8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800ac78 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800abac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abb0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abb4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800abb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abc0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800abc4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800abc6:	4b2a      	ldr	r3, [pc, #168]	@ (800ac70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800abc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abca:	0a5b      	lsrs	r3, r3, #9
 800abcc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800abd0:	ee07 3a90 	vmov	s15, r3
 800abd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abd8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800abdc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800abe0:	edd7 6a07 	vldr	s13, [r7, #28]
 800abe4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800abe8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abec:	ee17 2a90 	vmov	r2, s15
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800abf4:	4b1e      	ldr	r3, [pc, #120]	@ (800ac70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800abf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abf8:	0c1b      	lsrs	r3, r3, #16
 800abfa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800abfe:	ee07 3a90 	vmov	s15, r3
 800ac02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ac0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac0e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac1a:	ee17 2a90 	vmov	r2, s15
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800ac22:	4b13      	ldr	r3, [pc, #76]	@ (800ac70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ac24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac26:	0e1b      	lsrs	r3, r3, #24
 800ac28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ac2c:	ee07 3a90 	vmov	s15, r3
 800ac30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac34:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ac38:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac3c:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac48:	ee17 2a90 	vmov	r2, s15
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800ac50:	e008      	b.n	800ac64 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	2200      	movs	r2, #0
 800ac56:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2200      	movs	r2, #0
 800ac62:	609a      	str	r2, [r3, #8]
}
 800ac64:	bf00      	nop
 800ac66:	3724      	adds	r7, #36	@ 0x24
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6e:	4770      	bx	lr
 800ac70:	58024400 	.word	0x58024400
 800ac74:	03d09000 	.word	0x03d09000
 800ac78:	46000000 	.word	0x46000000
 800ac7c:	4c742400 	.word	0x4c742400
 800ac80:	4a742400 	.word	0x4a742400
 800ac84:	4bbebc20 	.word	0x4bbebc20

0800ac88 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b084      	sub	sp, #16
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
 800ac90:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ac92:	2300      	movs	r3, #0
 800ac94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ac96:	4b53      	ldr	r3, [pc, #332]	@ (800ade4 <RCCEx_PLL2_Config+0x15c>)
 800ac98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac9a:	f003 0303 	and.w	r3, r3, #3
 800ac9e:	2b03      	cmp	r3, #3
 800aca0:	d101      	bne.n	800aca6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800aca2:	2301      	movs	r3, #1
 800aca4:	e099      	b.n	800adda <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800aca6:	4b4f      	ldr	r3, [pc, #316]	@ (800ade4 <RCCEx_PLL2_Config+0x15c>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	4a4e      	ldr	r2, [pc, #312]	@ (800ade4 <RCCEx_PLL2_Config+0x15c>)
 800acac:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800acb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800acb2:	f7f8 fb11 	bl	80032d8 <HAL_GetTick>
 800acb6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800acb8:	e008      	b.n	800accc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800acba:	f7f8 fb0d 	bl	80032d8 <HAL_GetTick>
 800acbe:	4602      	mov	r2, r0
 800acc0:	68bb      	ldr	r3, [r7, #8]
 800acc2:	1ad3      	subs	r3, r2, r3
 800acc4:	2b02      	cmp	r3, #2
 800acc6:	d901      	bls.n	800accc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800acc8:	2303      	movs	r3, #3
 800acca:	e086      	b.n	800adda <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800accc:	4b45      	ldr	r3, [pc, #276]	@ (800ade4 <RCCEx_PLL2_Config+0x15c>)
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d1f0      	bne.n	800acba <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800acd8:	4b42      	ldr	r3, [pc, #264]	@ (800ade4 <RCCEx_PLL2_Config+0x15c>)
 800acda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acdc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	031b      	lsls	r3, r3, #12
 800ace6:	493f      	ldr	r1, [pc, #252]	@ (800ade4 <RCCEx_PLL2_Config+0x15c>)
 800ace8:	4313      	orrs	r3, r2
 800acea:	628b      	str	r3, [r1, #40]	@ 0x28
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	685b      	ldr	r3, [r3, #4]
 800acf0:	3b01      	subs	r3, #1
 800acf2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	689b      	ldr	r3, [r3, #8]
 800acfa:	3b01      	subs	r3, #1
 800acfc:	025b      	lsls	r3, r3, #9
 800acfe:	b29b      	uxth	r3, r3
 800ad00:	431a      	orrs	r2, r3
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	68db      	ldr	r3, [r3, #12]
 800ad06:	3b01      	subs	r3, #1
 800ad08:	041b      	lsls	r3, r3, #16
 800ad0a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800ad0e:	431a      	orrs	r2, r3
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	691b      	ldr	r3, [r3, #16]
 800ad14:	3b01      	subs	r3, #1
 800ad16:	061b      	lsls	r3, r3, #24
 800ad18:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800ad1c:	4931      	ldr	r1, [pc, #196]	@ (800ade4 <RCCEx_PLL2_Config+0x15c>)
 800ad1e:	4313      	orrs	r3, r2
 800ad20:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ad22:	4b30      	ldr	r3, [pc, #192]	@ (800ade4 <RCCEx_PLL2_Config+0x15c>)
 800ad24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad26:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	695b      	ldr	r3, [r3, #20]
 800ad2e:	492d      	ldr	r1, [pc, #180]	@ (800ade4 <RCCEx_PLL2_Config+0x15c>)
 800ad30:	4313      	orrs	r3, r2
 800ad32:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ad34:	4b2b      	ldr	r3, [pc, #172]	@ (800ade4 <RCCEx_PLL2_Config+0x15c>)
 800ad36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad38:	f023 0220 	bic.w	r2, r3, #32
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	699b      	ldr	r3, [r3, #24]
 800ad40:	4928      	ldr	r1, [pc, #160]	@ (800ade4 <RCCEx_PLL2_Config+0x15c>)
 800ad42:	4313      	orrs	r3, r2
 800ad44:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ad46:	4b27      	ldr	r3, [pc, #156]	@ (800ade4 <RCCEx_PLL2_Config+0x15c>)
 800ad48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad4a:	4a26      	ldr	r2, [pc, #152]	@ (800ade4 <RCCEx_PLL2_Config+0x15c>)
 800ad4c:	f023 0310 	bic.w	r3, r3, #16
 800ad50:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ad52:	4b24      	ldr	r3, [pc, #144]	@ (800ade4 <RCCEx_PLL2_Config+0x15c>)
 800ad54:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ad56:	4b24      	ldr	r3, [pc, #144]	@ (800ade8 <RCCEx_PLL2_Config+0x160>)
 800ad58:	4013      	ands	r3, r2
 800ad5a:	687a      	ldr	r2, [r7, #4]
 800ad5c:	69d2      	ldr	r2, [r2, #28]
 800ad5e:	00d2      	lsls	r2, r2, #3
 800ad60:	4920      	ldr	r1, [pc, #128]	@ (800ade4 <RCCEx_PLL2_Config+0x15c>)
 800ad62:	4313      	orrs	r3, r2
 800ad64:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ad66:	4b1f      	ldr	r3, [pc, #124]	@ (800ade4 <RCCEx_PLL2_Config+0x15c>)
 800ad68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad6a:	4a1e      	ldr	r2, [pc, #120]	@ (800ade4 <RCCEx_PLL2_Config+0x15c>)
 800ad6c:	f043 0310 	orr.w	r3, r3, #16
 800ad70:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d106      	bne.n	800ad86 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ad78:	4b1a      	ldr	r3, [pc, #104]	@ (800ade4 <RCCEx_PLL2_Config+0x15c>)
 800ad7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad7c:	4a19      	ldr	r2, [pc, #100]	@ (800ade4 <RCCEx_PLL2_Config+0x15c>)
 800ad7e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ad82:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ad84:	e00f      	b.n	800ada6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	2b01      	cmp	r3, #1
 800ad8a:	d106      	bne.n	800ad9a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ad8c:	4b15      	ldr	r3, [pc, #84]	@ (800ade4 <RCCEx_PLL2_Config+0x15c>)
 800ad8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad90:	4a14      	ldr	r2, [pc, #80]	@ (800ade4 <RCCEx_PLL2_Config+0x15c>)
 800ad92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ad96:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ad98:	e005      	b.n	800ada6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ad9a:	4b12      	ldr	r3, [pc, #72]	@ (800ade4 <RCCEx_PLL2_Config+0x15c>)
 800ad9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad9e:	4a11      	ldr	r2, [pc, #68]	@ (800ade4 <RCCEx_PLL2_Config+0x15c>)
 800ada0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ada4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ada6:	4b0f      	ldr	r3, [pc, #60]	@ (800ade4 <RCCEx_PLL2_Config+0x15c>)
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	4a0e      	ldr	r2, [pc, #56]	@ (800ade4 <RCCEx_PLL2_Config+0x15c>)
 800adac:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800adb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800adb2:	f7f8 fa91 	bl	80032d8 <HAL_GetTick>
 800adb6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800adb8:	e008      	b.n	800adcc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800adba:	f7f8 fa8d 	bl	80032d8 <HAL_GetTick>
 800adbe:	4602      	mov	r2, r0
 800adc0:	68bb      	ldr	r3, [r7, #8]
 800adc2:	1ad3      	subs	r3, r2, r3
 800adc4:	2b02      	cmp	r3, #2
 800adc6:	d901      	bls.n	800adcc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800adc8:	2303      	movs	r3, #3
 800adca:	e006      	b.n	800adda <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800adcc:	4b05      	ldr	r3, [pc, #20]	@ (800ade4 <RCCEx_PLL2_Config+0x15c>)
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800add4:	2b00      	cmp	r3, #0
 800add6:	d0f0      	beq.n	800adba <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800add8:	7bfb      	ldrb	r3, [r7, #15]
}
 800adda:	4618      	mov	r0, r3
 800addc:	3710      	adds	r7, #16
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}
 800ade2:	bf00      	nop
 800ade4:	58024400 	.word	0x58024400
 800ade8:	ffff0007 	.word	0xffff0007

0800adec <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b084      	sub	sp, #16
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
 800adf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800adf6:	2300      	movs	r3, #0
 800adf8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800adfa:	4b53      	ldr	r3, [pc, #332]	@ (800af48 <RCCEx_PLL3_Config+0x15c>)
 800adfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adfe:	f003 0303 	and.w	r3, r3, #3
 800ae02:	2b03      	cmp	r3, #3
 800ae04:	d101      	bne.n	800ae0a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800ae06:	2301      	movs	r3, #1
 800ae08:	e099      	b.n	800af3e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ae0a:	4b4f      	ldr	r3, [pc, #316]	@ (800af48 <RCCEx_PLL3_Config+0x15c>)
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	4a4e      	ldr	r2, [pc, #312]	@ (800af48 <RCCEx_PLL3_Config+0x15c>)
 800ae10:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ae14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ae16:	f7f8 fa5f 	bl	80032d8 <HAL_GetTick>
 800ae1a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ae1c:	e008      	b.n	800ae30 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ae1e:	f7f8 fa5b 	bl	80032d8 <HAL_GetTick>
 800ae22:	4602      	mov	r2, r0
 800ae24:	68bb      	ldr	r3, [r7, #8]
 800ae26:	1ad3      	subs	r3, r2, r3
 800ae28:	2b02      	cmp	r3, #2
 800ae2a:	d901      	bls.n	800ae30 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ae2c:	2303      	movs	r3, #3
 800ae2e:	e086      	b.n	800af3e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ae30:	4b45      	ldr	r3, [pc, #276]	@ (800af48 <RCCEx_PLL3_Config+0x15c>)
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d1f0      	bne.n	800ae1e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800ae3c:	4b42      	ldr	r3, [pc, #264]	@ (800af48 <RCCEx_PLL3_Config+0x15c>)
 800ae3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae40:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	051b      	lsls	r3, r3, #20
 800ae4a:	493f      	ldr	r1, [pc, #252]	@ (800af48 <RCCEx_PLL3_Config+0x15c>)
 800ae4c:	4313      	orrs	r3, r2
 800ae4e:	628b      	str	r3, [r1, #40]	@ 0x28
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	685b      	ldr	r3, [r3, #4]
 800ae54:	3b01      	subs	r3, #1
 800ae56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	689b      	ldr	r3, [r3, #8]
 800ae5e:	3b01      	subs	r3, #1
 800ae60:	025b      	lsls	r3, r3, #9
 800ae62:	b29b      	uxth	r3, r3
 800ae64:	431a      	orrs	r2, r3
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	68db      	ldr	r3, [r3, #12]
 800ae6a:	3b01      	subs	r3, #1
 800ae6c:	041b      	lsls	r3, r3, #16
 800ae6e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800ae72:	431a      	orrs	r2, r3
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	691b      	ldr	r3, [r3, #16]
 800ae78:	3b01      	subs	r3, #1
 800ae7a:	061b      	lsls	r3, r3, #24
 800ae7c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800ae80:	4931      	ldr	r1, [pc, #196]	@ (800af48 <RCCEx_PLL3_Config+0x15c>)
 800ae82:	4313      	orrs	r3, r2
 800ae84:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800ae86:	4b30      	ldr	r3, [pc, #192]	@ (800af48 <RCCEx_PLL3_Config+0x15c>)
 800ae88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae8a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	695b      	ldr	r3, [r3, #20]
 800ae92:	492d      	ldr	r1, [pc, #180]	@ (800af48 <RCCEx_PLL3_Config+0x15c>)
 800ae94:	4313      	orrs	r3, r2
 800ae96:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800ae98:	4b2b      	ldr	r3, [pc, #172]	@ (800af48 <RCCEx_PLL3_Config+0x15c>)
 800ae9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae9c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	699b      	ldr	r3, [r3, #24]
 800aea4:	4928      	ldr	r1, [pc, #160]	@ (800af48 <RCCEx_PLL3_Config+0x15c>)
 800aea6:	4313      	orrs	r3, r2
 800aea8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800aeaa:	4b27      	ldr	r3, [pc, #156]	@ (800af48 <RCCEx_PLL3_Config+0x15c>)
 800aeac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aeae:	4a26      	ldr	r2, [pc, #152]	@ (800af48 <RCCEx_PLL3_Config+0x15c>)
 800aeb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aeb4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800aeb6:	4b24      	ldr	r3, [pc, #144]	@ (800af48 <RCCEx_PLL3_Config+0x15c>)
 800aeb8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800aeba:	4b24      	ldr	r3, [pc, #144]	@ (800af4c <RCCEx_PLL3_Config+0x160>)
 800aebc:	4013      	ands	r3, r2
 800aebe:	687a      	ldr	r2, [r7, #4]
 800aec0:	69d2      	ldr	r2, [r2, #28]
 800aec2:	00d2      	lsls	r2, r2, #3
 800aec4:	4920      	ldr	r1, [pc, #128]	@ (800af48 <RCCEx_PLL3_Config+0x15c>)
 800aec6:	4313      	orrs	r3, r2
 800aec8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800aeca:	4b1f      	ldr	r3, [pc, #124]	@ (800af48 <RCCEx_PLL3_Config+0x15c>)
 800aecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aece:	4a1e      	ldr	r2, [pc, #120]	@ (800af48 <RCCEx_PLL3_Config+0x15c>)
 800aed0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aed4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d106      	bne.n	800aeea <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800aedc:	4b1a      	ldr	r3, [pc, #104]	@ (800af48 <RCCEx_PLL3_Config+0x15c>)
 800aede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aee0:	4a19      	ldr	r2, [pc, #100]	@ (800af48 <RCCEx_PLL3_Config+0x15c>)
 800aee2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800aee6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800aee8:	e00f      	b.n	800af0a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	2b01      	cmp	r3, #1
 800aeee:	d106      	bne.n	800aefe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800aef0:	4b15      	ldr	r3, [pc, #84]	@ (800af48 <RCCEx_PLL3_Config+0x15c>)
 800aef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aef4:	4a14      	ldr	r2, [pc, #80]	@ (800af48 <RCCEx_PLL3_Config+0x15c>)
 800aef6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800aefa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800aefc:	e005      	b.n	800af0a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800aefe:	4b12      	ldr	r3, [pc, #72]	@ (800af48 <RCCEx_PLL3_Config+0x15c>)
 800af00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af02:	4a11      	ldr	r2, [pc, #68]	@ (800af48 <RCCEx_PLL3_Config+0x15c>)
 800af04:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800af08:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800af0a:	4b0f      	ldr	r3, [pc, #60]	@ (800af48 <RCCEx_PLL3_Config+0x15c>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	4a0e      	ldr	r2, [pc, #56]	@ (800af48 <RCCEx_PLL3_Config+0x15c>)
 800af10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800af14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800af16:	f7f8 f9df 	bl	80032d8 <HAL_GetTick>
 800af1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800af1c:	e008      	b.n	800af30 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800af1e:	f7f8 f9db 	bl	80032d8 <HAL_GetTick>
 800af22:	4602      	mov	r2, r0
 800af24:	68bb      	ldr	r3, [r7, #8]
 800af26:	1ad3      	subs	r3, r2, r3
 800af28:	2b02      	cmp	r3, #2
 800af2a:	d901      	bls.n	800af30 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800af2c:	2303      	movs	r3, #3
 800af2e:	e006      	b.n	800af3e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800af30:	4b05      	ldr	r3, [pc, #20]	@ (800af48 <RCCEx_PLL3_Config+0x15c>)
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d0f0      	beq.n	800af1e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800af3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800af3e:	4618      	mov	r0, r3
 800af40:	3710      	adds	r7, #16
 800af42:	46bd      	mov	sp, r7
 800af44:	bd80      	pop	{r7, pc}
 800af46:	bf00      	nop
 800af48:	58024400 	.word	0x58024400
 800af4c:	ffff0007 	.word	0xffff0007

0800af50 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b086      	sub	sp, #24
 800af54:	af00      	add	r7, sp, #0
 800af56:	60f8      	str	r0, [r7, #12]
 800af58:	60b9      	str	r1, [r7, #8]
 800af5a:	607a      	str	r2, [r7, #4]
 800af5c:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800af5e:	68bb      	ldr	r3, [r7, #8]
 800af60:	2b02      	cmp	r3, #2
 800af62:	d904      	bls.n	800af6e <HAL_SAI_InitProtocol+0x1e>
 800af64:	68bb      	ldr	r3, [r7, #8]
 800af66:	3b03      	subs	r3, #3
 800af68:	2b01      	cmp	r3, #1
 800af6a:	d812      	bhi.n	800af92 <HAL_SAI_InitProtocol+0x42>
 800af6c:	e008      	b.n	800af80 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	687a      	ldr	r2, [r7, #4]
 800af72:	68b9      	ldr	r1, [r7, #8]
 800af74:	68f8      	ldr	r0, [r7, #12]
 800af76:	f000 fc1b 	bl	800b7b0 <SAI_InitI2S>
 800af7a:	4603      	mov	r3, r0
 800af7c:	75fb      	strb	r3, [r7, #23]
      break;
 800af7e:	e00b      	b.n	800af98 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	687a      	ldr	r2, [r7, #4]
 800af84:	68b9      	ldr	r1, [r7, #8]
 800af86:	68f8      	ldr	r0, [r7, #12]
 800af88:	f000 fcc4 	bl	800b914 <SAI_InitPCM>
 800af8c:	4603      	mov	r3, r0
 800af8e:	75fb      	strb	r3, [r7, #23]
      break;
 800af90:	e002      	b.n	800af98 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800af92:	2301      	movs	r3, #1
 800af94:	75fb      	strb	r3, [r7, #23]
      break;
 800af96:	bf00      	nop
  }

  if (status == HAL_OK)
 800af98:	7dfb      	ldrb	r3, [r7, #23]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d104      	bne.n	800afa8 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800af9e:	68f8      	ldr	r0, [r7, #12]
 800afa0:	f000 f808 	bl	800afb4 <HAL_SAI_Init>
 800afa4:	4603      	mov	r3, r0
 800afa6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800afa8:	7dfb      	ldrb	r3, [r7, #23]
}
 800afaa:	4618      	mov	r0, r3
 800afac:	3718      	adds	r7, #24
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}
	...

0800afb4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b08a      	sub	sp, #40	@ 0x28
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d101      	bne.n	800afc6 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800afc2:	2301      	movs	r3, #1
 800afc4:	e28e      	b.n	800b4e4 <HAL_SAI_Init+0x530>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800afc6:	f7f8 f9b7 	bl	8003338 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800afd0:	2b01      	cmp	r3, #1
 800afd2:	d113      	bne.n	800affc <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	4a96      	ldr	r2, [pc, #600]	@ (800b234 <HAL_SAI_Init+0x280>)
 800afda:	4293      	cmp	r3, r2
 800afdc:	d004      	beq.n	800afe8 <HAL_SAI_Init+0x34>
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	4a95      	ldr	r2, [pc, #596]	@ (800b238 <HAL_SAI_Init+0x284>)
 800afe4:	4293      	cmp	r3, r2
 800afe6:	d107      	bne.n	800aff8 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800afec:	2b01      	cmp	r3, #1
 800afee:	d103      	bne.n	800aff8 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d001      	beq.n	800affc <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 800aff8:	2301      	movs	r3, #1
 800affa:	e273      	b.n	800b4e4 <HAL_SAI_Init+0x530>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	4a8c      	ldr	r2, [pc, #560]	@ (800b234 <HAL_SAI_Init+0x280>)
 800b002:	4293      	cmp	r3, r2
 800b004:	d004      	beq.n	800b010 <HAL_SAI_Init+0x5c>
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	4a8c      	ldr	r2, [pc, #560]	@ (800b23c <HAL_SAI_Init+0x288>)
 800b00c:	4293      	cmp	r3, r2
 800b00e:	d102      	bne.n	800b016 <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 800b010:	4b8b      	ldr	r3, [pc, #556]	@ (800b240 <HAL_SAI_Init+0x28c>)
 800b012:	61bb      	str	r3, [r7, #24]
 800b014:	e028      	b.n	800b068 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	4a8a      	ldr	r2, [pc, #552]	@ (800b244 <HAL_SAI_Init+0x290>)
 800b01c:	4293      	cmp	r3, r2
 800b01e:	d004      	beq.n	800b02a <HAL_SAI_Init+0x76>
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	4a88      	ldr	r2, [pc, #544]	@ (800b248 <HAL_SAI_Init+0x294>)
 800b026:	4293      	cmp	r3, r2
 800b028:	d102      	bne.n	800b030 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 800b02a:	4b88      	ldr	r3, [pc, #544]	@ (800b24c <HAL_SAI_Init+0x298>)
 800b02c:	61bb      	str	r3, [r7, #24]
 800b02e:	e01b      	b.n	800b068 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	4a86      	ldr	r2, [pc, #536]	@ (800b250 <HAL_SAI_Init+0x29c>)
 800b036:	4293      	cmp	r3, r2
 800b038:	d004      	beq.n	800b044 <HAL_SAI_Init+0x90>
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	4a85      	ldr	r2, [pc, #532]	@ (800b254 <HAL_SAI_Init+0x2a0>)
 800b040:	4293      	cmp	r3, r2
 800b042:	d102      	bne.n	800b04a <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 800b044:	4b84      	ldr	r3, [pc, #528]	@ (800b258 <HAL_SAI_Init+0x2a4>)
 800b046:	61bb      	str	r3, [r7, #24]
 800b048:	e00e      	b.n	800b068 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	4a7a      	ldr	r2, [pc, #488]	@ (800b238 <HAL_SAI_Init+0x284>)
 800b050:	4293      	cmp	r3, r2
 800b052:	d004      	beq.n	800b05e <HAL_SAI_Init+0xaa>
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	4a80      	ldr	r2, [pc, #512]	@ (800b25c <HAL_SAI_Init+0x2a8>)
 800b05a:	4293      	cmp	r3, r2
 800b05c:	d102      	bne.n	800b064 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 800b05e:	4b80      	ldr	r3, [pc, #512]	@ (800b260 <HAL_SAI_Init+0x2ac>)
 800b060:	61bb      	str	r3, [r7, #24]
 800b062:	e001      	b.n	800b068 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800b064:	2301      	movs	r3, #1
 800b066:	e23d      	b.n	800b4e4 <HAL_SAI_Init+0x530>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800b06e:	b2db      	uxtb	r3, r3
 800b070:	2b00      	cmp	r3, #0
 800b072:	d106      	bne.n	800b082 <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2200      	movs	r2, #0
 800b078:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800b07c:	6878      	ldr	r0, [r7, #4]
 800b07e:	f7f7 fe75 	bl	8002d6c <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 800b082:	6878      	ldr	r0, [r7, #4]
 800b084:	f000 fd00 	bl	800ba88 <SAI_Disable>
 800b088:	4603      	mov	r3, r0
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d001      	beq.n	800b092 <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 800b08e:	2301      	movs	r3, #1
 800b090:	e228      	b.n	800b4e4 <HAL_SAI_Init+0x530>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	2202      	movs	r2, #2
 800b096:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	68db      	ldr	r3, [r3, #12]
 800b09e:	2b02      	cmp	r3, #2
 800b0a0:	d00c      	beq.n	800b0bc <HAL_SAI_Init+0x108>
 800b0a2:	2b02      	cmp	r3, #2
 800b0a4:	d80d      	bhi.n	800b0c2 <HAL_SAI_Init+0x10e>
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d002      	beq.n	800b0b0 <HAL_SAI_Init+0xfc>
 800b0aa:	2b01      	cmp	r3, #1
 800b0ac:	d003      	beq.n	800b0b6 <HAL_SAI_Init+0x102>
 800b0ae:	e008      	b.n	800b0c2 <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800b0b4:	e008      	b.n	800b0c8 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800b0b6:	2310      	movs	r3, #16
 800b0b8:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800b0ba:	e005      	b.n	800b0c8 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800b0bc:	2320      	movs	r3, #32
 800b0be:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800b0c0:	e002      	b.n	800b0c8 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800b0c6:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	689b      	ldr	r3, [r3, #8]
 800b0cc:	2b05      	cmp	r3, #5
 800b0ce:	d832      	bhi.n	800b136 <HAL_SAI_Init+0x182>
 800b0d0:	a201      	add	r2, pc, #4	@ (adr r2, 800b0d8 <HAL_SAI_Init+0x124>)
 800b0d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0d6:	bf00      	nop
 800b0d8:	0800b0f1 	.word	0x0800b0f1
 800b0dc:	0800b0f7 	.word	0x0800b0f7
 800b0e0:	0800b0ff 	.word	0x0800b0ff
 800b0e4:	0800b107 	.word	0x0800b107
 800b0e8:	0800b117 	.word	0x0800b117
 800b0ec:	0800b127 	.word	0x0800b127
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	61fb      	str	r3, [r7, #28]
      break;
 800b0f4:	e022      	b.n	800b13c <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800b0f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b0fa:	61fb      	str	r3, [r7, #28]
      break;
 800b0fc:	e01e      	b.n	800b13c <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800b0fe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b102:	61fb      	str	r3, [r7, #28]
      break;
 800b104:	e01a      	b.n	800b13c <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800b106:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b10a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800b10c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b10e:	f043 0301 	orr.w	r3, r3, #1
 800b112:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800b114:	e012      	b.n	800b13c <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800b116:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b11a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 800b11c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b11e:	f043 0302 	orr.w	r3, r3, #2
 800b122:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800b124:	e00a      	b.n	800b13c <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800b126:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b12a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 800b12c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b12e:	f043 0303 	orr.w	r3, r3, #3
 800b132:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800b134:	e002      	b.n	800b13c <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800b136:	2300      	movs	r3, #0
 800b138:	61fb      	str	r3, [r7, #28]
      break;
 800b13a:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 800b13c:	69bb      	ldr	r3, [r7, #24]
 800b13e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b140:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	6a1b      	ldr	r3, [r3, #32]
 800b146:	2b00      	cmp	r3, #0
 800b148:	f000 80c5 	beq.w	800b2d6 <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 800b14c:	2300      	movs	r3, #0
 800b14e:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	4a37      	ldr	r2, [pc, #220]	@ (800b234 <HAL_SAI_Init+0x280>)
 800b156:	4293      	cmp	r3, r2
 800b158:	d004      	beq.n	800b164 <HAL_SAI_Init+0x1b0>
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	4a37      	ldr	r2, [pc, #220]	@ (800b23c <HAL_SAI_Init+0x288>)
 800b160:	4293      	cmp	r3, r2
 800b162:	d106      	bne.n	800b172 <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800b164:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800b168:	f04f 0100 	mov.w	r1, #0
 800b16c:	f7fe fbfc 	bl	8009968 <HAL_RCCEx_GetPeriphCLKFreq>
 800b170:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	4a33      	ldr	r2, [pc, #204]	@ (800b244 <HAL_SAI_Init+0x290>)
 800b178:	4293      	cmp	r3, r2
 800b17a:	d004      	beq.n	800b186 <HAL_SAI_Init+0x1d2>
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	4a31      	ldr	r2, [pc, #196]	@ (800b248 <HAL_SAI_Init+0x294>)
 800b182:	4293      	cmp	r3, r2
 800b184:	d106      	bne.n	800b194 <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800b186:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800b18a:	f04f 0100 	mov.w	r1, #0
 800b18e:	f7fe fbeb 	bl	8009968 <HAL_RCCEx_GetPeriphCLKFreq>
 800b192:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	4a2d      	ldr	r2, [pc, #180]	@ (800b250 <HAL_SAI_Init+0x29c>)
 800b19a:	4293      	cmp	r3, r2
 800b19c:	d004      	beq.n	800b1a8 <HAL_SAI_Init+0x1f4>
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	4a2c      	ldr	r2, [pc, #176]	@ (800b254 <HAL_SAI_Init+0x2a0>)
 800b1a4:	4293      	cmp	r3, r2
 800b1a6:	d106      	bne.n	800b1b6 <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 800b1a8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800b1ac:	f04f 0100 	mov.w	r1, #0
 800b1b0:	f7fe fbda 	bl	8009968 <HAL_RCCEx_GetPeriphCLKFreq>
 800b1b4:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	4a1f      	ldr	r2, [pc, #124]	@ (800b238 <HAL_SAI_Init+0x284>)
 800b1bc:	4293      	cmp	r3, r2
 800b1be:	d106      	bne.n	800b1ce <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800b1c0:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800b1c4:	f04f 0100 	mov.w	r1, #0
 800b1c8:	f7fe fbce 	bl	8009968 <HAL_RCCEx_GetPeriphCLKFreq>
 800b1cc:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	4a22      	ldr	r2, [pc, #136]	@ (800b25c <HAL_SAI_Init+0x2a8>)
 800b1d4:	4293      	cmp	r3, r2
 800b1d6:	d106      	bne.n	800b1e6 <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800b1d8:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800b1dc:	f04f 0100 	mov.w	r1, #0
 800b1e0:	f7fe fbc2 	bl	8009968 <HAL_RCCEx_GetPeriphCLKFreq>
 800b1e4:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	699b      	ldr	r3, [r3, #24]
 800b1ea:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800b1ee:	d139      	bne.n	800b264 <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b1f4:	2b04      	cmp	r3, #4
 800b1f6:	d102      	bne.n	800b1fe <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800b1f8:	2340      	movs	r3, #64	@ 0x40
 800b1fa:	60fb      	str	r3, [r7, #12]
 800b1fc:	e00a      	b.n	800b214 <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b202:	2b08      	cmp	r3, #8
 800b204:	d103      	bne.n	800b20e <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800b206:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b20a:	60fb      	str	r3, [r7, #12]
 800b20c:	e002      	b.n	800b214 <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b212:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800b214:	697a      	ldr	r2, [r7, #20]
 800b216:	4613      	mov	r3, r2
 800b218:	009b      	lsls	r3, r3, #2
 800b21a:	4413      	add	r3, r2
 800b21c:	005b      	lsls	r3, r3, #1
 800b21e:	4619      	mov	r1, r3
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	6a1b      	ldr	r3, [r3, #32]
 800b224:	68fa      	ldr	r2, [r7, #12]
 800b226:	fb02 f303 	mul.w	r3, r2, r3
 800b22a:	fbb1 f3f3 	udiv	r3, r1, r3
 800b22e:	613b      	str	r3, [r7, #16]
 800b230:	e030      	b.n	800b294 <HAL_SAI_Init+0x2e0>
 800b232:	bf00      	nop
 800b234:	40015804 	.word	0x40015804
 800b238:	58005404 	.word	0x58005404
 800b23c:	40015824 	.word	0x40015824
 800b240:	40015800 	.word	0x40015800
 800b244:	40015c04 	.word	0x40015c04
 800b248:	40015c24 	.word	0x40015c24
 800b24c:	40015c00 	.word	0x40015c00
 800b250:	40016004 	.word	0x40016004
 800b254:	40016024 	.word	0x40016024
 800b258:	40016000 	.word	0x40016000
 800b25c:	58005424 	.word	0x58005424
 800b260:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b268:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b26c:	d101      	bne.n	800b272 <HAL_SAI_Init+0x2be>
 800b26e:	2302      	movs	r3, #2
 800b270:	e000      	b.n	800b274 <HAL_SAI_Init+0x2c0>
 800b272:	2301      	movs	r3, #1
 800b274:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800b276:	697a      	ldr	r2, [r7, #20]
 800b278:	4613      	mov	r3, r2
 800b27a:	009b      	lsls	r3, r3, #2
 800b27c:	4413      	add	r3, r2
 800b27e:	005b      	lsls	r3, r3, #1
 800b280:	4619      	mov	r1, r3
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	6a1b      	ldr	r3, [r3, #32]
 800b286:	68ba      	ldr	r2, [r7, #8]
 800b288:	fb02 f303 	mul.w	r3, r2, r3
 800b28c:	021b      	lsls	r3, r3, #8
 800b28e:	fbb1 f3f3 	udiv	r3, r1, r3
 800b292:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800b294:	693b      	ldr	r3, [r7, #16]
 800b296:	4a95      	ldr	r2, [pc, #596]	@ (800b4ec <HAL_SAI_Init+0x538>)
 800b298:	fba2 2303 	umull	r2, r3, r2, r3
 800b29c:	08da      	lsrs	r2, r3, #3
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800b2a2:	6939      	ldr	r1, [r7, #16]
 800b2a4:	4b91      	ldr	r3, [pc, #580]	@ (800b4ec <HAL_SAI_Init+0x538>)
 800b2a6:	fba3 2301 	umull	r2, r3, r3, r1
 800b2aa:	08da      	lsrs	r2, r3, #3
 800b2ac:	4613      	mov	r3, r2
 800b2ae:	009b      	lsls	r3, r3, #2
 800b2b0:	4413      	add	r3, r2
 800b2b2:	005b      	lsls	r3, r3, #1
 800b2b4:	1aca      	subs	r2, r1, r3
 800b2b6:	2a08      	cmp	r2, #8
 800b2b8:	d904      	bls.n	800b2c4 <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2be:	1c5a      	adds	r2, r3, #1
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b2c8:	2b04      	cmp	r3, #4
 800b2ca:	d104      	bne.n	800b2d6 <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2d0:	085a      	lsrs	r2, r3, #1
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	685b      	ldr	r3, [r3, #4]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d003      	beq.n	800b2e6 <HAL_SAI_Init+0x332>
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	685b      	ldr	r3, [r3, #4]
 800b2e2:	2b02      	cmp	r3, #2
 800b2e4:	d109      	bne.n	800b2fa <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b2ea:	2b01      	cmp	r3, #1
 800b2ec:	d101      	bne.n	800b2f2 <HAL_SAI_Init+0x33e>
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	e001      	b.n	800b2f6 <HAL_SAI_Init+0x342>
 800b2f2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b2f6:	623b      	str	r3, [r7, #32]
 800b2f8:	e008      	b.n	800b30c <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b2fe:	2b01      	cmp	r3, #1
 800b300:	d102      	bne.n	800b308 <HAL_SAI_Init+0x354>
 800b302:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b306:	e000      	b.n	800b30a <HAL_SAI_Init+0x356>
 800b308:	2300      	movs	r3, #0
 800b30a:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800b30c:	f7f8 f814 	bl	8003338 <HAL_GetREVID>
 800b310:	4603      	mov	r3, r0
 800b312:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b316:	d331      	bcc.n	800b37c <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	6819      	ldr	r1, [r3, #0]
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681a      	ldr	r2, [r3, #0]
 800b322:	4b73      	ldr	r3, [pc, #460]	@ (800b4f0 <HAL_SAI_Init+0x53c>)
 800b324:	400b      	ands	r3, r1
 800b326:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	6819      	ldr	r1, [r3, #0]
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	685a      	ldr	r2, [r3, #4]
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b336:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b33c:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b342:	431a      	orrs	r2, r3
 800b344:	6a3b      	ldr	r3, [r7, #32]
 800b346:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800b348:	69fb      	ldr	r3, [r7, #28]
 800b34a:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            ckstr_bits | syncen_bits |                             \
 800b350:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	695b      	ldr	r3, [r3, #20]
 800b356:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b35c:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b362:	051b      	lsls	r3, r3, #20
 800b364:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800b36a:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	691b      	ldr	r3, [r3, #16]
 800b370:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	430a      	orrs	r2, r1
 800b378:	601a      	str	r2, [r3, #0]
 800b37a:	e02d      	b.n	800b3d8 <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	6819      	ldr	r1, [r3, #0]
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681a      	ldr	r2, [r3, #0]
 800b386:	4b5b      	ldr	r3, [pc, #364]	@ (800b4f4 <HAL_SAI_Init+0x540>)
 800b388:	400b      	ands	r3, r1
 800b38a:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	6819      	ldr	r1, [r3, #0]
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	685a      	ldr	r2, [r3, #4]
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b39a:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b3a0:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b3a6:	431a      	orrs	r2, r3
 800b3a8:	6a3b      	ldr	r3, [r7, #32]
 800b3aa:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800b3ac:	69fb      	ldr	r3, [r7, #28]
 800b3ae:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            ckstr_bits | syncen_bits |                             \
 800b3b4:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	695b      	ldr	r3, [r3, #20]
 800b3ba:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b3c0:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3c6:	051b      	lsls	r3, r3, #20
 800b3c8:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800b3ce:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	430a      	orrs	r2, r1
 800b3d6:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	6859      	ldr	r1, [r3, #4]
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681a      	ldr	r2, [r3, #0]
 800b3e2:	4b45      	ldr	r3, [pc, #276]	@ (800b4f8 <HAL_SAI_Init+0x544>)
 800b3e4:	400b      	ands	r3, r1
 800b3e6:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	6859      	ldr	r1, [r3, #4]
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	69da      	ldr	r2, [r3, #28]
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3f6:	431a      	orrs	r2, r3
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b3fc:	431a      	orrs	r2, r3
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	430a      	orrs	r2, r1
 800b404:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	6899      	ldr	r1, [r3, #8]
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681a      	ldr	r2, [r3, #0]
 800b410:	4b3a      	ldr	r3, [pc, #232]	@ (800b4fc <HAL_SAI_Init+0x548>)
 800b412:	400b      	ands	r3, r1
 800b414:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	6899      	ldr	r1, [r3, #8]
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b420:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800b426:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 800b42c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 800b432:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b438:	3b01      	subs	r3, #1
 800b43a:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800b43c:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	430a      	orrs	r2, r1
 800b444:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	68d9      	ldr	r1, [r3, #12]
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681a      	ldr	r2, [r3, #0]
 800b450:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800b454:	400b      	ands	r3, r1
 800b456:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	68d9      	ldr	r1, [r3, #12]
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b466:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b46c:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800b46e:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b474:	3b01      	subs	r3, #1
 800b476:	021b      	lsls	r3, r3, #8
 800b478:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	430a      	orrs	r2, r1
 800b480:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	4a1e      	ldr	r2, [pc, #120]	@ (800b500 <HAL_SAI_Init+0x54c>)
 800b488:	4293      	cmp	r3, r2
 800b48a:	d004      	beq.n	800b496 <HAL_SAI_Init+0x4e2>
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	4a1c      	ldr	r2, [pc, #112]	@ (800b504 <HAL_SAI_Init+0x550>)
 800b492:	4293      	cmp	r3, r2
 800b494:	d119      	bne.n	800b4ca <HAL_SAI_Init+0x516>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800b496:	69bb      	ldr	r3, [r7, #24]
 800b498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b49a:	f023 0201 	bic.w	r2, r3, #1
 800b49e:	69bb      	ldr	r3, [r7, #24]
 800b4a0:	645a      	str	r2, [r3, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b4a8:	2b01      	cmp	r3, #1
 800b4aa:	d10e      	bne.n	800b4ca <HAL_SAI_Init+0x516>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b4b4:	3b01      	subs	r3, #1
 800b4b6:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800b4b8:	431a      	orrs	r2, r3
 800b4ba:	69bb      	ldr	r3, [r7, #24]
 800b4bc:	645a      	str	r2, [r3, #68]	@ 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800b4be:	69bb      	ldr	r3, [r7, #24]
 800b4c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b4c2:	f043 0201 	orr.w	r2, r3, #1
 800b4c6:	69bb      	ldr	r3, [r7, #24]
 800b4c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	2201      	movs	r2, #1
 800b4d6:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	2200      	movs	r2, #0
 800b4de:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 800b4e2:	2300      	movs	r3, #0
}
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	3728      	adds	r7, #40	@ 0x28
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	bd80      	pop	{r7, pc}
 800b4ec:	cccccccd 	.word	0xcccccccd
 800b4f0:	f005c010 	.word	0xf005c010
 800b4f4:	f805c010 	.word	0xf805c010
 800b4f8:	ffff1ff0 	.word	0xffff1ff0
 800b4fc:	fff88000 	.word	0xfff88000
 800b500:	40015804 	.word	0x40015804
 800b504:	58005404 	.word	0x58005404

0800b508 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b086      	sub	sp, #24
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	60f8      	str	r0, [r7, #12]
 800b510:	60b9      	str	r1, [r7, #8]
 800b512:	4613      	mov	r3, r2
 800b514:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800b516:	f7f7 fedf 	bl	80032d8 <HAL_GetTick>
 800b51a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800b51c:	68bb      	ldr	r3, [r7, #8]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d002      	beq.n	800b528 <HAL_SAI_Transmit_DMA+0x20>
 800b522:	88fb      	ldrh	r3, [r7, #6]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d101      	bne.n	800b52c <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800b528:	2301      	movs	r3, #1
 800b52a:	e098      	b.n	800b65e <HAL_SAI_Transmit_DMA+0x156>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800b532:	b2db      	uxtb	r3, r3
 800b534:	2b01      	cmp	r3, #1
 800b536:	f040 8091 	bne.w	800b65c <HAL_SAI_Transmit_DMA+0x154>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800b540:	2b01      	cmp	r3, #1
 800b542:	d101      	bne.n	800b548 <HAL_SAI_Transmit_DMA+0x40>
 800b544:	2302      	movs	r3, #2
 800b546:	e08a      	b.n	800b65e <HAL_SAI_Transmit_DMA+0x156>
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	2201      	movs	r2, #1
 800b54c:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->pBuffPtr = pData;
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	68ba      	ldr	r2, [r7, #8]
 800b554:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->XferSize = Size;
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	88fa      	ldrh	r2, [r7, #6]
 800b55a:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	88fa      	ldrh	r2, [r7, #6]
 800b562:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	2200      	movs	r2, #0
 800b56a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	2212      	movs	r2, #18
 800b572:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b57c:	4a3a      	ldr	r2, [pc, #232]	@ (800b668 <HAL_SAI_Transmit_DMA+0x160>)
 800b57e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b586:	4a39      	ldr	r2, [pc, #228]	@ (800b66c <HAL_SAI_Transmit_DMA+0x164>)
 800b588:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b590:	4a37      	ldr	r2, [pc, #220]	@ (800b670 <HAL_SAI_Transmit_DMA+0x168>)
 800b592:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b59a:	2200      	movs	r2, #0
 800b59c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b5a8:	4619      	mov	r1, r3
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	331c      	adds	r3, #28
 800b5b0:	461a      	mov	r2, r3
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 800b5b8:	f7f8 fb36 	bl	8003c28 <HAL_DMA_Start_IT>
 800b5bc:	4603      	mov	r3, r0
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d005      	beq.n	800b5ce <HAL_SAI_Transmit_DMA+0xc6>
    {
      __HAL_UNLOCK(hsai);
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      return  HAL_ERROR;
 800b5ca:	2301      	movs	r3, #1
 800b5cc:	e047      	b.n	800b65e <HAL_SAI_Transmit_DMA+0x156>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800b5ce:	2100      	movs	r1, #0
 800b5d0:	68f8      	ldr	r0, [r7, #12]
 800b5d2:	f000 fa21 	bl	800ba18 <SAI_InterruptFlag>
 800b5d6:	4601      	mov	r1, r0
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	691a      	ldr	r2, [r3, #16]
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	430a      	orrs	r2, r1
 800b5e4:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	681a      	ldr	r2, [r3, #0]
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800b5f4:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800b5f6:	e015      	b.n	800b624 <HAL_SAI_Transmit_DMA+0x11c>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800b5f8:	f7f7 fe6e 	bl	80032d8 <HAL_GetTick>
 800b5fc:	4602      	mov	r2, r0
 800b5fe:	697b      	ldr	r3, [r7, #20]
 800b600:	1ad3      	subs	r3, r2, r3
 800b602:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b606:	d90d      	bls.n	800b624 <HAL_SAI_Transmit_DMA+0x11c>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b60e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	2200      	movs	r2, #0
 800b61c:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

        return HAL_TIMEOUT;
 800b620:	2303      	movs	r3, #3
 800b622:	e01c      	b.n	800b65e <HAL_SAI_Transmit_DMA+0x156>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	695b      	ldr	r3, [r3, #20]
 800b62a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d0e2      	beq.n	800b5f8 <HAL_SAI_Transmit_DMA+0xf0>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d107      	bne.n	800b650 <HAL_SAI_Transmit_DMA+0x148>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	681a      	ldr	r2, [r3, #0]
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800b64e:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	2200      	movs	r2, #0
 800b654:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 800b658:	2300      	movs	r3, #0
 800b65a:	e000      	b.n	800b65e <HAL_SAI_Transmit_DMA+0x156>
  }
  else
  {
    return HAL_BUSY;
 800b65c:	2302      	movs	r3, #2
  }
}
 800b65e:	4618      	mov	r0, r3
 800b660:	3718      	adds	r7, #24
 800b662:	46bd      	mov	sp, r7
 800b664:	bd80      	pop	{r7, pc}
 800b666:	bf00      	nop
 800b668:	0800bb5d 	.word	0x0800bb5d
 800b66c:	0800bafd 	.word	0x0800bafd
 800b670:	0800bbf5 	.word	0x0800bbf5

0800b674 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b084      	sub	sp, #16
 800b678:	af00      	add	r7, sp, #0
 800b67a:	60f8      	str	r0, [r7, #12]
 800b67c:	60b9      	str	r1, [r7, #8]
 800b67e:	4613      	mov	r3, r2
 800b680:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 800b682:	68bb      	ldr	r3, [r7, #8]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d002      	beq.n	800b68e <HAL_SAI_Receive_DMA+0x1a>
 800b688:	88fb      	ldrh	r3, [r7, #6]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d101      	bne.n	800b692 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800b68e:	2301      	movs	r3, #1
 800b690:	e079      	b.n	800b786 <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800b698:	b2db      	uxtb	r3, r3
 800b69a:	2b01      	cmp	r3, #1
 800b69c:	d172      	bne.n	800b784 <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800b6a4:	2b01      	cmp	r3, #1
 800b6a6:	d101      	bne.n	800b6ac <HAL_SAI_Receive_DMA+0x38>
 800b6a8:	2302      	movs	r3, #2
 800b6aa:	e06c      	b.n	800b786 <HAL_SAI_Receive_DMA+0x112>
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	2201      	movs	r2, #1
 800b6b0:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->pBuffPtr = pData;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	68ba      	ldr	r2, [r7, #8]
 800b6b8:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->XferSize = Size;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	88fa      	ldrh	r2, [r7, #6]
 800b6be:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	88fa      	ldrh	r2, [r7, #6]
 800b6c6:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	2222      	movs	r2, #34	@ 0x22
 800b6d6:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b6e0:	4a2b      	ldr	r2, [pc, #172]	@ (800b790 <HAL_SAI_Receive_DMA+0x11c>)
 800b6e2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b6ea:	4a2a      	ldr	r2, [pc, #168]	@ (800b794 <HAL_SAI_Receive_DMA+0x120>)
 800b6ec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b6f4:	4a28      	ldr	r2, [pc, #160]	@ (800b798 <HAL_SAI_Receive_DMA+0x124>)
 800b6f6:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b6fe:	2200      	movs	r2, #0
 800b700:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	331c      	adds	r3, #28
 800b70e:	4619      	mov	r1, r3
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b714:	461a      	mov	r2, r3
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 800b71c:	f7f8 fa84 	bl	8003c28 <HAL_DMA_Start_IT>
 800b720:	4603      	mov	r3, r0
 800b722:	2b00      	cmp	r3, #0
 800b724:	d005      	beq.n	800b732 <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	2200      	movs	r2, #0
 800b72a:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      return  HAL_ERROR;
 800b72e:	2301      	movs	r3, #1
 800b730:	e029      	b.n	800b786 <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800b732:	2100      	movs	r1, #0
 800b734:	68f8      	ldr	r0, [r7, #12]
 800b736:	f000 f96f 	bl	800ba18 <SAI_InterruptFlag>
 800b73a:	4601      	mov	r1, r0
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	691a      	ldr	r2, [r3, #16]
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	430a      	orrs	r2, r1
 800b748:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	681a      	ldr	r2, [r3, #0]
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800b758:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b764:	2b00      	cmp	r3, #0
 800b766:	d107      	bne.n	800b778 <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	681a      	ldr	r2, [r3, #0]
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800b776:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	2200      	movs	r2, #0
 800b77c:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 800b780:	2300      	movs	r3, #0
 800b782:	e000      	b.n	800b786 <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 800b784:	2302      	movs	r3, #2
  }
}
 800b786:	4618      	mov	r0, r3
 800b788:	3710      	adds	r7, #16
 800b78a:	46bd      	mov	sp, r7
 800b78c:	bd80      	pop	{r7, pc}
 800b78e:	bf00      	nop
 800b790:	0800bbd9 	.word	0x0800bbd9
 800b794:	0800bb79 	.word	0x0800bb79
 800b798:	0800bbf5 	.word	0x0800bbf5

0800b79c <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800b79c:	b480      	push	{r7}
 800b79e:	b083      	sub	sp, #12
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 800b7a4:	bf00      	nop
 800b7a6:	370c      	adds	r7, #12
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ae:	4770      	bx	lr

0800b7b0 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800b7b0:	b480      	push	{r7}
 800b7b2:	b087      	sub	sp, #28
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	60f8      	str	r0, [r7, #12]
 800b7b8:	60b9      	str	r1, [r7, #8]
 800b7ba:	607a      	str	r2, [r7, #4]
 800b7bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b7be:	2300      	movs	r3, #0
 800b7c0:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	685b      	ldr	r3, [r3, #4]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d003      	beq.n	800b7de <SAI_InitI2S+0x2e>
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	685b      	ldr	r3, [r3, #4]
 800b7da:	2b02      	cmp	r3, #2
 800b7dc:	d103      	bne.n	800b7e6 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	651a      	str	r2, [r3, #80]	@ 0x50
 800b7e4:	e002      	b.n	800b7ec <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	2201      	movs	r2, #1
 800b7ea:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800b7f2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b7fa:	675a      	str	r2, [r3, #116]	@ 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	2200      	movs	r2, #0
 800b800:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	683a      	ldr	r2, [r7, #0]
 800b806:	671a      	str	r2, [r3, #112]	@ 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	f003 0301 	and.w	r3, r3, #1
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d001      	beq.n	800b816 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800b812:	2301      	movs	r3, #1
 800b814:	e077      	b.n	800b906 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800b816:	68bb      	ldr	r3, [r7, #8]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d107      	bne.n	800b82c <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	2200      	movs	r2, #0
 800b820:	661a      	str	r2, [r3, #96]	@ 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800b828:	665a      	str	r2, [r3, #100]	@ 0x64
 800b82a:	e006      	b.n	800b83a <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800b832:	661a      	str	r2, [r3, #96]	@ 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	2200      	movs	r2, #0
 800b838:	665a      	str	r2, [r3, #100]	@ 0x64
  }

  /* Frame definition */
  switch (datasize)
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	2b03      	cmp	r3, #3
 800b83e:	d84f      	bhi.n	800b8e0 <SAI_InitI2S+0x130>
 800b840:	a201      	add	r2, pc, #4	@ (adr r2, 800b848 <SAI_InitI2S+0x98>)
 800b842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b846:	bf00      	nop
 800b848:	0800b859 	.word	0x0800b859
 800b84c:	0800b87b 	.word	0x0800b87b
 800b850:	0800b89d 	.word	0x0800b89d
 800b854:	0800b8bf 	.word	0x0800b8bf
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	2280      	movs	r2, #128	@ 0x80
 800b85c:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	085b      	lsrs	r3, r3, #1
 800b862:	015a      	lsls	r2, r3, #5
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800b868:	683b      	ldr	r3, [r7, #0]
 800b86a:	085b      	lsrs	r3, r3, #1
 800b86c:	011a      	lsls	r2, r3, #4
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	2240      	movs	r2, #64	@ 0x40
 800b876:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800b878:	e035      	b.n	800b8e6 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	2280      	movs	r2, #128	@ 0x80
 800b87e:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800b880:	683b      	ldr	r3, [r7, #0]
 800b882:	085b      	lsrs	r3, r3, #1
 800b884:	019a      	lsls	r2, r3, #6
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800b88a:	683b      	ldr	r3, [r7, #0]
 800b88c:	085b      	lsrs	r3, r3, #1
 800b88e:	015a      	lsls	r2, r3, #5
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	2280      	movs	r2, #128	@ 0x80
 800b898:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800b89a:	e024      	b.n	800b8e6 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	22c0      	movs	r2, #192	@ 0xc0
 800b8a0:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800b8a2:	683b      	ldr	r3, [r7, #0]
 800b8a4:	085b      	lsrs	r3, r3, #1
 800b8a6:	019a      	lsls	r2, r3, #6
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800b8ac:	683b      	ldr	r3, [r7, #0]
 800b8ae:	085b      	lsrs	r3, r3, #1
 800b8b0:	015a      	lsls	r2, r3, #5
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	2280      	movs	r2, #128	@ 0x80
 800b8ba:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800b8bc:	e013      	b.n	800b8e6 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	22e0      	movs	r2, #224	@ 0xe0
 800b8c2:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800b8c4:	683b      	ldr	r3, [r7, #0]
 800b8c6:	085b      	lsrs	r3, r3, #1
 800b8c8:	019a      	lsls	r2, r3, #6
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800b8ce:	683b      	ldr	r3, [r7, #0]
 800b8d0:	085b      	lsrs	r3, r3, #1
 800b8d2:	015a      	lsls	r2, r3, #5
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	2280      	movs	r2, #128	@ 0x80
 800b8dc:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800b8de:	e002      	b.n	800b8e6 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800b8e0:	2301      	movs	r3, #1
 800b8e2:	75fb      	strb	r3, [r7, #23]
      break;
 800b8e4:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800b8e6:	68bb      	ldr	r3, [r7, #8]
 800b8e8:	2b02      	cmp	r3, #2
 800b8ea:	d10b      	bne.n	800b904 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2b01      	cmp	r3, #1
 800b8f0:	d102      	bne.n	800b8f8 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	2210      	movs	r2, #16
 800b8f6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2b02      	cmp	r3, #2
 800b8fc:	d102      	bne.n	800b904 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	2208      	movs	r2, #8
 800b902:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }
  return status;
 800b904:	7dfb      	ldrb	r3, [r7, #23]
}
 800b906:	4618      	mov	r0, r3
 800b908:	371c      	adds	r7, #28
 800b90a:	46bd      	mov	sp, r7
 800b90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b910:	4770      	bx	lr
 800b912:	bf00      	nop

0800b914 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800b914:	b480      	push	{r7}
 800b916:	b087      	sub	sp, #28
 800b918:	af00      	add	r7, sp, #0
 800b91a:	60f8      	str	r0, [r7, #12]
 800b91c:	60b9      	str	r1, [r7, #8]
 800b91e:	607a      	str	r2, [r7, #4]
 800b920:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b922:	2300      	movs	r3, #0
 800b924:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	2200      	movs	r2, #0
 800b92a:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	2200      	movs	r2, #0
 800b930:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	685b      	ldr	r3, [r3, #4]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d003      	beq.n	800b942 <SAI_InitPCM+0x2e>
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	685b      	ldr	r3, [r3, #4]
 800b93e:	2b02      	cmp	r3, #2
 800b940:	d103      	bne.n	800b94a <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	2201      	movs	r2, #1
 800b946:	651a      	str	r2, [r3, #80]	@ 0x50
 800b948:	e002      	b.n	800b950 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	2200      	movs	r2, #0
 800b94e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	2200      	movs	r2, #0
 800b954:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800b95c:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800b964:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	2200      	movs	r2, #0
 800b96a:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	683a      	ldr	r2, [r7, #0]
 800b970:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b978:	675a      	str	r2, [r3, #116]	@ 0x74

  if (protocol == SAI_PCM_SHORT)
 800b97a:	68bb      	ldr	r3, [r7, #8]
 800b97c:	2b04      	cmp	r3, #4
 800b97e:	d103      	bne.n	800b988 <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	2201      	movs	r2, #1
 800b984:	659a      	str	r2, [r3, #88]	@ 0x58
 800b986:	e002      	b.n	800b98e <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	220d      	movs	r2, #13
 800b98c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  switch (datasize)
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	2b03      	cmp	r3, #3
 800b992:	d837      	bhi.n	800ba04 <SAI_InitPCM+0xf0>
 800b994:	a201      	add	r2, pc, #4	@ (adr r2, 800b99c <SAI_InitPCM+0x88>)
 800b996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b99a:	bf00      	nop
 800b99c:	0800b9ad 	.word	0x0800b9ad
 800b9a0:	0800b9c3 	.word	0x0800b9c3
 800b9a4:	0800b9d9 	.word	0x0800b9d9
 800b9a8:	0800b9ef 	.word	0x0800b9ef
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	2280      	movs	r2, #128	@ 0x80
 800b9b0:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800b9b2:	683b      	ldr	r3, [r7, #0]
 800b9b4:	011a      	lsls	r2, r3, #4
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	2240      	movs	r2, #64	@ 0x40
 800b9be:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800b9c0:	e023      	b.n	800ba0a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	2280      	movs	r2, #128	@ 0x80
 800b9c6:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800b9c8:	683b      	ldr	r3, [r7, #0]
 800b9ca:	015a      	lsls	r2, r3, #5
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	2280      	movs	r2, #128	@ 0x80
 800b9d4:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800b9d6:	e018      	b.n	800ba0a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	22c0      	movs	r2, #192	@ 0xc0
 800b9dc:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800b9de:	683b      	ldr	r3, [r7, #0]
 800b9e0:	015a      	lsls	r2, r3, #5
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	2280      	movs	r2, #128	@ 0x80
 800b9ea:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800b9ec:	e00d      	b.n	800ba0a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	22e0      	movs	r2, #224	@ 0xe0
 800b9f2:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	015a      	lsls	r2, r3, #5
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	2280      	movs	r2, #128	@ 0x80
 800ba00:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800ba02:	e002      	b.n	800ba0a <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800ba04:	2301      	movs	r3, #1
 800ba06:	75fb      	strb	r3, [r7, #23]
      break;
 800ba08:	bf00      	nop
  }

  return status;
 800ba0a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	371c      	adds	r7, #28
 800ba10:	46bd      	mov	sp, r7
 800ba12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba16:	4770      	bx	lr

0800ba18 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 800ba18:	b480      	push	{r7}
 800ba1a:	b085      	sub	sp, #20
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
 800ba20:	460b      	mov	r3, r1
 800ba22:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800ba24:	2301      	movs	r3, #1
 800ba26:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800ba28:	78fb      	ldrb	r3, [r7, #3]
 800ba2a:	2b01      	cmp	r3, #1
 800ba2c:	d103      	bne.n	800ba36 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	f043 0308 	orr.w	r3, r3, #8
 800ba34:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ba3a:	2b08      	cmp	r3, #8
 800ba3c:	d10b      	bne.n	800ba56 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800ba42:	2b03      	cmp	r3, #3
 800ba44:	d003      	beq.n	800ba4e <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	685b      	ldr	r3, [r3, #4]
 800ba4a:	2b01      	cmp	r3, #1
 800ba4c:	d103      	bne.n	800ba56 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	f043 0310 	orr.w	r3, r3, #16
 800ba54:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	685b      	ldr	r3, [r3, #4]
 800ba5a:	2b03      	cmp	r3, #3
 800ba5c:	d003      	beq.n	800ba66 <SAI_InterruptFlag+0x4e>
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	685b      	ldr	r3, [r3, #4]
 800ba62:	2b02      	cmp	r3, #2
 800ba64:	d104      	bne.n	800ba70 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800ba6c:	60fb      	str	r3, [r7, #12]
 800ba6e:	e003      	b.n	800ba78 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	f043 0304 	orr.w	r3, r3, #4
 800ba76:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800ba78:	68fb      	ldr	r3, [r7, #12]
}
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	3714      	adds	r7, #20
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba84:	4770      	bx	lr
	...

0800ba88 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800ba88:	b480      	push	{r7}
 800ba8a:	b085      	sub	sp, #20
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800ba90:	4b18      	ldr	r3, [pc, #96]	@ (800baf4 <SAI_Disable+0x6c>)
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	4a18      	ldr	r2, [pc, #96]	@ (800baf8 <SAI_Disable+0x70>)
 800ba96:	fba2 2303 	umull	r2, r3, r2, r3
 800ba9a:	0b1b      	lsrs	r3, r3, #12
 800ba9c:	009b      	lsls	r3, r3, #2
 800ba9e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800baa0:	2300      	movs	r3, #0
 800baa2:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	681a      	ldr	r2, [r3, #0]
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800bab2:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d10a      	bne.n	800bad0 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bac0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 800baca:	2303      	movs	r3, #3
 800bacc:	72fb      	strb	r3, [r7, #11]
      break;
 800bace:	e009      	b.n	800bae4 <SAI_Disable+0x5c>
    }
    count--;
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	3b01      	subs	r3, #1
 800bad4:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d1e7      	bne.n	800bab4 <SAI_Disable+0x2c>

  return status;
 800bae4:	7afb      	ldrb	r3, [r7, #11]
}
 800bae6:	4618      	mov	r0, r3
 800bae8:	3714      	adds	r7, #20
 800baea:	46bd      	mov	sp, r7
 800baec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf0:	4770      	bx	lr
 800baf2:	bf00      	nop
 800baf4:	24000000 	.word	0x24000000
 800baf8:	95cbec1b 	.word	0x95cbec1b

0800bafc <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b084      	sub	sp, #16
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb08:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	69db      	ldr	r3, [r3, #28]
 800bb0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bb12:	d01c      	beq.n	800bb4e <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	2200      	movs	r2, #0
 800bb18:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	681a      	ldr	r2, [r3, #0]
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800bb2a:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800bb2c:	2100      	movs	r1, #0
 800bb2e:	68f8      	ldr	r0, [r7, #12]
 800bb30:	f7ff ff72 	bl	800ba18 <SAI_InterruptFlag>
 800bb34:	4603      	mov	r3, r0
 800bb36:	43d9      	mvns	r1, r3
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	691a      	ldr	r2, [r3, #16]
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	400a      	ands	r2, r1
 800bb44:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	2201      	movs	r2, #1
 800bb4a:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800bb4e:	68f8      	ldr	r0, [r7, #12]
 800bb50:	f7f6 fdc2 	bl	80026d8 <HAL_SAI_TxCpltCallback>
#endif
}
 800bb54:	bf00      	nop
 800bb56:	3710      	adds	r7, #16
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	bd80      	pop	{r7, pc}

0800bb5c <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b084      	sub	sp, #16
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb68:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800bb6a:	68f8      	ldr	r0, [r7, #12]
 800bb6c:	f7f6 fdaa 	bl	80026c4 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 800bb70:	bf00      	nop
 800bb72:	3710      	adds	r7, #16
 800bb74:	46bd      	mov	sp, r7
 800bb76:	bd80      	pop	{r7, pc}

0800bb78 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b084      	sub	sp, #16
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb84:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	69db      	ldr	r3, [r3, #28]
 800bb8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bb8e:	d01c      	beq.n	800bbca <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	681a      	ldr	r2, [r3, #0]
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800bb9e:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	2200      	movs	r2, #0
 800bba4:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800bba8:	2100      	movs	r1, #0
 800bbaa:	68f8      	ldr	r0, [r7, #12]
 800bbac:	f7ff ff34 	bl	800ba18 <SAI_InterruptFlag>
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	43d9      	mvns	r1, r3
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	691a      	ldr	r2, [r3, #16]
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	400a      	ands	r2, r1
 800bbc0:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	2201      	movs	r2, #1
 800bbc6:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800bbca:	68f8      	ldr	r0, [r7, #12]
 800bbcc:	f7f6 fd70 	bl	80026b0 <HAL_SAI_RxCpltCallback>
#endif
}
 800bbd0:	bf00      	nop
 800bbd2:	3710      	adds	r7, #16
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	bd80      	pop	{r7, pc}

0800bbd8 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b084      	sub	sp, #16
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbe4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800bbe6:	68f8      	ldr	r0, [r7, #12]
 800bbe8:	f7f6 fd58 	bl	800269c <HAL_SAI_RxHalfCpltCallback>
#endif
}
 800bbec:	bf00      	nop
 800bbee:	3710      	adds	r7, #16
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	bd80      	pop	{r7, pc}

0800bbf4 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b084      	sub	sp, #16
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc00:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800bc02:	6878      	ldr	r0, [r7, #4]
 800bc04:	f7f9 f9a4 	bl	8004f50 <HAL_DMA_GetError>
 800bc08:	4603      	mov	r3, r0
 800bc0a:	2b02      	cmp	r3, #2
 800bc0c:	d01d      	beq.n	800bc4a <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bc14:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	681a      	ldr	r2, [r3, #0]
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800bc2c:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 800bc2e:	68f8      	ldr	r0, [r7, #12]
 800bc30:	f7ff ff2a 	bl	800ba88 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	2201      	movs	r2, #1
 800bc38:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	2200      	movs	r2, #0
 800bc40:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 800bc44:	68f8      	ldr	r0, [r7, #12]
 800bc46:	f7ff fda9 	bl	800b79c <HAL_SAI_ErrorCallback>
#endif
  }
}
 800bc4a:	bf00      	nop
 800bc4c:	3710      	adds	r7, #16
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	bd80      	pop	{r7, pc}

0800bc52 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bc52:	b580      	push	{r7, lr}
 800bc54:	b082      	sub	sp, #8
 800bc56:	af00      	add	r7, sp, #0
 800bc58:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d101      	bne.n	800bc64 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bc60:	2301      	movs	r3, #1
 800bc62:	e042      	b.n	800bcea <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d106      	bne.n	800bc7c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	2200      	movs	r2, #0
 800bc72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bc76:	6878      	ldr	r0, [r7, #4]
 800bc78:	f7f7 f82e 	bl	8002cd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	2224      	movs	r2, #36	@ 0x24
 800bc80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	681a      	ldr	r2, [r3, #0]
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	f022 0201 	bic.w	r2, r2, #1
 800bc92:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d002      	beq.n	800bca2 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800bc9c:	6878      	ldr	r0, [r7, #4]
 800bc9e:	f000 fd91 	bl	800c7c4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bca2:	6878      	ldr	r0, [r7, #4]
 800bca4:	f000 f826 	bl	800bcf4 <UART_SetConfig>
 800bca8:	4603      	mov	r3, r0
 800bcaa:	2b01      	cmp	r3, #1
 800bcac:	d101      	bne.n	800bcb2 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800bcae:	2301      	movs	r3, #1
 800bcb0:	e01b      	b.n	800bcea <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	685a      	ldr	r2, [r3, #4]
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800bcc0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	689a      	ldr	r2, [r3, #8]
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800bcd0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	681a      	ldr	r2, [r3, #0]
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	f042 0201 	orr.w	r2, r2, #1
 800bce0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bce2:	6878      	ldr	r0, [r7, #4]
 800bce4:	f000 fe10 	bl	800c908 <UART_CheckIdleState>
 800bce8:	4603      	mov	r3, r0
}
 800bcea:	4618      	mov	r0, r3
 800bcec:	3708      	adds	r7, #8
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	bd80      	pop	{r7, pc}
	...

0800bcf4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bcf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bcf8:	b092      	sub	sp, #72	@ 0x48
 800bcfa:	af00      	add	r7, sp, #0
 800bcfc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bcfe:	2300      	movs	r3, #0
 800bd00:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bd04:	697b      	ldr	r3, [r7, #20]
 800bd06:	689a      	ldr	r2, [r3, #8]
 800bd08:	697b      	ldr	r3, [r7, #20]
 800bd0a:	691b      	ldr	r3, [r3, #16]
 800bd0c:	431a      	orrs	r2, r3
 800bd0e:	697b      	ldr	r3, [r7, #20]
 800bd10:	695b      	ldr	r3, [r3, #20]
 800bd12:	431a      	orrs	r2, r3
 800bd14:	697b      	ldr	r3, [r7, #20]
 800bd16:	69db      	ldr	r3, [r3, #28]
 800bd18:	4313      	orrs	r3, r2
 800bd1a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bd1c:	697b      	ldr	r3, [r7, #20]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	681a      	ldr	r2, [r3, #0]
 800bd22:	4bbe      	ldr	r3, [pc, #760]	@ (800c01c <UART_SetConfig+0x328>)
 800bd24:	4013      	ands	r3, r2
 800bd26:	697a      	ldr	r2, [r7, #20]
 800bd28:	6812      	ldr	r2, [r2, #0]
 800bd2a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800bd2c:	430b      	orrs	r3, r1
 800bd2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bd30:	697b      	ldr	r3, [r7, #20]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	685b      	ldr	r3, [r3, #4]
 800bd36:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800bd3a:	697b      	ldr	r3, [r7, #20]
 800bd3c:	68da      	ldr	r2, [r3, #12]
 800bd3e:	697b      	ldr	r3, [r7, #20]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	430a      	orrs	r2, r1
 800bd44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bd46:	697b      	ldr	r3, [r7, #20]
 800bd48:	699b      	ldr	r3, [r3, #24]
 800bd4a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bd4c:	697b      	ldr	r3, [r7, #20]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	4ab3      	ldr	r2, [pc, #716]	@ (800c020 <UART_SetConfig+0x32c>)
 800bd52:	4293      	cmp	r3, r2
 800bd54:	d004      	beq.n	800bd60 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bd56:	697b      	ldr	r3, [r7, #20]
 800bd58:	6a1b      	ldr	r3, [r3, #32]
 800bd5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bd5c:	4313      	orrs	r3, r2
 800bd5e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bd60:	697b      	ldr	r3, [r7, #20]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	689a      	ldr	r2, [r3, #8]
 800bd66:	4baf      	ldr	r3, [pc, #700]	@ (800c024 <UART_SetConfig+0x330>)
 800bd68:	4013      	ands	r3, r2
 800bd6a:	697a      	ldr	r2, [r7, #20]
 800bd6c:	6812      	ldr	r2, [r2, #0]
 800bd6e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800bd70:	430b      	orrs	r3, r1
 800bd72:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bd74:	697b      	ldr	r3, [r7, #20]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd7a:	f023 010f 	bic.w	r1, r3, #15
 800bd7e:	697b      	ldr	r3, [r7, #20]
 800bd80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bd82:	697b      	ldr	r3, [r7, #20]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	430a      	orrs	r2, r1
 800bd88:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bd8a:	697b      	ldr	r3, [r7, #20]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	4aa6      	ldr	r2, [pc, #664]	@ (800c028 <UART_SetConfig+0x334>)
 800bd90:	4293      	cmp	r3, r2
 800bd92:	d177      	bne.n	800be84 <UART_SetConfig+0x190>
 800bd94:	4ba5      	ldr	r3, [pc, #660]	@ (800c02c <UART_SetConfig+0x338>)
 800bd96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bd98:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bd9c:	2b28      	cmp	r3, #40	@ 0x28
 800bd9e:	d86d      	bhi.n	800be7c <UART_SetConfig+0x188>
 800bda0:	a201      	add	r2, pc, #4	@ (adr r2, 800bda8 <UART_SetConfig+0xb4>)
 800bda2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bda6:	bf00      	nop
 800bda8:	0800be4d 	.word	0x0800be4d
 800bdac:	0800be7d 	.word	0x0800be7d
 800bdb0:	0800be7d 	.word	0x0800be7d
 800bdb4:	0800be7d 	.word	0x0800be7d
 800bdb8:	0800be7d 	.word	0x0800be7d
 800bdbc:	0800be7d 	.word	0x0800be7d
 800bdc0:	0800be7d 	.word	0x0800be7d
 800bdc4:	0800be7d 	.word	0x0800be7d
 800bdc8:	0800be55 	.word	0x0800be55
 800bdcc:	0800be7d 	.word	0x0800be7d
 800bdd0:	0800be7d 	.word	0x0800be7d
 800bdd4:	0800be7d 	.word	0x0800be7d
 800bdd8:	0800be7d 	.word	0x0800be7d
 800bddc:	0800be7d 	.word	0x0800be7d
 800bde0:	0800be7d 	.word	0x0800be7d
 800bde4:	0800be7d 	.word	0x0800be7d
 800bde8:	0800be5d 	.word	0x0800be5d
 800bdec:	0800be7d 	.word	0x0800be7d
 800bdf0:	0800be7d 	.word	0x0800be7d
 800bdf4:	0800be7d 	.word	0x0800be7d
 800bdf8:	0800be7d 	.word	0x0800be7d
 800bdfc:	0800be7d 	.word	0x0800be7d
 800be00:	0800be7d 	.word	0x0800be7d
 800be04:	0800be7d 	.word	0x0800be7d
 800be08:	0800be65 	.word	0x0800be65
 800be0c:	0800be7d 	.word	0x0800be7d
 800be10:	0800be7d 	.word	0x0800be7d
 800be14:	0800be7d 	.word	0x0800be7d
 800be18:	0800be7d 	.word	0x0800be7d
 800be1c:	0800be7d 	.word	0x0800be7d
 800be20:	0800be7d 	.word	0x0800be7d
 800be24:	0800be7d 	.word	0x0800be7d
 800be28:	0800be6d 	.word	0x0800be6d
 800be2c:	0800be7d 	.word	0x0800be7d
 800be30:	0800be7d 	.word	0x0800be7d
 800be34:	0800be7d 	.word	0x0800be7d
 800be38:	0800be7d 	.word	0x0800be7d
 800be3c:	0800be7d 	.word	0x0800be7d
 800be40:	0800be7d 	.word	0x0800be7d
 800be44:	0800be7d 	.word	0x0800be7d
 800be48:	0800be75 	.word	0x0800be75
 800be4c:	2301      	movs	r3, #1
 800be4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be52:	e222      	b.n	800c29a <UART_SetConfig+0x5a6>
 800be54:	2304      	movs	r3, #4
 800be56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be5a:	e21e      	b.n	800c29a <UART_SetConfig+0x5a6>
 800be5c:	2308      	movs	r3, #8
 800be5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be62:	e21a      	b.n	800c29a <UART_SetConfig+0x5a6>
 800be64:	2310      	movs	r3, #16
 800be66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be6a:	e216      	b.n	800c29a <UART_SetConfig+0x5a6>
 800be6c:	2320      	movs	r3, #32
 800be6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be72:	e212      	b.n	800c29a <UART_SetConfig+0x5a6>
 800be74:	2340      	movs	r3, #64	@ 0x40
 800be76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be7a:	e20e      	b.n	800c29a <UART_SetConfig+0x5a6>
 800be7c:	2380      	movs	r3, #128	@ 0x80
 800be7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be82:	e20a      	b.n	800c29a <UART_SetConfig+0x5a6>
 800be84:	697b      	ldr	r3, [r7, #20]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	4a69      	ldr	r2, [pc, #420]	@ (800c030 <UART_SetConfig+0x33c>)
 800be8a:	4293      	cmp	r3, r2
 800be8c:	d130      	bne.n	800bef0 <UART_SetConfig+0x1fc>
 800be8e:	4b67      	ldr	r3, [pc, #412]	@ (800c02c <UART_SetConfig+0x338>)
 800be90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800be92:	f003 0307 	and.w	r3, r3, #7
 800be96:	2b05      	cmp	r3, #5
 800be98:	d826      	bhi.n	800bee8 <UART_SetConfig+0x1f4>
 800be9a:	a201      	add	r2, pc, #4	@ (adr r2, 800bea0 <UART_SetConfig+0x1ac>)
 800be9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bea0:	0800beb9 	.word	0x0800beb9
 800bea4:	0800bec1 	.word	0x0800bec1
 800bea8:	0800bec9 	.word	0x0800bec9
 800beac:	0800bed1 	.word	0x0800bed1
 800beb0:	0800bed9 	.word	0x0800bed9
 800beb4:	0800bee1 	.word	0x0800bee1
 800beb8:	2300      	movs	r3, #0
 800beba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bebe:	e1ec      	b.n	800c29a <UART_SetConfig+0x5a6>
 800bec0:	2304      	movs	r3, #4
 800bec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bec6:	e1e8      	b.n	800c29a <UART_SetConfig+0x5a6>
 800bec8:	2308      	movs	r3, #8
 800beca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bece:	e1e4      	b.n	800c29a <UART_SetConfig+0x5a6>
 800bed0:	2310      	movs	r3, #16
 800bed2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bed6:	e1e0      	b.n	800c29a <UART_SetConfig+0x5a6>
 800bed8:	2320      	movs	r3, #32
 800beda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bede:	e1dc      	b.n	800c29a <UART_SetConfig+0x5a6>
 800bee0:	2340      	movs	r3, #64	@ 0x40
 800bee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bee6:	e1d8      	b.n	800c29a <UART_SetConfig+0x5a6>
 800bee8:	2380      	movs	r3, #128	@ 0x80
 800beea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800beee:	e1d4      	b.n	800c29a <UART_SetConfig+0x5a6>
 800bef0:	697b      	ldr	r3, [r7, #20]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	4a4f      	ldr	r2, [pc, #316]	@ (800c034 <UART_SetConfig+0x340>)
 800bef6:	4293      	cmp	r3, r2
 800bef8:	d130      	bne.n	800bf5c <UART_SetConfig+0x268>
 800befa:	4b4c      	ldr	r3, [pc, #304]	@ (800c02c <UART_SetConfig+0x338>)
 800befc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800befe:	f003 0307 	and.w	r3, r3, #7
 800bf02:	2b05      	cmp	r3, #5
 800bf04:	d826      	bhi.n	800bf54 <UART_SetConfig+0x260>
 800bf06:	a201      	add	r2, pc, #4	@ (adr r2, 800bf0c <UART_SetConfig+0x218>)
 800bf08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf0c:	0800bf25 	.word	0x0800bf25
 800bf10:	0800bf2d 	.word	0x0800bf2d
 800bf14:	0800bf35 	.word	0x0800bf35
 800bf18:	0800bf3d 	.word	0x0800bf3d
 800bf1c:	0800bf45 	.word	0x0800bf45
 800bf20:	0800bf4d 	.word	0x0800bf4d
 800bf24:	2300      	movs	r3, #0
 800bf26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf2a:	e1b6      	b.n	800c29a <UART_SetConfig+0x5a6>
 800bf2c:	2304      	movs	r3, #4
 800bf2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf32:	e1b2      	b.n	800c29a <UART_SetConfig+0x5a6>
 800bf34:	2308      	movs	r3, #8
 800bf36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf3a:	e1ae      	b.n	800c29a <UART_SetConfig+0x5a6>
 800bf3c:	2310      	movs	r3, #16
 800bf3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf42:	e1aa      	b.n	800c29a <UART_SetConfig+0x5a6>
 800bf44:	2320      	movs	r3, #32
 800bf46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf4a:	e1a6      	b.n	800c29a <UART_SetConfig+0x5a6>
 800bf4c:	2340      	movs	r3, #64	@ 0x40
 800bf4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf52:	e1a2      	b.n	800c29a <UART_SetConfig+0x5a6>
 800bf54:	2380      	movs	r3, #128	@ 0x80
 800bf56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf5a:	e19e      	b.n	800c29a <UART_SetConfig+0x5a6>
 800bf5c:	697b      	ldr	r3, [r7, #20]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	4a35      	ldr	r2, [pc, #212]	@ (800c038 <UART_SetConfig+0x344>)
 800bf62:	4293      	cmp	r3, r2
 800bf64:	d130      	bne.n	800bfc8 <UART_SetConfig+0x2d4>
 800bf66:	4b31      	ldr	r3, [pc, #196]	@ (800c02c <UART_SetConfig+0x338>)
 800bf68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bf6a:	f003 0307 	and.w	r3, r3, #7
 800bf6e:	2b05      	cmp	r3, #5
 800bf70:	d826      	bhi.n	800bfc0 <UART_SetConfig+0x2cc>
 800bf72:	a201      	add	r2, pc, #4	@ (adr r2, 800bf78 <UART_SetConfig+0x284>)
 800bf74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf78:	0800bf91 	.word	0x0800bf91
 800bf7c:	0800bf99 	.word	0x0800bf99
 800bf80:	0800bfa1 	.word	0x0800bfa1
 800bf84:	0800bfa9 	.word	0x0800bfa9
 800bf88:	0800bfb1 	.word	0x0800bfb1
 800bf8c:	0800bfb9 	.word	0x0800bfb9
 800bf90:	2300      	movs	r3, #0
 800bf92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf96:	e180      	b.n	800c29a <UART_SetConfig+0x5a6>
 800bf98:	2304      	movs	r3, #4
 800bf9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf9e:	e17c      	b.n	800c29a <UART_SetConfig+0x5a6>
 800bfa0:	2308      	movs	r3, #8
 800bfa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bfa6:	e178      	b.n	800c29a <UART_SetConfig+0x5a6>
 800bfa8:	2310      	movs	r3, #16
 800bfaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bfae:	e174      	b.n	800c29a <UART_SetConfig+0x5a6>
 800bfb0:	2320      	movs	r3, #32
 800bfb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bfb6:	e170      	b.n	800c29a <UART_SetConfig+0x5a6>
 800bfb8:	2340      	movs	r3, #64	@ 0x40
 800bfba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bfbe:	e16c      	b.n	800c29a <UART_SetConfig+0x5a6>
 800bfc0:	2380      	movs	r3, #128	@ 0x80
 800bfc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bfc6:	e168      	b.n	800c29a <UART_SetConfig+0x5a6>
 800bfc8:	697b      	ldr	r3, [r7, #20]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	4a1b      	ldr	r2, [pc, #108]	@ (800c03c <UART_SetConfig+0x348>)
 800bfce:	4293      	cmp	r3, r2
 800bfd0:	d142      	bne.n	800c058 <UART_SetConfig+0x364>
 800bfd2:	4b16      	ldr	r3, [pc, #88]	@ (800c02c <UART_SetConfig+0x338>)
 800bfd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bfd6:	f003 0307 	and.w	r3, r3, #7
 800bfda:	2b05      	cmp	r3, #5
 800bfdc:	d838      	bhi.n	800c050 <UART_SetConfig+0x35c>
 800bfde:	a201      	add	r2, pc, #4	@ (adr r2, 800bfe4 <UART_SetConfig+0x2f0>)
 800bfe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfe4:	0800bffd 	.word	0x0800bffd
 800bfe8:	0800c005 	.word	0x0800c005
 800bfec:	0800c00d 	.word	0x0800c00d
 800bff0:	0800c015 	.word	0x0800c015
 800bff4:	0800c041 	.word	0x0800c041
 800bff8:	0800c049 	.word	0x0800c049
 800bffc:	2300      	movs	r3, #0
 800bffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c002:	e14a      	b.n	800c29a <UART_SetConfig+0x5a6>
 800c004:	2304      	movs	r3, #4
 800c006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c00a:	e146      	b.n	800c29a <UART_SetConfig+0x5a6>
 800c00c:	2308      	movs	r3, #8
 800c00e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c012:	e142      	b.n	800c29a <UART_SetConfig+0x5a6>
 800c014:	2310      	movs	r3, #16
 800c016:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c01a:	e13e      	b.n	800c29a <UART_SetConfig+0x5a6>
 800c01c:	cfff69f3 	.word	0xcfff69f3
 800c020:	58000c00 	.word	0x58000c00
 800c024:	11fff4ff 	.word	0x11fff4ff
 800c028:	40011000 	.word	0x40011000
 800c02c:	58024400 	.word	0x58024400
 800c030:	40004400 	.word	0x40004400
 800c034:	40004800 	.word	0x40004800
 800c038:	40004c00 	.word	0x40004c00
 800c03c:	40005000 	.word	0x40005000
 800c040:	2320      	movs	r3, #32
 800c042:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c046:	e128      	b.n	800c29a <UART_SetConfig+0x5a6>
 800c048:	2340      	movs	r3, #64	@ 0x40
 800c04a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c04e:	e124      	b.n	800c29a <UART_SetConfig+0x5a6>
 800c050:	2380      	movs	r3, #128	@ 0x80
 800c052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c056:	e120      	b.n	800c29a <UART_SetConfig+0x5a6>
 800c058:	697b      	ldr	r3, [r7, #20]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	4acb      	ldr	r2, [pc, #812]	@ (800c38c <UART_SetConfig+0x698>)
 800c05e:	4293      	cmp	r3, r2
 800c060:	d176      	bne.n	800c150 <UART_SetConfig+0x45c>
 800c062:	4bcb      	ldr	r3, [pc, #812]	@ (800c390 <UART_SetConfig+0x69c>)
 800c064:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c066:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c06a:	2b28      	cmp	r3, #40	@ 0x28
 800c06c:	d86c      	bhi.n	800c148 <UART_SetConfig+0x454>
 800c06e:	a201      	add	r2, pc, #4	@ (adr r2, 800c074 <UART_SetConfig+0x380>)
 800c070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c074:	0800c119 	.word	0x0800c119
 800c078:	0800c149 	.word	0x0800c149
 800c07c:	0800c149 	.word	0x0800c149
 800c080:	0800c149 	.word	0x0800c149
 800c084:	0800c149 	.word	0x0800c149
 800c088:	0800c149 	.word	0x0800c149
 800c08c:	0800c149 	.word	0x0800c149
 800c090:	0800c149 	.word	0x0800c149
 800c094:	0800c121 	.word	0x0800c121
 800c098:	0800c149 	.word	0x0800c149
 800c09c:	0800c149 	.word	0x0800c149
 800c0a0:	0800c149 	.word	0x0800c149
 800c0a4:	0800c149 	.word	0x0800c149
 800c0a8:	0800c149 	.word	0x0800c149
 800c0ac:	0800c149 	.word	0x0800c149
 800c0b0:	0800c149 	.word	0x0800c149
 800c0b4:	0800c129 	.word	0x0800c129
 800c0b8:	0800c149 	.word	0x0800c149
 800c0bc:	0800c149 	.word	0x0800c149
 800c0c0:	0800c149 	.word	0x0800c149
 800c0c4:	0800c149 	.word	0x0800c149
 800c0c8:	0800c149 	.word	0x0800c149
 800c0cc:	0800c149 	.word	0x0800c149
 800c0d0:	0800c149 	.word	0x0800c149
 800c0d4:	0800c131 	.word	0x0800c131
 800c0d8:	0800c149 	.word	0x0800c149
 800c0dc:	0800c149 	.word	0x0800c149
 800c0e0:	0800c149 	.word	0x0800c149
 800c0e4:	0800c149 	.word	0x0800c149
 800c0e8:	0800c149 	.word	0x0800c149
 800c0ec:	0800c149 	.word	0x0800c149
 800c0f0:	0800c149 	.word	0x0800c149
 800c0f4:	0800c139 	.word	0x0800c139
 800c0f8:	0800c149 	.word	0x0800c149
 800c0fc:	0800c149 	.word	0x0800c149
 800c100:	0800c149 	.word	0x0800c149
 800c104:	0800c149 	.word	0x0800c149
 800c108:	0800c149 	.word	0x0800c149
 800c10c:	0800c149 	.word	0x0800c149
 800c110:	0800c149 	.word	0x0800c149
 800c114:	0800c141 	.word	0x0800c141
 800c118:	2301      	movs	r3, #1
 800c11a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c11e:	e0bc      	b.n	800c29a <UART_SetConfig+0x5a6>
 800c120:	2304      	movs	r3, #4
 800c122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c126:	e0b8      	b.n	800c29a <UART_SetConfig+0x5a6>
 800c128:	2308      	movs	r3, #8
 800c12a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c12e:	e0b4      	b.n	800c29a <UART_SetConfig+0x5a6>
 800c130:	2310      	movs	r3, #16
 800c132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c136:	e0b0      	b.n	800c29a <UART_SetConfig+0x5a6>
 800c138:	2320      	movs	r3, #32
 800c13a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c13e:	e0ac      	b.n	800c29a <UART_SetConfig+0x5a6>
 800c140:	2340      	movs	r3, #64	@ 0x40
 800c142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c146:	e0a8      	b.n	800c29a <UART_SetConfig+0x5a6>
 800c148:	2380      	movs	r3, #128	@ 0x80
 800c14a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c14e:	e0a4      	b.n	800c29a <UART_SetConfig+0x5a6>
 800c150:	697b      	ldr	r3, [r7, #20]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	4a8f      	ldr	r2, [pc, #572]	@ (800c394 <UART_SetConfig+0x6a0>)
 800c156:	4293      	cmp	r3, r2
 800c158:	d130      	bne.n	800c1bc <UART_SetConfig+0x4c8>
 800c15a:	4b8d      	ldr	r3, [pc, #564]	@ (800c390 <UART_SetConfig+0x69c>)
 800c15c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c15e:	f003 0307 	and.w	r3, r3, #7
 800c162:	2b05      	cmp	r3, #5
 800c164:	d826      	bhi.n	800c1b4 <UART_SetConfig+0x4c0>
 800c166:	a201      	add	r2, pc, #4	@ (adr r2, 800c16c <UART_SetConfig+0x478>)
 800c168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c16c:	0800c185 	.word	0x0800c185
 800c170:	0800c18d 	.word	0x0800c18d
 800c174:	0800c195 	.word	0x0800c195
 800c178:	0800c19d 	.word	0x0800c19d
 800c17c:	0800c1a5 	.word	0x0800c1a5
 800c180:	0800c1ad 	.word	0x0800c1ad
 800c184:	2300      	movs	r3, #0
 800c186:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c18a:	e086      	b.n	800c29a <UART_SetConfig+0x5a6>
 800c18c:	2304      	movs	r3, #4
 800c18e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c192:	e082      	b.n	800c29a <UART_SetConfig+0x5a6>
 800c194:	2308      	movs	r3, #8
 800c196:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c19a:	e07e      	b.n	800c29a <UART_SetConfig+0x5a6>
 800c19c:	2310      	movs	r3, #16
 800c19e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1a2:	e07a      	b.n	800c29a <UART_SetConfig+0x5a6>
 800c1a4:	2320      	movs	r3, #32
 800c1a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1aa:	e076      	b.n	800c29a <UART_SetConfig+0x5a6>
 800c1ac:	2340      	movs	r3, #64	@ 0x40
 800c1ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1b2:	e072      	b.n	800c29a <UART_SetConfig+0x5a6>
 800c1b4:	2380      	movs	r3, #128	@ 0x80
 800c1b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1ba:	e06e      	b.n	800c29a <UART_SetConfig+0x5a6>
 800c1bc:	697b      	ldr	r3, [r7, #20]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	4a75      	ldr	r2, [pc, #468]	@ (800c398 <UART_SetConfig+0x6a4>)
 800c1c2:	4293      	cmp	r3, r2
 800c1c4:	d130      	bne.n	800c228 <UART_SetConfig+0x534>
 800c1c6:	4b72      	ldr	r3, [pc, #456]	@ (800c390 <UART_SetConfig+0x69c>)
 800c1c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c1ca:	f003 0307 	and.w	r3, r3, #7
 800c1ce:	2b05      	cmp	r3, #5
 800c1d0:	d826      	bhi.n	800c220 <UART_SetConfig+0x52c>
 800c1d2:	a201      	add	r2, pc, #4	@ (adr r2, 800c1d8 <UART_SetConfig+0x4e4>)
 800c1d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1d8:	0800c1f1 	.word	0x0800c1f1
 800c1dc:	0800c1f9 	.word	0x0800c1f9
 800c1e0:	0800c201 	.word	0x0800c201
 800c1e4:	0800c209 	.word	0x0800c209
 800c1e8:	0800c211 	.word	0x0800c211
 800c1ec:	0800c219 	.word	0x0800c219
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1f6:	e050      	b.n	800c29a <UART_SetConfig+0x5a6>
 800c1f8:	2304      	movs	r3, #4
 800c1fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1fe:	e04c      	b.n	800c29a <UART_SetConfig+0x5a6>
 800c200:	2308      	movs	r3, #8
 800c202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c206:	e048      	b.n	800c29a <UART_SetConfig+0x5a6>
 800c208:	2310      	movs	r3, #16
 800c20a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c20e:	e044      	b.n	800c29a <UART_SetConfig+0x5a6>
 800c210:	2320      	movs	r3, #32
 800c212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c216:	e040      	b.n	800c29a <UART_SetConfig+0x5a6>
 800c218:	2340      	movs	r3, #64	@ 0x40
 800c21a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c21e:	e03c      	b.n	800c29a <UART_SetConfig+0x5a6>
 800c220:	2380      	movs	r3, #128	@ 0x80
 800c222:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c226:	e038      	b.n	800c29a <UART_SetConfig+0x5a6>
 800c228:	697b      	ldr	r3, [r7, #20]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	4a5b      	ldr	r2, [pc, #364]	@ (800c39c <UART_SetConfig+0x6a8>)
 800c22e:	4293      	cmp	r3, r2
 800c230:	d130      	bne.n	800c294 <UART_SetConfig+0x5a0>
 800c232:	4b57      	ldr	r3, [pc, #348]	@ (800c390 <UART_SetConfig+0x69c>)
 800c234:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c236:	f003 0307 	and.w	r3, r3, #7
 800c23a:	2b05      	cmp	r3, #5
 800c23c:	d826      	bhi.n	800c28c <UART_SetConfig+0x598>
 800c23e:	a201      	add	r2, pc, #4	@ (adr r2, 800c244 <UART_SetConfig+0x550>)
 800c240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c244:	0800c25d 	.word	0x0800c25d
 800c248:	0800c265 	.word	0x0800c265
 800c24c:	0800c26d 	.word	0x0800c26d
 800c250:	0800c275 	.word	0x0800c275
 800c254:	0800c27d 	.word	0x0800c27d
 800c258:	0800c285 	.word	0x0800c285
 800c25c:	2302      	movs	r3, #2
 800c25e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c262:	e01a      	b.n	800c29a <UART_SetConfig+0x5a6>
 800c264:	2304      	movs	r3, #4
 800c266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c26a:	e016      	b.n	800c29a <UART_SetConfig+0x5a6>
 800c26c:	2308      	movs	r3, #8
 800c26e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c272:	e012      	b.n	800c29a <UART_SetConfig+0x5a6>
 800c274:	2310      	movs	r3, #16
 800c276:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c27a:	e00e      	b.n	800c29a <UART_SetConfig+0x5a6>
 800c27c:	2320      	movs	r3, #32
 800c27e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c282:	e00a      	b.n	800c29a <UART_SetConfig+0x5a6>
 800c284:	2340      	movs	r3, #64	@ 0x40
 800c286:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c28a:	e006      	b.n	800c29a <UART_SetConfig+0x5a6>
 800c28c:	2380      	movs	r3, #128	@ 0x80
 800c28e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c292:	e002      	b.n	800c29a <UART_SetConfig+0x5a6>
 800c294:	2380      	movs	r3, #128	@ 0x80
 800c296:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c29a:	697b      	ldr	r3, [r7, #20]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	4a3f      	ldr	r2, [pc, #252]	@ (800c39c <UART_SetConfig+0x6a8>)
 800c2a0:	4293      	cmp	r3, r2
 800c2a2:	f040 80f8 	bne.w	800c496 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c2a6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c2aa:	2b20      	cmp	r3, #32
 800c2ac:	dc46      	bgt.n	800c33c <UART_SetConfig+0x648>
 800c2ae:	2b02      	cmp	r3, #2
 800c2b0:	f2c0 8082 	blt.w	800c3b8 <UART_SetConfig+0x6c4>
 800c2b4:	3b02      	subs	r3, #2
 800c2b6:	2b1e      	cmp	r3, #30
 800c2b8:	d87e      	bhi.n	800c3b8 <UART_SetConfig+0x6c4>
 800c2ba:	a201      	add	r2, pc, #4	@ (adr r2, 800c2c0 <UART_SetConfig+0x5cc>)
 800c2bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2c0:	0800c343 	.word	0x0800c343
 800c2c4:	0800c3b9 	.word	0x0800c3b9
 800c2c8:	0800c34b 	.word	0x0800c34b
 800c2cc:	0800c3b9 	.word	0x0800c3b9
 800c2d0:	0800c3b9 	.word	0x0800c3b9
 800c2d4:	0800c3b9 	.word	0x0800c3b9
 800c2d8:	0800c35b 	.word	0x0800c35b
 800c2dc:	0800c3b9 	.word	0x0800c3b9
 800c2e0:	0800c3b9 	.word	0x0800c3b9
 800c2e4:	0800c3b9 	.word	0x0800c3b9
 800c2e8:	0800c3b9 	.word	0x0800c3b9
 800c2ec:	0800c3b9 	.word	0x0800c3b9
 800c2f0:	0800c3b9 	.word	0x0800c3b9
 800c2f4:	0800c3b9 	.word	0x0800c3b9
 800c2f8:	0800c36b 	.word	0x0800c36b
 800c2fc:	0800c3b9 	.word	0x0800c3b9
 800c300:	0800c3b9 	.word	0x0800c3b9
 800c304:	0800c3b9 	.word	0x0800c3b9
 800c308:	0800c3b9 	.word	0x0800c3b9
 800c30c:	0800c3b9 	.word	0x0800c3b9
 800c310:	0800c3b9 	.word	0x0800c3b9
 800c314:	0800c3b9 	.word	0x0800c3b9
 800c318:	0800c3b9 	.word	0x0800c3b9
 800c31c:	0800c3b9 	.word	0x0800c3b9
 800c320:	0800c3b9 	.word	0x0800c3b9
 800c324:	0800c3b9 	.word	0x0800c3b9
 800c328:	0800c3b9 	.word	0x0800c3b9
 800c32c:	0800c3b9 	.word	0x0800c3b9
 800c330:	0800c3b9 	.word	0x0800c3b9
 800c334:	0800c3b9 	.word	0x0800c3b9
 800c338:	0800c3ab 	.word	0x0800c3ab
 800c33c:	2b40      	cmp	r3, #64	@ 0x40
 800c33e:	d037      	beq.n	800c3b0 <UART_SetConfig+0x6bc>
 800c340:	e03a      	b.n	800c3b8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c342:	f7fe f891 	bl	800a468 <HAL_RCCEx_GetD3PCLK1Freq>
 800c346:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c348:	e03c      	b.n	800c3c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c34a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c34e:	4618      	mov	r0, r3
 800c350:	f7fe f8a0 	bl	800a494 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c356:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c358:	e034      	b.n	800c3c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c35a:	f107 0318 	add.w	r3, r7, #24
 800c35e:	4618      	mov	r0, r3
 800c360:	f7fe f9ec 	bl	800a73c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c364:	69fb      	ldr	r3, [r7, #28]
 800c366:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c368:	e02c      	b.n	800c3c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c36a:	4b09      	ldr	r3, [pc, #36]	@ (800c390 <UART_SetConfig+0x69c>)
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	f003 0320 	and.w	r3, r3, #32
 800c372:	2b00      	cmp	r3, #0
 800c374:	d016      	beq.n	800c3a4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c376:	4b06      	ldr	r3, [pc, #24]	@ (800c390 <UART_SetConfig+0x69c>)
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	08db      	lsrs	r3, r3, #3
 800c37c:	f003 0303 	and.w	r3, r3, #3
 800c380:	4a07      	ldr	r2, [pc, #28]	@ (800c3a0 <UART_SetConfig+0x6ac>)
 800c382:	fa22 f303 	lsr.w	r3, r2, r3
 800c386:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c388:	e01c      	b.n	800c3c4 <UART_SetConfig+0x6d0>
 800c38a:	bf00      	nop
 800c38c:	40011400 	.word	0x40011400
 800c390:	58024400 	.word	0x58024400
 800c394:	40007800 	.word	0x40007800
 800c398:	40007c00 	.word	0x40007c00
 800c39c:	58000c00 	.word	0x58000c00
 800c3a0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800c3a4:	4b9d      	ldr	r3, [pc, #628]	@ (800c61c <UART_SetConfig+0x928>)
 800c3a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c3a8:	e00c      	b.n	800c3c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c3aa:	4b9d      	ldr	r3, [pc, #628]	@ (800c620 <UART_SetConfig+0x92c>)
 800c3ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c3ae:	e009      	b.n	800c3c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c3b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c3b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c3b6:	e005      	b.n	800c3c4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c3bc:	2301      	movs	r3, #1
 800c3be:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c3c2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c3c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	f000 81de 	beq.w	800c788 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c3cc:	697b      	ldr	r3, [r7, #20]
 800c3ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3d0:	4a94      	ldr	r2, [pc, #592]	@ (800c624 <UART_SetConfig+0x930>)
 800c3d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c3d6:	461a      	mov	r2, r3
 800c3d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c3da:	fbb3 f3f2 	udiv	r3, r3, r2
 800c3de:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c3e0:	697b      	ldr	r3, [r7, #20]
 800c3e2:	685a      	ldr	r2, [r3, #4]
 800c3e4:	4613      	mov	r3, r2
 800c3e6:	005b      	lsls	r3, r3, #1
 800c3e8:	4413      	add	r3, r2
 800c3ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c3ec:	429a      	cmp	r2, r3
 800c3ee:	d305      	bcc.n	800c3fc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c3f0:	697b      	ldr	r3, [r7, #20]
 800c3f2:	685b      	ldr	r3, [r3, #4]
 800c3f4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c3f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c3f8:	429a      	cmp	r2, r3
 800c3fa:	d903      	bls.n	800c404 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800c3fc:	2301      	movs	r3, #1
 800c3fe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c402:	e1c1      	b.n	800c788 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c404:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c406:	2200      	movs	r2, #0
 800c408:	60bb      	str	r3, [r7, #8]
 800c40a:	60fa      	str	r2, [r7, #12]
 800c40c:	697b      	ldr	r3, [r7, #20]
 800c40e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c410:	4a84      	ldr	r2, [pc, #528]	@ (800c624 <UART_SetConfig+0x930>)
 800c412:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c416:	b29b      	uxth	r3, r3
 800c418:	2200      	movs	r2, #0
 800c41a:	603b      	str	r3, [r7, #0]
 800c41c:	607a      	str	r2, [r7, #4]
 800c41e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c422:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c426:	f7f3 ff57 	bl	80002d8 <__aeabi_uldivmod>
 800c42a:	4602      	mov	r2, r0
 800c42c:	460b      	mov	r3, r1
 800c42e:	4610      	mov	r0, r2
 800c430:	4619      	mov	r1, r3
 800c432:	f04f 0200 	mov.w	r2, #0
 800c436:	f04f 0300 	mov.w	r3, #0
 800c43a:	020b      	lsls	r3, r1, #8
 800c43c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c440:	0202      	lsls	r2, r0, #8
 800c442:	6979      	ldr	r1, [r7, #20]
 800c444:	6849      	ldr	r1, [r1, #4]
 800c446:	0849      	lsrs	r1, r1, #1
 800c448:	2000      	movs	r0, #0
 800c44a:	460c      	mov	r4, r1
 800c44c:	4605      	mov	r5, r0
 800c44e:	eb12 0804 	adds.w	r8, r2, r4
 800c452:	eb43 0905 	adc.w	r9, r3, r5
 800c456:	697b      	ldr	r3, [r7, #20]
 800c458:	685b      	ldr	r3, [r3, #4]
 800c45a:	2200      	movs	r2, #0
 800c45c:	469a      	mov	sl, r3
 800c45e:	4693      	mov	fp, r2
 800c460:	4652      	mov	r2, sl
 800c462:	465b      	mov	r3, fp
 800c464:	4640      	mov	r0, r8
 800c466:	4649      	mov	r1, r9
 800c468:	f7f3 ff36 	bl	80002d8 <__aeabi_uldivmod>
 800c46c:	4602      	mov	r2, r0
 800c46e:	460b      	mov	r3, r1
 800c470:	4613      	mov	r3, r2
 800c472:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c476:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c47a:	d308      	bcc.n	800c48e <UART_SetConfig+0x79a>
 800c47c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c47e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c482:	d204      	bcs.n	800c48e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800c484:	697b      	ldr	r3, [r7, #20]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c48a:	60da      	str	r2, [r3, #12]
 800c48c:	e17c      	b.n	800c788 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800c48e:	2301      	movs	r3, #1
 800c490:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c494:	e178      	b.n	800c788 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c496:	697b      	ldr	r3, [r7, #20]
 800c498:	69db      	ldr	r3, [r3, #28]
 800c49a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c49e:	f040 80c5 	bne.w	800c62c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800c4a2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c4a6:	2b20      	cmp	r3, #32
 800c4a8:	dc48      	bgt.n	800c53c <UART_SetConfig+0x848>
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	db7b      	blt.n	800c5a6 <UART_SetConfig+0x8b2>
 800c4ae:	2b20      	cmp	r3, #32
 800c4b0:	d879      	bhi.n	800c5a6 <UART_SetConfig+0x8b2>
 800c4b2:	a201      	add	r2, pc, #4	@ (adr r2, 800c4b8 <UART_SetConfig+0x7c4>)
 800c4b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4b8:	0800c543 	.word	0x0800c543
 800c4bc:	0800c54b 	.word	0x0800c54b
 800c4c0:	0800c5a7 	.word	0x0800c5a7
 800c4c4:	0800c5a7 	.word	0x0800c5a7
 800c4c8:	0800c553 	.word	0x0800c553
 800c4cc:	0800c5a7 	.word	0x0800c5a7
 800c4d0:	0800c5a7 	.word	0x0800c5a7
 800c4d4:	0800c5a7 	.word	0x0800c5a7
 800c4d8:	0800c563 	.word	0x0800c563
 800c4dc:	0800c5a7 	.word	0x0800c5a7
 800c4e0:	0800c5a7 	.word	0x0800c5a7
 800c4e4:	0800c5a7 	.word	0x0800c5a7
 800c4e8:	0800c5a7 	.word	0x0800c5a7
 800c4ec:	0800c5a7 	.word	0x0800c5a7
 800c4f0:	0800c5a7 	.word	0x0800c5a7
 800c4f4:	0800c5a7 	.word	0x0800c5a7
 800c4f8:	0800c573 	.word	0x0800c573
 800c4fc:	0800c5a7 	.word	0x0800c5a7
 800c500:	0800c5a7 	.word	0x0800c5a7
 800c504:	0800c5a7 	.word	0x0800c5a7
 800c508:	0800c5a7 	.word	0x0800c5a7
 800c50c:	0800c5a7 	.word	0x0800c5a7
 800c510:	0800c5a7 	.word	0x0800c5a7
 800c514:	0800c5a7 	.word	0x0800c5a7
 800c518:	0800c5a7 	.word	0x0800c5a7
 800c51c:	0800c5a7 	.word	0x0800c5a7
 800c520:	0800c5a7 	.word	0x0800c5a7
 800c524:	0800c5a7 	.word	0x0800c5a7
 800c528:	0800c5a7 	.word	0x0800c5a7
 800c52c:	0800c5a7 	.word	0x0800c5a7
 800c530:	0800c5a7 	.word	0x0800c5a7
 800c534:	0800c5a7 	.word	0x0800c5a7
 800c538:	0800c599 	.word	0x0800c599
 800c53c:	2b40      	cmp	r3, #64	@ 0x40
 800c53e:	d02e      	beq.n	800c59e <UART_SetConfig+0x8aa>
 800c540:	e031      	b.n	800c5a6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c542:	f7fb ffdb 	bl	80084fc <HAL_RCC_GetPCLK1Freq>
 800c546:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c548:	e033      	b.n	800c5b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c54a:	f7fb ffed 	bl	8008528 <HAL_RCC_GetPCLK2Freq>
 800c54e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c550:	e02f      	b.n	800c5b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c552:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c556:	4618      	mov	r0, r3
 800c558:	f7fd ff9c 	bl	800a494 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c55c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c55e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c560:	e027      	b.n	800c5b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c562:	f107 0318 	add.w	r3, r7, #24
 800c566:	4618      	mov	r0, r3
 800c568:	f7fe f8e8 	bl	800a73c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c56c:	69fb      	ldr	r3, [r7, #28]
 800c56e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c570:	e01f      	b.n	800c5b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c572:	4b2d      	ldr	r3, [pc, #180]	@ (800c628 <UART_SetConfig+0x934>)
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	f003 0320 	and.w	r3, r3, #32
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d009      	beq.n	800c592 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c57e:	4b2a      	ldr	r3, [pc, #168]	@ (800c628 <UART_SetConfig+0x934>)
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	08db      	lsrs	r3, r3, #3
 800c584:	f003 0303 	and.w	r3, r3, #3
 800c588:	4a24      	ldr	r2, [pc, #144]	@ (800c61c <UART_SetConfig+0x928>)
 800c58a:	fa22 f303 	lsr.w	r3, r2, r3
 800c58e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c590:	e00f      	b.n	800c5b2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c592:	4b22      	ldr	r3, [pc, #136]	@ (800c61c <UART_SetConfig+0x928>)
 800c594:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c596:	e00c      	b.n	800c5b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c598:	4b21      	ldr	r3, [pc, #132]	@ (800c620 <UART_SetConfig+0x92c>)
 800c59a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c59c:	e009      	b.n	800c5b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c59e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c5a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c5a4:	e005      	b.n	800c5b2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c5aa:	2301      	movs	r3, #1
 800c5ac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c5b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c5b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	f000 80e7 	beq.w	800c788 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c5ba:	697b      	ldr	r3, [r7, #20]
 800c5bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5be:	4a19      	ldr	r2, [pc, #100]	@ (800c624 <UART_SetConfig+0x930>)
 800c5c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c5c4:	461a      	mov	r2, r3
 800c5c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5c8:	fbb3 f3f2 	udiv	r3, r3, r2
 800c5cc:	005a      	lsls	r2, r3, #1
 800c5ce:	697b      	ldr	r3, [r7, #20]
 800c5d0:	685b      	ldr	r3, [r3, #4]
 800c5d2:	085b      	lsrs	r3, r3, #1
 800c5d4:	441a      	add	r2, r3
 800c5d6:	697b      	ldr	r3, [r7, #20]
 800c5d8:	685b      	ldr	r3, [r3, #4]
 800c5da:	fbb2 f3f3 	udiv	r3, r2, r3
 800c5de:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c5e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5e2:	2b0f      	cmp	r3, #15
 800c5e4:	d916      	bls.n	800c614 <UART_SetConfig+0x920>
 800c5e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c5ec:	d212      	bcs.n	800c614 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c5ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5f0:	b29b      	uxth	r3, r3
 800c5f2:	f023 030f 	bic.w	r3, r3, #15
 800c5f6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c5f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5fa:	085b      	lsrs	r3, r3, #1
 800c5fc:	b29b      	uxth	r3, r3
 800c5fe:	f003 0307 	and.w	r3, r3, #7
 800c602:	b29a      	uxth	r2, r3
 800c604:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c606:	4313      	orrs	r3, r2
 800c608:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800c60a:	697b      	ldr	r3, [r7, #20]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800c610:	60da      	str	r2, [r3, #12]
 800c612:	e0b9      	b.n	800c788 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c614:	2301      	movs	r3, #1
 800c616:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c61a:	e0b5      	b.n	800c788 <UART_SetConfig+0xa94>
 800c61c:	03d09000 	.word	0x03d09000
 800c620:	003d0900 	.word	0x003d0900
 800c624:	0800ceb0 	.word	0x0800ceb0
 800c628:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800c62c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c630:	2b20      	cmp	r3, #32
 800c632:	dc49      	bgt.n	800c6c8 <UART_SetConfig+0x9d4>
 800c634:	2b00      	cmp	r3, #0
 800c636:	db7c      	blt.n	800c732 <UART_SetConfig+0xa3e>
 800c638:	2b20      	cmp	r3, #32
 800c63a:	d87a      	bhi.n	800c732 <UART_SetConfig+0xa3e>
 800c63c:	a201      	add	r2, pc, #4	@ (adr r2, 800c644 <UART_SetConfig+0x950>)
 800c63e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c642:	bf00      	nop
 800c644:	0800c6cf 	.word	0x0800c6cf
 800c648:	0800c6d7 	.word	0x0800c6d7
 800c64c:	0800c733 	.word	0x0800c733
 800c650:	0800c733 	.word	0x0800c733
 800c654:	0800c6df 	.word	0x0800c6df
 800c658:	0800c733 	.word	0x0800c733
 800c65c:	0800c733 	.word	0x0800c733
 800c660:	0800c733 	.word	0x0800c733
 800c664:	0800c6ef 	.word	0x0800c6ef
 800c668:	0800c733 	.word	0x0800c733
 800c66c:	0800c733 	.word	0x0800c733
 800c670:	0800c733 	.word	0x0800c733
 800c674:	0800c733 	.word	0x0800c733
 800c678:	0800c733 	.word	0x0800c733
 800c67c:	0800c733 	.word	0x0800c733
 800c680:	0800c733 	.word	0x0800c733
 800c684:	0800c6ff 	.word	0x0800c6ff
 800c688:	0800c733 	.word	0x0800c733
 800c68c:	0800c733 	.word	0x0800c733
 800c690:	0800c733 	.word	0x0800c733
 800c694:	0800c733 	.word	0x0800c733
 800c698:	0800c733 	.word	0x0800c733
 800c69c:	0800c733 	.word	0x0800c733
 800c6a0:	0800c733 	.word	0x0800c733
 800c6a4:	0800c733 	.word	0x0800c733
 800c6a8:	0800c733 	.word	0x0800c733
 800c6ac:	0800c733 	.word	0x0800c733
 800c6b0:	0800c733 	.word	0x0800c733
 800c6b4:	0800c733 	.word	0x0800c733
 800c6b8:	0800c733 	.word	0x0800c733
 800c6bc:	0800c733 	.word	0x0800c733
 800c6c0:	0800c733 	.word	0x0800c733
 800c6c4:	0800c725 	.word	0x0800c725
 800c6c8:	2b40      	cmp	r3, #64	@ 0x40
 800c6ca:	d02e      	beq.n	800c72a <UART_SetConfig+0xa36>
 800c6cc:	e031      	b.n	800c732 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c6ce:	f7fb ff15 	bl	80084fc <HAL_RCC_GetPCLK1Freq>
 800c6d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c6d4:	e033      	b.n	800c73e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c6d6:	f7fb ff27 	bl	8008528 <HAL_RCC_GetPCLK2Freq>
 800c6da:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c6dc:	e02f      	b.n	800c73e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c6de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	f7fd fed6 	bl	800a494 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c6e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c6ec:	e027      	b.n	800c73e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c6ee:	f107 0318 	add.w	r3, r7, #24
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	f7fe f822 	bl	800a73c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c6f8:	69fb      	ldr	r3, [r7, #28]
 800c6fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c6fc:	e01f      	b.n	800c73e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c6fe:	4b2d      	ldr	r3, [pc, #180]	@ (800c7b4 <UART_SetConfig+0xac0>)
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	f003 0320 	and.w	r3, r3, #32
 800c706:	2b00      	cmp	r3, #0
 800c708:	d009      	beq.n	800c71e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c70a:	4b2a      	ldr	r3, [pc, #168]	@ (800c7b4 <UART_SetConfig+0xac0>)
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	08db      	lsrs	r3, r3, #3
 800c710:	f003 0303 	and.w	r3, r3, #3
 800c714:	4a28      	ldr	r2, [pc, #160]	@ (800c7b8 <UART_SetConfig+0xac4>)
 800c716:	fa22 f303 	lsr.w	r3, r2, r3
 800c71a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c71c:	e00f      	b.n	800c73e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800c71e:	4b26      	ldr	r3, [pc, #152]	@ (800c7b8 <UART_SetConfig+0xac4>)
 800c720:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c722:	e00c      	b.n	800c73e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c724:	4b25      	ldr	r3, [pc, #148]	@ (800c7bc <UART_SetConfig+0xac8>)
 800c726:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c728:	e009      	b.n	800c73e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c72a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c72e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c730:	e005      	b.n	800c73e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800c732:	2300      	movs	r3, #0
 800c734:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c736:	2301      	movs	r3, #1
 800c738:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c73c:	bf00      	nop
    }

    if (pclk != 0U)
 800c73e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c740:	2b00      	cmp	r3, #0
 800c742:	d021      	beq.n	800c788 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c744:	697b      	ldr	r3, [r7, #20]
 800c746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c748:	4a1d      	ldr	r2, [pc, #116]	@ (800c7c0 <UART_SetConfig+0xacc>)
 800c74a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c74e:	461a      	mov	r2, r3
 800c750:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c752:	fbb3 f2f2 	udiv	r2, r3, r2
 800c756:	697b      	ldr	r3, [r7, #20]
 800c758:	685b      	ldr	r3, [r3, #4]
 800c75a:	085b      	lsrs	r3, r3, #1
 800c75c:	441a      	add	r2, r3
 800c75e:	697b      	ldr	r3, [r7, #20]
 800c760:	685b      	ldr	r3, [r3, #4]
 800c762:	fbb2 f3f3 	udiv	r3, r2, r3
 800c766:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c76a:	2b0f      	cmp	r3, #15
 800c76c:	d909      	bls.n	800c782 <UART_SetConfig+0xa8e>
 800c76e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c770:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c774:	d205      	bcs.n	800c782 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c778:	b29a      	uxth	r2, r3
 800c77a:	697b      	ldr	r3, [r7, #20]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	60da      	str	r2, [r3, #12]
 800c780:	e002      	b.n	800c788 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c782:	2301      	movs	r3, #1
 800c784:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c788:	697b      	ldr	r3, [r7, #20]
 800c78a:	2201      	movs	r2, #1
 800c78c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800c790:	697b      	ldr	r3, [r7, #20]
 800c792:	2201      	movs	r2, #1
 800c794:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c798:	697b      	ldr	r3, [r7, #20]
 800c79a:	2200      	movs	r2, #0
 800c79c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c79e:	697b      	ldr	r3, [r7, #20]
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c7a4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	3748      	adds	r7, #72	@ 0x48
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c7b2:	bf00      	nop
 800c7b4:	58024400 	.word	0x58024400
 800c7b8:	03d09000 	.word	0x03d09000
 800c7bc:	003d0900 	.word	0x003d0900
 800c7c0:	0800ceb0 	.word	0x0800ceb0

0800c7c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c7c4:	b480      	push	{r7}
 800c7c6:	b083      	sub	sp, #12
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c7d0:	f003 0308 	and.w	r3, r3, #8
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d00a      	beq.n	800c7ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	685b      	ldr	r3, [r3, #4]
 800c7de:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	430a      	orrs	r2, r1
 800c7ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c7f2:	f003 0301 	and.w	r3, r3, #1
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d00a      	beq.n	800c810 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	685b      	ldr	r3, [r3, #4]
 800c800:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	430a      	orrs	r2, r1
 800c80e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c814:	f003 0302 	and.w	r3, r3, #2
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d00a      	beq.n	800c832 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	685b      	ldr	r3, [r3, #4]
 800c822:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	430a      	orrs	r2, r1
 800c830:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c836:	f003 0304 	and.w	r3, r3, #4
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d00a      	beq.n	800c854 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	685b      	ldr	r3, [r3, #4]
 800c844:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	430a      	orrs	r2, r1
 800c852:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c858:	f003 0310 	and.w	r3, r3, #16
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d00a      	beq.n	800c876 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	689b      	ldr	r3, [r3, #8]
 800c866:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	430a      	orrs	r2, r1
 800c874:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c87a:	f003 0320 	and.w	r3, r3, #32
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d00a      	beq.n	800c898 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	689b      	ldr	r3, [r3, #8]
 800c888:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	430a      	orrs	r2, r1
 800c896:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c89c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d01a      	beq.n	800c8da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	685b      	ldr	r3, [r3, #4]
 800c8aa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	430a      	orrs	r2, r1
 800c8b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c8be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c8c2:	d10a      	bne.n	800c8da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	685b      	ldr	r3, [r3, #4]
 800c8ca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	430a      	orrs	r2, r1
 800c8d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d00a      	beq.n	800c8fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	685b      	ldr	r3, [r3, #4]
 800c8ec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	430a      	orrs	r2, r1
 800c8fa:	605a      	str	r2, [r3, #4]
  }
}
 800c8fc:	bf00      	nop
 800c8fe:	370c      	adds	r7, #12
 800c900:	46bd      	mov	sp, r7
 800c902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c906:	4770      	bx	lr

0800c908 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c908:	b580      	push	{r7, lr}
 800c90a:	b098      	sub	sp, #96	@ 0x60
 800c90c:	af02      	add	r7, sp, #8
 800c90e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	2200      	movs	r2, #0
 800c914:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c918:	f7f6 fcde 	bl	80032d8 <HAL_GetTick>
 800c91c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	f003 0308 	and.w	r3, r3, #8
 800c928:	2b08      	cmp	r3, #8
 800c92a:	d12f      	bne.n	800c98c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c92c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c930:	9300      	str	r3, [sp, #0]
 800c932:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c934:	2200      	movs	r2, #0
 800c936:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c93a:	6878      	ldr	r0, [r7, #4]
 800c93c:	f000 f88e 	bl	800ca5c <UART_WaitOnFlagUntilTimeout>
 800c940:	4603      	mov	r3, r0
 800c942:	2b00      	cmp	r3, #0
 800c944:	d022      	beq.n	800c98c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c94c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c94e:	e853 3f00 	ldrex	r3, [r3]
 800c952:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c954:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c956:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c95a:	653b      	str	r3, [r7, #80]	@ 0x50
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	461a      	mov	r2, r3
 800c962:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c964:	647b      	str	r3, [r7, #68]	@ 0x44
 800c966:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c968:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c96a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c96c:	e841 2300 	strex	r3, r2, [r1]
 800c970:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c972:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c974:	2b00      	cmp	r3, #0
 800c976:	d1e6      	bne.n	800c946 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	2220      	movs	r2, #32
 800c97c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	2200      	movs	r2, #0
 800c984:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c988:	2303      	movs	r3, #3
 800c98a:	e063      	b.n	800ca54 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	f003 0304 	and.w	r3, r3, #4
 800c996:	2b04      	cmp	r3, #4
 800c998:	d149      	bne.n	800ca2e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c99a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c99e:	9300      	str	r3, [sp, #0]
 800c9a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c9a2:	2200      	movs	r2, #0
 800c9a4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c9a8:	6878      	ldr	r0, [r7, #4]
 800c9aa:	f000 f857 	bl	800ca5c <UART_WaitOnFlagUntilTimeout>
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d03c      	beq.n	800ca2e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9bc:	e853 3f00 	ldrex	r3, [r3]
 800c9c0:	623b      	str	r3, [r7, #32]
   return(result);
 800c9c2:	6a3b      	ldr	r3, [r7, #32]
 800c9c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c9c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	461a      	mov	r2, r3
 800c9d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c9d2:	633b      	str	r3, [r7, #48]	@ 0x30
 800c9d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c9d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c9da:	e841 2300 	strex	r3, r2, [r1]
 800c9de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c9e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d1e6      	bne.n	800c9b4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	3308      	adds	r3, #8
 800c9ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9ee:	693b      	ldr	r3, [r7, #16]
 800c9f0:	e853 3f00 	ldrex	r3, [r3]
 800c9f4:	60fb      	str	r3, [r7, #12]
   return(result);
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	f023 0301 	bic.w	r3, r3, #1
 800c9fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	3308      	adds	r3, #8
 800ca04:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ca06:	61fa      	str	r2, [r7, #28]
 800ca08:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca0a:	69b9      	ldr	r1, [r7, #24]
 800ca0c:	69fa      	ldr	r2, [r7, #28]
 800ca0e:	e841 2300 	strex	r3, r2, [r1]
 800ca12:	617b      	str	r3, [r7, #20]
   return(result);
 800ca14:	697b      	ldr	r3, [r7, #20]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d1e5      	bne.n	800c9e6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	2220      	movs	r2, #32
 800ca1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	2200      	movs	r2, #0
 800ca26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ca2a:	2303      	movs	r3, #3
 800ca2c:	e012      	b.n	800ca54 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	2220      	movs	r2, #32
 800ca32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	2220      	movs	r2, #32
 800ca3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	2200      	movs	r2, #0
 800ca42:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	2200      	movs	r2, #0
 800ca48:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ca52:	2300      	movs	r3, #0
}
 800ca54:	4618      	mov	r0, r3
 800ca56:	3758      	adds	r7, #88	@ 0x58
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	bd80      	pop	{r7, pc}

0800ca5c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	b084      	sub	sp, #16
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	60f8      	str	r0, [r7, #12]
 800ca64:	60b9      	str	r1, [r7, #8]
 800ca66:	603b      	str	r3, [r7, #0]
 800ca68:	4613      	mov	r3, r2
 800ca6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ca6c:	e04f      	b.n	800cb0e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ca6e:	69bb      	ldr	r3, [r7, #24]
 800ca70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca74:	d04b      	beq.n	800cb0e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ca76:	f7f6 fc2f 	bl	80032d8 <HAL_GetTick>
 800ca7a:	4602      	mov	r2, r0
 800ca7c:	683b      	ldr	r3, [r7, #0]
 800ca7e:	1ad3      	subs	r3, r2, r3
 800ca80:	69ba      	ldr	r2, [r7, #24]
 800ca82:	429a      	cmp	r2, r3
 800ca84:	d302      	bcc.n	800ca8c <UART_WaitOnFlagUntilTimeout+0x30>
 800ca86:	69bb      	ldr	r3, [r7, #24]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d101      	bne.n	800ca90 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ca8c:	2303      	movs	r3, #3
 800ca8e:	e04e      	b.n	800cb2e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	f003 0304 	and.w	r3, r3, #4
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d037      	beq.n	800cb0e <UART_WaitOnFlagUntilTimeout+0xb2>
 800ca9e:	68bb      	ldr	r3, [r7, #8]
 800caa0:	2b80      	cmp	r3, #128	@ 0x80
 800caa2:	d034      	beq.n	800cb0e <UART_WaitOnFlagUntilTimeout+0xb2>
 800caa4:	68bb      	ldr	r3, [r7, #8]
 800caa6:	2b40      	cmp	r3, #64	@ 0x40
 800caa8:	d031      	beq.n	800cb0e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	69db      	ldr	r3, [r3, #28]
 800cab0:	f003 0308 	and.w	r3, r3, #8
 800cab4:	2b08      	cmp	r3, #8
 800cab6:	d110      	bne.n	800cada <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	2208      	movs	r2, #8
 800cabe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cac0:	68f8      	ldr	r0, [r7, #12]
 800cac2:	f000 f839 	bl	800cb38 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	2208      	movs	r2, #8
 800caca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	2200      	movs	r2, #0
 800cad2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800cad6:	2301      	movs	r3, #1
 800cad8:	e029      	b.n	800cb2e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	69db      	ldr	r3, [r3, #28]
 800cae0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cae4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cae8:	d111      	bne.n	800cb0e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800caf2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800caf4:	68f8      	ldr	r0, [r7, #12]
 800caf6:	f000 f81f 	bl	800cb38 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	2220      	movs	r2, #32
 800cafe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	2200      	movs	r2, #0
 800cb06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800cb0a:	2303      	movs	r3, #3
 800cb0c:	e00f      	b.n	800cb2e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	69da      	ldr	r2, [r3, #28]
 800cb14:	68bb      	ldr	r3, [r7, #8]
 800cb16:	4013      	ands	r3, r2
 800cb18:	68ba      	ldr	r2, [r7, #8]
 800cb1a:	429a      	cmp	r2, r3
 800cb1c:	bf0c      	ite	eq
 800cb1e:	2301      	moveq	r3, #1
 800cb20:	2300      	movne	r3, #0
 800cb22:	b2db      	uxtb	r3, r3
 800cb24:	461a      	mov	r2, r3
 800cb26:	79fb      	ldrb	r3, [r7, #7]
 800cb28:	429a      	cmp	r2, r3
 800cb2a:	d0a0      	beq.n	800ca6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cb2c:	2300      	movs	r3, #0
}
 800cb2e:	4618      	mov	r0, r3
 800cb30:	3710      	adds	r7, #16
 800cb32:	46bd      	mov	sp, r7
 800cb34:	bd80      	pop	{r7, pc}
	...

0800cb38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cb38:	b480      	push	{r7}
 800cb3a:	b095      	sub	sp, #84	@ 0x54
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb48:	e853 3f00 	ldrex	r3, [r3]
 800cb4c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cb4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb50:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cb54:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	461a      	mov	r2, r3
 800cb5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cb5e:	643b      	str	r3, [r7, #64]	@ 0x40
 800cb60:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb62:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cb64:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cb66:	e841 2300 	strex	r3, r2, [r1]
 800cb6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cb6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d1e6      	bne.n	800cb40 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	3308      	adds	r3, #8
 800cb78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb7a:	6a3b      	ldr	r3, [r7, #32]
 800cb7c:	e853 3f00 	ldrex	r3, [r3]
 800cb80:	61fb      	str	r3, [r7, #28]
   return(result);
 800cb82:	69fa      	ldr	r2, [r7, #28]
 800cb84:	4b1e      	ldr	r3, [pc, #120]	@ (800cc00 <UART_EndRxTransfer+0xc8>)
 800cb86:	4013      	ands	r3, r2
 800cb88:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	3308      	adds	r3, #8
 800cb90:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cb92:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cb94:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb96:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cb98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cb9a:	e841 2300 	strex	r3, r2, [r1]
 800cb9e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d1e5      	bne.n	800cb72 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cbaa:	2b01      	cmp	r3, #1
 800cbac:	d118      	bne.n	800cbe0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	e853 3f00 	ldrex	r3, [r3]
 800cbba:	60bb      	str	r3, [r7, #8]
   return(result);
 800cbbc:	68bb      	ldr	r3, [r7, #8]
 800cbbe:	f023 0310 	bic.w	r3, r3, #16
 800cbc2:	647b      	str	r3, [r7, #68]	@ 0x44
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	461a      	mov	r2, r3
 800cbca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cbcc:	61bb      	str	r3, [r7, #24]
 800cbce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbd0:	6979      	ldr	r1, [r7, #20]
 800cbd2:	69ba      	ldr	r2, [r7, #24]
 800cbd4:	e841 2300 	strex	r3, r2, [r1]
 800cbd8:	613b      	str	r3, [r7, #16]
   return(result);
 800cbda:	693b      	ldr	r3, [r7, #16]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d1e6      	bne.n	800cbae <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	2220      	movs	r2, #32
 800cbe4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	2200      	movs	r2, #0
 800cbec:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	2200      	movs	r2, #0
 800cbf2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800cbf4:	bf00      	nop
 800cbf6:	3754      	adds	r7, #84	@ 0x54
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbfe:	4770      	bx	lr
 800cc00:	effffffe 	.word	0xeffffffe

0800cc04 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cc04:	b480      	push	{r7}
 800cc06:	b085      	sub	sp, #20
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cc12:	2b01      	cmp	r3, #1
 800cc14:	d101      	bne.n	800cc1a <HAL_UARTEx_DisableFifoMode+0x16>
 800cc16:	2302      	movs	r3, #2
 800cc18:	e027      	b.n	800cc6a <HAL_UARTEx_DisableFifoMode+0x66>
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	2201      	movs	r2, #1
 800cc1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	2224      	movs	r2, #36	@ 0x24
 800cc26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	681a      	ldr	r2, [r3, #0]
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	f022 0201 	bic.w	r2, r2, #1
 800cc40:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800cc48:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	2200      	movs	r2, #0
 800cc4e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	68fa      	ldr	r2, [r7, #12]
 800cc56:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	2220      	movs	r2, #32
 800cc5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	2200      	movs	r2, #0
 800cc64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cc68:	2300      	movs	r3, #0
}
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	3714      	adds	r7, #20
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc74:	4770      	bx	lr

0800cc76 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cc76:	b580      	push	{r7, lr}
 800cc78:	b084      	sub	sp, #16
 800cc7a:	af00      	add	r7, sp, #0
 800cc7c:	6078      	str	r0, [r7, #4]
 800cc7e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cc86:	2b01      	cmp	r3, #1
 800cc88:	d101      	bne.n	800cc8e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cc8a:	2302      	movs	r3, #2
 800cc8c:	e02d      	b.n	800ccea <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	2201      	movs	r2, #1
 800cc92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	2224      	movs	r2, #36	@ 0x24
 800cc9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	681a      	ldr	r2, [r3, #0]
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	f022 0201 	bic.w	r2, r2, #1
 800ccb4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	689b      	ldr	r3, [r3, #8]
 800ccbc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	683a      	ldr	r2, [r7, #0]
 800ccc6:	430a      	orrs	r2, r1
 800ccc8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ccca:	6878      	ldr	r0, [r7, #4]
 800cccc:	f000 f850 	bl	800cd70 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	68fa      	ldr	r2, [r7, #12]
 800ccd6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	2220      	movs	r2, #32
 800ccdc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	2200      	movs	r2, #0
 800cce4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cce8:	2300      	movs	r3, #0
}
 800ccea:	4618      	mov	r0, r3
 800ccec:	3710      	adds	r7, #16
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	bd80      	pop	{r7, pc}

0800ccf2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ccf2:	b580      	push	{r7, lr}
 800ccf4:	b084      	sub	sp, #16
 800ccf6:	af00      	add	r7, sp, #0
 800ccf8:	6078      	str	r0, [r7, #4]
 800ccfa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cd02:	2b01      	cmp	r3, #1
 800cd04:	d101      	bne.n	800cd0a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cd06:	2302      	movs	r3, #2
 800cd08:	e02d      	b.n	800cd66 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	2201      	movs	r2, #1
 800cd0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	2224      	movs	r2, #36	@ 0x24
 800cd16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	681a      	ldr	r2, [r3, #0]
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	f022 0201 	bic.w	r2, r2, #1
 800cd30:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	689b      	ldr	r3, [r3, #8]
 800cd38:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	683a      	ldr	r2, [r7, #0]
 800cd42:	430a      	orrs	r2, r1
 800cd44:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cd46:	6878      	ldr	r0, [r7, #4]
 800cd48:	f000 f812 	bl	800cd70 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	68fa      	ldr	r2, [r7, #12]
 800cd52:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	2220      	movs	r2, #32
 800cd58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	2200      	movs	r2, #0
 800cd60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cd64:	2300      	movs	r3, #0
}
 800cd66:	4618      	mov	r0, r3
 800cd68:	3710      	adds	r7, #16
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	bd80      	pop	{r7, pc}
	...

0800cd70 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cd70:	b480      	push	{r7}
 800cd72:	b085      	sub	sp, #20
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d108      	bne.n	800cd92 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	2201      	movs	r2, #1
 800cd84:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	2201      	movs	r2, #1
 800cd8c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cd90:	e031      	b.n	800cdf6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cd92:	2310      	movs	r3, #16
 800cd94:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cd96:	2310      	movs	r3, #16
 800cd98:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	689b      	ldr	r3, [r3, #8]
 800cda0:	0e5b      	lsrs	r3, r3, #25
 800cda2:	b2db      	uxtb	r3, r3
 800cda4:	f003 0307 	and.w	r3, r3, #7
 800cda8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	689b      	ldr	r3, [r3, #8]
 800cdb0:	0f5b      	lsrs	r3, r3, #29
 800cdb2:	b2db      	uxtb	r3, r3
 800cdb4:	f003 0307 	and.w	r3, r3, #7
 800cdb8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cdba:	7bbb      	ldrb	r3, [r7, #14]
 800cdbc:	7b3a      	ldrb	r2, [r7, #12]
 800cdbe:	4911      	ldr	r1, [pc, #68]	@ (800ce04 <UARTEx_SetNbDataToProcess+0x94>)
 800cdc0:	5c8a      	ldrb	r2, [r1, r2]
 800cdc2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cdc6:	7b3a      	ldrb	r2, [r7, #12]
 800cdc8:	490f      	ldr	r1, [pc, #60]	@ (800ce08 <UARTEx_SetNbDataToProcess+0x98>)
 800cdca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cdcc:	fb93 f3f2 	sdiv	r3, r3, r2
 800cdd0:	b29a      	uxth	r2, r3
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cdd8:	7bfb      	ldrb	r3, [r7, #15]
 800cdda:	7b7a      	ldrb	r2, [r7, #13]
 800cddc:	4909      	ldr	r1, [pc, #36]	@ (800ce04 <UARTEx_SetNbDataToProcess+0x94>)
 800cdde:	5c8a      	ldrb	r2, [r1, r2]
 800cde0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cde4:	7b7a      	ldrb	r2, [r7, #13]
 800cde6:	4908      	ldr	r1, [pc, #32]	@ (800ce08 <UARTEx_SetNbDataToProcess+0x98>)
 800cde8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cdea:	fb93 f3f2 	sdiv	r3, r3, r2
 800cdee:	b29a      	uxth	r2, r3
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800cdf6:	bf00      	nop
 800cdf8:	3714      	adds	r7, #20
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce00:	4770      	bx	lr
 800ce02:	bf00      	nop
 800ce04:	0800cec8 	.word	0x0800cec8
 800ce08:	0800ced0 	.word	0x0800ced0

0800ce0c <memset>:
 800ce0c:	4402      	add	r2, r0
 800ce0e:	4603      	mov	r3, r0
 800ce10:	4293      	cmp	r3, r2
 800ce12:	d100      	bne.n	800ce16 <memset+0xa>
 800ce14:	4770      	bx	lr
 800ce16:	f803 1b01 	strb.w	r1, [r3], #1
 800ce1a:	e7f9      	b.n	800ce10 <memset+0x4>

0800ce1c <__libc_init_array>:
 800ce1c:	b570      	push	{r4, r5, r6, lr}
 800ce1e:	4d0d      	ldr	r5, [pc, #52]	@ (800ce54 <__libc_init_array+0x38>)
 800ce20:	4c0d      	ldr	r4, [pc, #52]	@ (800ce58 <__libc_init_array+0x3c>)
 800ce22:	1b64      	subs	r4, r4, r5
 800ce24:	10a4      	asrs	r4, r4, #2
 800ce26:	2600      	movs	r6, #0
 800ce28:	42a6      	cmp	r6, r4
 800ce2a:	d109      	bne.n	800ce40 <__libc_init_array+0x24>
 800ce2c:	4d0b      	ldr	r5, [pc, #44]	@ (800ce5c <__libc_init_array+0x40>)
 800ce2e:	4c0c      	ldr	r4, [pc, #48]	@ (800ce60 <__libc_init_array+0x44>)
 800ce30:	f000 f818 	bl	800ce64 <_init>
 800ce34:	1b64      	subs	r4, r4, r5
 800ce36:	10a4      	asrs	r4, r4, #2
 800ce38:	2600      	movs	r6, #0
 800ce3a:	42a6      	cmp	r6, r4
 800ce3c:	d105      	bne.n	800ce4a <__libc_init_array+0x2e>
 800ce3e:	bd70      	pop	{r4, r5, r6, pc}
 800ce40:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce44:	4798      	blx	r3
 800ce46:	3601      	adds	r6, #1
 800ce48:	e7ee      	b.n	800ce28 <__libc_init_array+0xc>
 800ce4a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce4e:	4798      	blx	r3
 800ce50:	3601      	adds	r6, #1
 800ce52:	e7f2      	b.n	800ce3a <__libc_init_array+0x1e>
 800ce54:	0800cee0 	.word	0x0800cee0
 800ce58:	0800cee0 	.word	0x0800cee0
 800ce5c:	0800cee0 	.word	0x0800cee0
 800ce60:	0800cee4 	.word	0x0800cee4

0800ce64 <_init>:
 800ce64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce66:	bf00      	nop
 800ce68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce6a:	bc08      	pop	{r3}
 800ce6c:	469e      	mov	lr, r3
 800ce6e:	4770      	bx	lr

0800ce70 <_fini>:
 800ce70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce72:	bf00      	nop
 800ce74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce76:	bc08      	pop	{r3}
 800ce78:	469e      	mov	lr, r3
 800ce7a:	4770      	bx	lr
