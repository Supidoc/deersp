
Audio_Matrix_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c808  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  0800caa0  0800caa0  0000daa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cafc  0800cafc  0000e020  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800cafc  0800cafc  0000dafc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cb04  0800cb04  0000e020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cb04  0800cb04  0000db04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cb08  0800cb08  0000db08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  24000000  0800cb0c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d78  24000020  0800cb2c  0000e020  2**5
                  ALLOC
 10 .audiobuffer  00000800  20000000  20000000  0000f000  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  24000d98  24000d98  0000ed98  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0000e020  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bd49  00000000  00000000  0000e04e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003490  00000000  00000000  00029d97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001360  00000000  00000000  0002d228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f2c  00000000  00000000  0002e588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003bd2f  00000000  00000000  0002f4b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001df10  00000000  00000000  0006b1e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00183876  00000000  00000000  000890f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0020c969  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005190  00000000  00000000  0020c9ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  00211b3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000020 	.word	0x24000020
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800ca88 	.word	0x0800ca88

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000024 	.word	0x24000024
 80002d4:	0800ca88 	.word	0x0800ca88

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b988 	b.w	8000600 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	468e      	mov	lr, r1
 8000310:	4604      	mov	r4, r0
 8000312:	4688      	mov	r8, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d962      	bls.n	80003e4 <__udivmoddi4+0xdc>
 800031e:	fab2 f682 	clz	r6, r2
 8000322:	b14e      	cbz	r6, 8000338 <__udivmoddi4+0x30>
 8000324:	f1c6 0320 	rsb	r3, r6, #32
 8000328:	fa01 f806 	lsl.w	r8, r1, r6
 800032c:	fa20 f303 	lsr.w	r3, r0, r3
 8000330:	40b7      	lsls	r7, r6
 8000332:	ea43 0808 	orr.w	r8, r3, r8
 8000336:	40b4      	lsls	r4, r6
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	fbb8 f1fe 	udiv	r1, r8, lr
 8000344:	0c23      	lsrs	r3, r4, #16
 8000346:	fb0e 8811 	mls	r8, lr, r1, r8
 800034a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034e:	fb01 f20c 	mul.w	r2, r1, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d909      	bls.n	800036a <__udivmoddi4+0x62>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f101 30ff 	add.w	r0, r1, #4294967295
 800035c:	f080 80ea 	bcs.w	8000534 <__udivmoddi4+0x22c>
 8000360:	429a      	cmp	r2, r3
 8000362:	f240 80e7 	bls.w	8000534 <__udivmoddi4+0x22c>
 8000366:	3902      	subs	r1, #2
 8000368:	443b      	add	r3, r7
 800036a:	1a9a      	subs	r2, r3, r2
 800036c:	b2a3      	uxth	r3, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800037a:	fb00 fc0c 	mul.w	ip, r0, ip
 800037e:	459c      	cmp	ip, r3
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x8e>
 8000382:	18fb      	adds	r3, r7, r3
 8000384:	f100 32ff 	add.w	r2, r0, #4294967295
 8000388:	f080 80d6 	bcs.w	8000538 <__udivmoddi4+0x230>
 800038c:	459c      	cmp	ip, r3
 800038e:	f240 80d3 	bls.w	8000538 <__udivmoddi4+0x230>
 8000392:	443b      	add	r3, r7
 8000394:	3802      	subs	r0, #2
 8000396:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039a:	eba3 030c 	sub.w	r3, r3, ip
 800039e:	2100      	movs	r1, #0
 80003a0:	b11d      	cbz	r5, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40f3      	lsrs	r3, r6
 80003a4:	2200      	movs	r2, #0
 80003a6:	e9c5 3200 	strd	r3, r2, [r5]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d905      	bls.n	80003be <__udivmoddi4+0xb6>
 80003b2:	b10d      	cbz	r5, 80003b8 <__udivmoddi4+0xb0>
 80003b4:	e9c5 0100 	strd	r0, r1, [r5]
 80003b8:	2100      	movs	r1, #0
 80003ba:	4608      	mov	r0, r1
 80003bc:	e7f5      	b.n	80003aa <__udivmoddi4+0xa2>
 80003be:	fab3 f183 	clz	r1, r3
 80003c2:	2900      	cmp	r1, #0
 80003c4:	d146      	bne.n	8000454 <__udivmoddi4+0x14c>
 80003c6:	4573      	cmp	r3, lr
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0xc8>
 80003ca:	4282      	cmp	r2, r0
 80003cc:	f200 8105 	bhi.w	80005da <__udivmoddi4+0x2d2>
 80003d0:	1a84      	subs	r4, r0, r2
 80003d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	4690      	mov	r8, r2
 80003da:	2d00      	cmp	r5, #0
 80003dc:	d0e5      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003de:	e9c5 4800 	strd	r4, r8, [r5]
 80003e2:	e7e2      	b.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	2a00      	cmp	r2, #0
 80003e6:	f000 8090 	beq.w	800050a <__udivmoddi4+0x202>
 80003ea:	fab2 f682 	clz	r6, r2
 80003ee:	2e00      	cmp	r6, #0
 80003f0:	f040 80a4 	bne.w	800053c <__udivmoddi4+0x234>
 80003f4:	1a8a      	subs	r2, r1, r2
 80003f6:	0c03      	lsrs	r3, r0, #16
 80003f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fc:	b280      	uxth	r0, r0
 80003fe:	b2bc      	uxth	r4, r7
 8000400:	2101      	movs	r1, #1
 8000402:	fbb2 fcfe 	udiv	ip, r2, lr
 8000406:	fb0e 221c 	mls	r2, lr, ip, r2
 800040a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800040e:	fb04 f20c 	mul.w	r2, r4, ip
 8000412:	429a      	cmp	r2, r3
 8000414:	d907      	bls.n	8000426 <__udivmoddi4+0x11e>
 8000416:	18fb      	adds	r3, r7, r3
 8000418:	f10c 38ff 	add.w	r8, ip, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x11c>
 800041e:	429a      	cmp	r2, r3
 8000420:	f200 80e0 	bhi.w	80005e4 <__udivmoddi4+0x2dc>
 8000424:	46c4      	mov	ip, r8
 8000426:	1a9b      	subs	r3, r3, r2
 8000428:	fbb3 f2fe 	udiv	r2, r3, lr
 800042c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000430:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000434:	fb02 f404 	mul.w	r4, r2, r4
 8000438:	429c      	cmp	r4, r3
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x144>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x142>
 8000444:	429c      	cmp	r4, r3
 8000446:	f200 80ca 	bhi.w	80005de <__udivmoddi4+0x2d6>
 800044a:	4602      	mov	r2, r0
 800044c:	1b1b      	subs	r3, r3, r4
 800044e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000452:	e7a5      	b.n	80003a0 <__udivmoddi4+0x98>
 8000454:	f1c1 0620 	rsb	r6, r1, #32
 8000458:	408b      	lsls	r3, r1
 800045a:	fa22 f706 	lsr.w	r7, r2, r6
 800045e:	431f      	orrs	r7, r3
 8000460:	fa0e f401 	lsl.w	r4, lr, r1
 8000464:	fa20 f306 	lsr.w	r3, r0, r6
 8000468:	fa2e fe06 	lsr.w	lr, lr, r6
 800046c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000470:	4323      	orrs	r3, r4
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	fa1f fc87 	uxth.w	ip, r7
 800047a:	fbbe f0f9 	udiv	r0, lr, r9
 800047e:	0c1c      	lsrs	r4, r3, #16
 8000480:	fb09 ee10 	mls	lr, r9, r0, lr
 8000484:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000488:	fb00 fe0c 	mul.w	lr, r0, ip
 800048c:	45a6      	cmp	lr, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	d909      	bls.n	80004a8 <__udivmoddi4+0x1a0>
 8000494:	193c      	adds	r4, r7, r4
 8000496:	f100 3aff 	add.w	sl, r0, #4294967295
 800049a:	f080 809c 	bcs.w	80005d6 <__udivmoddi4+0x2ce>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f240 8099 	bls.w	80005d6 <__udivmoddi4+0x2ce>
 80004a4:	3802      	subs	r0, #2
 80004a6:	443c      	add	r4, r7
 80004a8:	eba4 040e 	sub.w	r4, r4, lr
 80004ac:	fa1f fe83 	uxth.w	lr, r3
 80004b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b4:	fb09 4413 	mls	r4, r9, r3, r4
 80004b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c0:	45a4      	cmp	ip, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x1ce>
 80004c4:	193c      	adds	r4, r7, r4
 80004c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80004ca:	f080 8082 	bcs.w	80005d2 <__udivmoddi4+0x2ca>
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d97f      	bls.n	80005d2 <__udivmoddi4+0x2ca>
 80004d2:	3b02      	subs	r3, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	fba0 ec02 	umull	lr, ip, r0, r2
 80004e2:	4564      	cmp	r4, ip
 80004e4:	4673      	mov	r3, lr
 80004e6:	46e1      	mov	r9, ip
 80004e8:	d362      	bcc.n	80005b0 <__udivmoddi4+0x2a8>
 80004ea:	d05f      	beq.n	80005ac <__udivmoddi4+0x2a4>
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x1fe>
 80004ee:	ebb8 0203 	subs.w	r2, r8, r3
 80004f2:	eb64 0409 	sbc.w	r4, r4, r9
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	fa22 f301 	lsr.w	r3, r2, r1
 80004fe:	431e      	orrs	r6, r3
 8000500:	40cc      	lsrs	r4, r1
 8000502:	e9c5 6400 	strd	r6, r4, [r5]
 8000506:	2100      	movs	r1, #0
 8000508:	e74f      	b.n	80003aa <__udivmoddi4+0xa2>
 800050a:	fbb1 fcf2 	udiv	ip, r1, r2
 800050e:	0c01      	lsrs	r1, r0, #16
 8000510:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000514:	b280      	uxth	r0, r0
 8000516:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800051a:	463b      	mov	r3, r7
 800051c:	4638      	mov	r0, r7
 800051e:	463c      	mov	r4, r7
 8000520:	46b8      	mov	r8, r7
 8000522:	46be      	mov	lr, r7
 8000524:	2620      	movs	r6, #32
 8000526:	fbb1 f1f7 	udiv	r1, r1, r7
 800052a:	eba2 0208 	sub.w	r2, r2, r8
 800052e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000532:	e766      	b.n	8000402 <__udivmoddi4+0xfa>
 8000534:	4601      	mov	r1, r0
 8000536:	e718      	b.n	800036a <__udivmoddi4+0x62>
 8000538:	4610      	mov	r0, r2
 800053a:	e72c      	b.n	8000396 <__udivmoddi4+0x8e>
 800053c:	f1c6 0220 	rsb	r2, r6, #32
 8000540:	fa2e f302 	lsr.w	r3, lr, r2
 8000544:	40b7      	lsls	r7, r6
 8000546:	40b1      	lsls	r1, r6
 8000548:	fa20 f202 	lsr.w	r2, r0, r2
 800054c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000550:	430a      	orrs	r2, r1
 8000552:	fbb3 f8fe 	udiv	r8, r3, lr
 8000556:	b2bc      	uxth	r4, r7
 8000558:	fb0e 3318 	mls	r3, lr, r8, r3
 800055c:	0c11      	lsrs	r1, r2, #16
 800055e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000562:	fb08 f904 	mul.w	r9, r8, r4
 8000566:	40b0      	lsls	r0, r6
 8000568:	4589      	cmp	r9, r1
 800056a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800056e:	b280      	uxth	r0, r0
 8000570:	d93e      	bls.n	80005f0 <__udivmoddi4+0x2e8>
 8000572:	1879      	adds	r1, r7, r1
 8000574:	f108 3cff 	add.w	ip, r8, #4294967295
 8000578:	d201      	bcs.n	800057e <__udivmoddi4+0x276>
 800057a:	4589      	cmp	r9, r1
 800057c:	d81f      	bhi.n	80005be <__udivmoddi4+0x2b6>
 800057e:	eba1 0109 	sub.w	r1, r1, r9
 8000582:	fbb1 f9fe 	udiv	r9, r1, lr
 8000586:	fb09 f804 	mul.w	r8, r9, r4
 800058a:	fb0e 1119 	mls	r1, lr, r9, r1
 800058e:	b292      	uxth	r2, r2
 8000590:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000594:	4542      	cmp	r2, r8
 8000596:	d229      	bcs.n	80005ec <__udivmoddi4+0x2e4>
 8000598:	18ba      	adds	r2, r7, r2
 800059a:	f109 31ff 	add.w	r1, r9, #4294967295
 800059e:	d2c4      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a0:	4542      	cmp	r2, r8
 80005a2:	d2c2      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a4:	f1a9 0102 	sub.w	r1, r9, #2
 80005a8:	443a      	add	r2, r7
 80005aa:	e7be      	b.n	800052a <__udivmoddi4+0x222>
 80005ac:	45f0      	cmp	r8, lr
 80005ae:	d29d      	bcs.n	80004ec <__udivmoddi4+0x1e4>
 80005b0:	ebbe 0302 	subs.w	r3, lr, r2
 80005b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005b8:	3801      	subs	r0, #1
 80005ba:	46e1      	mov	r9, ip
 80005bc:	e796      	b.n	80004ec <__udivmoddi4+0x1e4>
 80005be:	eba7 0909 	sub.w	r9, r7, r9
 80005c2:	4449      	add	r1, r9
 80005c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80005c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80005cc:	fb09 f804 	mul.w	r8, r9, r4
 80005d0:	e7db      	b.n	800058a <__udivmoddi4+0x282>
 80005d2:	4673      	mov	r3, lr
 80005d4:	e77f      	b.n	80004d6 <__udivmoddi4+0x1ce>
 80005d6:	4650      	mov	r0, sl
 80005d8:	e766      	b.n	80004a8 <__udivmoddi4+0x1a0>
 80005da:	4608      	mov	r0, r1
 80005dc:	e6fd      	b.n	80003da <__udivmoddi4+0xd2>
 80005de:	443b      	add	r3, r7
 80005e0:	3a02      	subs	r2, #2
 80005e2:	e733      	b.n	800044c <__udivmoddi4+0x144>
 80005e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e8:	443b      	add	r3, r7
 80005ea:	e71c      	b.n	8000426 <__udivmoddi4+0x11e>
 80005ec:	4649      	mov	r1, r9
 80005ee:	e79c      	b.n	800052a <__udivmoddi4+0x222>
 80005f0:	eba1 0109 	sub.w	r1, r1, r9
 80005f4:	46c4      	mov	ip, r8
 80005f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80005fa:	fb09 f804 	mul.w	r8, r9, r4
 80005fe:	e7c4      	b.n	800058a <__udivmoddi4+0x282>

08000600 <__aeabi_idiv0>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000608:	4b49      	ldr	r3, [pc, #292]	@ (8000730 <SystemInit+0x12c>)
 800060a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800060e:	4a48      	ldr	r2, [pc, #288]	@ (8000730 <SystemInit+0x12c>)
 8000610:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000614:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000618:	4b45      	ldr	r3, [pc, #276]	@ (8000730 <SystemInit+0x12c>)
 800061a:	691b      	ldr	r3, [r3, #16]
 800061c:	4a44      	ldr	r2, [pc, #272]	@ (8000730 <SystemInit+0x12c>)
 800061e:	f043 0310 	orr.w	r3, r3, #16
 8000622:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000624:	4b43      	ldr	r3, [pc, #268]	@ (8000734 <SystemInit+0x130>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f003 030f 	and.w	r3, r3, #15
 800062c:	2b06      	cmp	r3, #6
 800062e:	d807      	bhi.n	8000640 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000630:	4b40      	ldr	r3, [pc, #256]	@ (8000734 <SystemInit+0x130>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f023 030f 	bic.w	r3, r3, #15
 8000638:	4a3e      	ldr	r2, [pc, #248]	@ (8000734 <SystemInit+0x130>)
 800063a:	f043 0307 	orr.w	r3, r3, #7
 800063e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000640:	4b3d      	ldr	r3, [pc, #244]	@ (8000738 <SystemInit+0x134>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a3c      	ldr	r2, [pc, #240]	@ (8000738 <SystemInit+0x134>)
 8000646:	f043 0301 	orr.w	r3, r3, #1
 800064a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800064c:	4b3a      	ldr	r3, [pc, #232]	@ (8000738 <SystemInit+0x134>)
 800064e:	2200      	movs	r2, #0
 8000650:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000652:	4b39      	ldr	r3, [pc, #228]	@ (8000738 <SystemInit+0x134>)
 8000654:	681a      	ldr	r2, [r3, #0]
 8000656:	4938      	ldr	r1, [pc, #224]	@ (8000738 <SystemInit+0x134>)
 8000658:	4b38      	ldr	r3, [pc, #224]	@ (800073c <SystemInit+0x138>)
 800065a:	4013      	ands	r3, r2
 800065c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800065e:	4b35      	ldr	r3, [pc, #212]	@ (8000734 <SystemInit+0x130>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	f003 0308 	and.w	r3, r3, #8
 8000666:	2b00      	cmp	r3, #0
 8000668:	d007      	beq.n	800067a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800066a:	4b32      	ldr	r3, [pc, #200]	@ (8000734 <SystemInit+0x130>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	f023 030f 	bic.w	r3, r3, #15
 8000672:	4a30      	ldr	r2, [pc, #192]	@ (8000734 <SystemInit+0x130>)
 8000674:	f043 0307 	orr.w	r3, r3, #7
 8000678:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800067a:	4b2f      	ldr	r3, [pc, #188]	@ (8000738 <SystemInit+0x134>)
 800067c:	2200      	movs	r2, #0
 800067e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000680:	4b2d      	ldr	r3, [pc, #180]	@ (8000738 <SystemInit+0x134>)
 8000682:	2200      	movs	r2, #0
 8000684:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000686:	4b2c      	ldr	r3, [pc, #176]	@ (8000738 <SystemInit+0x134>)
 8000688:	2200      	movs	r2, #0
 800068a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800068c:	4b2a      	ldr	r3, [pc, #168]	@ (8000738 <SystemInit+0x134>)
 800068e:	4a2c      	ldr	r2, [pc, #176]	@ (8000740 <SystemInit+0x13c>)
 8000690:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000692:	4b29      	ldr	r3, [pc, #164]	@ (8000738 <SystemInit+0x134>)
 8000694:	4a2b      	ldr	r2, [pc, #172]	@ (8000744 <SystemInit+0x140>)
 8000696:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000698:	4b27      	ldr	r3, [pc, #156]	@ (8000738 <SystemInit+0x134>)
 800069a:	4a2b      	ldr	r2, [pc, #172]	@ (8000748 <SystemInit+0x144>)
 800069c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800069e:	4b26      	ldr	r3, [pc, #152]	@ (8000738 <SystemInit+0x134>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80006a4:	4b24      	ldr	r3, [pc, #144]	@ (8000738 <SystemInit+0x134>)
 80006a6:	4a28      	ldr	r2, [pc, #160]	@ (8000748 <SystemInit+0x144>)
 80006a8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80006aa:	4b23      	ldr	r3, [pc, #140]	@ (8000738 <SystemInit+0x134>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80006b0:	4b21      	ldr	r3, [pc, #132]	@ (8000738 <SystemInit+0x134>)
 80006b2:	4a25      	ldr	r2, [pc, #148]	@ (8000748 <SystemInit+0x144>)
 80006b4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80006b6:	4b20      	ldr	r3, [pc, #128]	@ (8000738 <SystemInit+0x134>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80006bc:	4b1e      	ldr	r3, [pc, #120]	@ (8000738 <SystemInit+0x134>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a1d      	ldr	r2, [pc, #116]	@ (8000738 <SystemInit+0x134>)
 80006c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80006c6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000738 <SystemInit+0x134>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006ce:	4b1f      	ldr	r3, [pc, #124]	@ (800074c <SystemInit+0x148>)
 80006d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006d2:	4a1e      	ldr	r2, [pc, #120]	@ (800074c <SystemInit+0x148>)
 80006d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006d8:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006da:	4b1d      	ldr	r3, [pc, #116]	@ (8000750 <SystemInit+0x14c>)
 80006dc:	681a      	ldr	r2, [r3, #0]
 80006de:	4b1d      	ldr	r3, [pc, #116]	@ (8000754 <SystemInit+0x150>)
 80006e0:	4013      	ands	r3, r2
 80006e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80006e6:	d202      	bcs.n	80006ee <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000758 <SystemInit+0x154>)
 80006ea:	2201      	movs	r2, #1
 80006ec:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80006ee:	4b12      	ldr	r3, [pc, #72]	@ (8000738 <SystemInit+0x134>)
 80006f0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80006f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d113      	bne.n	8000724 <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80006fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000738 <SystemInit+0x134>)
 80006fe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000702:	4a0d      	ldr	r2, [pc, #52]	@ (8000738 <SystemInit+0x134>)
 8000704:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000708:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800070c:	4b13      	ldr	r3, [pc, #76]	@ (800075c <SystemInit+0x158>)
 800070e:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000712:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000714:	4b08      	ldr	r3, [pc, #32]	@ (8000738 <SystemInit+0x134>)
 8000716:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800071a:	4a07      	ldr	r2, [pc, #28]	@ (8000738 <SystemInit+0x134>)
 800071c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000720:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	e000ed00 	.word	0xe000ed00
 8000734:	52002000 	.word	0x52002000
 8000738:	58024400 	.word	0x58024400
 800073c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000740:	02020200 	.word	0x02020200
 8000744:	01ff0000 	.word	0x01ff0000
 8000748:	01010280 	.word	0x01010280
 800074c:	580000c0 	.word	0x580000c0
 8000750:	5c001000 	.word	0x5c001000
 8000754:	ffff0000 	.word	0xffff0000
 8000758:	51008108 	.word	0x51008108
 800075c:	52004000 	.word	0x52004000

08000760 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8000764:	4b09      	ldr	r3, [pc, #36]	@ (800078c <ExitRun0Mode+0x2c>)
 8000766:	68db      	ldr	r3, [r3, #12]
 8000768:	4a08      	ldr	r2, [pc, #32]	@ (800078c <ExitRun0Mode+0x2c>)
 800076a:	f023 0302 	bic.w	r3, r3, #2
 800076e:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000770:	bf00      	nop
 8000772:	4b06      	ldr	r3, [pc, #24]	@ (800078c <ExitRun0Mode+0x2c>)
 8000774:	685b      	ldr	r3, [r3, #4]
 8000776:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800077a:	2b00      	cmp	r3, #0
 800077c:	d0f9      	beq.n	8000772 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800077e:	bf00      	nop
 8000780:	bf00      	nop
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	58024800 	.word	0x58024800

08000790 <AIC3X_Init>:
 *
 * @param haic3x Pointer to a AIC3X_HandleTypeDef structure that contains
 *  the configuration information for the specified AIC3X
 * @retval Hal Status
 */
HAL_StatusTypeDef AIC3X_Init(AIC3X_HandleTypeDef *haic3x) {
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]

	if (haic3x == NULL) {
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d101      	bne.n	80007a2 <AIC3X_Init+0x12>
		return HAL_ERROR;
 800079e:	2301      	movs	r3, #1
 80007a0:	e006      	b.n	80007b0 <AIC3X_Init+0x20>
	}

	AIC3X_HwReset(haic3x);
 80007a2:	6878      	ldr	r0, [r7, #4]
 80007a4:	f000 f808 	bl	80007b8 <AIC3X_HwReset>
	return AIC3X_SwReset(haic3x);
 80007a8:	6878      	ldr	r0, [r7, #4]
 80007aa:	f000 f829 	bl	8000800 <AIC3X_SwReset>
 80007ae:	4603      	mov	r3, r0
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <AIC3X_HwReset>:
 *
 * @param haic3x Pointer to a AIC3X_HandleTypeDef structure that contains
 *  the configuration information for the specified AIC3X.
 * @retval Hal Status
 */
HAL_StatusTypeDef AIC3X_HwReset(AIC3X_HandleTypeDef *haic3x) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]

	if (haic3x == NULL) {
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d101      	bne.n	80007ca <AIC3X_HwReset+0x12>
		return HAL_ERROR;
 80007c6:	2301      	movs	r3, #1
 80007c8:	e016      	b.n	80007f8 <AIC3X_HwReset+0x40>
	}

	HAL_GPIO_WritePin(haic3x->rst_port, haic3x->rst_pin, GPIO_PIN_RESET);
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	6858      	ldr	r0, [r3, #4]
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	891b      	ldrh	r3, [r3, #8]
 80007d2:	2200      	movs	r2, #0
 80007d4:	4619      	mov	r1, r3
 80007d6:	f005 f861 	bl	800589c <HAL_GPIO_WritePin>
	HAL_Delay(AIC3X_RESET_TIME_LOW);
 80007da:	20c8      	movs	r0, #200	@ 0xc8
 80007dc:	f002 fb90 	bl	8002f00 <HAL_Delay>

	HAL_GPIO_WritePin(haic3x->rst_port, haic3x->rst_pin, GPIO_PIN_SET);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	6858      	ldr	r0, [r3, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	891b      	ldrh	r3, [r3, #8]
 80007e8:	2201      	movs	r2, #1
 80007ea:	4619      	mov	r1, r3
 80007ec:	f005 f856 	bl	800589c <HAL_GPIO_WritePin>
	HAL_Delay(AIC3X_RESET_TIME_HIGH);
 80007f0:	2000      	movs	r0, #0
 80007f2:	f002 fb85 	bl	8002f00 <HAL_Delay>
	return HAL_OK;
 80007f6:	2300      	movs	r3, #0
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	3708      	adds	r7, #8
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}

08000800 <AIC3X_SwReset>:
 *
 * @param haic3x Pointer to a AIC3X_HandleTypeDef structure that contains
 *  the configuration information for the specified AIC3X.
 * @return Hal Status
 */
HAL_StatusTypeDef AIC3X_SwReset(AIC3X_HandleTypeDef *haic3x) {
 8000800:	b580      	push	{r7, lr}
 8000802:	b088      	sub	sp, #32
 8000804:	af04      	add	r7, sp, #16
 8000806:	6078      	str	r0, [r7, #4]

	if (haic3x == NULL) {
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d101      	bne.n	8000812 <AIC3X_SwReset+0x12>
		return HAL_ERROR;
 800080e:	2301      	movs	r3, #1
 8000810:	e010      	b.n	8000834 <AIC3X_SwReset+0x34>
	}

	uint8_t writeBuffer = 0x80u;
 8000812:	2380      	movs	r3, #128	@ 0x80
 8000814:	73fb      	strb	r3, [r7, #15]
	return HAL_I2C_Mem_Write(haic3x->hi2c, (uint16_t) AIC3x_ADDRESS << 1,
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	6818      	ldr	r0, [r3, #0]
 800081a:	230a      	movs	r3, #10
 800081c:	9302      	str	r3, [sp, #8]
 800081e:	2301      	movs	r3, #1
 8000820:	9301      	str	r3, [sp, #4]
 8000822:	f107 030f 	add.w	r3, r7, #15
 8000826:	9300      	str	r3, [sp, #0]
 8000828:	2301      	movs	r3, #1
 800082a:	2201      	movs	r2, #1
 800082c:	2130      	movs	r1, #48	@ 0x30
 800082e:	f005 f919 	bl	8005a64 <HAL_I2C_Mem_Write>
 8000832:	4603      	mov	r3, r0
	AIC3X_RESET, I2C_MEMADD_SIZE_8BIT, &writeBuffer, 1U, 10);
}
 8000834:	4618      	mov	r0, r3
 8000836:	3710      	adds	r7, #16
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}

0800083c <AIC3X_ReadData>:

HAL_StatusTypeDef AIC3X_ReadData(AIC3X_HandleTypeDef *haic3x, uint8_t reg,
		uint8_t *data, uint8_t dataSize) {
 800083c:	b580      	push	{r7, lr}
 800083e:	b088      	sub	sp, #32
 8000840:	af04      	add	r7, sp, #16
 8000842:	60f8      	str	r0, [r7, #12]
 8000844:	607a      	str	r2, [r7, #4]
 8000846:	461a      	mov	r2, r3
 8000848:	460b      	mov	r3, r1
 800084a:	72fb      	strb	r3, [r7, #11]
 800084c:	4613      	mov	r3, r2
 800084e:	72bb      	strb	r3, [r7, #10]
	if (haic3x == NULL) {
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d101      	bne.n	800085a <AIC3X_ReadData+0x1e>
		return HAL_ERROR;
 8000856:	2301      	movs	r3, #1
 8000858:	e014      	b.n	8000884 <AIC3X_ReadData+0x48>
	}

	if (data == NULL) {
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d101      	bne.n	8000864 <AIC3X_ReadData+0x28>
		return HAL_ERROR;
 8000860:	2301      	movs	r3, #1
 8000862:	e00f      	b.n	8000884 <AIC3X_ReadData+0x48>
	}

	return HAL_I2C_Mem_Read(haic3x->hi2c, (uint16_t) AIC3x_ADDRESS << 1, reg,
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	6818      	ldr	r0, [r3, #0]
 8000868:	7afb      	ldrb	r3, [r7, #11]
 800086a:	b29a      	uxth	r2, r3
 800086c:	7abb      	ldrb	r3, [r7, #10]
 800086e:	b29b      	uxth	r3, r3
 8000870:	210a      	movs	r1, #10
 8000872:	9102      	str	r1, [sp, #8]
 8000874:	9301      	str	r3, [sp, #4]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	9300      	str	r3, [sp, #0]
 800087a:	2301      	movs	r3, #1
 800087c:	2130      	movs	r1, #48	@ 0x30
 800087e:	f005 fa05 	bl	8005c8c <HAL_I2C_Mem_Read>
 8000882:	4603      	mov	r3, r0
	I2C_MEMADD_SIZE_8BIT, data, dataSize, 10);
}
 8000884:	4618      	mov	r0, r3
 8000886:	3710      	adds	r7, #16
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}

0800088c <AIC3X_WriteData>:

HAL_StatusTypeDef AIC3X_WriteData(AIC3X_HandleTypeDef *haic3x, uint8_t reg,
		uint8_t *data, uint8_t dataSize) {
 800088c:	b580      	push	{r7, lr}
 800088e:	b088      	sub	sp, #32
 8000890:	af04      	add	r7, sp, #16
 8000892:	60f8      	str	r0, [r7, #12]
 8000894:	607a      	str	r2, [r7, #4]
 8000896:	461a      	mov	r2, r3
 8000898:	460b      	mov	r3, r1
 800089a:	72fb      	strb	r3, [r7, #11]
 800089c:	4613      	mov	r3, r2
 800089e:	72bb      	strb	r3, [r7, #10]
	if (haic3x == NULL) {
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d101      	bne.n	80008aa <AIC3X_WriteData+0x1e>
		return HAL_ERROR;
 80008a6:	2301      	movs	r3, #1
 80008a8:	e014      	b.n	80008d4 <AIC3X_WriteData+0x48>
	}

	if (data == NULL) {
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d101      	bne.n	80008b4 <AIC3X_WriteData+0x28>
		return HAL_ERROR;
 80008b0:	2301      	movs	r3, #1
 80008b2:	e00f      	b.n	80008d4 <AIC3X_WriteData+0x48>
	}

	return HAL_I2C_Mem_Write(haic3x->hi2c, (uint16_t) AIC3x_ADDRESS << 1, reg,
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	6818      	ldr	r0, [r3, #0]
 80008b8:	7afb      	ldrb	r3, [r7, #11]
 80008ba:	b29a      	uxth	r2, r3
 80008bc:	7abb      	ldrb	r3, [r7, #10]
 80008be:	b29b      	uxth	r3, r3
 80008c0:	210a      	movs	r1, #10
 80008c2:	9102      	str	r1, [sp, #8]
 80008c4:	9301      	str	r3, [sp, #4]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	9300      	str	r3, [sp, #0]
 80008ca:	2301      	movs	r3, #1
 80008cc:	2130      	movs	r1, #48	@ 0x30
 80008ce:	f005 f8c9 	bl	8005a64 <HAL_I2C_Mem_Write>
 80008d2:	4603      	mov	r3, r0
	I2C_MEMADD_SIZE_8BIT, data, dataSize, 10);
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	3710      	adds	r7, #16
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}

080008dc <AIC3X_WriteDataPathControl>:

	return HAL_OK;
}

HAL_StatusTypeDef AIC3X_WriteDataPathControl(AIC3X_HandleTypeDef *haic3x,
		AIC3X_DataPathControl_TypeDef *pDataPathControl) {
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	6039      	str	r1, [r7, #0]
	if (haic3x == NULL) {
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d101      	bne.n	80008f0 <AIC3X_WriteDataPathControl+0x14>
		return HAL_ERROR;
 80008ec:	2301      	movs	r3, #1
 80008ee:	e030      	b.n	8000952 <AIC3X_WriteDataPathControl+0x76>
	}

	if (pDataPathControl == NULL) {
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d101      	bne.n	80008fa <AIC3X_WriteDataPathControl+0x1e>
		return HAL_ERROR;
 80008f6:	2301      	movs	r3, #1
 80008f8:	e02b      	b.n	8000952 <AIC3X_WriteDataPathControl+0x76>
	}

	uint8_t readBuffer;
	uint8_t writeBuffer;

	readBuffer = AIC3X_ReadData(haic3x, AIC3X_CODEC_DATAPATH_REG, &readBuffer,
 80008fa:	f107 020f 	add.w	r2, r7, #15
 80008fe:	2301      	movs	r3, #1
 8000900:	2107      	movs	r1, #7
 8000902:	6878      	ldr	r0, [r7, #4]
 8000904:	f7ff ff9a 	bl	800083c <AIC3X_ReadData>
 8000908:	4603      	mov	r3, r0
 800090a:	73fb      	strb	r3, [r7, #15]
			sizeof(readBuffer));

	writeBuffer = readBuffer
			& (~(AIC3X_DATAPATH_LEFT_MASK | AIC3X_DATAPATH_RIGHT_MASK));
 800090c:	7bfb      	ldrb	r3, [r7, #15]
 800090e:	f023 031e 	bic.w	r3, r3, #30
 8000912:	b2db      	uxtb	r3, r3
	writeBuffer = readBuffer
 8000914:	73bb      	strb	r3, [r7, #14]

	writeBuffer |= (uint8_t) pDataPathControl->LeftDACDataPath << 3;
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	b25b      	sxtb	r3, r3
 800091c:	00db      	lsls	r3, r3, #3
 800091e:	b25a      	sxtb	r2, r3
 8000920:	7bbb      	ldrb	r3, [r7, #14]
 8000922:	b25b      	sxtb	r3, r3
 8000924:	4313      	orrs	r3, r2
 8000926:	b25b      	sxtb	r3, r3
 8000928:	b2db      	uxtb	r3, r3
 800092a:	73bb      	strb	r3, [r7, #14]
	writeBuffer |= (uint8_t) pDataPathControl->RightDACDataPath << 1;
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	785b      	ldrb	r3, [r3, #1]
 8000930:	b25b      	sxtb	r3, r3
 8000932:	005b      	lsls	r3, r3, #1
 8000934:	b25a      	sxtb	r2, r3
 8000936:	7bbb      	ldrb	r3, [r7, #14]
 8000938:	b25b      	sxtb	r3, r3
 800093a:	4313      	orrs	r3, r2
 800093c:	b25b      	sxtb	r3, r3
 800093e:	b2db      	uxtb	r3, r3
 8000940:	73bb      	strb	r3, [r7, #14]

	return AIC3X_WriteData(haic3x, AIC3X_CODEC_DATAPATH_REG, &writeBuffer,
 8000942:	f107 020e 	add.w	r2, r7, #14
 8000946:	2301      	movs	r3, #1
 8000948:	2107      	movs	r1, #7
 800094a:	6878      	ldr	r0, [r7, #4]
 800094c:	f7ff ff9e 	bl	800088c <AIC3X_WriteData>
 8000950:	4603      	mov	r3, r0
			sizeof(writeBuffer));
}
 8000952:	4618      	mov	r0, r3
 8000954:	3710      	adds	r7, #16
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}

0800095a <AIC3X_WriteASDataIntfControl>:
 *
 * @warning The size of the sent data is not calculated with sizeof() but set
 * 	with a constant value of 3u because the registers have a length of 24 bits.
 */
HAL_StatusTypeDef AIC3X_WriteASDataIntfControl(AIC3X_HandleTypeDef *haic3x,
		AIC3X_ASDIntCtrl_TypeDef *pASDIntfCtrl) {
 800095a:	b580      	push	{r7, lr}
 800095c:	b088      	sub	sp, #32
 800095e:	af04      	add	r7, sp, #16
 8000960:	6078      	str	r0, [r7, #4]
 8000962:	6039      	str	r1, [r7, #0]

	if (haic3x == NULL) {
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d101      	bne.n	800096e <AIC3X_WriteASDataIntfControl+0x14>
		return HAL_ERROR;
 800096a:	2301      	movs	r3, #1
 800096c:	e060      	b.n	8000a30 <AIC3X_WriteASDataIntfControl+0xd6>
	}

	if (pASDIntfCtrl == NULL) {
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d101      	bne.n	8000978 <AIC3X_WriteASDataIntfControl+0x1e>
		return HAL_ERROR;
 8000974:	2301      	movs	r3, #1
 8000976:	e05b      	b.n	8000a30 <AIC3X_WriteASDataIntfControl+0xd6>
	}

	uint32_t writeBuffer = 0;
 8000978:	2300      	movs	r3, #0
 800097a:	60fb      	str	r3, [r7, #12]

	/*Set corresponding bits for the values in pASDIntfCtrl */
	writeBuffer |= pASDIntfCtrl->BclkOutput << 24;
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	061a      	lsls	r2, r3, #24
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	4313      	orrs	r3, r2
 8000986:	60fb      	str	r3, [r7, #12]
	writeBuffer |= pASDIntfCtrl->WclkOutput << 23;
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	785b      	ldrb	r3, [r3, #1]
 800098c:	05da      	lsls	r2, r3, #23
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	4313      	orrs	r3, r2
 8000992:	60fb      	str	r3, [r7, #12]
	writeBuffer |= pASDIntfCtrl->DoutTristate << 22;
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	789b      	ldrb	r3, [r3, #2]
 8000998:	059a      	lsls	r2, r3, #22
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	4313      	orrs	r3, r2
 800099e:	60fb      	str	r3, [r7, #12]
	writeBuffer |= pASDIntfCtrl->ClkDriveCtrl << 21;
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	78db      	ldrb	r3, [r3, #3]
 80009a4:	055a      	lsls	r2, r3, #21
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	4313      	orrs	r3, r2
 80009aa:	60fb      	str	r3, [r7, #12]
	writeBuffer |= pASDIntfCtrl->Effect3D << 19;
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	791b      	ldrb	r3, [r3, #4]
 80009b0:	04da      	lsls	r2, r3, #19
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	4313      	orrs	r3, r2
 80009b6:	60fb      	str	r3, [r7, #12]
	writeBuffer |= pASDIntfCtrl->TransferMode << 14;
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	795b      	ldrb	r3, [r3, #5]
 80009bc:	039a      	lsls	r2, r3, #14
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	4313      	orrs	r3, r2
 80009c2:	60fb      	str	r3, [r7, #12]
	writeBuffer |= pASDIntfCtrl->WordLength << 12;
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	799b      	ldrb	r3, [r3, #6]
 80009c8:	031a      	lsls	r2, r3, #12
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	4313      	orrs	r3, r2
 80009ce:	60fb      	str	r3, [r7, #12]
	writeBuffer |= pASDIntfCtrl->Bclk265ClockMode << 11;
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	79db      	ldrb	r3, [r3, #7]
 80009d4:	02da      	lsls	r2, r3, #11
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	4313      	orrs	r3, r2
 80009da:	60fb      	str	r3, [r7, #12]
	writeBuffer |= pASDIntfCtrl->DACResync << 10;
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	7a1b      	ldrb	r3, [r3, #8]
 80009e0:	029a      	lsls	r2, r3, #10
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	4313      	orrs	r3, r2
 80009e6:	60fb      	str	r3, [r7, #12]
	writeBuffer |= pASDIntfCtrl->ADCResync << 9;
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	7a5b      	ldrb	r3, [r3, #9]
 80009ec:	025a      	lsls	r2, r3, #9
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	4313      	orrs	r3, r2
 80009f2:	60fb      	str	r3, [r7, #12]
	writeBuffer |= pASDIntfCtrl->ReSyncMute << 8;
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	7a9b      	ldrb	r3, [r3, #10]
 80009f8:	021a      	lsls	r2, r3, #8
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	4313      	orrs	r3, r2
 80009fe:	60fb      	str	r3, [r7, #12]
	writeBuffer |= pASDIntfCtrl->WordOffset;
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	7adb      	ldrb	r3, [r3, #11]
 8000a04:	461a      	mov	r2, r3
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	60fb      	str	r3, [r7, #12]

	/* Shift the writeBuffer to the left by 8 bits to make place for the bits of the ASD overflow control register*/
	writeBuffer = writeBuffer << 8;
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	021b      	lsls	r3, r3, #8
 8000a10:	60fb      	str	r3, [r7, #12]

	/* Write the ASD interface control register */
	return HAL_I2C_Mem_Write(haic3x->hi2c, (uint16_t) AIC3x_ADDRESS << 1,
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	6818      	ldr	r0, [r3, #0]
 8000a16:	230a      	movs	r3, #10
 8000a18:	9302      	str	r3, [sp, #8]
 8000a1a:	2303      	movs	r3, #3
 8000a1c:	9301      	str	r3, [sp, #4]
 8000a1e:	f107 030c 	add.w	r3, r7, #12
 8000a22:	9300      	str	r3, [sp, #0]
 8000a24:	2301      	movs	r3, #1
 8000a26:	2208      	movs	r2, #8
 8000a28:	2130      	movs	r1, #48	@ 0x30
 8000a2a:	f005 f81b 	bl	8005a64 <HAL_I2C_Mem_Write>
 8000a2e:	4603      	mov	r3, r0
	AIC3X_ASD_INTF_CTRLA, I2C_MEMADD_SIZE_8BIT, (uint8_t*) &writeBuffer, 3u, 10);

}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3710      	adds	r7, #16
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <AIC3X_WritePGAGainControl>:

	return HAL_OK;
}

HAL_StatusTypeDef AIC3X_WritePGAGainControl(AIC3X_HandleTypeDef *haic3x,
		AIC3X_PGAGainControl_TypeDef *pPGAGainControl) {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	6039      	str	r1, [r7, #0]
	if (haic3x == NULL) {
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d101      	bne.n	8000a4c <AIC3X_WritePGAGainControl+0x14>
		return HAL_ERROR;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	e038      	b.n	8000abe <AIC3X_WritePGAGainControl+0x86>
	}

	if (pPGAGainControl == NULL) {
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d101      	bne.n	8000a56 <AIC3X_WritePGAGainControl+0x1e>
		return HAL_ERROR;
 8000a52:	2301      	movs	r3, #1
 8000a54:	e033      	b.n	8000abe <AIC3X_WritePGAGainControl+0x86>
	}

	uint16_t writeBuffer = 0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	81fb      	strh	r3, [r7, #14]

	writeBuffer |= pPGAGainControl->LADCMuted << 15;
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	b21b      	sxth	r3, r3
 8000a60:	03db      	lsls	r3, r3, #15
 8000a62:	b21a      	sxth	r2, r3
 8000a64:	89fb      	ldrh	r3, [r7, #14]
 8000a66:	b21b      	sxth	r3, r3
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	b21b      	sxth	r3, r3
 8000a6c:	b29b      	uxth	r3, r3
 8000a6e:	81fb      	strh	r3, [r7, #14]
	writeBuffer |= (pPGAGainControl->LADCGain & AIC3X_PGA_GAIN_MASK) << 8;
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	785b      	ldrb	r3, [r3, #1]
 8000a74:	021b      	lsls	r3, r3, #8
 8000a76:	b29b      	uxth	r3, r3
 8000a78:	f403 43fe 	and.w	r3, r3, #32512	@ 0x7f00
 8000a7c:	b29a      	uxth	r2, r3
 8000a7e:	89fb      	ldrh	r3, [r7, #14]
 8000a80:	4313      	orrs	r3, r2
 8000a82:	b29b      	uxth	r3, r3
 8000a84:	81fb      	strh	r3, [r7, #14]
	writeBuffer |= pPGAGainControl->RADCMuted << 7;
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	789b      	ldrb	r3, [r3, #2]
 8000a8a:	b21b      	sxth	r3, r3
 8000a8c:	01db      	lsls	r3, r3, #7
 8000a8e:	b21a      	sxth	r2, r3
 8000a90:	89fb      	ldrh	r3, [r7, #14]
 8000a92:	b21b      	sxth	r3, r3
 8000a94:	4313      	orrs	r3, r2
 8000a96:	b21b      	sxth	r3, r3
 8000a98:	b29b      	uxth	r3, r3
 8000a9a:	81fb      	strh	r3, [r7, #14]
	writeBuffer |= pPGAGainControl->RADCGain & AIC3X_PGA_GAIN_MASK;
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	78db      	ldrb	r3, [r3, #3]
 8000aa0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000aa4:	b29a      	uxth	r2, r3
 8000aa6:	89fb      	ldrh	r3, [r7, #14]
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	b29b      	uxth	r3, r3
 8000aac:	81fb      	strh	r3, [r7, #14]

	return AIC3X_WriteData(haic3x, LADC_VOL, (uint8_t*) &writeBuffer,
 8000aae:	f107 020e 	add.w	r2, r7, #14
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	210f      	movs	r1, #15
 8000ab6:	6878      	ldr	r0, [r7, #4]
 8000ab8:	f7ff fee8 	bl	800088c <AIC3X_WriteData>
 8000abc:	4603      	mov	r3, r0
			sizeof(writeBuffer));
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3710      	adds	r7, #16
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <AIC3X_WriteADCMixControl>:

	return HAL_OK;
}

HAL_StatusTypeDef AIC3X_WriteADCMixControl(AIC3X_HandleTypeDef *haic3x,
		AIC3X_ADCMixControl_TypeDef *pADCMixControl) {
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b086      	sub	sp, #24
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
 8000ace:	6039      	str	r1, [r7, #0]
	if (haic3x == NULL) {
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d101      	bne.n	8000ada <AIC3X_WriteADCMixControl+0x14>
		return HAL_ERROR;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	e12f      	b.n	8000d3a <AIC3X_WriteADCMixControl+0x274>
	}

	if (pADCMixControl == NULL) {
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d101      	bne.n	8000ae4 <AIC3X_WriteADCMixControl+0x1e>
		return HAL_ERROR;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	e12a      	b.n	8000d3a <AIC3X_WriteADCMixControl+0x274>
	}

	if ((pADCMixControl->LeftADC_MIC2LGain > 8
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	2b08      	cmp	r3, #8
 8000aea:	d903      	bls.n	8000af4 <AIC3X_WriteADCMixControl+0x2e>
			&& pADCMixControl->LeftADC_MIC2LGain < 15)
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	2b0e      	cmp	r3, #14
 8000af2:	d937      	bls.n	8000b64 <AIC3X_WriteADCMixControl+0x9e>
			|| (pADCMixControl->LeftADC_MIC2RGain > 8
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	785b      	ldrb	r3, [r3, #1]
 8000af8:	2b08      	cmp	r3, #8
 8000afa:	d903      	bls.n	8000b04 <AIC3X_WriteADCMixControl+0x3e>
					&& pADCMixControl->LeftADC_MIC2RGain < 15)
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	785b      	ldrb	r3, [r3, #1]
 8000b00:	2b0e      	cmp	r3, #14
 8000b02:	d92f      	bls.n	8000b64 <AIC3X_WriteADCMixControl+0x9e>
			|| (pADCMixControl->RightADC_MIC2LGain > 8
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	789b      	ldrb	r3, [r3, #2]
 8000b08:	2b08      	cmp	r3, #8
 8000b0a:	d903      	bls.n	8000b14 <AIC3X_WriteADCMixControl+0x4e>
					&& pADCMixControl->RightADC_MIC2LGain < 15)
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	789b      	ldrb	r3, [r3, #2]
 8000b10:	2b0e      	cmp	r3, #14
 8000b12:	d927      	bls.n	8000b64 <AIC3X_WriteADCMixControl+0x9e>
			|| (pADCMixControl->RightADC_MIC2RGain > 8
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	78db      	ldrb	r3, [r3, #3]
 8000b18:	2b08      	cmp	r3, #8
 8000b1a:	d903      	bls.n	8000b24 <AIC3X_WriteADCMixControl+0x5e>
					&& pADCMixControl->RightADC_MIC2RGain < 15)
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	78db      	ldrb	r3, [r3, #3]
 8000b20:	2b0e      	cmp	r3, #14
 8000b22:	d91f      	bls.n	8000b64 <AIC3X_WriteADCMixControl+0x9e>
			|| (pADCMixControl->LeftADC_MIC1LPGain > 8
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	795b      	ldrb	r3, [r3, #5]
 8000b28:	2b08      	cmp	r3, #8
 8000b2a:	d903      	bls.n	8000b34 <AIC3X_WriteADCMixControl+0x6e>
					&& pADCMixControl->LeftADC_MIC1LPGain < 15)
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	795b      	ldrb	r3, [r3, #5]
 8000b30:	2b0e      	cmp	r3, #14
 8000b32:	d917      	bls.n	8000b64 <AIC3X_WriteADCMixControl+0x9e>
			|| (pADCMixControl->LeftADC_MIC1RPGain > 8
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	7a5b      	ldrb	r3, [r3, #9]
 8000b38:	2b08      	cmp	r3, #8
 8000b3a:	d903      	bls.n	8000b44 <AIC3X_WriteADCMixControl+0x7e>
					&& pADCMixControl->LeftADC_MIC1RPGain < 15)
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	7a5b      	ldrb	r3, [r3, #9]
 8000b40:	2b0e      	cmp	r3, #14
 8000b42:	d90f      	bls.n	8000b64 <AIC3X_WriteADCMixControl+0x9e>
			|| (pADCMixControl->RightADC_MIC1LPGain > 8
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	7bdb      	ldrb	r3, [r3, #15]
 8000b48:	2b08      	cmp	r3, #8
 8000b4a:	d903      	bls.n	8000b54 <AIC3X_WriteADCMixControl+0x8e>
					&& pADCMixControl->RightADC_MIC1LPGain < 15)
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	7bdb      	ldrb	r3, [r3, #15]
 8000b50:	2b0e      	cmp	r3, #14
 8000b52:	d907      	bls.n	8000b64 <AIC3X_WriteADCMixControl+0x9e>
			|| (pADCMixControl->RightADC_MIC1RPGain > 8
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	7adb      	ldrb	r3, [r3, #11]
 8000b58:	2b08      	cmp	r3, #8
 8000b5a:	d905      	bls.n	8000b68 <AIC3X_WriteADCMixControl+0xa2>
					&& pADCMixControl->RightADC_MIC1RPGain < 15)) {
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	7adb      	ldrb	r3, [r3, #11]
 8000b60:	2b0e      	cmp	r3, #14
 8000b62:	d801      	bhi.n	8000b68 <AIC3X_WriteADCMixControl+0xa2>
		return HAL_ERROR;
 8000b64:	2301      	movs	r3, #1
 8000b66:	e0e8      	b.n	8000d3a <AIC3X_WriteADCMixControl+0x274>
	}

uint16_t writeBufferMIC2 = 0;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	82bb      	strh	r3, [r7, #20]
uint8_t writeBufferLeftADCMIC1LP = 0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	74fb      	strb	r3, [r7, #19]
uint16_t writeBufferMIC1RP = 0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	823b      	strh	r3, [r7, #16]
uint8_t writeBufferRightADCMIC1LP = 0;
 8000b74:	2300      	movs	r3, #0
 8000b76:	73fb      	strb	r3, [r7, #15]

writeBufferMIC2 |= pADCMixControl->LeftADC_MIC2LGain << 12;
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	b21b      	sxth	r3, r3
 8000b7e:	031b      	lsls	r3, r3, #12
 8000b80:	b21a      	sxth	r2, r3
 8000b82:	8abb      	ldrh	r3, [r7, #20]
 8000b84:	b21b      	sxth	r3, r3
 8000b86:	4313      	orrs	r3, r2
 8000b88:	b21b      	sxth	r3, r3
 8000b8a:	b29b      	uxth	r3, r3
 8000b8c:	82bb      	strh	r3, [r7, #20]
writeBufferMIC2 |= pADCMixControl->LeftADC_MIC2RGain << 8;
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	785b      	ldrb	r3, [r3, #1]
 8000b92:	b21b      	sxth	r3, r3
 8000b94:	021b      	lsls	r3, r3, #8
 8000b96:	b21a      	sxth	r2, r3
 8000b98:	8abb      	ldrh	r3, [r7, #20]
 8000b9a:	b21b      	sxth	r3, r3
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	b21b      	sxth	r3, r3
 8000ba0:	b29b      	uxth	r3, r3
 8000ba2:	82bb      	strh	r3, [r7, #20]
writeBufferMIC2 |= pADCMixControl->RightADC_MIC2LGain << 4;
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	789b      	ldrb	r3, [r3, #2]
 8000ba8:	b21b      	sxth	r3, r3
 8000baa:	011b      	lsls	r3, r3, #4
 8000bac:	b21a      	sxth	r2, r3
 8000bae:	8abb      	ldrh	r3, [r7, #20]
 8000bb0:	b21b      	sxth	r3, r3
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	b21b      	sxth	r3, r3
 8000bb6:	b29b      	uxth	r3, r3
 8000bb8:	82bb      	strh	r3, [r7, #20]
writeBufferMIC2 |= pADCMixControl->RightADC_MIC2RGain;
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	78db      	ldrb	r3, [r3, #3]
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	8abb      	ldrh	r3, [r7, #20]
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	b29b      	uxth	r3, r3
 8000bc6:	82bb      	strh	r3, [r7, #20]

writeBufferLeftADCMIC1LP |= pADCMixControl->LeftADC_MIC1LPDifferential << 7;
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	791b      	ldrb	r3, [r3, #4]
 8000bcc:	b25b      	sxtb	r3, r3
 8000bce:	01db      	lsls	r3, r3, #7
 8000bd0:	b25a      	sxtb	r2, r3
 8000bd2:	7cfb      	ldrb	r3, [r7, #19]
 8000bd4:	b25b      	sxtb	r3, r3
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	b25b      	sxtb	r3, r3
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	74fb      	strb	r3, [r7, #19]
writeBufferLeftADCMIC1LP |= pADCMixControl->LeftADC_MIC1LPGain << 3;
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	795b      	ldrb	r3, [r3, #5]
 8000be2:	b25b      	sxtb	r3, r3
 8000be4:	00db      	lsls	r3, r3, #3
 8000be6:	b25a      	sxtb	r2, r3
 8000be8:	7cfb      	ldrb	r3, [r7, #19]
 8000bea:	b25b      	sxtb	r3, r3
 8000bec:	4313      	orrs	r3, r2
 8000bee:	b25b      	sxtb	r3, r3
 8000bf0:	b2db      	uxtb	r3, r3
 8000bf2:	74fb      	strb	r3, [r7, #19]
writeBufferLeftADCMIC1LP |= pADCMixControl->LeftADC_PowerUp << 2;
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	799b      	ldrb	r3, [r3, #6]
 8000bf8:	b25b      	sxtb	r3, r3
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	b25a      	sxtb	r2, r3
 8000bfe:	7cfb      	ldrb	r3, [r7, #19]
 8000c00:	b25b      	sxtb	r3, r3
 8000c02:	4313      	orrs	r3, r2
 8000c04:	b25b      	sxtb	r3, r3
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	74fb      	strb	r3, [r7, #19]
writeBufferLeftADCMIC1LP |= pADCMixControl->LeftADC_PGASoftStepping & AIC3X_LEFT_ADC_MIC1LP_SOFT_STEPPING_MASK;
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	79db      	ldrb	r3, [r3, #7]
 8000c0e:	f003 0303 	and.w	r3, r3, #3
 8000c12:	b2da      	uxtb	r2, r3
 8000c14:	7cfb      	ldrb	r3, [r7, #19]
 8000c16:	4313      	orrs	r3, r2
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	74fb      	strb	r3, [r7, #19]

writeBufferMIC1RP |= pADCMixControl->LeftADC_MIC1RPDifferential << 15;
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	7a1b      	ldrb	r3, [r3, #8]
 8000c20:	b21b      	sxth	r3, r3
 8000c22:	03db      	lsls	r3, r3, #15
 8000c24:	b21a      	sxth	r2, r3
 8000c26:	8a3b      	ldrh	r3, [r7, #16]
 8000c28:	b21b      	sxth	r3, r3
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	b21b      	sxth	r3, r3
 8000c2e:	b29b      	uxth	r3, r3
 8000c30:	823b      	strh	r3, [r7, #16]
writeBufferMIC1RP |= pADCMixControl->LeftADC_MIC1RPGain << 11;
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	7a5b      	ldrb	r3, [r3, #9]
 8000c36:	b21b      	sxth	r3, r3
 8000c38:	02db      	lsls	r3, r3, #11
 8000c3a:	b21a      	sxth	r2, r3
 8000c3c:	8a3b      	ldrh	r3, [r7, #16]
 8000c3e:	b21b      	sxth	r3, r3
 8000c40:	4313      	orrs	r3, r2
 8000c42:	b21b      	sxth	r3, r3
 8000c44:	b29b      	uxth	r3, r3
 8000c46:	823b      	strh	r3, [r7, #16]
writeBufferMIC1RP |= pADCMixControl->RightADC_MIC1RPDifferential << 7;
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	7a9b      	ldrb	r3, [r3, #10]
 8000c4c:	b21b      	sxth	r3, r3
 8000c4e:	01db      	lsls	r3, r3, #7
 8000c50:	b21a      	sxth	r2, r3
 8000c52:	8a3b      	ldrh	r3, [r7, #16]
 8000c54:	b21b      	sxth	r3, r3
 8000c56:	4313      	orrs	r3, r2
 8000c58:	b21b      	sxth	r3, r3
 8000c5a:	b29b      	uxth	r3, r3
 8000c5c:	823b      	strh	r3, [r7, #16]
writeBufferMIC1RP |= pADCMixControl->RightADC_MIC1RPGain << 3;
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	7adb      	ldrb	r3, [r3, #11]
 8000c62:	b21b      	sxth	r3, r3
 8000c64:	00db      	lsls	r3, r3, #3
 8000c66:	b21a      	sxth	r2, r3
 8000c68:	8a3b      	ldrh	r3, [r7, #16]
 8000c6a:	b21b      	sxth	r3, r3
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	b21b      	sxth	r3, r3
 8000c70:	b29b      	uxth	r3, r3
 8000c72:	823b      	strh	r3, [r7, #16]
writeBufferMIC1RP |= pADCMixControl->RightADC_PowerUp << 2;
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	7b1b      	ldrb	r3, [r3, #12]
 8000c78:	b21b      	sxth	r3, r3
 8000c7a:	009b      	lsls	r3, r3, #2
 8000c7c:	b21a      	sxth	r2, r3
 8000c7e:	8a3b      	ldrh	r3, [r7, #16]
 8000c80:	b21b      	sxth	r3, r3
 8000c82:	4313      	orrs	r3, r2
 8000c84:	b21b      	sxth	r3, r3
 8000c86:	b29b      	uxth	r3, r3
 8000c88:	823b      	strh	r3, [r7, #16]
writeBufferMIC1RP |= pADCMixControl->RightADC_PGASoftStepping & AIC3X_RIGHT_ADC_MIC1RP_SOFT_STEPPING_MASK;
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	7b5b      	ldrb	r3, [r3, #13]
 8000c8e:	f003 0303 	and.w	r3, r3, #3
 8000c92:	b29a      	uxth	r2, r3
 8000c94:	8a3b      	ldrh	r3, [r7, #16]
 8000c96:	4313      	orrs	r3, r2
 8000c98:	b29b      	uxth	r3, r3
 8000c9a:	823b      	strh	r3, [r7, #16]

writeBufferRightADCMIC1LP |= pADCMixControl->RightADC_MIC1LPDifferential
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	7b9b      	ldrb	r3, [r3, #14]
 8000ca0:	b25b      	sxtb	r3, r3
 8000ca2:	01db      	lsls	r3, r3, #7
 8000ca4:	b25a      	sxtb	r2, r3
 8000ca6:	7bfb      	ldrb	r3, [r7, #15]
 8000ca8:	b25b      	sxtb	r3, r3
 8000caa:	4313      	orrs	r3, r2
 8000cac:	b25b      	sxtb	r3, r3
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	73fb      	strb	r3, [r7, #15]
<< 7;
writeBufferRightADCMIC1LP |= pADCMixControl->RightADC_MIC1LPGain << 3;
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	7bdb      	ldrb	r3, [r3, #15]
 8000cb6:	b25b      	sxtb	r3, r3
 8000cb8:	00db      	lsls	r3, r3, #3
 8000cba:	b25a      	sxtb	r2, r3
 8000cbc:	7bfb      	ldrb	r3, [r7, #15]
 8000cbe:	b25b      	sxtb	r3, r3
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	b25b      	sxtb	r3, r3
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	73fb      	strb	r3, [r7, #15]

HAL_StatusTypeDef status;

status = AIC3X_WriteData(haic3x, MIC2LR_LADC_CTRL, (uint8_t*) &writeBufferMIC2,
 8000cc8:	f107 0214 	add.w	r2, r7, #20
 8000ccc:	2302      	movs	r3, #2
 8000cce:	2111      	movs	r1, #17
 8000cd0:	6878      	ldr	r0, [r7, #4]
 8000cd2:	f7ff fddb 	bl	800088c <AIC3X_WriteData>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	75fb      	strb	r3, [r7, #23]
		sizeof(writeBufferMIC2));

if (status != HAL_OK) {
 8000cda:	7dfb      	ldrb	r3, [r7, #23]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <AIC3X_WriteADCMixControl+0x21e>
	return status;
 8000ce0:	7dfb      	ldrb	r3, [r7, #23]
 8000ce2:	e02a      	b.n	8000d3a <AIC3X_WriteADCMixControl+0x274>
}

status = AIC3X_WriteData(haic3x, MIC1L_LADC_CTRL, &writeBufferLeftADCMIC1LP,
 8000ce4:	f107 0213 	add.w	r2, r7, #19
 8000ce8:	2301      	movs	r3, #1
 8000cea:	2113      	movs	r1, #19
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f7ff fdcd 	bl	800088c <AIC3X_WriteData>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	75fb      	strb	r3, [r7, #23]
		sizeof(writeBufferLeftADCMIC1LP));

if (status != HAL_OK) {
 8000cf6:	7dfb      	ldrb	r3, [r7, #23]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <AIC3X_WriteADCMixControl+0x23a>
	return status;
 8000cfc:	7dfb      	ldrb	r3, [r7, #23]
 8000cfe:	e01c      	b.n	8000d3a <AIC3X_WriteADCMixControl+0x274>
}

status = AIC3X_WriteData(haic3x, MIC1R_LADC_CTRL, (uint8_t*) &writeBufferMIC1RP,
 8000d00:	f107 0210 	add.w	r2, r7, #16
 8000d04:	2302      	movs	r3, #2
 8000d06:	2115      	movs	r1, #21
 8000d08:	6878      	ldr	r0, [r7, #4]
 8000d0a:	f7ff fdbf 	bl	800088c <AIC3X_WriteData>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	75fb      	strb	r3, [r7, #23]
		sizeof(writeBufferMIC1RP));

if (status != HAL_OK) {
 8000d12:	7dfb      	ldrb	r3, [r7, #23]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <AIC3X_WriteADCMixControl+0x256>
	return status;
 8000d18:	7dfb      	ldrb	r3, [r7, #23]
 8000d1a:	e00e      	b.n	8000d3a <AIC3X_WriteADCMixControl+0x274>
}

status = AIC3X_WriteData(haic3x, MIC1L_RADC_CTRL, &writeBufferRightADCMIC1LP,
 8000d1c:	f107 020f 	add.w	r2, r7, #15
 8000d20:	2301      	movs	r3, #1
 8000d22:	2118      	movs	r1, #24
 8000d24:	6878      	ldr	r0, [r7, #4]
 8000d26:	f7ff fdb1 	bl	800088c <AIC3X_WriteData>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	75fb      	strb	r3, [r7, #23]
		sizeof(writeBufferRightADCMIC1LP));

if (status != HAL_OK) {
 8000d2e:	7dfb      	ldrb	r3, [r7, #23]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <AIC3X_WriteADCMixControl+0x272>
	return status;
 8000d34:	7dfb      	ldrb	r3, [r7, #23]
 8000d36:	e000      	b.n	8000d3a <AIC3X_WriteADCMixControl+0x274>
}

return HAL_OK;
 8000d38:	2300      	movs	r3, #0
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3718      	adds	r7, #24
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <AIC3X_WriteDACPowerControl>:

return HAL_OK;
}

HAL_StatusTypeDef AIC3X_WriteDACPowerControl(AIC3X_HandleTypeDef *haic3x,
	AIC3X_DACPowerControl_TypeDef *pDACPowerControl) {
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b084      	sub	sp, #16
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	6078      	str	r0, [r7, #4]
 8000d4a:	6039      	str	r1, [r7, #0]
if (haic3x == NULL) {
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d101      	bne.n	8000d56 <AIC3X_WriteDACPowerControl+0x14>
	return HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	e035      	b.n	8000dc2 <AIC3X_WriteDACPowerControl+0x80>
}

if (pDACPowerControl == NULL) {
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d101      	bne.n	8000d60 <AIC3X_WriteDACPowerControl+0x1e>
	return HAL_ERROR;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	e030      	b.n	8000dc2 <AIC3X_WriteDACPowerControl+0x80>
}

uint8_t readBuffer;
HAL_StatusTypeDef status;

status = AIC3X_ReadData(haic3x, DAC_PWR, &readBuffer, sizeof(readBuffer));
 8000d60:	f107 020e 	add.w	r2, r7, #14
 8000d64:	2301      	movs	r3, #1
 8000d66:	2125      	movs	r1, #37	@ 0x25
 8000d68:	6878      	ldr	r0, [r7, #4]
 8000d6a:	f7ff fd67 	bl	800083c <AIC3X_ReadData>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	73fb      	strb	r3, [r7, #15]

if (status != HAL_OK) {
 8000d72:	7bfb      	ldrb	r3, [r7, #15]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <AIC3X_WriteDACPowerControl+0x3a>
	return status;
 8000d78:	7bfb      	ldrb	r3, [r7, #15]
 8000d7a:	e022      	b.n	8000dc2 <AIC3X_WriteDACPowerControl+0x80>
}

uint8_t writeBuffer = readBuffer
		& (~(AIC3X_LEFT_DAC_POWER_MASK | AIC3X_RIGHT_DAC_POWER_MASK));
 8000d7c:	7bbb      	ldrb	r3, [r7, #14]
 8000d7e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000d82:	b2db      	uxtb	r3, r3
uint8_t writeBuffer = readBuffer
 8000d84:	737b      	strb	r3, [r7, #13]

writeBuffer |= pDACPowerControl->LeftDACPoweredUp << 7;
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	b25b      	sxtb	r3, r3
 8000d8c:	01db      	lsls	r3, r3, #7
 8000d8e:	b25a      	sxtb	r2, r3
 8000d90:	7b7b      	ldrb	r3, [r7, #13]
 8000d92:	b25b      	sxtb	r3, r3
 8000d94:	4313      	orrs	r3, r2
 8000d96:	b25b      	sxtb	r3, r3
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	737b      	strb	r3, [r7, #13]
writeBuffer |= pDACPowerControl->RightDACPoweredUp << 6;
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	785b      	ldrb	r3, [r3, #1]
 8000da0:	b25b      	sxtb	r3, r3
 8000da2:	019b      	lsls	r3, r3, #6
 8000da4:	b25a      	sxtb	r2, r3
 8000da6:	7b7b      	ldrb	r3, [r7, #13]
 8000da8:	b25b      	sxtb	r3, r3
 8000daa:	4313      	orrs	r3, r2
 8000dac:	b25b      	sxtb	r3, r3
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	737b      	strb	r3, [r7, #13]

return AIC3X_WriteData(haic3x, DAC_PWR, &writeBuffer, sizeof(writeBuffer));
 8000db2:	f107 020d 	add.w	r2, r7, #13
 8000db6:	2301      	movs	r3, #1
 8000db8:	2125      	movs	r1, #37	@ 0x25
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	f7ff fd66 	bl	800088c <AIC3X_WriteData>
 8000dc0:	4603      	mov	r3, r0
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3710      	adds	r7, #16
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <AIC3X_WriteVolControl>:

return HAL_OK;
}

HAL_StatusTypeDef AIC3X_WriteVolControl(AIC3X_HandleTypeDef *haic3x,
	uint8_t reg, AIC3X_VolControl_TypeDef *pVolControl) {
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b086      	sub	sp, #24
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	60f8      	str	r0, [r7, #12]
 8000dd2:	460b      	mov	r3, r1
 8000dd4:	607a      	str	r2, [r7, #4]
 8000dd6:	72fb      	strb	r3, [r7, #11]
if (haic3x == NULL) {
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d101      	bne.n	8000de2 <AIC3X_WriteVolControl+0x18>
	return HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
 8000de0:	e03e      	b.n	8000e60 <AIC3X_WriteVolControl+0x96>
}

if (pVolControl == NULL) {
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d101      	bne.n	8000dec <AIC3X_WriteVolControl+0x22>
	return HAL_ERROR;
 8000de8:	2301      	movs	r3, #1
 8000dea:	e039      	b.n	8000e60 <AIC3X_WriteVolControl+0x96>
}

if (pVolControl->Volume > 127) {
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	785b      	ldrb	r3, [r3, #1]
 8000df0:	b25b      	sxtb	r3, r3
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	da01      	bge.n	8000dfa <AIC3X_WriteVolControl+0x30>
	return HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
 8000df8:	e032      	b.n	8000e60 <AIC3X_WriteVolControl+0x96>
}

uint8_t writeBuffer = 0;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	75fb      	strb	r3, [r7, #23]
if(reg == LDAC_VOL || reg == RDAC_VOL)
 8000dfe:	7afb      	ldrb	r3, [r7, #11]
 8000e00:	2b2b      	cmp	r3, #43	@ 0x2b
 8000e02:	d002      	beq.n	8000e0a <AIC3X_WriteVolControl+0x40>
 8000e04:	7afb      	ldrb	r3, [r7, #11]
 8000e06:	2b2c      	cmp	r3, #44	@ 0x2c
 8000e08:	d10b      	bne.n	8000e22 <AIC3X_WriteVolControl+0x58>
{
	writeBuffer |= pVolControl->Muted << 7;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	b25b      	sxtb	r3, r3
 8000e10:	01db      	lsls	r3, r3, #7
 8000e12:	b25a      	sxtb	r2, r3
 8000e14:	7dfb      	ldrb	r3, [r7, #23]
 8000e16:	b25b      	sxtb	r3, r3
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	b25b      	sxtb	r3, r3
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	75fb      	strb	r3, [r7, #23]
 8000e20:	e00d      	b.n	8000e3e <AIC3X_WriteVolControl+0x74>
}
else
{
	writeBuffer |= ((!pVolControl->Muted ) << 7) & AIC3X_VOL_MUTED_MASK ;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	f083 0301 	eor.w	r3, r3, #1
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <AIC3X_WriteVolControl+0x6a>
 8000e30:	2280      	movs	r2, #128	@ 0x80
 8000e32:	e000      	b.n	8000e36 <AIC3X_WriteVolControl+0x6c>
 8000e34:	2200      	movs	r2, #0
 8000e36:	7dfb      	ldrb	r3, [r7, #23]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	75fb      	strb	r3, [r7, #23]
}
writeBuffer |= pVolControl->Volume & AIC3X_VOL_MASK;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	785b      	ldrb	r3, [r3, #1]
 8000e42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000e46:	b2da      	uxtb	r2, r3
 8000e48:	7dfb      	ldrb	r3, [r7, #23]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	75fb      	strb	r3, [r7, #23]

return AIC3X_WriteData(haic3x, reg, (uint8_t*) &writeBuffer,
 8000e50:	f107 0217 	add.w	r2, r7, #23
 8000e54:	7af9      	ldrb	r1, [r7, #11]
 8000e56:	2301      	movs	r3, #1
 8000e58:	68f8      	ldr	r0, [r7, #12]
 8000e5a:	f7ff fd17 	bl	800088c <AIC3X_WriteData>
 8000e5e:	4603      	mov	r3, r0
		sizeof(writeBuffer));
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3718      	adds	r7, #24
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <AIC3X_WriteOutputLevelControl>:

return HAL_OK;
}

HAL_StatusTypeDef AIC3X_WriteOutputLevelControl(AIC3X_HandleTypeDef *haic3x,
	uint8_t reg, AIC3X_OutputLevelControl_TypeDef *pOutputLevelControl) {
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	460b      	mov	r3, r1
 8000e72:	607a      	str	r2, [r7, #4]
 8000e74:	72fb      	strb	r3, [r7, #11]
if (haic3x == NULL) {
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d101      	bne.n	8000e80 <AIC3X_WriteOutputLevelControl+0x18>
	return HAL_ERROR;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	e04a      	b.n	8000f16 <AIC3X_WriteOutputLevelControl+0xae>
}

if (pOutputLevelControl == NULL) {
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d101      	bne.n	8000e8a <AIC3X_WriteOutputLevelControl+0x22>
	return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	e045      	b.n	8000f16 <AIC3X_WriteOutputLevelControl+0xae>
}

if(pOutputLevelControl->Level > 9)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	2b09      	cmp	r3, #9
 8000e90:	d901      	bls.n	8000e96 <AIC3X_WriteOutputLevelControl+0x2e>
{
	return HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
 8000e94:	e03f      	b.n	8000f16 <AIC3X_WriteOutputLevelControl+0xae>
}

uint8_t writeBuffer = 0;
 8000e96:	2300      	movs	r3, #0
 8000e98:	75fb      	strb	r3, [r7, #23]

writeBuffer |= pOutputLevelControl->Level << 4;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	b25b      	sxtb	r3, r3
 8000ea0:	011b      	lsls	r3, r3, #4
 8000ea2:	b25a      	sxtb	r2, r3
 8000ea4:	7dfb      	ldrb	r3, [r7, #23]
 8000ea6:	b25b      	sxtb	r3, r3
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	b25b      	sxtb	r3, r3
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	75fb      	strb	r3, [r7, #23]
writeBuffer |= (!pOutputLevelControl->Muted) << 3;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	785b      	ldrb	r3, [r3, #1]
 8000eb4:	f083 0301 	eor.w	r3, r3, #1
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	b25b      	sxtb	r3, r3
 8000ebc:	00db      	lsls	r3, r3, #3
 8000ebe:	b25a      	sxtb	r2, r3
 8000ec0:	7dfb      	ldrb	r3, [r7, #23]
 8000ec2:	b25b      	sxtb	r3, r3
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	b25b      	sxtb	r3, r3
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	75fb      	strb	r3, [r7, #23]
writeBuffer |= pOutputLevelControl->PowerDownDriveControl << 2;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	789b      	ldrb	r3, [r3, #2]
 8000ed0:	b25b      	sxtb	r3, r3
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	b25a      	sxtb	r2, r3
 8000ed6:	7dfb      	ldrb	r3, [r7, #23]
 8000ed8:	b25b      	sxtb	r3, r3
 8000eda:	4313      	orrs	r3, r2
 8000edc:	b25b      	sxtb	r3, r3
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	75fb      	strb	r3, [r7, #23]
writeBuffer |= pOutputLevelControl->VolumeControlStatus << 1;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	78db      	ldrb	r3, [r3, #3]
 8000ee6:	b25b      	sxtb	r3, r3
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	b25a      	sxtb	r2, r3
 8000eec:	7dfb      	ldrb	r3, [r7, #23]
 8000eee:	b25b      	sxtb	r3, r3
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	b25b      	sxtb	r3, r3
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	75fb      	strb	r3, [r7, #23]
writeBuffer |= pOutputLevelControl->PowerControl;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	791b      	ldrb	r3, [r3, #4]
 8000efc:	461a      	mov	r2, r3
 8000efe:	7dfb      	ldrb	r3, [r7, #23]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	75fb      	strb	r3, [r7, #23]

return AIC3X_WriteData(haic3x, reg, (uint8_t*) &writeBuffer,
 8000f06:	f107 0217 	add.w	r2, r7, #23
 8000f0a:	7af9      	ldrb	r1, [r7, #11]
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	68f8      	ldr	r0, [r7, #12]
 8000f10:	f7ff fcbc 	bl	800088c <AIC3X_WriteData>
 8000f14:	4603      	mov	r3, r0
		sizeof(writeBuffer));
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3718      	adds	r7, #24
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
	...

08000f20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b088      	sub	sp, #32
 8000f24:	af02      	add	r7, sp, #8
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/

	timeout = 0xFFFF;
 8000f26:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f2a:	617b      	str	r3, [r7, #20]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0))
 8000f2c:	bf00      	nop
 8000f2e:	4ba6      	ldr	r3, [pc, #664]	@ (80011c8 <main+0x2a8>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d004      	beq.n	8000f44 <main+0x24>
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	1e5a      	subs	r2, r3, #1
 8000f3e:	617a      	str	r2, [r7, #20]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	dcf4      	bgt.n	8000f2e <main+0xe>
		;
	if (timeout < 0) {
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	da01      	bge.n	8000f4e <main+0x2e>
		Error_Handler();
 8000f4a:	f001 fc4d 	bl	80027e8 <Error_Handler>
	}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f4e:	f001 ff45 	bl	8002ddc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f52:	f000 fb9d 	bl	8001690 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000f56:	f000 fc19 	bl	800178c <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
	 HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8000f5a:	4b9b      	ldr	r3, [pc, #620]	@ (80011c8 <main+0x2a8>)
 8000f5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f60:	4a99      	ldr	r2, [pc, #612]	@ (80011c8 <main+0x2a8>)
 8000f62:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f6a:	4b97      	ldr	r3, [pc, #604]	@ (80011c8 <main+0x2a8>)
 8000f6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f74:	603b      	str	r3, [r7, #0]
 8000f76:	683b      	ldr	r3, [r7, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8000f78:	2000      	movs	r0, #0
 8000f7a:	f004 fca9 	bl	80058d0 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0, 0);
 8000f7e:	2100      	movs	r1, #0
 8000f80:	2000      	movs	r0, #0
 8000f82:	f004 fcbf 	bl	8005904 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 8000f86:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f8a:	617b      	str	r3, [r7, #20]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0))
 8000f8c:	bf00      	nop
 8000f8e:	4b8e      	ldr	r3, [pc, #568]	@ (80011c8 <main+0x2a8>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d104      	bne.n	8000fa4 <main+0x84>
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	1e5a      	subs	r2, r3, #1
 8000f9e:	617a      	str	r2, [r7, #20]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	dcf4      	bgt.n	8000f8e <main+0x6e>
		;
	if (timeout < 0) {
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	da01      	bge.n	8000fae <main+0x8e>
		Error_Handler();
 8000faa:	f001 fc1d 	bl	80027e8 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_DMA_Init();
 8000fae:	f000 fd09 	bl	80019c4 <MX_DMA_Init>
  MX_GPIO_Init();
 8000fb2:	f001 f845 	bl	8002040 <MX_GPIO_Init>
  MX_MDMA_Init();
 8000fb6:	f000 fd2d 	bl	8001a14 <MX_MDMA_Init>
  MX_SAI1_Init();
 8000fba:	f000 fc55 	bl	8001868 <MX_SAI1_Init>
  MX_I2C2_Init();
 8000fbe:	f000 fc15 	bl	80017ec <MX_I2C2_Init>
  MX_USART3_UART_Init();
 8000fc2:	f000 fcb3 	bl	800192c <MX_USART3_UART_Init>
  //arm_fir_fast_q15(&S, NUM_TAPS, firCoeffsQ15, firStateQ15, AUDIO_BUFFER_LENGTH_HALF);

  HAL_StatusTypeDef status;
  HAL_StatusTypeDef saiStatus;

	saiStatus = HAL_SAI_Init(&hsai_BlockA1);
 8000fc6:	4881      	ldr	r0, [pc, #516]	@ (80011cc <main+0x2ac>)
 8000fc8:	f009 fde4 	bl	800ab94 <HAL_SAI_Init>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	74fb      	strb	r3, [r7, #19]
	saiStatus = HAL_SAI_Init(&hsai_BlockB1);
 8000fd0:	487f      	ldr	r0, [pc, #508]	@ (80011d0 <main+0x2b0>)
 8000fd2:	f009 fddf 	bl	800ab94 <HAL_SAI_Init>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	74fb      	strb	r3, [r7, #19]
	__HAL_SAI_ENABLE(&hsai_BlockA1);
 8000fda:	4b7c      	ldr	r3, [pc, #496]	@ (80011cc <main+0x2ac>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	4b7a      	ldr	r3, [pc, #488]	@ (80011cc <main+0x2ac>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000fe8:	601a      	str	r2, [r3, #0]
	__HAL_SAI_ENABLE(&hsai_BlockB1);
 8000fea:	4b79      	ldr	r3, [pc, #484]	@ (80011d0 <main+0x2b0>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	4b77      	ldr	r3, [pc, #476]	@ (80011d0 <main+0x2b0>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000ff8:	601a      	str	r2, [r3, #0]
	SET_BIT(audio_rx_status, AUDIO_STATUS_L_HALF_PENDING);
 8000ffa:	4b76      	ldr	r3, [pc, #472]	@ (80011d4 <main+0x2b4>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	f043 0301 	orr.w	r3, r3, #1
 8001004:	b2da      	uxtb	r2, r3
 8001006:	4b73      	ldr	r3, [pc, #460]	@ (80011d4 <main+0x2b4>)
 8001008:	701a      	strb	r2, [r3, #0]

	HAL_Delay(1000);
 800100a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800100e:	f001 ff77 	bl	8002f00 <HAL_Delay>

	status = codecSetup();
 8001012:	f001 faeb 	bl	80025ec <codecSetup>
 8001016:	4603      	mov	r3, r0
 8001018:	74bb      	strb	r3, [r7, #18]
	  if(HAL_OK != HAL_SAI_Receive_DMA(&hsai_BlockA1, (uint8_t*)sai_buffer_rx, sizeof(sai_buffer_tx)/sizeof(uint16_t)))
 800101a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800101e:	496e      	ldr	r1, [pc, #440]	@ (80011d8 <main+0x2b8>)
 8001020:	486a      	ldr	r0, [pc, #424]	@ (80011cc <main+0x2ac>)
 8001022:	f00a f917 	bl	800b254 <HAL_SAI_Receive_DMA>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <main+0x110>
	  {
		Error_Handler();
 800102c:	f001 fbdc 	bl	80027e8 <Error_Handler>
	  }
	  if(HAL_OK != HAL_SAI_Transmit_DMA(&hsai_BlockB1, (uint8_t*)sai_buffer_tx, sizeof(sai_buffer_tx)/sizeof(uint16_t)))
 8001030:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001034:	4969      	ldr	r1, [pc, #420]	@ (80011dc <main+0x2bc>)
 8001036:	4866      	ldr	r0, [pc, #408]	@ (80011d0 <main+0x2b0>)
 8001038:	f00a f856 	bl	800b0e8 <HAL_SAI_Transmit_DMA>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <main+0x126>
	  {
		Error_Handler();
 8001042:	f001 fbd1 	bl	80027e8 <Error_Handler>
	  }

  /* USER CODE END 2 */

  /* Initialize User push-button without interrupt mode. */
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 8001046:	2100      	movs	r1, #0
 8001048:	2000      	movs	r0, #0
 800104a:	f001 fe43 	bl	8002cd4 <BSP_PB_Init>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800104e:	b672      	cpsid	i
}
 8001050:	bf00      	nop

    /* USER CODE BEGIN 3 */

		//Check for completed SAI RX and trigger tranfers from sai to audio buffers
		__disable_irq();
		if (READ_BIT(sai_status,
 8001052:	4b63      	ldr	r3, [pc, #396]	@ (80011e0 <main+0x2c0>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	b2db      	uxtb	r3, r3
 8001058:	f003 0302 	and.w	r3, r3, #2
 800105c:	2b00      	cmp	r3, #0
 800105e:	d03b      	beq.n	80010d8 <main+0x1b8>
				SAI_STATUS_RX_HALF_CPLT) && READ_BIT(audio_rx_status, AUDIO_STATUS_L_HALF_PENDING) == false
 8001060:	4b5c      	ldr	r3, [pc, #368]	@ (80011d4 <main+0x2b4>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	b2db      	uxtb	r3, r3
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	2b00      	cmp	r3, #0
 800106c:	d134      	bne.n	80010d8 <main+0x1b8>
				&& READ_BIT(audio_rx_status, AUDIO_STATUS_L_HALF_CPLT) == false)
 800106e:	4b59      	ldr	r3, [pc, #356]	@ (80011d4 <main+0x2b4>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	b2db      	uxtb	r3, r3
 8001074:	f003 0302 	and.w	r3, r3, #2
 8001078:	2b00      	cmp	r3, #0
 800107a:	d12d      	bne.n	80010d8 <main+0x1b8>
  __ASM volatile ("cpsie i" : : : "memory");
 800107c:	b662      	cpsie	i
}
 800107e:	bf00      	nop
		{
			//TODO Check if previous TX was completed
			__enable_irq();

			SET_BIT(audio_rx_status, AUDIO_STATUS_L_HALF_PENDING);
 8001080:	4b54      	ldr	r3, [pc, #336]	@ (80011d4 <main+0x2b4>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	b2db      	uxtb	r3, r3
 8001086:	f043 0301 	orr.w	r3, r3, #1
 800108a:	b2da      	uxtb	r2, r3
 800108c:	4b51      	ldr	r3, [pc, #324]	@ (80011d4 <main+0x2b4>)
 800108e:	701a      	strb	r2, [r3, #0]
			if (startUpRx)
 8001090:	4b54      	ldr	r3, [pc, #336]	@ (80011e4 <main+0x2c4>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	b2db      	uxtb	r3, r3
 8001096:	2b00      	cmp	r3, #0
 8001098:	d00c      	beq.n	80010b4 <main+0x194>
			{
				startUpRx = false;
 800109a:	4b52      	ldr	r3, [pc, #328]	@ (80011e4 <main+0x2c4>)
 800109c:	2200      	movs	r2, #0
 800109e:	701a      	strb	r2, [r3, #0]
				HAL_MDMA_Start_IT(&hmdma_mdma_channel0_sw_0,
 80010a0:	494d      	ldr	r1, [pc, #308]	@ (80011d8 <main+0x2b8>)
 80010a2:	4a51      	ldr	r2, [pc, #324]	@ (80011e8 <main+0x2c8>)
 80010a4:	2301      	movs	r3, #1
 80010a6:	9300      	str	r3, [sp, #0]
 80010a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010ac:	484f      	ldr	r0, [pc, #316]	@ (80011ec <main+0x2cc>)
 80010ae:	f005 fcea 	bl	8006a86 <HAL_MDMA_Start_IT>
			if (startUpRx)
 80010b2:	e0a1      	b.n	80011f8 <main+0x2d8>
						(uint32_t) audio_buffer_rx_ch1_l, AUDIO_BUFFER_SIZE_HALF,
						1);
			}
			else
			{
				if (READ_BIT(audio_tx_status, AUDIO_STATUS_L_CPLT) == false
 80010b4:	4b4e      	ldr	r3, [pc, #312]	@ (80011f0 <main+0x2d0>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	f003 0320 	and.w	r3, r3, #32
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d106      	bne.n	80010d0 <main+0x1b0>
						&& READ_BIT(audio_tx_status, AUDIO_STATUS_R_CPLT)
								== false)
 80010c2:	4b4b      	ldr	r3, [pc, #300]	@ (80011f0 <main+0x2d0>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	b25b      	sxtb	r3, r3
						&& READ_BIT(audio_tx_status, AUDIO_STATUS_R_CPLT)
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	db00      	blt.n	80010d0 <main+0x1b0>
				{
					__BKPT();
 80010ce:	be00      	bkpt	0x0000
				}
				HAL_MDMA_GenerateSWRequest(&hmdma_mdma_channel0_sw_0);
 80010d0:	4846      	ldr	r0, [pc, #280]	@ (80011ec <main+0x2cc>)
 80010d2:	f005 fd59 	bl	8006b88 <HAL_MDMA_GenerateSWRequest>
			if (startUpRx)
 80010d6:	e08f      	b.n	80011f8 <main+0x2d8>

			}

		}
		else if (READ_BIT(audio_rx_status,
 80010d8:	4b3e      	ldr	r3, [pc, #248]	@ (80011d4 <main+0x2b4>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	f003 0302 	and.w	r3, r3, #2
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d01b      	beq.n	800111e <main+0x1fe>
				AUDIO_STATUS_L_HALF_CPLT) && READ_BIT(audio_rx_status, AUDIO_STATUS_R_HALF_PENDING) == false
 80010e6:	4b3b      	ldr	r3, [pc, #236]	@ (80011d4 <main+0x2b4>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	f003 0304 	and.w	r3, r3, #4
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d114      	bne.n	800111e <main+0x1fe>
				&& READ_BIT(audio_rx_status, AUDIO_STATUS_R_HALF_CPLT) == false)
 80010f4:	4b37      	ldr	r3, [pc, #220]	@ (80011d4 <main+0x2b4>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	f003 0308 	and.w	r3, r3, #8
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d10d      	bne.n	800111e <main+0x1fe>
  __ASM volatile ("cpsie i" : : : "memory");
 8001102:	b662      	cpsie	i
}
 8001104:	bf00      	nop
		{
			__enable_irq();

			SET_BIT(audio_rx_status, AUDIO_STATUS_R_HALF_PENDING);
 8001106:	4b33      	ldr	r3, [pc, #204]	@ (80011d4 <main+0x2b4>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	b2db      	uxtb	r3, r3
 800110c:	f043 0304 	orr.w	r3, r3, #4
 8001110:	b2da      	uxtb	r2, r3
 8001112:	4b30      	ldr	r3, [pc, #192]	@ (80011d4 <main+0x2b4>)
 8001114:	701a      	strb	r2, [r3, #0]

			HAL_MDMA_GenerateSWRequest(&hmdma_mdma_channel0_sw_0);
 8001116:	4835      	ldr	r0, [pc, #212]	@ (80011ec <main+0x2cc>)
 8001118:	f005 fd36 	bl	8006b88 <HAL_MDMA_GenerateSWRequest>
 800111c:	e06c      	b.n	80011f8 <main+0x2d8>
		}
		else if (READ_BIT(sai_status,
 800111e:	4b30      	ldr	r3, [pc, #192]	@ (80011e0 <main+0x2c0>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	b2db      	uxtb	r3, r3
 8001124:	f003 0308 	and.w	r3, r3, #8
 8001128:	2b00      	cmp	r3, #0
 800112a:	d02a      	beq.n	8001182 <main+0x262>
				SAI_STATUS_RX_FULL_CPLT) && READ_BIT(audio_rx_status, AUDIO_STATUS_L_PENDING) == false
 800112c:	4b29      	ldr	r3, [pc, #164]	@ (80011d4 <main+0x2b4>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	b2db      	uxtb	r3, r3
 8001132:	f003 0310 	and.w	r3, r3, #16
 8001136:	2b00      	cmp	r3, #0
 8001138:	d123      	bne.n	8001182 <main+0x262>
				&& READ_BIT(audio_rx_status, AUDIO_STATUS_L_CPLT) == false)
 800113a:	4b26      	ldr	r3, [pc, #152]	@ (80011d4 <main+0x2b4>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	b2db      	uxtb	r3, r3
 8001140:	f003 0320 	and.w	r3, r3, #32
 8001144:	2b00      	cmp	r3, #0
 8001146:	d11c      	bne.n	8001182 <main+0x262>
  __ASM volatile ("cpsie i" : : : "memory");
 8001148:	b662      	cpsie	i
}
 800114a:	bf00      	nop
		{
			//TODO Check if previous TX was completed
			__enable_irq();

			if (READ_BIT(audio_tx_status, AUDIO_STATUS_L_HALF_CPLT) == false
 800114c:	4b28      	ldr	r3, [pc, #160]	@ (80011f0 <main+0x2d0>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	b2db      	uxtb	r3, r3
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	2b00      	cmp	r3, #0
 8001158:	d107      	bne.n	800116a <main+0x24a>
					&& READ_BIT(audio_tx_status, AUDIO_STATUS_R_HALF_CPLT)
 800115a:	4b25      	ldr	r3, [pc, #148]	@ (80011f0 <main+0x2d0>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	b2db      	uxtb	r3, r3
 8001160:	f003 0308 	and.w	r3, r3, #8
 8001164:	2b00      	cmp	r3, #0
 8001166:	d100      	bne.n	800116a <main+0x24a>
							== false)
			{
				__BKPT();
 8001168:	be00      	bkpt	0x0000
			}
			SET_BIT(audio_rx_status, AUDIO_STATUS_L_PENDING);
 800116a:	4b1a      	ldr	r3, [pc, #104]	@ (80011d4 <main+0x2b4>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	b2db      	uxtb	r3, r3
 8001170:	f043 0310 	orr.w	r3, r3, #16
 8001174:	b2da      	uxtb	r2, r3
 8001176:	4b17      	ldr	r3, [pc, #92]	@ (80011d4 <main+0x2b4>)
 8001178:	701a      	strb	r2, [r3, #0]

			HAL_MDMA_GenerateSWRequest(&hmdma_mdma_channel0_sw_0);
 800117a:	481c      	ldr	r0, [pc, #112]	@ (80011ec <main+0x2cc>)
 800117c:	f005 fd04 	bl	8006b88 <HAL_MDMA_GenerateSWRequest>
 8001180:	e03a      	b.n	80011f8 <main+0x2d8>
		}
		else if (READ_BIT(audio_rx_status,
 8001182:	4b14      	ldr	r3, [pc, #80]	@ (80011d4 <main+0x2b4>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	b2db      	uxtb	r3, r3
 8001188:	f003 0320 	and.w	r3, r3, #32
 800118c:	2b00      	cmp	r3, #0
 800118e:	d031      	beq.n	80011f4 <main+0x2d4>
				AUDIO_STATUS_L_CPLT) && READ_BIT(audio_rx_status, AUDIO_STATUS_R_PENDING) == false
 8001190:	4b10      	ldr	r3, [pc, #64]	@ (80011d4 <main+0x2b4>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	b2db      	uxtb	r3, r3
 8001196:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800119a:	2b00      	cmp	r3, #0
 800119c:	d12a      	bne.n	80011f4 <main+0x2d4>
				&& READ_BIT(audio_rx_status, AUDIO_STATUS_R_CPLT) == false)
 800119e:	4b0d      	ldr	r3, [pc, #52]	@ (80011d4 <main+0x2b4>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	b25b      	sxtb	r3, r3
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	db24      	blt.n	80011f4 <main+0x2d4>
  __ASM volatile ("cpsie i" : : : "memory");
 80011aa:	b662      	cpsie	i
}
 80011ac:	bf00      	nop
		{
			__enable_irq();

			SET_BIT(audio_rx_status, AUDIO_STATUS_R_PENDING);
 80011ae:	4b09      	ldr	r3, [pc, #36]	@ (80011d4 <main+0x2b4>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80011b8:	b2da      	uxtb	r2, r3
 80011ba:	4b06      	ldr	r3, [pc, #24]	@ (80011d4 <main+0x2b4>)
 80011bc:	701a      	strb	r2, [r3, #0]

			HAL_MDMA_GenerateSWRequest(&hmdma_mdma_channel0_sw_0);
 80011be:	480b      	ldr	r0, [pc, #44]	@ (80011ec <main+0x2cc>)
 80011c0:	f005 fce2 	bl	8006b88 <HAL_MDMA_GenerateSWRequest>
 80011c4:	e018      	b.n	80011f8 <main+0x2d8>
 80011c6:	bf00      	nop
 80011c8:	58024400 	.word	0x58024400
 80011cc:	24000090 	.word	0x24000090
 80011d0:	24000128 	.word	0x24000128
 80011d4:	24000d80 	.word	0x24000d80
 80011d8:	24000580 	.word	0x24000580
 80011dc:	24000980 	.word	0x24000980
 80011e0:	24000d83 	.word	0x24000d83
 80011e4:	24000008 	.word	0x24000008
 80011e8:	20000000 	.word	0x20000000
 80011ec:	24000344 	.word	0x24000344
 80011f0:	24000d82 	.word	0x24000d82
  __ASM volatile ("cpsie i" : : : "memory");
 80011f4:	b662      	cpsie	i
}
 80011f6:	bf00      	nop
  __ASM volatile ("cpsid i" : : : "memory");
 80011f8:	b672      	cpsid	i
}
 80011fa:	bf00      	nop
		}

		//Check for completed audio rx transfers and run dsp

		__disable_irq();
		if (READ_BIT(audio_rx_status,
 80011fc:	4b97      	ldr	r3, [pc, #604]	@ (800145c <main+0x53c>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	b2db      	uxtb	r3, r3
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	2b00      	cmp	r3, #0
 8001208:	d036      	beq.n	8001278 <main+0x358>
				AUDIO_STATUS_L_HALF_CPLT) && READ_BIT(audio_dsp_status, AUDIO_STATUS_L_HALF_PENDING) == false
 800120a:	4b95      	ldr	r3, [pc, #596]	@ (8001460 <main+0x540>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	b2db      	uxtb	r3, r3
 8001210:	f003 0301 	and.w	r3, r3, #1
 8001214:	2b00      	cmp	r3, #0
 8001216:	d12f      	bne.n	8001278 <main+0x358>
				&& READ_BIT(audio_dsp_status, AUDIO_STATUS_L_HALF_CPLT) == false)
 8001218:	4b91      	ldr	r3, [pc, #580]	@ (8001460 <main+0x540>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	b2db      	uxtb	r3, r3
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	2b00      	cmp	r3, #0
 8001224:	d128      	bne.n	8001278 <main+0x358>
  __ASM volatile ("cpsie i" : : : "memory");
 8001226:	b662      	cpsie	i
}
 8001228:	bf00      	nop
		{
			__enable_irq();
			SET_BIT(audio_dsp_status, AUDIO_STATUS_L_HALF_PENDING);
 800122a:	4b8d      	ldr	r3, [pc, #564]	@ (8001460 <main+0x540>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	b2db      	uxtb	r3, r3
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	b2da      	uxtb	r2, r3
 8001236:	4b8a      	ldr	r3, [pc, #552]	@ (8001460 <main+0x540>)
 8001238:	701a      	strb	r2, [r3, #0]
			CLEAR_BIT(audio_dsp_status, AUDIO_STATUS_L_HALF_CPLT);
 800123a:	4b89      	ldr	r3, [pc, #548]	@ (8001460 <main+0x540>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	b2db      	uxtb	r3, r3
 8001240:	f023 0302 	bic.w	r3, r3, #2
 8001244:	b2da      	uxtb	r2, r3
 8001246:	4b86      	ldr	r3, [pc, #536]	@ (8001460 <main+0x540>)
 8001248:	701a      	strb	r2, [r3, #0]

			//Do DSP of left channel first half here
			memcpy((void*) audio_buffer_rx_ch1_l,
 800124a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800124e:	4985      	ldr	r1, [pc, #532]	@ (8001464 <main+0x544>)
 8001250:	4885      	ldr	r0, [pc, #532]	@ (8001468 <main+0x548>)
 8001252:	f00b fc0b 	bl	800ca6c <memcpy>
					(void*) audio_buffer_tx_ch1_l, AUDIO_BUFFER_LENGTH_HALF * AUDIO_SAMPLE_SIZE);

			CLEAR_BIT(audio_dsp_status, AUDIO_STATUS_L_HALF_PENDING);
 8001256:	4b82      	ldr	r3, [pc, #520]	@ (8001460 <main+0x540>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	b2db      	uxtb	r3, r3
 800125c:	f023 0301 	bic.w	r3, r3, #1
 8001260:	b2da      	uxtb	r2, r3
 8001262:	4b7f      	ldr	r3, [pc, #508]	@ (8001460 <main+0x540>)
 8001264:	701a      	strb	r2, [r3, #0]
			SET_BIT(audio_dsp_status, AUDIO_STATUS_L_HALF_CPLT);
 8001266:	4b7e      	ldr	r3, [pc, #504]	@ (8001460 <main+0x540>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	b2db      	uxtb	r3, r3
 800126c:	f043 0302 	orr.w	r3, r3, #2
 8001270:	b2da      	uxtb	r2, r3
 8001272:	4b7b      	ldr	r3, [pc, #492]	@ (8001460 <main+0x540>)
 8001274:	701a      	strb	r2, [r3, #0]
 8001276:	e0ab      	b.n	80013d0 <main+0x4b0>
		}
		else if (READ_BIT(audio_rx_status,
 8001278:	4b78      	ldr	r3, [pc, #480]	@ (800145c <main+0x53c>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	b2db      	uxtb	r3, r3
 800127e:	f003 0308 	and.w	r3, r3, #8
 8001282:	2b00      	cmp	r3, #0
 8001284:	d026      	beq.n	80012d4 <main+0x3b4>
				AUDIO_STATUS_R_HALF_CPLT) && READ_BIT(audio_dsp_status, AUDIO_STATUS_R_HALF_PENDING) == false
 8001286:	4b76      	ldr	r3, [pc, #472]	@ (8001460 <main+0x540>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	b2db      	uxtb	r3, r3
 800128c:	f003 0304 	and.w	r3, r3, #4
 8001290:	2b00      	cmp	r3, #0
 8001292:	d11f      	bne.n	80012d4 <main+0x3b4>
				&& READ_BIT(audio_dsp_status, AUDIO_STATUS_R_HALF_CPLT) == false)
 8001294:	4b72      	ldr	r3, [pc, #456]	@ (8001460 <main+0x540>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	b2db      	uxtb	r3, r3
 800129a:	f003 0308 	and.w	r3, r3, #8
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d118      	bne.n	80012d4 <main+0x3b4>
  __ASM volatile ("cpsie i" : : : "memory");
 80012a2:	b662      	cpsie	i
}
 80012a4:	bf00      	nop
		{
			__enable_irq();

			SET_BIT(audio_dsp_status, AUDIO_STATUS_R_HALF_PENDING);
 80012a6:	4b6e      	ldr	r3, [pc, #440]	@ (8001460 <main+0x540>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	f043 0304 	orr.w	r3, r3, #4
 80012b0:	b2da      	uxtb	r2, r3
 80012b2:	4b6b      	ldr	r3, [pc, #428]	@ (8001460 <main+0x540>)
 80012b4:	701a      	strb	r2, [r3, #0]
			CLEAR_BIT(audio_dsp_status, AUDIO_STATUS_R_HALF_CPLT);
 80012b6:	4b6a      	ldr	r3, [pc, #424]	@ (8001460 <main+0x540>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	f023 0308 	bic.w	r3, r3, #8
 80012c0:	b2da      	uxtb	r2, r3
 80012c2:	4b67      	ldr	r3, [pc, #412]	@ (8001460 <main+0x540>)
 80012c4:	701a      	strb	r2, [r3, #0]

			//Do DSP of right channel first half here
			memcpy((void*) audio_buffer_rx_ch1_r,
 80012c6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012ca:	4968      	ldr	r1, [pc, #416]	@ (800146c <main+0x54c>)
 80012cc:	4868      	ldr	r0, [pc, #416]	@ (8001470 <main+0x550>)
 80012ce:	f00b fbcd 	bl	800ca6c <memcpy>
 80012d2:	e07d      	b.n	80013d0 <main+0x4b0>
					(void*) audio_buffer_tx_ch1_r, AUDIO_BUFFER_LENGTH_HALF * AUDIO_SAMPLE_SIZE);


		}
		else if (READ_BIT(audio_rx_status,
 80012d4:	4b61      	ldr	r3, [pc, #388]	@ (800145c <main+0x53c>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	f003 0320 	and.w	r3, r3, #32
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d037      	beq.n	8001352 <main+0x432>
				AUDIO_STATUS_L_CPLT) && READ_BIT(audio_dsp_status, AUDIO_STATUS_L_PENDING) == false
 80012e2:	4b5f      	ldr	r3, [pc, #380]	@ (8001460 <main+0x540>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	f003 0310 	and.w	r3, r3, #16
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d130      	bne.n	8001352 <main+0x432>
				&& READ_BIT(audio_dsp_status, AUDIO_STATUS_L_CPLT) == false)
 80012f0:	4b5b      	ldr	r3, [pc, #364]	@ (8001460 <main+0x540>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	f003 0320 	and.w	r3, r3, #32
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d129      	bne.n	8001352 <main+0x432>
  __ASM volatile ("cpsie i" : : : "memory");
 80012fe:	b662      	cpsie	i
}
 8001300:	bf00      	nop
		{
			__enable_irq();

			SET_BIT(audio_dsp_status, AUDIO_STATUS_L_PENDING);
 8001302:	4b57      	ldr	r3, [pc, #348]	@ (8001460 <main+0x540>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	b2db      	uxtb	r3, r3
 8001308:	f043 0310 	orr.w	r3, r3, #16
 800130c:	b2da      	uxtb	r2, r3
 800130e:	4b54      	ldr	r3, [pc, #336]	@ (8001460 <main+0x540>)
 8001310:	701a      	strb	r2, [r3, #0]
			CLEAR_BIT(audio_dsp_status, AUDIO_STATUS_L_CPLT);
 8001312:	4b53      	ldr	r3, [pc, #332]	@ (8001460 <main+0x540>)
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	b2db      	uxtb	r3, r3
 8001318:	f023 0320 	bic.w	r3, r3, #32
 800131c:	b2da      	uxtb	r2, r3
 800131e:	4b50      	ldr	r3, [pc, #320]	@ (8001460 <main+0x540>)
 8001320:	701a      	strb	r2, [r3, #0]

			//Do DSP of left channel second half here
			memcpy((void*) audio_buffer_rx_ch1_l + AUDIO_BUFFER_LENGTH_HALF,
 8001322:	4b54      	ldr	r3, [pc, #336]	@ (8001474 <main+0x554>)
 8001324:	4954      	ldr	r1, [pc, #336]	@ (8001478 <main+0x558>)
 8001326:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800132a:	4618      	mov	r0, r3
 800132c:	f00b fb9e 	bl	800ca6c <memcpy>
					(void*) audio_buffer_tx_ch1_l + AUDIO_BUFFER_LENGTH_HALF, AUDIO_BUFFER_LENGTH_HALF * AUDIO_SAMPLE_SIZE);

			CLEAR_BIT(audio_dsp_status, AUDIO_STATUS_L_PENDING);
 8001330:	4b4b      	ldr	r3, [pc, #300]	@ (8001460 <main+0x540>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	b2db      	uxtb	r3, r3
 8001336:	f023 0310 	bic.w	r3, r3, #16
 800133a:	b2da      	uxtb	r2, r3
 800133c:	4b48      	ldr	r3, [pc, #288]	@ (8001460 <main+0x540>)
 800133e:	701a      	strb	r2, [r3, #0]
			SET_BIT(audio_dsp_status, AUDIO_STATUS_L_CPLT);
 8001340:	4b47      	ldr	r3, [pc, #284]	@ (8001460 <main+0x540>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	b2db      	uxtb	r3, r3
 8001346:	f043 0320 	orr.w	r3, r3, #32
 800134a:	b2da      	uxtb	r2, r3
 800134c:	4b44      	ldr	r3, [pc, #272]	@ (8001460 <main+0x540>)
 800134e:	701a      	strb	r2, [r3, #0]
 8001350:	e03e      	b.n	80013d0 <main+0x4b0>
		}
		else if (READ_BIT(audio_rx_status,
 8001352:	4b42      	ldr	r3, [pc, #264]	@ (800145c <main+0x53c>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	b2db      	uxtb	r3, r3
 8001358:	b25b      	sxtb	r3, r3
 800135a:	2b00      	cmp	r3, #0
 800135c:	da36      	bge.n	80013cc <main+0x4ac>
				AUDIO_STATUS_R_CPLT) && READ_BIT(audio_dsp_status, AUDIO_STATUS_R_PENDING) == false
 800135e:	4b40      	ldr	r3, [pc, #256]	@ (8001460 <main+0x540>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	b2db      	uxtb	r3, r3
 8001364:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001368:	2b00      	cmp	r3, #0
 800136a:	d12f      	bne.n	80013cc <main+0x4ac>
				&& READ_BIT(audio_dsp_status, AUDIO_STATUS_R_CPLT) == false)
 800136c:	4b3c      	ldr	r3, [pc, #240]	@ (8001460 <main+0x540>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	b2db      	uxtb	r3, r3
 8001372:	b25b      	sxtb	r3, r3
 8001374:	2b00      	cmp	r3, #0
 8001376:	db29      	blt.n	80013cc <main+0x4ac>
  __ASM volatile ("cpsie i" : : : "memory");
 8001378:	b662      	cpsie	i
}
 800137a:	bf00      	nop
		{
			__enable_irq();

			SET_BIT(audio_dsp_status, AUDIO_STATUS_R_PENDING);
 800137c:	4b38      	ldr	r3, [pc, #224]	@ (8001460 <main+0x540>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	b2db      	uxtb	r3, r3
 8001382:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001386:	b2da      	uxtb	r2, r3
 8001388:	4b35      	ldr	r3, [pc, #212]	@ (8001460 <main+0x540>)
 800138a:	701a      	strb	r2, [r3, #0]
			CLEAR_BIT(audio_dsp_status, AUDIO_STATUS_R_CPLT);
 800138c:	4b34      	ldr	r3, [pc, #208]	@ (8001460 <main+0x540>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	b2db      	uxtb	r3, r3
 8001392:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001396:	b2da      	uxtb	r2, r3
 8001398:	4b31      	ldr	r3, [pc, #196]	@ (8001460 <main+0x540>)
 800139a:	701a      	strb	r2, [r3, #0]

			//Do DSP of left channel second half here
			memcpy((void*) audio_buffer_rx_ch1_r + AUDIO_BUFFER_LENGTH_HALF,
 800139c:	4b37      	ldr	r3, [pc, #220]	@ (800147c <main+0x55c>)
 800139e:	4938      	ldr	r1, [pc, #224]	@ (8001480 <main+0x560>)
 80013a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013a4:	4618      	mov	r0, r3
 80013a6:	f00b fb61 	bl	800ca6c <memcpy>
					(void*) audio_buffer_tx_ch1_r + AUDIO_BUFFER_LENGTH_HALF, AUDIO_BUFFER_LENGTH_HALF * AUDIO_SAMPLE_SIZE);

			CLEAR_BIT(audio_dsp_status, AUDIO_STATUS_R_PENDING);
 80013aa:	4b2d      	ldr	r3, [pc, #180]	@ (8001460 <main+0x540>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	4b2a      	ldr	r3, [pc, #168]	@ (8001460 <main+0x540>)
 80013b8:	701a      	strb	r2, [r3, #0]
			SET_BIT(audio_dsp_status, AUDIO_STATUS_R_CPLT);
 80013ba:	4b29      	ldr	r3, [pc, #164]	@ (8001460 <main+0x540>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80013c4:	b2da      	uxtb	r2, r3
 80013c6:	4b26      	ldr	r3, [pc, #152]	@ (8001460 <main+0x540>)
 80013c8:	701a      	strb	r2, [r3, #0]
 80013ca:	e001      	b.n	80013d0 <main+0x4b0>
  __ASM volatile ("cpsie i" : : : "memory");
 80013cc:	b662      	cpsie	i
}
 80013ce:	bf00      	nop
  __ASM volatile ("cpsid i" : : : "memory");
 80013d0:	b672      	cpsid	i
}
 80013d2:	bf00      	nop



		//check for completed dsp and trigger tranfers from audio to sai buffer
		__disable_irq();
		if (READ_BIT(audio_dsp_status,
 80013d4:	4b22      	ldr	r3, [pc, #136]	@ (8001460 <main+0x540>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	f003 0302 	and.w	r3, r3, #2
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d058      	beq.n	8001494 <main+0x574>
				AUDIO_STATUS_L_HALF_CPLT) && READ_BIT(audio_rx_status, AUDIO_STATUS_R_HALF_CPLT)
 80013e2:	4b1e      	ldr	r3, [pc, #120]	@ (800145c <main+0x53c>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	f003 0308 	and.w	r3, r3, #8
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d051      	beq.n	8001494 <main+0x574>
				&& READ_BIT(audio_tx_status, AUDIO_STATUS_L_HALF_PENDING) == false
 80013f0:	4b24      	ldr	r3, [pc, #144]	@ (8001484 <main+0x564>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d14a      	bne.n	8001494 <main+0x574>
				&& READ_BIT(audio_tx_status, AUDIO_STATUS_L_HALF_CPLT) == false)
 80013fe:	4b21      	ldr	r3, [pc, #132]	@ (8001484 <main+0x564>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	b2db      	uxtb	r3, r3
 8001404:	f003 0302 	and.w	r3, r3, #2
 8001408:	2b00      	cmp	r3, #0
 800140a:	d143      	bne.n	8001494 <main+0x574>
  __ASM volatile ("cpsie i" : : : "memory");
 800140c:	b662      	cpsie	i
}
 800140e:	bf00      	nop
		{
			__enable_irq();

			SET_BIT(audio_tx_status, AUDIO_STATUS_L_HALF_PENDING);
 8001410:	4b1c      	ldr	r3, [pc, #112]	@ (8001484 <main+0x564>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	b2db      	uxtb	r3, r3
 8001416:	f043 0301 	orr.w	r3, r3, #1
 800141a:	b2da      	uxtb	r2, r3
 800141c:	4b19      	ldr	r3, [pc, #100]	@ (8001484 <main+0x564>)
 800141e:	701a      	strb	r2, [r3, #0]
			CLEAR_BIT(audio_tx_status, AUDIO_STATUS_L_HALF_CPLT);
 8001420:	4b18      	ldr	r3, [pc, #96]	@ (8001484 <main+0x564>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	b2db      	uxtb	r3, r3
 8001426:	f023 0302 	bic.w	r3, r3, #2
 800142a:	b2da      	uxtb	r2, r3
 800142c:	4b15      	ldr	r3, [pc, #84]	@ (8001484 <main+0x564>)
 800142e:	701a      	strb	r2, [r3, #0]
			if (startUpTx)
 8001430:	4b15      	ldr	r3, [pc, #84]	@ (8001488 <main+0x568>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	b2db      	uxtb	r3, r3
 8001436:	2b00      	cmp	r3, #0
 8001438:	d00c      	beq.n	8001454 <main+0x534>
			{
				startUpTx = false;
 800143a:	4b13      	ldr	r3, [pc, #76]	@ (8001488 <main+0x568>)
 800143c:	2200      	movs	r2, #0
 800143e:	701a      	strb	r2, [r3, #0]
				HAL_MDMA_Start_IT(&hmdma_mdma_channel2_sw_0,
 8001440:	4908      	ldr	r1, [pc, #32]	@ (8001464 <main+0x544>)
 8001442:	4a12      	ldr	r2, [pc, #72]	@ (800148c <main+0x56c>)
 8001444:	2301      	movs	r3, #1
 8001446:	9300      	str	r3, [sp, #0]
 8001448:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800144c:	4810      	ldr	r0, [pc, #64]	@ (8001490 <main+0x570>)
 800144e:	f005 fb1a 	bl	8006a86 <HAL_MDMA_Start_IT>
			if (startUpTx)
 8001452:	e0b4      	b.n	80015be <main+0x69e>
						(uint32_t) audio_buffer_tx_ch1_l,
						(uint32_t) sai_buffer_tx, AUDIO_BUFFER_SIZE_HALF,
						1);
			}
			else{
				HAL_MDMA_GenerateSWRequest(&hmdma_mdma_channel2_sw_0);
 8001454:	480e      	ldr	r0, [pc, #56]	@ (8001490 <main+0x570>)
 8001456:	f005 fb97 	bl	8006b88 <HAL_MDMA_GenerateSWRequest>
			if (startUpTx)
 800145a:	e0b0      	b.n	80015be <main+0x69e>
 800145c:	24000d80 	.word	0x24000d80
 8001460:	24000d81 	.word	0x24000d81
 8001464:	20000400 	.word	0x20000400
 8001468:	20000000 	.word	0x20000000
 800146c:	20000600 	.word	0x20000600
 8001470:	20000200 	.word	0x20000200
 8001474:	20000080 	.word	0x20000080
 8001478:	20000480 	.word	0x20000480
 800147c:	20000280 	.word	0x20000280
 8001480:	20000680 	.word	0x20000680
 8001484:	24000d82 	.word	0x24000d82
 8001488:	24000009 	.word	0x24000009
 800148c:	24000980 	.word	0x24000980
 8001490:	24000450 	.word	0x24000450
			}
		}
		else if (READ_BIT(audio_dsp_status, AUDIO_STATUS_R_HALF_CPLT) &&
 8001494:	4b7a      	ldr	r3, [pc, #488]	@ (8001680 <main+0x760>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	b2db      	uxtb	r3, r3
 800149a:	f003 0308 	and.w	r3, r3, #8
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d02a      	beq.n	80014f8 <main+0x5d8>
		READ_BIT(audio_tx_status, AUDIO_STATUS_L_HALF_CPLT)
 80014a2:	4b78      	ldr	r3, [pc, #480]	@ (8001684 <main+0x764>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	f003 0302 	and.w	r3, r3, #2
		else if (READ_BIT(audio_dsp_status, AUDIO_STATUS_R_HALF_CPLT) &&
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d023      	beq.n	80014f8 <main+0x5d8>
		&& READ_BIT(audio_tx_status, AUDIO_STATUS_R_HALF_PENDING) == false
 80014b0:	4b74      	ldr	r3, [pc, #464]	@ (8001684 <main+0x764>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	f003 0304 	and.w	r3, r3, #4
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d11c      	bne.n	80014f8 <main+0x5d8>
		&& READ_BIT(audio_tx_status, AUDIO_STATUS_R_HALF_CPLT) == false)
 80014be:	4b71      	ldr	r3, [pc, #452]	@ (8001684 <main+0x764>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	f003 0308 	and.w	r3, r3, #8
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d115      	bne.n	80014f8 <main+0x5d8>
  __ASM volatile ("cpsie i" : : : "memory");
 80014cc:	b662      	cpsie	i
}
 80014ce:	bf00      	nop
		{
			__enable_irq();

			SET_BIT(audio_tx_status, AUDIO_STATUS_R_HALF_PENDING);
 80014d0:	4b6c      	ldr	r3, [pc, #432]	@ (8001684 <main+0x764>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	f043 0304 	orr.w	r3, r3, #4
 80014da:	b2da      	uxtb	r2, r3
 80014dc:	4b69      	ldr	r3, [pc, #420]	@ (8001684 <main+0x764>)
 80014de:	701a      	strb	r2, [r3, #0]
			CLEAR_BIT(audio_tx_status, AUDIO_STATUS_R_HALF_CPLT);
 80014e0:	4b68      	ldr	r3, [pc, #416]	@ (8001684 <main+0x764>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	f023 0308 	bic.w	r3, r3, #8
 80014ea:	b2da      	uxtb	r2, r3
 80014ec:	4b65      	ldr	r3, [pc, #404]	@ (8001684 <main+0x764>)
 80014ee:	701a      	strb	r2, [r3, #0]
			HAL_MDMA_GenerateSWRequest(&hmdma_mdma_channel2_sw_0);
 80014f0:	4865      	ldr	r0, [pc, #404]	@ (8001688 <main+0x768>)
 80014f2:	f005 fb49 	bl	8006b88 <HAL_MDMA_GenerateSWRequest>
 80014f6:	e062      	b.n	80015be <main+0x69e>
		}
		else if (READ_BIT(audio_dsp_status, AUDIO_STATUS_L_CPLT) &&
 80014f8:	4b61      	ldr	r3, [pc, #388]	@ (8001680 <main+0x760>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	f003 0320 	and.w	r3, r3, #32
 8001502:	2b00      	cmp	r3, #0
 8001504:	d029      	beq.n	800155a <main+0x63a>
 8001506:	4b61      	ldr	r3, [pc, #388]	@ (800168c <main+0x76c>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	b2db      	uxtb	r3, r3
 800150c:	b25b      	sxtb	r3, r3
 800150e:	2b00      	cmp	r3, #0
 8001510:	da23      	bge.n	800155a <main+0x63a>
		READ_BIT(audio_rx_status, AUDIO_STATUS_R_CPLT)
		&& READ_BIT(audio_tx_status, AUDIO_STATUS_L_PENDING) == false
 8001512:	4b5c      	ldr	r3, [pc, #368]	@ (8001684 <main+0x764>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	b2db      	uxtb	r3, r3
 8001518:	f003 0310 	and.w	r3, r3, #16
 800151c:	2b00      	cmp	r3, #0
 800151e:	d11c      	bne.n	800155a <main+0x63a>
		&& READ_BIT(audio_tx_status, AUDIO_STATUS_L_CPLT) == false)
 8001520:	4b58      	ldr	r3, [pc, #352]	@ (8001684 <main+0x764>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	b2db      	uxtb	r3, r3
 8001526:	f003 0320 	and.w	r3, r3, #32
 800152a:	2b00      	cmp	r3, #0
 800152c:	d115      	bne.n	800155a <main+0x63a>
  __ASM volatile ("cpsie i" : : : "memory");
 800152e:	b662      	cpsie	i
}
 8001530:	bf00      	nop
		{
			__enable_irq();

			SET_BIT(audio_tx_status, AUDIO_STATUS_L_PENDING);
 8001532:	4b54      	ldr	r3, [pc, #336]	@ (8001684 <main+0x764>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	b2db      	uxtb	r3, r3
 8001538:	f043 0310 	orr.w	r3, r3, #16
 800153c:	b2da      	uxtb	r2, r3
 800153e:	4b51      	ldr	r3, [pc, #324]	@ (8001684 <main+0x764>)
 8001540:	701a      	strb	r2, [r3, #0]
			CLEAR_BIT(audio_tx_status, AUDIO_STATUS_L_CPLT);
 8001542:	4b50      	ldr	r3, [pc, #320]	@ (8001684 <main+0x764>)
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	b2db      	uxtb	r3, r3
 8001548:	f023 0320 	bic.w	r3, r3, #32
 800154c:	b2da      	uxtb	r2, r3
 800154e:	4b4d      	ldr	r3, [pc, #308]	@ (8001684 <main+0x764>)
 8001550:	701a      	strb	r2, [r3, #0]
			HAL_MDMA_GenerateSWRequest(&hmdma_mdma_channel2_sw_0);
 8001552:	484d      	ldr	r0, [pc, #308]	@ (8001688 <main+0x768>)
 8001554:	f005 fb18 	bl	8006b88 <HAL_MDMA_GenerateSWRequest>
 8001558:	e031      	b.n	80015be <main+0x69e>
		}
		else if (READ_BIT(audio_dsp_status, AUDIO_STATUS_R_CPLT) &&
 800155a:	4b49      	ldr	r3, [pc, #292]	@ (8001680 <main+0x760>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	b2db      	uxtb	r3, r3
 8001560:	b25b      	sxtb	r3, r3
 8001562:	2b00      	cmp	r3, #0
 8001564:	da29      	bge.n	80015ba <main+0x69a>
		READ_BIT(audio_tx_status, AUDIO_STATUS_L_CPLT)
 8001566:	4b47      	ldr	r3, [pc, #284]	@ (8001684 <main+0x764>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	b2db      	uxtb	r3, r3
 800156c:	f003 0320 	and.w	r3, r3, #32
		else if (READ_BIT(audio_dsp_status, AUDIO_STATUS_R_CPLT) &&
 8001570:	2b00      	cmp	r3, #0
 8001572:	d022      	beq.n	80015ba <main+0x69a>
		&& READ_BIT(audio_tx_status, AUDIO_STATUS_R_PENDING) == false
 8001574:	4b43      	ldr	r3, [pc, #268]	@ (8001684 <main+0x764>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	b2db      	uxtb	r3, r3
 800157a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800157e:	2b00      	cmp	r3, #0
 8001580:	d11b      	bne.n	80015ba <main+0x69a>
		&& READ_BIT(audio_tx_status, AUDIO_STATUS_R_CPLT) == false)
 8001582:	4b40      	ldr	r3, [pc, #256]	@ (8001684 <main+0x764>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	b2db      	uxtb	r3, r3
 8001588:	b25b      	sxtb	r3, r3
 800158a:	2b00      	cmp	r3, #0
 800158c:	db15      	blt.n	80015ba <main+0x69a>
  __ASM volatile ("cpsie i" : : : "memory");
 800158e:	b662      	cpsie	i
}
 8001590:	bf00      	nop
		{
			__enable_irq();

			SET_BIT(audio_tx_status, AUDIO_STATUS_R_PENDING);
 8001592:	4b3c      	ldr	r3, [pc, #240]	@ (8001684 <main+0x764>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	b2db      	uxtb	r3, r3
 8001598:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800159c:	b2da      	uxtb	r2, r3
 800159e:	4b39      	ldr	r3, [pc, #228]	@ (8001684 <main+0x764>)
 80015a0:	701a      	strb	r2, [r3, #0]
			CLEAR_BIT(audio_tx_status, AUDIO_STATUS_R_CPLT);
 80015a2:	4b38      	ldr	r3, [pc, #224]	@ (8001684 <main+0x764>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80015ac:	b2da      	uxtb	r2, r3
 80015ae:	4b35      	ldr	r3, [pc, #212]	@ (8001684 <main+0x764>)
 80015b0:	701a      	strb	r2, [r3, #0]
			HAL_MDMA_GenerateSWRequest(&hmdma_mdma_channel2_sw_0);
 80015b2:	4835      	ldr	r0, [pc, #212]	@ (8001688 <main+0x768>)
 80015b4:	f005 fae8 	bl	8006b88 <HAL_MDMA_GenerateSWRequest>
 80015b8:	e001      	b.n	80015be <main+0x69e>
  __ASM volatile ("cpsie i" : : : "memory");
 80015ba:	b662      	cpsie	i
}
 80015bc:	bf00      	nop
		{
			__enable_irq();
		}


		if(READ_BIT(audio_dsp_status, AUDIO_STATUS_L_HALF_PENDING)){
 80015be:	4b30      	ldr	r3, [pc, #192]	@ (8001680 <main+0x760>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	f003 0301 	and.w	r3, r3, #1
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d010      	beq.n	80015ee <main+0x6ce>



			CLEAR_BIT(audio_dsp_status, AUDIO_STATUS_L_HALF_PENDING);
 80015cc:	4b2c      	ldr	r3, [pc, #176]	@ (8001680 <main+0x760>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	f023 0301 	bic.w	r3, r3, #1
 80015d6:	b2da      	uxtb	r2, r3
 80015d8:	4b29      	ldr	r3, [pc, #164]	@ (8001680 <main+0x760>)
 80015da:	701a      	strb	r2, [r3, #0]
			SET_BIT(audio_dsp_status, AUDIO_STATUS_L_HALF_CPLT);
 80015dc:	4b28      	ldr	r3, [pc, #160]	@ (8001680 <main+0x760>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	f043 0302 	orr.w	r3, r3, #2
 80015e6:	b2da      	uxtb	r2, r3
 80015e8:	4b25      	ldr	r3, [pc, #148]	@ (8001680 <main+0x760>)
 80015ea:	701a      	strb	r2, [r3, #0]
 80015ec:	e52f      	b.n	800104e <main+0x12e>
		}
		else if(READ_BIT(audio_dsp_status, AUDIO_STATUS_R_HALF_PENDING)){
 80015ee:	4b24      	ldr	r3, [pc, #144]	@ (8001680 <main+0x760>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	f003 0304 	and.w	r3, r3, #4
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d010      	beq.n	800161e <main+0x6fe>

			CLEAR_BIT(audio_dsp_status, AUDIO_STATUS_R_HALF_PENDING);
 80015fc:	4b20      	ldr	r3, [pc, #128]	@ (8001680 <main+0x760>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	b2db      	uxtb	r3, r3
 8001602:	f023 0304 	bic.w	r3, r3, #4
 8001606:	b2da      	uxtb	r2, r3
 8001608:	4b1d      	ldr	r3, [pc, #116]	@ (8001680 <main+0x760>)
 800160a:	701a      	strb	r2, [r3, #0]
			SET_BIT(audio_dsp_status, AUDIO_STATUS_R_HALF_CPLT);
 800160c:	4b1c      	ldr	r3, [pc, #112]	@ (8001680 <main+0x760>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	b2db      	uxtb	r3, r3
 8001612:	f043 0308 	orr.w	r3, r3, #8
 8001616:	b2da      	uxtb	r2, r3
 8001618:	4b19      	ldr	r3, [pc, #100]	@ (8001680 <main+0x760>)
 800161a:	701a      	strb	r2, [r3, #0]
 800161c:	e517      	b.n	800104e <main+0x12e>
		}
		else if(READ_BIT(audio_dsp_status, AUDIO_STATUS_L_PENDING)){
 800161e:	4b18      	ldr	r3, [pc, #96]	@ (8001680 <main+0x760>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	b2db      	uxtb	r3, r3
 8001624:	f003 0310 	and.w	r3, r3, #16
 8001628:	2b00      	cmp	r3, #0
 800162a:	d010      	beq.n	800164e <main+0x72e>

			CLEAR_BIT(audio_dsp_status, AUDIO_STATUS_L_PENDING);
 800162c:	4b14      	ldr	r3, [pc, #80]	@ (8001680 <main+0x760>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	b2db      	uxtb	r3, r3
 8001632:	f023 0310 	bic.w	r3, r3, #16
 8001636:	b2da      	uxtb	r2, r3
 8001638:	4b11      	ldr	r3, [pc, #68]	@ (8001680 <main+0x760>)
 800163a:	701a      	strb	r2, [r3, #0]
			SET_BIT(audio_dsp_status, AUDIO_STATUS_L_CPLT);
 800163c:	4b10      	ldr	r3, [pc, #64]	@ (8001680 <main+0x760>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	b2db      	uxtb	r3, r3
 8001642:	f043 0320 	orr.w	r3, r3, #32
 8001646:	b2da      	uxtb	r2, r3
 8001648:	4b0d      	ldr	r3, [pc, #52]	@ (8001680 <main+0x760>)
 800164a:	701a      	strb	r2, [r3, #0]
 800164c:	e4ff      	b.n	800104e <main+0x12e>
		}
		else if(READ_BIT(audio_dsp_status, AUDIO_STATUS_R_PENDING)){
 800164e:	4b0c      	ldr	r3, [pc, #48]	@ (8001680 <main+0x760>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	b2db      	uxtb	r3, r3
 8001654:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001658:	2b00      	cmp	r3, #0
 800165a:	f43f acf8 	beq.w	800104e <main+0x12e>

			CLEAR_BIT(audio_dsp_status, AUDIO_STATUS_R_PENDING);
 800165e:	4b08      	ldr	r3, [pc, #32]	@ (8001680 <main+0x760>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	b2db      	uxtb	r3, r3
 8001664:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001668:	b2da      	uxtb	r2, r3
 800166a:	4b05      	ldr	r3, [pc, #20]	@ (8001680 <main+0x760>)
 800166c:	701a      	strb	r2, [r3, #0]
			SET_BIT(audio_dsp_status, AUDIO_STATUS_R_CPLT);
 800166e:	4b04      	ldr	r3, [pc, #16]	@ (8001680 <main+0x760>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	b2db      	uxtb	r3, r3
 8001674:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001678:	b2da      	uxtb	r2, r3
 800167a:	4b01      	ldr	r3, [pc, #4]	@ (8001680 <main+0x760>)
 800167c:	701a      	strb	r2, [r3, #0]
		__disable_irq();
 800167e:	e4e6      	b.n	800104e <main+0x12e>
 8001680:	24000d81 	.word	0x24000d81
 8001684:	24000d82 	.word	0x24000d82
 8001688:	24000450 	.word	0x24000450
 800168c:	24000d80 	.word	0x24000d80

08001690 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b09c      	sub	sp, #112	@ 0x70
 8001694:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001696:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800169a:	224c      	movs	r2, #76	@ 0x4c
 800169c:	2100      	movs	r1, #0
 800169e:	4618      	mov	r0, r3
 80016a0:	f00b f9b8 	bl	800ca14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016a4:	1d3b      	adds	r3, r7, #4
 80016a6:	2220      	movs	r2, #32
 80016a8:	2100      	movs	r1, #0
 80016aa:	4618      	mov	r0, r3
 80016ac:	f00b f9b2 	bl	800ca14 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80016b0:	2004      	movs	r0, #4
 80016b2:	f005 fcff 	bl	80070b4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80016b6:	2300      	movs	r3, #0
 80016b8:	603b      	str	r3, [r7, #0]
 80016ba:	4b32      	ldr	r3, [pc, #200]	@ (8001784 <SystemClock_Config+0xf4>)
 80016bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016be:	4a31      	ldr	r2, [pc, #196]	@ (8001784 <SystemClock_Config+0xf4>)
 80016c0:	f023 0301 	bic.w	r3, r3, #1
 80016c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80016c6:	4b2f      	ldr	r3, [pc, #188]	@ (8001784 <SystemClock_Config+0xf4>)
 80016c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	603b      	str	r3, [r7, #0]
 80016d0:	4b2d      	ldr	r3, [pc, #180]	@ (8001788 <SystemClock_Config+0xf8>)
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80016d8:	4a2b      	ldr	r2, [pc, #172]	@ (8001788 <SystemClock_Config+0xf8>)
 80016da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016de:	6193      	str	r3, [r2, #24]
 80016e0:	4b29      	ldr	r3, [pc, #164]	@ (8001788 <SystemClock_Config+0xf8>)
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80016e8:	603b      	str	r3, [r7, #0]
 80016ea:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80016ec:	bf00      	nop
 80016ee:	4b26      	ldr	r3, [pc, #152]	@ (8001788 <SystemClock_Config+0xf8>)
 80016f0:	699b      	ldr	r3, [r3, #24]
 80016f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80016f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80016fa:	d1f8      	bne.n	80016ee <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016fc:	2302      	movs	r3, #2
 80016fe:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001700:	2301      	movs	r3, #1
 8001702:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001704:	2340      	movs	r3, #64	@ 0x40
 8001706:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001708:	2302      	movs	r3, #2
 800170a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800170c:	2300      	movs	r3, #0
 800170e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001710:	2304      	movs	r3, #4
 8001712:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001714:	2332      	movs	r3, #50	@ 0x32
 8001716:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001718:	2302      	movs	r3, #2
 800171a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 65;
 800171c:	2341      	movs	r3, #65	@ 0x41
 800171e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001720:	2302      	movs	r3, #2
 8001722:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001724:	230c      	movs	r3, #12
 8001726:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001728:	2300      	movs	r3, #0
 800172a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800172c:	2300      	movs	r3, #0
 800172e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001730:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001734:	4618      	mov	r0, r3
 8001736:	f005 fd17 	bl	8007168 <HAL_RCC_OscConfig>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001740:	f001 f852 	bl	80027e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001744:	233f      	movs	r3, #63	@ 0x3f
 8001746:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001748:	2303      	movs	r3, #3
 800174a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 800174c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001750:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001752:	2308      	movs	r3, #8
 8001754:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001756:	2340      	movs	r3, #64	@ 0x40
 8001758:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800175a:	2340      	movs	r3, #64	@ 0x40
 800175c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800175e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001762:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001764:	2340      	movs	r3, #64	@ 0x40
 8001766:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001768:	1d3b      	adds	r3, r7, #4
 800176a:	2102      	movs	r1, #2
 800176c:	4618      	mov	r0, r3
 800176e:	f006 f955 	bl	8007a1c <HAL_RCC_ClockConfig>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <SystemClock_Config+0xec>
  {
    Error_Handler();
 8001778:	f001 f836 	bl	80027e8 <Error_Handler>
  }
}
 800177c:	bf00      	nop
 800177e:	3770      	adds	r7, #112	@ 0x70
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	58000400 	.word	0x58000400
 8001788:	58024800 	.word	0x58024800

0800178c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b0b0      	sub	sp, #192	@ 0xc0
 8001790:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001792:	463b      	mov	r3, r7
 8001794:	22c0      	movs	r2, #192	@ 0xc0
 8001796:	2100      	movs	r1, #0
 8001798:	4618      	mov	r0, r3
 800179a:	f00b f93b 	bl	800ca14 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_USART3;
 800179e:	f44f 7281 	mov.w	r2, #258	@ 0x102
 80017a2:	f04f 0300 	mov.w	r3, #0
 80017a6:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 5;
 80017aa:	2305      	movs	r3, #5
 80017ac:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 24;
 80017ae:	2318      	movs	r3, #24
 80017b0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 25;
 80017b2:	2319      	movs	r3, #25
 80017b4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 24;
 80017b6:	2318      	movs	r3, #24
 80017b8:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80017ba:	2302      	movs	r3, #2
 80017bc:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80017be:	23c0      	movs	r3, #192	@ 0xc0
 80017c0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80017c2:	2300      	movs	r3, #0
 80017c4:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80017c6:	2300      	movs	r3, #0
 80017c8:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 80017ca:	2301      	movs	r3, #1
 80017cc:	65bb      	str	r3, [r7, #88]	@ 0x58
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL2;
 80017ce:	2301      	movs	r3, #1
 80017d0:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017d2:	463b      	mov	r3, r7
 80017d4:	4618      	mov	r0, r3
 80017d6:	f006 fcad 	bl	8008134 <HAL_RCCEx_PeriphCLKConfig>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 80017e0:	f001 f802 	bl	80027e8 <Error_Handler>
  }
}
 80017e4:	bf00      	nop
 80017e6:	37c0      	adds	r7, #192	@ 0xc0
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}

080017ec <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80017f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001860 <MX_I2C2_Init+0x74>)
 80017f2:	4a1c      	ldr	r2, [pc, #112]	@ (8001864 <MX_I2C2_Init+0x78>)
 80017f4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000873;
 80017f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001860 <MX_I2C2_Init+0x74>)
 80017f8:	f640 0273 	movw	r2, #2163	@ 0x873
 80017fc:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80017fe:	4b18      	ldr	r3, [pc, #96]	@ (8001860 <MX_I2C2_Init+0x74>)
 8001800:	2200      	movs	r2, #0
 8001802:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001804:	4b16      	ldr	r3, [pc, #88]	@ (8001860 <MX_I2C2_Init+0x74>)
 8001806:	2201      	movs	r2, #1
 8001808:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800180a:	4b15      	ldr	r3, [pc, #84]	@ (8001860 <MX_I2C2_Init+0x74>)
 800180c:	2200      	movs	r2, #0
 800180e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001810:	4b13      	ldr	r3, [pc, #76]	@ (8001860 <MX_I2C2_Init+0x74>)
 8001812:	2200      	movs	r2, #0
 8001814:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001816:	4b12      	ldr	r3, [pc, #72]	@ (8001860 <MX_I2C2_Init+0x74>)
 8001818:	2200      	movs	r2, #0
 800181a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800181c:	4b10      	ldr	r3, [pc, #64]	@ (8001860 <MX_I2C2_Init+0x74>)
 800181e:	2200      	movs	r2, #0
 8001820:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001822:	4b0f      	ldr	r3, [pc, #60]	@ (8001860 <MX_I2C2_Init+0x74>)
 8001824:	2200      	movs	r2, #0
 8001826:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001828:	480d      	ldr	r0, [pc, #52]	@ (8001860 <MX_I2C2_Init+0x74>)
 800182a:	f004 f87f 	bl	800592c <HAL_I2C_Init>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001834:	f000 ffd8 	bl	80027e8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001838:	2100      	movs	r1, #0
 800183a:	4809      	ldr	r0, [pc, #36]	@ (8001860 <MX_I2C2_Init+0x74>)
 800183c:	f004 fe02 	bl	8006444 <HAL_I2CEx_ConfigAnalogFilter>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001846:	f000 ffcf 	bl	80027e8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800184a:	2100      	movs	r1, #0
 800184c:	4804      	ldr	r0, [pc, #16]	@ (8001860 <MX_I2C2_Init+0x74>)
 800184e:	f004 fe44 	bl	80064da <HAL_I2CEx_ConfigDigitalFilter>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001858:	f000 ffc6 	bl	80027e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800185c:	bf00      	nop
 800185e:	bd80      	pop	{r7, pc}
 8001860:	2400003c 	.word	0x2400003c
 8001864:	40005800 	.word	0x40005800

08001868 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 800186c:	4b2b      	ldr	r3, [pc, #172]	@ (800191c <MX_SAI1_Init+0xb4>)
 800186e:	4a2c      	ldr	r2, [pc, #176]	@ (8001920 <MX_SAI1_Init+0xb8>)
 8001870:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
 8001872:	4b2a      	ldr	r3, [pc, #168]	@ (800191c <MX_SAI1_Init+0xb4>)
 8001874:	2201      	movs	r2, #1
 8001876:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001878:	4b28      	ldr	r3, [pc, #160]	@ (800191c <MX_SAI1_Init+0xb4>)
 800187a:	2200      	movs	r2, #0
 800187c:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800187e:	4b27      	ldr	r3, [pc, #156]	@ (800191c <MX_SAI1_Init+0xb4>)
 8001880:	2200      	movs	r2, #0
 8001882:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MCK_OVERSAMPLING_DISABLE;
 8001884:	4b25      	ldr	r3, [pc, #148]	@ (800191c <MX_SAI1_Init+0xb4>)
 8001886:	2200      	movs	r2, #0
 8001888:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 800188a:	4b24      	ldr	r3, [pc, #144]	@ (800191c <MX_SAI1_Init+0xb4>)
 800188c:	2200      	movs	r2, #0
 800188e:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8001890:	4b22      	ldr	r3, [pc, #136]	@ (800191c <MX_SAI1_Init+0xb4>)
 8001892:	2201      	movs	r2, #1
 8001894:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8001896:	4b21      	ldr	r3, [pc, #132]	@ (800191c <MX_SAI1_Init+0xb4>)
 8001898:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 800189c:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800189e:	4b1f      	ldr	r3, [pc, #124]	@ (800191c <MX_SAI1_Init+0xb4>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 80018a4:	4b1d      	ldr	r3, [pc, #116]	@ (800191c <MX_SAI1_Init+0xb4>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 80018aa:	4b1c      	ldr	r3, [pc, #112]	@ (800191c <MX_SAI1_Init+0xb4>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 80018b0:	2302      	movs	r3, #2
 80018b2:	2200      	movs	r2, #0
 80018b4:	2100      	movs	r1, #0
 80018b6:	4819      	ldr	r0, [pc, #100]	@ (800191c <MX_SAI1_Init+0xb4>)
 80018b8:	f009 f93a 	bl	800ab30 <HAL_SAI_InitProtocol>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <MX_SAI1_Init+0x5e>
  {
    Error_Handler();
 80018c2:	f000 ff91 	bl	80027e8 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 80018c6:	4b17      	ldr	r3, [pc, #92]	@ (8001924 <MX_SAI1_Init+0xbc>)
 80018c8:	4a17      	ldr	r2, [pc, #92]	@ (8001928 <MX_SAI1_Init+0xc0>)
 80018ca:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_TX;
 80018cc:	4b15      	ldr	r3, [pc, #84]	@ (8001924 <MX_SAI1_Init+0xbc>)
 80018ce:	2202      	movs	r2, #2
 80018d0:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 80018d2:	4b14      	ldr	r3, [pc, #80]	@ (8001924 <MX_SAI1_Init+0xbc>)
 80018d4:	2201      	movs	r2, #1
 80018d6:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80018d8:	4b12      	ldr	r3, [pc, #72]	@ (8001924 <MX_SAI1_Init+0xbc>)
 80018da:	2200      	movs	r2, #0
 80018dc:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 80018de:	4b11      	ldr	r3, [pc, #68]	@ (8001924 <MX_SAI1_Init+0xbc>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 80018e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001924 <MX_SAI1_Init+0xbc>)
 80018e6:	2201      	movs	r2, #1
 80018e8:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80018ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001924 <MX_SAI1_Init+0xbc>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 80018f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001924 <MX_SAI1_Init+0xbc>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 80018f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001924 <MX_SAI1_Init+0xbc>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80018fc:	4b09      	ldr	r3, [pc, #36]	@ (8001924 <MX_SAI1_Init+0xbc>)
 80018fe:	2200      	movs	r2, #0
 8001900:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8001902:	2302      	movs	r3, #2
 8001904:	2200      	movs	r2, #0
 8001906:	2100      	movs	r1, #0
 8001908:	4806      	ldr	r0, [pc, #24]	@ (8001924 <MX_SAI1_Init+0xbc>)
 800190a:	f009 f911 	bl	800ab30 <HAL_SAI_InitProtocol>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <MX_SAI1_Init+0xb0>
  {
    Error_Handler();
 8001914:	f000 ff68 	bl	80027e8 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8001918:	bf00      	nop
 800191a:	bd80      	pop	{r7, pc}
 800191c:	24000090 	.word	0x24000090
 8001920:	40015804 	.word	0x40015804
 8001924:	24000128 	.word	0x24000128
 8001928:	40015824 	.word	0x40015824

0800192c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001930:	4b22      	ldr	r3, [pc, #136]	@ (80019bc <MX_USART3_UART_Init+0x90>)
 8001932:	4a23      	ldr	r2, [pc, #140]	@ (80019c0 <MX_USART3_UART_Init+0x94>)
 8001934:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001936:	4b21      	ldr	r3, [pc, #132]	@ (80019bc <MX_USART3_UART_Init+0x90>)
 8001938:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800193c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800193e:	4b1f      	ldr	r3, [pc, #124]	@ (80019bc <MX_USART3_UART_Init+0x90>)
 8001940:	2200      	movs	r2, #0
 8001942:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001944:	4b1d      	ldr	r3, [pc, #116]	@ (80019bc <MX_USART3_UART_Init+0x90>)
 8001946:	2200      	movs	r2, #0
 8001948:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800194a:	4b1c      	ldr	r3, [pc, #112]	@ (80019bc <MX_USART3_UART_Init+0x90>)
 800194c:	2200      	movs	r2, #0
 800194e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001950:	4b1a      	ldr	r3, [pc, #104]	@ (80019bc <MX_USART3_UART_Init+0x90>)
 8001952:	220c      	movs	r2, #12
 8001954:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001956:	4b19      	ldr	r3, [pc, #100]	@ (80019bc <MX_USART3_UART_Init+0x90>)
 8001958:	2200      	movs	r2, #0
 800195a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800195c:	4b17      	ldr	r3, [pc, #92]	@ (80019bc <MX_USART3_UART_Init+0x90>)
 800195e:	2200      	movs	r2, #0
 8001960:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001962:	4b16      	ldr	r3, [pc, #88]	@ (80019bc <MX_USART3_UART_Init+0x90>)
 8001964:	2200      	movs	r2, #0
 8001966:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001968:	4b14      	ldr	r3, [pc, #80]	@ (80019bc <MX_USART3_UART_Init+0x90>)
 800196a:	2200      	movs	r2, #0
 800196c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800196e:	4b13      	ldr	r3, [pc, #76]	@ (80019bc <MX_USART3_UART_Init+0x90>)
 8001970:	2200      	movs	r2, #0
 8001972:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001974:	4811      	ldr	r0, [pc, #68]	@ (80019bc <MX_USART3_UART_Init+0x90>)
 8001976:	f009 ff70 	bl	800b85a <HAL_UART_Init>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001980:	f000 ff32 	bl	80027e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001984:	2100      	movs	r1, #0
 8001986:	480d      	ldr	r0, [pc, #52]	@ (80019bc <MX_USART3_UART_Init+0x90>)
 8001988:	f00a ff79 	bl	800c87e <HAL_UARTEx_SetTxFifoThreshold>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001992:	f000 ff29 	bl	80027e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001996:	2100      	movs	r1, #0
 8001998:	4808      	ldr	r0, [pc, #32]	@ (80019bc <MX_USART3_UART_Init+0x90>)
 800199a:	f00a ffae 	bl	800c8fa <HAL_UARTEx_SetRxFifoThreshold>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80019a4:	f000 ff20 	bl	80027e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80019a8:	4804      	ldr	r0, [pc, #16]	@ (80019bc <MX_USART3_UART_Init+0x90>)
 80019aa:	f00a ff2f 	bl	800c80c <HAL_UARTEx_DisableFifoMode>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80019b4:	f000 ff18 	bl	80027e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80019b8:	bf00      	nop
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	240002b0 	.word	0x240002b0
 80019c0:	40004800 	.word	0x40004800

080019c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019ca:	4b11      	ldr	r3, [pc, #68]	@ (8001a10 <MX_DMA_Init+0x4c>)
 80019cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80019d0:	4a0f      	ldr	r2, [pc, #60]	@ (8001a10 <MX_DMA_Init+0x4c>)
 80019d2:	f043 0301 	orr.w	r3, r3, #1
 80019d6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80019da:	4b0d      	ldr	r3, [pc, #52]	@ (8001a10 <MX_DMA_Init+0x4c>)
 80019dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80019e0:	f003 0301 	and.w	r3, r3, #1
 80019e4:	607b      	str	r3, [r7, #4]
 80019e6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80019e8:	2200      	movs	r2, #0
 80019ea:	2100      	movs	r1, #0
 80019ec:	200b      	movs	r0, #11
 80019ee:	f001 fb92 	bl	8003116 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80019f2:	200b      	movs	r0, #11
 80019f4:	f001 fba9 	bl	800314a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80019f8:	2200      	movs	r2, #0
 80019fa:	2100      	movs	r1, #0
 80019fc:	200c      	movs	r0, #12
 80019fe:	f001 fb8a 	bl	8003116 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001a02:	200c      	movs	r0, #12
 8001a04:	f001 fba1 	bl	800314a <HAL_NVIC_EnableIRQ>

}
 8001a08:	bf00      	nop
 8001a0a:	3708      	adds	r7, #8
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	58024400 	.word	0x58024400

08001a14 <MX_MDMA_Init>:
  *   node_mdma_channel2_sw_2
  *   node_mdma_channel2_sw_3
  *   node_mdma_channel2_sw_4
  */
static void MX_MDMA_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b096      	sub	sp, #88	@ 0x58
 8001a18:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 8001a1a:	4baf      	ldr	r3, [pc, #700]	@ (8001cd8 <MX_MDMA_Init+0x2c4>)
 8001a1c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001a20:	4aad      	ldr	r2, [pc, #692]	@ (8001cd8 <MX_MDMA_Init+0x2c4>)
 8001a22:	f043 0301 	orr.w	r3, r3, #1
 8001a26:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001a2a:	4bab      	ldr	r3, [pc, #684]	@ (8001cd8 <MX_MDMA_Init+0x2c4>)
 8001a2c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001a30:	f003 0301 	and.w	r3, r3, #1
 8001a34:	607b      	str	r3, [r7, #4]
 8001a36:	687b      	ldr	r3, [r7, #4]
  /* Local variables */
  MDMA_LinkNodeConfTypeDef nodeConfig;

  /* Configure MDMA channel MDMA_Channel0 */
  /* Configure MDMA request hmdma_mdma_channel0_sw_0 on MDMA_Channel0 */
  hmdma_mdma_channel0_sw_0.Instance = MDMA_Channel0;
 8001a38:	4ba8      	ldr	r3, [pc, #672]	@ (8001cdc <MX_MDMA_Init+0x2c8>)
 8001a3a:	4aa9      	ldr	r2, [pc, #676]	@ (8001ce0 <MX_MDMA_Init+0x2cc>)
 8001a3c:	601a      	str	r2, [r3, #0]
  hmdma_mdma_channel0_sw_0.Init.Request = MDMA_REQUEST_SW;
 8001a3e:	4ba7      	ldr	r3, [pc, #668]	@ (8001cdc <MX_MDMA_Init+0x2c8>)
 8001a40:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a44:	605a      	str	r2, [r3, #4]
  hmdma_mdma_channel0_sw_0.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 8001a46:	4ba5      	ldr	r3, [pc, #660]	@ (8001cdc <MX_MDMA_Init+0x2c8>)
 8001a48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001a4c:	609a      	str	r2, [r3, #8]
  hmdma_mdma_channel0_sw_0.Init.Priority = MDMA_PRIORITY_HIGH;
 8001a4e:	4ba3      	ldr	r3, [pc, #652]	@ (8001cdc <MX_MDMA_Init+0x2c8>)
 8001a50:	2280      	movs	r2, #128	@ 0x80
 8001a52:	60da      	str	r2, [r3, #12]
  hmdma_mdma_channel0_sw_0.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8001a54:	4ba1      	ldr	r3, [pc, #644]	@ (8001cdc <MX_MDMA_Init+0x2c8>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	611a      	str	r2, [r3, #16]
  hmdma_mdma_channel0_sw_0.Init.SourceInc = MDMA_SRC_INC_WORD;
 8001a5a:	4ba0      	ldr	r3, [pc, #640]	@ (8001cdc <MX_MDMA_Init+0x2c8>)
 8001a5c:	f240 2202 	movw	r2, #514	@ 0x202
 8001a60:	615a      	str	r2, [r3, #20]
  hmdma_mdma_channel0_sw_0.Init.DestinationInc = MDMA_DEST_INC_HALFWORD;
 8001a62:	4b9e      	ldr	r3, [pc, #632]	@ (8001cdc <MX_MDMA_Init+0x2c8>)
 8001a64:	f44f 6281 	mov.w	r2, #1032	@ 0x408
 8001a68:	619a      	str	r2, [r3, #24]
  hmdma_mdma_channel0_sw_0.Init.SourceDataSize = MDMA_SRC_DATASIZE_HALFWORD;
 8001a6a:	4b9c      	ldr	r3, [pc, #624]	@ (8001cdc <MX_MDMA_Init+0x2c8>)
 8001a6c:	2210      	movs	r2, #16
 8001a6e:	61da      	str	r2, [r3, #28]
  hmdma_mdma_channel0_sw_0.Init.DestDataSize = MDMA_DEST_DATASIZE_HALFWORD;
 8001a70:	4b9a      	ldr	r3, [pc, #616]	@ (8001cdc <MX_MDMA_Init+0x2c8>)
 8001a72:	2240      	movs	r2, #64	@ 0x40
 8001a74:	621a      	str	r2, [r3, #32]
  hmdma_mdma_channel0_sw_0.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001a76:	4b99      	ldr	r3, [pc, #612]	@ (8001cdc <MX_MDMA_Init+0x2c8>)
 8001a78:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a7c:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma_mdma_channel0_sw_0.Init.BufferTransferLength = AUDIO_SAMPLE_SIZE;
 8001a7e:	4b97      	ldr	r3, [pc, #604]	@ (8001cdc <MX_MDMA_Init+0x2c8>)
 8001a80:	2202      	movs	r2, #2
 8001a82:	629a      	str	r2, [r3, #40]	@ 0x28
  hmdma_mdma_channel0_sw_0.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8001a84:	4b95      	ldr	r3, [pc, #596]	@ (8001cdc <MX_MDMA_Init+0x2c8>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	62da      	str	r2, [r3, #44]	@ 0x2c
  hmdma_mdma_channel0_sw_0.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8001a8a:	4b94      	ldr	r3, [pc, #592]	@ (8001cdc <MX_MDMA_Init+0x2c8>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	631a      	str	r2, [r3, #48]	@ 0x30
  hmdma_mdma_channel0_sw_0.Init.SourceBlockAddressOffset = 0;
 8001a90:	4b92      	ldr	r3, [pc, #584]	@ (8001cdc <MX_MDMA_Init+0x2c8>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	635a      	str	r2, [r3, #52]	@ 0x34
  hmdma_mdma_channel0_sw_0.Init.DestBlockAddressOffset = 0;
 8001a96:	4b91      	ldr	r3, [pc, #580]	@ (8001cdc <MX_MDMA_Init+0x2c8>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_MDMA_Init(&hmdma_mdma_channel0_sw_0) != HAL_OK)
 8001a9c:	488f      	ldr	r0, [pc, #572]	@ (8001cdc <MX_MDMA_Init+0x2c8>)
 8001a9e:	f004 fd68 	bl	8006572 <HAL_MDMA_Init>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <MX_MDMA_Init+0x98>
  {
    Error_Handler();
 8001aa8:	f000 fe9e 	bl	80027e8 <Error_Handler>
  }

  /* Initialize MDMA link node according to specified parameters */
  nodeConfig.Init.Request = MDMA_REQUEST_SW;
 8001aac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001ab0:	60bb      	str	r3, [r7, #8]
  nodeConfig.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 8001ab2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001ab6:	60fb      	str	r3, [r7, #12]
  nodeConfig.Init.Priority = MDMA_PRIORITY_HIGH;
 8001ab8:	2380      	movs	r3, #128	@ 0x80
 8001aba:	613b      	str	r3, [r7, #16]
  nodeConfig.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8001abc:	2300      	movs	r3, #0
 8001abe:	617b      	str	r3, [r7, #20]
  nodeConfig.Init.SourceInc = MDMA_SRC_INC_WORD;
 8001ac0:	f240 2302 	movw	r3, #514	@ 0x202
 8001ac4:	61bb      	str	r3, [r7, #24]
  nodeConfig.Init.DestinationInc = MDMA_DEST_INC_HALFWORD;
 8001ac6:	f44f 6381 	mov.w	r3, #1032	@ 0x408
 8001aca:	61fb      	str	r3, [r7, #28]
  nodeConfig.Init.SourceDataSize = MDMA_SRC_DATASIZE_HALFWORD;
 8001acc:	2310      	movs	r3, #16
 8001ace:	623b      	str	r3, [r7, #32]
  nodeConfig.Init.DestDataSize = MDMA_DEST_DATASIZE_HALFWORD;
 8001ad0:	2340      	movs	r3, #64	@ 0x40
 8001ad2:	627b      	str	r3, [r7, #36]	@ 0x24
  nodeConfig.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001ad4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ad8:	62bb      	str	r3, [r7, #40]	@ 0x28
  nodeConfig.Init.BufferTransferLength = AUDIO_SAMPLE_SIZE;
 8001ada:	2302      	movs	r3, #2
 8001adc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  nodeConfig.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	633b      	str	r3, [r7, #48]	@ 0x30
  nodeConfig.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	637b      	str	r3, [r7, #52]	@ 0x34
  nodeConfig.Init.SourceBlockAddressOffset = 0;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	63bb      	str	r3, [r7, #56]	@ 0x38
  nodeConfig.Init.DestBlockAddressOffset = 0;
 8001aea:	2300      	movs	r3, #0
 8001aec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  nodeConfig.PostRequestMaskAddress = 0;
 8001aee:	2300      	movs	r3, #0
 8001af0:	653b      	str	r3, [r7, #80]	@ 0x50
  nodeConfig.PostRequestMaskData = 0;
 8001af2:	2300      	movs	r3, #0
 8001af4:	657b      	str	r3, [r7, #84]	@ 0x54
  nodeConfig.SrcAddress = (uint32_t) &sai_buffer_rx[1];
 8001af6:	4b7b      	ldr	r3, [pc, #492]	@ (8001ce4 <MX_MDMA_Init+0x2d0>)
 8001af8:	643b      	str	r3, [r7, #64]	@ 0x40
  nodeConfig.DstAddress = (uint32_t) &audio_buffer_rx_ch1_r[0];
 8001afa:	4b7b      	ldr	r3, [pc, #492]	@ (8001ce8 <MX_MDMA_Init+0x2d4>)
 8001afc:	647b      	str	r3, [r7, #68]	@ 0x44
  nodeConfig.BlockDataLength = AUDIO_BUFFER_SIZE_HALF;
 8001afe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b02:	64bb      	str	r3, [r7, #72]	@ 0x48
  nodeConfig.BlockCount = 1;
 8001b04:	2301      	movs	r3, #1
 8001b06:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_MDMA_LinkedList_CreateNode(&node_mdma_channel0_sw_1, &nodeConfig) != HAL_OK)
 8001b08:	f107 0308 	add.w	r3, r7, #8
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4877      	ldr	r0, [pc, #476]	@ (8001cec <MX_MDMA_Init+0x2d8>)
 8001b10:	f004 fdd6 	bl	80066c0 <HAL_MDMA_LinkedList_CreateNode>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <MX_MDMA_Init+0x10a>
  {
    Error_Handler();
 8001b1a:	f000 fe65 	bl	80027e8 <Error_Handler>
  }
  /* USER CODE BEGIN mdma_channel0_sw_1 */
  HAL_MDMA_RegisterCallback(&hmdma_mdma_channel0_sw_0, HAL_MDMA_XFER_BLOCKCPLT_CB_ID, MDMA_RxXferBlockCpltCallback);
 8001b1e:	4a74      	ldr	r2, [pc, #464]	@ (8001cf0 <MX_MDMA_Init+0x2dc>)
 8001b20:	2102      	movs	r1, #2
 8001b22:	486e      	ldr	r0, [pc, #440]	@ (8001cdc <MX_MDMA_Init+0x2c8>)
 8001b24:	f004 fd72 	bl	800660c <HAL_MDMA_RegisterCallback>
  HAL_MDMA_RegisterCallback(&hmdma_mdma_channel0_sw_0, HAL_MDMA_XFER_ERROR_CB_ID, MDMA_RxErrorCallback);
 8001b28:	4a72      	ldr	r2, [pc, #456]	@ (8001cf4 <MX_MDMA_Init+0x2e0>)
 8001b2a:	2104      	movs	r1, #4
 8001b2c:	486b      	ldr	r0, [pc, #428]	@ (8001cdc <MX_MDMA_Init+0x2c8>)
 8001b2e:	f004 fd6d 	bl	800660c <HAL_MDMA_RegisterCallback>
  /* USER CODE END mdma_channel0_sw_1 */

  /* Connect a node to the linked list */
  if (HAL_MDMA_LinkedList_AddNode(&hmdma_mdma_channel0_sw_0, &node_mdma_channel0_sw_1, 0) != HAL_OK)
 8001b32:	2200      	movs	r2, #0
 8001b34:	496d      	ldr	r1, [pc, #436]	@ (8001cec <MX_MDMA_Init+0x2d8>)
 8001b36:	4869      	ldr	r0, [pc, #420]	@ (8001cdc <MX_MDMA_Init+0x2c8>)
 8001b38:	f004 fe9e 	bl	8006878 <HAL_MDMA_LinkedList_AddNode>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <MX_MDMA_Init+0x132>
  {
    Error_Handler();
 8001b42:	f000 fe51 	bl	80027e8 <Error_Handler>
  }

  /* Initialize MDMA link node according to specified parameters */
  nodeConfig.Init.Request = MDMA_REQUEST_SW;
 8001b46:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001b4a:	60bb      	str	r3, [r7, #8]
  nodeConfig.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 8001b4c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001b50:	60fb      	str	r3, [r7, #12]
  nodeConfig.Init.Priority = MDMA_PRIORITY_HIGH;
 8001b52:	2380      	movs	r3, #128	@ 0x80
 8001b54:	613b      	str	r3, [r7, #16]
  nodeConfig.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8001b56:	2300      	movs	r3, #0
 8001b58:	617b      	str	r3, [r7, #20]
  nodeConfig.Init.SourceInc = MDMA_SRC_INC_WORD;
 8001b5a:	f240 2302 	movw	r3, #514	@ 0x202
 8001b5e:	61bb      	str	r3, [r7, #24]
  nodeConfig.Init.DestinationInc = MDMA_DEST_INC_HALFWORD;
 8001b60:	f44f 6381 	mov.w	r3, #1032	@ 0x408
 8001b64:	61fb      	str	r3, [r7, #28]
  nodeConfig.Init.SourceDataSize = MDMA_SRC_DATASIZE_HALFWORD;
 8001b66:	2310      	movs	r3, #16
 8001b68:	623b      	str	r3, [r7, #32]
  nodeConfig.Init.DestDataSize = MDMA_DEST_DATASIZE_HALFWORD;
 8001b6a:	2340      	movs	r3, #64	@ 0x40
 8001b6c:	627b      	str	r3, [r7, #36]	@ 0x24
  nodeConfig.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001b6e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b72:	62bb      	str	r3, [r7, #40]	@ 0x28
  nodeConfig.Init.BufferTransferLength = AUDIO_SAMPLE_SIZE;
 8001b74:	2302      	movs	r3, #2
 8001b76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  nodeConfig.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	633b      	str	r3, [r7, #48]	@ 0x30
  nodeConfig.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	637b      	str	r3, [r7, #52]	@ 0x34
  nodeConfig.Init.SourceBlockAddressOffset = 0;
 8001b80:	2300      	movs	r3, #0
 8001b82:	63bb      	str	r3, [r7, #56]	@ 0x38
  nodeConfig.Init.DestBlockAddressOffset = 0;
 8001b84:	2300      	movs	r3, #0
 8001b86:	63fb      	str	r3, [r7, #60]	@ 0x3c
  nodeConfig.PostRequestMaskAddress = 0;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	653b      	str	r3, [r7, #80]	@ 0x50
  nodeConfig.PostRequestMaskData = 0;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	657b      	str	r3, [r7, #84]	@ 0x54
  nodeConfig.SrcAddress = (uint32_t) &sai_buffer_rx[SAI_BUFFER_LENGTH_HALF-1];
 8001b90:	4b59      	ldr	r3, [pc, #356]	@ (8001cf8 <MX_MDMA_Init+0x2e4>)
 8001b92:	643b      	str	r3, [r7, #64]	@ 0x40
  nodeConfig.DstAddress = (uint32_t) &audio_buffer_rx_ch1_l[AUDIO_BUFFER_LENGTH_HALF-1];
 8001b94:	4b59      	ldr	r3, [pc, #356]	@ (8001cfc <MX_MDMA_Init+0x2e8>)
 8001b96:	647b      	str	r3, [r7, #68]	@ 0x44
  nodeConfig.BlockDataLength = AUDIO_BUFFER_SIZE_HALF;
 8001b98:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b9c:	64bb      	str	r3, [r7, #72]	@ 0x48
  nodeConfig.BlockCount = 1;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_MDMA_LinkedList_CreateNode(&node_mdma_channel0_sw_2, &nodeConfig) != HAL_OK)
 8001ba2:	f107 0308 	add.w	r3, r7, #8
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4855      	ldr	r0, [pc, #340]	@ (8001d00 <MX_MDMA_Init+0x2ec>)
 8001baa:	f004 fd89 	bl	80066c0 <HAL_MDMA_LinkedList_CreateNode>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <MX_MDMA_Init+0x1a4>
  {
    Error_Handler();
 8001bb4:	f000 fe18 	bl	80027e8 <Error_Handler>
  /* USER CODE BEGIN mdma_channel0_sw_2 */

  /* USER CODE END mdma_channel0_sw_2 */

  /* Connect a node to the linked list */
  if (HAL_MDMA_LinkedList_AddNode(&hmdma_mdma_channel0_sw_0, &node_mdma_channel0_sw_2, 0) != HAL_OK)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	4951      	ldr	r1, [pc, #324]	@ (8001d00 <MX_MDMA_Init+0x2ec>)
 8001bbc:	4847      	ldr	r0, [pc, #284]	@ (8001cdc <MX_MDMA_Init+0x2c8>)
 8001bbe:	f004 fe5b 	bl	8006878 <HAL_MDMA_LinkedList_AddNode>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <MX_MDMA_Init+0x1b8>
  {
    Error_Handler();
 8001bc8:	f000 fe0e 	bl	80027e8 <Error_Handler>
  }

  /* Initialize MDMA link node according to specified parameters */
  nodeConfig.Init.Request = MDMA_REQUEST_SW;
 8001bcc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001bd0:	60bb      	str	r3, [r7, #8]
  nodeConfig.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 8001bd2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001bd6:	60fb      	str	r3, [r7, #12]
  nodeConfig.Init.Priority = MDMA_PRIORITY_HIGH;
 8001bd8:	2380      	movs	r3, #128	@ 0x80
 8001bda:	613b      	str	r3, [r7, #16]
  nodeConfig.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	617b      	str	r3, [r7, #20]
  nodeConfig.Init.SourceInc = MDMA_SRC_INC_WORD;
 8001be0:	f240 2302 	movw	r3, #514	@ 0x202
 8001be4:	61bb      	str	r3, [r7, #24]
  nodeConfig.Init.DestinationInc = MDMA_DEST_INC_HALFWORD;
 8001be6:	f44f 6381 	mov.w	r3, #1032	@ 0x408
 8001bea:	61fb      	str	r3, [r7, #28]
  nodeConfig.Init.SourceDataSize = MDMA_SRC_DATASIZE_HALFWORD;
 8001bec:	2310      	movs	r3, #16
 8001bee:	623b      	str	r3, [r7, #32]
  nodeConfig.Init.DestDataSize = MDMA_DEST_DATASIZE_HALFWORD;
 8001bf0:	2340      	movs	r3, #64	@ 0x40
 8001bf2:	627b      	str	r3, [r7, #36]	@ 0x24
  nodeConfig.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001bf4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
  nodeConfig.Init.BufferTransferLength = AUDIO_SAMPLE_SIZE;
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  nodeConfig.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	633b      	str	r3, [r7, #48]	@ 0x30
  nodeConfig.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8001c02:	2300      	movs	r3, #0
 8001c04:	637b      	str	r3, [r7, #52]	@ 0x34
  nodeConfig.Init.SourceBlockAddressOffset = 0;
 8001c06:	2300      	movs	r3, #0
 8001c08:	63bb      	str	r3, [r7, #56]	@ 0x38
  nodeConfig.Init.DestBlockAddressOffset = 0;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  nodeConfig.PostRequestMaskAddress = 0;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	653b      	str	r3, [r7, #80]	@ 0x50
  nodeConfig.PostRequestMaskData = 0;
 8001c12:	2300      	movs	r3, #0
 8001c14:	657b      	str	r3, [r7, #84]	@ 0x54
  nodeConfig.SrcAddress = (uint32_t) &sai_buffer_rx[SAI_BUFFER_LENGTH_HALF];
 8001c16:	4b3b      	ldr	r3, [pc, #236]	@ (8001d04 <MX_MDMA_Init+0x2f0>)
 8001c18:	643b      	str	r3, [r7, #64]	@ 0x40
  nodeConfig.DstAddress = (uint32_t) &audio_buffer_rx_ch1_r[AUDIO_BUFFER_LENGTH_HALF-1];
 8001c1a:	4b3b      	ldr	r3, [pc, #236]	@ (8001d08 <MX_MDMA_Init+0x2f4>)
 8001c1c:	647b      	str	r3, [r7, #68]	@ 0x44
  nodeConfig.BlockDataLength = AUDIO_BUFFER_SIZE_HALF;
 8001c1e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c22:	64bb      	str	r3, [r7, #72]	@ 0x48
  nodeConfig.BlockCount = 1;
 8001c24:	2301      	movs	r3, #1
 8001c26:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_MDMA_LinkedList_CreateNode(&node_mdma_channel0_sw_3, &nodeConfig) != HAL_OK)
 8001c28:	f107 0308 	add.w	r3, r7, #8
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4837      	ldr	r0, [pc, #220]	@ (8001d0c <MX_MDMA_Init+0x2f8>)
 8001c30:	f004 fd46 	bl	80066c0 <HAL_MDMA_LinkedList_CreateNode>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <MX_MDMA_Init+0x22a>
  {
    Error_Handler();
 8001c3a:	f000 fdd5 	bl	80027e8 <Error_Handler>
  /* USER CODE BEGIN mdma_channel0_sw_3 */

  /* USER CODE END mdma_channel0_sw_3 */

  /* Connect a node to the linked list */
  if (HAL_MDMA_LinkedList_AddNode(&hmdma_mdma_channel0_sw_0, &node_mdma_channel0_sw_3, 0) != HAL_OK)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	4932      	ldr	r1, [pc, #200]	@ (8001d0c <MX_MDMA_Init+0x2f8>)
 8001c42:	4826      	ldr	r0, [pc, #152]	@ (8001cdc <MX_MDMA_Init+0x2c8>)
 8001c44:	f004 fe18 	bl	8006878 <HAL_MDMA_LinkedList_AddNode>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <MX_MDMA_Init+0x23e>
  {
    Error_Handler();
 8001c4e:	f000 fdcb 	bl	80027e8 <Error_Handler>
  }

  /* Initialize MDMA link node according to specified parameters */
  nodeConfig.Init.Request = MDMA_REQUEST_SW;
 8001c52:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c56:	60bb      	str	r3, [r7, #8]
  nodeConfig.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 8001c58:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001c5c:	60fb      	str	r3, [r7, #12]
  nodeConfig.Init.Priority = MDMA_PRIORITY_HIGH;
 8001c5e:	2380      	movs	r3, #128	@ 0x80
 8001c60:	613b      	str	r3, [r7, #16]
  nodeConfig.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8001c62:	2300      	movs	r3, #0
 8001c64:	617b      	str	r3, [r7, #20]
  nodeConfig.Init.SourceInc = MDMA_SRC_INC_WORD;
 8001c66:	f240 2302 	movw	r3, #514	@ 0x202
 8001c6a:	61bb      	str	r3, [r7, #24]
  nodeConfig.Init.DestinationInc = MDMA_DEST_INC_HALFWORD;
 8001c6c:	f44f 6381 	mov.w	r3, #1032	@ 0x408
 8001c70:	61fb      	str	r3, [r7, #28]
  nodeConfig.Init.SourceDataSize = MDMA_SRC_DATASIZE_HALFWORD;
 8001c72:	2310      	movs	r3, #16
 8001c74:	623b      	str	r3, [r7, #32]
  nodeConfig.Init.DestDataSize = MDMA_DEST_DATASIZE_HALFWORD;
 8001c76:	2340      	movs	r3, #64	@ 0x40
 8001c78:	627b      	str	r3, [r7, #36]	@ 0x24
  nodeConfig.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001c7a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  nodeConfig.Init.BufferTransferLength = AUDIO_SAMPLE_SIZE;
 8001c80:	2302      	movs	r3, #2
 8001c82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  nodeConfig.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8001c84:	2300      	movs	r3, #0
 8001c86:	633b      	str	r3, [r7, #48]	@ 0x30
  nodeConfig.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	637b      	str	r3, [r7, #52]	@ 0x34
  nodeConfig.Init.SourceBlockAddressOffset = 0;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	63bb      	str	r3, [r7, #56]	@ 0x38
  nodeConfig.Init.DestBlockAddressOffset = 0;
 8001c90:	2300      	movs	r3, #0
 8001c92:	63fb      	str	r3, [r7, #60]	@ 0x3c
  nodeConfig.PostRequestMaskAddress = 0;
 8001c94:	2300      	movs	r3, #0
 8001c96:	653b      	str	r3, [r7, #80]	@ 0x50
  nodeConfig.PostRequestMaskData = 0;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	657b      	str	r3, [r7, #84]	@ 0x54
  nodeConfig.SrcAddress = (uint32_t) &sai_buffer_rx[0];
 8001c9c:	4b1c      	ldr	r3, [pc, #112]	@ (8001d10 <MX_MDMA_Init+0x2fc>)
 8001c9e:	643b      	str	r3, [r7, #64]	@ 0x40
  nodeConfig.DstAddress = (uint32_t) &audio_buffer_rx_ch1_l[0];
 8001ca0:	4b1c      	ldr	r3, [pc, #112]	@ (8001d14 <MX_MDMA_Init+0x300>)
 8001ca2:	647b      	str	r3, [r7, #68]	@ 0x44
  nodeConfig.BlockDataLength = AUDIO_BUFFER_SIZE_HALF;
 8001ca4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ca8:	64bb      	str	r3, [r7, #72]	@ 0x48
  nodeConfig.BlockCount = 1;
 8001caa:	2301      	movs	r3, #1
 8001cac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_MDMA_LinkedList_CreateNode(&node_mdma_channel0_sw_4, &nodeConfig) != HAL_OK)
 8001cae:	f107 0308 	add.w	r3, r7, #8
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4818      	ldr	r0, [pc, #96]	@ (8001d18 <MX_MDMA_Init+0x304>)
 8001cb6:	f004 fd03 	bl	80066c0 <HAL_MDMA_LinkedList_CreateNode>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <MX_MDMA_Init+0x2b0>
  {
    Error_Handler();
 8001cc0:	f000 fd92 	bl	80027e8 <Error_Handler>
  /* USER CODE BEGIN mdma_channel0_sw_4 */

  /* USER CODE END mdma_channel0_sw_4 */

  /* Connect a node to the linked list */
  if (HAL_MDMA_LinkedList_AddNode(&hmdma_mdma_channel0_sw_0, &node_mdma_channel0_sw_4, 0) != HAL_OK)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	4914      	ldr	r1, [pc, #80]	@ (8001d18 <MX_MDMA_Init+0x304>)
 8001cc8:	4804      	ldr	r0, [pc, #16]	@ (8001cdc <MX_MDMA_Init+0x2c8>)
 8001cca:	f004 fdd5 	bl	8006878 <HAL_MDMA_LinkedList_AddNode>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d025      	beq.n	8001d20 <MX_MDMA_Init+0x30c>
 8001cd4:	e022      	b.n	8001d1c <MX_MDMA_Init+0x308>
 8001cd6:	bf00      	nop
 8001cd8:	58024400 	.word	0x58024400
 8001cdc:	24000344 	.word	0x24000344
 8001ce0:	52000040 	.word	0x52000040
 8001ce4:	24000582 	.word	0x24000582
 8001ce8:	20000200 	.word	0x20000200
 8001cec:	240003b0 	.word	0x240003b0
 8001cf0:	08002325 	.word	0x08002325
 8001cf4:	080025c5 	.word	0x080025c5
 8001cf8:	2400077e 	.word	0x2400077e
 8001cfc:	200000fe 	.word	0x200000fe
 8001d00:	240003d8 	.word	0x240003d8
 8001d04:	24000780 	.word	0x24000780
 8001d08:	200002fe 	.word	0x200002fe
 8001d0c:	24000400 	.word	0x24000400
 8001d10:	24000580 	.word	0x24000580
 8001d14:	20000000 	.word	0x20000000
 8001d18:	24000428 	.word	0x24000428
  {
    Error_Handler();
 8001d1c:	f000 fd64 	bl	80027e8 <Error_Handler>
  }

  /* Make the linked list circular by connecting the last node to the first */
  if (HAL_MDMA_LinkedList_EnableCircularMode(&hmdma_mdma_channel0_sw_0) != HAL_OK)
 8001d20:	48ae      	ldr	r0, [pc, #696]	@ (8001fdc <MX_MDMA_Init+0x5c8>)
 8001d22:	f004 fe6d 	bl	8006a00 <HAL_MDMA_LinkedList_EnableCircularMode>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <MX_MDMA_Init+0x31c>
  {
    Error_Handler();
 8001d2c:	f000 fd5c 	bl	80027e8 <Error_Handler>
  }

  /* Configure MDMA channel MDMA_Channel2 */
  /* Configure MDMA request hmdma_mdma_channel2_sw_0 on MDMA_Channel2 */
  hmdma_mdma_channel2_sw_0.Instance = MDMA_Channel2;
 8001d30:	4bab      	ldr	r3, [pc, #684]	@ (8001fe0 <MX_MDMA_Init+0x5cc>)
 8001d32:	4aac      	ldr	r2, [pc, #688]	@ (8001fe4 <MX_MDMA_Init+0x5d0>)
 8001d34:	601a      	str	r2, [r3, #0]
  hmdma_mdma_channel2_sw_0.Init.Request = MDMA_REQUEST_SW;
 8001d36:	4baa      	ldr	r3, [pc, #680]	@ (8001fe0 <MX_MDMA_Init+0x5cc>)
 8001d38:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d3c:	605a      	str	r2, [r3, #4]
  hmdma_mdma_channel2_sw_0.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 8001d3e:	4ba8      	ldr	r3, [pc, #672]	@ (8001fe0 <MX_MDMA_Init+0x5cc>)
 8001d40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001d44:	609a      	str	r2, [r3, #8]
  hmdma_mdma_channel2_sw_0.Init.Priority = MDMA_PRIORITY_MEDIUM;
 8001d46:	4ba6      	ldr	r3, [pc, #664]	@ (8001fe0 <MX_MDMA_Init+0x5cc>)
 8001d48:	2240      	movs	r2, #64	@ 0x40
 8001d4a:	60da      	str	r2, [r3, #12]
  hmdma_mdma_channel2_sw_0.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8001d4c:	4ba4      	ldr	r3, [pc, #656]	@ (8001fe0 <MX_MDMA_Init+0x5cc>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	611a      	str	r2, [r3, #16]
  hmdma_mdma_channel2_sw_0.Init.SourceInc = MDMA_SRC_INC_HALFWORD;
 8001d52:	4ba3      	ldr	r3, [pc, #652]	@ (8001fe0 <MX_MDMA_Init+0x5cc>)
 8001d54:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8001d58:	615a      	str	r2, [r3, #20]
  hmdma_mdma_channel2_sw_0.Init.DestinationInc = MDMA_DEST_INC_WORD;
 8001d5a:	4ba1      	ldr	r3, [pc, #644]	@ (8001fe0 <MX_MDMA_Init+0x5cc>)
 8001d5c:	f640 0208 	movw	r2, #2056	@ 0x808
 8001d60:	619a      	str	r2, [r3, #24]
  hmdma_mdma_channel2_sw_0.Init.SourceDataSize = MDMA_SRC_DATASIZE_HALFWORD;
 8001d62:	4b9f      	ldr	r3, [pc, #636]	@ (8001fe0 <MX_MDMA_Init+0x5cc>)
 8001d64:	2210      	movs	r2, #16
 8001d66:	61da      	str	r2, [r3, #28]
  hmdma_mdma_channel2_sw_0.Init.DestDataSize = MDMA_DEST_DATASIZE_HALFWORD;
 8001d68:	4b9d      	ldr	r3, [pc, #628]	@ (8001fe0 <MX_MDMA_Init+0x5cc>)
 8001d6a:	2240      	movs	r2, #64	@ 0x40
 8001d6c:	621a      	str	r2, [r3, #32]
  hmdma_mdma_channel2_sw_0.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001d6e:	4b9c      	ldr	r3, [pc, #624]	@ (8001fe0 <MX_MDMA_Init+0x5cc>)
 8001d70:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d74:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma_mdma_channel2_sw_0.Init.BufferTransferLength = AUDIO_SAMPLE_SIZE;
 8001d76:	4b9a      	ldr	r3, [pc, #616]	@ (8001fe0 <MX_MDMA_Init+0x5cc>)
 8001d78:	2202      	movs	r2, #2
 8001d7a:	629a      	str	r2, [r3, #40]	@ 0x28
  hmdma_mdma_channel2_sw_0.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8001d7c:	4b98      	ldr	r3, [pc, #608]	@ (8001fe0 <MX_MDMA_Init+0x5cc>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	62da      	str	r2, [r3, #44]	@ 0x2c
  hmdma_mdma_channel2_sw_0.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8001d82:	4b97      	ldr	r3, [pc, #604]	@ (8001fe0 <MX_MDMA_Init+0x5cc>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	631a      	str	r2, [r3, #48]	@ 0x30
  hmdma_mdma_channel2_sw_0.Init.SourceBlockAddressOffset = 0;
 8001d88:	4b95      	ldr	r3, [pc, #596]	@ (8001fe0 <MX_MDMA_Init+0x5cc>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	635a      	str	r2, [r3, #52]	@ 0x34
  hmdma_mdma_channel2_sw_0.Init.DestBlockAddressOffset = 0;
 8001d8e:	4b94      	ldr	r3, [pc, #592]	@ (8001fe0 <MX_MDMA_Init+0x5cc>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_MDMA_Init(&hmdma_mdma_channel2_sw_0) != HAL_OK)
 8001d94:	4892      	ldr	r0, [pc, #584]	@ (8001fe0 <MX_MDMA_Init+0x5cc>)
 8001d96:	f004 fbec 	bl	8006572 <HAL_MDMA_Init>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <MX_MDMA_Init+0x390>
  {
    Error_Handler();
 8001da0:	f000 fd22 	bl	80027e8 <Error_Handler>
  }

  /* Initialize MDMA link node according to specified parameters */
  nodeConfig.Init.Request = MDMA_REQUEST_SW;
 8001da4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001da8:	60bb      	str	r3, [r7, #8]
  nodeConfig.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 8001daa:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001dae:	60fb      	str	r3, [r7, #12]
  nodeConfig.Init.Priority = MDMA_PRIORITY_MEDIUM;
 8001db0:	2340      	movs	r3, #64	@ 0x40
 8001db2:	613b      	str	r3, [r7, #16]
  nodeConfig.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8001db4:	2300      	movs	r3, #0
 8001db6:	617b      	str	r3, [r7, #20]
  nodeConfig.Init.SourceInc = MDMA_SRC_INC_HALFWORD;
 8001db8:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8001dbc:	61bb      	str	r3, [r7, #24]
  nodeConfig.Init.DestinationInc = MDMA_DEST_INC_WORD;
 8001dbe:	f640 0308 	movw	r3, #2056	@ 0x808
 8001dc2:	61fb      	str	r3, [r7, #28]
  nodeConfig.Init.SourceDataSize = MDMA_SRC_DATASIZE_HALFWORD;
 8001dc4:	2310      	movs	r3, #16
 8001dc6:	623b      	str	r3, [r7, #32]
  nodeConfig.Init.DestDataSize = MDMA_DEST_DATASIZE_HALFWORD;
 8001dc8:	2340      	movs	r3, #64	@ 0x40
 8001dca:	627b      	str	r3, [r7, #36]	@ 0x24
  nodeConfig.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001dcc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001dd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  nodeConfig.Init.BufferTransferLength = AUDIO_SAMPLE_SIZE;
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  nodeConfig.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	633b      	str	r3, [r7, #48]	@ 0x30
  nodeConfig.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	637b      	str	r3, [r7, #52]	@ 0x34
  nodeConfig.Init.SourceBlockAddressOffset = 0;
 8001dde:	2300      	movs	r3, #0
 8001de0:	63bb      	str	r3, [r7, #56]	@ 0x38
  nodeConfig.Init.DestBlockAddressOffset = 0;
 8001de2:	2300      	movs	r3, #0
 8001de4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  nodeConfig.PostRequestMaskAddress = 0;
 8001de6:	2300      	movs	r3, #0
 8001de8:	653b      	str	r3, [r7, #80]	@ 0x50
  nodeConfig.PostRequestMaskData = 0;
 8001dea:	2300      	movs	r3, #0
 8001dec:	657b      	str	r3, [r7, #84]	@ 0x54
  nodeConfig.SrcAddress = (uint32_t) &audio_buffer_tx_ch1_r[0];
 8001dee:	4b7e      	ldr	r3, [pc, #504]	@ (8001fe8 <MX_MDMA_Init+0x5d4>)
 8001df0:	643b      	str	r3, [r7, #64]	@ 0x40
  nodeConfig.DstAddress = (uint32_t) &sai_buffer_tx[1];
 8001df2:	4b7e      	ldr	r3, [pc, #504]	@ (8001fec <MX_MDMA_Init+0x5d8>)
 8001df4:	647b      	str	r3, [r7, #68]	@ 0x44
  nodeConfig.BlockDataLength = AUDIO_BUFFER_SIZE_HALF;
 8001df6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001dfa:	64bb      	str	r3, [r7, #72]	@ 0x48
  nodeConfig.BlockCount = 1;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_MDMA_LinkedList_CreateNode(&node_mdma_channel2_sw_1, &nodeConfig) != HAL_OK)
 8001e00:	f107 0308 	add.w	r3, r7, #8
 8001e04:	4619      	mov	r1, r3
 8001e06:	487a      	ldr	r0, [pc, #488]	@ (8001ff0 <MX_MDMA_Init+0x5dc>)
 8001e08:	f004 fc5a 	bl	80066c0 <HAL_MDMA_LinkedList_CreateNode>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <MX_MDMA_Init+0x402>
  {
    Error_Handler();
 8001e12:	f000 fce9 	bl	80027e8 <Error_Handler>
  }
  /* USER CODE BEGIN mdma_channel2_sw_1 */
  HAL_MDMA_RegisterCallback(&hmdma_mdma_channel2_sw_0, HAL_MDMA_XFER_BLOCKCPLT_CB_ID, MDMA_TxXferBlockCpltCallback);
 8001e16:	4a77      	ldr	r2, [pc, #476]	@ (8001ff4 <MX_MDMA_Init+0x5e0>)
 8001e18:	2102      	movs	r1, #2
 8001e1a:	4871      	ldr	r0, [pc, #452]	@ (8001fe0 <MX_MDMA_Init+0x5cc>)
 8001e1c:	f004 fbf6 	bl	800660c <HAL_MDMA_RegisterCallback>
  HAL_MDMA_RegisterCallback(&hmdma_mdma_channel2_sw_0, HAL_MDMA_XFER_ERROR_CB_ID, MDMA_TxErrorCallback);
 8001e20:	4a75      	ldr	r2, [pc, #468]	@ (8001ff8 <MX_MDMA_Init+0x5e4>)
 8001e22:	2104      	movs	r1, #4
 8001e24:	486e      	ldr	r0, [pc, #440]	@ (8001fe0 <MX_MDMA_Init+0x5cc>)
 8001e26:	f004 fbf1 	bl	800660c <HAL_MDMA_RegisterCallback>
  /* USER CODE END mdma_channel2_sw_1 */

  /* Connect a node to the linked list */
  if (HAL_MDMA_LinkedList_AddNode(&hmdma_mdma_channel2_sw_0, &node_mdma_channel2_sw_1, 0) != HAL_OK)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	4970      	ldr	r1, [pc, #448]	@ (8001ff0 <MX_MDMA_Init+0x5dc>)
 8001e2e:	486c      	ldr	r0, [pc, #432]	@ (8001fe0 <MX_MDMA_Init+0x5cc>)
 8001e30:	f004 fd22 	bl	8006878 <HAL_MDMA_LinkedList_AddNode>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <MX_MDMA_Init+0x42a>
  {
    Error_Handler();
 8001e3a:	f000 fcd5 	bl	80027e8 <Error_Handler>
  }

  /* Initialize MDMA link node according to specified parameters */
  nodeConfig.Init.Request = MDMA_REQUEST_SW;
 8001e3e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001e42:	60bb      	str	r3, [r7, #8]
  nodeConfig.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 8001e44:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001e48:	60fb      	str	r3, [r7, #12]
  nodeConfig.Init.Priority = MDMA_PRIORITY_MEDIUM;
 8001e4a:	2340      	movs	r3, #64	@ 0x40
 8001e4c:	613b      	str	r3, [r7, #16]
  nodeConfig.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	617b      	str	r3, [r7, #20]
  nodeConfig.Init.SourceInc = MDMA_SRC_INC_HALFWORD;
 8001e52:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8001e56:	61bb      	str	r3, [r7, #24]
  nodeConfig.Init.DestinationInc = MDMA_DEST_INC_WORD;
 8001e58:	f640 0308 	movw	r3, #2056	@ 0x808
 8001e5c:	61fb      	str	r3, [r7, #28]
  nodeConfig.Init.SourceDataSize = MDMA_SRC_DATASIZE_HALFWORD;
 8001e5e:	2310      	movs	r3, #16
 8001e60:	623b      	str	r3, [r7, #32]
  nodeConfig.Init.DestDataSize = MDMA_DEST_DATASIZE_HALFWORD;
 8001e62:	2340      	movs	r3, #64	@ 0x40
 8001e64:	627b      	str	r3, [r7, #36]	@ 0x24
  nodeConfig.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001e66:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  nodeConfig.Init.BufferTransferLength = AUDIO_SAMPLE_SIZE;
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  nodeConfig.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8001e70:	2300      	movs	r3, #0
 8001e72:	633b      	str	r3, [r7, #48]	@ 0x30
  nodeConfig.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8001e74:	2300      	movs	r3, #0
 8001e76:	637b      	str	r3, [r7, #52]	@ 0x34
  nodeConfig.Init.SourceBlockAddressOffset = 0;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	63bb      	str	r3, [r7, #56]	@ 0x38
  nodeConfig.Init.DestBlockAddressOffset = 0;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  nodeConfig.PostRequestMaskAddress = 0;
 8001e80:	2300      	movs	r3, #0
 8001e82:	653b      	str	r3, [r7, #80]	@ 0x50
  nodeConfig.PostRequestMaskData = 0;
 8001e84:	2300      	movs	r3, #0
 8001e86:	657b      	str	r3, [r7, #84]	@ 0x54
  nodeConfig.SrcAddress = (uint32_t) &audio_buffer_tx_ch1_l[AUDIO_BUFFER_LENGTH_HALF-1];
 8001e88:	4b5c      	ldr	r3, [pc, #368]	@ (8001ffc <MX_MDMA_Init+0x5e8>)
 8001e8a:	643b      	str	r3, [r7, #64]	@ 0x40
  nodeConfig.DstAddress = (uint32_t) &sai_buffer_tx[SAI_BUFFER_LENGTH_HALF-1];
 8001e8c:	4b5c      	ldr	r3, [pc, #368]	@ (8002000 <MX_MDMA_Init+0x5ec>)
 8001e8e:	647b      	str	r3, [r7, #68]	@ 0x44
  nodeConfig.BlockDataLength = AUDIO_BUFFER_SIZE_HALF;
 8001e90:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e94:	64bb      	str	r3, [r7, #72]	@ 0x48
  nodeConfig.BlockCount = 1;
 8001e96:	2301      	movs	r3, #1
 8001e98:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_MDMA_LinkedList_CreateNode(&node_mdma_channel2_sw_2, &nodeConfig) != HAL_OK)
 8001e9a:	f107 0308 	add.w	r3, r7, #8
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	4858      	ldr	r0, [pc, #352]	@ (8002004 <MX_MDMA_Init+0x5f0>)
 8001ea2:	f004 fc0d 	bl	80066c0 <HAL_MDMA_LinkedList_CreateNode>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <MX_MDMA_Init+0x49c>
  {
    Error_Handler();
 8001eac:	f000 fc9c 	bl	80027e8 <Error_Handler>
  /* USER CODE BEGIN mdma_channel2_sw_2 */

  /* USER CODE END mdma_channel2_sw_2 */

  /* Connect a node to the linked list */
  if (HAL_MDMA_LinkedList_AddNode(&hmdma_mdma_channel2_sw_0, &node_mdma_channel2_sw_2, 0) != HAL_OK)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	4954      	ldr	r1, [pc, #336]	@ (8002004 <MX_MDMA_Init+0x5f0>)
 8001eb4:	484a      	ldr	r0, [pc, #296]	@ (8001fe0 <MX_MDMA_Init+0x5cc>)
 8001eb6:	f004 fcdf 	bl	8006878 <HAL_MDMA_LinkedList_AddNode>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <MX_MDMA_Init+0x4b0>
  {
    Error_Handler();
 8001ec0:	f000 fc92 	bl	80027e8 <Error_Handler>
  }

  /* Initialize MDMA link node according to specified parameters */
  nodeConfig.Init.Request = MDMA_REQUEST_SW;
 8001ec4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001ec8:	60bb      	str	r3, [r7, #8]
  nodeConfig.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 8001eca:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001ece:	60fb      	str	r3, [r7, #12]
  nodeConfig.Init.Priority = MDMA_PRIORITY_MEDIUM;
 8001ed0:	2340      	movs	r3, #64	@ 0x40
 8001ed2:	613b      	str	r3, [r7, #16]
  nodeConfig.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	617b      	str	r3, [r7, #20]
  nodeConfig.Init.SourceInc = MDMA_SRC_INC_HALFWORD;
 8001ed8:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8001edc:	61bb      	str	r3, [r7, #24]
  nodeConfig.Init.DestinationInc = MDMA_DEST_INC_WORD;
 8001ede:	f640 0308 	movw	r3, #2056	@ 0x808
 8001ee2:	61fb      	str	r3, [r7, #28]
  nodeConfig.Init.SourceDataSize = MDMA_SRC_DATASIZE_HALFWORD;
 8001ee4:	2310      	movs	r3, #16
 8001ee6:	623b      	str	r3, [r7, #32]
  nodeConfig.Init.DestDataSize = MDMA_DEST_DATASIZE_HALFWORD;
 8001ee8:	2340      	movs	r3, #64	@ 0x40
 8001eea:	627b      	str	r3, [r7, #36]	@ 0x24
  nodeConfig.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001eec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ef0:	62bb      	str	r3, [r7, #40]	@ 0x28
  nodeConfig.Init.BufferTransferLength = AUDIO_SAMPLE_SIZE;
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  nodeConfig.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	633b      	str	r3, [r7, #48]	@ 0x30
  nodeConfig.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8001efa:	2300      	movs	r3, #0
 8001efc:	637b      	str	r3, [r7, #52]	@ 0x34
  nodeConfig.Init.SourceBlockAddressOffset = 0;
 8001efe:	2300      	movs	r3, #0
 8001f00:	63bb      	str	r3, [r7, #56]	@ 0x38
  nodeConfig.Init.DestBlockAddressOffset = 0;
 8001f02:	2300      	movs	r3, #0
 8001f04:	63fb      	str	r3, [r7, #60]	@ 0x3c
  nodeConfig.PostRequestMaskAddress = 0;
 8001f06:	2300      	movs	r3, #0
 8001f08:	653b      	str	r3, [r7, #80]	@ 0x50
  nodeConfig.PostRequestMaskData = 0;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	657b      	str	r3, [r7, #84]	@ 0x54
  nodeConfig.SrcAddress = (uint32_t) &audio_buffer_tx_ch1_r[AUDIO_BUFFER_LENGTH_HALF-1];
 8001f0e:	4b3e      	ldr	r3, [pc, #248]	@ (8002008 <MX_MDMA_Init+0x5f4>)
 8001f10:	643b      	str	r3, [r7, #64]	@ 0x40
  nodeConfig.DstAddress = (uint32_t) &sai_buffer_tx[SAI_BUFFER_LENGTH_HALF];
 8001f12:	4b3e      	ldr	r3, [pc, #248]	@ (800200c <MX_MDMA_Init+0x5f8>)
 8001f14:	647b      	str	r3, [r7, #68]	@ 0x44
  nodeConfig.BlockDataLength = AUDIO_BUFFER_SIZE_HALF;
 8001f16:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f1a:	64bb      	str	r3, [r7, #72]	@ 0x48
  nodeConfig.BlockCount = 1;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_MDMA_LinkedList_CreateNode(&node_mdma_channel2_sw_3, &nodeConfig) != HAL_OK)
 8001f20:	f107 0308 	add.w	r3, r7, #8
 8001f24:	4619      	mov	r1, r3
 8001f26:	483a      	ldr	r0, [pc, #232]	@ (8002010 <MX_MDMA_Init+0x5fc>)
 8001f28:	f004 fbca 	bl	80066c0 <HAL_MDMA_LinkedList_CreateNode>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <MX_MDMA_Init+0x522>
  {
    Error_Handler();
 8001f32:	f000 fc59 	bl	80027e8 <Error_Handler>
  /* USER CODE BEGIN mdma_channel2_sw_3 */

  /* USER CODE END mdma_channel2_sw_3 */

  /* Connect a node to the linked list */
  if (HAL_MDMA_LinkedList_AddNode(&hmdma_mdma_channel2_sw_0, &node_mdma_channel2_sw_3, 0) != HAL_OK)
 8001f36:	2200      	movs	r2, #0
 8001f38:	4935      	ldr	r1, [pc, #212]	@ (8002010 <MX_MDMA_Init+0x5fc>)
 8001f3a:	4829      	ldr	r0, [pc, #164]	@ (8001fe0 <MX_MDMA_Init+0x5cc>)
 8001f3c:	f004 fc9c 	bl	8006878 <HAL_MDMA_LinkedList_AddNode>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <MX_MDMA_Init+0x536>
  {
    Error_Handler();
 8001f46:	f000 fc4f 	bl	80027e8 <Error_Handler>
  }

  /* Initialize MDMA link node according to specified parameters */
  nodeConfig.Init.Request = MDMA_REQUEST_SW;
 8001f4a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001f4e:	60bb      	str	r3, [r7, #8]
  nodeConfig.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 8001f50:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001f54:	60fb      	str	r3, [r7, #12]
  nodeConfig.Init.Priority = MDMA_PRIORITY_MEDIUM;
 8001f56:	2340      	movs	r3, #64	@ 0x40
 8001f58:	613b      	str	r3, [r7, #16]
  nodeConfig.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	617b      	str	r3, [r7, #20]
  nodeConfig.Init.SourceInc = MDMA_SRC_INC_HALFWORD;
 8001f5e:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8001f62:	61bb      	str	r3, [r7, #24]
  nodeConfig.Init.DestinationInc = MDMA_DEST_INC_WORD;
 8001f64:	f640 0308 	movw	r3, #2056	@ 0x808
 8001f68:	61fb      	str	r3, [r7, #28]
  nodeConfig.Init.SourceDataSize = MDMA_SRC_DATASIZE_HALFWORD;
 8001f6a:	2310      	movs	r3, #16
 8001f6c:	623b      	str	r3, [r7, #32]
  nodeConfig.Init.DestDataSize = MDMA_DEST_DATASIZE_HALFWORD;
 8001f6e:	2340      	movs	r3, #64	@ 0x40
 8001f70:	627b      	str	r3, [r7, #36]	@ 0x24
  nodeConfig.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001f72:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f76:	62bb      	str	r3, [r7, #40]	@ 0x28
  nodeConfig.Init.BufferTransferLength = AUDIO_SAMPLE_SIZE;
 8001f78:	2302      	movs	r3, #2
 8001f7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  nodeConfig.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	633b      	str	r3, [r7, #48]	@ 0x30
  nodeConfig.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8001f80:	2300      	movs	r3, #0
 8001f82:	637b      	str	r3, [r7, #52]	@ 0x34
  nodeConfig.Init.SourceBlockAddressOffset = 0;
 8001f84:	2300      	movs	r3, #0
 8001f86:	63bb      	str	r3, [r7, #56]	@ 0x38
  nodeConfig.Init.DestBlockAddressOffset = 0;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  nodeConfig.PostRequestMaskAddress = 0;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	653b      	str	r3, [r7, #80]	@ 0x50
  nodeConfig.PostRequestMaskData = 0;
 8001f90:	2300      	movs	r3, #0
 8001f92:	657b      	str	r3, [r7, #84]	@ 0x54
  nodeConfig.SrcAddress = (uint32_t) &audio_buffer_tx_ch1_l[0];
 8001f94:	4b1f      	ldr	r3, [pc, #124]	@ (8002014 <MX_MDMA_Init+0x600>)
 8001f96:	643b      	str	r3, [r7, #64]	@ 0x40
  nodeConfig.DstAddress = (uint32_t) &sai_buffer_tx[0];
 8001f98:	4b1f      	ldr	r3, [pc, #124]	@ (8002018 <MX_MDMA_Init+0x604>)
 8001f9a:	647b      	str	r3, [r7, #68]	@ 0x44
  nodeConfig.BlockDataLength = AUDIO_BUFFER_SIZE_HALF;
 8001f9c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fa0:	64bb      	str	r3, [r7, #72]	@ 0x48
  nodeConfig.BlockCount = 1;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_MDMA_LinkedList_CreateNode(&node_mdma_channel2_sw_4, &nodeConfig) != HAL_OK)
 8001fa6:	f107 0308 	add.w	r3, r7, #8
 8001faa:	4619      	mov	r1, r3
 8001fac:	481b      	ldr	r0, [pc, #108]	@ (800201c <MX_MDMA_Init+0x608>)
 8001fae:	f004 fb87 	bl	80066c0 <HAL_MDMA_LinkedList_CreateNode>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <MX_MDMA_Init+0x5a8>
  {
    Error_Handler();
 8001fb8:	f000 fc16 	bl	80027e8 <Error_Handler>
  /* USER CODE BEGIN mdma_channel2_sw_4 */

  /* USER CODE END mdma_channel2_sw_4 */

  /* Connect a node to the linked list */
  if (HAL_MDMA_LinkedList_AddNode(&hmdma_mdma_channel2_sw_0, &node_mdma_channel2_sw_4, 0) != HAL_OK)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	4917      	ldr	r1, [pc, #92]	@ (800201c <MX_MDMA_Init+0x608>)
 8001fc0:	4807      	ldr	r0, [pc, #28]	@ (8001fe0 <MX_MDMA_Init+0x5cc>)
 8001fc2:	f004 fc59 	bl	8006878 <HAL_MDMA_LinkedList_AddNode>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <MX_MDMA_Init+0x5bc>
  {
    Error_Handler();
 8001fcc:	f000 fc0c 	bl	80027e8 <Error_Handler>
  }

  /* Make the linked list circular by connecting the last node to the first */
  if (HAL_MDMA_LinkedList_EnableCircularMode(&hmdma_mdma_channel2_sw_0) != HAL_OK)
 8001fd0:	4803      	ldr	r0, [pc, #12]	@ (8001fe0 <MX_MDMA_Init+0x5cc>)
 8001fd2:	f004 fd15 	bl	8006a00 <HAL_MDMA_LinkedList_EnableCircularMode>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	e021      	b.n	8002020 <MX_MDMA_Init+0x60c>
 8001fdc:	24000344 	.word	0x24000344
 8001fe0:	24000450 	.word	0x24000450
 8001fe4:	520000c0 	.word	0x520000c0
 8001fe8:	20000600 	.word	0x20000600
 8001fec:	24000982 	.word	0x24000982
 8001ff0:	240004c0 	.word	0x240004c0
 8001ff4:	08002475 	.word	0x08002475
 8001ff8:	080025d9 	.word	0x080025d9
 8001ffc:	200004fe 	.word	0x200004fe
 8002000:	24000b7e 	.word	0x24000b7e
 8002004:	240004e8 	.word	0x240004e8
 8002008:	200006fe 	.word	0x200006fe
 800200c:	24000b80 	.word	0x24000b80
 8002010:	24000510 	.word	0x24000510
 8002014:	20000400 	.word	0x20000400
 8002018:	24000980 	.word	0x24000980
 800201c:	24000538 	.word	0x24000538
 8002020:	d001      	beq.n	8002026 <MX_MDMA_Init+0x612>
  {
    Error_Handler();
 8002022:	f000 fbe1 	bl	80027e8 <Error_Handler>
  }

  /* MDMA interrupt initialization */
  /* MDMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MDMA_IRQn, 0, 0);
 8002026:	2200      	movs	r2, #0
 8002028:	2100      	movs	r1, #0
 800202a:	207a      	movs	r0, #122	@ 0x7a
 800202c:	f001 f873 	bl	8003116 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8002030:	207a      	movs	r0, #122	@ 0x7a
 8002032:	f001 f88a 	bl	800314a <HAL_NVIC_EnableIRQ>

}
 8002036:	bf00      	nop
 8002038:	3758      	adds	r7, #88	@ 0x58
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop

08002040 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b08c      	sub	sp, #48	@ 0x30
 8002044:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002046:	f107 031c 	add.w	r3, r7, #28
 800204a:	2200      	movs	r2, #0
 800204c:	601a      	str	r2, [r3, #0]
 800204e:	605a      	str	r2, [r3, #4]
 8002050:	609a      	str	r2, [r3, #8]
 8002052:	60da      	str	r2, [r3, #12]
 8002054:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002056:	4b63      	ldr	r3, [pc, #396]	@ (80021e4 <MX_GPIO_Init+0x1a4>)
 8002058:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800205c:	4a61      	ldr	r2, [pc, #388]	@ (80021e4 <MX_GPIO_Init+0x1a4>)
 800205e:	f043 0310 	orr.w	r3, r3, #16
 8002062:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002066:	4b5f      	ldr	r3, [pc, #380]	@ (80021e4 <MX_GPIO_Init+0x1a4>)
 8002068:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800206c:	f003 0310 	and.w	r3, r3, #16
 8002070:	61bb      	str	r3, [r7, #24]
 8002072:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002074:	4b5b      	ldr	r3, [pc, #364]	@ (80021e4 <MX_GPIO_Init+0x1a4>)
 8002076:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800207a:	4a5a      	ldr	r2, [pc, #360]	@ (80021e4 <MX_GPIO_Init+0x1a4>)
 800207c:	f043 0304 	orr.w	r3, r3, #4
 8002080:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002084:	4b57      	ldr	r3, [pc, #348]	@ (80021e4 <MX_GPIO_Init+0x1a4>)
 8002086:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800208a:	f003 0304 	and.w	r3, r3, #4
 800208e:	617b      	str	r3, [r7, #20]
 8002090:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002092:	4b54      	ldr	r3, [pc, #336]	@ (80021e4 <MX_GPIO_Init+0x1a4>)
 8002094:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002098:	4a52      	ldr	r2, [pc, #328]	@ (80021e4 <MX_GPIO_Init+0x1a4>)
 800209a:	f043 0301 	orr.w	r3, r3, #1
 800209e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020a2:	4b50      	ldr	r3, [pc, #320]	@ (80021e4 <MX_GPIO_Init+0x1a4>)
 80020a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020a8:	f003 0301 	and.w	r3, r3, #1
 80020ac:	613b      	str	r3, [r7, #16]
 80020ae:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020b0:	4b4c      	ldr	r3, [pc, #304]	@ (80021e4 <MX_GPIO_Init+0x1a4>)
 80020b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020b6:	4a4b      	ldr	r2, [pc, #300]	@ (80021e4 <MX_GPIO_Init+0x1a4>)
 80020b8:	f043 0302 	orr.w	r3, r3, #2
 80020bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020c0:	4b48      	ldr	r3, [pc, #288]	@ (80021e4 <MX_GPIO_Init+0x1a4>)
 80020c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	60fb      	str	r3, [r7, #12]
 80020cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020ce:	4b45      	ldr	r3, [pc, #276]	@ (80021e4 <MX_GPIO_Init+0x1a4>)
 80020d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020d4:	4a43      	ldr	r2, [pc, #268]	@ (80021e4 <MX_GPIO_Init+0x1a4>)
 80020d6:	f043 0308 	orr.w	r3, r3, #8
 80020da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020de:	4b41      	ldr	r3, [pc, #260]	@ (80021e4 <MX_GPIO_Init+0x1a4>)
 80020e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020e4:	f003 0308 	and.w	r3, r3, #8
 80020e8:	60bb      	str	r3, [r7, #8]
 80020ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80020ec:	4b3d      	ldr	r3, [pc, #244]	@ (80021e4 <MX_GPIO_Init+0x1a4>)
 80020ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020f2:	4a3c      	ldr	r2, [pc, #240]	@ (80021e4 <MX_GPIO_Init+0x1a4>)
 80020f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80020f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020fc:	4b39      	ldr	r3, [pc, #228]	@ (80021e4 <MX_GPIO_Init+0x1a4>)
 80020fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002102:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002106:	607b      	str	r3, [r7, #4]
 8002108:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_RESET);
 800210a:	2200      	movs	r2, #0
 800210c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002110:	4835      	ldr	r0, [pc, #212]	@ (80021e8 <MX_GPIO_Init+0x1a8>)
 8002112:	f003 fbc3 	bl	800589c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002116:	2332      	movs	r3, #50	@ 0x32
 8002118:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800211a:	2302      	movs	r3, #2
 800211c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211e:	2300      	movs	r3, #0
 8002120:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002122:	2300      	movs	r3, #0
 8002124:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002126:	230b      	movs	r3, #11
 8002128:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800212a:	f107 031c 	add.w	r3, r7, #28
 800212e:	4619      	mov	r1, r3
 8002130:	482e      	ldr	r0, [pc, #184]	@ (80021ec <MX_GPIO_Init+0x1ac>)
 8002132:	f003 fa03 	bl	800553c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8002136:	2386      	movs	r3, #134	@ 0x86
 8002138:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800213a:	2302      	movs	r3, #2
 800213c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213e:	2300      	movs	r3, #0
 8002140:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002142:	2300      	movs	r3, #0
 8002144:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002146:	230b      	movs	r3, #11
 8002148:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800214a:	f107 031c 	add.w	r3, r7, #28
 800214e:	4619      	mov	r1, r3
 8002150:	4827      	ldr	r0, [pc, #156]	@ (80021f0 <MX_GPIO_Init+0x1b0>)
 8002152:	f003 f9f3 	bl	800553c <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_Pin */
  GPIO_InitStruct.Pin = RESET_Pin;
 8002156:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800215a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800215c:	2301      	movs	r3, #1
 800215e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002160:	2300      	movs	r3, #0
 8002162:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002164:	2303      	movs	r3, #3
 8002166:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 8002168:	f107 031c 	add.w	r3, r7, #28
 800216c:	4619      	mov	r1, r3
 800216e:	481e      	ldr	r0, [pc, #120]	@ (80021e8 <MX_GPIO_Init+0x1a8>)
 8002170:	f003 f9e4 	bl	800553c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002174:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002178:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217a:	2302      	movs	r3, #2
 800217c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217e:	2300      	movs	r3, #0
 8002180:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002182:	2300      	movs	r3, #0
 8002184:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002186:	230b      	movs	r3, #11
 8002188:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800218a:	f107 031c 	add.w	r3, r7, #28
 800218e:	4619      	mov	r1, r3
 8002190:	4818      	ldr	r0, [pc, #96]	@ (80021f4 <MX_GPIO_Init+0x1b4>)
 8002192:	f003 f9d3 	bl	800553c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8002196:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 800219a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219c:	2302      	movs	r3, #2
 800219e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a4:	2300      	movs	r3, #0
 80021a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80021a8:	230a      	movs	r3, #10
 80021aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ac:	f107 031c 	add.w	r3, r7, #28
 80021b0:	4619      	mov	r1, r3
 80021b2:	480f      	ldr	r0, [pc, #60]	@ (80021f0 <MX_GPIO_Init+0x1b0>)
 80021b4:	f003 f9c2 	bl	800553c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80021b8:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80021bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021be:	2302      	movs	r3, #2
 80021c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c2:	2300      	movs	r3, #0
 80021c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c6:	2300      	movs	r3, #0
 80021c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80021ca:	230b      	movs	r3, #11
 80021cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80021ce:	f107 031c 	add.w	r3, r7, #28
 80021d2:	4619      	mov	r1, r3
 80021d4:	4808      	ldr	r0, [pc, #32]	@ (80021f8 <MX_GPIO_Init+0x1b8>)
 80021d6:	f003 f9b1 	bl	800553c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80021da:	bf00      	nop
 80021dc:	3730      	adds	r7, #48	@ 0x30
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	58024400 	.word	0x58024400
 80021e8:	58021000 	.word	0x58021000
 80021ec:	58020800 	.word	0x58020800
 80021f0:	58020000 	.word	0x58020000
 80021f4:	58020400 	.word	0x58020400
 80021f8:	58021800 	.word	0x58021800

080021fc <HAL_SAI_RxHalfCpltCallback>:

/* USER CODE BEGIN 4 */
//TODO Adress/Size aligment error, Read error
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai) {
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
	CLEAR_BIT(sai_status, SAI_STATUS_RX_HALF_PENDING);
 8002204:	4b1e      	ldr	r3, [pc, #120]	@ (8002280 <HAL_SAI_RxHalfCpltCallback+0x84>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	b2db      	uxtb	r3, r3
 800220a:	f023 0301 	bic.w	r3, r3, #1
 800220e:	b2da      	uxtb	r2, r3
 8002210:	4b1b      	ldr	r3, [pc, #108]	@ (8002280 <HAL_SAI_RxHalfCpltCallback+0x84>)
 8002212:	701a      	strb	r2, [r3, #0]
	SET_BIT(sai_status, SAI_STATUS_RX_HALF_CPLT);
 8002214:	4b1a      	ldr	r3, [pc, #104]	@ (8002280 <HAL_SAI_RxHalfCpltCallback+0x84>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	b2db      	uxtb	r3, r3
 800221a:	f043 0302 	orr.w	r3, r3, #2
 800221e:	b2da      	uxtb	r2, r3
 8002220:	4b17      	ldr	r3, [pc, #92]	@ (8002280 <HAL_SAI_RxHalfCpltCallback+0x84>)
 8002222:	701a      	strb	r2, [r3, #0]
	CLEAR_BIT(sai_status, SAI_STATUS_RX_FULL_CPLT);
 8002224:	4b16      	ldr	r3, [pc, #88]	@ (8002280 <HAL_SAI_RxHalfCpltCallback+0x84>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	b2db      	uxtb	r3, r3
 800222a:	f023 0308 	bic.w	r3, r3, #8
 800222e:	b2da      	uxtb	r2, r3
 8002230:	4b13      	ldr	r3, [pc, #76]	@ (8002280 <HAL_SAI_RxHalfCpltCallback+0x84>)
 8002232:	701a      	strb	r2, [r3, #0]
	SET_BIT(sai_status, SAI_STATUS_RX_FULL_PENDING);
 8002234:	4b12      	ldr	r3, [pc, #72]	@ (8002280 <HAL_SAI_RxHalfCpltCallback+0x84>)
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	b2db      	uxtb	r3, r3
 800223a:	f043 0304 	orr.w	r3, r3, #4
 800223e:	b2da      	uxtb	r2, r3
 8002240:	4b0f      	ldr	r3, [pc, #60]	@ (8002280 <HAL_SAI_RxHalfCpltCallback+0x84>)
 8002242:	701a      	strb	r2, [r3, #0]

	CLEAR_BIT(audio_rx_status, AUDIO_STATUS_HALF_PART);
 8002244:	4b0f      	ldr	r3, [pc, #60]	@ (8002284 <HAL_SAI_RxHalfCpltCallback+0x88>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	b2db      	uxtb	r3, r3
 800224a:	f023 030f 	bic.w	r3, r3, #15
 800224e:	b2da      	uxtb	r2, r3
 8002250:	4b0c      	ldr	r3, [pc, #48]	@ (8002284 <HAL_SAI_RxHalfCpltCallback+0x88>)
 8002252:	701a      	strb	r2, [r3, #0]
	CLEAR_BIT(audio_dsp_status, AUDIO_STATUS_HALF_PART);
 8002254:	4b0c      	ldr	r3, [pc, #48]	@ (8002288 <HAL_SAI_RxHalfCpltCallback+0x8c>)
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	b2db      	uxtb	r3, r3
 800225a:	f023 030f 	bic.w	r3, r3, #15
 800225e:	b2da      	uxtb	r2, r3
 8002260:	4b09      	ldr	r3, [pc, #36]	@ (8002288 <HAL_SAI_RxHalfCpltCallback+0x8c>)
 8002262:	701a      	strb	r2, [r3, #0]
	CLEAR_BIT(audio_tx_status, AUDIO_STATUS_HALF_PART);
 8002264:	4b09      	ldr	r3, [pc, #36]	@ (800228c <HAL_SAI_RxHalfCpltCallback+0x90>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	b2db      	uxtb	r3, r3
 800226a:	f023 030f 	bic.w	r3, r3, #15
 800226e:	b2da      	uxtb	r2, r3
 8002270:	4b06      	ldr	r3, [pc, #24]	@ (800228c <HAL_SAI_RxHalfCpltCallback+0x90>)
 8002272:	701a      	strb	r2, [r3, #0]


}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	24000d83 	.word	0x24000d83
 8002284:	24000d80 	.word	0x24000d80
 8002288:	24000d81 	.word	0x24000d81
 800228c:	24000d82 	.word	0x24000d82

08002290 <HAL_SAI_RxCpltCallback>:

void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai) {
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
	CLEAR_BIT(sai_status, SAI_STATUS_RX_FULL_PENDING);
 8002298:	4b1e      	ldr	r3, [pc, #120]	@ (8002314 <HAL_SAI_RxCpltCallback+0x84>)
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	b2db      	uxtb	r3, r3
 800229e:	f023 0304 	bic.w	r3, r3, #4
 80022a2:	b2da      	uxtb	r2, r3
 80022a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002314 <HAL_SAI_RxCpltCallback+0x84>)
 80022a6:	701a      	strb	r2, [r3, #0]
	SET_BIT(sai_status, SAI_STATUS_RX_FULL_CPLT);
 80022a8:	4b1a      	ldr	r3, [pc, #104]	@ (8002314 <HAL_SAI_RxCpltCallback+0x84>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	f043 0308 	orr.w	r3, r3, #8
 80022b2:	b2da      	uxtb	r2, r3
 80022b4:	4b17      	ldr	r3, [pc, #92]	@ (8002314 <HAL_SAI_RxCpltCallback+0x84>)
 80022b6:	701a      	strb	r2, [r3, #0]
	CLEAR_BIT(sai_status, SAI_STATUS_RX_HALF_CPLT);
 80022b8:	4b16      	ldr	r3, [pc, #88]	@ (8002314 <HAL_SAI_RxCpltCallback+0x84>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	f023 0302 	bic.w	r3, r3, #2
 80022c2:	b2da      	uxtb	r2, r3
 80022c4:	4b13      	ldr	r3, [pc, #76]	@ (8002314 <HAL_SAI_RxCpltCallback+0x84>)
 80022c6:	701a      	strb	r2, [r3, #0]
	SET_BIT(sai_status, SAI_STATUS_RX_HALF_PENDING);
 80022c8:	4b12      	ldr	r3, [pc, #72]	@ (8002314 <HAL_SAI_RxCpltCallback+0x84>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	f043 0301 	orr.w	r3, r3, #1
 80022d2:	b2da      	uxtb	r2, r3
 80022d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002314 <HAL_SAI_RxCpltCallback+0x84>)
 80022d6:	701a      	strb	r2, [r3, #0]

	CLEAR_BIT(audio_rx_status, AUDIO_STATUS_FULL);
 80022d8:	4b0f      	ldr	r3, [pc, #60]	@ (8002318 <HAL_SAI_RxCpltCallback+0x88>)
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	f003 030f 	and.w	r3, r3, #15
 80022e2:	b2da      	uxtb	r2, r3
 80022e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002318 <HAL_SAI_RxCpltCallback+0x88>)
 80022e6:	701a      	strb	r2, [r3, #0]
	CLEAR_BIT(audio_dsp_status, AUDIO_STATUS_FULL);
 80022e8:	4b0c      	ldr	r3, [pc, #48]	@ (800231c <HAL_SAI_RxCpltCallback+0x8c>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	f003 030f 	and.w	r3, r3, #15
 80022f2:	b2da      	uxtb	r2, r3
 80022f4:	4b09      	ldr	r3, [pc, #36]	@ (800231c <HAL_SAI_RxCpltCallback+0x8c>)
 80022f6:	701a      	strb	r2, [r3, #0]
	CLEAR_BIT(audio_tx_status, AUDIO_STATUS_FULL);
 80022f8:	4b09      	ldr	r3, [pc, #36]	@ (8002320 <HAL_SAI_RxCpltCallback+0x90>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	f003 030f 	and.w	r3, r3, #15
 8002302:	b2da      	uxtb	r2, r3
 8002304:	4b06      	ldr	r3, [pc, #24]	@ (8002320 <HAL_SAI_RxCpltCallback+0x90>)
 8002306:	701a      	strb	r2, [r3, #0]


}
 8002308:	bf00      	nop
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr
 8002314:	24000d83 	.word	0x24000d83
 8002318:	24000d80 	.word	0x24000d80
 800231c:	24000d81 	.word	0x24000d81
 8002320:	24000d82 	.word	0x24000d82

08002324 <MDMA_RxXferBlockCpltCallback>:
////	}
//	//CLEAR_BIT(audio_tx_status, AUDIO_STATUS_HALF_PART);
//}

void MDMA_RxXferBlockCpltCallback(MDMA_HandleTypeDef *_hdma)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
	transfercounter++;
 800232c:	4b4f      	ldr	r3, [pc, #316]	@ (800246c <MDMA_RxXferBlockCpltCallback+0x148>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	3301      	adds	r3, #1
 8002332:	4a4e      	ldr	r2, [pc, #312]	@ (800246c <MDMA_RxXferBlockCpltCallback+0x148>)
 8002334:	6013      	str	r3, [r2, #0]
	uint8_t nextNodeIndex = 0;
 8002336:	2300      	movs	r3, #0
 8002338:	73fb      	strb	r3, [r7, #15]
	MDMA_LinkNodeTypeDef* currNode = _hdma->FirstLinkedListNodeAddress;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800233e:	60bb      	str	r3, [r7, #8]
	for(; nextNodeIndex < _hdma->LinkedListNodeCounter && currNode != (MDMA_LinkNodeTypeDef*)_hdma->Instance->CLAR; nextNodeIndex++, currNode = (MDMA_LinkNodeTypeDef*)currNode->CLAR)
 8002340:	e005      	b.n	800234e <MDMA_RxXferBlockCpltCallback+0x2a>
 8002342:	7bfb      	ldrb	r3, [r7, #15]
 8002344:	3301      	adds	r3, #1
 8002346:	73fb      	strb	r3, [r7, #15]
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	695b      	ldr	r3, [r3, #20]
 800234c:	60bb      	str	r3, [r7, #8]
 800234e:	7bfa      	ldrb	r2, [r7, #15]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002354:	429a      	cmp	r2, r3
 8002356:	d206      	bcs.n	8002366 <MDMA_RxXferBlockCpltCallback+0x42>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800235e:	461a      	mov	r2, r3
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	4293      	cmp	r3, r2
 8002364:	d1ed      	bne.n	8002342 <MDMA_RxXferBlockCpltCallback+0x1e>
	{
	}
	switch(nextNodeIndex){
 8002366:	7bfb      	ldrb	r3, [r7, #15]
 8002368:	2b03      	cmp	r3, #3
 800236a:	d877      	bhi.n	800245c <MDMA_RxXferBlockCpltCallback+0x138>
 800236c:	a201      	add	r2, pc, #4	@ (adr r2, 8002374 <MDMA_RxXferBlockCpltCallback+0x50>)
 800236e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002372:	bf00      	nop
 8002374:	08002385 	.word	0x08002385
 8002378:	080023bb 	.word	0x080023bb
 800237c:	080023f1 	.word	0x080023f1
 8002380:	08002427 	.word	0x08002427
	case 0:
		if(READ_BIT(audio_rx_status, AUDIO_STATUS_R_PENDING)){
 8002384:	4b3a      	ldr	r3, [pc, #232]	@ (8002470 <MDMA_RxXferBlockCpltCallback+0x14c>)
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	b2db      	uxtb	r3, r3
 800238a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800238e:	2b00      	cmp	r3, #0
 8002390:	d010      	beq.n	80023b4 <MDMA_RxXferBlockCpltCallback+0x90>
			SET_BIT(audio_rx_status, AUDIO_STATUS_R_CPLT);
 8002392:	4b37      	ldr	r3, [pc, #220]	@ (8002470 <MDMA_RxXferBlockCpltCallback+0x14c>)
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	b2db      	uxtb	r3, r3
 8002398:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800239c:	b2da      	uxtb	r2, r3
 800239e:	4b34      	ldr	r3, [pc, #208]	@ (8002470 <MDMA_RxXferBlockCpltCallback+0x14c>)
 80023a0:	701a      	strb	r2, [r3, #0]
			CLEAR_BIT(audio_rx_status, AUDIO_STATUS_R_PENDING);
 80023a2:	4b33      	ldr	r3, [pc, #204]	@ (8002470 <MDMA_RxXferBlockCpltCallback+0x14c>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80023ac:	b2da      	uxtb	r2, r3
 80023ae:	4b30      	ldr	r3, [pc, #192]	@ (8002470 <MDMA_RxXferBlockCpltCallback+0x14c>)
 80023b0:	701a      	strb	r2, [r3, #0]
		}else{
			Error_Handler();
		}
		break;
 80023b2:	e056      	b.n	8002462 <MDMA_RxXferBlockCpltCallback+0x13e>
			Error_Handler();
 80023b4:	f000 fa18 	bl	80027e8 <Error_Handler>
		break;
 80023b8:	e053      	b.n	8002462 <MDMA_RxXferBlockCpltCallback+0x13e>
	case 1:
		if(READ_BIT(audio_rx_status, AUDIO_STATUS_L_HALF_PENDING)){
 80023ba:	4b2d      	ldr	r3, [pc, #180]	@ (8002470 <MDMA_RxXferBlockCpltCallback+0x14c>)
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	f003 0301 	and.w	r3, r3, #1
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d010      	beq.n	80023ea <MDMA_RxXferBlockCpltCallback+0xc6>
			SET_BIT(audio_rx_status, AUDIO_STATUS_L_HALF_CPLT);
 80023c8:	4b29      	ldr	r3, [pc, #164]	@ (8002470 <MDMA_RxXferBlockCpltCallback+0x14c>)
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	f043 0302 	orr.w	r3, r3, #2
 80023d2:	b2da      	uxtb	r2, r3
 80023d4:	4b26      	ldr	r3, [pc, #152]	@ (8002470 <MDMA_RxXferBlockCpltCallback+0x14c>)
 80023d6:	701a      	strb	r2, [r3, #0]
			CLEAR_BIT(audio_rx_status, AUDIO_STATUS_L_HALF_PENDING);
 80023d8:	4b25      	ldr	r3, [pc, #148]	@ (8002470 <MDMA_RxXferBlockCpltCallback+0x14c>)
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	f023 0301 	bic.w	r3, r3, #1
 80023e2:	b2da      	uxtb	r2, r3
 80023e4:	4b22      	ldr	r3, [pc, #136]	@ (8002470 <MDMA_RxXferBlockCpltCallback+0x14c>)
 80023e6:	701a      	strb	r2, [r3, #0]
		}else{
			Error_Handler();
		}
		break;
 80023e8:	e03b      	b.n	8002462 <MDMA_RxXferBlockCpltCallback+0x13e>
			Error_Handler();
 80023ea:	f000 f9fd 	bl	80027e8 <Error_Handler>
		break;
 80023ee:	e038      	b.n	8002462 <MDMA_RxXferBlockCpltCallback+0x13e>
	case 2:
		if(READ_BIT(audio_rx_status, AUDIO_STATUS_R_HALF_PENDING)){
 80023f0:	4b1f      	ldr	r3, [pc, #124]	@ (8002470 <MDMA_RxXferBlockCpltCallback+0x14c>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	f003 0304 	and.w	r3, r3, #4
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d010      	beq.n	8002420 <MDMA_RxXferBlockCpltCallback+0xfc>
			SET_BIT(audio_rx_status, AUDIO_STATUS_R_HALF_CPLT);
 80023fe:	4b1c      	ldr	r3, [pc, #112]	@ (8002470 <MDMA_RxXferBlockCpltCallback+0x14c>)
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	b2db      	uxtb	r3, r3
 8002404:	f043 0308 	orr.w	r3, r3, #8
 8002408:	b2da      	uxtb	r2, r3
 800240a:	4b19      	ldr	r3, [pc, #100]	@ (8002470 <MDMA_RxXferBlockCpltCallback+0x14c>)
 800240c:	701a      	strb	r2, [r3, #0]
			CLEAR_BIT(audio_rx_status, AUDIO_STATUS_R_HALF_PENDING);
 800240e:	4b18      	ldr	r3, [pc, #96]	@ (8002470 <MDMA_RxXferBlockCpltCallback+0x14c>)
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	b2db      	uxtb	r3, r3
 8002414:	f023 0304 	bic.w	r3, r3, #4
 8002418:	b2da      	uxtb	r2, r3
 800241a:	4b15      	ldr	r3, [pc, #84]	@ (8002470 <MDMA_RxXferBlockCpltCallback+0x14c>)
 800241c:	701a      	strb	r2, [r3, #0]
		}else{
			Error_Handler();
		}
		break;
 800241e:	e020      	b.n	8002462 <MDMA_RxXferBlockCpltCallback+0x13e>
			Error_Handler();
 8002420:	f000 f9e2 	bl	80027e8 <Error_Handler>
		break;
 8002424:	e01d      	b.n	8002462 <MDMA_RxXferBlockCpltCallback+0x13e>
	case 3:
		if(READ_BIT(audio_rx_status, AUDIO_STATUS_L_PENDING)){
 8002426:	4b12      	ldr	r3, [pc, #72]	@ (8002470 <MDMA_RxXferBlockCpltCallback+0x14c>)
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	b2db      	uxtb	r3, r3
 800242c:	f003 0310 	and.w	r3, r3, #16
 8002430:	2b00      	cmp	r3, #0
 8002432:	d010      	beq.n	8002456 <MDMA_RxXferBlockCpltCallback+0x132>
			SET_BIT(audio_rx_status, AUDIO_STATUS_L_CPLT);
 8002434:	4b0e      	ldr	r3, [pc, #56]	@ (8002470 <MDMA_RxXferBlockCpltCallback+0x14c>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	b2db      	uxtb	r3, r3
 800243a:	f043 0320 	orr.w	r3, r3, #32
 800243e:	b2da      	uxtb	r2, r3
 8002440:	4b0b      	ldr	r3, [pc, #44]	@ (8002470 <MDMA_RxXferBlockCpltCallback+0x14c>)
 8002442:	701a      	strb	r2, [r3, #0]
			CLEAR_BIT(audio_rx_status, AUDIO_STATUS_L_PENDING);
 8002444:	4b0a      	ldr	r3, [pc, #40]	@ (8002470 <MDMA_RxXferBlockCpltCallback+0x14c>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	b2db      	uxtb	r3, r3
 800244a:	f023 0310 	bic.w	r3, r3, #16
 800244e:	b2da      	uxtb	r2, r3
 8002450:	4b07      	ldr	r3, [pc, #28]	@ (8002470 <MDMA_RxXferBlockCpltCallback+0x14c>)
 8002452:	701a      	strb	r2, [r3, #0]
		}else{
			Error_Handler();
		}
		break;
 8002454:	e005      	b.n	8002462 <MDMA_RxXferBlockCpltCallback+0x13e>
			Error_Handler();
 8002456:	f000 f9c7 	bl	80027e8 <Error_Handler>
		break;
 800245a:	e002      	b.n	8002462 <MDMA_RxXferBlockCpltCallback+0x13e>
	default:
		Error_Handler();
 800245c:	f000 f9c4 	bl	80027e8 <Error_Handler>
		break;
 8002460:	bf00      	nop
	}
}
 8002462:	bf00      	nop
 8002464:	3710      	adds	r7, #16
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	24000d84 	.word	0x24000d84
 8002470:	24000d80 	.word	0x24000d80

08002474 <MDMA_TxXferBlockCpltCallback>:

void MDMA_TxXferBlockCpltCallback(MDMA_HandleTypeDef *_hdma)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
	transfercounter++;
 800247c:	4b4f      	ldr	r3, [pc, #316]	@ (80025bc <MDMA_TxXferBlockCpltCallback+0x148>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	3301      	adds	r3, #1
 8002482:	4a4e      	ldr	r2, [pc, #312]	@ (80025bc <MDMA_TxXferBlockCpltCallback+0x148>)
 8002484:	6013      	str	r3, [r2, #0]
	uint8_t nextNodeIndex = 0;
 8002486:	2300      	movs	r3, #0
 8002488:	73fb      	strb	r3, [r7, #15]
	MDMA_LinkNodeTypeDef* currNode = _hdma->FirstLinkedListNodeAddress;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800248e:	60bb      	str	r3, [r7, #8]
	for(; nextNodeIndex < _hdma->LinkedListNodeCounter && currNode != (MDMA_LinkNodeTypeDef*)_hdma->Instance->CLAR; nextNodeIndex++, currNode = (MDMA_LinkNodeTypeDef*)currNode->CLAR)
 8002490:	e005      	b.n	800249e <MDMA_TxXferBlockCpltCallback+0x2a>
 8002492:	7bfb      	ldrb	r3, [r7, #15]
 8002494:	3301      	adds	r3, #1
 8002496:	73fb      	strb	r3, [r7, #15]
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	695b      	ldr	r3, [r3, #20]
 800249c:	60bb      	str	r3, [r7, #8]
 800249e:	7bfa      	ldrb	r2, [r7, #15]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d206      	bcs.n	80024b6 <MDMA_TxXferBlockCpltCallback+0x42>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ae:	461a      	mov	r2, r3
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d1ed      	bne.n	8002492 <MDMA_TxXferBlockCpltCallback+0x1e>
	{
	}
	switch(nextNodeIndex){
 80024b6:	7bfb      	ldrb	r3, [r7, #15]
 80024b8:	2b03      	cmp	r3, #3
 80024ba:	d877      	bhi.n	80025ac <MDMA_TxXferBlockCpltCallback+0x138>
 80024bc:	a201      	add	r2, pc, #4	@ (adr r2, 80024c4 <MDMA_TxXferBlockCpltCallback+0x50>)
 80024be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024c2:	bf00      	nop
 80024c4:	080024d5 	.word	0x080024d5
 80024c8:	0800250b 	.word	0x0800250b
 80024cc:	08002541 	.word	0x08002541
 80024d0:	08002577 	.word	0x08002577
	case 0:
		if(READ_BIT(audio_tx_status, AUDIO_STATUS_R_PENDING)){
 80024d4:	4b3a      	ldr	r3, [pc, #232]	@ (80025c0 <MDMA_TxXferBlockCpltCallback+0x14c>)
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d010      	beq.n	8002504 <MDMA_TxXferBlockCpltCallback+0x90>
			SET_BIT(audio_tx_status, AUDIO_STATUS_R_CPLT);
 80024e2:	4b37      	ldr	r3, [pc, #220]	@ (80025c0 <MDMA_TxXferBlockCpltCallback+0x14c>)
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80024ec:	b2da      	uxtb	r2, r3
 80024ee:	4b34      	ldr	r3, [pc, #208]	@ (80025c0 <MDMA_TxXferBlockCpltCallback+0x14c>)
 80024f0:	701a      	strb	r2, [r3, #0]
			CLEAR_BIT(audio_tx_status, AUDIO_STATUS_R_PENDING);
 80024f2:	4b33      	ldr	r3, [pc, #204]	@ (80025c0 <MDMA_TxXferBlockCpltCallback+0x14c>)
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80024fc:	b2da      	uxtb	r2, r3
 80024fe:	4b30      	ldr	r3, [pc, #192]	@ (80025c0 <MDMA_TxXferBlockCpltCallback+0x14c>)
 8002500:	701a      	strb	r2, [r3, #0]
		}else{
			Error_Handler();
		}
		break;
 8002502:	e056      	b.n	80025b2 <MDMA_TxXferBlockCpltCallback+0x13e>
			Error_Handler();
 8002504:	f000 f970 	bl	80027e8 <Error_Handler>
		break;
 8002508:	e053      	b.n	80025b2 <MDMA_TxXferBlockCpltCallback+0x13e>
	case 1:
		if(READ_BIT(audio_tx_status, AUDIO_STATUS_L_HALF_PENDING)){
 800250a:	4b2d      	ldr	r3, [pc, #180]	@ (80025c0 <MDMA_TxXferBlockCpltCallback+0x14c>)
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	b2db      	uxtb	r3, r3
 8002510:	f003 0301 	and.w	r3, r3, #1
 8002514:	2b00      	cmp	r3, #0
 8002516:	d010      	beq.n	800253a <MDMA_TxXferBlockCpltCallback+0xc6>
			SET_BIT(audio_tx_status, AUDIO_STATUS_L_HALF_CPLT);
 8002518:	4b29      	ldr	r3, [pc, #164]	@ (80025c0 <MDMA_TxXferBlockCpltCallback+0x14c>)
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	b2db      	uxtb	r3, r3
 800251e:	f043 0302 	orr.w	r3, r3, #2
 8002522:	b2da      	uxtb	r2, r3
 8002524:	4b26      	ldr	r3, [pc, #152]	@ (80025c0 <MDMA_TxXferBlockCpltCallback+0x14c>)
 8002526:	701a      	strb	r2, [r3, #0]
			CLEAR_BIT(audio_tx_status, AUDIO_STATUS_L_HALF_PENDING);
 8002528:	4b25      	ldr	r3, [pc, #148]	@ (80025c0 <MDMA_TxXferBlockCpltCallback+0x14c>)
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	b2db      	uxtb	r3, r3
 800252e:	f023 0301 	bic.w	r3, r3, #1
 8002532:	b2da      	uxtb	r2, r3
 8002534:	4b22      	ldr	r3, [pc, #136]	@ (80025c0 <MDMA_TxXferBlockCpltCallback+0x14c>)
 8002536:	701a      	strb	r2, [r3, #0]
		}else{
			Error_Handler();
		}
		break;
 8002538:	e03b      	b.n	80025b2 <MDMA_TxXferBlockCpltCallback+0x13e>
			Error_Handler();
 800253a:	f000 f955 	bl	80027e8 <Error_Handler>
		break;
 800253e:	e038      	b.n	80025b2 <MDMA_TxXferBlockCpltCallback+0x13e>
	case 2:
		if(READ_BIT(audio_tx_status, AUDIO_STATUS_R_HALF_PENDING)){
 8002540:	4b1f      	ldr	r3, [pc, #124]	@ (80025c0 <MDMA_TxXferBlockCpltCallback+0x14c>)
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	b2db      	uxtb	r3, r3
 8002546:	f003 0304 	and.w	r3, r3, #4
 800254a:	2b00      	cmp	r3, #0
 800254c:	d010      	beq.n	8002570 <MDMA_TxXferBlockCpltCallback+0xfc>
			SET_BIT(audio_tx_status, AUDIO_STATUS_R_HALF_CPLT);
 800254e:	4b1c      	ldr	r3, [pc, #112]	@ (80025c0 <MDMA_TxXferBlockCpltCallback+0x14c>)
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	b2db      	uxtb	r3, r3
 8002554:	f043 0308 	orr.w	r3, r3, #8
 8002558:	b2da      	uxtb	r2, r3
 800255a:	4b19      	ldr	r3, [pc, #100]	@ (80025c0 <MDMA_TxXferBlockCpltCallback+0x14c>)
 800255c:	701a      	strb	r2, [r3, #0]
			CLEAR_BIT(audio_tx_status, AUDIO_STATUS_R_HALF_PENDING);
 800255e:	4b18      	ldr	r3, [pc, #96]	@ (80025c0 <MDMA_TxXferBlockCpltCallback+0x14c>)
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	b2db      	uxtb	r3, r3
 8002564:	f023 0304 	bic.w	r3, r3, #4
 8002568:	b2da      	uxtb	r2, r3
 800256a:	4b15      	ldr	r3, [pc, #84]	@ (80025c0 <MDMA_TxXferBlockCpltCallback+0x14c>)
 800256c:	701a      	strb	r2, [r3, #0]
		}else{
			Error_Handler();
		}
		break;
 800256e:	e020      	b.n	80025b2 <MDMA_TxXferBlockCpltCallback+0x13e>
			Error_Handler();
 8002570:	f000 f93a 	bl	80027e8 <Error_Handler>
		break;
 8002574:	e01d      	b.n	80025b2 <MDMA_TxXferBlockCpltCallback+0x13e>
	case 3:
		if(READ_BIT(audio_tx_status, AUDIO_STATUS_L_PENDING)){
 8002576:	4b12      	ldr	r3, [pc, #72]	@ (80025c0 <MDMA_TxXferBlockCpltCallback+0x14c>)
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	b2db      	uxtb	r3, r3
 800257c:	f003 0310 	and.w	r3, r3, #16
 8002580:	2b00      	cmp	r3, #0
 8002582:	d010      	beq.n	80025a6 <MDMA_TxXferBlockCpltCallback+0x132>
			SET_BIT(audio_tx_status, AUDIO_STATUS_L_CPLT);
 8002584:	4b0e      	ldr	r3, [pc, #56]	@ (80025c0 <MDMA_TxXferBlockCpltCallback+0x14c>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	b2db      	uxtb	r3, r3
 800258a:	f043 0320 	orr.w	r3, r3, #32
 800258e:	b2da      	uxtb	r2, r3
 8002590:	4b0b      	ldr	r3, [pc, #44]	@ (80025c0 <MDMA_TxXferBlockCpltCallback+0x14c>)
 8002592:	701a      	strb	r2, [r3, #0]
			CLEAR_BIT(audio_tx_status, AUDIO_STATUS_L_PENDING);
 8002594:	4b0a      	ldr	r3, [pc, #40]	@ (80025c0 <MDMA_TxXferBlockCpltCallback+0x14c>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	b2db      	uxtb	r3, r3
 800259a:	f023 0310 	bic.w	r3, r3, #16
 800259e:	b2da      	uxtb	r2, r3
 80025a0:	4b07      	ldr	r3, [pc, #28]	@ (80025c0 <MDMA_TxXferBlockCpltCallback+0x14c>)
 80025a2:	701a      	strb	r2, [r3, #0]
		}else{
			Error_Handler();
		}
		break;
 80025a4:	e005      	b.n	80025b2 <MDMA_TxXferBlockCpltCallback+0x13e>
			Error_Handler();
 80025a6:	f000 f91f 	bl	80027e8 <Error_Handler>
		break;
 80025aa:	e002      	b.n	80025b2 <MDMA_TxXferBlockCpltCallback+0x13e>
	default:
		Error_Handler();
 80025ac:	f000 f91c 	bl	80027e8 <Error_Handler>
		break;
 80025b0:	bf00      	nop
	}
}
 80025b2:	bf00      	nop
 80025b4:	3710      	adds	r7, #16
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	24000d84 	.word	0x24000d84
 80025c0:	24000d82 	.word	0x24000d82

080025c4 <MDMA_RxErrorCallback>:


void MDMA_RxErrorCallback(MDMA_HandleTypeDef *_hdma){
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
	Error_Handler();
 80025cc:	f000 f90c 	bl	80027e8 <Error_Handler>
}
 80025d0:	bf00      	nop
 80025d2:	3708      	adds	r7, #8
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <MDMA_TxErrorCallback>:

void MDMA_TxErrorCallback(MDMA_HandleTypeDef *_hdma){
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
	Error_Handler();
 80025e0:	f000 f902 	bl	80027e8 <Error_Handler>
}
 80025e4:	bf00      	nop
 80025e6:	3708      	adds	r7, #8
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <codecSetup>:

HAL_StatusTypeDef codecSetup(){
 80025ec:	b590      	push	{r4, r7, lr}
 80025ee:	b08f      	sub	sp, #60	@ 0x3c
 80025f0:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status;

	aic3xHandle.hi2c = &hi2c2;
 80025f2:	4b77      	ldr	r3, [pc, #476]	@ (80027d0 <codecSetup+0x1e4>)
 80025f4:	4a77      	ldr	r2, [pc, #476]	@ (80027d4 <codecSetup+0x1e8>)
 80025f6:	601a      	str	r2, [r3, #0]
	aic3xHandle.rst_port = RESET_GPIO_Port;
 80025f8:	4b75      	ldr	r3, [pc, #468]	@ (80027d0 <codecSetup+0x1e4>)
 80025fa:	4a77      	ldr	r2, [pc, #476]	@ (80027d8 <codecSetup+0x1ec>)
 80025fc:	605a      	str	r2, [r3, #4]
	aic3xHandle.rst_pin = RESET_Pin;
 80025fe:	4b74      	ldr	r3, [pc, #464]	@ (80027d0 <codecSetup+0x1e4>)
 8002600:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002604:	811a      	strh	r2, [r3, #8]


	status = AIC3X_Init(&aic3xHandle);
 8002606:	4872      	ldr	r0, [pc, #456]	@ (80027d0 <codecSetup+0x1e4>)
 8002608:	f7fe f8c2 	bl	8000790 <AIC3X_Init>
 800260c:	4603      	mov	r3, r0
 800260e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	if (status != HAL_OK) {
 8002612:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002616:	2b00      	cmp	r3, #0
 8002618:	d002      	beq.n	8002620 <codecSetup+0x34>
		return status;
 800261a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800261e:	e0d3      	b.n	80027c8 <codecSetup+0x1dc>
	}

	AIC3X_ASDIntCtrl_TypeDef asdIntCtrl = {
 8002620:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002624:	2200      	movs	r2, #0
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	605a      	str	r2, [r3, #4]
 800262a:	609a      	str	r2, [r3, #8]
 800262c:	2301      	movs	r3, #1
 800262e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
			.ReSyncMute = false,
			.WordOffset = 0
	};


	status = AIC3X_WriteASDataIntfControl(&aic3xHandle, &asdIntCtrl);
 8002632:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002636:	4619      	mov	r1, r3
 8002638:	4865      	ldr	r0, [pc, #404]	@ (80027d0 <codecSetup+0x1e4>)
 800263a:	f7fe f98e 	bl	800095a <AIC3X_WriteASDataIntfControl>
 800263e:	4603      	mov	r3, r0
 8002640:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	if (status != HAL_OK) {
 8002644:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002648:	2b00      	cmp	r3, #0
 800264a:	d002      	beq.n	8002652 <codecSetup+0x66>
		return status;
 800264c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002650:	e0ba      	b.n	80027c8 <codecSetup+0x1dc>
//	  				.PllR = 8
//	  		};
//
//	  		status = USER_AIC3X_WritePllProgramming(&aic3xHandle, &pllProgramming);

	AIC3X_PGAGainControl_TypeDef pgaGainControl = {
 8002652:	2300      	movs	r3, #0
 8002654:	627b      	str	r3, [r7, #36]	@ 0x24
			.RADCMuted = false,
			.RADCGain = 0
	};


	AIC3X_ADCMixControl_TypeDef adcMixControl = {
 8002656:	4b61      	ldr	r3, [pc, #388]	@ (80027dc <codecSetup+0x1f0>)
 8002658:	f107 0414 	add.w	r4, r7, #20
 800265c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800265e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				.RightADC_PGASoftStepping = 0b00,
				.RightADC_MIC1LPDifferential = false,
				.RightADC_MIC1LPGain = 0b1111
	};

	status = AIC3X_WriteADCMixControl(&aic3xHandle, &adcMixControl);
 8002662:	f107 0314 	add.w	r3, r7, #20
 8002666:	4619      	mov	r1, r3
 8002668:	4859      	ldr	r0, [pc, #356]	@ (80027d0 <codecSetup+0x1e4>)
 800266a:	f7fe fa2c 	bl	8000ac6 <AIC3X_WriteADCMixControl>
 800266e:	4603      	mov	r3, r0
 8002670:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	if (status != HAL_OK) {
 8002674:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002678:	2b00      	cmp	r3, #0
 800267a:	d002      	beq.n	8002682 <codecSetup+0x96>
		return status;
 800267c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002680:	e0a2      	b.n	80027c8 <codecSetup+0x1dc>
	}

	status = AIC3X_WritePGAGainControl(&aic3xHandle, &pgaGainControl);
 8002682:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002686:	4619      	mov	r1, r3
 8002688:	4851      	ldr	r0, [pc, #324]	@ (80027d0 <codecSetup+0x1e4>)
 800268a:	f7fe f9d5 	bl	8000a38 <AIC3X_WritePGAGainControl>
 800268e:	4603      	mov	r3, r0
 8002690:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	if (status != HAL_OK) {
 8002694:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002698:	2b00      	cmp	r3, #0
 800269a:	d002      	beq.n	80026a2 <codecSetup+0xb6>
		return status;
 800269c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80026a0:	e092      	b.n	80027c8 <codecSetup+0x1dc>
	}


	AIC3X_DataPathControl_TypeDef dataPathControl = {
 80026a2:	4b4f      	ldr	r3, [pc, #316]	@ (80027e0 <codecSetup+0x1f4>)
 80026a4:	881b      	ldrh	r3, [r3, #0]
 80026a6:	823b      	strh	r3, [r7, #16]
			.LeftDACDataPath = AIC3X_DATAPATH_STRAIGHT,
			.RightDACDataPath = AIC3X_DATAPATH_STRAIGHT
	};

	status = AIC3X_WriteDataPathControl(&aic3xHandle, &dataPathControl);
 80026a8:	f107 0310 	add.w	r3, r7, #16
 80026ac:	4619      	mov	r1, r3
 80026ae:	4848      	ldr	r0, [pc, #288]	@ (80027d0 <codecSetup+0x1e4>)
 80026b0:	f7fe f914 	bl	80008dc <AIC3X_WriteDataPathControl>
 80026b4:	4603      	mov	r3, r0
 80026b6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	if (status != HAL_OK) {
 80026ba:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d002      	beq.n	80026c8 <codecSetup+0xdc>
		return status;
 80026c2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80026c6:	e07f      	b.n	80027c8 <codecSetup+0x1dc>
	}

	AIC3X_DACPowerControl_TypeDef dacPowerControl = {
 80026c8:	4b46      	ldr	r3, [pc, #280]	@ (80027e4 <codecSetup+0x1f8>)
 80026ca:	881b      	ldrh	r3, [r3, #0]
 80026cc:	81bb      	strh	r3, [r7, #12]
			.LeftDACPoweredUp = true,
			.RightDACPoweredUp = true
	};

	status = AIC3X_WriteDACPowerControl(&aic3xHandle, &dacPowerControl);
 80026ce:	f107 030c 	add.w	r3, r7, #12
 80026d2:	4619      	mov	r1, r3
 80026d4:	483e      	ldr	r0, [pc, #248]	@ (80027d0 <codecSetup+0x1e4>)
 80026d6:	f7fe fb34 	bl	8000d42 <AIC3X_WriteDACPowerControl>
 80026da:	4603      	mov	r3, r0
 80026dc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	if (status != HAL_OK) {
 80026e0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d002      	beq.n	80026ee <codecSetup+0x102>
		return status;
 80026e8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80026ec:	e06c      	b.n	80027c8 <codecSetup+0x1dc>
	}


	AIC3X_VolControl_TypeDef defaultVolControl = {
 80026ee:	2300      	movs	r3, #0
 80026f0:	723b      	strb	r3, [r7, #8]
 80026f2:	2300      	movs	r3, #0
 80026f4:	727b      	strb	r3, [r7, #9]
			.Muted = false,
			.Volume = 0,
	};

	status = AIC3X_WriteVolControl(&aic3xHandle,LDAC_VOL, &defaultVolControl);
 80026f6:	f107 0308 	add.w	r3, r7, #8
 80026fa:	461a      	mov	r2, r3
 80026fc:	212b      	movs	r1, #43	@ 0x2b
 80026fe:	4834      	ldr	r0, [pc, #208]	@ (80027d0 <codecSetup+0x1e4>)
 8002700:	f7fe fb63 	bl	8000dca <AIC3X_WriteVolControl>
 8002704:	4603      	mov	r3, r0
 8002706:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	if (status != HAL_OK) {
 800270a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800270e:	2b00      	cmp	r3, #0
 8002710:	d002      	beq.n	8002718 <codecSetup+0x12c>
		return status;
 8002712:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002716:	e057      	b.n	80027c8 <codecSetup+0x1dc>
	}

	status = AIC3X_WriteVolControl(&aic3xHandle,RDAC_VOL, &defaultVolControl);
 8002718:	f107 0308 	add.w	r3, r7, #8
 800271c:	461a      	mov	r2, r3
 800271e:	212c      	movs	r1, #44	@ 0x2c
 8002720:	482b      	ldr	r0, [pc, #172]	@ (80027d0 <codecSetup+0x1e4>)
 8002722:	f7fe fb52 	bl	8000dca <AIC3X_WriteVolControl>
 8002726:	4603      	mov	r3, r0
 8002728:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	if (status != HAL_OK) {
 800272c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002730:	2b00      	cmp	r3, #0
 8002732:	d002      	beq.n	800273a <codecSetup+0x14e>
		return status;
 8002734:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002738:	e046      	b.n	80027c8 <codecSetup+0x1dc>
	}

	status = AIC3X_WriteVolControl(&aic3xHandle,DACL1_2_LLOPM_VOL, &defaultVolControl);
 800273a:	f107 0308 	add.w	r3, r7, #8
 800273e:	461a      	mov	r2, r3
 8002740:	2152      	movs	r1, #82	@ 0x52
 8002742:	4823      	ldr	r0, [pc, #140]	@ (80027d0 <codecSetup+0x1e4>)
 8002744:	f7fe fb41 	bl	8000dca <AIC3X_WriteVolControl>
 8002748:	4603      	mov	r3, r0
 800274a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	if (status != HAL_OK) {
 800274e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002752:	2b00      	cmp	r3, #0
 8002754:	d002      	beq.n	800275c <codecSetup+0x170>
		return status;
 8002756:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800275a:	e035      	b.n	80027c8 <codecSetup+0x1dc>
	}

	status = AIC3X_WriteVolControl(&aic3xHandle,DACR1_2_RLOPM_VOL, &defaultVolControl);
 800275c:	f107 0308 	add.w	r3, r7, #8
 8002760:	461a      	mov	r2, r3
 8002762:	215c      	movs	r1, #92	@ 0x5c
 8002764:	481a      	ldr	r0, [pc, #104]	@ (80027d0 <codecSetup+0x1e4>)
 8002766:	f7fe fb30 	bl	8000dca <AIC3X_WriteVolControl>
 800276a:	4603      	mov	r3, r0
 800276c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	if (status != HAL_OK) {
 8002770:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002774:	2b00      	cmp	r3, #0
 8002776:	d002      	beq.n	800277e <codecSetup+0x192>
		return status;
 8002778:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800277c:	e024      	b.n	80027c8 <codecSetup+0x1dc>
	}

	AIC3X_OutputLevelControl_TypeDef defaultOutputLevelControl = {
 800277e:	2300      	movs	r3, #0
 8002780:	703b      	strb	r3, [r7, #0]
 8002782:	2300      	movs	r3, #0
 8002784:	707b      	strb	r3, [r7, #1]
 8002786:	2300      	movs	r3, #0
 8002788:	70bb      	strb	r3, [r7, #2]
 800278a:	2300      	movs	r3, #0
 800278c:	70fb      	strb	r3, [r7, #3]
 800278e:	2301      	movs	r3, #1
 8002790:	713b      	strb	r3, [r7, #4]
			.PowerDownDriveControl = false,
			.VolumeControlStatus = false,
			.PowerControl = true
	};

	status = AIC3X_WriteOutputLevelControl(&aic3xHandle, LLOPM_CTRL, &defaultOutputLevelControl);
 8002792:	463b      	mov	r3, r7
 8002794:	461a      	mov	r2, r3
 8002796:	2156      	movs	r1, #86	@ 0x56
 8002798:	480d      	ldr	r0, [pc, #52]	@ (80027d0 <codecSetup+0x1e4>)
 800279a:	f7fe fb65 	bl	8000e68 <AIC3X_WriteOutputLevelControl>
 800279e:	4603      	mov	r3, r0
 80027a0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	if (status != HAL_OK) {
 80027a4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d002      	beq.n	80027b2 <codecSetup+0x1c6>
		return status;
 80027ac:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80027b0:	e00a      	b.n	80027c8 <codecSetup+0x1dc>
	}

	status = AIC3X_WriteOutputLevelControl(&aic3xHandle, RLOPM_CTRL, &defaultOutputLevelControl);
 80027b2:	463b      	mov	r3, r7
 80027b4:	461a      	mov	r2, r3
 80027b6:	215d      	movs	r1, #93	@ 0x5d
 80027b8:	4805      	ldr	r0, [pc, #20]	@ (80027d0 <codecSetup+0x1e4>)
 80027ba:	f7fe fb55 	bl	8000e68 <AIC3X_WriteOutputLevelControl>
 80027be:	4603      	mov	r3, r0
 80027c0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	return status;
 80027c4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	373c      	adds	r7, #60	@ 0x3c
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd90      	pop	{r4, r7, pc}
 80027d0:	24000560 	.word	0x24000560
 80027d4:	2400003c 	.word	0x2400003c
 80027d8:	58021000 	.word	0x58021000
 80027dc:	0800caa0 	.word	0x0800caa0
 80027e0:	0800cab0 	.word	0x0800cab0
 80027e4:	0800cab4 	.word	0x0800cab4

080027e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80027ec:	b672      	cpsid	i
}
 80027ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
		__BKPT();
 80027f0:	be00      	bkpt	0x0000
 80027f2:	e7fd      	b.n	80027f0 <Error_Handler+0x8>

080027f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002824 <HAL_MspInit+0x30>)
 80027fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002800:	4a08      	ldr	r2, [pc, #32]	@ (8002824 <HAL_MspInit+0x30>)
 8002802:	f043 0302 	orr.w	r3, r3, #2
 8002806:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800280a:	4b06      	ldr	r3, [pc, #24]	@ (8002824 <HAL_MspInit+0x30>)
 800280c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002810:	f003 0302 	and.w	r3, r3, #2
 8002814:	607b      	str	r3, [r7, #4]
 8002816:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002818:	bf00      	nop
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr
 8002824:	58024400 	.word	0x58024400

08002828 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b0ba      	sub	sp, #232	@ 0xe8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002830:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002834:	2200      	movs	r2, #0
 8002836:	601a      	str	r2, [r3, #0]
 8002838:	605a      	str	r2, [r3, #4]
 800283a:	609a      	str	r2, [r3, #8]
 800283c:	60da      	str	r2, [r3, #12]
 800283e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002840:	f107 0310 	add.w	r3, r7, #16
 8002844:	22c0      	movs	r2, #192	@ 0xc0
 8002846:	2100      	movs	r1, #0
 8002848:	4618      	mov	r0, r3
 800284a:	f00a f8e3 	bl	800ca14 <memset>
  if(hi2c->Instance==I2C2)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a30      	ldr	r2, [pc, #192]	@ (8002914 <HAL_I2C_MspInit+0xec>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d158      	bne.n	800290a <HAL_I2C_MspInit+0xe2>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002858:	f04f 0208 	mov.w	r2, #8
 800285c:	f04f 0300 	mov.w	r3, #0
 8002860:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 32;
 8002864:	2320      	movs	r3, #32
 8002866:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 129;
 8002868:	2381      	movs	r3, #129	@ 0x81
 800286a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 800286c:	2302      	movs	r3, #2
 800286e:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8002870:	2302      	movs	r3, #2
 8002872:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 100;
 8002874:	2364      	movs	r3, #100	@ 0x64
 8002876:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 8002878:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800287c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 800287e:	2300      	movs	r3, #0
 8002880:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8002882:	2300      	movs	r3, #0
 8002884:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_PLL3;
 8002886:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800288a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800288e:	f107 0310 	add.w	r3, r7, #16
 8002892:	4618      	mov	r0, r3
 8002894:	f005 fc4e 	bl	8008134 <HAL_RCCEx_PeriphCLKConfig>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <HAL_I2C_MspInit+0x7a>
    {
      Error_Handler();
 800289e:	f7ff ffa3 	bl	80027e8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028a2:	4b1d      	ldr	r3, [pc, #116]	@ (8002918 <HAL_I2C_MspInit+0xf0>)
 80028a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028a8:	4a1b      	ldr	r2, [pc, #108]	@ (8002918 <HAL_I2C_MspInit+0xf0>)
 80028aa:	f043 0302 	orr.w	r3, r3, #2
 80028ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80028b2:	4b19      	ldr	r3, [pc, #100]	@ (8002918 <HAL_I2C_MspInit+0xf0>)
 80028b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028b8:	f003 0302 	and.w	r3, r3, #2
 80028bc:	60fb      	str	r3, [r7, #12]
 80028be:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80028c0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80028c4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028c8:	2312      	movs	r3, #18
 80028ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028ce:	2301      	movs	r3, #1
 80028d0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028d4:	2303      	movs	r3, #3
 80028d6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80028da:	2304      	movs	r3, #4
 80028dc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028e0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80028e4:	4619      	mov	r1, r3
 80028e6:	480d      	ldr	r0, [pc, #52]	@ (800291c <HAL_I2C_MspInit+0xf4>)
 80028e8:	f002 fe28 	bl	800553c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80028ec:	4b0a      	ldr	r3, [pc, #40]	@ (8002918 <HAL_I2C_MspInit+0xf0>)
 80028ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80028f2:	4a09      	ldr	r2, [pc, #36]	@ (8002918 <HAL_I2C_MspInit+0xf0>)
 80028f4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80028f8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80028fc:	4b06      	ldr	r3, [pc, #24]	@ (8002918 <HAL_I2C_MspInit+0xf0>)
 80028fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002902:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002906:	60bb      	str	r3, [r7, #8]
 8002908:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 800290a:	bf00      	nop
 800290c:	37e8      	adds	r7, #232	@ 0xe8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	40005800 	.word	0x40005800
 8002918:	58024400 	.word	0x58024400
 800291c:	58020400 	.word	0x58020400

08002920 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b08a      	sub	sp, #40	@ 0x28
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002928:	f107 0314 	add.w	r3, r7, #20
 800292c:	2200      	movs	r2, #0
 800292e:	601a      	str	r2, [r3, #0]
 8002930:	605a      	str	r2, [r3, #4]
 8002932:	609a      	str	r2, [r3, #8]
 8002934:	60da      	str	r2, [r3, #12]
 8002936:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a1a      	ldr	r2, [pc, #104]	@ (80029a8 <HAL_UART_MspInit+0x88>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d12e      	bne.n	80029a0 <HAL_UART_MspInit+0x80>
  {
    /* USER CODE BEGIN USART3_MspInit 0 */

    /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002942:	4b1a      	ldr	r3, [pc, #104]	@ (80029ac <HAL_UART_MspInit+0x8c>)
 8002944:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002948:	4a18      	ldr	r2, [pc, #96]	@ (80029ac <HAL_UART_MspInit+0x8c>)
 800294a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800294e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002952:	4b16      	ldr	r3, [pc, #88]	@ (80029ac <HAL_UART_MspInit+0x8c>)
 8002954:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002958:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800295c:	613b      	str	r3, [r7, #16]
 800295e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002960:	4b12      	ldr	r3, [pc, #72]	@ (80029ac <HAL_UART_MspInit+0x8c>)
 8002962:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002966:	4a11      	ldr	r2, [pc, #68]	@ (80029ac <HAL_UART_MspInit+0x8c>)
 8002968:	f043 0308 	orr.w	r3, r3, #8
 800296c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002970:	4b0e      	ldr	r3, [pc, #56]	@ (80029ac <HAL_UART_MspInit+0x8c>)
 8002972:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002976:	f003 0308 	and.w	r3, r3, #8
 800297a:	60fb      	str	r3, [r7, #12]
 800297c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800297e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002982:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002984:	2302      	movs	r3, #2
 8002986:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002988:	2300      	movs	r3, #0
 800298a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800298c:	2300      	movs	r3, #0
 800298e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002990:	2307      	movs	r3, #7
 8002992:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002994:	f107 0314 	add.w	r3, r7, #20
 8002998:	4619      	mov	r1, r3
 800299a:	4805      	ldr	r0, [pc, #20]	@ (80029b0 <HAL_UART_MspInit+0x90>)
 800299c:	f002 fdce 	bl	800553c <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 80029a0:	bf00      	nop
 80029a2:	3728      	adds	r7, #40	@ 0x28
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	40004800 	.word	0x40004800
 80029ac:	58024400 	.word	0x58024400
 80029b0:	58020c00 	.word	0x58020c00

080029b4 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_b;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b08e      	sub	sp, #56	@ 0x38
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a7c      	ldr	r2, [pc, #496]	@ (8002bb4 <HAL_SAI_MspInit+0x200>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d176      	bne.n	8002ab4 <HAL_SAI_MspInit+0x100>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 80029c6:	4b7c      	ldr	r3, [pc, #496]	@ (8002bb8 <HAL_SAI_MspInit+0x204>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d10e      	bne.n	80029ec <HAL_SAI_MspInit+0x38>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80029ce:	4b7b      	ldr	r3, [pc, #492]	@ (8002bbc <HAL_SAI_MspInit+0x208>)
 80029d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80029d4:	4a79      	ldr	r2, [pc, #484]	@ (8002bbc <HAL_SAI_MspInit+0x208>)
 80029d6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80029da:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80029de:	4b77      	ldr	r3, [pc, #476]	@ (8002bbc <HAL_SAI_MspInit+0x208>)
 80029e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80029e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029e8:	613b      	str	r3, [r7, #16]
 80029ea:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 80029ec:	4b72      	ldr	r3, [pc, #456]	@ (8002bb8 <HAL_SAI_MspInit+0x204>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	3301      	adds	r3, #1
 80029f2:	4a71      	ldr	r2, [pc, #452]	@ (8002bb8 <HAL_SAI_MspInit+0x204>)
 80029f4:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80029f6:	2374      	movs	r3, #116	@ 0x74
 80029f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029fa:	2302      	movs	r3, #2
 80029fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fe:	2300      	movs	r3, #0
 8002a00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a02:	2300      	movs	r3, #0
 8002a04:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002a06:	2306      	movs	r3, #6
 8002a08:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a0e:	4619      	mov	r1, r3
 8002a10:	486b      	ldr	r0, [pc, #428]	@ (8002bc0 <HAL_SAI_MspInit+0x20c>)
 8002a12:	f002 fd93 	bl	800553c <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA1_Stream0;
 8002a16:	4b6b      	ldr	r3, [pc, #428]	@ (8002bc4 <HAL_SAI_MspInit+0x210>)
 8002a18:	4a6b      	ldr	r2, [pc, #428]	@ (8002bc8 <HAL_SAI_MspInit+0x214>)
 8002a1a:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 8002a1c:	4b69      	ldr	r3, [pc, #420]	@ (8002bc4 <HAL_SAI_MspInit+0x210>)
 8002a1e:	2257      	movs	r2, #87	@ 0x57
 8002a20:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a22:	4b68      	ldr	r3, [pc, #416]	@ (8002bc4 <HAL_SAI_MspInit+0x210>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a28:	4b66      	ldr	r3, [pc, #408]	@ (8002bc4 <HAL_SAI_MspInit+0x210>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8002a2e:	4b65      	ldr	r3, [pc, #404]	@ (8002bc4 <HAL_SAI_MspInit+0x210>)
 8002a30:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a34:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002a36:	4b63      	ldr	r3, [pc, #396]	@ (8002bc4 <HAL_SAI_MspInit+0x210>)
 8002a38:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002a3c:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002a3e:	4b61      	ldr	r3, [pc, #388]	@ (8002bc4 <HAL_SAI_MspInit+0x210>)
 8002a40:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a44:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8002a46:	4b5f      	ldr	r3, [pc, #380]	@ (8002bc4 <HAL_SAI_MspInit+0x210>)
 8002a48:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a4c:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_HIGH;
 8002a4e:	4b5d      	ldr	r3, [pc, #372]	@ (8002bc4 <HAL_SAI_MspInit+0x210>)
 8002a50:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002a54:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a56:	4b5b      	ldr	r3, [pc, #364]	@ (8002bc4 <HAL_SAI_MspInit+0x210>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8002a5c:	4859      	ldr	r0, [pc, #356]	@ (8002bc4 <HAL_SAI_MspInit+0x210>)
 8002a5e:	f000 fb8f 	bl	8003180 <HAL_DMA_Init>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <HAL_SAI_MspInit+0xb8>
    {
      Error_Handler();
 8002a68:	f7ff febe 	bl	80027e8 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 8002a6c:	2306      	movs	r3, #6
 8002a6e:	617b      	str	r3, [r7, #20]
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_RISING;
 8002a70:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a74:	61bb      	str	r3, [r7, #24]
    pSyncConfig.SyncEnable = DISABLE;
 8002a76:	2300      	movs	r3, #0
 8002a78:	773b      	strb	r3, [r7, #28]
    pSyncConfig.EventEnable = ENABLE;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	777b      	strb	r3, [r7, #29]
    pSyncConfig.RequestNumber = 1;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	623b      	str	r3, [r7, #32]
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai1_a, &pSyncConfig) != HAL_OK)
 8002a82:	f107 0314 	add.w	r3, r7, #20
 8002a86:	4619      	mov	r1, r3
 8002a88:	484e      	ldr	r0, [pc, #312]	@ (8002bc4 <HAL_SAI_MspInit+0x210>)
 8002a8a:	f002 fc5d 	bl	8005348 <HAL_DMAEx_ConfigMuxSync>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d001      	beq.n	8002a98 <HAL_SAI_MspInit+0xe4>
    {
      Error_Handler();
 8002a94:	f7ff fea8 	bl	80027e8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	4a4a      	ldr	r2, [pc, #296]	@ (8002bc4 <HAL_SAI_MspInit+0x210>)
 8002a9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8002aa0:	4a48      	ldr	r2, [pc, #288]	@ (8002bc4 <HAL_SAI_MspInit+0x210>)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6393      	str	r3, [r2, #56]	@ 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a46      	ldr	r2, [pc, #280]	@ (8002bc4 <HAL_SAI_MspInit+0x210>)
 8002aaa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002aae:	4a45      	ldr	r2, [pc, #276]	@ (8002bc4 <HAL_SAI_MspInit+0x210>)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6393      	str	r3, [r2, #56]	@ 0x38

    }
    if(hsai->Instance==SAI1_Block_B)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a44      	ldr	r2, [pc, #272]	@ (8002bcc <HAL_SAI_MspInit+0x218>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d176      	bne.n	8002bac <HAL_SAI_MspInit+0x1f8>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 8002abe:	4b3e      	ldr	r3, [pc, #248]	@ (8002bb8 <HAL_SAI_MspInit+0x204>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d10e      	bne.n	8002ae4 <HAL_SAI_MspInit+0x130>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002ac6:	4b3d      	ldr	r3, [pc, #244]	@ (8002bbc <HAL_SAI_MspInit+0x208>)
 8002ac8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002acc:	4a3b      	ldr	r2, [pc, #236]	@ (8002bbc <HAL_SAI_MspInit+0x208>)
 8002ace:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002ad2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002ad6:	4b39      	ldr	r3, [pc, #228]	@ (8002bbc <HAL_SAI_MspInit+0x208>)
 8002ad8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002adc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ae0:	60fb      	str	r3, [r7, #12]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8002ae4:	4b34      	ldr	r3, [pc, #208]	@ (8002bb8 <HAL_SAI_MspInit+0x204>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	3301      	adds	r3, #1
 8002aea:	4a33      	ldr	r2, [pc, #204]	@ (8002bb8 <HAL_SAI_MspInit+0x204>)
 8002aec:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002aee:	2308      	movs	r3, #8
 8002af0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af2:	2302      	movs	r3, #2
 8002af4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af6:	2300      	movs	r3, #0
 8002af8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002afa:	2300      	movs	r3, #0
 8002afc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002afe:	2306      	movs	r3, #6
 8002b00:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b06:	4619      	mov	r1, r3
 8002b08:	482d      	ldr	r0, [pc, #180]	@ (8002bc0 <HAL_SAI_MspInit+0x20c>)
 8002b0a:	f002 fd17 	bl	800553c <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA1_Stream1;
 8002b0e:	4b30      	ldr	r3, [pc, #192]	@ (8002bd0 <HAL_SAI_MspInit+0x21c>)
 8002b10:	4a30      	ldr	r2, [pc, #192]	@ (8002bd4 <HAL_SAI_MspInit+0x220>)
 8002b12:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 8002b14:	4b2e      	ldr	r3, [pc, #184]	@ (8002bd0 <HAL_SAI_MspInit+0x21c>)
 8002b16:	2258      	movs	r2, #88	@ 0x58
 8002b18:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b1a:	4b2d      	ldr	r3, [pc, #180]	@ (8002bd0 <HAL_SAI_MspInit+0x21c>)
 8002b1c:	2240      	movs	r2, #64	@ 0x40
 8002b1e:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b20:	4b2b      	ldr	r3, [pc, #172]	@ (8002bd0 <HAL_SAI_MspInit+0x21c>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 8002b26:	4b2a      	ldr	r3, [pc, #168]	@ (8002bd0 <HAL_SAI_MspInit+0x21c>)
 8002b28:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b2c:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002b2e:	4b28      	ldr	r3, [pc, #160]	@ (8002bd0 <HAL_SAI_MspInit+0x21c>)
 8002b30:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002b34:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002b36:	4b26      	ldr	r3, [pc, #152]	@ (8002bd0 <HAL_SAI_MspInit+0x21c>)
 8002b38:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002b3c:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 8002b3e:	4b24      	ldr	r3, [pc, #144]	@ (8002bd0 <HAL_SAI_MspInit+0x21c>)
 8002b40:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002b44:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_HIGH;
 8002b46:	4b22      	ldr	r3, [pc, #136]	@ (8002bd0 <HAL_SAI_MspInit+0x21c>)
 8002b48:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002b4c:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b4e:	4b20      	ldr	r3, [pc, #128]	@ (8002bd0 <HAL_SAI_MspInit+0x21c>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8002b54:	481e      	ldr	r0, [pc, #120]	@ (8002bd0 <HAL_SAI_MspInit+0x21c>)
 8002b56:	f000 fb13 	bl	8003180 <HAL_DMA_Init>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d001      	beq.n	8002b64 <HAL_SAI_MspInit+0x1b0>
    {
      Error_Handler();
 8002b60:	f7ff fe42 	bl	80027e8 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_DMAMUX1_CH0_EVT;
 8002b64:	2300      	movs	r3, #0
 8002b66:	617b      	str	r3, [r7, #20]
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_RISING;
 8002b68:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b6c:	61bb      	str	r3, [r7, #24]
    pSyncConfig.SyncEnable = ENABLE;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	773b      	strb	r3, [r7, #28]
    pSyncConfig.EventEnable = DISABLE;
 8002b72:	2300      	movs	r3, #0
 8002b74:	777b      	strb	r3, [r7, #29]
    pSyncConfig.RequestNumber = 1;
 8002b76:	2301      	movs	r3, #1
 8002b78:	623b      	str	r3, [r7, #32]
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai1_b, &pSyncConfig) != HAL_OK)
 8002b7a:	f107 0314 	add.w	r3, r7, #20
 8002b7e:	4619      	mov	r1, r3
 8002b80:	4813      	ldr	r0, [pc, #76]	@ (8002bd0 <HAL_SAI_MspInit+0x21c>)
 8002b82:	f002 fbe1 	bl	8005348 <HAL_DMAEx_ConfigMuxSync>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d001      	beq.n	8002b90 <HAL_SAI_MspInit+0x1dc>
    {
      Error_Handler();
 8002b8c:	f7ff fe2c 	bl	80027e8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	4a0f      	ldr	r2, [pc, #60]	@ (8002bd0 <HAL_SAI_MspInit+0x21c>)
 8002b94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8002b98:	4a0d      	ldr	r2, [pc, #52]	@ (8002bd0 <HAL_SAI_MspInit+0x21c>)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a0b      	ldr	r2, [pc, #44]	@ (8002bd0 <HAL_SAI_MspInit+0x21c>)
 8002ba2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002ba6:	4a0a      	ldr	r2, [pc, #40]	@ (8002bd0 <HAL_SAI_MspInit+0x21c>)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6393      	str	r3, [r2, #56]	@ 0x38
    }
}
 8002bac:	bf00      	nop
 8002bae:	3738      	adds	r7, #56	@ 0x38
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	40015804 	.word	0x40015804
 8002bb8:	24000d88 	.word	0x24000d88
 8002bbc:	58024400 	.word	0x58024400
 8002bc0:	58021000 	.word	0x58021000
 8002bc4:	240001c0 	.word	0x240001c0
 8002bc8:	40020010 	.word	0x40020010
 8002bcc:	40015824 	.word	0x40015824
 8002bd0:	24000238 	.word	0x24000238
 8002bd4:	40020028 	.word	0x40020028

08002bd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002bdc:	bf00      	nop
 8002bde:	e7fd      	b.n	8002bdc <NMI_Handler+0x4>

08002be0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002be4:	bf00      	nop
 8002be6:	e7fd      	b.n	8002be4 <HardFault_Handler+0x4>

08002be8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bec:	bf00      	nop
 8002bee:	e7fd      	b.n	8002bec <MemManage_Handler+0x4>

08002bf0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bf4:	bf00      	nop
 8002bf6:	e7fd      	b.n	8002bf4 <BusFault_Handler+0x4>

08002bf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bfc:	bf00      	nop
 8002bfe:	e7fd      	b.n	8002bfc <UsageFault_Handler+0x4>

08002c00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c04:	bf00      	nop
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr

08002c0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c12:	bf00      	nop
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c20:	bf00      	nop
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr

08002c2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c2e:	f000 f947 	bl	8002ec0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c32:	bf00      	nop
 8002c34:	bd80      	pop	{r7, pc}
	...

08002c38 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8002c3c:	4802      	ldr	r0, [pc, #8]	@ (8002c48 <DMA1_Stream0_IRQHandler+0x10>)
 8002c3e:	f001 f865 	bl	8003d0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002c42:	bf00      	nop
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	240001c0 	.word	0x240001c0

08002c4c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 8002c50:	4802      	ldr	r0, [pc, #8]	@ (8002c5c <DMA1_Stream1_IRQHandler+0x10>)
 8002c52:	f001 f85b 	bl	8003d0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002c56:	bf00      	nop
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	24000238 	.word	0x24000238

08002c60 <MDMA_IRQHandler>:

/**
  * @brief This function handles MDMA global interrupt.
  */
void MDMA_IRQHandler(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_mdma_channel0_sw_0);
 8002c64:	4803      	ldr	r0, [pc, #12]	@ (8002c74 <MDMA_IRQHandler+0x14>)
 8002c66:	f003 ffc9 	bl	8006bfc <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_mdma_channel2_sw_0);
 8002c6a:	4803      	ldr	r0, [pc, #12]	@ (8002c78 <MDMA_IRQHandler+0x18>)
 8002c6c:	f003 ffc6 	bl	8006bfc <HAL_MDMA_IRQHandler>
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 8002c70:	bf00      	nop
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	24000344 	.word	0x24000344
 8002c78:	24000450 	.word	0x24000450

08002c7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002c7c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8002cb8 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8002c80:	f7fd fd6e 	bl	8000760 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002c84:	f7fd fcbe 	bl	8000604 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c88:	480c      	ldr	r0, [pc, #48]	@ (8002cbc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c8a:	490d      	ldr	r1, [pc, #52]	@ (8002cc0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002c8c:	4a0d      	ldr	r2, [pc, #52]	@ (8002cc4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002c8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c90:	e002      	b.n	8002c98 <LoopCopyDataInit>

08002c92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c96:	3304      	adds	r3, #4

08002c98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c9c:	d3f9      	bcc.n	8002c92 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c9e:	4a0a      	ldr	r2, [pc, #40]	@ (8002cc8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002ca0:	4c0a      	ldr	r4, [pc, #40]	@ (8002ccc <LoopFillZerobss+0x22>)
  movs r3, #0
 8002ca2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ca4:	e001      	b.n	8002caa <LoopFillZerobss>

08002ca6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ca6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ca8:	3204      	adds	r2, #4

08002caa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002caa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cac:	d3fb      	bcc.n	8002ca6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002cae:	f009 feb9 	bl	800ca24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002cb2:	f7fe f935 	bl	8000f20 <main>
  bx  lr
 8002cb6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002cb8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002cbc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002cc0:	24000020 	.word	0x24000020
  ldr r2, =_sidata
 8002cc4:	0800cb0c 	.word	0x0800cb0c
  ldr r2, =_sbss
 8002cc8:	24000020 	.word	0x24000020
  ldr r4, =_ebss
 8002ccc:	24000d98 	.word	0x24000d98

08002cd0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002cd0:	e7fe      	b.n	8002cd0 <ADC3_IRQHandler>
	...

08002cd4 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b088      	sub	sp, #32
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	4603      	mov	r3, r0
 8002cdc:	460a      	mov	r2, r1
 8002cde:	71fb      	strb	r3, [r7, #7]
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8002ce4:	4b2e      	ldr	r3, [pc, #184]	@ (8002da0 <BSP_PB_Init+0xcc>)
 8002ce6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002cea:	4a2d      	ldr	r2, [pc, #180]	@ (8002da0 <BSP_PB_Init+0xcc>)
 8002cec:	f043 0304 	orr.w	r3, r3, #4
 8002cf0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002cf4:	4b2a      	ldr	r3, [pc, #168]	@ (8002da0 <BSP_PB_Init+0xcc>)
 8002cf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002cfa:	f003 0304 	and.w	r3, r3, #4
 8002cfe:	60bb      	str	r3, [r7, #8]
 8002d00:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8002d02:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002d06:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8002d08:	2302      	movs	r3, #2
 8002d0a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8002d10:	79bb      	ldrb	r3, [r7, #6]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d10c      	bne.n	8002d30 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8002d16:	2300      	movs	r3, #0
 8002d18:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8002d1a:	79fb      	ldrb	r3, [r7, #7]
 8002d1c:	4a21      	ldr	r2, [pc, #132]	@ (8002da4 <BSP_PB_Init+0xd0>)
 8002d1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d22:	f107 020c 	add.w	r2, r7, #12
 8002d26:	4611      	mov	r1, r2
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f002 fc07 	bl	800553c <HAL_GPIO_Init>
 8002d2e:	e031      	b.n	8002d94 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8002d30:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002d34:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002d36:	79fb      	ldrb	r3, [r7, #7]
 8002d38:	4a1a      	ldr	r2, [pc, #104]	@ (8002da4 <BSP_PB_Init+0xd0>)
 8002d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d3e:	f107 020c 	add.w	r2, r7, #12
 8002d42:	4611      	mov	r1, r2
 8002d44:	4618      	mov	r0, r3
 8002d46:	f002 fbf9 	bl	800553c <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8002d4a:	79fb      	ldrb	r3, [r7, #7]
 8002d4c:	00db      	lsls	r3, r3, #3
 8002d4e:	4a16      	ldr	r2, [pc, #88]	@ (8002da8 <BSP_PB_Init+0xd4>)
 8002d50:	441a      	add	r2, r3
 8002d52:	79fb      	ldrb	r3, [r7, #7]
 8002d54:	4915      	ldr	r1, [pc, #84]	@ (8002dac <BSP_PB_Init+0xd8>)
 8002d56:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	4610      	mov	r0, r2
 8002d5e:	f002 fbd8 	bl	8005512 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8002d62:	79fb      	ldrb	r3, [r7, #7]
 8002d64:	00db      	lsls	r3, r3, #3
 8002d66:	4a10      	ldr	r2, [pc, #64]	@ (8002da8 <BSP_PB_Init+0xd4>)
 8002d68:	1898      	adds	r0, r3, r2
 8002d6a:	79fb      	ldrb	r3, [r7, #7]
 8002d6c:	4a10      	ldr	r2, [pc, #64]	@ (8002db0 <BSP_PB_Init+0xdc>)
 8002d6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d72:	461a      	mov	r2, r3
 8002d74:	2100      	movs	r1, #0
 8002d76:	f002 fbad 	bl	80054d4 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8002d7a:	2028      	movs	r0, #40	@ 0x28
 8002d7c:	79fb      	ldrb	r3, [r7, #7]
 8002d7e:	4a0d      	ldr	r2, [pc, #52]	@ (8002db4 <BSP_PB_Init+0xe0>)
 8002d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d84:	2200      	movs	r2, #0
 8002d86:	4619      	mov	r1, r3
 8002d88:	f000 f9c5 	bl	8003116 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8002d8c:	2328      	movs	r3, #40	@ 0x28
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f000 f9db 	bl	800314a <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3720      	adds	r7, #32
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	58024400 	.word	0x58024400
 8002da4:	2400000c 	.word	0x2400000c
 8002da8:	24000d8c 	.word	0x24000d8c
 8002dac:	0800cac8 	.word	0x0800cac8
 8002db0:	24000010 	.word	0x24000010
 8002db4:	24000014 	.word	0x24000014

08002db8 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8002dc2:	bf00      	nop
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr

08002dce <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8002dd2:	2000      	movs	r0, #0
 8002dd4:	f7ff fff0 	bl	8002db8 <BSP_PB_Callback>
}
 8002dd8:	bf00      	nop
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002de2:	2003      	movs	r0, #3
 8002de4:	f000 f98c 	bl	8003100 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002de8:	f004 ffce 	bl	8007d88 <HAL_RCC_GetSysClockFreq>
 8002dec:	4602      	mov	r2, r0
 8002dee:	4b15      	ldr	r3, [pc, #84]	@ (8002e44 <HAL_Init+0x68>)
 8002df0:	699b      	ldr	r3, [r3, #24]
 8002df2:	0a1b      	lsrs	r3, r3, #8
 8002df4:	f003 030f 	and.w	r3, r3, #15
 8002df8:	4913      	ldr	r1, [pc, #76]	@ (8002e48 <HAL_Init+0x6c>)
 8002dfa:	5ccb      	ldrb	r3, [r1, r3]
 8002dfc:	f003 031f 	and.w	r3, r3, #31
 8002e00:	fa22 f303 	lsr.w	r3, r2, r3
 8002e04:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002e06:	4b0f      	ldr	r3, [pc, #60]	@ (8002e44 <HAL_Init+0x68>)
 8002e08:	699b      	ldr	r3, [r3, #24]
 8002e0a:	f003 030f 	and.w	r3, r3, #15
 8002e0e:	4a0e      	ldr	r2, [pc, #56]	@ (8002e48 <HAL_Init+0x6c>)
 8002e10:	5cd3      	ldrb	r3, [r2, r3]
 8002e12:	f003 031f 	and.w	r3, r3, #31
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	fa22 f303 	lsr.w	r3, r2, r3
 8002e1c:	4a0b      	ldr	r2, [pc, #44]	@ (8002e4c <HAL_Init+0x70>)
 8002e1e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002e20:	4a0b      	ldr	r2, [pc, #44]	@ (8002e50 <HAL_Init+0x74>)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e26:	2000      	movs	r0, #0
 8002e28:	f000 f814 	bl	8002e54 <HAL_InitTick>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e002      	b.n	8002e3c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002e36:	f7ff fcdd 	bl	80027f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e3a:	2300      	movs	r3, #0
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3708      	adds	r7, #8
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	58024400 	.word	0x58024400
 8002e48:	0800cab8 	.word	0x0800cab8
 8002e4c:	24000004 	.word	0x24000004
 8002e50:	24000000 	.word	0x24000000

08002e54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002e5c:	4b15      	ldr	r3, [pc, #84]	@ (8002eb4 <HAL_InitTick+0x60>)
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d101      	bne.n	8002e68 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e021      	b.n	8002eac <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002e68:	4b13      	ldr	r3, [pc, #76]	@ (8002eb8 <HAL_InitTick+0x64>)
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	4b11      	ldr	r3, [pc, #68]	@ (8002eb4 <HAL_InitTick+0x60>)
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	4619      	mov	r1, r3
 8002e72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e76:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f000 f971 	bl	8003166 <HAL_SYSTICK_Config>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e00e      	b.n	8002eac <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2b0f      	cmp	r3, #15
 8002e92:	d80a      	bhi.n	8002eaa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e94:	2200      	movs	r2, #0
 8002e96:	6879      	ldr	r1, [r7, #4]
 8002e98:	f04f 30ff 	mov.w	r0, #4294967295
 8002e9c:	f000 f93b 	bl	8003116 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ea0:	4a06      	ldr	r2, [pc, #24]	@ (8002ebc <HAL_InitTick+0x68>)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	e000      	b.n	8002eac <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3708      	adds	r7, #8
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	2400001c 	.word	0x2400001c
 8002eb8:	24000000 	.word	0x24000000
 8002ebc:	24000018 	.word	0x24000018

08002ec0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002ec4:	4b06      	ldr	r3, [pc, #24]	@ (8002ee0 <HAL_IncTick+0x20>)
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	461a      	mov	r2, r3
 8002eca:	4b06      	ldr	r3, [pc, #24]	@ (8002ee4 <HAL_IncTick+0x24>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4413      	add	r3, r2
 8002ed0:	4a04      	ldr	r2, [pc, #16]	@ (8002ee4 <HAL_IncTick+0x24>)
 8002ed2:	6013      	str	r3, [r2, #0]
}
 8002ed4:	bf00      	nop
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	2400001c 	.word	0x2400001c
 8002ee4:	24000d94 	.word	0x24000d94

08002ee8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0
  return uwTick;
 8002eec:	4b03      	ldr	r3, [pc, #12]	@ (8002efc <HAL_GetTick+0x14>)
 8002eee:	681b      	ldr	r3, [r3, #0]
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	24000d94 	.word	0x24000d94

08002f00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f08:	f7ff ffee 	bl	8002ee8 <HAL_GetTick>
 8002f0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f18:	d005      	beq.n	8002f26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f1a:	4b0a      	ldr	r3, [pc, #40]	@ (8002f44 <HAL_Delay+0x44>)
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	461a      	mov	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	4413      	add	r3, r2
 8002f24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f26:	bf00      	nop
 8002f28:	f7ff ffde 	bl	8002ee8 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	68fa      	ldr	r2, [r7, #12]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d8f7      	bhi.n	8002f28 <HAL_Delay+0x28>
  {
  }
}
 8002f38:	bf00      	nop
 8002f3a:	bf00      	nop
 8002f3c:	3710      	adds	r7, #16
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	2400001c 	.word	0x2400001c

08002f48 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002f4c:	4b03      	ldr	r3, [pc, #12]	@ (8002f5c <HAL_GetREVID+0x14>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	0c1b      	lsrs	r3, r3, #16
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr
 8002f5c:	5c001000 	.word	0x5c001000

08002f60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b085      	sub	sp, #20
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f003 0307 	and.w	r3, r3, #7
 8002f6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f70:	4b0b      	ldr	r3, [pc, #44]	@ (8002fa0 <__NVIC_SetPriorityGrouping+0x40>)
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f76:	68ba      	ldr	r2, [r7, #8]
 8002f78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002f88:	4b06      	ldr	r3, [pc, #24]	@ (8002fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f8e:	4a04      	ldr	r2, [pc, #16]	@ (8002fa0 <__NVIC_SetPriorityGrouping+0x40>)
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	60d3      	str	r3, [r2, #12]
}
 8002f94:	bf00      	nop
 8002f96:	3714      	adds	r7, #20
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr
 8002fa0:	e000ed00 	.word	0xe000ed00
 8002fa4:	05fa0000 	.word	0x05fa0000

08002fa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fac:	4b04      	ldr	r3, [pc, #16]	@ (8002fc0 <__NVIC_GetPriorityGrouping+0x18>)
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	0a1b      	lsrs	r3, r3, #8
 8002fb2:	f003 0307 	and.w	r3, r3, #7
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr
 8002fc0:	e000ed00 	.word	0xe000ed00

08002fc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	4603      	mov	r3, r0
 8002fcc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002fce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	db0b      	blt.n	8002fee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fd6:	88fb      	ldrh	r3, [r7, #6]
 8002fd8:	f003 021f 	and.w	r2, r3, #31
 8002fdc:	4907      	ldr	r1, [pc, #28]	@ (8002ffc <__NVIC_EnableIRQ+0x38>)
 8002fde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fe2:	095b      	lsrs	r3, r3, #5
 8002fe4:	2001      	movs	r0, #1
 8002fe6:	fa00 f202 	lsl.w	r2, r0, r2
 8002fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002fee:	bf00      	nop
 8002ff0:	370c      	adds	r7, #12
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	e000e100 	.word	0xe000e100

08003000 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	4603      	mov	r3, r0
 8003008:	6039      	str	r1, [r7, #0]
 800300a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800300c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003010:	2b00      	cmp	r3, #0
 8003012:	db0a      	blt.n	800302a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	b2da      	uxtb	r2, r3
 8003018:	490c      	ldr	r1, [pc, #48]	@ (800304c <__NVIC_SetPriority+0x4c>)
 800301a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800301e:	0112      	lsls	r2, r2, #4
 8003020:	b2d2      	uxtb	r2, r2
 8003022:	440b      	add	r3, r1
 8003024:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003028:	e00a      	b.n	8003040 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	b2da      	uxtb	r2, r3
 800302e:	4908      	ldr	r1, [pc, #32]	@ (8003050 <__NVIC_SetPriority+0x50>)
 8003030:	88fb      	ldrh	r3, [r7, #6]
 8003032:	f003 030f 	and.w	r3, r3, #15
 8003036:	3b04      	subs	r3, #4
 8003038:	0112      	lsls	r2, r2, #4
 800303a:	b2d2      	uxtb	r2, r2
 800303c:	440b      	add	r3, r1
 800303e:	761a      	strb	r2, [r3, #24]
}
 8003040:	bf00      	nop
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr
 800304c:	e000e100 	.word	0xe000e100
 8003050:	e000ed00 	.word	0xe000ed00

08003054 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003054:	b480      	push	{r7}
 8003056:	b089      	sub	sp, #36	@ 0x24
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f003 0307 	and.w	r3, r3, #7
 8003066:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	f1c3 0307 	rsb	r3, r3, #7
 800306e:	2b04      	cmp	r3, #4
 8003070:	bf28      	it	cs
 8003072:	2304      	movcs	r3, #4
 8003074:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	3304      	adds	r3, #4
 800307a:	2b06      	cmp	r3, #6
 800307c:	d902      	bls.n	8003084 <NVIC_EncodePriority+0x30>
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	3b03      	subs	r3, #3
 8003082:	e000      	b.n	8003086 <NVIC_EncodePriority+0x32>
 8003084:	2300      	movs	r3, #0
 8003086:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003088:	f04f 32ff 	mov.w	r2, #4294967295
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	fa02 f303 	lsl.w	r3, r2, r3
 8003092:	43da      	mvns	r2, r3
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	401a      	ands	r2, r3
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800309c:	f04f 31ff 	mov.w	r1, #4294967295
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	fa01 f303 	lsl.w	r3, r1, r3
 80030a6:	43d9      	mvns	r1, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030ac:	4313      	orrs	r3, r2
         );
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3724      	adds	r7, #36	@ 0x24
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
	...

080030bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	3b01      	subs	r3, #1
 80030c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030cc:	d301      	bcc.n	80030d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030ce:	2301      	movs	r3, #1
 80030d0:	e00f      	b.n	80030f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030d2:	4a0a      	ldr	r2, [pc, #40]	@ (80030fc <SysTick_Config+0x40>)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	3b01      	subs	r3, #1
 80030d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030da:	210f      	movs	r1, #15
 80030dc:	f04f 30ff 	mov.w	r0, #4294967295
 80030e0:	f7ff ff8e 	bl	8003000 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030e4:	4b05      	ldr	r3, [pc, #20]	@ (80030fc <SysTick_Config+0x40>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030ea:	4b04      	ldr	r3, [pc, #16]	@ (80030fc <SysTick_Config+0x40>)
 80030ec:	2207      	movs	r2, #7
 80030ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3708      	adds	r7, #8
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	e000e010 	.word	0xe000e010

08003100 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f7ff ff29 	bl	8002f60 <__NVIC_SetPriorityGrouping>
}
 800310e:	bf00      	nop
 8003110:	3708      	adds	r7, #8
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b086      	sub	sp, #24
 800311a:	af00      	add	r7, sp, #0
 800311c:	4603      	mov	r3, r0
 800311e:	60b9      	str	r1, [r7, #8]
 8003120:	607a      	str	r2, [r7, #4]
 8003122:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003124:	f7ff ff40 	bl	8002fa8 <__NVIC_GetPriorityGrouping>
 8003128:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	68b9      	ldr	r1, [r7, #8]
 800312e:	6978      	ldr	r0, [r7, #20]
 8003130:	f7ff ff90 	bl	8003054 <NVIC_EncodePriority>
 8003134:	4602      	mov	r2, r0
 8003136:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800313a:	4611      	mov	r1, r2
 800313c:	4618      	mov	r0, r3
 800313e:	f7ff ff5f 	bl	8003000 <__NVIC_SetPriority>
}
 8003142:	bf00      	nop
 8003144:	3718      	adds	r7, #24
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800314a:	b580      	push	{r7, lr}
 800314c:	b082      	sub	sp, #8
 800314e:	af00      	add	r7, sp, #0
 8003150:	4603      	mov	r3, r0
 8003152:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003154:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003158:	4618      	mov	r0, r3
 800315a:	f7ff ff33 	bl	8002fc4 <__NVIC_EnableIRQ>
}
 800315e:	bf00      	nop
 8003160:	3708      	adds	r7, #8
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}

08003166 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003166:	b580      	push	{r7, lr}
 8003168:	b082      	sub	sp, #8
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f7ff ffa4 	bl	80030bc <SysTick_Config>
 8003174:	4603      	mov	r3, r0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3708      	adds	r7, #8
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
	...

08003180 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b086      	sub	sp, #24
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003188:	f7ff feae 	bl	8002ee8 <HAL_GetTick>
 800318c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d101      	bne.n	8003198 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e316      	b.n	80037c6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a66      	ldr	r2, [pc, #408]	@ (8003338 <HAL_DMA_Init+0x1b8>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d04a      	beq.n	8003238 <HAL_DMA_Init+0xb8>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a65      	ldr	r2, [pc, #404]	@ (800333c <HAL_DMA_Init+0x1bc>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d045      	beq.n	8003238 <HAL_DMA_Init+0xb8>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a63      	ldr	r2, [pc, #396]	@ (8003340 <HAL_DMA_Init+0x1c0>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d040      	beq.n	8003238 <HAL_DMA_Init+0xb8>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a62      	ldr	r2, [pc, #392]	@ (8003344 <HAL_DMA_Init+0x1c4>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d03b      	beq.n	8003238 <HAL_DMA_Init+0xb8>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a60      	ldr	r2, [pc, #384]	@ (8003348 <HAL_DMA_Init+0x1c8>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d036      	beq.n	8003238 <HAL_DMA_Init+0xb8>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a5f      	ldr	r2, [pc, #380]	@ (800334c <HAL_DMA_Init+0x1cc>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d031      	beq.n	8003238 <HAL_DMA_Init+0xb8>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a5d      	ldr	r2, [pc, #372]	@ (8003350 <HAL_DMA_Init+0x1d0>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d02c      	beq.n	8003238 <HAL_DMA_Init+0xb8>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a5c      	ldr	r2, [pc, #368]	@ (8003354 <HAL_DMA_Init+0x1d4>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d027      	beq.n	8003238 <HAL_DMA_Init+0xb8>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a5a      	ldr	r2, [pc, #360]	@ (8003358 <HAL_DMA_Init+0x1d8>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d022      	beq.n	8003238 <HAL_DMA_Init+0xb8>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a59      	ldr	r2, [pc, #356]	@ (800335c <HAL_DMA_Init+0x1dc>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d01d      	beq.n	8003238 <HAL_DMA_Init+0xb8>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a57      	ldr	r2, [pc, #348]	@ (8003360 <HAL_DMA_Init+0x1e0>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d018      	beq.n	8003238 <HAL_DMA_Init+0xb8>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a56      	ldr	r2, [pc, #344]	@ (8003364 <HAL_DMA_Init+0x1e4>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d013      	beq.n	8003238 <HAL_DMA_Init+0xb8>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a54      	ldr	r2, [pc, #336]	@ (8003368 <HAL_DMA_Init+0x1e8>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d00e      	beq.n	8003238 <HAL_DMA_Init+0xb8>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a53      	ldr	r2, [pc, #332]	@ (800336c <HAL_DMA_Init+0x1ec>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d009      	beq.n	8003238 <HAL_DMA_Init+0xb8>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a51      	ldr	r2, [pc, #324]	@ (8003370 <HAL_DMA_Init+0x1f0>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d004      	beq.n	8003238 <HAL_DMA_Init+0xb8>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a50      	ldr	r2, [pc, #320]	@ (8003374 <HAL_DMA_Init+0x1f4>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d101      	bne.n	800323c <HAL_DMA_Init+0xbc>
 8003238:	2301      	movs	r3, #1
 800323a:	e000      	b.n	800323e <HAL_DMA_Init+0xbe>
 800323c:	2300      	movs	r3, #0
 800323e:	2b00      	cmp	r3, #0
 8003240:	f000 813b 	beq.w	80034ba <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2202      	movs	r2, #2
 8003248:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a37      	ldr	r2, [pc, #220]	@ (8003338 <HAL_DMA_Init+0x1b8>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d04a      	beq.n	80032f4 <HAL_DMA_Init+0x174>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a36      	ldr	r2, [pc, #216]	@ (800333c <HAL_DMA_Init+0x1bc>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d045      	beq.n	80032f4 <HAL_DMA_Init+0x174>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a34      	ldr	r2, [pc, #208]	@ (8003340 <HAL_DMA_Init+0x1c0>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d040      	beq.n	80032f4 <HAL_DMA_Init+0x174>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a33      	ldr	r2, [pc, #204]	@ (8003344 <HAL_DMA_Init+0x1c4>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d03b      	beq.n	80032f4 <HAL_DMA_Init+0x174>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a31      	ldr	r2, [pc, #196]	@ (8003348 <HAL_DMA_Init+0x1c8>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d036      	beq.n	80032f4 <HAL_DMA_Init+0x174>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a30      	ldr	r2, [pc, #192]	@ (800334c <HAL_DMA_Init+0x1cc>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d031      	beq.n	80032f4 <HAL_DMA_Init+0x174>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a2e      	ldr	r2, [pc, #184]	@ (8003350 <HAL_DMA_Init+0x1d0>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d02c      	beq.n	80032f4 <HAL_DMA_Init+0x174>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a2d      	ldr	r2, [pc, #180]	@ (8003354 <HAL_DMA_Init+0x1d4>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d027      	beq.n	80032f4 <HAL_DMA_Init+0x174>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a2b      	ldr	r2, [pc, #172]	@ (8003358 <HAL_DMA_Init+0x1d8>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d022      	beq.n	80032f4 <HAL_DMA_Init+0x174>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a2a      	ldr	r2, [pc, #168]	@ (800335c <HAL_DMA_Init+0x1dc>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d01d      	beq.n	80032f4 <HAL_DMA_Init+0x174>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a28      	ldr	r2, [pc, #160]	@ (8003360 <HAL_DMA_Init+0x1e0>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d018      	beq.n	80032f4 <HAL_DMA_Init+0x174>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a27      	ldr	r2, [pc, #156]	@ (8003364 <HAL_DMA_Init+0x1e4>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d013      	beq.n	80032f4 <HAL_DMA_Init+0x174>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a25      	ldr	r2, [pc, #148]	@ (8003368 <HAL_DMA_Init+0x1e8>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d00e      	beq.n	80032f4 <HAL_DMA_Init+0x174>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a24      	ldr	r2, [pc, #144]	@ (800336c <HAL_DMA_Init+0x1ec>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d009      	beq.n	80032f4 <HAL_DMA_Init+0x174>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a22      	ldr	r2, [pc, #136]	@ (8003370 <HAL_DMA_Init+0x1f0>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d004      	beq.n	80032f4 <HAL_DMA_Init+0x174>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a21      	ldr	r2, [pc, #132]	@ (8003374 <HAL_DMA_Init+0x1f4>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d108      	bne.n	8003306 <HAL_DMA_Init+0x186>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f022 0201 	bic.w	r2, r2, #1
 8003302:	601a      	str	r2, [r3, #0]
 8003304:	e007      	b.n	8003316 <HAL_DMA_Init+0x196>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f022 0201 	bic.w	r2, r2, #1
 8003314:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003316:	e02f      	b.n	8003378 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003318:	f7ff fde6 	bl	8002ee8 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	2b05      	cmp	r3, #5
 8003324:	d928      	bls.n	8003378 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2220      	movs	r2, #32
 800332a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2203      	movs	r2, #3
 8003330:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e246      	b.n	80037c6 <HAL_DMA_Init+0x646>
 8003338:	40020010 	.word	0x40020010
 800333c:	40020028 	.word	0x40020028
 8003340:	40020040 	.word	0x40020040
 8003344:	40020058 	.word	0x40020058
 8003348:	40020070 	.word	0x40020070
 800334c:	40020088 	.word	0x40020088
 8003350:	400200a0 	.word	0x400200a0
 8003354:	400200b8 	.word	0x400200b8
 8003358:	40020410 	.word	0x40020410
 800335c:	40020428 	.word	0x40020428
 8003360:	40020440 	.word	0x40020440
 8003364:	40020458 	.word	0x40020458
 8003368:	40020470 	.word	0x40020470
 800336c:	40020488 	.word	0x40020488
 8003370:	400204a0 	.word	0x400204a0
 8003374:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0301 	and.w	r3, r3, #1
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1c8      	bne.n	8003318 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800338e:	697a      	ldr	r2, [r7, #20]
 8003390:	4b83      	ldr	r3, [pc, #524]	@ (80035a0 <HAL_DMA_Init+0x420>)
 8003392:	4013      	ands	r3, r2
 8003394:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800339e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033aa:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033b6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a1b      	ldr	r3, [r3, #32]
 80033bc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80033be:	697a      	ldr	r2, [r7, #20]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c8:	2b04      	cmp	r3, #4
 80033ca:	d107      	bne.n	80033dc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033d4:	4313      	orrs	r3, r2
 80033d6:	697a      	ldr	r2, [r7, #20]
 80033d8:	4313      	orrs	r3, r2
 80033da:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80033dc:	4b71      	ldr	r3, [pc, #452]	@ (80035a4 <HAL_DMA_Init+0x424>)
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	4b71      	ldr	r3, [pc, #452]	@ (80035a8 <HAL_DMA_Init+0x428>)
 80033e2:	4013      	ands	r3, r2
 80033e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80033e8:	d328      	bcc.n	800343c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	2b28      	cmp	r3, #40	@ 0x28
 80033f0:	d903      	bls.n	80033fa <HAL_DMA_Init+0x27a>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	2b2e      	cmp	r3, #46	@ 0x2e
 80033f8:	d917      	bls.n	800342a <HAL_DMA_Init+0x2aa>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	2b3e      	cmp	r3, #62	@ 0x3e
 8003400:	d903      	bls.n	800340a <HAL_DMA_Init+0x28a>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	2b42      	cmp	r3, #66	@ 0x42
 8003408:	d90f      	bls.n	800342a <HAL_DMA_Init+0x2aa>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	2b46      	cmp	r3, #70	@ 0x46
 8003410:	d903      	bls.n	800341a <HAL_DMA_Init+0x29a>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	2b48      	cmp	r3, #72	@ 0x48
 8003418:	d907      	bls.n	800342a <HAL_DMA_Init+0x2aa>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	2b4e      	cmp	r3, #78	@ 0x4e
 8003420:	d905      	bls.n	800342e <HAL_DMA_Init+0x2ae>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	2b52      	cmp	r3, #82	@ 0x52
 8003428:	d801      	bhi.n	800342e <HAL_DMA_Init+0x2ae>
 800342a:	2301      	movs	r3, #1
 800342c:	e000      	b.n	8003430 <HAL_DMA_Init+0x2b0>
 800342e:	2300      	movs	r3, #0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d003      	beq.n	800343c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800343a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	697a      	ldr	r2, [r7, #20]
 8003442:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	695b      	ldr	r3, [r3, #20]
 800344a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	f023 0307 	bic.w	r3, r3, #7
 8003452:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003458:	697a      	ldr	r2, [r7, #20]
 800345a:	4313      	orrs	r3, r2
 800345c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003462:	2b04      	cmp	r3, #4
 8003464:	d117      	bne.n	8003496 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800346a:	697a      	ldr	r2, [r7, #20]
 800346c:	4313      	orrs	r3, r2
 800346e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003474:	2b00      	cmp	r3, #0
 8003476:	d00e      	beq.n	8003496 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f001 fddb 	bl	8005034 <DMA_CheckFifoParam>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d008      	beq.n	8003496 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2240      	movs	r2, #64	@ 0x40
 8003488:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2201      	movs	r2, #1
 800348e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e197      	b.n	80037c6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	697a      	ldr	r2, [r7, #20]
 800349c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f001 fd16 	bl	8004ed0 <DMA_CalcBaseAndBitshift>
 80034a4:	4603      	mov	r3, r0
 80034a6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034ac:	f003 031f 	and.w	r3, r3, #31
 80034b0:	223f      	movs	r2, #63	@ 0x3f
 80034b2:	409a      	lsls	r2, r3
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	609a      	str	r2, [r3, #8]
 80034b8:	e0cd      	b.n	8003656 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a3b      	ldr	r2, [pc, #236]	@ (80035ac <HAL_DMA_Init+0x42c>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d022      	beq.n	800350a <HAL_DMA_Init+0x38a>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a39      	ldr	r2, [pc, #228]	@ (80035b0 <HAL_DMA_Init+0x430>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d01d      	beq.n	800350a <HAL_DMA_Init+0x38a>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a38      	ldr	r2, [pc, #224]	@ (80035b4 <HAL_DMA_Init+0x434>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d018      	beq.n	800350a <HAL_DMA_Init+0x38a>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a36      	ldr	r2, [pc, #216]	@ (80035b8 <HAL_DMA_Init+0x438>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d013      	beq.n	800350a <HAL_DMA_Init+0x38a>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a35      	ldr	r2, [pc, #212]	@ (80035bc <HAL_DMA_Init+0x43c>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d00e      	beq.n	800350a <HAL_DMA_Init+0x38a>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a33      	ldr	r2, [pc, #204]	@ (80035c0 <HAL_DMA_Init+0x440>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d009      	beq.n	800350a <HAL_DMA_Init+0x38a>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a32      	ldr	r2, [pc, #200]	@ (80035c4 <HAL_DMA_Init+0x444>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d004      	beq.n	800350a <HAL_DMA_Init+0x38a>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a30      	ldr	r2, [pc, #192]	@ (80035c8 <HAL_DMA_Init+0x448>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d101      	bne.n	800350e <HAL_DMA_Init+0x38e>
 800350a:	2301      	movs	r3, #1
 800350c:	e000      	b.n	8003510 <HAL_DMA_Init+0x390>
 800350e:	2300      	movs	r3, #0
 8003510:	2b00      	cmp	r3, #0
 8003512:	f000 8097 	beq.w	8003644 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a24      	ldr	r2, [pc, #144]	@ (80035ac <HAL_DMA_Init+0x42c>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d021      	beq.n	8003564 <HAL_DMA_Init+0x3e4>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a22      	ldr	r2, [pc, #136]	@ (80035b0 <HAL_DMA_Init+0x430>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d01c      	beq.n	8003564 <HAL_DMA_Init+0x3e4>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a21      	ldr	r2, [pc, #132]	@ (80035b4 <HAL_DMA_Init+0x434>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d017      	beq.n	8003564 <HAL_DMA_Init+0x3e4>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a1f      	ldr	r2, [pc, #124]	@ (80035b8 <HAL_DMA_Init+0x438>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d012      	beq.n	8003564 <HAL_DMA_Init+0x3e4>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a1e      	ldr	r2, [pc, #120]	@ (80035bc <HAL_DMA_Init+0x43c>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d00d      	beq.n	8003564 <HAL_DMA_Init+0x3e4>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a1c      	ldr	r2, [pc, #112]	@ (80035c0 <HAL_DMA_Init+0x440>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d008      	beq.n	8003564 <HAL_DMA_Init+0x3e4>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a1b      	ldr	r2, [pc, #108]	@ (80035c4 <HAL_DMA_Init+0x444>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d003      	beq.n	8003564 <HAL_DMA_Init+0x3e4>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a19      	ldr	r2, [pc, #100]	@ (80035c8 <HAL_DMA_Init+0x448>)
 8003562:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2202      	movs	r2, #2
 8003568:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800357c:	697a      	ldr	r2, [r7, #20]
 800357e:	4b13      	ldr	r3, [pc, #76]	@ (80035cc <HAL_DMA_Init+0x44c>)
 8003580:	4013      	ands	r3, r2
 8003582:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	2b40      	cmp	r3, #64	@ 0x40
 800358a:	d021      	beq.n	80035d0 <HAL_DMA_Init+0x450>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	2b80      	cmp	r3, #128	@ 0x80
 8003592:	d102      	bne.n	800359a <HAL_DMA_Init+0x41a>
 8003594:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003598:	e01b      	b.n	80035d2 <HAL_DMA_Init+0x452>
 800359a:	2300      	movs	r3, #0
 800359c:	e019      	b.n	80035d2 <HAL_DMA_Init+0x452>
 800359e:	bf00      	nop
 80035a0:	fe10803f 	.word	0xfe10803f
 80035a4:	5c001000 	.word	0x5c001000
 80035a8:	ffff0000 	.word	0xffff0000
 80035ac:	58025408 	.word	0x58025408
 80035b0:	5802541c 	.word	0x5802541c
 80035b4:	58025430 	.word	0x58025430
 80035b8:	58025444 	.word	0x58025444
 80035bc:	58025458 	.word	0x58025458
 80035c0:	5802546c 	.word	0x5802546c
 80035c4:	58025480 	.word	0x58025480
 80035c8:	58025494 	.word	0x58025494
 80035cc:	fffe000f 	.word	0xfffe000f
 80035d0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	68d2      	ldr	r2, [r2, #12]
 80035d6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80035d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80035e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80035e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80035f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	69db      	ldr	r3, [r3, #28]
 80035f6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80035f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a1b      	ldr	r3, [r3, #32]
 80035fe:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003600:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003602:	697a      	ldr	r2, [r7, #20]
 8003604:	4313      	orrs	r3, r2
 8003606:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	697a      	ldr	r2, [r7, #20]
 800360e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	461a      	mov	r2, r3
 8003616:	4b6e      	ldr	r3, [pc, #440]	@ (80037d0 <HAL_DMA_Init+0x650>)
 8003618:	4413      	add	r3, r2
 800361a:	4a6e      	ldr	r2, [pc, #440]	@ (80037d4 <HAL_DMA_Init+0x654>)
 800361c:	fba2 2303 	umull	r2, r3, r2, r3
 8003620:	091b      	lsrs	r3, r3, #4
 8003622:	009a      	lsls	r2, r3, #2
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f001 fc51 	bl	8004ed0 <DMA_CalcBaseAndBitshift>
 800362e:	4603      	mov	r3, r0
 8003630:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003636:	f003 031f 	and.w	r3, r3, #31
 800363a:	2201      	movs	r2, #1
 800363c:	409a      	lsls	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	605a      	str	r2, [r3, #4]
 8003642:	e008      	b.n	8003656 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2240      	movs	r2, #64	@ 0x40
 8003648:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2203      	movs	r2, #3
 800364e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e0b7      	b.n	80037c6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a5f      	ldr	r2, [pc, #380]	@ (80037d8 <HAL_DMA_Init+0x658>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d072      	beq.n	8003746 <HAL_DMA_Init+0x5c6>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a5d      	ldr	r2, [pc, #372]	@ (80037dc <HAL_DMA_Init+0x65c>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d06d      	beq.n	8003746 <HAL_DMA_Init+0x5c6>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a5c      	ldr	r2, [pc, #368]	@ (80037e0 <HAL_DMA_Init+0x660>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d068      	beq.n	8003746 <HAL_DMA_Init+0x5c6>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a5a      	ldr	r2, [pc, #360]	@ (80037e4 <HAL_DMA_Init+0x664>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d063      	beq.n	8003746 <HAL_DMA_Init+0x5c6>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a59      	ldr	r2, [pc, #356]	@ (80037e8 <HAL_DMA_Init+0x668>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d05e      	beq.n	8003746 <HAL_DMA_Init+0x5c6>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a57      	ldr	r2, [pc, #348]	@ (80037ec <HAL_DMA_Init+0x66c>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d059      	beq.n	8003746 <HAL_DMA_Init+0x5c6>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a56      	ldr	r2, [pc, #344]	@ (80037f0 <HAL_DMA_Init+0x670>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d054      	beq.n	8003746 <HAL_DMA_Init+0x5c6>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a54      	ldr	r2, [pc, #336]	@ (80037f4 <HAL_DMA_Init+0x674>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d04f      	beq.n	8003746 <HAL_DMA_Init+0x5c6>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a53      	ldr	r2, [pc, #332]	@ (80037f8 <HAL_DMA_Init+0x678>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d04a      	beq.n	8003746 <HAL_DMA_Init+0x5c6>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a51      	ldr	r2, [pc, #324]	@ (80037fc <HAL_DMA_Init+0x67c>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d045      	beq.n	8003746 <HAL_DMA_Init+0x5c6>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a50      	ldr	r2, [pc, #320]	@ (8003800 <HAL_DMA_Init+0x680>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d040      	beq.n	8003746 <HAL_DMA_Init+0x5c6>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a4e      	ldr	r2, [pc, #312]	@ (8003804 <HAL_DMA_Init+0x684>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d03b      	beq.n	8003746 <HAL_DMA_Init+0x5c6>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a4d      	ldr	r2, [pc, #308]	@ (8003808 <HAL_DMA_Init+0x688>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d036      	beq.n	8003746 <HAL_DMA_Init+0x5c6>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a4b      	ldr	r2, [pc, #300]	@ (800380c <HAL_DMA_Init+0x68c>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d031      	beq.n	8003746 <HAL_DMA_Init+0x5c6>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a4a      	ldr	r2, [pc, #296]	@ (8003810 <HAL_DMA_Init+0x690>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d02c      	beq.n	8003746 <HAL_DMA_Init+0x5c6>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a48      	ldr	r2, [pc, #288]	@ (8003814 <HAL_DMA_Init+0x694>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d027      	beq.n	8003746 <HAL_DMA_Init+0x5c6>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a47      	ldr	r2, [pc, #284]	@ (8003818 <HAL_DMA_Init+0x698>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d022      	beq.n	8003746 <HAL_DMA_Init+0x5c6>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a45      	ldr	r2, [pc, #276]	@ (800381c <HAL_DMA_Init+0x69c>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d01d      	beq.n	8003746 <HAL_DMA_Init+0x5c6>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a44      	ldr	r2, [pc, #272]	@ (8003820 <HAL_DMA_Init+0x6a0>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d018      	beq.n	8003746 <HAL_DMA_Init+0x5c6>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a42      	ldr	r2, [pc, #264]	@ (8003824 <HAL_DMA_Init+0x6a4>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d013      	beq.n	8003746 <HAL_DMA_Init+0x5c6>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a41      	ldr	r2, [pc, #260]	@ (8003828 <HAL_DMA_Init+0x6a8>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d00e      	beq.n	8003746 <HAL_DMA_Init+0x5c6>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a3f      	ldr	r2, [pc, #252]	@ (800382c <HAL_DMA_Init+0x6ac>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d009      	beq.n	8003746 <HAL_DMA_Init+0x5c6>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a3e      	ldr	r2, [pc, #248]	@ (8003830 <HAL_DMA_Init+0x6b0>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d004      	beq.n	8003746 <HAL_DMA_Init+0x5c6>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a3c      	ldr	r2, [pc, #240]	@ (8003834 <HAL_DMA_Init+0x6b4>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d101      	bne.n	800374a <HAL_DMA_Init+0x5ca>
 8003746:	2301      	movs	r3, #1
 8003748:	e000      	b.n	800374c <HAL_DMA_Init+0x5cc>
 800374a:	2300      	movs	r3, #0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d032      	beq.n	80037b6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f001 fceb 	bl	800512c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	2b80      	cmp	r3, #128	@ 0x80
 800375c:	d102      	bne.n	8003764 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685a      	ldr	r2, [r3, #4]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800376c:	b2d2      	uxtb	r2, r2
 800376e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003778:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d010      	beq.n	80037a4 <HAL_DMA_Init+0x624>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	2b08      	cmp	r3, #8
 8003788:	d80c      	bhi.n	80037a4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f001 fd68 	bl	8005260 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003794:	2200      	movs	r2, #0
 8003796:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80037a0:	605a      	str	r2, [r3, #4]
 80037a2:	e008      	b.n	80037b6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3718      	adds	r7, #24
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	a7fdabf8 	.word	0xa7fdabf8
 80037d4:	cccccccd 	.word	0xcccccccd
 80037d8:	40020010 	.word	0x40020010
 80037dc:	40020028 	.word	0x40020028
 80037e0:	40020040 	.word	0x40020040
 80037e4:	40020058 	.word	0x40020058
 80037e8:	40020070 	.word	0x40020070
 80037ec:	40020088 	.word	0x40020088
 80037f0:	400200a0 	.word	0x400200a0
 80037f4:	400200b8 	.word	0x400200b8
 80037f8:	40020410 	.word	0x40020410
 80037fc:	40020428 	.word	0x40020428
 8003800:	40020440 	.word	0x40020440
 8003804:	40020458 	.word	0x40020458
 8003808:	40020470 	.word	0x40020470
 800380c:	40020488 	.word	0x40020488
 8003810:	400204a0 	.word	0x400204a0
 8003814:	400204b8 	.word	0x400204b8
 8003818:	58025408 	.word	0x58025408
 800381c:	5802541c 	.word	0x5802541c
 8003820:	58025430 	.word	0x58025430
 8003824:	58025444 	.word	0x58025444
 8003828:	58025458 	.word	0x58025458
 800382c:	5802546c 	.word	0x5802546c
 8003830:	58025480 	.word	0x58025480
 8003834:	58025494 	.word	0x58025494

08003838 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b086      	sub	sp, #24
 800383c:	af00      	add	r7, sp, #0
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	607a      	str	r2, [r7, #4]
 8003844:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003846:	2300      	movs	r3, #0
 8003848:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d101      	bne.n	8003854 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e226      	b.n	8003ca2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800385a:	2b01      	cmp	r3, #1
 800385c:	d101      	bne.n	8003862 <HAL_DMA_Start_IT+0x2a>
 800385e:	2302      	movs	r3, #2
 8003860:	e21f      	b.n	8003ca2 <HAL_DMA_Start_IT+0x46a>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2201      	movs	r2, #1
 8003866:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003870:	b2db      	uxtb	r3, r3
 8003872:	2b01      	cmp	r3, #1
 8003874:	f040 820a 	bne.w	8003c8c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2202      	movs	r2, #2
 800387c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a68      	ldr	r2, [pc, #416]	@ (8003a2c <HAL_DMA_Start_IT+0x1f4>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d04a      	beq.n	8003926 <HAL_DMA_Start_IT+0xee>
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a66      	ldr	r2, [pc, #408]	@ (8003a30 <HAL_DMA_Start_IT+0x1f8>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d045      	beq.n	8003926 <HAL_DMA_Start_IT+0xee>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a65      	ldr	r2, [pc, #404]	@ (8003a34 <HAL_DMA_Start_IT+0x1fc>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d040      	beq.n	8003926 <HAL_DMA_Start_IT+0xee>
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a63      	ldr	r2, [pc, #396]	@ (8003a38 <HAL_DMA_Start_IT+0x200>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d03b      	beq.n	8003926 <HAL_DMA_Start_IT+0xee>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a62      	ldr	r2, [pc, #392]	@ (8003a3c <HAL_DMA_Start_IT+0x204>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d036      	beq.n	8003926 <HAL_DMA_Start_IT+0xee>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a60      	ldr	r2, [pc, #384]	@ (8003a40 <HAL_DMA_Start_IT+0x208>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d031      	beq.n	8003926 <HAL_DMA_Start_IT+0xee>
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a5f      	ldr	r2, [pc, #380]	@ (8003a44 <HAL_DMA_Start_IT+0x20c>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d02c      	beq.n	8003926 <HAL_DMA_Start_IT+0xee>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a5d      	ldr	r2, [pc, #372]	@ (8003a48 <HAL_DMA_Start_IT+0x210>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d027      	beq.n	8003926 <HAL_DMA_Start_IT+0xee>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a5c      	ldr	r2, [pc, #368]	@ (8003a4c <HAL_DMA_Start_IT+0x214>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d022      	beq.n	8003926 <HAL_DMA_Start_IT+0xee>
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a5a      	ldr	r2, [pc, #360]	@ (8003a50 <HAL_DMA_Start_IT+0x218>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d01d      	beq.n	8003926 <HAL_DMA_Start_IT+0xee>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a59      	ldr	r2, [pc, #356]	@ (8003a54 <HAL_DMA_Start_IT+0x21c>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d018      	beq.n	8003926 <HAL_DMA_Start_IT+0xee>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a57      	ldr	r2, [pc, #348]	@ (8003a58 <HAL_DMA_Start_IT+0x220>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d013      	beq.n	8003926 <HAL_DMA_Start_IT+0xee>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a56      	ldr	r2, [pc, #344]	@ (8003a5c <HAL_DMA_Start_IT+0x224>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d00e      	beq.n	8003926 <HAL_DMA_Start_IT+0xee>
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a54      	ldr	r2, [pc, #336]	@ (8003a60 <HAL_DMA_Start_IT+0x228>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d009      	beq.n	8003926 <HAL_DMA_Start_IT+0xee>
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a53      	ldr	r2, [pc, #332]	@ (8003a64 <HAL_DMA_Start_IT+0x22c>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d004      	beq.n	8003926 <HAL_DMA_Start_IT+0xee>
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a51      	ldr	r2, [pc, #324]	@ (8003a68 <HAL_DMA_Start_IT+0x230>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d108      	bne.n	8003938 <HAL_DMA_Start_IT+0x100>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f022 0201 	bic.w	r2, r2, #1
 8003934:	601a      	str	r2, [r3, #0]
 8003936:	e007      	b.n	8003948 <HAL_DMA_Start_IT+0x110>
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f022 0201 	bic.w	r2, r2, #1
 8003946:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	68b9      	ldr	r1, [r7, #8]
 800394e:	68f8      	ldr	r0, [r7, #12]
 8003950:	f001 f912 	bl	8004b78 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a34      	ldr	r2, [pc, #208]	@ (8003a2c <HAL_DMA_Start_IT+0x1f4>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d04a      	beq.n	80039f4 <HAL_DMA_Start_IT+0x1bc>
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a33      	ldr	r2, [pc, #204]	@ (8003a30 <HAL_DMA_Start_IT+0x1f8>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d045      	beq.n	80039f4 <HAL_DMA_Start_IT+0x1bc>
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a31      	ldr	r2, [pc, #196]	@ (8003a34 <HAL_DMA_Start_IT+0x1fc>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d040      	beq.n	80039f4 <HAL_DMA_Start_IT+0x1bc>
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a30      	ldr	r2, [pc, #192]	@ (8003a38 <HAL_DMA_Start_IT+0x200>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d03b      	beq.n	80039f4 <HAL_DMA_Start_IT+0x1bc>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a2e      	ldr	r2, [pc, #184]	@ (8003a3c <HAL_DMA_Start_IT+0x204>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d036      	beq.n	80039f4 <HAL_DMA_Start_IT+0x1bc>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a2d      	ldr	r2, [pc, #180]	@ (8003a40 <HAL_DMA_Start_IT+0x208>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d031      	beq.n	80039f4 <HAL_DMA_Start_IT+0x1bc>
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a2b      	ldr	r2, [pc, #172]	@ (8003a44 <HAL_DMA_Start_IT+0x20c>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d02c      	beq.n	80039f4 <HAL_DMA_Start_IT+0x1bc>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a2a      	ldr	r2, [pc, #168]	@ (8003a48 <HAL_DMA_Start_IT+0x210>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d027      	beq.n	80039f4 <HAL_DMA_Start_IT+0x1bc>
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a28      	ldr	r2, [pc, #160]	@ (8003a4c <HAL_DMA_Start_IT+0x214>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d022      	beq.n	80039f4 <HAL_DMA_Start_IT+0x1bc>
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a27      	ldr	r2, [pc, #156]	@ (8003a50 <HAL_DMA_Start_IT+0x218>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d01d      	beq.n	80039f4 <HAL_DMA_Start_IT+0x1bc>
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a25      	ldr	r2, [pc, #148]	@ (8003a54 <HAL_DMA_Start_IT+0x21c>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d018      	beq.n	80039f4 <HAL_DMA_Start_IT+0x1bc>
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a24      	ldr	r2, [pc, #144]	@ (8003a58 <HAL_DMA_Start_IT+0x220>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d013      	beq.n	80039f4 <HAL_DMA_Start_IT+0x1bc>
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a22      	ldr	r2, [pc, #136]	@ (8003a5c <HAL_DMA_Start_IT+0x224>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d00e      	beq.n	80039f4 <HAL_DMA_Start_IT+0x1bc>
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a21      	ldr	r2, [pc, #132]	@ (8003a60 <HAL_DMA_Start_IT+0x228>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d009      	beq.n	80039f4 <HAL_DMA_Start_IT+0x1bc>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a1f      	ldr	r2, [pc, #124]	@ (8003a64 <HAL_DMA_Start_IT+0x22c>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d004      	beq.n	80039f4 <HAL_DMA_Start_IT+0x1bc>
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a1e      	ldr	r2, [pc, #120]	@ (8003a68 <HAL_DMA_Start_IT+0x230>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d101      	bne.n	80039f8 <HAL_DMA_Start_IT+0x1c0>
 80039f4:	2301      	movs	r3, #1
 80039f6:	e000      	b.n	80039fa <HAL_DMA_Start_IT+0x1c2>
 80039f8:	2300      	movs	r3, #0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d036      	beq.n	8003a6c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f023 021e 	bic.w	r2, r3, #30
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f042 0216 	orr.w	r2, r2, #22
 8003a10:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d03e      	beq.n	8003a98 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f042 0208 	orr.w	r2, r2, #8
 8003a28:	601a      	str	r2, [r3, #0]
 8003a2a:	e035      	b.n	8003a98 <HAL_DMA_Start_IT+0x260>
 8003a2c:	40020010 	.word	0x40020010
 8003a30:	40020028 	.word	0x40020028
 8003a34:	40020040 	.word	0x40020040
 8003a38:	40020058 	.word	0x40020058
 8003a3c:	40020070 	.word	0x40020070
 8003a40:	40020088 	.word	0x40020088
 8003a44:	400200a0 	.word	0x400200a0
 8003a48:	400200b8 	.word	0x400200b8
 8003a4c:	40020410 	.word	0x40020410
 8003a50:	40020428 	.word	0x40020428
 8003a54:	40020440 	.word	0x40020440
 8003a58:	40020458 	.word	0x40020458
 8003a5c:	40020470 	.word	0x40020470
 8003a60:	40020488 	.word	0x40020488
 8003a64:	400204a0 	.word	0x400204a0
 8003a68:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f023 020e 	bic.w	r2, r3, #14
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f042 020a 	orr.w	r2, r2, #10
 8003a7e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d007      	beq.n	8003a98 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f042 0204 	orr.w	r2, r2, #4
 8003a96:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a83      	ldr	r2, [pc, #524]	@ (8003cac <HAL_DMA_Start_IT+0x474>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d072      	beq.n	8003b88 <HAL_DMA_Start_IT+0x350>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a82      	ldr	r2, [pc, #520]	@ (8003cb0 <HAL_DMA_Start_IT+0x478>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d06d      	beq.n	8003b88 <HAL_DMA_Start_IT+0x350>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a80      	ldr	r2, [pc, #512]	@ (8003cb4 <HAL_DMA_Start_IT+0x47c>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d068      	beq.n	8003b88 <HAL_DMA_Start_IT+0x350>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a7f      	ldr	r2, [pc, #508]	@ (8003cb8 <HAL_DMA_Start_IT+0x480>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d063      	beq.n	8003b88 <HAL_DMA_Start_IT+0x350>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a7d      	ldr	r2, [pc, #500]	@ (8003cbc <HAL_DMA_Start_IT+0x484>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d05e      	beq.n	8003b88 <HAL_DMA_Start_IT+0x350>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a7c      	ldr	r2, [pc, #496]	@ (8003cc0 <HAL_DMA_Start_IT+0x488>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d059      	beq.n	8003b88 <HAL_DMA_Start_IT+0x350>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a7a      	ldr	r2, [pc, #488]	@ (8003cc4 <HAL_DMA_Start_IT+0x48c>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d054      	beq.n	8003b88 <HAL_DMA_Start_IT+0x350>
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a79      	ldr	r2, [pc, #484]	@ (8003cc8 <HAL_DMA_Start_IT+0x490>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d04f      	beq.n	8003b88 <HAL_DMA_Start_IT+0x350>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a77      	ldr	r2, [pc, #476]	@ (8003ccc <HAL_DMA_Start_IT+0x494>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d04a      	beq.n	8003b88 <HAL_DMA_Start_IT+0x350>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a76      	ldr	r2, [pc, #472]	@ (8003cd0 <HAL_DMA_Start_IT+0x498>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d045      	beq.n	8003b88 <HAL_DMA_Start_IT+0x350>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a74      	ldr	r2, [pc, #464]	@ (8003cd4 <HAL_DMA_Start_IT+0x49c>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d040      	beq.n	8003b88 <HAL_DMA_Start_IT+0x350>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a73      	ldr	r2, [pc, #460]	@ (8003cd8 <HAL_DMA_Start_IT+0x4a0>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d03b      	beq.n	8003b88 <HAL_DMA_Start_IT+0x350>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a71      	ldr	r2, [pc, #452]	@ (8003cdc <HAL_DMA_Start_IT+0x4a4>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d036      	beq.n	8003b88 <HAL_DMA_Start_IT+0x350>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a70      	ldr	r2, [pc, #448]	@ (8003ce0 <HAL_DMA_Start_IT+0x4a8>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d031      	beq.n	8003b88 <HAL_DMA_Start_IT+0x350>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a6e      	ldr	r2, [pc, #440]	@ (8003ce4 <HAL_DMA_Start_IT+0x4ac>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d02c      	beq.n	8003b88 <HAL_DMA_Start_IT+0x350>
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a6d      	ldr	r2, [pc, #436]	@ (8003ce8 <HAL_DMA_Start_IT+0x4b0>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d027      	beq.n	8003b88 <HAL_DMA_Start_IT+0x350>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a6b      	ldr	r2, [pc, #428]	@ (8003cec <HAL_DMA_Start_IT+0x4b4>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d022      	beq.n	8003b88 <HAL_DMA_Start_IT+0x350>
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a6a      	ldr	r2, [pc, #424]	@ (8003cf0 <HAL_DMA_Start_IT+0x4b8>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d01d      	beq.n	8003b88 <HAL_DMA_Start_IT+0x350>
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a68      	ldr	r2, [pc, #416]	@ (8003cf4 <HAL_DMA_Start_IT+0x4bc>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d018      	beq.n	8003b88 <HAL_DMA_Start_IT+0x350>
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a67      	ldr	r2, [pc, #412]	@ (8003cf8 <HAL_DMA_Start_IT+0x4c0>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d013      	beq.n	8003b88 <HAL_DMA_Start_IT+0x350>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a65      	ldr	r2, [pc, #404]	@ (8003cfc <HAL_DMA_Start_IT+0x4c4>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d00e      	beq.n	8003b88 <HAL_DMA_Start_IT+0x350>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a64      	ldr	r2, [pc, #400]	@ (8003d00 <HAL_DMA_Start_IT+0x4c8>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d009      	beq.n	8003b88 <HAL_DMA_Start_IT+0x350>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a62      	ldr	r2, [pc, #392]	@ (8003d04 <HAL_DMA_Start_IT+0x4cc>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d004      	beq.n	8003b88 <HAL_DMA_Start_IT+0x350>
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a61      	ldr	r2, [pc, #388]	@ (8003d08 <HAL_DMA_Start_IT+0x4d0>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d101      	bne.n	8003b8c <HAL_DMA_Start_IT+0x354>
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e000      	b.n	8003b8e <HAL_DMA_Start_IT+0x356>
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d01a      	beq.n	8003bc8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d007      	beq.n	8003bb0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003baa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003bae:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d007      	beq.n	8003bc8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bc2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003bc6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a37      	ldr	r2, [pc, #220]	@ (8003cac <HAL_DMA_Start_IT+0x474>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d04a      	beq.n	8003c68 <HAL_DMA_Start_IT+0x430>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a36      	ldr	r2, [pc, #216]	@ (8003cb0 <HAL_DMA_Start_IT+0x478>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d045      	beq.n	8003c68 <HAL_DMA_Start_IT+0x430>
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a34      	ldr	r2, [pc, #208]	@ (8003cb4 <HAL_DMA_Start_IT+0x47c>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d040      	beq.n	8003c68 <HAL_DMA_Start_IT+0x430>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a33      	ldr	r2, [pc, #204]	@ (8003cb8 <HAL_DMA_Start_IT+0x480>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d03b      	beq.n	8003c68 <HAL_DMA_Start_IT+0x430>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a31      	ldr	r2, [pc, #196]	@ (8003cbc <HAL_DMA_Start_IT+0x484>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d036      	beq.n	8003c68 <HAL_DMA_Start_IT+0x430>
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a30      	ldr	r2, [pc, #192]	@ (8003cc0 <HAL_DMA_Start_IT+0x488>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d031      	beq.n	8003c68 <HAL_DMA_Start_IT+0x430>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a2e      	ldr	r2, [pc, #184]	@ (8003cc4 <HAL_DMA_Start_IT+0x48c>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d02c      	beq.n	8003c68 <HAL_DMA_Start_IT+0x430>
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a2d      	ldr	r2, [pc, #180]	@ (8003cc8 <HAL_DMA_Start_IT+0x490>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d027      	beq.n	8003c68 <HAL_DMA_Start_IT+0x430>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a2b      	ldr	r2, [pc, #172]	@ (8003ccc <HAL_DMA_Start_IT+0x494>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d022      	beq.n	8003c68 <HAL_DMA_Start_IT+0x430>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a2a      	ldr	r2, [pc, #168]	@ (8003cd0 <HAL_DMA_Start_IT+0x498>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d01d      	beq.n	8003c68 <HAL_DMA_Start_IT+0x430>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a28      	ldr	r2, [pc, #160]	@ (8003cd4 <HAL_DMA_Start_IT+0x49c>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d018      	beq.n	8003c68 <HAL_DMA_Start_IT+0x430>
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a27      	ldr	r2, [pc, #156]	@ (8003cd8 <HAL_DMA_Start_IT+0x4a0>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d013      	beq.n	8003c68 <HAL_DMA_Start_IT+0x430>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a25      	ldr	r2, [pc, #148]	@ (8003cdc <HAL_DMA_Start_IT+0x4a4>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d00e      	beq.n	8003c68 <HAL_DMA_Start_IT+0x430>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a24      	ldr	r2, [pc, #144]	@ (8003ce0 <HAL_DMA_Start_IT+0x4a8>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d009      	beq.n	8003c68 <HAL_DMA_Start_IT+0x430>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a22      	ldr	r2, [pc, #136]	@ (8003ce4 <HAL_DMA_Start_IT+0x4ac>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d004      	beq.n	8003c68 <HAL_DMA_Start_IT+0x430>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a21      	ldr	r2, [pc, #132]	@ (8003ce8 <HAL_DMA_Start_IT+0x4b0>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d108      	bne.n	8003c7a <HAL_DMA_Start_IT+0x442>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f042 0201 	orr.w	r2, r2, #1
 8003c76:	601a      	str	r2, [r3, #0]
 8003c78:	e012      	b.n	8003ca0 <HAL_DMA_Start_IT+0x468>
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f042 0201 	orr.w	r2, r2, #1
 8003c88:	601a      	str	r2, [r3, #0]
 8003c8a:	e009      	b.n	8003ca0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003c92:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003ca0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3718      	adds	r7, #24
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	40020010 	.word	0x40020010
 8003cb0:	40020028 	.word	0x40020028
 8003cb4:	40020040 	.word	0x40020040
 8003cb8:	40020058 	.word	0x40020058
 8003cbc:	40020070 	.word	0x40020070
 8003cc0:	40020088 	.word	0x40020088
 8003cc4:	400200a0 	.word	0x400200a0
 8003cc8:	400200b8 	.word	0x400200b8
 8003ccc:	40020410 	.word	0x40020410
 8003cd0:	40020428 	.word	0x40020428
 8003cd4:	40020440 	.word	0x40020440
 8003cd8:	40020458 	.word	0x40020458
 8003cdc:	40020470 	.word	0x40020470
 8003ce0:	40020488 	.word	0x40020488
 8003ce4:	400204a0 	.word	0x400204a0
 8003ce8:	400204b8 	.word	0x400204b8
 8003cec:	58025408 	.word	0x58025408
 8003cf0:	5802541c 	.word	0x5802541c
 8003cf4:	58025430 	.word	0x58025430
 8003cf8:	58025444 	.word	0x58025444
 8003cfc:	58025458 	.word	0x58025458
 8003d00:	5802546c 	.word	0x5802546c
 8003d04:	58025480 	.word	0x58025480
 8003d08:	58025494 	.word	0x58025494

08003d0c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b08a      	sub	sp, #40	@ 0x28
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003d14:	2300      	movs	r3, #0
 8003d16:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003d18:	4b67      	ldr	r3, [pc, #412]	@ (8003eb8 <HAL_DMA_IRQHandler+0x1ac>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a67      	ldr	r2, [pc, #412]	@ (8003ebc <HAL_DMA_IRQHandler+0x1b0>)
 8003d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d22:	0a9b      	lsrs	r3, r3, #10
 8003d24:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d2a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d30:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003d32:	6a3b      	ldr	r3, [r7, #32]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a5f      	ldr	r2, [pc, #380]	@ (8003ec0 <HAL_DMA_IRQHandler+0x1b4>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d04a      	beq.n	8003dde <HAL_DMA_IRQHandler+0xd2>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a5d      	ldr	r2, [pc, #372]	@ (8003ec4 <HAL_DMA_IRQHandler+0x1b8>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d045      	beq.n	8003dde <HAL_DMA_IRQHandler+0xd2>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a5c      	ldr	r2, [pc, #368]	@ (8003ec8 <HAL_DMA_IRQHandler+0x1bc>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d040      	beq.n	8003dde <HAL_DMA_IRQHandler+0xd2>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a5a      	ldr	r2, [pc, #360]	@ (8003ecc <HAL_DMA_IRQHandler+0x1c0>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d03b      	beq.n	8003dde <HAL_DMA_IRQHandler+0xd2>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a59      	ldr	r2, [pc, #356]	@ (8003ed0 <HAL_DMA_IRQHandler+0x1c4>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d036      	beq.n	8003dde <HAL_DMA_IRQHandler+0xd2>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a57      	ldr	r2, [pc, #348]	@ (8003ed4 <HAL_DMA_IRQHandler+0x1c8>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d031      	beq.n	8003dde <HAL_DMA_IRQHandler+0xd2>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a56      	ldr	r2, [pc, #344]	@ (8003ed8 <HAL_DMA_IRQHandler+0x1cc>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d02c      	beq.n	8003dde <HAL_DMA_IRQHandler+0xd2>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a54      	ldr	r2, [pc, #336]	@ (8003edc <HAL_DMA_IRQHandler+0x1d0>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d027      	beq.n	8003dde <HAL_DMA_IRQHandler+0xd2>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a53      	ldr	r2, [pc, #332]	@ (8003ee0 <HAL_DMA_IRQHandler+0x1d4>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d022      	beq.n	8003dde <HAL_DMA_IRQHandler+0xd2>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a51      	ldr	r2, [pc, #324]	@ (8003ee4 <HAL_DMA_IRQHandler+0x1d8>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d01d      	beq.n	8003dde <HAL_DMA_IRQHandler+0xd2>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a50      	ldr	r2, [pc, #320]	@ (8003ee8 <HAL_DMA_IRQHandler+0x1dc>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d018      	beq.n	8003dde <HAL_DMA_IRQHandler+0xd2>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a4e      	ldr	r2, [pc, #312]	@ (8003eec <HAL_DMA_IRQHandler+0x1e0>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d013      	beq.n	8003dde <HAL_DMA_IRQHandler+0xd2>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a4d      	ldr	r2, [pc, #308]	@ (8003ef0 <HAL_DMA_IRQHandler+0x1e4>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d00e      	beq.n	8003dde <HAL_DMA_IRQHandler+0xd2>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a4b      	ldr	r2, [pc, #300]	@ (8003ef4 <HAL_DMA_IRQHandler+0x1e8>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d009      	beq.n	8003dde <HAL_DMA_IRQHandler+0xd2>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a4a      	ldr	r2, [pc, #296]	@ (8003ef8 <HAL_DMA_IRQHandler+0x1ec>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d004      	beq.n	8003dde <HAL_DMA_IRQHandler+0xd2>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a48      	ldr	r2, [pc, #288]	@ (8003efc <HAL_DMA_IRQHandler+0x1f0>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d101      	bne.n	8003de2 <HAL_DMA_IRQHandler+0xd6>
 8003dde:	2301      	movs	r3, #1
 8003de0:	e000      	b.n	8003de4 <HAL_DMA_IRQHandler+0xd8>
 8003de2:	2300      	movs	r3, #0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	f000 842b 	beq.w	8004640 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dee:	f003 031f 	and.w	r3, r3, #31
 8003df2:	2208      	movs	r2, #8
 8003df4:	409a      	lsls	r2, r3
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	4013      	ands	r3, r2
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	f000 80a2 	beq.w	8003f44 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a2e      	ldr	r2, [pc, #184]	@ (8003ec0 <HAL_DMA_IRQHandler+0x1b4>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d04a      	beq.n	8003ea0 <HAL_DMA_IRQHandler+0x194>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a2d      	ldr	r2, [pc, #180]	@ (8003ec4 <HAL_DMA_IRQHandler+0x1b8>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d045      	beq.n	8003ea0 <HAL_DMA_IRQHandler+0x194>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a2b      	ldr	r2, [pc, #172]	@ (8003ec8 <HAL_DMA_IRQHandler+0x1bc>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d040      	beq.n	8003ea0 <HAL_DMA_IRQHandler+0x194>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a2a      	ldr	r2, [pc, #168]	@ (8003ecc <HAL_DMA_IRQHandler+0x1c0>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d03b      	beq.n	8003ea0 <HAL_DMA_IRQHandler+0x194>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a28      	ldr	r2, [pc, #160]	@ (8003ed0 <HAL_DMA_IRQHandler+0x1c4>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d036      	beq.n	8003ea0 <HAL_DMA_IRQHandler+0x194>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a27      	ldr	r2, [pc, #156]	@ (8003ed4 <HAL_DMA_IRQHandler+0x1c8>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d031      	beq.n	8003ea0 <HAL_DMA_IRQHandler+0x194>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a25      	ldr	r2, [pc, #148]	@ (8003ed8 <HAL_DMA_IRQHandler+0x1cc>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d02c      	beq.n	8003ea0 <HAL_DMA_IRQHandler+0x194>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a24      	ldr	r2, [pc, #144]	@ (8003edc <HAL_DMA_IRQHandler+0x1d0>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d027      	beq.n	8003ea0 <HAL_DMA_IRQHandler+0x194>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a22      	ldr	r2, [pc, #136]	@ (8003ee0 <HAL_DMA_IRQHandler+0x1d4>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d022      	beq.n	8003ea0 <HAL_DMA_IRQHandler+0x194>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a21      	ldr	r2, [pc, #132]	@ (8003ee4 <HAL_DMA_IRQHandler+0x1d8>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d01d      	beq.n	8003ea0 <HAL_DMA_IRQHandler+0x194>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a1f      	ldr	r2, [pc, #124]	@ (8003ee8 <HAL_DMA_IRQHandler+0x1dc>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d018      	beq.n	8003ea0 <HAL_DMA_IRQHandler+0x194>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a1e      	ldr	r2, [pc, #120]	@ (8003eec <HAL_DMA_IRQHandler+0x1e0>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d013      	beq.n	8003ea0 <HAL_DMA_IRQHandler+0x194>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a1c      	ldr	r2, [pc, #112]	@ (8003ef0 <HAL_DMA_IRQHandler+0x1e4>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d00e      	beq.n	8003ea0 <HAL_DMA_IRQHandler+0x194>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a1b      	ldr	r2, [pc, #108]	@ (8003ef4 <HAL_DMA_IRQHandler+0x1e8>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d009      	beq.n	8003ea0 <HAL_DMA_IRQHandler+0x194>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a19      	ldr	r2, [pc, #100]	@ (8003ef8 <HAL_DMA_IRQHandler+0x1ec>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d004      	beq.n	8003ea0 <HAL_DMA_IRQHandler+0x194>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a18      	ldr	r2, [pc, #96]	@ (8003efc <HAL_DMA_IRQHandler+0x1f0>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d12f      	bne.n	8003f00 <HAL_DMA_IRQHandler+0x1f4>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0304 	and.w	r3, r3, #4
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	bf14      	ite	ne
 8003eae:	2301      	movne	r3, #1
 8003eb0:	2300      	moveq	r3, #0
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	e02e      	b.n	8003f14 <HAL_DMA_IRQHandler+0x208>
 8003eb6:	bf00      	nop
 8003eb8:	24000000 	.word	0x24000000
 8003ebc:	1b4e81b5 	.word	0x1b4e81b5
 8003ec0:	40020010 	.word	0x40020010
 8003ec4:	40020028 	.word	0x40020028
 8003ec8:	40020040 	.word	0x40020040
 8003ecc:	40020058 	.word	0x40020058
 8003ed0:	40020070 	.word	0x40020070
 8003ed4:	40020088 	.word	0x40020088
 8003ed8:	400200a0 	.word	0x400200a0
 8003edc:	400200b8 	.word	0x400200b8
 8003ee0:	40020410 	.word	0x40020410
 8003ee4:	40020428 	.word	0x40020428
 8003ee8:	40020440 	.word	0x40020440
 8003eec:	40020458 	.word	0x40020458
 8003ef0:	40020470 	.word	0x40020470
 8003ef4:	40020488 	.word	0x40020488
 8003ef8:	400204a0 	.word	0x400204a0
 8003efc:	400204b8 	.word	0x400204b8
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0308 	and.w	r3, r3, #8
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	bf14      	ite	ne
 8003f0e:	2301      	movne	r3, #1
 8003f10:	2300      	moveq	r3, #0
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d015      	beq.n	8003f44 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f022 0204 	bic.w	r2, r2, #4
 8003f26:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f2c:	f003 031f 	and.w	r3, r3, #31
 8003f30:	2208      	movs	r2, #8
 8003f32:	409a      	lsls	r2, r3
 8003f34:	6a3b      	ldr	r3, [r7, #32]
 8003f36:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f3c:	f043 0201 	orr.w	r2, r3, #1
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f48:	f003 031f 	and.w	r3, r3, #31
 8003f4c:	69ba      	ldr	r2, [r7, #24]
 8003f4e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f52:	f003 0301 	and.w	r3, r3, #1
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d06e      	beq.n	8004038 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a69      	ldr	r2, [pc, #420]	@ (8004104 <HAL_DMA_IRQHandler+0x3f8>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d04a      	beq.n	8003ffa <HAL_DMA_IRQHandler+0x2ee>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a67      	ldr	r2, [pc, #412]	@ (8004108 <HAL_DMA_IRQHandler+0x3fc>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d045      	beq.n	8003ffa <HAL_DMA_IRQHandler+0x2ee>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a66      	ldr	r2, [pc, #408]	@ (800410c <HAL_DMA_IRQHandler+0x400>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d040      	beq.n	8003ffa <HAL_DMA_IRQHandler+0x2ee>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a64      	ldr	r2, [pc, #400]	@ (8004110 <HAL_DMA_IRQHandler+0x404>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d03b      	beq.n	8003ffa <HAL_DMA_IRQHandler+0x2ee>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a63      	ldr	r2, [pc, #396]	@ (8004114 <HAL_DMA_IRQHandler+0x408>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d036      	beq.n	8003ffa <HAL_DMA_IRQHandler+0x2ee>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a61      	ldr	r2, [pc, #388]	@ (8004118 <HAL_DMA_IRQHandler+0x40c>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d031      	beq.n	8003ffa <HAL_DMA_IRQHandler+0x2ee>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a60      	ldr	r2, [pc, #384]	@ (800411c <HAL_DMA_IRQHandler+0x410>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d02c      	beq.n	8003ffa <HAL_DMA_IRQHandler+0x2ee>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a5e      	ldr	r2, [pc, #376]	@ (8004120 <HAL_DMA_IRQHandler+0x414>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d027      	beq.n	8003ffa <HAL_DMA_IRQHandler+0x2ee>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a5d      	ldr	r2, [pc, #372]	@ (8004124 <HAL_DMA_IRQHandler+0x418>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d022      	beq.n	8003ffa <HAL_DMA_IRQHandler+0x2ee>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a5b      	ldr	r2, [pc, #364]	@ (8004128 <HAL_DMA_IRQHandler+0x41c>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d01d      	beq.n	8003ffa <HAL_DMA_IRQHandler+0x2ee>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a5a      	ldr	r2, [pc, #360]	@ (800412c <HAL_DMA_IRQHandler+0x420>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d018      	beq.n	8003ffa <HAL_DMA_IRQHandler+0x2ee>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a58      	ldr	r2, [pc, #352]	@ (8004130 <HAL_DMA_IRQHandler+0x424>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d013      	beq.n	8003ffa <HAL_DMA_IRQHandler+0x2ee>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a57      	ldr	r2, [pc, #348]	@ (8004134 <HAL_DMA_IRQHandler+0x428>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d00e      	beq.n	8003ffa <HAL_DMA_IRQHandler+0x2ee>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a55      	ldr	r2, [pc, #340]	@ (8004138 <HAL_DMA_IRQHandler+0x42c>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d009      	beq.n	8003ffa <HAL_DMA_IRQHandler+0x2ee>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a54      	ldr	r2, [pc, #336]	@ (800413c <HAL_DMA_IRQHandler+0x430>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d004      	beq.n	8003ffa <HAL_DMA_IRQHandler+0x2ee>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a52      	ldr	r2, [pc, #328]	@ (8004140 <HAL_DMA_IRQHandler+0x434>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d10a      	bne.n	8004010 <HAL_DMA_IRQHandler+0x304>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	695b      	ldr	r3, [r3, #20]
 8004000:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004004:	2b00      	cmp	r3, #0
 8004006:	bf14      	ite	ne
 8004008:	2301      	movne	r3, #1
 800400a:	2300      	moveq	r3, #0
 800400c:	b2db      	uxtb	r3, r3
 800400e:	e003      	b.n	8004018 <HAL_DMA_IRQHandler+0x30c>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2300      	movs	r3, #0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d00d      	beq.n	8004038 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004020:	f003 031f 	and.w	r3, r3, #31
 8004024:	2201      	movs	r2, #1
 8004026:	409a      	lsls	r2, r3
 8004028:	6a3b      	ldr	r3, [r7, #32]
 800402a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004030:	f043 0202 	orr.w	r2, r3, #2
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800403c:	f003 031f 	and.w	r3, r3, #31
 8004040:	2204      	movs	r2, #4
 8004042:	409a      	lsls	r2, r3
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	4013      	ands	r3, r2
 8004048:	2b00      	cmp	r3, #0
 800404a:	f000 808f 	beq.w	800416c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a2c      	ldr	r2, [pc, #176]	@ (8004104 <HAL_DMA_IRQHandler+0x3f8>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d04a      	beq.n	80040ee <HAL_DMA_IRQHandler+0x3e2>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a2a      	ldr	r2, [pc, #168]	@ (8004108 <HAL_DMA_IRQHandler+0x3fc>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d045      	beq.n	80040ee <HAL_DMA_IRQHandler+0x3e2>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a29      	ldr	r2, [pc, #164]	@ (800410c <HAL_DMA_IRQHandler+0x400>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d040      	beq.n	80040ee <HAL_DMA_IRQHandler+0x3e2>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a27      	ldr	r2, [pc, #156]	@ (8004110 <HAL_DMA_IRQHandler+0x404>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d03b      	beq.n	80040ee <HAL_DMA_IRQHandler+0x3e2>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a26      	ldr	r2, [pc, #152]	@ (8004114 <HAL_DMA_IRQHandler+0x408>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d036      	beq.n	80040ee <HAL_DMA_IRQHandler+0x3e2>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a24      	ldr	r2, [pc, #144]	@ (8004118 <HAL_DMA_IRQHandler+0x40c>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d031      	beq.n	80040ee <HAL_DMA_IRQHandler+0x3e2>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a23      	ldr	r2, [pc, #140]	@ (800411c <HAL_DMA_IRQHandler+0x410>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d02c      	beq.n	80040ee <HAL_DMA_IRQHandler+0x3e2>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a21      	ldr	r2, [pc, #132]	@ (8004120 <HAL_DMA_IRQHandler+0x414>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d027      	beq.n	80040ee <HAL_DMA_IRQHandler+0x3e2>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a20      	ldr	r2, [pc, #128]	@ (8004124 <HAL_DMA_IRQHandler+0x418>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d022      	beq.n	80040ee <HAL_DMA_IRQHandler+0x3e2>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a1e      	ldr	r2, [pc, #120]	@ (8004128 <HAL_DMA_IRQHandler+0x41c>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d01d      	beq.n	80040ee <HAL_DMA_IRQHandler+0x3e2>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a1d      	ldr	r2, [pc, #116]	@ (800412c <HAL_DMA_IRQHandler+0x420>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d018      	beq.n	80040ee <HAL_DMA_IRQHandler+0x3e2>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a1b      	ldr	r2, [pc, #108]	@ (8004130 <HAL_DMA_IRQHandler+0x424>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d013      	beq.n	80040ee <HAL_DMA_IRQHandler+0x3e2>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a1a      	ldr	r2, [pc, #104]	@ (8004134 <HAL_DMA_IRQHandler+0x428>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d00e      	beq.n	80040ee <HAL_DMA_IRQHandler+0x3e2>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a18      	ldr	r2, [pc, #96]	@ (8004138 <HAL_DMA_IRQHandler+0x42c>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d009      	beq.n	80040ee <HAL_DMA_IRQHandler+0x3e2>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a17      	ldr	r2, [pc, #92]	@ (800413c <HAL_DMA_IRQHandler+0x430>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d004      	beq.n	80040ee <HAL_DMA_IRQHandler+0x3e2>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a15      	ldr	r2, [pc, #84]	@ (8004140 <HAL_DMA_IRQHandler+0x434>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d12a      	bne.n	8004144 <HAL_DMA_IRQHandler+0x438>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0302 	and.w	r3, r3, #2
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	bf14      	ite	ne
 80040fc:	2301      	movne	r3, #1
 80040fe:	2300      	moveq	r3, #0
 8004100:	b2db      	uxtb	r3, r3
 8004102:	e023      	b.n	800414c <HAL_DMA_IRQHandler+0x440>
 8004104:	40020010 	.word	0x40020010
 8004108:	40020028 	.word	0x40020028
 800410c:	40020040 	.word	0x40020040
 8004110:	40020058 	.word	0x40020058
 8004114:	40020070 	.word	0x40020070
 8004118:	40020088 	.word	0x40020088
 800411c:	400200a0 	.word	0x400200a0
 8004120:	400200b8 	.word	0x400200b8
 8004124:	40020410 	.word	0x40020410
 8004128:	40020428 	.word	0x40020428
 800412c:	40020440 	.word	0x40020440
 8004130:	40020458 	.word	0x40020458
 8004134:	40020470 	.word	0x40020470
 8004138:	40020488 	.word	0x40020488
 800413c:	400204a0 	.word	0x400204a0
 8004140:	400204b8 	.word	0x400204b8
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	2300      	movs	r3, #0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d00d      	beq.n	800416c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004154:	f003 031f 	and.w	r3, r3, #31
 8004158:	2204      	movs	r2, #4
 800415a:	409a      	lsls	r2, r3
 800415c:	6a3b      	ldr	r3, [r7, #32]
 800415e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004164:	f043 0204 	orr.w	r2, r3, #4
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004170:	f003 031f 	and.w	r3, r3, #31
 8004174:	2210      	movs	r2, #16
 8004176:	409a      	lsls	r2, r3
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	4013      	ands	r3, r2
 800417c:	2b00      	cmp	r3, #0
 800417e:	f000 80a6 	beq.w	80042ce <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a85      	ldr	r2, [pc, #532]	@ (800439c <HAL_DMA_IRQHandler+0x690>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d04a      	beq.n	8004222 <HAL_DMA_IRQHandler+0x516>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a83      	ldr	r2, [pc, #524]	@ (80043a0 <HAL_DMA_IRQHandler+0x694>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d045      	beq.n	8004222 <HAL_DMA_IRQHandler+0x516>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a82      	ldr	r2, [pc, #520]	@ (80043a4 <HAL_DMA_IRQHandler+0x698>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d040      	beq.n	8004222 <HAL_DMA_IRQHandler+0x516>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a80      	ldr	r2, [pc, #512]	@ (80043a8 <HAL_DMA_IRQHandler+0x69c>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d03b      	beq.n	8004222 <HAL_DMA_IRQHandler+0x516>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a7f      	ldr	r2, [pc, #508]	@ (80043ac <HAL_DMA_IRQHandler+0x6a0>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d036      	beq.n	8004222 <HAL_DMA_IRQHandler+0x516>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a7d      	ldr	r2, [pc, #500]	@ (80043b0 <HAL_DMA_IRQHandler+0x6a4>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d031      	beq.n	8004222 <HAL_DMA_IRQHandler+0x516>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a7c      	ldr	r2, [pc, #496]	@ (80043b4 <HAL_DMA_IRQHandler+0x6a8>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d02c      	beq.n	8004222 <HAL_DMA_IRQHandler+0x516>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a7a      	ldr	r2, [pc, #488]	@ (80043b8 <HAL_DMA_IRQHandler+0x6ac>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d027      	beq.n	8004222 <HAL_DMA_IRQHandler+0x516>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a79      	ldr	r2, [pc, #484]	@ (80043bc <HAL_DMA_IRQHandler+0x6b0>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d022      	beq.n	8004222 <HAL_DMA_IRQHandler+0x516>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a77      	ldr	r2, [pc, #476]	@ (80043c0 <HAL_DMA_IRQHandler+0x6b4>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d01d      	beq.n	8004222 <HAL_DMA_IRQHandler+0x516>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a76      	ldr	r2, [pc, #472]	@ (80043c4 <HAL_DMA_IRQHandler+0x6b8>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d018      	beq.n	8004222 <HAL_DMA_IRQHandler+0x516>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a74      	ldr	r2, [pc, #464]	@ (80043c8 <HAL_DMA_IRQHandler+0x6bc>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d013      	beq.n	8004222 <HAL_DMA_IRQHandler+0x516>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a73      	ldr	r2, [pc, #460]	@ (80043cc <HAL_DMA_IRQHandler+0x6c0>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d00e      	beq.n	8004222 <HAL_DMA_IRQHandler+0x516>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a71      	ldr	r2, [pc, #452]	@ (80043d0 <HAL_DMA_IRQHandler+0x6c4>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d009      	beq.n	8004222 <HAL_DMA_IRQHandler+0x516>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a70      	ldr	r2, [pc, #448]	@ (80043d4 <HAL_DMA_IRQHandler+0x6c8>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d004      	beq.n	8004222 <HAL_DMA_IRQHandler+0x516>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a6e      	ldr	r2, [pc, #440]	@ (80043d8 <HAL_DMA_IRQHandler+0x6cc>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d10a      	bne.n	8004238 <HAL_DMA_IRQHandler+0x52c>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0308 	and.w	r3, r3, #8
 800422c:	2b00      	cmp	r3, #0
 800422e:	bf14      	ite	ne
 8004230:	2301      	movne	r3, #1
 8004232:	2300      	moveq	r3, #0
 8004234:	b2db      	uxtb	r3, r3
 8004236:	e009      	b.n	800424c <HAL_DMA_IRQHandler+0x540>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0304 	and.w	r3, r3, #4
 8004242:	2b00      	cmp	r3, #0
 8004244:	bf14      	ite	ne
 8004246:	2301      	movne	r3, #1
 8004248:	2300      	moveq	r3, #0
 800424a:	b2db      	uxtb	r3, r3
 800424c:	2b00      	cmp	r3, #0
 800424e:	d03e      	beq.n	80042ce <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004254:	f003 031f 	and.w	r3, r3, #31
 8004258:	2210      	movs	r2, #16
 800425a:	409a      	lsls	r2, r3
 800425c:	6a3b      	ldr	r3, [r7, #32]
 800425e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d018      	beq.n	80042a0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d108      	bne.n	800428e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004280:	2b00      	cmp	r3, #0
 8004282:	d024      	beq.n	80042ce <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	4798      	blx	r3
 800428c:	e01f      	b.n	80042ce <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004292:	2b00      	cmp	r3, #0
 8004294:	d01b      	beq.n	80042ce <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	4798      	blx	r3
 800429e:	e016      	b.n	80042ce <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d107      	bne.n	80042be <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f022 0208 	bic.w	r2, r2, #8
 80042bc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d003      	beq.n	80042ce <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042d2:	f003 031f 	and.w	r3, r3, #31
 80042d6:	2220      	movs	r2, #32
 80042d8:	409a      	lsls	r2, r3
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	4013      	ands	r3, r2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	f000 8110 	beq.w	8004504 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a2c      	ldr	r2, [pc, #176]	@ (800439c <HAL_DMA_IRQHandler+0x690>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d04a      	beq.n	8004384 <HAL_DMA_IRQHandler+0x678>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a2b      	ldr	r2, [pc, #172]	@ (80043a0 <HAL_DMA_IRQHandler+0x694>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d045      	beq.n	8004384 <HAL_DMA_IRQHandler+0x678>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a29      	ldr	r2, [pc, #164]	@ (80043a4 <HAL_DMA_IRQHandler+0x698>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d040      	beq.n	8004384 <HAL_DMA_IRQHandler+0x678>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a28      	ldr	r2, [pc, #160]	@ (80043a8 <HAL_DMA_IRQHandler+0x69c>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d03b      	beq.n	8004384 <HAL_DMA_IRQHandler+0x678>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a26      	ldr	r2, [pc, #152]	@ (80043ac <HAL_DMA_IRQHandler+0x6a0>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d036      	beq.n	8004384 <HAL_DMA_IRQHandler+0x678>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a25      	ldr	r2, [pc, #148]	@ (80043b0 <HAL_DMA_IRQHandler+0x6a4>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d031      	beq.n	8004384 <HAL_DMA_IRQHandler+0x678>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a23      	ldr	r2, [pc, #140]	@ (80043b4 <HAL_DMA_IRQHandler+0x6a8>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d02c      	beq.n	8004384 <HAL_DMA_IRQHandler+0x678>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a22      	ldr	r2, [pc, #136]	@ (80043b8 <HAL_DMA_IRQHandler+0x6ac>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d027      	beq.n	8004384 <HAL_DMA_IRQHandler+0x678>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a20      	ldr	r2, [pc, #128]	@ (80043bc <HAL_DMA_IRQHandler+0x6b0>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d022      	beq.n	8004384 <HAL_DMA_IRQHandler+0x678>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a1f      	ldr	r2, [pc, #124]	@ (80043c0 <HAL_DMA_IRQHandler+0x6b4>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d01d      	beq.n	8004384 <HAL_DMA_IRQHandler+0x678>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a1d      	ldr	r2, [pc, #116]	@ (80043c4 <HAL_DMA_IRQHandler+0x6b8>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d018      	beq.n	8004384 <HAL_DMA_IRQHandler+0x678>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a1c      	ldr	r2, [pc, #112]	@ (80043c8 <HAL_DMA_IRQHandler+0x6bc>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d013      	beq.n	8004384 <HAL_DMA_IRQHandler+0x678>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a1a      	ldr	r2, [pc, #104]	@ (80043cc <HAL_DMA_IRQHandler+0x6c0>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d00e      	beq.n	8004384 <HAL_DMA_IRQHandler+0x678>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a19      	ldr	r2, [pc, #100]	@ (80043d0 <HAL_DMA_IRQHandler+0x6c4>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d009      	beq.n	8004384 <HAL_DMA_IRQHandler+0x678>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a17      	ldr	r2, [pc, #92]	@ (80043d4 <HAL_DMA_IRQHandler+0x6c8>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d004      	beq.n	8004384 <HAL_DMA_IRQHandler+0x678>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a16      	ldr	r2, [pc, #88]	@ (80043d8 <HAL_DMA_IRQHandler+0x6cc>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d12b      	bne.n	80043dc <HAL_DMA_IRQHandler+0x6d0>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0310 	and.w	r3, r3, #16
 800438e:	2b00      	cmp	r3, #0
 8004390:	bf14      	ite	ne
 8004392:	2301      	movne	r3, #1
 8004394:	2300      	moveq	r3, #0
 8004396:	b2db      	uxtb	r3, r3
 8004398:	e02a      	b.n	80043f0 <HAL_DMA_IRQHandler+0x6e4>
 800439a:	bf00      	nop
 800439c:	40020010 	.word	0x40020010
 80043a0:	40020028 	.word	0x40020028
 80043a4:	40020040 	.word	0x40020040
 80043a8:	40020058 	.word	0x40020058
 80043ac:	40020070 	.word	0x40020070
 80043b0:	40020088 	.word	0x40020088
 80043b4:	400200a0 	.word	0x400200a0
 80043b8:	400200b8 	.word	0x400200b8
 80043bc:	40020410 	.word	0x40020410
 80043c0:	40020428 	.word	0x40020428
 80043c4:	40020440 	.word	0x40020440
 80043c8:	40020458 	.word	0x40020458
 80043cc:	40020470 	.word	0x40020470
 80043d0:	40020488 	.word	0x40020488
 80043d4:	400204a0 	.word	0x400204a0
 80043d8:	400204b8 	.word	0x400204b8
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0302 	and.w	r3, r3, #2
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	bf14      	ite	ne
 80043ea:	2301      	movne	r3, #1
 80043ec:	2300      	moveq	r3, #0
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	f000 8087 	beq.w	8004504 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043fa:	f003 031f 	and.w	r3, r3, #31
 80043fe:	2220      	movs	r2, #32
 8004400:	409a      	lsls	r2, r3
 8004402:	6a3b      	ldr	r3, [r7, #32]
 8004404:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2b04      	cmp	r3, #4
 8004410:	d139      	bne.n	8004486 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f022 0216 	bic.w	r2, r2, #22
 8004420:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	695a      	ldr	r2, [r3, #20]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004430:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004436:	2b00      	cmp	r3, #0
 8004438:	d103      	bne.n	8004442 <HAL_DMA_IRQHandler+0x736>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800443e:	2b00      	cmp	r3, #0
 8004440:	d007      	beq.n	8004452 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f022 0208 	bic.w	r2, r2, #8
 8004450:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004456:	f003 031f 	and.w	r3, r3, #31
 800445a:	223f      	movs	r2, #63	@ 0x3f
 800445c:	409a      	lsls	r2, r3
 800445e:	6a3b      	ldr	r3, [r7, #32]
 8004460:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2201      	movs	r2, #1
 8004466:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004476:	2b00      	cmp	r3, #0
 8004478:	f000 834a 	beq.w	8004b10 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	4798      	blx	r3
          }
          return;
 8004484:	e344      	b.n	8004b10 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d018      	beq.n	80044c6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d108      	bne.n	80044b4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d02c      	beq.n	8004504 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	4798      	blx	r3
 80044b2:	e027      	b.n	8004504 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d023      	beq.n	8004504 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	4798      	blx	r3
 80044c4:	e01e      	b.n	8004504 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d10f      	bne.n	80044f4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f022 0210 	bic.w	r2, r2, #16
 80044e2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d003      	beq.n	8004504 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004508:	2b00      	cmp	r3, #0
 800450a:	f000 8306 	beq.w	8004b1a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004512:	f003 0301 	and.w	r3, r3, #1
 8004516:	2b00      	cmp	r3, #0
 8004518:	f000 8088 	beq.w	800462c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2204      	movs	r2, #4
 8004520:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a7a      	ldr	r2, [pc, #488]	@ (8004714 <HAL_DMA_IRQHandler+0xa08>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d04a      	beq.n	80045c4 <HAL_DMA_IRQHandler+0x8b8>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a79      	ldr	r2, [pc, #484]	@ (8004718 <HAL_DMA_IRQHandler+0xa0c>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d045      	beq.n	80045c4 <HAL_DMA_IRQHandler+0x8b8>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a77      	ldr	r2, [pc, #476]	@ (800471c <HAL_DMA_IRQHandler+0xa10>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d040      	beq.n	80045c4 <HAL_DMA_IRQHandler+0x8b8>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a76      	ldr	r2, [pc, #472]	@ (8004720 <HAL_DMA_IRQHandler+0xa14>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d03b      	beq.n	80045c4 <HAL_DMA_IRQHandler+0x8b8>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a74      	ldr	r2, [pc, #464]	@ (8004724 <HAL_DMA_IRQHandler+0xa18>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d036      	beq.n	80045c4 <HAL_DMA_IRQHandler+0x8b8>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a73      	ldr	r2, [pc, #460]	@ (8004728 <HAL_DMA_IRQHandler+0xa1c>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d031      	beq.n	80045c4 <HAL_DMA_IRQHandler+0x8b8>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a71      	ldr	r2, [pc, #452]	@ (800472c <HAL_DMA_IRQHandler+0xa20>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d02c      	beq.n	80045c4 <HAL_DMA_IRQHandler+0x8b8>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a70      	ldr	r2, [pc, #448]	@ (8004730 <HAL_DMA_IRQHandler+0xa24>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d027      	beq.n	80045c4 <HAL_DMA_IRQHandler+0x8b8>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a6e      	ldr	r2, [pc, #440]	@ (8004734 <HAL_DMA_IRQHandler+0xa28>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d022      	beq.n	80045c4 <HAL_DMA_IRQHandler+0x8b8>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a6d      	ldr	r2, [pc, #436]	@ (8004738 <HAL_DMA_IRQHandler+0xa2c>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d01d      	beq.n	80045c4 <HAL_DMA_IRQHandler+0x8b8>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a6b      	ldr	r2, [pc, #428]	@ (800473c <HAL_DMA_IRQHandler+0xa30>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d018      	beq.n	80045c4 <HAL_DMA_IRQHandler+0x8b8>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a6a      	ldr	r2, [pc, #424]	@ (8004740 <HAL_DMA_IRQHandler+0xa34>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d013      	beq.n	80045c4 <HAL_DMA_IRQHandler+0x8b8>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a68      	ldr	r2, [pc, #416]	@ (8004744 <HAL_DMA_IRQHandler+0xa38>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d00e      	beq.n	80045c4 <HAL_DMA_IRQHandler+0x8b8>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a67      	ldr	r2, [pc, #412]	@ (8004748 <HAL_DMA_IRQHandler+0xa3c>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d009      	beq.n	80045c4 <HAL_DMA_IRQHandler+0x8b8>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a65      	ldr	r2, [pc, #404]	@ (800474c <HAL_DMA_IRQHandler+0xa40>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d004      	beq.n	80045c4 <HAL_DMA_IRQHandler+0x8b8>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a64      	ldr	r2, [pc, #400]	@ (8004750 <HAL_DMA_IRQHandler+0xa44>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d108      	bne.n	80045d6 <HAL_DMA_IRQHandler+0x8ca>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f022 0201 	bic.w	r2, r2, #1
 80045d2:	601a      	str	r2, [r3, #0]
 80045d4:	e007      	b.n	80045e6 <HAL_DMA_IRQHandler+0x8da>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f022 0201 	bic.w	r2, r2, #1
 80045e4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	3301      	adds	r3, #1
 80045ea:	60fb      	str	r3, [r7, #12]
 80045ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d307      	bcc.n	8004602 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0301 	and.w	r3, r3, #1
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d1f2      	bne.n	80045e6 <HAL_DMA_IRQHandler+0x8da>
 8004600:	e000      	b.n	8004604 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004602:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0301 	and.w	r3, r3, #1
 800460e:	2b00      	cmp	r3, #0
 8004610:	d004      	beq.n	800461c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2203      	movs	r2, #3
 8004616:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800461a:	e003      	b.n	8004624 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004630:	2b00      	cmp	r3, #0
 8004632:	f000 8272 	beq.w	8004b1a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	4798      	blx	r3
 800463e:	e26c      	b.n	8004b1a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a43      	ldr	r2, [pc, #268]	@ (8004754 <HAL_DMA_IRQHandler+0xa48>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d022      	beq.n	8004690 <HAL_DMA_IRQHandler+0x984>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a42      	ldr	r2, [pc, #264]	@ (8004758 <HAL_DMA_IRQHandler+0xa4c>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d01d      	beq.n	8004690 <HAL_DMA_IRQHandler+0x984>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a40      	ldr	r2, [pc, #256]	@ (800475c <HAL_DMA_IRQHandler+0xa50>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d018      	beq.n	8004690 <HAL_DMA_IRQHandler+0x984>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a3f      	ldr	r2, [pc, #252]	@ (8004760 <HAL_DMA_IRQHandler+0xa54>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d013      	beq.n	8004690 <HAL_DMA_IRQHandler+0x984>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a3d      	ldr	r2, [pc, #244]	@ (8004764 <HAL_DMA_IRQHandler+0xa58>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d00e      	beq.n	8004690 <HAL_DMA_IRQHandler+0x984>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a3c      	ldr	r2, [pc, #240]	@ (8004768 <HAL_DMA_IRQHandler+0xa5c>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d009      	beq.n	8004690 <HAL_DMA_IRQHandler+0x984>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a3a      	ldr	r2, [pc, #232]	@ (800476c <HAL_DMA_IRQHandler+0xa60>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d004      	beq.n	8004690 <HAL_DMA_IRQHandler+0x984>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a39      	ldr	r2, [pc, #228]	@ (8004770 <HAL_DMA_IRQHandler+0xa64>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d101      	bne.n	8004694 <HAL_DMA_IRQHandler+0x988>
 8004690:	2301      	movs	r3, #1
 8004692:	e000      	b.n	8004696 <HAL_DMA_IRQHandler+0x98a>
 8004694:	2300      	movs	r3, #0
 8004696:	2b00      	cmp	r3, #0
 8004698:	f000 823f 	beq.w	8004b1a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046a8:	f003 031f 	and.w	r3, r3, #31
 80046ac:	2204      	movs	r2, #4
 80046ae:	409a      	lsls	r2, r3
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	4013      	ands	r3, r2
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	f000 80cd 	beq.w	8004854 <HAL_DMA_IRQHandler+0xb48>
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	f003 0304 	and.w	r3, r3, #4
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	f000 80c7 	beq.w	8004854 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046ca:	f003 031f 	and.w	r3, r3, #31
 80046ce:	2204      	movs	r2, #4
 80046d0:	409a      	lsls	r2, r3
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d049      	beq.n	8004774 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d109      	bne.n	80046fe <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	f000 8210 	beq.w	8004b14 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046fc:	e20a      	b.n	8004b14 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004702:	2b00      	cmp	r3, #0
 8004704:	f000 8206 	beq.w	8004b14 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004710:	e200      	b.n	8004b14 <HAL_DMA_IRQHandler+0xe08>
 8004712:	bf00      	nop
 8004714:	40020010 	.word	0x40020010
 8004718:	40020028 	.word	0x40020028
 800471c:	40020040 	.word	0x40020040
 8004720:	40020058 	.word	0x40020058
 8004724:	40020070 	.word	0x40020070
 8004728:	40020088 	.word	0x40020088
 800472c:	400200a0 	.word	0x400200a0
 8004730:	400200b8 	.word	0x400200b8
 8004734:	40020410 	.word	0x40020410
 8004738:	40020428 	.word	0x40020428
 800473c:	40020440 	.word	0x40020440
 8004740:	40020458 	.word	0x40020458
 8004744:	40020470 	.word	0x40020470
 8004748:	40020488 	.word	0x40020488
 800474c:	400204a0 	.word	0x400204a0
 8004750:	400204b8 	.word	0x400204b8
 8004754:	58025408 	.word	0x58025408
 8004758:	5802541c 	.word	0x5802541c
 800475c:	58025430 	.word	0x58025430
 8004760:	58025444 	.word	0x58025444
 8004764:	58025458 	.word	0x58025458
 8004768:	5802546c 	.word	0x5802546c
 800476c:	58025480 	.word	0x58025480
 8004770:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	f003 0320 	and.w	r3, r3, #32
 800477a:	2b00      	cmp	r3, #0
 800477c:	d160      	bne.n	8004840 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a7f      	ldr	r2, [pc, #508]	@ (8004980 <HAL_DMA_IRQHandler+0xc74>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d04a      	beq.n	800481e <HAL_DMA_IRQHandler+0xb12>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a7d      	ldr	r2, [pc, #500]	@ (8004984 <HAL_DMA_IRQHandler+0xc78>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d045      	beq.n	800481e <HAL_DMA_IRQHandler+0xb12>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a7c      	ldr	r2, [pc, #496]	@ (8004988 <HAL_DMA_IRQHandler+0xc7c>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d040      	beq.n	800481e <HAL_DMA_IRQHandler+0xb12>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a7a      	ldr	r2, [pc, #488]	@ (800498c <HAL_DMA_IRQHandler+0xc80>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d03b      	beq.n	800481e <HAL_DMA_IRQHandler+0xb12>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a79      	ldr	r2, [pc, #484]	@ (8004990 <HAL_DMA_IRQHandler+0xc84>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d036      	beq.n	800481e <HAL_DMA_IRQHandler+0xb12>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a77      	ldr	r2, [pc, #476]	@ (8004994 <HAL_DMA_IRQHandler+0xc88>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d031      	beq.n	800481e <HAL_DMA_IRQHandler+0xb12>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a76      	ldr	r2, [pc, #472]	@ (8004998 <HAL_DMA_IRQHandler+0xc8c>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d02c      	beq.n	800481e <HAL_DMA_IRQHandler+0xb12>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a74      	ldr	r2, [pc, #464]	@ (800499c <HAL_DMA_IRQHandler+0xc90>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d027      	beq.n	800481e <HAL_DMA_IRQHandler+0xb12>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a73      	ldr	r2, [pc, #460]	@ (80049a0 <HAL_DMA_IRQHandler+0xc94>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d022      	beq.n	800481e <HAL_DMA_IRQHandler+0xb12>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a71      	ldr	r2, [pc, #452]	@ (80049a4 <HAL_DMA_IRQHandler+0xc98>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d01d      	beq.n	800481e <HAL_DMA_IRQHandler+0xb12>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a70      	ldr	r2, [pc, #448]	@ (80049a8 <HAL_DMA_IRQHandler+0xc9c>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d018      	beq.n	800481e <HAL_DMA_IRQHandler+0xb12>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a6e      	ldr	r2, [pc, #440]	@ (80049ac <HAL_DMA_IRQHandler+0xca0>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d013      	beq.n	800481e <HAL_DMA_IRQHandler+0xb12>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a6d      	ldr	r2, [pc, #436]	@ (80049b0 <HAL_DMA_IRQHandler+0xca4>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d00e      	beq.n	800481e <HAL_DMA_IRQHandler+0xb12>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a6b      	ldr	r2, [pc, #428]	@ (80049b4 <HAL_DMA_IRQHandler+0xca8>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d009      	beq.n	800481e <HAL_DMA_IRQHandler+0xb12>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a6a      	ldr	r2, [pc, #424]	@ (80049b8 <HAL_DMA_IRQHandler+0xcac>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d004      	beq.n	800481e <HAL_DMA_IRQHandler+0xb12>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a68      	ldr	r2, [pc, #416]	@ (80049bc <HAL_DMA_IRQHandler+0xcb0>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d108      	bne.n	8004830 <HAL_DMA_IRQHandler+0xb24>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f022 0208 	bic.w	r2, r2, #8
 800482c:	601a      	str	r2, [r3, #0]
 800482e:	e007      	b.n	8004840 <HAL_DMA_IRQHandler+0xb34>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f022 0204 	bic.w	r2, r2, #4
 800483e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004844:	2b00      	cmp	r3, #0
 8004846:	f000 8165 	beq.w	8004b14 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004852:	e15f      	b.n	8004b14 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004858:	f003 031f 	and.w	r3, r3, #31
 800485c:	2202      	movs	r2, #2
 800485e:	409a      	lsls	r2, r3
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	4013      	ands	r3, r2
 8004864:	2b00      	cmp	r3, #0
 8004866:	f000 80c5 	beq.w	80049f4 <HAL_DMA_IRQHandler+0xce8>
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	f003 0302 	and.w	r3, r3, #2
 8004870:	2b00      	cmp	r3, #0
 8004872:	f000 80bf 	beq.w	80049f4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800487a:	f003 031f 	and.w	r3, r3, #31
 800487e:	2202      	movs	r2, #2
 8004880:	409a      	lsls	r2, r3
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d018      	beq.n	80048c2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d109      	bne.n	80048ae <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800489e:	2b00      	cmp	r3, #0
 80048a0:	f000 813a 	beq.w	8004b18 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048ac:	e134      	b.n	8004b18 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	f000 8130 	beq.w	8004b18 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048c0:	e12a      	b.n	8004b18 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	f003 0320 	and.w	r3, r3, #32
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	f040 8089 	bne.w	80049e0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a2b      	ldr	r2, [pc, #172]	@ (8004980 <HAL_DMA_IRQHandler+0xc74>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d04a      	beq.n	800496e <HAL_DMA_IRQHandler+0xc62>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a29      	ldr	r2, [pc, #164]	@ (8004984 <HAL_DMA_IRQHandler+0xc78>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d045      	beq.n	800496e <HAL_DMA_IRQHandler+0xc62>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a28      	ldr	r2, [pc, #160]	@ (8004988 <HAL_DMA_IRQHandler+0xc7c>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d040      	beq.n	800496e <HAL_DMA_IRQHandler+0xc62>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a26      	ldr	r2, [pc, #152]	@ (800498c <HAL_DMA_IRQHandler+0xc80>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d03b      	beq.n	800496e <HAL_DMA_IRQHandler+0xc62>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a25      	ldr	r2, [pc, #148]	@ (8004990 <HAL_DMA_IRQHandler+0xc84>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d036      	beq.n	800496e <HAL_DMA_IRQHandler+0xc62>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a23      	ldr	r2, [pc, #140]	@ (8004994 <HAL_DMA_IRQHandler+0xc88>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d031      	beq.n	800496e <HAL_DMA_IRQHandler+0xc62>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a22      	ldr	r2, [pc, #136]	@ (8004998 <HAL_DMA_IRQHandler+0xc8c>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d02c      	beq.n	800496e <HAL_DMA_IRQHandler+0xc62>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a20      	ldr	r2, [pc, #128]	@ (800499c <HAL_DMA_IRQHandler+0xc90>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d027      	beq.n	800496e <HAL_DMA_IRQHandler+0xc62>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a1f      	ldr	r2, [pc, #124]	@ (80049a0 <HAL_DMA_IRQHandler+0xc94>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d022      	beq.n	800496e <HAL_DMA_IRQHandler+0xc62>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a1d      	ldr	r2, [pc, #116]	@ (80049a4 <HAL_DMA_IRQHandler+0xc98>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d01d      	beq.n	800496e <HAL_DMA_IRQHandler+0xc62>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a1c      	ldr	r2, [pc, #112]	@ (80049a8 <HAL_DMA_IRQHandler+0xc9c>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d018      	beq.n	800496e <HAL_DMA_IRQHandler+0xc62>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a1a      	ldr	r2, [pc, #104]	@ (80049ac <HAL_DMA_IRQHandler+0xca0>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d013      	beq.n	800496e <HAL_DMA_IRQHandler+0xc62>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a19      	ldr	r2, [pc, #100]	@ (80049b0 <HAL_DMA_IRQHandler+0xca4>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d00e      	beq.n	800496e <HAL_DMA_IRQHandler+0xc62>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a17      	ldr	r2, [pc, #92]	@ (80049b4 <HAL_DMA_IRQHandler+0xca8>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d009      	beq.n	800496e <HAL_DMA_IRQHandler+0xc62>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a16      	ldr	r2, [pc, #88]	@ (80049b8 <HAL_DMA_IRQHandler+0xcac>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d004      	beq.n	800496e <HAL_DMA_IRQHandler+0xc62>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a14      	ldr	r2, [pc, #80]	@ (80049bc <HAL_DMA_IRQHandler+0xcb0>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d128      	bne.n	80049c0 <HAL_DMA_IRQHandler+0xcb4>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f022 0214 	bic.w	r2, r2, #20
 800497c:	601a      	str	r2, [r3, #0]
 800497e:	e027      	b.n	80049d0 <HAL_DMA_IRQHandler+0xcc4>
 8004980:	40020010 	.word	0x40020010
 8004984:	40020028 	.word	0x40020028
 8004988:	40020040 	.word	0x40020040
 800498c:	40020058 	.word	0x40020058
 8004990:	40020070 	.word	0x40020070
 8004994:	40020088 	.word	0x40020088
 8004998:	400200a0 	.word	0x400200a0
 800499c:	400200b8 	.word	0x400200b8
 80049a0:	40020410 	.word	0x40020410
 80049a4:	40020428 	.word	0x40020428
 80049a8:	40020440 	.word	0x40020440
 80049ac:	40020458 	.word	0x40020458
 80049b0:	40020470 	.word	0x40020470
 80049b4:	40020488 	.word	0x40020488
 80049b8:	400204a0 	.word	0x400204a0
 80049bc:	400204b8 	.word	0x400204b8
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f022 020a 	bic.w	r2, r2, #10
 80049ce:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	f000 8097 	beq.w	8004b18 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049f2:	e091      	b.n	8004b18 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049f8:	f003 031f 	and.w	r3, r3, #31
 80049fc:	2208      	movs	r2, #8
 80049fe:	409a      	lsls	r2, r3
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	4013      	ands	r3, r2
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	f000 8088 	beq.w	8004b1a <HAL_DMA_IRQHandler+0xe0e>
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	f003 0308 	and.w	r3, r3, #8
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	f000 8082 	beq.w	8004b1a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a41      	ldr	r2, [pc, #260]	@ (8004b20 <HAL_DMA_IRQHandler+0xe14>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d04a      	beq.n	8004ab6 <HAL_DMA_IRQHandler+0xdaa>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a3f      	ldr	r2, [pc, #252]	@ (8004b24 <HAL_DMA_IRQHandler+0xe18>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d045      	beq.n	8004ab6 <HAL_DMA_IRQHandler+0xdaa>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a3e      	ldr	r2, [pc, #248]	@ (8004b28 <HAL_DMA_IRQHandler+0xe1c>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d040      	beq.n	8004ab6 <HAL_DMA_IRQHandler+0xdaa>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a3c      	ldr	r2, [pc, #240]	@ (8004b2c <HAL_DMA_IRQHandler+0xe20>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d03b      	beq.n	8004ab6 <HAL_DMA_IRQHandler+0xdaa>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a3b      	ldr	r2, [pc, #236]	@ (8004b30 <HAL_DMA_IRQHandler+0xe24>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d036      	beq.n	8004ab6 <HAL_DMA_IRQHandler+0xdaa>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a39      	ldr	r2, [pc, #228]	@ (8004b34 <HAL_DMA_IRQHandler+0xe28>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d031      	beq.n	8004ab6 <HAL_DMA_IRQHandler+0xdaa>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a38      	ldr	r2, [pc, #224]	@ (8004b38 <HAL_DMA_IRQHandler+0xe2c>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d02c      	beq.n	8004ab6 <HAL_DMA_IRQHandler+0xdaa>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a36      	ldr	r2, [pc, #216]	@ (8004b3c <HAL_DMA_IRQHandler+0xe30>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d027      	beq.n	8004ab6 <HAL_DMA_IRQHandler+0xdaa>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a35      	ldr	r2, [pc, #212]	@ (8004b40 <HAL_DMA_IRQHandler+0xe34>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d022      	beq.n	8004ab6 <HAL_DMA_IRQHandler+0xdaa>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a33      	ldr	r2, [pc, #204]	@ (8004b44 <HAL_DMA_IRQHandler+0xe38>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d01d      	beq.n	8004ab6 <HAL_DMA_IRQHandler+0xdaa>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a32      	ldr	r2, [pc, #200]	@ (8004b48 <HAL_DMA_IRQHandler+0xe3c>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d018      	beq.n	8004ab6 <HAL_DMA_IRQHandler+0xdaa>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a30      	ldr	r2, [pc, #192]	@ (8004b4c <HAL_DMA_IRQHandler+0xe40>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d013      	beq.n	8004ab6 <HAL_DMA_IRQHandler+0xdaa>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a2f      	ldr	r2, [pc, #188]	@ (8004b50 <HAL_DMA_IRQHandler+0xe44>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d00e      	beq.n	8004ab6 <HAL_DMA_IRQHandler+0xdaa>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a2d      	ldr	r2, [pc, #180]	@ (8004b54 <HAL_DMA_IRQHandler+0xe48>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d009      	beq.n	8004ab6 <HAL_DMA_IRQHandler+0xdaa>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a2c      	ldr	r2, [pc, #176]	@ (8004b58 <HAL_DMA_IRQHandler+0xe4c>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d004      	beq.n	8004ab6 <HAL_DMA_IRQHandler+0xdaa>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a2a      	ldr	r2, [pc, #168]	@ (8004b5c <HAL_DMA_IRQHandler+0xe50>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d108      	bne.n	8004ac8 <HAL_DMA_IRQHandler+0xdbc>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f022 021c 	bic.w	r2, r2, #28
 8004ac4:	601a      	str	r2, [r3, #0]
 8004ac6:	e007      	b.n	8004ad8 <HAL_DMA_IRQHandler+0xdcc>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f022 020e 	bic.w	r2, r2, #14
 8004ad6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004adc:	f003 031f 	and.w	r3, r3, #31
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	409a      	lsls	r2, r3
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2201      	movs	r2, #1
 8004af2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d009      	beq.n	8004b1a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	4798      	blx	r3
 8004b0e:	e004      	b.n	8004b1a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004b10:	bf00      	nop
 8004b12:	e002      	b.n	8004b1a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b14:	bf00      	nop
 8004b16:	e000      	b.n	8004b1a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b18:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004b1a:	3728      	adds	r7, #40	@ 0x28
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	40020010 	.word	0x40020010
 8004b24:	40020028 	.word	0x40020028
 8004b28:	40020040 	.word	0x40020040
 8004b2c:	40020058 	.word	0x40020058
 8004b30:	40020070 	.word	0x40020070
 8004b34:	40020088 	.word	0x40020088
 8004b38:	400200a0 	.word	0x400200a0
 8004b3c:	400200b8 	.word	0x400200b8
 8004b40:	40020410 	.word	0x40020410
 8004b44:	40020428 	.word	0x40020428
 8004b48:	40020440 	.word	0x40020440
 8004b4c:	40020458 	.word	0x40020458
 8004b50:	40020470 	.word	0x40020470
 8004b54:	40020488 	.word	0x40020488
 8004b58:	400204a0 	.word	0x400204a0
 8004b5c:	400204b8 	.word	0x400204b8

08004b60 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b083      	sub	sp, #12
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	370c      	adds	r7, #12
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr

08004b78 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b087      	sub	sp, #28
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	60b9      	str	r1, [r7, #8]
 8004b82:	607a      	str	r2, [r7, #4]
 8004b84:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b8a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b90:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a7f      	ldr	r2, [pc, #508]	@ (8004d94 <DMA_SetConfig+0x21c>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d072      	beq.n	8004c82 <DMA_SetConfig+0x10a>
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a7d      	ldr	r2, [pc, #500]	@ (8004d98 <DMA_SetConfig+0x220>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d06d      	beq.n	8004c82 <DMA_SetConfig+0x10a>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a7c      	ldr	r2, [pc, #496]	@ (8004d9c <DMA_SetConfig+0x224>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d068      	beq.n	8004c82 <DMA_SetConfig+0x10a>
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a7a      	ldr	r2, [pc, #488]	@ (8004da0 <DMA_SetConfig+0x228>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d063      	beq.n	8004c82 <DMA_SetConfig+0x10a>
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a79      	ldr	r2, [pc, #484]	@ (8004da4 <DMA_SetConfig+0x22c>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d05e      	beq.n	8004c82 <DMA_SetConfig+0x10a>
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a77      	ldr	r2, [pc, #476]	@ (8004da8 <DMA_SetConfig+0x230>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d059      	beq.n	8004c82 <DMA_SetConfig+0x10a>
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a76      	ldr	r2, [pc, #472]	@ (8004dac <DMA_SetConfig+0x234>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d054      	beq.n	8004c82 <DMA_SetConfig+0x10a>
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a74      	ldr	r2, [pc, #464]	@ (8004db0 <DMA_SetConfig+0x238>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d04f      	beq.n	8004c82 <DMA_SetConfig+0x10a>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a73      	ldr	r2, [pc, #460]	@ (8004db4 <DMA_SetConfig+0x23c>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d04a      	beq.n	8004c82 <DMA_SetConfig+0x10a>
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a71      	ldr	r2, [pc, #452]	@ (8004db8 <DMA_SetConfig+0x240>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d045      	beq.n	8004c82 <DMA_SetConfig+0x10a>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a70      	ldr	r2, [pc, #448]	@ (8004dbc <DMA_SetConfig+0x244>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d040      	beq.n	8004c82 <DMA_SetConfig+0x10a>
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a6e      	ldr	r2, [pc, #440]	@ (8004dc0 <DMA_SetConfig+0x248>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d03b      	beq.n	8004c82 <DMA_SetConfig+0x10a>
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a6d      	ldr	r2, [pc, #436]	@ (8004dc4 <DMA_SetConfig+0x24c>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d036      	beq.n	8004c82 <DMA_SetConfig+0x10a>
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a6b      	ldr	r2, [pc, #428]	@ (8004dc8 <DMA_SetConfig+0x250>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d031      	beq.n	8004c82 <DMA_SetConfig+0x10a>
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a6a      	ldr	r2, [pc, #424]	@ (8004dcc <DMA_SetConfig+0x254>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d02c      	beq.n	8004c82 <DMA_SetConfig+0x10a>
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a68      	ldr	r2, [pc, #416]	@ (8004dd0 <DMA_SetConfig+0x258>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d027      	beq.n	8004c82 <DMA_SetConfig+0x10a>
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a67      	ldr	r2, [pc, #412]	@ (8004dd4 <DMA_SetConfig+0x25c>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d022      	beq.n	8004c82 <DMA_SetConfig+0x10a>
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a65      	ldr	r2, [pc, #404]	@ (8004dd8 <DMA_SetConfig+0x260>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d01d      	beq.n	8004c82 <DMA_SetConfig+0x10a>
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a64      	ldr	r2, [pc, #400]	@ (8004ddc <DMA_SetConfig+0x264>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d018      	beq.n	8004c82 <DMA_SetConfig+0x10a>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a62      	ldr	r2, [pc, #392]	@ (8004de0 <DMA_SetConfig+0x268>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d013      	beq.n	8004c82 <DMA_SetConfig+0x10a>
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a61      	ldr	r2, [pc, #388]	@ (8004de4 <DMA_SetConfig+0x26c>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d00e      	beq.n	8004c82 <DMA_SetConfig+0x10a>
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a5f      	ldr	r2, [pc, #380]	@ (8004de8 <DMA_SetConfig+0x270>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d009      	beq.n	8004c82 <DMA_SetConfig+0x10a>
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a5e      	ldr	r2, [pc, #376]	@ (8004dec <DMA_SetConfig+0x274>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d004      	beq.n	8004c82 <DMA_SetConfig+0x10a>
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a5c      	ldr	r2, [pc, #368]	@ (8004df0 <DMA_SetConfig+0x278>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d101      	bne.n	8004c86 <DMA_SetConfig+0x10e>
 8004c82:	2301      	movs	r3, #1
 8004c84:	e000      	b.n	8004c88 <DMA_SetConfig+0x110>
 8004c86:	2300      	movs	r3, #0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d00d      	beq.n	8004ca8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c90:	68fa      	ldr	r2, [r7, #12]
 8004c92:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004c94:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d004      	beq.n	8004ca8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ca2:	68fa      	ldr	r2, [r7, #12]
 8004ca4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004ca6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a39      	ldr	r2, [pc, #228]	@ (8004d94 <DMA_SetConfig+0x21c>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d04a      	beq.n	8004d48 <DMA_SetConfig+0x1d0>
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a38      	ldr	r2, [pc, #224]	@ (8004d98 <DMA_SetConfig+0x220>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d045      	beq.n	8004d48 <DMA_SetConfig+0x1d0>
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a36      	ldr	r2, [pc, #216]	@ (8004d9c <DMA_SetConfig+0x224>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d040      	beq.n	8004d48 <DMA_SetConfig+0x1d0>
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a35      	ldr	r2, [pc, #212]	@ (8004da0 <DMA_SetConfig+0x228>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d03b      	beq.n	8004d48 <DMA_SetConfig+0x1d0>
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a33      	ldr	r2, [pc, #204]	@ (8004da4 <DMA_SetConfig+0x22c>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d036      	beq.n	8004d48 <DMA_SetConfig+0x1d0>
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a32      	ldr	r2, [pc, #200]	@ (8004da8 <DMA_SetConfig+0x230>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d031      	beq.n	8004d48 <DMA_SetConfig+0x1d0>
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a30      	ldr	r2, [pc, #192]	@ (8004dac <DMA_SetConfig+0x234>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d02c      	beq.n	8004d48 <DMA_SetConfig+0x1d0>
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a2f      	ldr	r2, [pc, #188]	@ (8004db0 <DMA_SetConfig+0x238>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d027      	beq.n	8004d48 <DMA_SetConfig+0x1d0>
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a2d      	ldr	r2, [pc, #180]	@ (8004db4 <DMA_SetConfig+0x23c>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d022      	beq.n	8004d48 <DMA_SetConfig+0x1d0>
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a2c      	ldr	r2, [pc, #176]	@ (8004db8 <DMA_SetConfig+0x240>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d01d      	beq.n	8004d48 <DMA_SetConfig+0x1d0>
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a2a      	ldr	r2, [pc, #168]	@ (8004dbc <DMA_SetConfig+0x244>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d018      	beq.n	8004d48 <DMA_SetConfig+0x1d0>
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a29      	ldr	r2, [pc, #164]	@ (8004dc0 <DMA_SetConfig+0x248>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d013      	beq.n	8004d48 <DMA_SetConfig+0x1d0>
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a27      	ldr	r2, [pc, #156]	@ (8004dc4 <DMA_SetConfig+0x24c>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d00e      	beq.n	8004d48 <DMA_SetConfig+0x1d0>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a26      	ldr	r2, [pc, #152]	@ (8004dc8 <DMA_SetConfig+0x250>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d009      	beq.n	8004d48 <DMA_SetConfig+0x1d0>
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a24      	ldr	r2, [pc, #144]	@ (8004dcc <DMA_SetConfig+0x254>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d004      	beq.n	8004d48 <DMA_SetConfig+0x1d0>
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a23      	ldr	r2, [pc, #140]	@ (8004dd0 <DMA_SetConfig+0x258>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d101      	bne.n	8004d4c <DMA_SetConfig+0x1d4>
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e000      	b.n	8004d4e <DMA_SetConfig+0x1d6>
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d059      	beq.n	8004e06 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d56:	f003 031f 	and.w	r3, r3, #31
 8004d5a:	223f      	movs	r2, #63	@ 0x3f
 8004d5c:	409a      	lsls	r2, r3
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004d70:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	683a      	ldr	r2, [r7, #0]
 8004d78:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	2b40      	cmp	r3, #64	@ 0x40
 8004d80:	d138      	bne.n	8004df4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68ba      	ldr	r2, [r7, #8]
 8004d90:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004d92:	e086      	b.n	8004ea2 <DMA_SetConfig+0x32a>
 8004d94:	40020010 	.word	0x40020010
 8004d98:	40020028 	.word	0x40020028
 8004d9c:	40020040 	.word	0x40020040
 8004da0:	40020058 	.word	0x40020058
 8004da4:	40020070 	.word	0x40020070
 8004da8:	40020088 	.word	0x40020088
 8004dac:	400200a0 	.word	0x400200a0
 8004db0:	400200b8 	.word	0x400200b8
 8004db4:	40020410 	.word	0x40020410
 8004db8:	40020428 	.word	0x40020428
 8004dbc:	40020440 	.word	0x40020440
 8004dc0:	40020458 	.word	0x40020458
 8004dc4:	40020470 	.word	0x40020470
 8004dc8:	40020488 	.word	0x40020488
 8004dcc:	400204a0 	.word	0x400204a0
 8004dd0:	400204b8 	.word	0x400204b8
 8004dd4:	58025408 	.word	0x58025408
 8004dd8:	5802541c 	.word	0x5802541c
 8004ddc:	58025430 	.word	0x58025430
 8004de0:	58025444 	.word	0x58025444
 8004de4:	58025458 	.word	0x58025458
 8004de8:	5802546c 	.word	0x5802546c
 8004dec:	58025480 	.word	0x58025480
 8004df0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	68ba      	ldr	r2, [r7, #8]
 8004dfa:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	60da      	str	r2, [r3, #12]
}
 8004e04:	e04d      	b.n	8004ea2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a29      	ldr	r2, [pc, #164]	@ (8004eb0 <DMA_SetConfig+0x338>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d022      	beq.n	8004e56 <DMA_SetConfig+0x2de>
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a27      	ldr	r2, [pc, #156]	@ (8004eb4 <DMA_SetConfig+0x33c>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d01d      	beq.n	8004e56 <DMA_SetConfig+0x2de>
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a26      	ldr	r2, [pc, #152]	@ (8004eb8 <DMA_SetConfig+0x340>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d018      	beq.n	8004e56 <DMA_SetConfig+0x2de>
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a24      	ldr	r2, [pc, #144]	@ (8004ebc <DMA_SetConfig+0x344>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d013      	beq.n	8004e56 <DMA_SetConfig+0x2de>
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a23      	ldr	r2, [pc, #140]	@ (8004ec0 <DMA_SetConfig+0x348>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d00e      	beq.n	8004e56 <DMA_SetConfig+0x2de>
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a21      	ldr	r2, [pc, #132]	@ (8004ec4 <DMA_SetConfig+0x34c>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d009      	beq.n	8004e56 <DMA_SetConfig+0x2de>
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a20      	ldr	r2, [pc, #128]	@ (8004ec8 <DMA_SetConfig+0x350>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d004      	beq.n	8004e56 <DMA_SetConfig+0x2de>
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a1e      	ldr	r2, [pc, #120]	@ (8004ecc <DMA_SetConfig+0x354>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d101      	bne.n	8004e5a <DMA_SetConfig+0x2e2>
 8004e56:	2301      	movs	r3, #1
 8004e58:	e000      	b.n	8004e5c <DMA_SetConfig+0x2e4>
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d020      	beq.n	8004ea2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e64:	f003 031f 	and.w	r3, r3, #31
 8004e68:	2201      	movs	r2, #1
 8004e6a:	409a      	lsls	r2, r3
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	683a      	ldr	r2, [r7, #0]
 8004e76:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	2b40      	cmp	r3, #64	@ 0x40
 8004e7e:	d108      	bne.n	8004e92 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68ba      	ldr	r2, [r7, #8]
 8004e8e:	60da      	str	r2, [r3, #12]
}
 8004e90:	e007      	b.n	8004ea2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	68ba      	ldr	r2, [r7, #8]
 8004e98:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	60da      	str	r2, [r3, #12]
}
 8004ea2:	bf00      	nop
 8004ea4:	371c      	adds	r7, #28
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr
 8004eae:	bf00      	nop
 8004eb0:	58025408 	.word	0x58025408
 8004eb4:	5802541c 	.word	0x5802541c
 8004eb8:	58025430 	.word	0x58025430
 8004ebc:	58025444 	.word	0x58025444
 8004ec0:	58025458 	.word	0x58025458
 8004ec4:	5802546c 	.word	0x5802546c
 8004ec8:	58025480 	.word	0x58025480
 8004ecc:	58025494 	.word	0x58025494

08004ed0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b085      	sub	sp, #20
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a42      	ldr	r2, [pc, #264]	@ (8004fe8 <DMA_CalcBaseAndBitshift+0x118>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d04a      	beq.n	8004f78 <DMA_CalcBaseAndBitshift+0xa8>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a41      	ldr	r2, [pc, #260]	@ (8004fec <DMA_CalcBaseAndBitshift+0x11c>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d045      	beq.n	8004f78 <DMA_CalcBaseAndBitshift+0xa8>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a3f      	ldr	r2, [pc, #252]	@ (8004ff0 <DMA_CalcBaseAndBitshift+0x120>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d040      	beq.n	8004f78 <DMA_CalcBaseAndBitshift+0xa8>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a3e      	ldr	r2, [pc, #248]	@ (8004ff4 <DMA_CalcBaseAndBitshift+0x124>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d03b      	beq.n	8004f78 <DMA_CalcBaseAndBitshift+0xa8>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a3c      	ldr	r2, [pc, #240]	@ (8004ff8 <DMA_CalcBaseAndBitshift+0x128>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d036      	beq.n	8004f78 <DMA_CalcBaseAndBitshift+0xa8>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a3b      	ldr	r2, [pc, #236]	@ (8004ffc <DMA_CalcBaseAndBitshift+0x12c>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d031      	beq.n	8004f78 <DMA_CalcBaseAndBitshift+0xa8>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a39      	ldr	r2, [pc, #228]	@ (8005000 <DMA_CalcBaseAndBitshift+0x130>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d02c      	beq.n	8004f78 <DMA_CalcBaseAndBitshift+0xa8>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a38      	ldr	r2, [pc, #224]	@ (8005004 <DMA_CalcBaseAndBitshift+0x134>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d027      	beq.n	8004f78 <DMA_CalcBaseAndBitshift+0xa8>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a36      	ldr	r2, [pc, #216]	@ (8005008 <DMA_CalcBaseAndBitshift+0x138>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d022      	beq.n	8004f78 <DMA_CalcBaseAndBitshift+0xa8>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a35      	ldr	r2, [pc, #212]	@ (800500c <DMA_CalcBaseAndBitshift+0x13c>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d01d      	beq.n	8004f78 <DMA_CalcBaseAndBitshift+0xa8>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a33      	ldr	r2, [pc, #204]	@ (8005010 <DMA_CalcBaseAndBitshift+0x140>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d018      	beq.n	8004f78 <DMA_CalcBaseAndBitshift+0xa8>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a32      	ldr	r2, [pc, #200]	@ (8005014 <DMA_CalcBaseAndBitshift+0x144>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d013      	beq.n	8004f78 <DMA_CalcBaseAndBitshift+0xa8>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a30      	ldr	r2, [pc, #192]	@ (8005018 <DMA_CalcBaseAndBitshift+0x148>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d00e      	beq.n	8004f78 <DMA_CalcBaseAndBitshift+0xa8>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a2f      	ldr	r2, [pc, #188]	@ (800501c <DMA_CalcBaseAndBitshift+0x14c>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d009      	beq.n	8004f78 <DMA_CalcBaseAndBitshift+0xa8>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a2d      	ldr	r2, [pc, #180]	@ (8005020 <DMA_CalcBaseAndBitshift+0x150>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d004      	beq.n	8004f78 <DMA_CalcBaseAndBitshift+0xa8>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a2c      	ldr	r2, [pc, #176]	@ (8005024 <DMA_CalcBaseAndBitshift+0x154>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d101      	bne.n	8004f7c <DMA_CalcBaseAndBitshift+0xac>
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e000      	b.n	8004f7e <DMA_CalcBaseAndBitshift+0xae>
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d024      	beq.n	8004fcc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	3b10      	subs	r3, #16
 8004f8a:	4a27      	ldr	r2, [pc, #156]	@ (8005028 <DMA_CalcBaseAndBitshift+0x158>)
 8004f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f90:	091b      	lsrs	r3, r3, #4
 8004f92:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f003 0307 	and.w	r3, r3, #7
 8004f9a:	4a24      	ldr	r2, [pc, #144]	@ (800502c <DMA_CalcBaseAndBitshift+0x15c>)
 8004f9c:	5cd3      	ldrb	r3, [r2, r3]
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2b03      	cmp	r3, #3
 8004fa8:	d908      	bls.n	8004fbc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	461a      	mov	r2, r3
 8004fb0:	4b1f      	ldr	r3, [pc, #124]	@ (8005030 <DMA_CalcBaseAndBitshift+0x160>)
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	1d1a      	adds	r2, r3, #4
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	659a      	str	r2, [r3, #88]	@ 0x58
 8004fba:	e00d      	b.n	8004fd8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	4b1b      	ldr	r3, [pc, #108]	@ (8005030 <DMA_CalcBaseAndBitshift+0x160>)
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	6593      	str	r3, [r2, #88]	@ 0x58
 8004fca:	e005      	b.n	8004fd8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3714      	adds	r7, #20
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr
 8004fe8:	40020010 	.word	0x40020010
 8004fec:	40020028 	.word	0x40020028
 8004ff0:	40020040 	.word	0x40020040
 8004ff4:	40020058 	.word	0x40020058
 8004ff8:	40020070 	.word	0x40020070
 8004ffc:	40020088 	.word	0x40020088
 8005000:	400200a0 	.word	0x400200a0
 8005004:	400200b8 	.word	0x400200b8
 8005008:	40020410 	.word	0x40020410
 800500c:	40020428 	.word	0x40020428
 8005010:	40020440 	.word	0x40020440
 8005014:	40020458 	.word	0x40020458
 8005018:	40020470 	.word	0x40020470
 800501c:	40020488 	.word	0x40020488
 8005020:	400204a0 	.word	0x400204a0
 8005024:	400204b8 	.word	0x400204b8
 8005028:	aaaaaaab 	.word	0xaaaaaaab
 800502c:	0800cacc 	.word	0x0800cacc
 8005030:	fffffc00 	.word	0xfffffc00

08005034 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8005034:	b480      	push	{r7}
 8005036:	b085      	sub	sp, #20
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800503c:	2300      	movs	r3, #0
 800503e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	699b      	ldr	r3, [r3, #24]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d120      	bne.n	800508a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800504c:	2b03      	cmp	r3, #3
 800504e:	d858      	bhi.n	8005102 <DMA_CheckFifoParam+0xce>
 8005050:	a201      	add	r2, pc, #4	@ (adr r2, 8005058 <DMA_CheckFifoParam+0x24>)
 8005052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005056:	bf00      	nop
 8005058:	08005069 	.word	0x08005069
 800505c:	0800507b 	.word	0x0800507b
 8005060:	08005069 	.word	0x08005069
 8005064:	08005103 	.word	0x08005103
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800506c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005070:	2b00      	cmp	r3, #0
 8005072:	d048      	beq.n	8005106 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005078:	e045      	b.n	8005106 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800507e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005082:	d142      	bne.n	800510a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005088:	e03f      	b.n	800510a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	699b      	ldr	r3, [r3, #24]
 800508e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005092:	d123      	bne.n	80050dc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005098:	2b03      	cmp	r3, #3
 800509a:	d838      	bhi.n	800510e <DMA_CheckFifoParam+0xda>
 800509c:	a201      	add	r2, pc, #4	@ (adr r2, 80050a4 <DMA_CheckFifoParam+0x70>)
 800509e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a2:	bf00      	nop
 80050a4:	080050b5 	.word	0x080050b5
 80050a8:	080050bb 	.word	0x080050bb
 80050ac:	080050b5 	.word	0x080050b5
 80050b0:	080050cd 	.word	0x080050cd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	73fb      	strb	r3, [r7, #15]
        break;
 80050b8:	e030      	b.n	800511c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050be:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d025      	beq.n	8005112 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80050ca:	e022      	b.n	8005112 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050d0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80050d4:	d11f      	bne.n	8005116 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80050da:	e01c      	b.n	8005116 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d902      	bls.n	80050ea <DMA_CheckFifoParam+0xb6>
 80050e4:	2b03      	cmp	r3, #3
 80050e6:	d003      	beq.n	80050f0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80050e8:	e018      	b.n	800511c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	73fb      	strb	r3, [r7, #15]
        break;
 80050ee:	e015      	b.n	800511c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d00e      	beq.n	800511a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	73fb      	strb	r3, [r7, #15]
    break;
 8005100:	e00b      	b.n	800511a <DMA_CheckFifoParam+0xe6>
        break;
 8005102:	bf00      	nop
 8005104:	e00a      	b.n	800511c <DMA_CheckFifoParam+0xe8>
        break;
 8005106:	bf00      	nop
 8005108:	e008      	b.n	800511c <DMA_CheckFifoParam+0xe8>
        break;
 800510a:	bf00      	nop
 800510c:	e006      	b.n	800511c <DMA_CheckFifoParam+0xe8>
        break;
 800510e:	bf00      	nop
 8005110:	e004      	b.n	800511c <DMA_CheckFifoParam+0xe8>
        break;
 8005112:	bf00      	nop
 8005114:	e002      	b.n	800511c <DMA_CheckFifoParam+0xe8>
        break;
 8005116:	bf00      	nop
 8005118:	e000      	b.n	800511c <DMA_CheckFifoParam+0xe8>
    break;
 800511a:	bf00      	nop
    }
  }

  return status;
 800511c:	7bfb      	ldrb	r3, [r7, #15]
}
 800511e:	4618      	mov	r0, r3
 8005120:	3714      	adds	r7, #20
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr
 800512a:	bf00      	nop

0800512c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800512c:	b480      	push	{r7}
 800512e:	b085      	sub	sp, #20
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a38      	ldr	r2, [pc, #224]	@ (8005220 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d022      	beq.n	800518a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a36      	ldr	r2, [pc, #216]	@ (8005224 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d01d      	beq.n	800518a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a35      	ldr	r2, [pc, #212]	@ (8005228 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d018      	beq.n	800518a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a33      	ldr	r2, [pc, #204]	@ (800522c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d013      	beq.n	800518a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a32      	ldr	r2, [pc, #200]	@ (8005230 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d00e      	beq.n	800518a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a30      	ldr	r2, [pc, #192]	@ (8005234 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d009      	beq.n	800518a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a2f      	ldr	r2, [pc, #188]	@ (8005238 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d004      	beq.n	800518a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a2d      	ldr	r2, [pc, #180]	@ (800523c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d101      	bne.n	800518e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800518a:	2301      	movs	r3, #1
 800518c:	e000      	b.n	8005190 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800518e:	2300      	movs	r3, #0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d01a      	beq.n	80051ca <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	b2db      	uxtb	r3, r3
 800519a:	3b08      	subs	r3, #8
 800519c:	4a28      	ldr	r2, [pc, #160]	@ (8005240 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800519e:	fba2 2303 	umull	r2, r3, r2, r3
 80051a2:	091b      	lsrs	r3, r3, #4
 80051a4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	4b26      	ldr	r3, [pc, #152]	@ (8005244 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80051aa:	4413      	add	r3, r2
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	461a      	mov	r2, r3
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	4a24      	ldr	r2, [pc, #144]	@ (8005248 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80051b8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f003 031f 	and.w	r3, r3, #31
 80051c0:	2201      	movs	r2, #1
 80051c2:	409a      	lsls	r2, r3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80051c8:	e024      	b.n	8005214 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	3b10      	subs	r3, #16
 80051d2:	4a1e      	ldr	r2, [pc, #120]	@ (800524c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80051d4:	fba2 2303 	umull	r2, r3, r2, r3
 80051d8:	091b      	lsrs	r3, r3, #4
 80051da:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	4a1c      	ldr	r2, [pc, #112]	@ (8005250 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d806      	bhi.n	80051f2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	4a1b      	ldr	r2, [pc, #108]	@ (8005254 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d902      	bls.n	80051f2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	3308      	adds	r3, #8
 80051f0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	4b18      	ldr	r3, [pc, #96]	@ (8005258 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80051f6:	4413      	add	r3, r2
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	461a      	mov	r2, r3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a16      	ldr	r2, [pc, #88]	@ (800525c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005204:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f003 031f 	and.w	r3, r3, #31
 800520c:	2201      	movs	r2, #1
 800520e:	409a      	lsls	r2, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005214:	bf00      	nop
 8005216:	3714      	adds	r7, #20
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr
 8005220:	58025408 	.word	0x58025408
 8005224:	5802541c 	.word	0x5802541c
 8005228:	58025430 	.word	0x58025430
 800522c:	58025444 	.word	0x58025444
 8005230:	58025458 	.word	0x58025458
 8005234:	5802546c 	.word	0x5802546c
 8005238:	58025480 	.word	0x58025480
 800523c:	58025494 	.word	0x58025494
 8005240:	cccccccd 	.word	0xcccccccd
 8005244:	16009600 	.word	0x16009600
 8005248:	58025880 	.word	0x58025880
 800524c:	aaaaaaab 	.word	0xaaaaaaab
 8005250:	400204b8 	.word	0x400204b8
 8005254:	4002040f 	.word	0x4002040f
 8005258:	10008200 	.word	0x10008200
 800525c:	40020880 	.word	0x40020880

08005260 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005260:	b480      	push	{r7}
 8005262:	b085      	sub	sp, #20
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	b2db      	uxtb	r3, r3
 800526e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d04a      	beq.n	800530c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2b08      	cmp	r3, #8
 800527a:	d847      	bhi.n	800530c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a25      	ldr	r2, [pc, #148]	@ (8005318 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d022      	beq.n	80052cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a24      	ldr	r2, [pc, #144]	@ (800531c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d01d      	beq.n	80052cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a22      	ldr	r2, [pc, #136]	@ (8005320 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d018      	beq.n	80052cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a21      	ldr	r2, [pc, #132]	@ (8005324 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d013      	beq.n	80052cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a1f      	ldr	r2, [pc, #124]	@ (8005328 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d00e      	beq.n	80052cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a1e      	ldr	r2, [pc, #120]	@ (800532c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d009      	beq.n	80052cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a1c      	ldr	r2, [pc, #112]	@ (8005330 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d004      	beq.n	80052cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a1b      	ldr	r2, [pc, #108]	@ (8005334 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d101      	bne.n	80052d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80052cc:	2301      	movs	r3, #1
 80052ce:	e000      	b.n	80052d2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80052d0:	2300      	movs	r3, #0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d00a      	beq.n	80052ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80052d6:	68fa      	ldr	r2, [r7, #12]
 80052d8:	4b17      	ldr	r3, [pc, #92]	@ (8005338 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80052da:	4413      	add	r3, r2
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	461a      	mov	r2, r3
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4a15      	ldr	r2, [pc, #84]	@ (800533c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80052e8:	671a      	str	r2, [r3, #112]	@ 0x70
 80052ea:	e009      	b.n	8005300 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80052ec:	68fa      	ldr	r2, [r7, #12]
 80052ee:	4b14      	ldr	r3, [pc, #80]	@ (8005340 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80052f0:	4413      	add	r3, r2
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	461a      	mov	r2, r3
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4a11      	ldr	r2, [pc, #68]	@ (8005344 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80052fe:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	3b01      	subs	r3, #1
 8005304:	2201      	movs	r2, #1
 8005306:	409a      	lsls	r2, r3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800530c:	bf00      	nop
 800530e:	3714      	adds	r7, #20
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr
 8005318:	58025408 	.word	0x58025408
 800531c:	5802541c 	.word	0x5802541c
 8005320:	58025430 	.word	0x58025430
 8005324:	58025444 	.word	0x58025444
 8005328:	58025458 	.word	0x58025458
 800532c:	5802546c 	.word	0x5802546c
 8005330:	58025480 	.word	0x58025480
 8005334:	58025494 	.word	0x58025494
 8005338:	1600963f 	.word	0x1600963f
 800533c:	58025940 	.word	0x58025940
 8005340:	1000823f 	.word	0x1000823f
 8005344:	40020940 	.word	0x40020940

08005348 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA Stream.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8005348:	b480      	push	{r7}
 800534a:	b085      	sub	sp, #20
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
  uint32_t syncSignalID = 0;
 8005352:	2300      	movs	r3, #0
 8005354:	60fb      	str	r3, [r7, #12]
  uint32_t syncPolarity = 0;
 8005356:	2300      	movs	r3, #0
 8005358:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  if(pSyncConfig->SyncEnable == ENABLE)
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	7a1b      	ldrb	r3, [r3, #8]
 800535e:	2b01      	cmp	r3, #1
 8005360:	d154      	bne.n	800540c <HAL_DMAEx_ConfigMuxSync+0xc4>
  {
    assert_param(IS_DMAMUX_SYNC_POLARITY(pSyncConfig->SyncPolarity));

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a4b      	ldr	r2, [pc, #300]	@ (8005494 <HAL_DMAEx_ConfigMuxSync+0x14c>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d049      	beq.n	8005400 <HAL_DMAEx_ConfigMuxSync+0xb8>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a49      	ldr	r2, [pc, #292]	@ (8005498 <HAL_DMAEx_ConfigMuxSync+0x150>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d044      	beq.n	8005400 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a48      	ldr	r2, [pc, #288]	@ (800549c <HAL_DMAEx_ConfigMuxSync+0x154>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d03f      	beq.n	8005400 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a46      	ldr	r2, [pc, #280]	@ (80054a0 <HAL_DMAEx_ConfigMuxSync+0x158>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d03a      	beq.n	8005400 <HAL_DMAEx_ConfigMuxSync+0xb8>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a45      	ldr	r2, [pc, #276]	@ (80054a4 <HAL_DMAEx_ConfigMuxSync+0x15c>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d035      	beq.n	8005400 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a43      	ldr	r2, [pc, #268]	@ (80054a8 <HAL_DMAEx_ConfigMuxSync+0x160>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d030      	beq.n	8005400 <HAL_DMAEx_ConfigMuxSync+0xb8>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a42      	ldr	r2, [pc, #264]	@ (80054ac <HAL_DMAEx_ConfigMuxSync+0x164>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d02b      	beq.n	8005400 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a40      	ldr	r2, [pc, #256]	@ (80054b0 <HAL_DMAEx_ConfigMuxSync+0x168>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d026      	beq.n	8005400 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a3f      	ldr	r2, [pc, #252]	@ (80054b4 <HAL_DMAEx_ConfigMuxSync+0x16c>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d021      	beq.n	8005400 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a3d      	ldr	r2, [pc, #244]	@ (80054b8 <HAL_DMAEx_ConfigMuxSync+0x170>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d01c      	beq.n	8005400 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a3c      	ldr	r2, [pc, #240]	@ (80054bc <HAL_DMAEx_ConfigMuxSync+0x174>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d017      	beq.n	8005400 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a3a      	ldr	r2, [pc, #232]	@ (80054c0 <HAL_DMAEx_ConfigMuxSync+0x178>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d012      	beq.n	8005400 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a39      	ldr	r2, [pc, #228]	@ (80054c4 <HAL_DMAEx_ConfigMuxSync+0x17c>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d00d      	beq.n	8005400 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a37      	ldr	r2, [pc, #220]	@ (80054c8 <HAL_DMAEx_ConfigMuxSync+0x180>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d008      	beq.n	8005400 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a36      	ldr	r2, [pc, #216]	@ (80054cc <HAL_DMAEx_ConfigMuxSync+0x184>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d003      	beq.n	8005400 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a34      	ldr	r2, [pc, #208]	@ (80054d0 <HAL_DMAEx_ConfigMuxSync+0x188>)
 80053fe:	4293      	cmp	r3, r2
    }
    else
    {
      assert_param(IS_BDMA_DMAMUX_SYNC_SIGNAL_ID(pSyncConfig->SyncSignalID));
    }
    syncSignalID = pSyncConfig->SyncSignalID;
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	60fb      	str	r3, [r7, #12]
    syncPolarity = pSyncConfig->SyncPolarity;
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	60bb      	str	r3, [r7, #8]
  }

  /*Check if the DMA state is ready */
  if(hdma->State == HAL_DMA_STATE_READY)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005412:	b2db      	uxtb	r3, r3
 8005414:	2b01      	cmp	r3, #1
 8005416:	d131      	bne.n	800547c <HAL_DMAEx_ConfigMuxSync+0x134>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800541e:	2b01      	cmp	r3, #1
 8005420:	d101      	bne.n	8005426 <HAL_DMAEx_ConfigMuxSync+0xde>
 8005422:	2302      	movs	r3, #2
 8005424:	e02f      	b.n	8005486 <HAL_DMAEx_ConfigMuxSync+0x13e>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2201      	movs	r2, #1
 800542a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the synchronization and event generation before applying a new config */
    CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005438:	f422 3281 	bic.w	r2, r2, #66048	@ 0x10200
 800543c:	601a      	str	r2, [r3, #0]

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	b2d9      	uxtb	r1, r3
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	061a      	lsls	r2, r3, #24
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	3b01      	subs	r3, #1
 8005450:	04db      	lsls	r3, r3, #19
 8005452:	431a      	orrs	r2, r3
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	431a      	orrs	r2, r3
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	7a1b      	ldrb	r3, [r3, #8]
 800545c:	041b      	lsls	r3, r3, #16
 800545e:	431a      	orrs	r2, r3
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	7a5b      	ldrb	r3, [r3, #9]
 8005464:	025b      	lsls	r3, r3, #9
 8005466:	431a      	orrs	r2, r3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800546c:	430a      	orrs	r2, r1
 800546e:	601a      	str	r2, [r3, #0]
               ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               syncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)    | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

      /* Process Locked */
    __HAL_UNLOCK(hdma);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8005478:	2300      	movs	r3, #0
 800547a:	e004      	b.n	8005486 <HAL_DMAEx_ConfigMuxSync+0x13e>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005482:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return error status */
    return HAL_ERROR;
 8005484:	2301      	movs	r3, #1
  }
}
 8005486:	4618      	mov	r0, r3
 8005488:	3714      	adds	r7, #20
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr
 8005492:	bf00      	nop
 8005494:	40020010 	.word	0x40020010
 8005498:	40020028 	.word	0x40020028
 800549c:	40020040 	.word	0x40020040
 80054a0:	40020058 	.word	0x40020058
 80054a4:	40020070 	.word	0x40020070
 80054a8:	40020088 	.word	0x40020088
 80054ac:	400200a0 	.word	0x400200a0
 80054b0:	400200b8 	.word	0x400200b8
 80054b4:	40020410 	.word	0x40020410
 80054b8:	40020428 	.word	0x40020428
 80054bc:	40020440 	.word	0x40020440
 80054c0:	40020458 	.word	0x40020458
 80054c4:	40020470 	.word	0x40020470
 80054c8:	40020488 	.word	0x40020488
 80054cc:	400204a0 	.word	0x400204a0
 80054d0:	400204b8 	.word	0x400204b8

080054d4 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80054d4:	b480      	push	{r7}
 80054d6:	b087      	sub	sp, #28
 80054d8:	af00      	add	r7, sp, #0
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	460b      	mov	r3, r1
 80054de:	607a      	str	r2, [r7, #4]
 80054e0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80054e2:	2300      	movs	r3, #0
 80054e4:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d101      	bne.n	80054f0 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	e00a      	b.n	8005506 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 80054f0:	7afb      	ldrb	r3, [r7, #11]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d103      	bne.n	80054fe <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	605a      	str	r2, [r3, #4]
      break;
 80054fc:	e002      	b.n	8005504 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	75fb      	strb	r3, [r7, #23]
      break;
 8005502:	bf00      	nop
  }

  return status;
 8005504:	7dfb      	ldrb	r3, [r7, #23]
}
 8005506:	4618      	mov	r0, r3
 8005508:	371c      	adds	r7, #28
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr

08005512 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8005512:	b480      	push	{r7}
 8005514:	b083      	sub	sp, #12
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
 800551a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d101      	bne.n	8005526 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	e003      	b.n	800552e <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	683a      	ldr	r2, [r7, #0]
 800552a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800552c:	2300      	movs	r3, #0
  }
}
 800552e:	4618      	mov	r0, r3
 8005530:	370c      	adds	r7, #12
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr
	...

0800553c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800553c:	b480      	push	{r7}
 800553e:	b089      	sub	sp, #36	@ 0x24
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005546:	2300      	movs	r3, #0
 8005548:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800554a:	4b89      	ldr	r3, [pc, #548]	@ (8005770 <HAL_GPIO_Init+0x234>)
 800554c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800554e:	e194      	b.n	800587a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	2101      	movs	r1, #1
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	fa01 f303 	lsl.w	r3, r1, r3
 800555c:	4013      	ands	r3, r2
 800555e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	2b00      	cmp	r3, #0
 8005564:	f000 8186 	beq.w	8005874 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	f003 0303 	and.w	r3, r3, #3
 8005570:	2b01      	cmp	r3, #1
 8005572:	d005      	beq.n	8005580 <HAL_GPIO_Init+0x44>
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	f003 0303 	and.w	r3, r3, #3
 800557c:	2b02      	cmp	r3, #2
 800557e:	d130      	bne.n	80055e2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	005b      	lsls	r3, r3, #1
 800558a:	2203      	movs	r2, #3
 800558c:	fa02 f303 	lsl.w	r3, r2, r3
 8005590:	43db      	mvns	r3, r3
 8005592:	69ba      	ldr	r2, [r7, #24]
 8005594:	4013      	ands	r3, r2
 8005596:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	68da      	ldr	r2, [r3, #12]
 800559c:	69fb      	ldr	r3, [r7, #28]
 800559e:	005b      	lsls	r3, r3, #1
 80055a0:	fa02 f303 	lsl.w	r3, r2, r3
 80055a4:	69ba      	ldr	r2, [r7, #24]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	69ba      	ldr	r2, [r7, #24]
 80055ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80055b6:	2201      	movs	r2, #1
 80055b8:	69fb      	ldr	r3, [r7, #28]
 80055ba:	fa02 f303 	lsl.w	r3, r2, r3
 80055be:	43db      	mvns	r3, r3
 80055c0:	69ba      	ldr	r2, [r7, #24]
 80055c2:	4013      	ands	r3, r2
 80055c4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	091b      	lsrs	r3, r3, #4
 80055cc:	f003 0201 	and.w	r2, r3, #1
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	fa02 f303 	lsl.w	r3, r2, r3
 80055d6:	69ba      	ldr	r2, [r7, #24]
 80055d8:	4313      	orrs	r3, r2
 80055da:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	69ba      	ldr	r2, [r7, #24]
 80055e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	f003 0303 	and.w	r3, r3, #3
 80055ea:	2b03      	cmp	r3, #3
 80055ec:	d017      	beq.n	800561e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	005b      	lsls	r3, r3, #1
 80055f8:	2203      	movs	r2, #3
 80055fa:	fa02 f303 	lsl.w	r3, r2, r3
 80055fe:	43db      	mvns	r3, r3
 8005600:	69ba      	ldr	r2, [r7, #24]
 8005602:	4013      	ands	r3, r2
 8005604:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	689a      	ldr	r2, [r3, #8]
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	005b      	lsls	r3, r3, #1
 800560e:	fa02 f303 	lsl.w	r3, r2, r3
 8005612:	69ba      	ldr	r2, [r7, #24]
 8005614:	4313      	orrs	r3, r2
 8005616:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	69ba      	ldr	r2, [r7, #24]
 800561c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	f003 0303 	and.w	r3, r3, #3
 8005626:	2b02      	cmp	r3, #2
 8005628:	d123      	bne.n	8005672 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	08da      	lsrs	r2, r3, #3
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	3208      	adds	r2, #8
 8005632:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005636:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	f003 0307 	and.w	r3, r3, #7
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	220f      	movs	r2, #15
 8005642:	fa02 f303 	lsl.w	r3, r2, r3
 8005646:	43db      	mvns	r3, r3
 8005648:	69ba      	ldr	r2, [r7, #24]
 800564a:	4013      	ands	r3, r2
 800564c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	691a      	ldr	r2, [r3, #16]
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	f003 0307 	and.w	r3, r3, #7
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	fa02 f303 	lsl.w	r3, r2, r3
 800565e:	69ba      	ldr	r2, [r7, #24]
 8005660:	4313      	orrs	r3, r2
 8005662:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	08da      	lsrs	r2, r3, #3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	3208      	adds	r2, #8
 800566c:	69b9      	ldr	r1, [r7, #24]
 800566e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	005b      	lsls	r3, r3, #1
 800567c:	2203      	movs	r2, #3
 800567e:	fa02 f303 	lsl.w	r3, r2, r3
 8005682:	43db      	mvns	r3, r3
 8005684:	69ba      	ldr	r2, [r7, #24]
 8005686:	4013      	ands	r3, r2
 8005688:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	f003 0203 	and.w	r2, r3, #3
 8005692:	69fb      	ldr	r3, [r7, #28]
 8005694:	005b      	lsls	r3, r3, #1
 8005696:	fa02 f303 	lsl.w	r3, r2, r3
 800569a:	69ba      	ldr	r2, [r7, #24]
 800569c:	4313      	orrs	r3, r2
 800569e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	69ba      	ldr	r2, [r7, #24]
 80056a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	f000 80e0 	beq.w	8005874 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056b4:	4b2f      	ldr	r3, [pc, #188]	@ (8005774 <HAL_GPIO_Init+0x238>)
 80056b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80056ba:	4a2e      	ldr	r2, [pc, #184]	@ (8005774 <HAL_GPIO_Init+0x238>)
 80056bc:	f043 0302 	orr.w	r3, r3, #2
 80056c0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80056c4:	4b2b      	ldr	r3, [pc, #172]	@ (8005774 <HAL_GPIO_Init+0x238>)
 80056c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80056ca:	f003 0302 	and.w	r3, r3, #2
 80056ce:	60fb      	str	r3, [r7, #12]
 80056d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80056d2:	4a29      	ldr	r2, [pc, #164]	@ (8005778 <HAL_GPIO_Init+0x23c>)
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	089b      	lsrs	r3, r3, #2
 80056d8:	3302      	adds	r3, #2
 80056da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	f003 0303 	and.w	r3, r3, #3
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	220f      	movs	r2, #15
 80056ea:	fa02 f303 	lsl.w	r3, r2, r3
 80056ee:	43db      	mvns	r3, r3
 80056f0:	69ba      	ldr	r2, [r7, #24]
 80056f2:	4013      	ands	r3, r2
 80056f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a20      	ldr	r2, [pc, #128]	@ (800577c <HAL_GPIO_Init+0x240>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d052      	beq.n	80057a4 <HAL_GPIO_Init+0x268>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a1f      	ldr	r2, [pc, #124]	@ (8005780 <HAL_GPIO_Init+0x244>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d031      	beq.n	800576a <HAL_GPIO_Init+0x22e>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a1e      	ldr	r2, [pc, #120]	@ (8005784 <HAL_GPIO_Init+0x248>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d02b      	beq.n	8005766 <HAL_GPIO_Init+0x22a>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a1d      	ldr	r2, [pc, #116]	@ (8005788 <HAL_GPIO_Init+0x24c>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d025      	beq.n	8005762 <HAL_GPIO_Init+0x226>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a1c      	ldr	r2, [pc, #112]	@ (800578c <HAL_GPIO_Init+0x250>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d01f      	beq.n	800575e <HAL_GPIO_Init+0x222>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a1b      	ldr	r2, [pc, #108]	@ (8005790 <HAL_GPIO_Init+0x254>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d019      	beq.n	800575a <HAL_GPIO_Init+0x21e>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a1a      	ldr	r2, [pc, #104]	@ (8005794 <HAL_GPIO_Init+0x258>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d013      	beq.n	8005756 <HAL_GPIO_Init+0x21a>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a19      	ldr	r2, [pc, #100]	@ (8005798 <HAL_GPIO_Init+0x25c>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d00d      	beq.n	8005752 <HAL_GPIO_Init+0x216>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a18      	ldr	r2, [pc, #96]	@ (800579c <HAL_GPIO_Init+0x260>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d007      	beq.n	800574e <HAL_GPIO_Init+0x212>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a17      	ldr	r2, [pc, #92]	@ (80057a0 <HAL_GPIO_Init+0x264>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d101      	bne.n	800574a <HAL_GPIO_Init+0x20e>
 8005746:	2309      	movs	r3, #9
 8005748:	e02d      	b.n	80057a6 <HAL_GPIO_Init+0x26a>
 800574a:	230a      	movs	r3, #10
 800574c:	e02b      	b.n	80057a6 <HAL_GPIO_Init+0x26a>
 800574e:	2308      	movs	r3, #8
 8005750:	e029      	b.n	80057a6 <HAL_GPIO_Init+0x26a>
 8005752:	2307      	movs	r3, #7
 8005754:	e027      	b.n	80057a6 <HAL_GPIO_Init+0x26a>
 8005756:	2306      	movs	r3, #6
 8005758:	e025      	b.n	80057a6 <HAL_GPIO_Init+0x26a>
 800575a:	2305      	movs	r3, #5
 800575c:	e023      	b.n	80057a6 <HAL_GPIO_Init+0x26a>
 800575e:	2304      	movs	r3, #4
 8005760:	e021      	b.n	80057a6 <HAL_GPIO_Init+0x26a>
 8005762:	2303      	movs	r3, #3
 8005764:	e01f      	b.n	80057a6 <HAL_GPIO_Init+0x26a>
 8005766:	2302      	movs	r3, #2
 8005768:	e01d      	b.n	80057a6 <HAL_GPIO_Init+0x26a>
 800576a:	2301      	movs	r3, #1
 800576c:	e01b      	b.n	80057a6 <HAL_GPIO_Init+0x26a>
 800576e:	bf00      	nop
 8005770:	58000080 	.word	0x58000080
 8005774:	58024400 	.word	0x58024400
 8005778:	58000400 	.word	0x58000400
 800577c:	58020000 	.word	0x58020000
 8005780:	58020400 	.word	0x58020400
 8005784:	58020800 	.word	0x58020800
 8005788:	58020c00 	.word	0x58020c00
 800578c:	58021000 	.word	0x58021000
 8005790:	58021400 	.word	0x58021400
 8005794:	58021800 	.word	0x58021800
 8005798:	58021c00 	.word	0x58021c00
 800579c:	58022000 	.word	0x58022000
 80057a0:	58022400 	.word	0x58022400
 80057a4:	2300      	movs	r3, #0
 80057a6:	69fa      	ldr	r2, [r7, #28]
 80057a8:	f002 0203 	and.w	r2, r2, #3
 80057ac:	0092      	lsls	r2, r2, #2
 80057ae:	4093      	lsls	r3, r2
 80057b0:	69ba      	ldr	r2, [r7, #24]
 80057b2:	4313      	orrs	r3, r2
 80057b4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80057b6:	4938      	ldr	r1, [pc, #224]	@ (8005898 <HAL_GPIO_Init+0x35c>)
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	089b      	lsrs	r3, r3, #2
 80057bc:	3302      	adds	r3, #2
 80057be:	69ba      	ldr	r2, [r7, #24]
 80057c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80057c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	43db      	mvns	r3, r3
 80057d0:	69ba      	ldr	r2, [r7, #24]
 80057d2:	4013      	ands	r3, r2
 80057d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d003      	beq.n	80057ea <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80057e2:	69ba      	ldr	r2, [r7, #24]
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80057ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80057ee:	69bb      	ldr	r3, [r7, #24]
 80057f0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80057f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	43db      	mvns	r3, r3
 80057fe:	69ba      	ldr	r2, [r7, #24]
 8005800:	4013      	ands	r3, r2
 8005802:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800580c:	2b00      	cmp	r3, #0
 800580e:	d003      	beq.n	8005818 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005810:	69ba      	ldr	r2, [r7, #24]
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	4313      	orrs	r3, r2
 8005816:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005818:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800581c:	69bb      	ldr	r3, [r7, #24]
 800581e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	43db      	mvns	r3, r3
 800582a:	69ba      	ldr	r2, [r7, #24]
 800582c:	4013      	ands	r3, r2
 800582e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005838:	2b00      	cmp	r3, #0
 800583a:	d003      	beq.n	8005844 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800583c:	69ba      	ldr	r2, [r7, #24]
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	4313      	orrs	r3, r2
 8005842:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	69ba      	ldr	r2, [r7, #24]
 8005848:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	43db      	mvns	r3, r3
 8005854:	69ba      	ldr	r2, [r7, #24]
 8005856:	4013      	ands	r3, r2
 8005858:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005862:	2b00      	cmp	r3, #0
 8005864:	d003      	beq.n	800586e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005866:	69ba      	ldr	r2, [r7, #24]
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	4313      	orrs	r3, r2
 800586c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	69ba      	ldr	r2, [r7, #24]
 8005872:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	3301      	adds	r3, #1
 8005878:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	69fb      	ldr	r3, [r7, #28]
 8005880:	fa22 f303 	lsr.w	r3, r2, r3
 8005884:	2b00      	cmp	r3, #0
 8005886:	f47f ae63 	bne.w	8005550 <HAL_GPIO_Init+0x14>
  }
}
 800588a:	bf00      	nop
 800588c:	bf00      	nop
 800588e:	3724      	adds	r7, #36	@ 0x24
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr
 8005898:	58000400 	.word	0x58000400

0800589c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800589c:	b480      	push	{r7}
 800589e:	b083      	sub	sp, #12
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	460b      	mov	r3, r1
 80058a6:	807b      	strh	r3, [r7, #2]
 80058a8:	4613      	mov	r3, r2
 80058aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80058ac:	787b      	ldrb	r3, [r7, #1]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d003      	beq.n	80058ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80058b2:	887a      	ldrh	r2, [r7, #2]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80058b8:	e003      	b.n	80058c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80058ba:	887b      	ldrh	r3, [r7, #2]
 80058bc:	041a      	lsls	r2, r3, #16
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	619a      	str	r2, [r3, #24]
}
 80058c2:	bf00      	nop
 80058c4:	370c      	adds	r7, #12
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr
	...

080058d0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80058d8:	4a08      	ldr	r2, [pc, #32]	@ (80058fc <HAL_HSEM_FastTake+0x2c>)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	3320      	adds	r3, #32
 80058de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058e2:	4a07      	ldr	r2, [pc, #28]	@ (8005900 <HAL_HSEM_FastTake+0x30>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d101      	bne.n	80058ec <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80058e8:	2300      	movs	r3, #0
 80058ea:	e000      	b.n	80058ee <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	370c      	adds	r7, #12
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr
 80058fa:	bf00      	nop
 80058fc:	58026400 	.word	0x58026400
 8005900:	80000300 	.word	0x80000300

08005904 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800590e:	4906      	ldr	r1, [pc, #24]	@ (8005928 <HAL_HSEM_Release+0x24>)
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800591c:	bf00      	nop
 800591e:	370c      	adds	r7, #12
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr
 8005928:	58026400 	.word	0x58026400

0800592c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b082      	sub	sp, #8
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d101      	bne.n	800593e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e08b      	b.n	8005a56 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005944:	b2db      	uxtb	r3, r3
 8005946:	2b00      	cmp	r3, #0
 8005948:	d106      	bne.n	8005958 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f7fc ff68 	bl	8002828 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2224      	movs	r2, #36	@ 0x24
 800595c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f022 0201 	bic.w	r2, r2, #1
 800596e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	685a      	ldr	r2, [r3, #4]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800597c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	689a      	ldr	r2, [r3, #8]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800598c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	68db      	ldr	r3, [r3, #12]
 8005992:	2b01      	cmp	r3, #1
 8005994:	d107      	bne.n	80059a6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	689a      	ldr	r2, [r3, #8]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80059a2:	609a      	str	r2, [r3, #8]
 80059a4:	e006      	b.n	80059b4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	689a      	ldr	r2, [r3, #8]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80059b2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	68db      	ldr	r3, [r3, #12]
 80059b8:	2b02      	cmp	r3, #2
 80059ba:	d108      	bne.n	80059ce <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	685a      	ldr	r2, [r3, #4]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80059ca:	605a      	str	r2, [r3, #4]
 80059cc:	e007      	b.n	80059de <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	685a      	ldr	r2, [r3, #4]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80059dc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	6859      	ldr	r1, [r3, #4]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	4b1d      	ldr	r3, [pc, #116]	@ (8005a60 <HAL_I2C_Init+0x134>)
 80059ea:	430b      	orrs	r3, r1
 80059ec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	68da      	ldr	r2, [r3, #12]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80059fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	691a      	ldr	r2, [r3, #16]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	695b      	ldr	r3, [r3, #20]
 8005a06:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	699b      	ldr	r3, [r3, #24]
 8005a0e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	430a      	orrs	r2, r1
 8005a16:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	69d9      	ldr	r1, [r3, #28]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6a1a      	ldr	r2, [r3, #32]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	430a      	orrs	r2, r1
 8005a26:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f042 0201 	orr.w	r2, r2, #1
 8005a36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2220      	movs	r2, #32
 8005a42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005a54:	2300      	movs	r3, #0
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3708      	adds	r7, #8
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
 8005a5e:	bf00      	nop
 8005a60:	02008000 	.word	0x02008000

08005a64 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b088      	sub	sp, #32
 8005a68:	af02      	add	r7, sp, #8
 8005a6a:	60f8      	str	r0, [r7, #12]
 8005a6c:	4608      	mov	r0, r1
 8005a6e:	4611      	mov	r1, r2
 8005a70:	461a      	mov	r2, r3
 8005a72:	4603      	mov	r3, r0
 8005a74:	817b      	strh	r3, [r7, #10]
 8005a76:	460b      	mov	r3, r1
 8005a78:	813b      	strh	r3, [r7, #8]
 8005a7a:	4613      	mov	r3, r2
 8005a7c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	2b20      	cmp	r3, #32
 8005a88:	f040 80f9 	bne.w	8005c7e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a8c:	6a3b      	ldr	r3, [r7, #32]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d002      	beq.n	8005a98 <HAL_I2C_Mem_Write+0x34>
 8005a92:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d105      	bne.n	8005aa4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a9e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e0ed      	b.n	8005c80 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d101      	bne.n	8005ab2 <HAL_I2C_Mem_Write+0x4e>
 8005aae:	2302      	movs	r3, #2
 8005ab0:	e0e6      	b.n	8005c80 <HAL_I2C_Mem_Write+0x21c>
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005aba:	f7fd fa15 	bl	8002ee8 <HAL_GetTick>
 8005abe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	9300      	str	r3, [sp, #0]
 8005ac4:	2319      	movs	r3, #25
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005acc:	68f8      	ldr	r0, [r7, #12]
 8005ace:	f000 fac3 	bl	8006058 <I2C_WaitOnFlagUntilTimeout>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d001      	beq.n	8005adc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e0d1      	b.n	8005c80 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2221      	movs	r2, #33	@ 0x21
 8005ae0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2240      	movs	r2, #64	@ 0x40
 8005ae8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2200      	movs	r2, #0
 8005af0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	6a3a      	ldr	r2, [r7, #32]
 8005af6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005afc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2200      	movs	r2, #0
 8005b02:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005b04:	88f8      	ldrh	r0, [r7, #6]
 8005b06:	893a      	ldrh	r2, [r7, #8]
 8005b08:	8979      	ldrh	r1, [r7, #10]
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	9301      	str	r3, [sp, #4]
 8005b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b10:	9300      	str	r3, [sp, #0]
 8005b12:	4603      	mov	r3, r0
 8005b14:	68f8      	ldr	r0, [r7, #12]
 8005b16:	f000 f9d3 	bl	8005ec0 <I2C_RequestMemoryWrite>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d005      	beq.n	8005b2c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2200      	movs	r2, #0
 8005b24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e0a9      	b.n	8005c80 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	2bff      	cmp	r3, #255	@ 0xff
 8005b34:	d90e      	bls.n	8005b54 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	22ff      	movs	r2, #255	@ 0xff
 8005b3a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b40:	b2da      	uxtb	r2, r3
 8005b42:	8979      	ldrh	r1, [r7, #10]
 8005b44:	2300      	movs	r3, #0
 8005b46:	9300      	str	r3, [sp, #0]
 8005b48:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005b4c:	68f8      	ldr	r0, [r7, #12]
 8005b4e:	f000 fc47 	bl	80063e0 <I2C_TransferConfig>
 8005b52:	e00f      	b.n	8005b74 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b58:	b29a      	uxth	r2, r3
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b62:	b2da      	uxtb	r2, r3
 8005b64:	8979      	ldrh	r1, [r7, #10]
 8005b66:	2300      	movs	r3, #0
 8005b68:	9300      	str	r3, [sp, #0]
 8005b6a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005b6e:	68f8      	ldr	r0, [r7, #12]
 8005b70:	f000 fc36 	bl	80063e0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b74:	697a      	ldr	r2, [r7, #20]
 8005b76:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b78:	68f8      	ldr	r0, [r7, #12]
 8005b7a:	f000 fac6 	bl	800610a <I2C_WaitOnTXISFlagUntilTimeout>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d001      	beq.n	8005b88 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	e07b      	b.n	8005c80 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b8c:	781a      	ldrb	r2, [r3, #0]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b98:	1c5a      	adds	r2, r3, #1
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	3b01      	subs	r3, #1
 8005ba6:	b29a      	uxth	r2, r3
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bb0:	3b01      	subs	r3, #1
 8005bb2:	b29a      	uxth	r2, r3
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d034      	beq.n	8005c2c <HAL_I2C_Mem_Write+0x1c8>
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d130      	bne.n	8005c2c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	9300      	str	r3, [sp, #0]
 8005bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	2180      	movs	r1, #128	@ 0x80
 8005bd4:	68f8      	ldr	r0, [r7, #12]
 8005bd6:	f000 fa3f 	bl	8006058 <I2C_WaitOnFlagUntilTimeout>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d001      	beq.n	8005be4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005be0:	2301      	movs	r3, #1
 8005be2:	e04d      	b.n	8005c80 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	2bff      	cmp	r3, #255	@ 0xff
 8005bec:	d90e      	bls.n	8005c0c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	22ff      	movs	r2, #255	@ 0xff
 8005bf2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bf8:	b2da      	uxtb	r2, r3
 8005bfa:	8979      	ldrh	r1, [r7, #10]
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	9300      	str	r3, [sp, #0]
 8005c00:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005c04:	68f8      	ldr	r0, [r7, #12]
 8005c06:	f000 fbeb 	bl	80063e0 <I2C_TransferConfig>
 8005c0a:	e00f      	b.n	8005c2c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c10:	b29a      	uxth	r2, r3
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c1a:	b2da      	uxtb	r2, r3
 8005c1c:	8979      	ldrh	r1, [r7, #10]
 8005c1e:	2300      	movs	r3, #0
 8005c20:	9300      	str	r3, [sp, #0]
 8005c22:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005c26:	68f8      	ldr	r0, [r7, #12]
 8005c28:	f000 fbda 	bl	80063e0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d19e      	bne.n	8005b74 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c36:	697a      	ldr	r2, [r7, #20]
 8005c38:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005c3a:	68f8      	ldr	r0, [r7, #12]
 8005c3c:	f000 faac 	bl	8006198 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005c40:	4603      	mov	r3, r0
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d001      	beq.n	8005c4a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	e01a      	b.n	8005c80 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	2220      	movs	r2, #32
 8005c50:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	6859      	ldr	r1, [r3, #4]
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8005c88 <HAL_I2C_Mem_Write+0x224>)
 8005c5e:	400b      	ands	r3, r1
 8005c60:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2220      	movs	r2, #32
 8005c66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2200      	movs	r2, #0
 8005c76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	e000      	b.n	8005c80 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005c7e:	2302      	movs	r3, #2
  }
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3718      	adds	r7, #24
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	fe00e800 	.word	0xfe00e800

08005c8c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b088      	sub	sp, #32
 8005c90:	af02      	add	r7, sp, #8
 8005c92:	60f8      	str	r0, [r7, #12]
 8005c94:	4608      	mov	r0, r1
 8005c96:	4611      	mov	r1, r2
 8005c98:	461a      	mov	r2, r3
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	817b      	strh	r3, [r7, #10]
 8005c9e:	460b      	mov	r3, r1
 8005ca0:	813b      	strh	r3, [r7, #8]
 8005ca2:	4613      	mov	r3, r2
 8005ca4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	2b20      	cmp	r3, #32
 8005cb0:	f040 80fd 	bne.w	8005eae <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cb4:	6a3b      	ldr	r3, [r7, #32]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d002      	beq.n	8005cc0 <HAL_I2C_Mem_Read+0x34>
 8005cba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d105      	bne.n	8005ccc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005cc6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e0f1      	b.n	8005eb0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d101      	bne.n	8005cda <HAL_I2C_Mem_Read+0x4e>
 8005cd6:	2302      	movs	r3, #2
 8005cd8:	e0ea      	b.n	8005eb0 <HAL_I2C_Mem_Read+0x224>
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2201      	movs	r2, #1
 8005cde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005ce2:	f7fd f901 	bl	8002ee8 <HAL_GetTick>
 8005ce6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	9300      	str	r3, [sp, #0]
 8005cec:	2319      	movs	r3, #25
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005cf4:	68f8      	ldr	r0, [r7, #12]
 8005cf6:	f000 f9af 	bl	8006058 <I2C_WaitOnFlagUntilTimeout>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d001      	beq.n	8005d04 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	e0d5      	b.n	8005eb0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2222      	movs	r2, #34	@ 0x22
 8005d08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2240      	movs	r2, #64	@ 0x40
 8005d10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2200      	movs	r2, #0
 8005d18:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	6a3a      	ldr	r2, [r7, #32]
 8005d1e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005d24:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005d2c:	88f8      	ldrh	r0, [r7, #6]
 8005d2e:	893a      	ldrh	r2, [r7, #8]
 8005d30:	8979      	ldrh	r1, [r7, #10]
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	9301      	str	r3, [sp, #4]
 8005d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d38:	9300      	str	r3, [sp, #0]
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	68f8      	ldr	r0, [r7, #12]
 8005d3e:	f000 f913 	bl	8005f68 <I2C_RequestMemoryRead>
 8005d42:	4603      	mov	r3, r0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d005      	beq.n	8005d54 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	e0ad      	b.n	8005eb0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	2bff      	cmp	r3, #255	@ 0xff
 8005d5c:	d90e      	bls.n	8005d7c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	22ff      	movs	r2, #255	@ 0xff
 8005d62:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d68:	b2da      	uxtb	r2, r3
 8005d6a:	8979      	ldrh	r1, [r7, #10]
 8005d6c:	4b52      	ldr	r3, [pc, #328]	@ (8005eb8 <HAL_I2C_Mem_Read+0x22c>)
 8005d6e:	9300      	str	r3, [sp, #0]
 8005d70:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005d74:	68f8      	ldr	r0, [r7, #12]
 8005d76:	f000 fb33 	bl	80063e0 <I2C_TransferConfig>
 8005d7a:	e00f      	b.n	8005d9c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d80:	b29a      	uxth	r2, r3
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d8a:	b2da      	uxtb	r2, r3
 8005d8c:	8979      	ldrh	r1, [r7, #10]
 8005d8e:	4b4a      	ldr	r3, [pc, #296]	@ (8005eb8 <HAL_I2C_Mem_Read+0x22c>)
 8005d90:	9300      	str	r3, [sp, #0]
 8005d92:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005d96:	68f8      	ldr	r0, [r7, #12]
 8005d98:	f000 fb22 	bl	80063e0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	9300      	str	r3, [sp, #0]
 8005da0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005da2:	2200      	movs	r2, #0
 8005da4:	2104      	movs	r1, #4
 8005da6:	68f8      	ldr	r0, [r7, #12]
 8005da8:	f000 f956 	bl	8006058 <I2C_WaitOnFlagUntilTimeout>
 8005dac:	4603      	mov	r3, r0
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d001      	beq.n	8005db6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	e07c      	b.n	8005eb0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dc0:	b2d2      	uxtb	r2, r2
 8005dc2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dc8:	1c5a      	adds	r2, r3, #1
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dd2:	3b01      	subs	r3, #1
 8005dd4:	b29a      	uxth	r2, r3
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	3b01      	subs	r3, #1
 8005de2:	b29a      	uxth	r2, r3
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d034      	beq.n	8005e5c <HAL_I2C_Mem_Read+0x1d0>
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d130      	bne.n	8005e5c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	9300      	str	r3, [sp, #0]
 8005dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e00:	2200      	movs	r2, #0
 8005e02:	2180      	movs	r1, #128	@ 0x80
 8005e04:	68f8      	ldr	r0, [r7, #12]
 8005e06:	f000 f927 	bl	8006058 <I2C_WaitOnFlagUntilTimeout>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d001      	beq.n	8005e14 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005e10:	2301      	movs	r3, #1
 8005e12:	e04d      	b.n	8005eb0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	2bff      	cmp	r3, #255	@ 0xff
 8005e1c:	d90e      	bls.n	8005e3c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	22ff      	movs	r2, #255	@ 0xff
 8005e22:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e28:	b2da      	uxtb	r2, r3
 8005e2a:	8979      	ldrh	r1, [r7, #10]
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	9300      	str	r3, [sp, #0]
 8005e30:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005e34:	68f8      	ldr	r0, [r7, #12]
 8005e36:	f000 fad3 	bl	80063e0 <I2C_TransferConfig>
 8005e3a:	e00f      	b.n	8005e5c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e40:	b29a      	uxth	r2, r3
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e4a:	b2da      	uxtb	r2, r3
 8005e4c:	8979      	ldrh	r1, [r7, #10]
 8005e4e:	2300      	movs	r3, #0
 8005e50:	9300      	str	r3, [sp, #0]
 8005e52:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005e56:	68f8      	ldr	r0, [r7, #12]
 8005e58:	f000 fac2 	bl	80063e0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d19a      	bne.n	8005d9c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e66:	697a      	ldr	r2, [r7, #20]
 8005e68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e6a:	68f8      	ldr	r0, [r7, #12]
 8005e6c:	f000 f994 	bl	8006198 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005e70:	4603      	mov	r3, r0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d001      	beq.n	8005e7a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	e01a      	b.n	8005eb0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	2220      	movs	r2, #32
 8005e80:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	6859      	ldr	r1, [r3, #4]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	4b0b      	ldr	r3, [pc, #44]	@ (8005ebc <HAL_I2C_Mem_Read+0x230>)
 8005e8e:	400b      	ands	r3, r1
 8005e90:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2220      	movs	r2, #32
 8005e96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	e000      	b.n	8005eb0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005eae:	2302      	movs	r3, #2
  }
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3718      	adds	r7, #24
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}
 8005eb8:	80002400 	.word	0x80002400
 8005ebc:	fe00e800 	.word	0xfe00e800

08005ec0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b086      	sub	sp, #24
 8005ec4:	af02      	add	r7, sp, #8
 8005ec6:	60f8      	str	r0, [r7, #12]
 8005ec8:	4608      	mov	r0, r1
 8005eca:	4611      	mov	r1, r2
 8005ecc:	461a      	mov	r2, r3
 8005ece:	4603      	mov	r3, r0
 8005ed0:	817b      	strh	r3, [r7, #10]
 8005ed2:	460b      	mov	r3, r1
 8005ed4:	813b      	strh	r3, [r7, #8]
 8005ed6:	4613      	mov	r3, r2
 8005ed8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005eda:	88fb      	ldrh	r3, [r7, #6]
 8005edc:	b2da      	uxtb	r2, r3
 8005ede:	8979      	ldrh	r1, [r7, #10]
 8005ee0:	4b20      	ldr	r3, [pc, #128]	@ (8005f64 <I2C_RequestMemoryWrite+0xa4>)
 8005ee2:	9300      	str	r3, [sp, #0]
 8005ee4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005ee8:	68f8      	ldr	r0, [r7, #12]
 8005eea:	f000 fa79 	bl	80063e0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005eee:	69fa      	ldr	r2, [r7, #28]
 8005ef0:	69b9      	ldr	r1, [r7, #24]
 8005ef2:	68f8      	ldr	r0, [r7, #12]
 8005ef4:	f000 f909 	bl	800610a <I2C_WaitOnTXISFlagUntilTimeout>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d001      	beq.n	8005f02 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	e02c      	b.n	8005f5c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005f02:	88fb      	ldrh	r3, [r7, #6]
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d105      	bne.n	8005f14 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005f08:	893b      	ldrh	r3, [r7, #8]
 8005f0a:	b2da      	uxtb	r2, r3
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	629a      	str	r2, [r3, #40]	@ 0x28
 8005f12:	e015      	b.n	8005f40 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005f14:	893b      	ldrh	r3, [r7, #8]
 8005f16:	0a1b      	lsrs	r3, r3, #8
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	b2da      	uxtb	r2, r3
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f22:	69fa      	ldr	r2, [r7, #28]
 8005f24:	69b9      	ldr	r1, [r7, #24]
 8005f26:	68f8      	ldr	r0, [r7, #12]
 8005f28:	f000 f8ef 	bl	800610a <I2C_WaitOnTXISFlagUntilTimeout>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d001      	beq.n	8005f36 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e012      	b.n	8005f5c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005f36:	893b      	ldrh	r3, [r7, #8]
 8005f38:	b2da      	uxtb	r2, r3
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	9300      	str	r3, [sp, #0]
 8005f44:	69bb      	ldr	r3, [r7, #24]
 8005f46:	2200      	movs	r2, #0
 8005f48:	2180      	movs	r1, #128	@ 0x80
 8005f4a:	68f8      	ldr	r0, [r7, #12]
 8005f4c:	f000 f884 	bl	8006058 <I2C_WaitOnFlagUntilTimeout>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d001      	beq.n	8005f5a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	e000      	b.n	8005f5c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005f5a:	2300      	movs	r3, #0
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3710      	adds	r7, #16
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	80002000 	.word	0x80002000

08005f68 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b086      	sub	sp, #24
 8005f6c:	af02      	add	r7, sp, #8
 8005f6e:	60f8      	str	r0, [r7, #12]
 8005f70:	4608      	mov	r0, r1
 8005f72:	4611      	mov	r1, r2
 8005f74:	461a      	mov	r2, r3
 8005f76:	4603      	mov	r3, r0
 8005f78:	817b      	strh	r3, [r7, #10]
 8005f7a:	460b      	mov	r3, r1
 8005f7c:	813b      	strh	r3, [r7, #8]
 8005f7e:	4613      	mov	r3, r2
 8005f80:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005f82:	88fb      	ldrh	r3, [r7, #6]
 8005f84:	b2da      	uxtb	r2, r3
 8005f86:	8979      	ldrh	r1, [r7, #10]
 8005f88:	4b20      	ldr	r3, [pc, #128]	@ (800600c <I2C_RequestMemoryRead+0xa4>)
 8005f8a:	9300      	str	r3, [sp, #0]
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	68f8      	ldr	r0, [r7, #12]
 8005f90:	f000 fa26 	bl	80063e0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f94:	69fa      	ldr	r2, [r7, #28]
 8005f96:	69b9      	ldr	r1, [r7, #24]
 8005f98:	68f8      	ldr	r0, [r7, #12]
 8005f9a:	f000 f8b6 	bl	800610a <I2C_WaitOnTXISFlagUntilTimeout>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d001      	beq.n	8005fa8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e02c      	b.n	8006002 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005fa8:	88fb      	ldrh	r3, [r7, #6]
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d105      	bne.n	8005fba <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005fae:	893b      	ldrh	r3, [r7, #8]
 8005fb0:	b2da      	uxtb	r2, r3
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	629a      	str	r2, [r3, #40]	@ 0x28
 8005fb8:	e015      	b.n	8005fe6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005fba:	893b      	ldrh	r3, [r7, #8]
 8005fbc:	0a1b      	lsrs	r3, r3, #8
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	b2da      	uxtb	r2, r3
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fc8:	69fa      	ldr	r2, [r7, #28]
 8005fca:	69b9      	ldr	r1, [r7, #24]
 8005fcc:	68f8      	ldr	r0, [r7, #12]
 8005fce:	f000 f89c 	bl	800610a <I2C_WaitOnTXISFlagUntilTimeout>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d001      	beq.n	8005fdc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	e012      	b.n	8006002 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005fdc:	893b      	ldrh	r3, [r7, #8]
 8005fde:	b2da      	uxtb	r2, r3
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	9300      	str	r3, [sp, #0]
 8005fea:	69bb      	ldr	r3, [r7, #24]
 8005fec:	2200      	movs	r2, #0
 8005fee:	2140      	movs	r1, #64	@ 0x40
 8005ff0:	68f8      	ldr	r0, [r7, #12]
 8005ff2:	f000 f831 	bl	8006058 <I2C_WaitOnFlagUntilTimeout>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d001      	beq.n	8006000 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e000      	b.n	8006002 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006000:	2300      	movs	r3, #0
}
 8006002:	4618      	mov	r0, r3
 8006004:	3710      	adds	r7, #16
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
 800600a:	bf00      	nop
 800600c:	80002000 	.word	0x80002000

08006010 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006010:	b480      	push	{r7}
 8006012:	b083      	sub	sp, #12
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	699b      	ldr	r3, [r3, #24]
 800601e:	f003 0302 	and.w	r3, r3, #2
 8006022:	2b02      	cmp	r3, #2
 8006024:	d103      	bne.n	800602e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	2200      	movs	r2, #0
 800602c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	699b      	ldr	r3, [r3, #24]
 8006034:	f003 0301 	and.w	r3, r3, #1
 8006038:	2b01      	cmp	r3, #1
 800603a:	d007      	beq.n	800604c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	699a      	ldr	r2, [r3, #24]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f042 0201 	orr.w	r2, r2, #1
 800604a:	619a      	str	r2, [r3, #24]
  }
}
 800604c:	bf00      	nop
 800604e:	370c      	adds	r7, #12
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr

08006058 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b084      	sub	sp, #16
 800605c:	af00      	add	r7, sp, #0
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	60b9      	str	r1, [r7, #8]
 8006062:	603b      	str	r3, [r7, #0]
 8006064:	4613      	mov	r3, r2
 8006066:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006068:	e03b      	b.n	80060e2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800606a:	69ba      	ldr	r2, [r7, #24]
 800606c:	6839      	ldr	r1, [r7, #0]
 800606e:	68f8      	ldr	r0, [r7, #12]
 8006070:	f000 f8d6 	bl	8006220 <I2C_IsErrorOccurred>
 8006074:	4603      	mov	r3, r0
 8006076:	2b00      	cmp	r3, #0
 8006078:	d001      	beq.n	800607e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	e041      	b.n	8006102 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006084:	d02d      	beq.n	80060e2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006086:	f7fc ff2f 	bl	8002ee8 <HAL_GetTick>
 800608a:	4602      	mov	r2, r0
 800608c:	69bb      	ldr	r3, [r7, #24]
 800608e:	1ad3      	subs	r3, r2, r3
 8006090:	683a      	ldr	r2, [r7, #0]
 8006092:	429a      	cmp	r2, r3
 8006094:	d302      	bcc.n	800609c <I2C_WaitOnFlagUntilTimeout+0x44>
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d122      	bne.n	80060e2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	699a      	ldr	r2, [r3, #24]
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	4013      	ands	r3, r2
 80060a6:	68ba      	ldr	r2, [r7, #8]
 80060a8:	429a      	cmp	r2, r3
 80060aa:	bf0c      	ite	eq
 80060ac:	2301      	moveq	r3, #1
 80060ae:	2300      	movne	r3, #0
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	461a      	mov	r2, r3
 80060b4:	79fb      	ldrb	r3, [r7, #7]
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d113      	bne.n	80060e2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060be:	f043 0220 	orr.w	r2, r3, #32
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2220      	movs	r2, #32
 80060ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2200      	movs	r2, #0
 80060d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2200      	movs	r2, #0
 80060da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	e00f      	b.n	8006102 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	699a      	ldr	r2, [r3, #24]
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	4013      	ands	r3, r2
 80060ec:	68ba      	ldr	r2, [r7, #8]
 80060ee:	429a      	cmp	r2, r3
 80060f0:	bf0c      	ite	eq
 80060f2:	2301      	moveq	r3, #1
 80060f4:	2300      	movne	r3, #0
 80060f6:	b2db      	uxtb	r3, r3
 80060f8:	461a      	mov	r2, r3
 80060fa:	79fb      	ldrb	r3, [r7, #7]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d0b4      	beq.n	800606a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006100:	2300      	movs	r3, #0
}
 8006102:	4618      	mov	r0, r3
 8006104:	3710      	adds	r7, #16
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}

0800610a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800610a:	b580      	push	{r7, lr}
 800610c:	b084      	sub	sp, #16
 800610e:	af00      	add	r7, sp, #0
 8006110:	60f8      	str	r0, [r7, #12]
 8006112:	60b9      	str	r1, [r7, #8]
 8006114:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006116:	e033      	b.n	8006180 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	68b9      	ldr	r1, [r7, #8]
 800611c:	68f8      	ldr	r0, [r7, #12]
 800611e:	f000 f87f 	bl	8006220 <I2C_IsErrorOccurred>
 8006122:	4603      	mov	r3, r0
 8006124:	2b00      	cmp	r3, #0
 8006126:	d001      	beq.n	800612c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006128:	2301      	movs	r3, #1
 800612a:	e031      	b.n	8006190 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006132:	d025      	beq.n	8006180 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006134:	f7fc fed8 	bl	8002ee8 <HAL_GetTick>
 8006138:	4602      	mov	r2, r0
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	1ad3      	subs	r3, r2, r3
 800613e:	68ba      	ldr	r2, [r7, #8]
 8006140:	429a      	cmp	r2, r3
 8006142:	d302      	bcc.n	800614a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d11a      	bne.n	8006180 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	699b      	ldr	r3, [r3, #24]
 8006150:	f003 0302 	and.w	r3, r3, #2
 8006154:	2b02      	cmp	r3, #2
 8006156:	d013      	beq.n	8006180 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800615c:	f043 0220 	orr.w	r2, r3, #32
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2220      	movs	r2, #32
 8006168:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2200      	movs	r2, #0
 8006170:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2200      	movs	r2, #0
 8006178:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800617c:	2301      	movs	r3, #1
 800617e:	e007      	b.n	8006190 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	699b      	ldr	r3, [r3, #24]
 8006186:	f003 0302 	and.w	r3, r3, #2
 800618a:	2b02      	cmp	r3, #2
 800618c:	d1c4      	bne.n	8006118 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800618e:	2300      	movs	r3, #0
}
 8006190:	4618      	mov	r0, r3
 8006192:	3710      	adds	r7, #16
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}

08006198 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b084      	sub	sp, #16
 800619c:	af00      	add	r7, sp, #0
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	60b9      	str	r1, [r7, #8]
 80061a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80061a4:	e02f      	b.n	8006206 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	68b9      	ldr	r1, [r7, #8]
 80061aa:	68f8      	ldr	r0, [r7, #12]
 80061ac:	f000 f838 	bl	8006220 <I2C_IsErrorOccurred>
 80061b0:	4603      	mov	r3, r0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d001      	beq.n	80061ba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e02d      	b.n	8006216 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061ba:	f7fc fe95 	bl	8002ee8 <HAL_GetTick>
 80061be:	4602      	mov	r2, r0
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	1ad3      	subs	r3, r2, r3
 80061c4:	68ba      	ldr	r2, [r7, #8]
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d302      	bcc.n	80061d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d11a      	bne.n	8006206 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	699b      	ldr	r3, [r3, #24]
 80061d6:	f003 0320 	and.w	r3, r3, #32
 80061da:	2b20      	cmp	r3, #32
 80061dc:	d013      	beq.n	8006206 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061e2:	f043 0220 	orr.w	r2, r3, #32
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2220      	movs	r2, #32
 80061ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2200      	movs	r2, #0
 80061f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	e007      	b.n	8006216 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	699b      	ldr	r3, [r3, #24]
 800620c:	f003 0320 	and.w	r3, r3, #32
 8006210:	2b20      	cmp	r3, #32
 8006212:	d1c8      	bne.n	80061a6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	3710      	adds	r7, #16
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}
	...

08006220 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b08a      	sub	sp, #40	@ 0x28
 8006224:	af00      	add	r7, sp, #0
 8006226:	60f8      	str	r0, [r7, #12]
 8006228:	60b9      	str	r1, [r7, #8]
 800622a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800622c:	2300      	movs	r3, #0
 800622e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	699b      	ldr	r3, [r3, #24]
 8006238:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800623a:	2300      	movs	r3, #0
 800623c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006242:	69bb      	ldr	r3, [r7, #24]
 8006244:	f003 0310 	and.w	r3, r3, #16
 8006248:	2b00      	cmp	r3, #0
 800624a:	d068      	beq.n	800631e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	2210      	movs	r2, #16
 8006252:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006254:	e049      	b.n	80062ea <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800625c:	d045      	beq.n	80062ea <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800625e:	f7fc fe43 	bl	8002ee8 <HAL_GetTick>
 8006262:	4602      	mov	r2, r0
 8006264:	69fb      	ldr	r3, [r7, #28]
 8006266:	1ad3      	subs	r3, r2, r3
 8006268:	68ba      	ldr	r2, [r7, #8]
 800626a:	429a      	cmp	r2, r3
 800626c:	d302      	bcc.n	8006274 <I2C_IsErrorOccurred+0x54>
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d13a      	bne.n	80062ea <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800627e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006286:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	699b      	ldr	r3, [r3, #24]
 800628e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006292:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006296:	d121      	bne.n	80062dc <I2C_IsErrorOccurred+0xbc>
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800629e:	d01d      	beq.n	80062dc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80062a0:	7cfb      	ldrb	r3, [r7, #19]
 80062a2:	2b20      	cmp	r3, #32
 80062a4:	d01a      	beq.n	80062dc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	685a      	ldr	r2, [r3, #4]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80062b4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80062b6:	f7fc fe17 	bl	8002ee8 <HAL_GetTick>
 80062ba:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80062bc:	e00e      	b.n	80062dc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80062be:	f7fc fe13 	bl	8002ee8 <HAL_GetTick>
 80062c2:	4602      	mov	r2, r0
 80062c4:	69fb      	ldr	r3, [r7, #28]
 80062c6:	1ad3      	subs	r3, r2, r3
 80062c8:	2b19      	cmp	r3, #25
 80062ca:	d907      	bls.n	80062dc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80062cc:	6a3b      	ldr	r3, [r7, #32]
 80062ce:	f043 0320 	orr.w	r3, r3, #32
 80062d2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80062d4:	2301      	movs	r3, #1
 80062d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80062da:	e006      	b.n	80062ea <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	699b      	ldr	r3, [r3, #24]
 80062e2:	f003 0320 	and.w	r3, r3, #32
 80062e6:	2b20      	cmp	r3, #32
 80062e8:	d1e9      	bne.n	80062be <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	699b      	ldr	r3, [r3, #24]
 80062f0:	f003 0320 	and.w	r3, r3, #32
 80062f4:	2b20      	cmp	r3, #32
 80062f6:	d003      	beq.n	8006300 <I2C_IsErrorOccurred+0xe0>
 80062f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d0aa      	beq.n	8006256 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006300:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006304:	2b00      	cmp	r3, #0
 8006306:	d103      	bne.n	8006310 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	2220      	movs	r2, #32
 800630e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006310:	6a3b      	ldr	r3, [r7, #32]
 8006312:	f043 0304 	orr.w	r3, r3, #4
 8006316:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	699b      	ldr	r3, [r3, #24]
 8006324:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006326:	69bb      	ldr	r3, [r7, #24]
 8006328:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800632c:	2b00      	cmp	r3, #0
 800632e:	d00b      	beq.n	8006348 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006330:	6a3b      	ldr	r3, [r7, #32]
 8006332:	f043 0301 	orr.w	r3, r3, #1
 8006336:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006340:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006348:	69bb      	ldr	r3, [r7, #24]
 800634a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800634e:	2b00      	cmp	r3, #0
 8006350:	d00b      	beq.n	800636a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006352:	6a3b      	ldr	r3, [r7, #32]
 8006354:	f043 0308 	orr.w	r3, r3, #8
 8006358:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006362:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006364:	2301      	movs	r3, #1
 8006366:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800636a:	69bb      	ldr	r3, [r7, #24]
 800636c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006370:	2b00      	cmp	r3, #0
 8006372:	d00b      	beq.n	800638c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006374:	6a3b      	ldr	r3, [r7, #32]
 8006376:	f043 0302 	orr.w	r3, r3, #2
 800637a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006384:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006386:	2301      	movs	r3, #1
 8006388:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800638c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006390:	2b00      	cmp	r3, #0
 8006392:	d01c      	beq.n	80063ce <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006394:	68f8      	ldr	r0, [r7, #12]
 8006396:	f7ff fe3b 	bl	8006010 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	6859      	ldr	r1, [r3, #4]
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	4b0d      	ldr	r3, [pc, #52]	@ (80063dc <I2C_IsErrorOccurred+0x1bc>)
 80063a6:	400b      	ands	r3, r1
 80063a8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80063ae:	6a3b      	ldr	r3, [r7, #32]
 80063b0:	431a      	orrs	r2, r3
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2220      	movs	r2, #32
 80063ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2200      	movs	r2, #0
 80063ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80063ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3728      	adds	r7, #40	@ 0x28
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}
 80063da:	bf00      	nop
 80063dc:	fe00e800 	.word	0xfe00e800

080063e0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b087      	sub	sp, #28
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	60f8      	str	r0, [r7, #12]
 80063e8:	607b      	str	r3, [r7, #4]
 80063ea:	460b      	mov	r3, r1
 80063ec:	817b      	strh	r3, [r7, #10]
 80063ee:	4613      	mov	r3, r2
 80063f0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80063f2:	897b      	ldrh	r3, [r7, #10]
 80063f4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80063f8:	7a7b      	ldrb	r3, [r7, #9]
 80063fa:	041b      	lsls	r3, r3, #16
 80063fc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006400:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006406:	6a3b      	ldr	r3, [r7, #32]
 8006408:	4313      	orrs	r3, r2
 800640a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800640e:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	685a      	ldr	r2, [r3, #4]
 8006416:	6a3b      	ldr	r3, [r7, #32]
 8006418:	0d5b      	lsrs	r3, r3, #21
 800641a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800641e:	4b08      	ldr	r3, [pc, #32]	@ (8006440 <I2C_TransferConfig+0x60>)
 8006420:	430b      	orrs	r3, r1
 8006422:	43db      	mvns	r3, r3
 8006424:	ea02 0103 	and.w	r1, r2, r3
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	697a      	ldr	r2, [r7, #20]
 800642e:	430a      	orrs	r2, r1
 8006430:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006432:	bf00      	nop
 8006434:	371c      	adds	r7, #28
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr
 800643e:	bf00      	nop
 8006440:	03ff63ff 	.word	0x03ff63ff

08006444 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006454:	b2db      	uxtb	r3, r3
 8006456:	2b20      	cmp	r3, #32
 8006458:	d138      	bne.n	80064cc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006460:	2b01      	cmp	r3, #1
 8006462:	d101      	bne.n	8006468 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006464:	2302      	movs	r3, #2
 8006466:	e032      	b.n	80064ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2201      	movs	r2, #1
 800646c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2224      	movs	r2, #36	@ 0x24
 8006474:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f022 0201 	bic.w	r2, r2, #1
 8006486:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006496:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	6819      	ldr	r1, [r3, #0]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	683a      	ldr	r2, [r7, #0]
 80064a4:	430a      	orrs	r2, r1
 80064a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f042 0201 	orr.w	r2, r2, #1
 80064b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2220      	movs	r2, #32
 80064bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80064c8:	2300      	movs	r3, #0
 80064ca:	e000      	b.n	80064ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80064cc:	2302      	movs	r3, #2
  }
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	370c      	adds	r7, #12
 80064d2:	46bd      	mov	sp, r7
 80064d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d8:	4770      	bx	lr

080064da <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80064da:	b480      	push	{r7}
 80064dc:	b085      	sub	sp, #20
 80064de:	af00      	add	r7, sp, #0
 80064e0:	6078      	str	r0, [r7, #4]
 80064e2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	2b20      	cmp	r3, #32
 80064ee:	d139      	bne.n	8006564 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	d101      	bne.n	80064fe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80064fa:	2302      	movs	r3, #2
 80064fc:	e033      	b.n	8006566 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2201      	movs	r2, #1
 8006502:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2224      	movs	r2, #36	@ 0x24
 800650a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f022 0201 	bic.w	r2, r2, #1
 800651c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800652c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	021b      	lsls	r3, r3, #8
 8006532:	68fa      	ldr	r2, [r7, #12]
 8006534:	4313      	orrs	r3, r2
 8006536:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	68fa      	ldr	r2, [r7, #12]
 800653e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	681a      	ldr	r2, [r3, #0]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f042 0201 	orr.w	r2, r2, #1
 800654e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2220      	movs	r2, #32
 8006554:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2200      	movs	r2, #0
 800655c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006560:	2300      	movs	r3, #0
 8006562:	e000      	b.n	8006566 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006564:	2302      	movs	r3, #2
  }
}
 8006566:	4618      	mov	r0, r3
 8006568:	3714      	adds	r7, #20
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr

08006572 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8006572:	b580      	push	{r7, lr}
 8006574:	b084      	sub	sp, #16
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800657a:	f7fc fcb5 	bl	8002ee8 <HAL_GetTick>
 800657e:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d101      	bne.n	800658a <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	e03b      	b.n	8006602 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2200      	movs	r2, #0
 800658e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2202      	movs	r2, #2
 8006596:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	68da      	ldr	r2, [r3, #12]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f022 0201 	bic.w	r2, r2, #1
 80065a8:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80065aa:	e00f      	b.n	80065cc <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 80065ac:	f7fc fc9c 	bl	8002ee8 <HAL_GetTick>
 80065b0:	4602      	mov	r2, r0
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	1ad3      	subs	r3, r2, r3
 80065b6:	2b05      	cmp	r3, #5
 80065b8:	d908      	bls.n	80065cc <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2240      	movs	r2, #64	@ 0x40
 80065be:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2203      	movs	r2, #3
 80065c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      return HAL_ERROR;
 80065c8:	2301      	movs	r3, #1
 80065ca:	e01a      	b.n	8006602 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	68db      	ldr	r3, [r3, #12]
 80065d2:	f003 0301 	and.w	r3, r3, #1
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d1e8      	bne.n	80065ac <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f000 fcd2 	bl	8006f84 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2200      	movs	r2, #0
 80065e4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2200      	movs	r2, #0
 80065f6:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2201      	movs	r2, #1
 80065fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006600:	2300      	movs	r3, #0
}
 8006602:	4618      	mov	r0, r3
 8006604:	3710      	adds	r7, #16
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}
	...

0800660c <HAL_MDMA_RegisterCallback>:
  * @param  CallbackID:           User Callback identifier
  * @param  pCallback:            pointer to callbacsk function.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_RegisterCallback(MDMA_HandleTypeDef *hmdma, HAL_MDMA_CallbackIDTypeDef CallbackID, void (* pCallback)(MDMA_HandleTypeDef *_hmdma))
{
 800660c:	b480      	push	{r7}
 800660e:	b087      	sub	sp, #28
 8006610:	af00      	add	r7, sp, #0
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	460b      	mov	r3, r1
 8006616:	607a      	str	r2, [r7, #4]
 8006618:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800661a:	2300      	movs	r3, #0
 800661c:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d101      	bne.n	8006628 <HAL_MDMA_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8006624:	2301      	movs	r3, #1
 8006626:	e044      	b.n	80066b2 <HAL_MDMA_RegisterCallback+0xa6>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800662e:	2b01      	cmp	r3, #1
 8006630:	d101      	bne.n	8006636 <HAL_MDMA_RegisterCallback+0x2a>
 8006632:	2302      	movs	r3, #2
 8006634:	e03d      	b.n	80066b2 <HAL_MDMA_RegisterCallback+0xa6>
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2201      	movs	r2, #1
 800663a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006644:	b2db      	uxtb	r3, r3
 8006646:	2b01      	cmp	r3, #1
 8006648:	d12a      	bne.n	80066a0 <HAL_MDMA_RegisterCallback+0x94>
  {
    switch (CallbackID)
 800664a:	7afb      	ldrb	r3, [r7, #11]
 800664c:	2b05      	cmp	r3, #5
 800664e:	d82a      	bhi.n	80066a6 <HAL_MDMA_RegisterCallback+0x9a>
 8006650:	a201      	add	r2, pc, #4	@ (adr r2, 8006658 <HAL_MDMA_RegisterCallback+0x4c>)
 8006652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006656:	bf00      	nop
 8006658:	08006671 	.word	0x08006671
 800665c:	08006679 	.word	0x08006679
 8006660:	08006681 	.word	0x08006681
 8006664:	08006689 	.word	0x08006689
 8006668:	08006691 	.word	0x08006691
 800666c:	08006699 	.word	0x08006699
    {
    case  HAL_MDMA_XFER_CPLT_CB_ID:
      hmdma->XferCpltCallback = pCallback;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	645a      	str	r2, [r3, #68]	@ 0x44
      break;
 8006676:	e017      	b.n	80066a8 <HAL_MDMA_RegisterCallback+0x9c>

    case  HAL_MDMA_XFER_BUFFERCPLT_CB_ID:
      hmdma->XferBufferCpltCallback = pCallback;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	649a      	str	r2, [r3, #72]	@ 0x48
      break;
 800667e:	e013      	b.n	80066a8 <HAL_MDMA_RegisterCallback+0x9c>

    case  HAL_MDMA_XFER_BLOCKCPLT_CB_ID:
      hmdma->XferBlockCpltCallback = pCallback;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	64da      	str	r2, [r3, #76]	@ 0x4c
      break;
 8006686:	e00f      	b.n	80066a8 <HAL_MDMA_RegisterCallback+0x9c>

    case  HAL_MDMA_XFER_REPBLOCKCPLT_CB_ID:
      hmdma->XferRepeatBlockCpltCallback = pCallback;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800668e:	e00b      	b.n	80066a8 <HAL_MDMA_RegisterCallback+0x9c>

    case  HAL_MDMA_XFER_ERROR_CB_ID:
      hmdma->XferErrorCallback = pCallback;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006696:	e007      	b.n	80066a8 <HAL_MDMA_RegisterCallback+0x9c>

    case  HAL_MDMA_XFER_ABORT_CB_ID:
      hmdma->XferAbortCallback = pCallback;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 800669e:	e003      	b.n	80066a8 <HAL_MDMA_RegisterCallback+0x9c>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 80066a0:	2301      	movs	r3, #1
 80066a2:	75fb      	strb	r3, [r7, #23]
 80066a4:	e000      	b.n	80066a8 <HAL_MDMA_RegisterCallback+0x9c>
      break;
 80066a6:	bf00      	nop
  }

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80066b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	371c      	adds	r7, #28
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr
 80066be:	bf00      	nop

080066c0 <HAL_MDMA_LinkedList_CreateNode>:
  * @param  pNodeConfig: Pointer to a MDMA_LinkNodeConfTypeDef structure that contains
  *               the configuration information for the specified MDMA Linked List Node.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_LinkedList_CreateNode(MDMA_LinkNodeTypeDef *pNode, MDMA_LinkNodeConfTypeDef *pNodeConfig)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b085      	sub	sp, #20
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	6039      	str	r1, [r7, #0]
  uint32_t addressMask;
  uint32_t blockoffset;

  /* Check the MDMA peripheral state */
  if((pNode == NULL) || (pNodeConfig == NULL))
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d002      	beq.n	80066d6 <HAL_MDMA_LinkedList_CreateNode+0x16>
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d101      	bne.n	80066da <HAL_MDMA_LinkedList_CreateNode+0x1a>
  {
    return HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	e0c8      	b.n	800686c <HAL_MDMA_LinkedList_CreateNode+0x1ac>
  assert_param(IS_MDMA_TRANSFER_LENGTH(pNodeConfig->BlockDataLength));
  assert_param(IS_MDMA_BLOCK_COUNT(pNodeConfig->BlockCount));


  /* Configure next Link node Address Register to zero */
  pNode->CLAR =  0;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2200      	movs	r2, #0
 80066de:	615a      	str	r2, [r3, #20]

  /* Configure the Link Node registers*/
  pNode->CTBR   = 0;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	619a      	str	r2, [r3, #24]
  pNode->CMAR   = 0;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2200      	movs	r2, #0
 80066ea:	621a      	str	r2, [r3, #32]
  pNode->CMDR   = 0;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2200      	movs	r2, #0
 80066f0:	625a      	str	r2, [r3, #36]	@ 0x24
  pNode->Reserved = 0;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2200      	movs	r2, #0
 80066f6:	61da      	str	r2, [r3, #28]

  /* Write new CTCR Register value */
  pNode->CTCR =  pNodeConfig->Init.SourceInc | pNodeConfig->Init.DestinationInc | \
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	691a      	ldr	r2, [r3, #16]
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	695b      	ldr	r3, [r3, #20]
 8006700:	431a      	orrs	r2, r3
    pNodeConfig->Init.SourceDataSize | pNodeConfig->Init.DestDataSize           | \
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	699b      	ldr	r3, [r3, #24]
  pNode->CTCR =  pNodeConfig->Init.SourceInc | pNodeConfig->Init.DestinationInc | \
 8006706:	431a      	orrs	r2, r3
    pNodeConfig->Init.SourceDataSize | pNodeConfig->Init.DestDataSize           | \
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	69db      	ldr	r3, [r3, #28]
 800670c:	431a      	orrs	r2, r3
      pNodeConfig->Init.DataAlignment| pNodeConfig->Init.SourceBurst            | \
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	6a1b      	ldr	r3, [r3, #32]
    pNodeConfig->Init.SourceDataSize | pNodeConfig->Init.DestDataSize           | \
 8006712:	431a      	orrs	r2, r3
      pNodeConfig->Init.DataAlignment| pNodeConfig->Init.SourceBurst            | \
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006718:	431a      	orrs	r2, r3
        pNodeConfig->Init.DestBurst                                             | \
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      pNodeConfig->Init.DataAlignment| pNodeConfig->Init.SourceBurst            | \
 800671e:	431a      	orrs	r2, r3
          ((pNodeConfig->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006724:	3b01      	subs	r3, #1
 8006726:	049b      	lsls	r3, r3, #18
        pNodeConfig->Init.DestBurst                                             | \
 8006728:	431a      	orrs	r2, r3
            pNodeConfig->Init.TransferTriggerMode;
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	685b      	ldr	r3, [r3, #4]
          ((pNodeConfig->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800672e:	431a      	orrs	r2, r3
  pNode->CTCR =  pNodeConfig->Init.SourceInc | pNodeConfig->Init.DestinationInc | \
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	601a      	str	r2, [r3, #0]

  /* If SW request set the CTCR register to SW Request Mode*/
  if(pNodeConfig->Init.Request == MDMA_REQUEST_SW)
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800673c:	d105      	bne.n	800674a <HAL_MDMA_LinkedList_CreateNode+0x8a>
  {
    pNode->CTCR |= MDMA_CTCR_SWRM;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	601a      	str	r2, [r3, #0]
  -If the request is done by SW : BWM could be set to 1 or 0.
  -If the request is done by a peripheral :
     If mask address not set (0) => BWM must be set to 0
     If mask address set (different than 0) => BWM could be set to 1 or 0
  */
  if((pNodeConfig->Init.Request == MDMA_REQUEST_SW) || (pNodeConfig->PostRequestMaskAddress != 0U))
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006752:	d003      	beq.n	800675c <HAL_MDMA_LinkedList_CreateNode+0x9c>
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006758:	2b00      	cmp	r3, #0
 800675a:	d005      	beq.n	8006768 <HAL_MDMA_LinkedList_CreateNode+0xa8>
  {
    pNode->CTCR |=  MDMA_CTCR_BWM;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	601a      	str	r2, [r3, #0]
  }

  /* Set the new CBNDTR Register value */
  pNode->CBNDTR = ((pNodeConfig->BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC;
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800676c:	3b01      	subs	r3, #1
 800676e:	051a      	lsls	r2, r3, #20
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	605a      	str	r2, [r3, #4]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(pNodeConfig->Init.SourceBlockAddressOffset < 0)
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006778:	2b00      	cmp	r3, #0
 800677a:	da0e      	bge.n	800679a <HAL_MDMA_LinkedList_CreateNode+0xda>
  {
    pNode->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	605a      	str	r2, [r3, #4]
    /*write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- pNodeConfig->Init.SourceBlockAddressOffset);
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800678c:	425b      	negs	r3, r3
 800678e:	60fb      	str	r3, [r7, #12]
    pNode->CBRUR = blockoffset & 0x0000FFFFU;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	b29a      	uxth	r2, r3
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	611a      	str	r2, [r3, #16]
 8006798:	e004      	b.n	80067a4 <HAL_MDMA_LinkedList_CreateNode+0xe4>
  }
  else
  {
    /*write new CBRUR Register value : source repeat block offset */
    pNode->CBRUR = (((uint32_t) pNodeConfig->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800679e:	b29a      	uxth	r2, r3
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	611a      	str	r2, [r3, #16]
  }

  /* if block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(pNodeConfig->Init.DestBlockAddressOffset < 0)
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	da11      	bge.n	80067d0 <HAL_MDMA_LinkedList_CreateNode+0x110>
  {
    pNode->CBNDTR |= MDMA_CBNDTR_BRDUM;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	605a      	str	r2, [r3, #4]
    /*write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- pNodeConfig->Init.DestBlockAddressOffset);
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067bc:	425b      	negs	r3, r3
 80067be:	60fb      	str	r3, [r7, #12]
    pNode->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	691a      	ldr	r2, [r3, #16]
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	041b      	lsls	r3, r3, #16
 80067c8:	431a      	orrs	r2, r3
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	611a      	str	r2, [r3, #16]
 80067ce:	e007      	b.n	80067e0 <HAL_MDMA_LinkedList_CreateNode+0x120>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    pNode->CBRUR |= ((((uint32_t)pNodeConfig->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	691a      	ldr	r2, [r3, #16]
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067d8:	041b      	lsls	r3, r3, #16
 80067da:	431a      	orrs	r2, r3
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	611a      	str	r2, [r3, #16]
  }

  /* Configure MDMA Link Node data length */
  pNode->CBNDTR |=  pNodeConfig->BlockDataLength;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	685a      	ldr	r2, [r3, #4]
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067e8:	431a      	orrs	r2, r3
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	605a      	str	r2, [r3, #4]

  /* Configure MDMA Link Node destination address */
  pNode->CDAR = pNodeConfig->DstAddress;
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	60da      	str	r2, [r3, #12]

  /* Configure MDMA Link Node Source address */
  pNode->CSAR = pNodeConfig->SrcAddress;
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	609a      	str	r2, [r3, #8]

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData,  */
  if(pNodeConfig->Init.Request != MDMA_REQUEST_SW)
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006806:	d00c      	beq.n	8006822 <HAL_MDMA_LinkedList_CreateNode+0x162>
  {
    /* Set the HW request in CTBR register  */
    pNode->CTBR = pNodeConfig->Init.Request & MDMA_CTBR_TSEL;
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	b2da      	uxtb	r2, r3
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	619a      	str	r2, [r3, #24]
    /* Set the HW request clear Mask and Data */
    pNode->CMAR = pNodeConfig->PostRequestMaskAddress;
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	621a      	str	r2, [r3, #32]
    pNode->CMDR = pNodeConfig->PostRequestMaskData;
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  addressMask = pNodeConfig->SrcAddress & 0xFF000000U;
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006826:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800682a:	60bb      	str	r3, [r7, #8]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006832:	d002      	beq.n	800683a <HAL_MDMA_LinkedList_CreateNode+0x17a>
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d105      	bne.n	8006846 <HAL_MDMA_LinkedList_CreateNode+0x186>
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    pNode->CTBR |= MDMA_CTBR_SBUS;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	699b      	ldr	r3, [r3, #24]
 800683e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	619a      	str	r2, [r3, #24]
  }

  addressMask = pNodeConfig->DstAddress & 0xFF000000U;
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800684a:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800684e:	60bb      	str	r3, [r7, #8]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006856:	d002      	beq.n	800685e <HAL_MDMA_LinkedList_CreateNode+0x19e>
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d105      	bne.n	800686a <HAL_MDMA_LinkedList_CreateNode+0x1aa>
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    pNode->CTBR |= MDMA_CTBR_DBUS;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	699b      	ldr	r3, [r3, #24]
 8006862:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	619a      	str	r2, [r3, #24]
  }

  return HAL_OK;
 800686a:	2300      	movs	r3, #0
}
 800686c:	4618      	mov	r0, r3
 800686e:	3714      	adds	r7, #20
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr

08006878 <HAL_MDMA_LinkedList_AddNode>:
  *                    at the end of the list
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_LinkedList_AddNode(MDMA_HandleTypeDef *hmdma, MDMA_LinkNodeTypeDef *pNewNode, const MDMA_LinkNodeTypeDef *pPrevNode)
{
 8006878:	b480      	push	{r7}
 800687a:	b089      	sub	sp, #36	@ 0x24
 800687c:	af00      	add	r7, sp, #0
 800687e:	60f8      	str	r0, [r7, #12]
 8006880:	60b9      	str	r1, [r7, #8]
 8006882:	607a      	str	r2, [r7, #4]
  MDMA_LinkNodeTypeDef *pNode;
  uint32_t counter = 0, nodeInserted = 0;
 8006884:	2300      	movs	r3, #0
 8006886:	61bb      	str	r3, [r7, #24]
 8006888:	2300      	movs	r3, #0
 800688a:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800688c:	2300      	movs	r3, #0
 800688e:	74fb      	strb	r3, [r7, #19]

  /* Check the MDMA peripheral handle */
  if((hmdma == NULL) || (pNewNode == NULL))
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d002      	beq.n	800689c <HAL_MDMA_LinkedList_AddNode+0x24>
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d101      	bne.n	80068a0 <HAL_MDMA_LinkedList_AddNode+0x28>
  {
    return HAL_ERROR;
 800689c:	2301      	movs	r3, #1
 800689e:	e0a9      	b.n	80069f4 <HAL_MDMA_LinkedList_AddNode+0x17c>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	d101      	bne.n	80068ae <HAL_MDMA_LinkedList_AddNode+0x36>
 80068aa:	2302      	movs	r3, #2
 80068ac:	e0a2      	b.n	80069f4 <HAL_MDMA_LinkedList_AddNode+0x17c>
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2201      	movs	r2, #1
 80068b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	2b01      	cmp	r3, #1
 80068c0:	f040 8093 	bne.w	80069ea <HAL_MDMA_LinkedList_AddNode+0x172>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2202      	movs	r2, #2
 80068c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Check if this is the first node (after the Inititlization node) */
    if((uint32_t)hmdma->FirstLinkedListNodeAddress == 0U)
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d116      	bne.n	8006902 <HAL_MDMA_LinkedList_AddNode+0x8a>
    {
      if(pPrevNode == NULL)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d110      	bne.n	80068fc <HAL_MDMA_LinkedList_AddNode+0x84>
      {
        /* if this is the first node after the initialization
        connect this node to the node 0 by updating
        the MDMA channel CLAR register to this node address */
        hmdma->Instance->CLAR = (uint32_t)pNewNode;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	68ba      	ldr	r2, [r7, #8]
 80068e0:	625a      	str	r2, [r3, #36]	@ 0x24
        /* Set the MDMA handle First linked List node*/
        hmdma->FirstLinkedListNodeAddress = pNewNode;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	68ba      	ldr	r2, [r7, #8]
 80068e6:	65da      	str	r2, [r3, #92]	@ 0x5c

        /*reset New node link */
        pNewNode->CLAR = 0;
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	2200      	movs	r2, #0
 80068ec:	615a      	str	r2, [r3, #20]

        /* Update the Handle last node address */
        hmdma->LastLinkedListNodeAddress = pNewNode;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	68ba      	ldr	r2, [r7, #8]
 80068f2:	661a      	str	r2, [r3, #96]	@ 0x60

        hmdma->LinkedListNodeCounter = 1;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2201      	movs	r2, #1
 80068f8:	665a      	str	r2, [r3, #100]	@ 0x64
 80068fa:	e06c      	b.n	80069d6 <HAL_MDMA_LinkedList_AddNode+0x15e>
      }
      else
      {
        hal_status = HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	74fb      	strb	r3, [r7, #19]
 8006900:	e069      	b.n	80069d6 <HAL_MDMA_LinkedList_AddNode+0x15e>
      }
    }
    else if(hmdma->FirstLinkedListNodeAddress != pNewNode)
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006906:	68ba      	ldr	r2, [r7, #8]
 8006908:	429a      	cmp	r2, r3
 800690a:	d062      	beq.n	80069d2 <HAL_MDMA_LinkedList_AddNode+0x15a>
    {
      /* Check if the node to insert already exists*/
      pNode = hmdma->FirstLinkedListNodeAddress;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006910:	61fb      	str	r3, [r7, #28]
      while((counter < hmdma->LinkedListNodeCounter) && (hal_status == HAL_OK))
 8006912:	e00c      	b.n	800692e <HAL_MDMA_LinkedList_AddNode+0xb6>
      {
        if(pNode->CLAR == (uint32_t)pNewNode)
 8006914:	69fb      	ldr	r3, [r7, #28]
 8006916:	695a      	ldr	r2, [r3, #20]
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	429a      	cmp	r2, r3
 800691c:	d101      	bne.n	8006922 <HAL_MDMA_LinkedList_AddNode+0xaa>
        {
          hal_status = HAL_ERROR; /* error this node already exist in the linked list and it is not first node */
 800691e:	2301      	movs	r3, #1
 8006920:	74fb      	strb	r3, [r7, #19]
        }
        pNode = (MDMA_LinkNodeTypeDef *)pNode->CLAR;
 8006922:	69fb      	ldr	r3, [r7, #28]
 8006924:	695b      	ldr	r3, [r3, #20]
 8006926:	61fb      	str	r3, [r7, #28]
        counter++;
 8006928:	69bb      	ldr	r3, [r7, #24]
 800692a:	3301      	adds	r3, #1
 800692c:	61bb      	str	r3, [r7, #24]
      while((counter < hmdma->LinkedListNodeCounter) && (hal_status == HAL_OK))
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006932:	69ba      	ldr	r2, [r7, #24]
 8006934:	429a      	cmp	r2, r3
 8006936:	d202      	bcs.n	800693e <HAL_MDMA_LinkedList_AddNode+0xc6>
 8006938:	7cfb      	ldrb	r3, [r7, #19]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d0ea      	beq.n	8006914 <HAL_MDMA_LinkedList_AddNode+0x9c>
      }

      if(hal_status == HAL_OK)
 800693e:	7cfb      	ldrb	r3, [r7, #19]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d148      	bne.n	80069d6 <HAL_MDMA_LinkedList_AddNode+0x15e>
      {
        /* Check if the previous node is the last one in the current list or zero */
        if((pPrevNode == hmdma->LastLinkedListNodeAddress) || (pPrevNode == NULL))
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	429a      	cmp	r2, r3
 800694c:	d002      	beq.n	8006954 <HAL_MDMA_LinkedList_AddNode+0xdc>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d111      	bne.n	8006978 <HAL_MDMA_LinkedList_AddNode+0x100>
        {
          /* insert the new node at the end of the list */
          pNewNode->CLAR = hmdma->LastLinkedListNodeAddress->CLAR;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006958:	695a      	ldr	r2, [r3, #20]
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	615a      	str	r2, [r3, #20]
          hmdma->LastLinkedListNodeAddress->CLAR = (uint32_t)pNewNode;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006962:	68ba      	ldr	r2, [r7, #8]
 8006964:	615a      	str	r2, [r3, #20]
          /* Update the Handle last node address */
          hmdma->LastLinkedListNodeAddress = pNewNode;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	68ba      	ldr	r2, [r7, #8]
 800696a:	661a      	str	r2, [r3, #96]	@ 0x60
          /* Increment the linked list node counter */
          hmdma->LinkedListNodeCounter++;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006970:	1c5a      	adds	r2, r3, #1
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	665a      	str	r2, [r3, #100]	@ 0x64
 8006976:	e02e      	b.n	80069d6 <HAL_MDMA_LinkedList_AddNode+0x15e>
        }
        else
        {
          /*insert the new node after the pPreviousNode node */
          pNode = hmdma->FirstLinkedListNodeAddress;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800697c:	61fb      	str	r3, [r7, #28]
          counter = 0;
 800697e:	2300      	movs	r3, #0
 8006980:	61bb      	str	r3, [r7, #24]
          while((counter < hmdma->LinkedListNodeCounter) && (nodeInserted == 0U))
 8006982:	e018      	b.n	80069b6 <HAL_MDMA_LinkedList_AddNode+0x13e>
          {
            counter++;
 8006984:	69bb      	ldr	r3, [r7, #24]
 8006986:	3301      	adds	r3, #1
 8006988:	61bb      	str	r3, [r7, #24]
            if(pNode == pPrevNode)
 800698a:	69fa      	ldr	r2, [r7, #28]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	429a      	cmp	r2, r3
 8006990:	d10e      	bne.n	80069b0 <HAL_MDMA_LinkedList_AddNode+0x138>
            {
              /*Insert the new node after the previous one */
              pNewNode->CLAR = pNode->CLAR;
 8006992:	69fb      	ldr	r3, [r7, #28]
 8006994:	695a      	ldr	r2, [r3, #20]
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	615a      	str	r2, [r3, #20]
              pNode->CLAR = (uint32_t)pNewNode;
 800699a:	68ba      	ldr	r2, [r7, #8]
 800699c:	69fb      	ldr	r3, [r7, #28]
 800699e:	615a      	str	r2, [r3, #20]
              /* Increment the linked list node counter */
              hmdma->LinkedListNodeCounter++;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80069a4:	1c5a      	adds	r2, r3, #1
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	665a      	str	r2, [r3, #100]	@ 0x64
              nodeInserted = 1;
 80069aa:	2301      	movs	r3, #1
 80069ac:	617b      	str	r3, [r7, #20]
 80069ae:	e002      	b.n	80069b6 <HAL_MDMA_LinkedList_AddNode+0x13e>
            }
            else
            {
              pNode = (MDMA_LinkNodeTypeDef *)pNode->CLAR;
 80069b0:	69fb      	ldr	r3, [r7, #28]
 80069b2:	695b      	ldr	r3, [r3, #20]
 80069b4:	61fb      	str	r3, [r7, #28]
          while((counter < hmdma->LinkedListNodeCounter) && (nodeInserted == 0U))
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80069ba:	69ba      	ldr	r2, [r7, #24]
 80069bc:	429a      	cmp	r2, r3
 80069be:	d202      	bcs.n	80069c6 <HAL_MDMA_LinkedList_AddNode+0x14e>
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d0de      	beq.n	8006984 <HAL_MDMA_LinkedList_AddNode+0x10c>
            }
          }

          if(nodeInserted == 0U)
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d104      	bne.n	80069d6 <HAL_MDMA_LinkedList_AddNode+0x15e>
          {
            hal_status = HAL_ERROR;
 80069cc:	2301      	movs	r3, #1
 80069ce:	74fb      	strb	r3, [r7, #19]
 80069d0:	e001      	b.n	80069d6 <HAL_MDMA_LinkedList_AddNode+0x15e>
        }
      }
    }
    else
    {
      hal_status = HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	74fb      	strb	r3, [r7, #19]
    }

    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2200      	movs	r2, #0
 80069da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    hmdma->State = HAL_MDMA_STATE_READY;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2201      	movs	r2, #1
 80069e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return hal_status;
 80069e6:	7cfb      	ldrb	r3, [r7, #19]
 80069e8:	e004      	b.n	80069f4 <HAL_MDMA_LinkedList_AddNode+0x17c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2200      	movs	r2, #0
 80069ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Return error status */
    return HAL_BUSY;
 80069f2:	2302      	movs	r3, #2
  }
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3724      	adds	r7, #36	@ 0x24
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr

08006a00 <HAL_MDMA_LinkedList_EnableCircularMode>:
  * @param  hmdma : Pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_LinkedList_EnableCircularMode(MDMA_HandleTypeDef *hmdma)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b085      	sub	sp, #20
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	73fb      	strb	r3, [r7, #15]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d101      	bne.n	8006a16 <HAL_MDMA_LinkedList_EnableCircularMode+0x16>
  {
    return HAL_ERROR;
 8006a12:	2301      	movs	r3, #1
 8006a14:	e031      	b.n	8006a7a <HAL_MDMA_LinkedList_EnableCircularMode+0x7a>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d101      	bne.n	8006a24 <HAL_MDMA_LinkedList_EnableCircularMode+0x24>
 8006a20:	2302      	movs	r3, #2
 8006a22:	e02a      	b.n	8006a7a <HAL_MDMA_LinkedList_EnableCircularMode+0x7a>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2201      	movs	r2, #1
 8006a28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d117      	bne.n	8006a68 <HAL_MDMA_LinkedList_EnableCircularMode+0x68>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2202      	movs	r2, #2
 8006a3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* If first and last node are null (no nodes in the list) : return error*/
    if(((uint32_t)hmdma->FirstLinkedListNodeAddress == 0U) || ((uint32_t)hmdma->LastLinkedListNodeAddress == 0U) || (hmdma->LinkedListNodeCounter == 0U))
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d007      	beq.n	8006a58 <HAL_MDMA_LinkedList_EnableCircularMode+0x58>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d003      	beq.n	8006a58 <HAL_MDMA_LinkedList_EnableCircularMode+0x58>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d102      	bne.n	8006a5e <HAL_MDMA_LinkedList_EnableCircularMode+0x5e>
    {
      hal_status = HAL_ERROR;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	73fb      	strb	r3, [r7, #15]
 8006a5c:	e004      	b.n	8006a68 <HAL_MDMA_LinkedList_EnableCircularMode+0x68>
    }
    else
    {
      /* to enable circular mode Last Node should be connected to first node */
      hmdma->LastLinkedListNodeAddress->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a66:	615a      	str	r2, [r3, #20]
    }

  }
  /* Process unlocked */
  __HAL_UNLOCK(hmdma);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  hmdma->State = HAL_MDMA_STATE_READY;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2201      	movs	r2, #1
 8006a74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return hal_status;
 8006a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3714      	adds	r7, #20
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a84:	4770      	bx	lr

08006a86 <HAL_MDMA_Start_IT>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount      : The number of a blocks to be transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Start_IT(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 8006a86:	b580      	push	{r7, lr}
 8006a88:	b086      	sub	sp, #24
 8006a8a:	af02      	add	r7, sp, #8
 8006a8c:	60f8      	str	r0, [r7, #12]
 8006a8e:	60b9      	str	r1, [r7, #8]
 8006a90:	607a      	str	r2, [r7, #4]
 8006a92:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_MDMA_TRANSFER_LENGTH(BlockDataLength));
  assert_param(IS_MDMA_BLOCK_COUNT(BlockCount));

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d101      	bne.n	8006a9e <HAL_MDMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	e070      	b.n	8006b80 <HAL_MDMA_Start_IT+0xfa>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d101      	bne.n	8006aac <HAL_MDMA_Start_IT+0x26>
 8006aa8:	2302      	movs	r3, #2
 8006aaa:	e069      	b.n	8006b80 <HAL_MDMA_Start_IT+0xfa>
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006aba:	b2db      	uxtb	r3, r3
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d158      	bne.n	8006b72 <HAL_MDMA_Start_IT+0xec>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2202      	movs	r2, #2
 8006ac4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Initialize the error code */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2200      	movs	r2, #0
 8006acc:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Disable the peripheral */
    __HAL_MDMA_DISABLE(hmdma);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	68da      	ldr	r2, [r3, #12]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f022 0201 	bic.w	r2, r2, #1
 8006adc:	60da      	str	r2, [r3, #12]

    /* Configure the source, destination address and the data length */
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
 8006ade:	69bb      	ldr	r3, [r7, #24]
 8006ae0:	9300      	str	r3, [sp, #0]
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	68b9      	ldr	r1, [r7, #8]
 8006ae8:	68f8      	ldr	r0, [r7, #12]
 8006aea:	f000 f9db 	bl	8006ea4 <MDMA_SetConfig>

    /* Enable Common interrupts i.e Transfer Error IT and Channel Transfer Complete IT*/
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	68da      	ldr	r2, [r3, #12]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f042 0206 	orr.w	r2, r2, #6
 8006afc:	60da      	str	r2, [r3, #12]

    if(hmdma->XferBlockCpltCallback != NULL)
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d007      	beq.n	8006b16 <HAL_MDMA_Start_IT+0x90>
    {
      /* if Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	68da      	ldr	r2, [r3, #12]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f042 0210 	orr.w	r2, r2, #16
 8006b14:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d007      	beq.n	8006b2e <HAL_MDMA_Start_IT+0xa8>
    {
      /* if Repeated Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	68da      	ldr	r2, [r3, #12]
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f042 0208 	orr.w	r2, r2, #8
 8006b2c:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferBufferCpltCallback != NULL)
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d007      	beq.n	8006b46 <HAL_MDMA_Start_IT+0xc0>
    {
      /* if buffer transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	68da      	ldr	r2, [r3, #12]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f042 0220 	orr.w	r2, r2, #32
 8006b44:	60da      	str	r2, [r3, #12]
    }

    /* Enable the Peripheral */
    __HAL_MDMA_ENABLE(hmdma);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	68da      	ldr	r2, [r3, #12]
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f042 0201 	orr.w	r2, r2, #1
 8006b54:	60da      	str	r2, [r3, #12]

    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b5e:	d10e      	bne.n	8006b7e <HAL_MDMA_Start_IT+0xf8>
    {
      /* activate If SW request mode*/
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	68da      	ldr	r2, [r3, #12]
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8006b6e:	60da      	str	r2, [r3, #12]
 8006b70:	e005      	b.n	8006b7e <HAL_MDMA_Start_IT+0xf8>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2200      	movs	r2, #0
 8006b76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Return error status */
    return HAL_BUSY;
 8006b7a:	2302      	movs	r3, #2
 8006b7c:	e000      	b.n	8006b80 <HAL_MDMA_Start_IT+0xfa>
  }

  return HAL_OK;
 8006b7e:	2300      	movs	r3, #0
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3710      	adds	r7, #16
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <HAL_MDMA_GenerateSWRequest>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_GenerateSWRequest(MDMA_HandleTypeDef *hmdma)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b085      	sub	sp, #20
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  uint32_t request_mode;

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d101      	bne.n	8006b9a <HAL_MDMA_GenerateSWRequest+0x12>
  {
    return HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	e02a      	b.n	8006bf0 <HAL_MDMA_GenerateSWRequest+0x68>
  }

  /* Get the softawre request mode */
  request_mode = hmdma->Instance->CTCR & MDMA_CTCR_SWRM;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	691b      	ldr	r3, [r3, #16]
 8006ba0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006ba4:	60fb      	str	r3, [r7, #12]

  if((hmdma->Instance->CCR &  MDMA_CCR_EN) == 0U)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	68db      	ldr	r3, [r3, #12]
 8006bac:	f003 0301 	and.w	r3, r3, #1
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d104      	bne.n	8006bbe <HAL_MDMA_GenerateSWRequest+0x36>
  {
    /* if no Transfer on going (MDMA enable bit not set) return error */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2280      	movs	r2, #128	@ 0x80
 8006bb8:	669a      	str	r2, [r3, #104]	@ 0x68

    return HAL_ERROR;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e018      	b.n	8006bf0 <HAL_MDMA_GenerateSWRequest+0x68>
  }
  else if(((hmdma->Instance->CISR &  MDMA_CISR_CRQA) != 0U) || (request_mode == 0U))
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d102      	bne.n	8006bd2 <HAL_MDMA_GenerateSWRequest+0x4a>
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d105      	bne.n	8006bde <HAL_MDMA_GenerateSWRequest+0x56>
  {
    /* if an MDMA ongoing request has not yet end or if request mode is not SW request return error */
    hmdma->ErrorCode = HAL_MDMA_ERROR_BUSY;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006bd8:	669a      	str	r2, [r3, #104]	@ 0x68

    return HAL_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	e008      	b.n	8006bf0 <HAL_MDMA_GenerateSWRequest+0x68>
  }
  else
  {
    /* Set the SW request bit to activate the request on the Channel */
    hmdma->Instance->CCR |= MDMA_CCR_SWRQ;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	68da      	ldr	r2, [r3, #12]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8006bec:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006bee:	2300      	movs	r3, #0
  }
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3714      	adds	r7, #20
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr

08006bfc <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b086      	sub	sp, #24
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 8006c04:	2300      	movs	r3, #0
 8006c06:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006c08:	4b91      	ldr	r3, [pc, #580]	@ (8006e50 <HAL_MDMA_IRQHandler+0x254>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a91      	ldr	r2, [pc, #580]	@ (8006e54 <HAL_MDMA_IRQHandler+0x258>)
 8006c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c12:	0a9b      	lsrs	r3, r3, #10
 8006c14:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	4b8e      	ldr	r3, [pc, #568]	@ (8006e58 <HAL_MDMA_IRQHandler+0x25c>)
 8006c1e:	4413      	add	r3, r2
 8006c20:	099b      	lsrs	r3, r3, #6
 8006c22:	f003 031f 	and.w	r3, r3, #31
 8006c26:	2201      	movs	r2, #1
 8006c28:	fa02 f303 	lsl.w	r3, r2, r3
 8006c2c:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8006c2e:	f04f 43a4 	mov.w	r3, #1375731712	@ 0x52000000
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	4013      	ands	r3, r2
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	f000 812d 	beq.w	8006e98 <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f003 0301 	and.w	r3, r3, #1
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d054      	beq.n	8006cf6 <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	68db      	ldr	r3, [r3, #12]
 8006c52:	f003 0302 	and.w	r3, r3, #2
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d04d      	beq.n	8006cf6 <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	68da      	ldr	r2, [r3, #12]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f022 0202 	bic.w	r2, r2, #2
 8006c68:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d106      	bne.n	8006c8a <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006c80:	f043 0201 	orr.w	r2, r3, #1
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	669a      	str	r2, [r3, #104]	@ 0x68
 8006c88:	e005      	b.n	8006c96 <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006c8e:	f043 0202 	orr.w	r2, r3, #2
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d005      	beq.n	8006cac <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ca4:	f043 0204 	orr.w	r2, r3, #4
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d005      	beq.n	8006cc2 <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006cba:	f043 0208 	orr.w	r2, r3, #8
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d005      	beq.n	8006cd8 <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006cd0:	f043 0210 	orr.w	r2, r3, #16
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d005      	beq.n	8006cee <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ce6:	f043 0220 	orr.w	r2, r3, #32
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f003 0310 	and.w	r3, r3, #16
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d012      	beq.n	8006d2a <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	68db      	ldr	r3, [r3, #12]
 8006d0a:	f003 0320 	and.w	r3, r3, #32
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d00b      	beq.n	8006d2a <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	2210      	movs	r2, #16
 8006d18:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d003      	beq.n	8006d2a <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f003 0308 	and.w	r3, r3, #8
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d012      	beq.n	8006d5e <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	68db      	ldr	r3, [r3, #12]
 8006d3e:	f003 0310 	and.w	r3, r3, #16
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d00b      	beq.n	8006d5e <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	2208      	movs	r2, #8
 8006d4c:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d003      	beq.n	8006d5e <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f003 0304 	and.w	r3, r3, #4
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d012      	beq.n	8006d92 <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	68db      	ldr	r3, [r3, #12]
 8006d72:	f003 0308 	and.w	r3, r3, #8
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d00b      	beq.n	8006d92 <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	2204      	movs	r2, #4
 8006d80:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d003      	beq.n	8006d92 <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f003 0302 	and.w	r3, r3, #2
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d039      	beq.n	8006e14 <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	68db      	ldr	r3, [r3, #12]
 8006da6:	f003 0304 	and.w	r3, r3, #4
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d032      	beq.n	8006e14 <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	68da      	ldr	r2, [r3, #12]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 8006dbc:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006dc4:	b2db      	uxtb	r3, r3
 8006dc6:	2b04      	cmp	r3, #4
 8006dc8:	d110      	bne.n	8006dec <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        if(hmdma->XferAbortCallback != NULL)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d05c      	beq.n	8006e9c <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	4798      	blx	r3
        }
        return;
 8006dea:	e057      	b.n	8006e9c <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	2202      	movs	r2, #2
 8006df2:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2200      	movs	r2, #0
 8006df8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if(hmdma->XferCpltCallback != NULL)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d003      	beq.n	8006e14 <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d040      	beq.n	8006e9e <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2204      	movs	r2, #4
 8006e20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	68da      	ldr	r2, [r3, #12]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f022 0201 	bic.w	r2, r2, #1
 8006e32:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	3301      	adds	r3, #1
 8006e38:	60bb      	str	r3, [r7, #8]
 8006e3a:	697a      	ldr	r2, [r7, #20]
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	d30d      	bcc.n	8006e5c <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	68db      	ldr	r3, [r3, #12]
 8006e46:	f003 0301 	and.w	r3, r3, #1
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d1f2      	bne.n	8006e34 <HAL_MDMA_IRQHandler+0x238>
 8006e4e:	e006      	b.n	8006e5e <HAL_MDMA_IRQHandler+0x262>
 8006e50:	24000000 	.word	0x24000000
 8006e54:	1b4e81b5 	.word	0x1b4e81b5
 8006e58:	adffffc0 	.word	0xadffffc0
        break;
 8006e5c:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2200      	movs	r2, #0
 8006e62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	68db      	ldr	r3, [r3, #12]
 8006e6c:	f003 0301 	and.w	r3, r3, #1
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d004      	beq.n	8006e7e <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2203      	movs	r2, #3
 8006e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006e7c:	e003      	b.n	8006e86 <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2201      	movs	r2, #1
 8006e82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d007      	beq.n	8006e9e <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	4798      	blx	r3
 8006e96:	e002      	b.n	8006e9e <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 8006e98:	bf00      	nop
 8006e9a:	e000      	b.n	8006e9e <HAL_MDMA_IRQHandler+0x2a2>
        return;
 8006e9c:	bf00      	nop
    }
  }
}
 8006e9e:	3718      	adds	r7, #24
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <MDMA_SetConfig>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount: The number of blocks to be transferred
  * @retval HAL status
  */
static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b087      	sub	sp, #28
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	60f8      	str	r0, [r7, #12]
 8006eac:	60b9      	str	r1, [r7, #8]
 8006eae:	607a      	str	r2, [r7, #4]
 8006eb0:	603b      	str	r3, [r7, #0]
  uint32_t addressMask;

  /* Configure the MDMA Channel data length */
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	695a      	ldr	r2, [r3, #20]
 8006eb8:	4b31      	ldr	r3, [pc, #196]	@ (8006f80 <MDMA_SetConfig+0xdc>)
 8006eba:	4013      	ands	r3, r2
 8006ebc:	683a      	ldr	r2, [r7, #0]
 8006ebe:	f3c2 0110 	ubfx	r1, r2, #0, #17
 8006ec2:	68fa      	ldr	r2, [r7, #12]
 8006ec4:	6812      	ldr	r2, [r2, #0]
 8006ec6:	430b      	orrs	r3, r1
 8006ec8:	6153      	str	r3, [r2, #20]

  /* Configure the MDMA block repeat count */
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	695b      	ldr	r3, [r3, #20]
 8006ed0:	f3c3 0113 	ubfx	r1, r3, #0, #20
 8006ed4:	6a3b      	ldr	r3, [r7, #32]
 8006ed6:	3b01      	subs	r3, #1
 8006ed8:	051a      	lsls	r2, r3, #20
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	430a      	orrs	r2, r1
 8006ee0:	615a      	str	r2, [r3, #20]

  /* Clear all interrupt flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	221f      	movs	r2, #31
 8006ee8:	605a      	str	r2, [r3, #4]

  /* Configure MDMA Channel destination address */
  hmdma->Instance->CDAR = DstAddress;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	61da      	str	r2, [r3, #28]

  /* Configure MDMA Channel Source address */
  hmdma->Instance->CSAR = SrcAddress;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	68ba      	ldr	r2, [r7, #8]
 8006ef8:	619a      	str	r2, [r3, #24]

  addressMask = SrcAddress & 0xFF000000U;
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8006f00:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f08:	d002      	beq.n	8006f10 <MDMA_SetConfig+0x6c>
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d108      	bne.n	8006f22 <MDMA_SetConfig+0x7e>
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8006f1e:	629a      	str	r2, [r3, #40]	@ 0x28
 8006f20:	e007      	b.n	8006f32 <MDMA_SetConfig+0x8e>
  }
  else
  {
    /*The AXI bus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006f30:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  addressMask = DstAddress & 0xFF000000U;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8006f38:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f40:	d002      	beq.n	8006f48 <MDMA_SetConfig+0xa4>
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d108      	bne.n	8006f5a <MDMA_SetConfig+0xb6>
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8006f56:	629a      	str	r2, [r3, #40]	@ 0x28
 8006f58:	e007      	b.n	8006f6a <MDMA_SetConfig+0xc6>
  }
  else
  {
    /*The AXI bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8006f68:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Set the linked list register to the first node of the list */
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8006f74:	bf00      	nop
 8006f76:	371c      	adds	r7, #28
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr
 8006f80:	fffe0000 	.word	0xfffe0000

08006f84 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b085      	sub	sp, #20
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	68d9      	ldr	r1, [r3, #12]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	691a      	ldr	r2, [r3, #16]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	430a      	orrs	r2, r1
 8006f9a:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	695a      	ldr	r2, [r3, #20]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	699b      	ldr	r3, [r3, #24]
 8006fa4:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8006faa:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6a1b      	ldr	r3, [r3, #32]
 8006fb0:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8006fb6:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fbc:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8006fc2:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fc8:	3b01      	subs	r3, #1
 8006fca:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 8006fcc:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8006fd8:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8006fda:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fe4:	d107      	bne.n	8006ff6 <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	691a      	ldr	r2, [r3, #16]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 8006ff4:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007002:	2b00      	cmp	r3, #0
 8007004:	da11      	bge.n	800702a <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	695a      	ldr	r2, [r3, #20]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8007014:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800701a:	425b      	negs	r3, r3
 800701c:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	68fa      	ldr	r2, [r7, #12]
 8007024:	b292      	uxth	r2, r2
 8007026:	621a      	str	r2, [r3, #32]
 8007028:	e006      	b.n	8007038 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800702e:	461a      	mov	r2, r3
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	b292      	uxth	r2, r2
 8007036:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800703c:	2b00      	cmp	r3, #0
 800703e:	da15      	bge.n	800706c <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	695a      	ldr	r2, [r3, #20]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 800704e:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007054:	425b      	negs	r3, r3
 8007056:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	6a19      	ldr	r1, [r3, #32]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	041a      	lsls	r2, r3, #16
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	430a      	orrs	r2, r1
 8007068:	621a      	str	r2, [r3, #32]
 800706a:	e009      	b.n	8007080 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	6a19      	ldr	r1, [r3, #32]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007076:	041a      	lsls	r2, r3, #16
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	430a      	orrs	r2, r1
 800707e:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007088:	d006      	beq.n	8007098 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	685a      	ldr	r2, [r3, #4]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	b2d2      	uxtb	r2, r2
 8007094:	629a      	str	r2, [r3, #40]	@ 0x28
 8007096:	e003      	b.n	80070a0 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	2200      	movs	r2, #0
 800709e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	2200      	movs	r2, #0
 80070a6:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80070a8:	bf00      	nop
 80070aa:	3714      	adds	r7, #20
 80070ac:	46bd      	mov	sp, r7
 80070ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b2:	4770      	bx	lr

080070b4 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b084      	sub	sp, #16
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80070bc:	4b29      	ldr	r3, [pc, #164]	@ (8007164 <HAL_PWREx_ConfigSupply+0xb0>)
 80070be:	68db      	ldr	r3, [r3, #12]
 80070c0:	f003 0307 	and.w	r3, r3, #7
 80070c4:	2b06      	cmp	r3, #6
 80070c6:	d00a      	beq.n	80070de <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80070c8:	4b26      	ldr	r3, [pc, #152]	@ (8007164 <HAL_PWREx_ConfigSupply+0xb0>)
 80070ca:	68db      	ldr	r3, [r3, #12]
 80070cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	429a      	cmp	r2, r3
 80070d4:	d001      	beq.n	80070da <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80070d6:	2301      	movs	r3, #1
 80070d8:	e040      	b.n	800715c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80070da:	2300      	movs	r3, #0
 80070dc:	e03e      	b.n	800715c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80070de:	4b21      	ldr	r3, [pc, #132]	@ (8007164 <HAL_PWREx_ConfigSupply+0xb0>)
 80070e0:	68db      	ldr	r3, [r3, #12]
 80070e2:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80070e6:	491f      	ldr	r1, [pc, #124]	@ (8007164 <HAL_PWREx_ConfigSupply+0xb0>)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	4313      	orrs	r3, r2
 80070ec:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80070ee:	f7fb fefb 	bl	8002ee8 <HAL_GetTick>
 80070f2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80070f4:	e009      	b.n	800710a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80070f6:	f7fb fef7 	bl	8002ee8 <HAL_GetTick>
 80070fa:	4602      	mov	r2, r0
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	1ad3      	subs	r3, r2, r3
 8007100:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007104:	d901      	bls.n	800710a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	e028      	b.n	800715c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800710a:	4b16      	ldr	r3, [pc, #88]	@ (8007164 <HAL_PWREx_ConfigSupply+0xb0>)
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007112:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007116:	d1ee      	bne.n	80070f6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2b1e      	cmp	r3, #30
 800711c:	d008      	beq.n	8007130 <HAL_PWREx_ConfigSupply+0x7c>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2b2e      	cmp	r3, #46	@ 0x2e
 8007122:	d005      	beq.n	8007130 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2b1d      	cmp	r3, #29
 8007128:	d002      	beq.n	8007130 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2b2d      	cmp	r3, #45	@ 0x2d
 800712e:	d114      	bne.n	800715a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8007130:	f7fb feda 	bl	8002ee8 <HAL_GetTick>
 8007134:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8007136:	e009      	b.n	800714c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007138:	f7fb fed6 	bl	8002ee8 <HAL_GetTick>
 800713c:	4602      	mov	r2, r0
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	1ad3      	subs	r3, r2, r3
 8007142:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007146:	d901      	bls.n	800714c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8007148:	2301      	movs	r3, #1
 800714a:	e007      	b.n	800715c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800714c:	4b05      	ldr	r3, [pc, #20]	@ (8007164 <HAL_PWREx_ConfigSupply+0xb0>)
 800714e:	68db      	ldr	r3, [r3, #12]
 8007150:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007154:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007158:	d1ee      	bne.n	8007138 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800715a:	2300      	movs	r3, #0
}
 800715c:	4618      	mov	r0, r3
 800715e:	3710      	adds	r7, #16
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}
 8007164:	58024800 	.word	0x58024800

08007168 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b08c      	sub	sp, #48	@ 0x30
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d102      	bne.n	800717c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	f000 bc48 	b.w	8007a0c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f003 0301 	and.w	r3, r3, #1
 8007184:	2b00      	cmp	r3, #0
 8007186:	f000 8088 	beq.w	800729a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800718a:	4b99      	ldr	r3, [pc, #612]	@ (80073f0 <HAL_RCC_OscConfig+0x288>)
 800718c:	691b      	ldr	r3, [r3, #16]
 800718e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007192:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007194:	4b96      	ldr	r3, [pc, #600]	@ (80073f0 <HAL_RCC_OscConfig+0x288>)
 8007196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007198:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800719a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800719c:	2b10      	cmp	r3, #16
 800719e:	d007      	beq.n	80071b0 <HAL_RCC_OscConfig+0x48>
 80071a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071a2:	2b18      	cmp	r3, #24
 80071a4:	d111      	bne.n	80071ca <HAL_RCC_OscConfig+0x62>
 80071a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071a8:	f003 0303 	and.w	r3, r3, #3
 80071ac:	2b02      	cmp	r3, #2
 80071ae:	d10c      	bne.n	80071ca <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071b0:	4b8f      	ldr	r3, [pc, #572]	@ (80073f0 <HAL_RCC_OscConfig+0x288>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d06d      	beq.n	8007298 <HAL_RCC_OscConfig+0x130>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d169      	bne.n	8007298 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80071c4:	2301      	movs	r3, #1
 80071c6:	f000 bc21 	b.w	8007a0c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071d2:	d106      	bne.n	80071e2 <HAL_RCC_OscConfig+0x7a>
 80071d4:	4b86      	ldr	r3, [pc, #536]	@ (80073f0 <HAL_RCC_OscConfig+0x288>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a85      	ldr	r2, [pc, #532]	@ (80073f0 <HAL_RCC_OscConfig+0x288>)
 80071da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80071de:	6013      	str	r3, [r2, #0]
 80071e0:	e02e      	b.n	8007240 <HAL_RCC_OscConfig+0xd8>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d10c      	bne.n	8007204 <HAL_RCC_OscConfig+0x9c>
 80071ea:	4b81      	ldr	r3, [pc, #516]	@ (80073f0 <HAL_RCC_OscConfig+0x288>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a80      	ldr	r2, [pc, #512]	@ (80073f0 <HAL_RCC_OscConfig+0x288>)
 80071f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80071f4:	6013      	str	r3, [r2, #0]
 80071f6:	4b7e      	ldr	r3, [pc, #504]	@ (80073f0 <HAL_RCC_OscConfig+0x288>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a7d      	ldr	r2, [pc, #500]	@ (80073f0 <HAL_RCC_OscConfig+0x288>)
 80071fc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007200:	6013      	str	r3, [r2, #0]
 8007202:	e01d      	b.n	8007240 <HAL_RCC_OscConfig+0xd8>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800720c:	d10c      	bne.n	8007228 <HAL_RCC_OscConfig+0xc0>
 800720e:	4b78      	ldr	r3, [pc, #480]	@ (80073f0 <HAL_RCC_OscConfig+0x288>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a77      	ldr	r2, [pc, #476]	@ (80073f0 <HAL_RCC_OscConfig+0x288>)
 8007214:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007218:	6013      	str	r3, [r2, #0]
 800721a:	4b75      	ldr	r3, [pc, #468]	@ (80073f0 <HAL_RCC_OscConfig+0x288>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4a74      	ldr	r2, [pc, #464]	@ (80073f0 <HAL_RCC_OscConfig+0x288>)
 8007220:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007224:	6013      	str	r3, [r2, #0]
 8007226:	e00b      	b.n	8007240 <HAL_RCC_OscConfig+0xd8>
 8007228:	4b71      	ldr	r3, [pc, #452]	@ (80073f0 <HAL_RCC_OscConfig+0x288>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a70      	ldr	r2, [pc, #448]	@ (80073f0 <HAL_RCC_OscConfig+0x288>)
 800722e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007232:	6013      	str	r3, [r2, #0]
 8007234:	4b6e      	ldr	r3, [pc, #440]	@ (80073f0 <HAL_RCC_OscConfig+0x288>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a6d      	ldr	r2, [pc, #436]	@ (80073f0 <HAL_RCC_OscConfig+0x288>)
 800723a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800723e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d013      	beq.n	8007270 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007248:	f7fb fe4e 	bl	8002ee8 <HAL_GetTick>
 800724c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800724e:	e008      	b.n	8007262 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007250:	f7fb fe4a 	bl	8002ee8 <HAL_GetTick>
 8007254:	4602      	mov	r2, r0
 8007256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007258:	1ad3      	subs	r3, r2, r3
 800725a:	2b64      	cmp	r3, #100	@ 0x64
 800725c:	d901      	bls.n	8007262 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800725e:	2303      	movs	r3, #3
 8007260:	e3d4      	b.n	8007a0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007262:	4b63      	ldr	r3, [pc, #396]	@ (80073f0 <HAL_RCC_OscConfig+0x288>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800726a:	2b00      	cmp	r3, #0
 800726c:	d0f0      	beq.n	8007250 <HAL_RCC_OscConfig+0xe8>
 800726e:	e014      	b.n	800729a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007270:	f7fb fe3a 	bl	8002ee8 <HAL_GetTick>
 8007274:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007276:	e008      	b.n	800728a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007278:	f7fb fe36 	bl	8002ee8 <HAL_GetTick>
 800727c:	4602      	mov	r2, r0
 800727e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007280:	1ad3      	subs	r3, r2, r3
 8007282:	2b64      	cmp	r3, #100	@ 0x64
 8007284:	d901      	bls.n	800728a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007286:	2303      	movs	r3, #3
 8007288:	e3c0      	b.n	8007a0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800728a:	4b59      	ldr	r3, [pc, #356]	@ (80073f0 <HAL_RCC_OscConfig+0x288>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007292:	2b00      	cmp	r3, #0
 8007294:	d1f0      	bne.n	8007278 <HAL_RCC_OscConfig+0x110>
 8007296:	e000      	b.n	800729a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007298:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f003 0302 	and.w	r3, r3, #2
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	f000 80ca 	beq.w	800743c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80072a8:	4b51      	ldr	r3, [pc, #324]	@ (80073f0 <HAL_RCC_OscConfig+0x288>)
 80072aa:	691b      	ldr	r3, [r3, #16]
 80072ac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80072b0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80072b2:	4b4f      	ldr	r3, [pc, #316]	@ (80073f0 <HAL_RCC_OscConfig+0x288>)
 80072b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072b6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80072b8:	6a3b      	ldr	r3, [r7, #32]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d007      	beq.n	80072ce <HAL_RCC_OscConfig+0x166>
 80072be:	6a3b      	ldr	r3, [r7, #32]
 80072c0:	2b18      	cmp	r3, #24
 80072c2:	d156      	bne.n	8007372 <HAL_RCC_OscConfig+0x20a>
 80072c4:	69fb      	ldr	r3, [r7, #28]
 80072c6:	f003 0303 	and.w	r3, r3, #3
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d151      	bne.n	8007372 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80072ce:	4b48      	ldr	r3, [pc, #288]	@ (80073f0 <HAL_RCC_OscConfig+0x288>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f003 0304 	and.w	r3, r3, #4
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d005      	beq.n	80072e6 <HAL_RCC_OscConfig+0x17e>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	68db      	ldr	r3, [r3, #12]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d101      	bne.n	80072e6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80072e2:	2301      	movs	r3, #1
 80072e4:	e392      	b.n	8007a0c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80072e6:	4b42      	ldr	r3, [pc, #264]	@ (80073f0 <HAL_RCC_OscConfig+0x288>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f023 0219 	bic.w	r2, r3, #25
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	68db      	ldr	r3, [r3, #12]
 80072f2:	493f      	ldr	r1, [pc, #252]	@ (80073f0 <HAL_RCC_OscConfig+0x288>)
 80072f4:	4313      	orrs	r3, r2
 80072f6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072f8:	f7fb fdf6 	bl	8002ee8 <HAL_GetTick>
 80072fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80072fe:	e008      	b.n	8007312 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007300:	f7fb fdf2 	bl	8002ee8 <HAL_GetTick>
 8007304:	4602      	mov	r2, r0
 8007306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007308:	1ad3      	subs	r3, r2, r3
 800730a:	2b02      	cmp	r3, #2
 800730c:	d901      	bls.n	8007312 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800730e:	2303      	movs	r3, #3
 8007310:	e37c      	b.n	8007a0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007312:	4b37      	ldr	r3, [pc, #220]	@ (80073f0 <HAL_RCC_OscConfig+0x288>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f003 0304 	and.w	r3, r3, #4
 800731a:	2b00      	cmp	r3, #0
 800731c:	d0f0      	beq.n	8007300 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800731e:	f7fb fe13 	bl	8002f48 <HAL_GetREVID>
 8007322:	4603      	mov	r3, r0
 8007324:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007328:	4293      	cmp	r3, r2
 800732a:	d817      	bhi.n	800735c <HAL_RCC_OscConfig+0x1f4>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	691b      	ldr	r3, [r3, #16]
 8007330:	2b40      	cmp	r3, #64	@ 0x40
 8007332:	d108      	bne.n	8007346 <HAL_RCC_OscConfig+0x1de>
 8007334:	4b2e      	ldr	r3, [pc, #184]	@ (80073f0 <HAL_RCC_OscConfig+0x288>)
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800733c:	4a2c      	ldr	r2, [pc, #176]	@ (80073f0 <HAL_RCC_OscConfig+0x288>)
 800733e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007342:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007344:	e07a      	b.n	800743c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007346:	4b2a      	ldr	r3, [pc, #168]	@ (80073f0 <HAL_RCC_OscConfig+0x288>)
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	691b      	ldr	r3, [r3, #16]
 8007352:	031b      	lsls	r3, r3, #12
 8007354:	4926      	ldr	r1, [pc, #152]	@ (80073f0 <HAL_RCC_OscConfig+0x288>)
 8007356:	4313      	orrs	r3, r2
 8007358:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800735a:	e06f      	b.n	800743c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800735c:	4b24      	ldr	r3, [pc, #144]	@ (80073f0 <HAL_RCC_OscConfig+0x288>)
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	691b      	ldr	r3, [r3, #16]
 8007368:	061b      	lsls	r3, r3, #24
 800736a:	4921      	ldr	r1, [pc, #132]	@ (80073f0 <HAL_RCC_OscConfig+0x288>)
 800736c:	4313      	orrs	r3, r2
 800736e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007370:	e064      	b.n	800743c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	68db      	ldr	r3, [r3, #12]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d047      	beq.n	800740a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800737a:	4b1d      	ldr	r3, [pc, #116]	@ (80073f0 <HAL_RCC_OscConfig+0x288>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f023 0219 	bic.w	r2, r3, #25
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	68db      	ldr	r3, [r3, #12]
 8007386:	491a      	ldr	r1, [pc, #104]	@ (80073f0 <HAL_RCC_OscConfig+0x288>)
 8007388:	4313      	orrs	r3, r2
 800738a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800738c:	f7fb fdac 	bl	8002ee8 <HAL_GetTick>
 8007390:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007392:	e008      	b.n	80073a6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007394:	f7fb fda8 	bl	8002ee8 <HAL_GetTick>
 8007398:	4602      	mov	r2, r0
 800739a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800739c:	1ad3      	subs	r3, r2, r3
 800739e:	2b02      	cmp	r3, #2
 80073a0:	d901      	bls.n	80073a6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80073a2:	2303      	movs	r3, #3
 80073a4:	e332      	b.n	8007a0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80073a6:	4b12      	ldr	r3, [pc, #72]	@ (80073f0 <HAL_RCC_OscConfig+0x288>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f003 0304 	and.w	r3, r3, #4
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d0f0      	beq.n	8007394 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073b2:	f7fb fdc9 	bl	8002f48 <HAL_GetREVID>
 80073b6:	4603      	mov	r3, r0
 80073b8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80073bc:	4293      	cmp	r3, r2
 80073be:	d819      	bhi.n	80073f4 <HAL_RCC_OscConfig+0x28c>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	691b      	ldr	r3, [r3, #16]
 80073c4:	2b40      	cmp	r3, #64	@ 0x40
 80073c6:	d108      	bne.n	80073da <HAL_RCC_OscConfig+0x272>
 80073c8:	4b09      	ldr	r3, [pc, #36]	@ (80073f0 <HAL_RCC_OscConfig+0x288>)
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80073d0:	4a07      	ldr	r2, [pc, #28]	@ (80073f0 <HAL_RCC_OscConfig+0x288>)
 80073d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80073d6:	6053      	str	r3, [r2, #4]
 80073d8:	e030      	b.n	800743c <HAL_RCC_OscConfig+0x2d4>
 80073da:	4b05      	ldr	r3, [pc, #20]	@ (80073f0 <HAL_RCC_OscConfig+0x288>)
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	691b      	ldr	r3, [r3, #16]
 80073e6:	031b      	lsls	r3, r3, #12
 80073e8:	4901      	ldr	r1, [pc, #4]	@ (80073f0 <HAL_RCC_OscConfig+0x288>)
 80073ea:	4313      	orrs	r3, r2
 80073ec:	604b      	str	r3, [r1, #4]
 80073ee:	e025      	b.n	800743c <HAL_RCC_OscConfig+0x2d4>
 80073f0:	58024400 	.word	0x58024400
 80073f4:	4b9a      	ldr	r3, [pc, #616]	@ (8007660 <HAL_RCC_OscConfig+0x4f8>)
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	691b      	ldr	r3, [r3, #16]
 8007400:	061b      	lsls	r3, r3, #24
 8007402:	4997      	ldr	r1, [pc, #604]	@ (8007660 <HAL_RCC_OscConfig+0x4f8>)
 8007404:	4313      	orrs	r3, r2
 8007406:	604b      	str	r3, [r1, #4]
 8007408:	e018      	b.n	800743c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800740a:	4b95      	ldr	r3, [pc, #596]	@ (8007660 <HAL_RCC_OscConfig+0x4f8>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a94      	ldr	r2, [pc, #592]	@ (8007660 <HAL_RCC_OscConfig+0x4f8>)
 8007410:	f023 0301 	bic.w	r3, r3, #1
 8007414:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007416:	f7fb fd67 	bl	8002ee8 <HAL_GetTick>
 800741a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800741c:	e008      	b.n	8007430 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800741e:	f7fb fd63 	bl	8002ee8 <HAL_GetTick>
 8007422:	4602      	mov	r2, r0
 8007424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007426:	1ad3      	subs	r3, r2, r3
 8007428:	2b02      	cmp	r3, #2
 800742a:	d901      	bls.n	8007430 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800742c:	2303      	movs	r3, #3
 800742e:	e2ed      	b.n	8007a0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007430:	4b8b      	ldr	r3, [pc, #556]	@ (8007660 <HAL_RCC_OscConfig+0x4f8>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f003 0304 	and.w	r3, r3, #4
 8007438:	2b00      	cmp	r3, #0
 800743a:	d1f0      	bne.n	800741e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f003 0310 	and.w	r3, r3, #16
 8007444:	2b00      	cmp	r3, #0
 8007446:	f000 80a9 	beq.w	800759c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800744a:	4b85      	ldr	r3, [pc, #532]	@ (8007660 <HAL_RCC_OscConfig+0x4f8>)
 800744c:	691b      	ldr	r3, [r3, #16]
 800744e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007452:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007454:	4b82      	ldr	r3, [pc, #520]	@ (8007660 <HAL_RCC_OscConfig+0x4f8>)
 8007456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007458:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800745a:	69bb      	ldr	r3, [r7, #24]
 800745c:	2b08      	cmp	r3, #8
 800745e:	d007      	beq.n	8007470 <HAL_RCC_OscConfig+0x308>
 8007460:	69bb      	ldr	r3, [r7, #24]
 8007462:	2b18      	cmp	r3, #24
 8007464:	d13a      	bne.n	80074dc <HAL_RCC_OscConfig+0x374>
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	f003 0303 	and.w	r3, r3, #3
 800746c:	2b01      	cmp	r3, #1
 800746e:	d135      	bne.n	80074dc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007470:	4b7b      	ldr	r3, [pc, #492]	@ (8007660 <HAL_RCC_OscConfig+0x4f8>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007478:	2b00      	cmp	r3, #0
 800747a:	d005      	beq.n	8007488 <HAL_RCC_OscConfig+0x320>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	69db      	ldr	r3, [r3, #28]
 8007480:	2b80      	cmp	r3, #128	@ 0x80
 8007482:	d001      	beq.n	8007488 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007484:	2301      	movs	r3, #1
 8007486:	e2c1      	b.n	8007a0c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007488:	f7fb fd5e 	bl	8002f48 <HAL_GetREVID>
 800748c:	4603      	mov	r3, r0
 800748e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007492:	4293      	cmp	r3, r2
 8007494:	d817      	bhi.n	80074c6 <HAL_RCC_OscConfig+0x35e>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6a1b      	ldr	r3, [r3, #32]
 800749a:	2b20      	cmp	r3, #32
 800749c:	d108      	bne.n	80074b0 <HAL_RCC_OscConfig+0x348>
 800749e:	4b70      	ldr	r3, [pc, #448]	@ (8007660 <HAL_RCC_OscConfig+0x4f8>)
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80074a6:	4a6e      	ldr	r2, [pc, #440]	@ (8007660 <HAL_RCC_OscConfig+0x4f8>)
 80074a8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80074ac:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80074ae:	e075      	b.n	800759c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80074b0:	4b6b      	ldr	r3, [pc, #428]	@ (8007660 <HAL_RCC_OscConfig+0x4f8>)
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6a1b      	ldr	r3, [r3, #32]
 80074bc:	069b      	lsls	r3, r3, #26
 80074be:	4968      	ldr	r1, [pc, #416]	@ (8007660 <HAL_RCC_OscConfig+0x4f8>)
 80074c0:	4313      	orrs	r3, r2
 80074c2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80074c4:	e06a      	b.n	800759c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80074c6:	4b66      	ldr	r3, [pc, #408]	@ (8007660 <HAL_RCC_OscConfig+0x4f8>)
 80074c8:	68db      	ldr	r3, [r3, #12]
 80074ca:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6a1b      	ldr	r3, [r3, #32]
 80074d2:	061b      	lsls	r3, r3, #24
 80074d4:	4962      	ldr	r1, [pc, #392]	@ (8007660 <HAL_RCC_OscConfig+0x4f8>)
 80074d6:	4313      	orrs	r3, r2
 80074d8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80074da:	e05f      	b.n	800759c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	69db      	ldr	r3, [r3, #28]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d042      	beq.n	800756a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80074e4:	4b5e      	ldr	r3, [pc, #376]	@ (8007660 <HAL_RCC_OscConfig+0x4f8>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a5d      	ldr	r2, [pc, #372]	@ (8007660 <HAL_RCC_OscConfig+0x4f8>)
 80074ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074f0:	f7fb fcfa 	bl	8002ee8 <HAL_GetTick>
 80074f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80074f6:	e008      	b.n	800750a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80074f8:	f7fb fcf6 	bl	8002ee8 <HAL_GetTick>
 80074fc:	4602      	mov	r2, r0
 80074fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007500:	1ad3      	subs	r3, r2, r3
 8007502:	2b02      	cmp	r3, #2
 8007504:	d901      	bls.n	800750a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007506:	2303      	movs	r3, #3
 8007508:	e280      	b.n	8007a0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800750a:	4b55      	ldr	r3, [pc, #340]	@ (8007660 <HAL_RCC_OscConfig+0x4f8>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007512:	2b00      	cmp	r3, #0
 8007514:	d0f0      	beq.n	80074f8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007516:	f7fb fd17 	bl	8002f48 <HAL_GetREVID>
 800751a:	4603      	mov	r3, r0
 800751c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007520:	4293      	cmp	r3, r2
 8007522:	d817      	bhi.n	8007554 <HAL_RCC_OscConfig+0x3ec>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6a1b      	ldr	r3, [r3, #32]
 8007528:	2b20      	cmp	r3, #32
 800752a:	d108      	bne.n	800753e <HAL_RCC_OscConfig+0x3d6>
 800752c:	4b4c      	ldr	r3, [pc, #304]	@ (8007660 <HAL_RCC_OscConfig+0x4f8>)
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8007534:	4a4a      	ldr	r2, [pc, #296]	@ (8007660 <HAL_RCC_OscConfig+0x4f8>)
 8007536:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800753a:	6053      	str	r3, [r2, #4]
 800753c:	e02e      	b.n	800759c <HAL_RCC_OscConfig+0x434>
 800753e:	4b48      	ldr	r3, [pc, #288]	@ (8007660 <HAL_RCC_OscConfig+0x4f8>)
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6a1b      	ldr	r3, [r3, #32]
 800754a:	069b      	lsls	r3, r3, #26
 800754c:	4944      	ldr	r1, [pc, #272]	@ (8007660 <HAL_RCC_OscConfig+0x4f8>)
 800754e:	4313      	orrs	r3, r2
 8007550:	604b      	str	r3, [r1, #4]
 8007552:	e023      	b.n	800759c <HAL_RCC_OscConfig+0x434>
 8007554:	4b42      	ldr	r3, [pc, #264]	@ (8007660 <HAL_RCC_OscConfig+0x4f8>)
 8007556:	68db      	ldr	r3, [r3, #12]
 8007558:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6a1b      	ldr	r3, [r3, #32]
 8007560:	061b      	lsls	r3, r3, #24
 8007562:	493f      	ldr	r1, [pc, #252]	@ (8007660 <HAL_RCC_OscConfig+0x4f8>)
 8007564:	4313      	orrs	r3, r2
 8007566:	60cb      	str	r3, [r1, #12]
 8007568:	e018      	b.n	800759c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800756a:	4b3d      	ldr	r3, [pc, #244]	@ (8007660 <HAL_RCC_OscConfig+0x4f8>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a3c      	ldr	r2, [pc, #240]	@ (8007660 <HAL_RCC_OscConfig+0x4f8>)
 8007570:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007574:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007576:	f7fb fcb7 	bl	8002ee8 <HAL_GetTick>
 800757a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800757c:	e008      	b.n	8007590 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800757e:	f7fb fcb3 	bl	8002ee8 <HAL_GetTick>
 8007582:	4602      	mov	r2, r0
 8007584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007586:	1ad3      	subs	r3, r2, r3
 8007588:	2b02      	cmp	r3, #2
 800758a:	d901      	bls.n	8007590 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800758c:	2303      	movs	r3, #3
 800758e:	e23d      	b.n	8007a0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007590:	4b33      	ldr	r3, [pc, #204]	@ (8007660 <HAL_RCC_OscConfig+0x4f8>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007598:	2b00      	cmp	r3, #0
 800759a:	d1f0      	bne.n	800757e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f003 0308 	and.w	r3, r3, #8
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d036      	beq.n	8007616 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	695b      	ldr	r3, [r3, #20]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d019      	beq.n	80075e4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80075b0:	4b2b      	ldr	r3, [pc, #172]	@ (8007660 <HAL_RCC_OscConfig+0x4f8>)
 80075b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075b4:	4a2a      	ldr	r2, [pc, #168]	@ (8007660 <HAL_RCC_OscConfig+0x4f8>)
 80075b6:	f043 0301 	orr.w	r3, r3, #1
 80075ba:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075bc:	f7fb fc94 	bl	8002ee8 <HAL_GetTick>
 80075c0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80075c2:	e008      	b.n	80075d6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80075c4:	f7fb fc90 	bl	8002ee8 <HAL_GetTick>
 80075c8:	4602      	mov	r2, r0
 80075ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075cc:	1ad3      	subs	r3, r2, r3
 80075ce:	2b02      	cmp	r3, #2
 80075d0:	d901      	bls.n	80075d6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80075d2:	2303      	movs	r3, #3
 80075d4:	e21a      	b.n	8007a0c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80075d6:	4b22      	ldr	r3, [pc, #136]	@ (8007660 <HAL_RCC_OscConfig+0x4f8>)
 80075d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075da:	f003 0302 	and.w	r3, r3, #2
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d0f0      	beq.n	80075c4 <HAL_RCC_OscConfig+0x45c>
 80075e2:	e018      	b.n	8007616 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80075e4:	4b1e      	ldr	r3, [pc, #120]	@ (8007660 <HAL_RCC_OscConfig+0x4f8>)
 80075e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075e8:	4a1d      	ldr	r2, [pc, #116]	@ (8007660 <HAL_RCC_OscConfig+0x4f8>)
 80075ea:	f023 0301 	bic.w	r3, r3, #1
 80075ee:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075f0:	f7fb fc7a 	bl	8002ee8 <HAL_GetTick>
 80075f4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80075f6:	e008      	b.n	800760a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80075f8:	f7fb fc76 	bl	8002ee8 <HAL_GetTick>
 80075fc:	4602      	mov	r2, r0
 80075fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007600:	1ad3      	subs	r3, r2, r3
 8007602:	2b02      	cmp	r3, #2
 8007604:	d901      	bls.n	800760a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007606:	2303      	movs	r3, #3
 8007608:	e200      	b.n	8007a0c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800760a:	4b15      	ldr	r3, [pc, #84]	@ (8007660 <HAL_RCC_OscConfig+0x4f8>)
 800760c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800760e:	f003 0302 	and.w	r3, r3, #2
 8007612:	2b00      	cmp	r3, #0
 8007614:	d1f0      	bne.n	80075f8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f003 0320 	and.w	r3, r3, #32
 800761e:	2b00      	cmp	r3, #0
 8007620:	d039      	beq.n	8007696 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	699b      	ldr	r3, [r3, #24]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d01c      	beq.n	8007664 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800762a:	4b0d      	ldr	r3, [pc, #52]	@ (8007660 <HAL_RCC_OscConfig+0x4f8>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a0c      	ldr	r2, [pc, #48]	@ (8007660 <HAL_RCC_OscConfig+0x4f8>)
 8007630:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007634:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007636:	f7fb fc57 	bl	8002ee8 <HAL_GetTick>
 800763a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800763c:	e008      	b.n	8007650 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800763e:	f7fb fc53 	bl	8002ee8 <HAL_GetTick>
 8007642:	4602      	mov	r2, r0
 8007644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007646:	1ad3      	subs	r3, r2, r3
 8007648:	2b02      	cmp	r3, #2
 800764a:	d901      	bls.n	8007650 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800764c:	2303      	movs	r3, #3
 800764e:	e1dd      	b.n	8007a0c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007650:	4b03      	ldr	r3, [pc, #12]	@ (8007660 <HAL_RCC_OscConfig+0x4f8>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007658:	2b00      	cmp	r3, #0
 800765a:	d0f0      	beq.n	800763e <HAL_RCC_OscConfig+0x4d6>
 800765c:	e01b      	b.n	8007696 <HAL_RCC_OscConfig+0x52e>
 800765e:	bf00      	nop
 8007660:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007664:	4b9b      	ldr	r3, [pc, #620]	@ (80078d4 <HAL_RCC_OscConfig+0x76c>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a9a      	ldr	r2, [pc, #616]	@ (80078d4 <HAL_RCC_OscConfig+0x76c>)
 800766a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800766e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007670:	f7fb fc3a 	bl	8002ee8 <HAL_GetTick>
 8007674:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007676:	e008      	b.n	800768a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007678:	f7fb fc36 	bl	8002ee8 <HAL_GetTick>
 800767c:	4602      	mov	r2, r0
 800767e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007680:	1ad3      	subs	r3, r2, r3
 8007682:	2b02      	cmp	r3, #2
 8007684:	d901      	bls.n	800768a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8007686:	2303      	movs	r3, #3
 8007688:	e1c0      	b.n	8007a0c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800768a:	4b92      	ldr	r3, [pc, #584]	@ (80078d4 <HAL_RCC_OscConfig+0x76c>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007692:	2b00      	cmp	r3, #0
 8007694:	d1f0      	bne.n	8007678 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f003 0304 	and.w	r3, r3, #4
 800769e:	2b00      	cmp	r3, #0
 80076a0:	f000 8081 	beq.w	80077a6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80076a4:	4b8c      	ldr	r3, [pc, #560]	@ (80078d8 <HAL_RCC_OscConfig+0x770>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a8b      	ldr	r2, [pc, #556]	@ (80078d8 <HAL_RCC_OscConfig+0x770>)
 80076aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80076ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80076b0:	f7fb fc1a 	bl	8002ee8 <HAL_GetTick>
 80076b4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80076b6:	e008      	b.n	80076ca <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80076b8:	f7fb fc16 	bl	8002ee8 <HAL_GetTick>
 80076bc:	4602      	mov	r2, r0
 80076be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076c0:	1ad3      	subs	r3, r2, r3
 80076c2:	2b64      	cmp	r3, #100	@ 0x64
 80076c4:	d901      	bls.n	80076ca <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80076c6:	2303      	movs	r3, #3
 80076c8:	e1a0      	b.n	8007a0c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80076ca:	4b83      	ldr	r3, [pc, #524]	@ (80078d8 <HAL_RCC_OscConfig+0x770>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d0f0      	beq.n	80076b8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	689b      	ldr	r3, [r3, #8]
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d106      	bne.n	80076ec <HAL_RCC_OscConfig+0x584>
 80076de:	4b7d      	ldr	r3, [pc, #500]	@ (80078d4 <HAL_RCC_OscConfig+0x76c>)
 80076e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076e2:	4a7c      	ldr	r2, [pc, #496]	@ (80078d4 <HAL_RCC_OscConfig+0x76c>)
 80076e4:	f043 0301 	orr.w	r3, r3, #1
 80076e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80076ea:	e02d      	b.n	8007748 <HAL_RCC_OscConfig+0x5e0>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	689b      	ldr	r3, [r3, #8]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d10c      	bne.n	800770e <HAL_RCC_OscConfig+0x5a6>
 80076f4:	4b77      	ldr	r3, [pc, #476]	@ (80078d4 <HAL_RCC_OscConfig+0x76c>)
 80076f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076f8:	4a76      	ldr	r2, [pc, #472]	@ (80078d4 <HAL_RCC_OscConfig+0x76c>)
 80076fa:	f023 0301 	bic.w	r3, r3, #1
 80076fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8007700:	4b74      	ldr	r3, [pc, #464]	@ (80078d4 <HAL_RCC_OscConfig+0x76c>)
 8007702:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007704:	4a73      	ldr	r2, [pc, #460]	@ (80078d4 <HAL_RCC_OscConfig+0x76c>)
 8007706:	f023 0304 	bic.w	r3, r3, #4
 800770a:	6713      	str	r3, [r2, #112]	@ 0x70
 800770c:	e01c      	b.n	8007748 <HAL_RCC_OscConfig+0x5e0>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	2b05      	cmp	r3, #5
 8007714:	d10c      	bne.n	8007730 <HAL_RCC_OscConfig+0x5c8>
 8007716:	4b6f      	ldr	r3, [pc, #444]	@ (80078d4 <HAL_RCC_OscConfig+0x76c>)
 8007718:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800771a:	4a6e      	ldr	r2, [pc, #440]	@ (80078d4 <HAL_RCC_OscConfig+0x76c>)
 800771c:	f043 0304 	orr.w	r3, r3, #4
 8007720:	6713      	str	r3, [r2, #112]	@ 0x70
 8007722:	4b6c      	ldr	r3, [pc, #432]	@ (80078d4 <HAL_RCC_OscConfig+0x76c>)
 8007724:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007726:	4a6b      	ldr	r2, [pc, #428]	@ (80078d4 <HAL_RCC_OscConfig+0x76c>)
 8007728:	f043 0301 	orr.w	r3, r3, #1
 800772c:	6713      	str	r3, [r2, #112]	@ 0x70
 800772e:	e00b      	b.n	8007748 <HAL_RCC_OscConfig+0x5e0>
 8007730:	4b68      	ldr	r3, [pc, #416]	@ (80078d4 <HAL_RCC_OscConfig+0x76c>)
 8007732:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007734:	4a67      	ldr	r2, [pc, #412]	@ (80078d4 <HAL_RCC_OscConfig+0x76c>)
 8007736:	f023 0301 	bic.w	r3, r3, #1
 800773a:	6713      	str	r3, [r2, #112]	@ 0x70
 800773c:	4b65      	ldr	r3, [pc, #404]	@ (80078d4 <HAL_RCC_OscConfig+0x76c>)
 800773e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007740:	4a64      	ldr	r2, [pc, #400]	@ (80078d4 <HAL_RCC_OscConfig+0x76c>)
 8007742:	f023 0304 	bic.w	r3, r3, #4
 8007746:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	689b      	ldr	r3, [r3, #8]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d015      	beq.n	800777c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007750:	f7fb fbca 	bl	8002ee8 <HAL_GetTick>
 8007754:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007756:	e00a      	b.n	800776e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007758:	f7fb fbc6 	bl	8002ee8 <HAL_GetTick>
 800775c:	4602      	mov	r2, r0
 800775e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007760:	1ad3      	subs	r3, r2, r3
 8007762:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007766:	4293      	cmp	r3, r2
 8007768:	d901      	bls.n	800776e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800776a:	2303      	movs	r3, #3
 800776c:	e14e      	b.n	8007a0c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800776e:	4b59      	ldr	r3, [pc, #356]	@ (80078d4 <HAL_RCC_OscConfig+0x76c>)
 8007770:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007772:	f003 0302 	and.w	r3, r3, #2
 8007776:	2b00      	cmp	r3, #0
 8007778:	d0ee      	beq.n	8007758 <HAL_RCC_OscConfig+0x5f0>
 800777a:	e014      	b.n	80077a6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800777c:	f7fb fbb4 	bl	8002ee8 <HAL_GetTick>
 8007780:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007782:	e00a      	b.n	800779a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007784:	f7fb fbb0 	bl	8002ee8 <HAL_GetTick>
 8007788:	4602      	mov	r2, r0
 800778a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800778c:	1ad3      	subs	r3, r2, r3
 800778e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007792:	4293      	cmp	r3, r2
 8007794:	d901      	bls.n	800779a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8007796:	2303      	movs	r3, #3
 8007798:	e138      	b.n	8007a0c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800779a:	4b4e      	ldr	r3, [pc, #312]	@ (80078d4 <HAL_RCC_OscConfig+0x76c>)
 800779c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800779e:	f003 0302 	and.w	r3, r3, #2
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d1ee      	bne.n	8007784 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	f000 812d 	beq.w	8007a0a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80077b0:	4b48      	ldr	r3, [pc, #288]	@ (80078d4 <HAL_RCC_OscConfig+0x76c>)
 80077b2:	691b      	ldr	r3, [r3, #16]
 80077b4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80077b8:	2b18      	cmp	r3, #24
 80077ba:	f000 80bd 	beq.w	8007938 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077c2:	2b02      	cmp	r3, #2
 80077c4:	f040 809e 	bne.w	8007904 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80077c8:	4b42      	ldr	r3, [pc, #264]	@ (80078d4 <HAL_RCC_OscConfig+0x76c>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a41      	ldr	r2, [pc, #260]	@ (80078d4 <HAL_RCC_OscConfig+0x76c>)
 80077ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80077d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077d4:	f7fb fb88 	bl	8002ee8 <HAL_GetTick>
 80077d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80077da:	e008      	b.n	80077ee <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80077dc:	f7fb fb84 	bl	8002ee8 <HAL_GetTick>
 80077e0:	4602      	mov	r2, r0
 80077e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077e4:	1ad3      	subs	r3, r2, r3
 80077e6:	2b02      	cmp	r3, #2
 80077e8:	d901      	bls.n	80077ee <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80077ea:	2303      	movs	r3, #3
 80077ec:	e10e      	b.n	8007a0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80077ee:	4b39      	ldr	r3, [pc, #228]	@ (80078d4 <HAL_RCC_OscConfig+0x76c>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d1f0      	bne.n	80077dc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80077fa:	4b36      	ldr	r3, [pc, #216]	@ (80078d4 <HAL_RCC_OscConfig+0x76c>)
 80077fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80077fe:	4b37      	ldr	r3, [pc, #220]	@ (80078dc <HAL_RCC_OscConfig+0x774>)
 8007800:	4013      	ands	r3, r2
 8007802:	687a      	ldr	r2, [r7, #4]
 8007804:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8007806:	687a      	ldr	r2, [r7, #4]
 8007808:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800780a:	0112      	lsls	r2, r2, #4
 800780c:	430a      	orrs	r2, r1
 800780e:	4931      	ldr	r1, [pc, #196]	@ (80078d4 <HAL_RCC_OscConfig+0x76c>)
 8007810:	4313      	orrs	r3, r2
 8007812:	628b      	str	r3, [r1, #40]	@ 0x28
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007818:	3b01      	subs	r3, #1
 800781a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007822:	3b01      	subs	r3, #1
 8007824:	025b      	lsls	r3, r3, #9
 8007826:	b29b      	uxth	r3, r3
 8007828:	431a      	orrs	r2, r3
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800782e:	3b01      	subs	r3, #1
 8007830:	041b      	lsls	r3, r3, #16
 8007832:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007836:	431a      	orrs	r2, r3
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800783c:	3b01      	subs	r3, #1
 800783e:	061b      	lsls	r3, r3, #24
 8007840:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007844:	4923      	ldr	r1, [pc, #140]	@ (80078d4 <HAL_RCC_OscConfig+0x76c>)
 8007846:	4313      	orrs	r3, r2
 8007848:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800784a:	4b22      	ldr	r3, [pc, #136]	@ (80078d4 <HAL_RCC_OscConfig+0x76c>)
 800784c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800784e:	4a21      	ldr	r2, [pc, #132]	@ (80078d4 <HAL_RCC_OscConfig+0x76c>)
 8007850:	f023 0301 	bic.w	r3, r3, #1
 8007854:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007856:	4b1f      	ldr	r3, [pc, #124]	@ (80078d4 <HAL_RCC_OscConfig+0x76c>)
 8007858:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800785a:	4b21      	ldr	r3, [pc, #132]	@ (80078e0 <HAL_RCC_OscConfig+0x778>)
 800785c:	4013      	ands	r3, r2
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007862:	00d2      	lsls	r2, r2, #3
 8007864:	491b      	ldr	r1, [pc, #108]	@ (80078d4 <HAL_RCC_OscConfig+0x76c>)
 8007866:	4313      	orrs	r3, r2
 8007868:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800786a:	4b1a      	ldr	r3, [pc, #104]	@ (80078d4 <HAL_RCC_OscConfig+0x76c>)
 800786c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800786e:	f023 020c 	bic.w	r2, r3, #12
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007876:	4917      	ldr	r1, [pc, #92]	@ (80078d4 <HAL_RCC_OscConfig+0x76c>)
 8007878:	4313      	orrs	r3, r2
 800787a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800787c:	4b15      	ldr	r3, [pc, #84]	@ (80078d4 <HAL_RCC_OscConfig+0x76c>)
 800787e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007880:	f023 0202 	bic.w	r2, r3, #2
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007888:	4912      	ldr	r1, [pc, #72]	@ (80078d4 <HAL_RCC_OscConfig+0x76c>)
 800788a:	4313      	orrs	r3, r2
 800788c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800788e:	4b11      	ldr	r3, [pc, #68]	@ (80078d4 <HAL_RCC_OscConfig+0x76c>)
 8007890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007892:	4a10      	ldr	r2, [pc, #64]	@ (80078d4 <HAL_RCC_OscConfig+0x76c>)
 8007894:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007898:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800789a:	4b0e      	ldr	r3, [pc, #56]	@ (80078d4 <HAL_RCC_OscConfig+0x76c>)
 800789c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800789e:	4a0d      	ldr	r2, [pc, #52]	@ (80078d4 <HAL_RCC_OscConfig+0x76c>)
 80078a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80078a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80078a6:	4b0b      	ldr	r3, [pc, #44]	@ (80078d4 <HAL_RCC_OscConfig+0x76c>)
 80078a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078aa:	4a0a      	ldr	r2, [pc, #40]	@ (80078d4 <HAL_RCC_OscConfig+0x76c>)
 80078ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80078b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80078b2:	4b08      	ldr	r3, [pc, #32]	@ (80078d4 <HAL_RCC_OscConfig+0x76c>)
 80078b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078b6:	4a07      	ldr	r2, [pc, #28]	@ (80078d4 <HAL_RCC_OscConfig+0x76c>)
 80078b8:	f043 0301 	orr.w	r3, r3, #1
 80078bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80078be:	4b05      	ldr	r3, [pc, #20]	@ (80078d4 <HAL_RCC_OscConfig+0x76c>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a04      	ldr	r2, [pc, #16]	@ (80078d4 <HAL_RCC_OscConfig+0x76c>)
 80078c4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80078c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078ca:	f7fb fb0d 	bl	8002ee8 <HAL_GetTick>
 80078ce:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80078d0:	e011      	b.n	80078f6 <HAL_RCC_OscConfig+0x78e>
 80078d2:	bf00      	nop
 80078d4:	58024400 	.word	0x58024400
 80078d8:	58024800 	.word	0x58024800
 80078dc:	fffffc0c 	.word	0xfffffc0c
 80078e0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80078e4:	f7fb fb00 	bl	8002ee8 <HAL_GetTick>
 80078e8:	4602      	mov	r2, r0
 80078ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ec:	1ad3      	subs	r3, r2, r3
 80078ee:	2b02      	cmp	r3, #2
 80078f0:	d901      	bls.n	80078f6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80078f2:	2303      	movs	r3, #3
 80078f4:	e08a      	b.n	8007a0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80078f6:	4b47      	ldr	r3, [pc, #284]	@ (8007a14 <HAL_RCC_OscConfig+0x8ac>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d0f0      	beq.n	80078e4 <HAL_RCC_OscConfig+0x77c>
 8007902:	e082      	b.n	8007a0a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007904:	4b43      	ldr	r3, [pc, #268]	@ (8007a14 <HAL_RCC_OscConfig+0x8ac>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a42      	ldr	r2, [pc, #264]	@ (8007a14 <HAL_RCC_OscConfig+0x8ac>)
 800790a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800790e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007910:	f7fb faea 	bl	8002ee8 <HAL_GetTick>
 8007914:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007916:	e008      	b.n	800792a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007918:	f7fb fae6 	bl	8002ee8 <HAL_GetTick>
 800791c:	4602      	mov	r2, r0
 800791e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007920:	1ad3      	subs	r3, r2, r3
 8007922:	2b02      	cmp	r3, #2
 8007924:	d901      	bls.n	800792a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8007926:	2303      	movs	r3, #3
 8007928:	e070      	b.n	8007a0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800792a:	4b3a      	ldr	r3, [pc, #232]	@ (8007a14 <HAL_RCC_OscConfig+0x8ac>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007932:	2b00      	cmp	r3, #0
 8007934:	d1f0      	bne.n	8007918 <HAL_RCC_OscConfig+0x7b0>
 8007936:	e068      	b.n	8007a0a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007938:	4b36      	ldr	r3, [pc, #216]	@ (8007a14 <HAL_RCC_OscConfig+0x8ac>)
 800793a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800793c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800793e:	4b35      	ldr	r3, [pc, #212]	@ (8007a14 <HAL_RCC_OscConfig+0x8ac>)
 8007940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007942:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007948:	2b01      	cmp	r3, #1
 800794a:	d031      	beq.n	80079b0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	f003 0203 	and.w	r2, r3, #3
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007956:	429a      	cmp	r2, r3
 8007958:	d12a      	bne.n	80079b0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	091b      	lsrs	r3, r3, #4
 800795e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007966:	429a      	cmp	r2, r3
 8007968:	d122      	bne.n	80079b0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007974:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007976:	429a      	cmp	r2, r3
 8007978:	d11a      	bne.n	80079b0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	0a5b      	lsrs	r3, r3, #9
 800797e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007986:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007988:	429a      	cmp	r2, r3
 800798a:	d111      	bne.n	80079b0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	0c1b      	lsrs	r3, r3, #16
 8007990:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007998:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800799a:	429a      	cmp	r2, r3
 800799c:	d108      	bne.n	80079b0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	0e1b      	lsrs	r3, r3, #24
 80079a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079aa:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80079ac:	429a      	cmp	r2, r3
 80079ae:	d001      	beq.n	80079b4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80079b0:	2301      	movs	r3, #1
 80079b2:	e02b      	b.n	8007a0c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80079b4:	4b17      	ldr	r3, [pc, #92]	@ (8007a14 <HAL_RCC_OscConfig+0x8ac>)
 80079b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079b8:	08db      	lsrs	r3, r3, #3
 80079ba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80079be:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079c4:	693a      	ldr	r2, [r7, #16]
 80079c6:	429a      	cmp	r2, r3
 80079c8:	d01f      	beq.n	8007a0a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80079ca:	4b12      	ldr	r3, [pc, #72]	@ (8007a14 <HAL_RCC_OscConfig+0x8ac>)
 80079cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079ce:	4a11      	ldr	r2, [pc, #68]	@ (8007a14 <HAL_RCC_OscConfig+0x8ac>)
 80079d0:	f023 0301 	bic.w	r3, r3, #1
 80079d4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80079d6:	f7fb fa87 	bl	8002ee8 <HAL_GetTick>
 80079da:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80079dc:	bf00      	nop
 80079de:	f7fb fa83 	bl	8002ee8 <HAL_GetTick>
 80079e2:	4602      	mov	r2, r0
 80079e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d0f9      	beq.n	80079de <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80079ea:	4b0a      	ldr	r3, [pc, #40]	@ (8007a14 <HAL_RCC_OscConfig+0x8ac>)
 80079ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80079ee:	4b0a      	ldr	r3, [pc, #40]	@ (8007a18 <HAL_RCC_OscConfig+0x8b0>)
 80079f0:	4013      	ands	r3, r2
 80079f2:	687a      	ldr	r2, [r7, #4]
 80079f4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80079f6:	00d2      	lsls	r2, r2, #3
 80079f8:	4906      	ldr	r1, [pc, #24]	@ (8007a14 <HAL_RCC_OscConfig+0x8ac>)
 80079fa:	4313      	orrs	r3, r2
 80079fc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80079fe:	4b05      	ldr	r3, [pc, #20]	@ (8007a14 <HAL_RCC_OscConfig+0x8ac>)
 8007a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a02:	4a04      	ldr	r2, [pc, #16]	@ (8007a14 <HAL_RCC_OscConfig+0x8ac>)
 8007a04:	f043 0301 	orr.w	r3, r3, #1
 8007a08:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007a0a:	2300      	movs	r3, #0
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3730      	adds	r7, #48	@ 0x30
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}
 8007a14:	58024400 	.word	0x58024400
 8007a18:	ffff0007 	.word	0xffff0007

08007a1c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b086      	sub	sp, #24
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d101      	bne.n	8007a30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	e19c      	b.n	8007d6a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007a30:	4b8a      	ldr	r3, [pc, #552]	@ (8007c5c <HAL_RCC_ClockConfig+0x240>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f003 030f 	and.w	r3, r3, #15
 8007a38:	683a      	ldr	r2, [r7, #0]
 8007a3a:	429a      	cmp	r2, r3
 8007a3c:	d910      	bls.n	8007a60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a3e:	4b87      	ldr	r3, [pc, #540]	@ (8007c5c <HAL_RCC_ClockConfig+0x240>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f023 020f 	bic.w	r2, r3, #15
 8007a46:	4985      	ldr	r1, [pc, #532]	@ (8007c5c <HAL_RCC_ClockConfig+0x240>)
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a4e:	4b83      	ldr	r3, [pc, #524]	@ (8007c5c <HAL_RCC_ClockConfig+0x240>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f003 030f 	and.w	r3, r3, #15
 8007a56:	683a      	ldr	r2, [r7, #0]
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d001      	beq.n	8007a60 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	e184      	b.n	8007d6a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f003 0304 	and.w	r3, r3, #4
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d010      	beq.n	8007a8e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	691a      	ldr	r2, [r3, #16]
 8007a70:	4b7b      	ldr	r3, [pc, #492]	@ (8007c60 <HAL_RCC_ClockConfig+0x244>)
 8007a72:	699b      	ldr	r3, [r3, #24]
 8007a74:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	d908      	bls.n	8007a8e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007a7c:	4b78      	ldr	r3, [pc, #480]	@ (8007c60 <HAL_RCC_ClockConfig+0x244>)
 8007a7e:	699b      	ldr	r3, [r3, #24]
 8007a80:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	691b      	ldr	r3, [r3, #16]
 8007a88:	4975      	ldr	r1, [pc, #468]	@ (8007c60 <HAL_RCC_ClockConfig+0x244>)
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f003 0308 	and.w	r3, r3, #8
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d010      	beq.n	8007abc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	695a      	ldr	r2, [r3, #20]
 8007a9e:	4b70      	ldr	r3, [pc, #448]	@ (8007c60 <HAL_RCC_ClockConfig+0x244>)
 8007aa0:	69db      	ldr	r3, [r3, #28]
 8007aa2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007aa6:	429a      	cmp	r2, r3
 8007aa8:	d908      	bls.n	8007abc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007aaa:	4b6d      	ldr	r3, [pc, #436]	@ (8007c60 <HAL_RCC_ClockConfig+0x244>)
 8007aac:	69db      	ldr	r3, [r3, #28]
 8007aae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	695b      	ldr	r3, [r3, #20]
 8007ab6:	496a      	ldr	r1, [pc, #424]	@ (8007c60 <HAL_RCC_ClockConfig+0x244>)
 8007ab8:	4313      	orrs	r3, r2
 8007aba:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f003 0310 	and.w	r3, r3, #16
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d010      	beq.n	8007aea <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	699a      	ldr	r2, [r3, #24]
 8007acc:	4b64      	ldr	r3, [pc, #400]	@ (8007c60 <HAL_RCC_ClockConfig+0x244>)
 8007ace:	69db      	ldr	r3, [r3, #28]
 8007ad0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d908      	bls.n	8007aea <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007ad8:	4b61      	ldr	r3, [pc, #388]	@ (8007c60 <HAL_RCC_ClockConfig+0x244>)
 8007ada:	69db      	ldr	r3, [r3, #28]
 8007adc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	699b      	ldr	r3, [r3, #24]
 8007ae4:	495e      	ldr	r1, [pc, #376]	@ (8007c60 <HAL_RCC_ClockConfig+0x244>)
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f003 0320 	and.w	r3, r3, #32
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d010      	beq.n	8007b18 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	69da      	ldr	r2, [r3, #28]
 8007afa:	4b59      	ldr	r3, [pc, #356]	@ (8007c60 <HAL_RCC_ClockConfig+0x244>)
 8007afc:	6a1b      	ldr	r3, [r3, #32]
 8007afe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007b02:	429a      	cmp	r2, r3
 8007b04:	d908      	bls.n	8007b18 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007b06:	4b56      	ldr	r3, [pc, #344]	@ (8007c60 <HAL_RCC_ClockConfig+0x244>)
 8007b08:	6a1b      	ldr	r3, [r3, #32]
 8007b0a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	69db      	ldr	r3, [r3, #28]
 8007b12:	4953      	ldr	r1, [pc, #332]	@ (8007c60 <HAL_RCC_ClockConfig+0x244>)
 8007b14:	4313      	orrs	r3, r2
 8007b16:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f003 0302 	and.w	r3, r3, #2
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d010      	beq.n	8007b46 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	68da      	ldr	r2, [r3, #12]
 8007b28:	4b4d      	ldr	r3, [pc, #308]	@ (8007c60 <HAL_RCC_ClockConfig+0x244>)
 8007b2a:	699b      	ldr	r3, [r3, #24]
 8007b2c:	f003 030f 	and.w	r3, r3, #15
 8007b30:	429a      	cmp	r2, r3
 8007b32:	d908      	bls.n	8007b46 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b34:	4b4a      	ldr	r3, [pc, #296]	@ (8007c60 <HAL_RCC_ClockConfig+0x244>)
 8007b36:	699b      	ldr	r3, [r3, #24]
 8007b38:	f023 020f 	bic.w	r2, r3, #15
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	68db      	ldr	r3, [r3, #12]
 8007b40:	4947      	ldr	r1, [pc, #284]	@ (8007c60 <HAL_RCC_ClockConfig+0x244>)
 8007b42:	4313      	orrs	r3, r2
 8007b44:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f003 0301 	and.w	r3, r3, #1
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d055      	beq.n	8007bfe <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007b52:	4b43      	ldr	r3, [pc, #268]	@ (8007c60 <HAL_RCC_ClockConfig+0x244>)
 8007b54:	699b      	ldr	r3, [r3, #24]
 8007b56:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	689b      	ldr	r3, [r3, #8]
 8007b5e:	4940      	ldr	r1, [pc, #256]	@ (8007c60 <HAL_RCC_ClockConfig+0x244>)
 8007b60:	4313      	orrs	r3, r2
 8007b62:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	2b02      	cmp	r3, #2
 8007b6a:	d107      	bne.n	8007b7c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007b6c:	4b3c      	ldr	r3, [pc, #240]	@ (8007c60 <HAL_RCC_ClockConfig+0x244>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d121      	bne.n	8007bbc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	e0f6      	b.n	8007d6a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	2b03      	cmp	r3, #3
 8007b82:	d107      	bne.n	8007b94 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007b84:	4b36      	ldr	r3, [pc, #216]	@ (8007c60 <HAL_RCC_ClockConfig+0x244>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d115      	bne.n	8007bbc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007b90:	2301      	movs	r3, #1
 8007b92:	e0ea      	b.n	8007d6a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	d107      	bne.n	8007bac <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007b9c:	4b30      	ldr	r3, [pc, #192]	@ (8007c60 <HAL_RCC_ClockConfig+0x244>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d109      	bne.n	8007bbc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007ba8:	2301      	movs	r3, #1
 8007baa:	e0de      	b.n	8007d6a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007bac:	4b2c      	ldr	r3, [pc, #176]	@ (8007c60 <HAL_RCC_ClockConfig+0x244>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f003 0304 	and.w	r3, r3, #4
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d101      	bne.n	8007bbc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007bb8:	2301      	movs	r3, #1
 8007bba:	e0d6      	b.n	8007d6a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007bbc:	4b28      	ldr	r3, [pc, #160]	@ (8007c60 <HAL_RCC_ClockConfig+0x244>)
 8007bbe:	691b      	ldr	r3, [r3, #16]
 8007bc0:	f023 0207 	bic.w	r2, r3, #7
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	4925      	ldr	r1, [pc, #148]	@ (8007c60 <HAL_RCC_ClockConfig+0x244>)
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007bce:	f7fb f98b 	bl	8002ee8 <HAL_GetTick>
 8007bd2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007bd4:	e00a      	b.n	8007bec <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007bd6:	f7fb f987 	bl	8002ee8 <HAL_GetTick>
 8007bda:	4602      	mov	r2, r0
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	1ad3      	subs	r3, r2, r3
 8007be0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d901      	bls.n	8007bec <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007be8:	2303      	movs	r3, #3
 8007bea:	e0be      	b.n	8007d6a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007bec:	4b1c      	ldr	r3, [pc, #112]	@ (8007c60 <HAL_RCC_ClockConfig+0x244>)
 8007bee:	691b      	ldr	r3, [r3, #16]
 8007bf0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	00db      	lsls	r3, r3, #3
 8007bfa:	429a      	cmp	r2, r3
 8007bfc:	d1eb      	bne.n	8007bd6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f003 0302 	and.w	r3, r3, #2
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d010      	beq.n	8007c2c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	68da      	ldr	r2, [r3, #12]
 8007c0e:	4b14      	ldr	r3, [pc, #80]	@ (8007c60 <HAL_RCC_ClockConfig+0x244>)
 8007c10:	699b      	ldr	r3, [r3, #24]
 8007c12:	f003 030f 	and.w	r3, r3, #15
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d208      	bcs.n	8007c2c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007c1a:	4b11      	ldr	r3, [pc, #68]	@ (8007c60 <HAL_RCC_ClockConfig+0x244>)
 8007c1c:	699b      	ldr	r3, [r3, #24]
 8007c1e:	f023 020f 	bic.w	r2, r3, #15
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	68db      	ldr	r3, [r3, #12]
 8007c26:	490e      	ldr	r1, [pc, #56]	@ (8007c60 <HAL_RCC_ClockConfig+0x244>)
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8007c5c <HAL_RCC_ClockConfig+0x240>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f003 030f 	and.w	r3, r3, #15
 8007c34:	683a      	ldr	r2, [r7, #0]
 8007c36:	429a      	cmp	r2, r3
 8007c38:	d214      	bcs.n	8007c64 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c3a:	4b08      	ldr	r3, [pc, #32]	@ (8007c5c <HAL_RCC_ClockConfig+0x240>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f023 020f 	bic.w	r2, r3, #15
 8007c42:	4906      	ldr	r1, [pc, #24]	@ (8007c5c <HAL_RCC_ClockConfig+0x240>)
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	4313      	orrs	r3, r2
 8007c48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c4a:	4b04      	ldr	r3, [pc, #16]	@ (8007c5c <HAL_RCC_ClockConfig+0x240>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f003 030f 	and.w	r3, r3, #15
 8007c52:	683a      	ldr	r2, [r7, #0]
 8007c54:	429a      	cmp	r2, r3
 8007c56:	d005      	beq.n	8007c64 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007c58:	2301      	movs	r3, #1
 8007c5a:	e086      	b.n	8007d6a <HAL_RCC_ClockConfig+0x34e>
 8007c5c:	52002000 	.word	0x52002000
 8007c60:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f003 0304 	and.w	r3, r3, #4
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d010      	beq.n	8007c92 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	691a      	ldr	r2, [r3, #16]
 8007c74:	4b3f      	ldr	r3, [pc, #252]	@ (8007d74 <HAL_RCC_ClockConfig+0x358>)
 8007c76:	699b      	ldr	r3, [r3, #24]
 8007c78:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	d208      	bcs.n	8007c92 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007c80:	4b3c      	ldr	r3, [pc, #240]	@ (8007d74 <HAL_RCC_ClockConfig+0x358>)
 8007c82:	699b      	ldr	r3, [r3, #24]
 8007c84:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	691b      	ldr	r3, [r3, #16]
 8007c8c:	4939      	ldr	r1, [pc, #228]	@ (8007d74 <HAL_RCC_ClockConfig+0x358>)
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f003 0308 	and.w	r3, r3, #8
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d010      	beq.n	8007cc0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	695a      	ldr	r2, [r3, #20]
 8007ca2:	4b34      	ldr	r3, [pc, #208]	@ (8007d74 <HAL_RCC_ClockConfig+0x358>)
 8007ca4:	69db      	ldr	r3, [r3, #28]
 8007ca6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007caa:	429a      	cmp	r2, r3
 8007cac:	d208      	bcs.n	8007cc0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007cae:	4b31      	ldr	r3, [pc, #196]	@ (8007d74 <HAL_RCC_ClockConfig+0x358>)
 8007cb0:	69db      	ldr	r3, [r3, #28]
 8007cb2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	695b      	ldr	r3, [r3, #20]
 8007cba:	492e      	ldr	r1, [pc, #184]	@ (8007d74 <HAL_RCC_ClockConfig+0x358>)
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f003 0310 	and.w	r3, r3, #16
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d010      	beq.n	8007cee <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	699a      	ldr	r2, [r3, #24]
 8007cd0:	4b28      	ldr	r3, [pc, #160]	@ (8007d74 <HAL_RCC_ClockConfig+0x358>)
 8007cd2:	69db      	ldr	r3, [r3, #28]
 8007cd4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	d208      	bcs.n	8007cee <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007cdc:	4b25      	ldr	r3, [pc, #148]	@ (8007d74 <HAL_RCC_ClockConfig+0x358>)
 8007cde:	69db      	ldr	r3, [r3, #28]
 8007ce0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	699b      	ldr	r3, [r3, #24]
 8007ce8:	4922      	ldr	r1, [pc, #136]	@ (8007d74 <HAL_RCC_ClockConfig+0x358>)
 8007cea:	4313      	orrs	r3, r2
 8007cec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f003 0320 	and.w	r3, r3, #32
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d010      	beq.n	8007d1c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	69da      	ldr	r2, [r3, #28]
 8007cfe:	4b1d      	ldr	r3, [pc, #116]	@ (8007d74 <HAL_RCC_ClockConfig+0x358>)
 8007d00:	6a1b      	ldr	r3, [r3, #32]
 8007d02:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007d06:	429a      	cmp	r2, r3
 8007d08:	d208      	bcs.n	8007d1c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007d0a:	4b1a      	ldr	r3, [pc, #104]	@ (8007d74 <HAL_RCC_ClockConfig+0x358>)
 8007d0c:	6a1b      	ldr	r3, [r3, #32]
 8007d0e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	69db      	ldr	r3, [r3, #28]
 8007d16:	4917      	ldr	r1, [pc, #92]	@ (8007d74 <HAL_RCC_ClockConfig+0x358>)
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007d1c:	f000 f834 	bl	8007d88 <HAL_RCC_GetSysClockFreq>
 8007d20:	4602      	mov	r2, r0
 8007d22:	4b14      	ldr	r3, [pc, #80]	@ (8007d74 <HAL_RCC_ClockConfig+0x358>)
 8007d24:	699b      	ldr	r3, [r3, #24]
 8007d26:	0a1b      	lsrs	r3, r3, #8
 8007d28:	f003 030f 	and.w	r3, r3, #15
 8007d2c:	4912      	ldr	r1, [pc, #72]	@ (8007d78 <HAL_RCC_ClockConfig+0x35c>)
 8007d2e:	5ccb      	ldrb	r3, [r1, r3]
 8007d30:	f003 031f 	and.w	r3, r3, #31
 8007d34:	fa22 f303 	lsr.w	r3, r2, r3
 8007d38:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007d3a:	4b0e      	ldr	r3, [pc, #56]	@ (8007d74 <HAL_RCC_ClockConfig+0x358>)
 8007d3c:	699b      	ldr	r3, [r3, #24]
 8007d3e:	f003 030f 	and.w	r3, r3, #15
 8007d42:	4a0d      	ldr	r2, [pc, #52]	@ (8007d78 <HAL_RCC_ClockConfig+0x35c>)
 8007d44:	5cd3      	ldrb	r3, [r2, r3]
 8007d46:	f003 031f 	and.w	r3, r3, #31
 8007d4a:	693a      	ldr	r2, [r7, #16]
 8007d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8007d50:	4a0a      	ldr	r2, [pc, #40]	@ (8007d7c <HAL_RCC_ClockConfig+0x360>)
 8007d52:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007d54:	4a0a      	ldr	r2, [pc, #40]	@ (8007d80 <HAL_RCC_ClockConfig+0x364>)
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007d5a:	4b0a      	ldr	r3, [pc, #40]	@ (8007d84 <HAL_RCC_ClockConfig+0x368>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f7fb f878 	bl	8002e54 <HAL_InitTick>
 8007d64:	4603      	mov	r3, r0
 8007d66:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3718      	adds	r7, #24
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}
 8007d72:	bf00      	nop
 8007d74:	58024400 	.word	0x58024400
 8007d78:	0800cab8 	.word	0x0800cab8
 8007d7c:	24000004 	.word	0x24000004
 8007d80:	24000000 	.word	0x24000000
 8007d84:	24000018 	.word	0x24000018

08007d88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b089      	sub	sp, #36	@ 0x24
 8007d8c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007d8e:	4bb3      	ldr	r3, [pc, #716]	@ (800805c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d90:	691b      	ldr	r3, [r3, #16]
 8007d92:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007d96:	2b18      	cmp	r3, #24
 8007d98:	f200 8155 	bhi.w	8008046 <HAL_RCC_GetSysClockFreq+0x2be>
 8007d9c:	a201      	add	r2, pc, #4	@ (adr r2, 8007da4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007da2:	bf00      	nop
 8007da4:	08007e09 	.word	0x08007e09
 8007da8:	08008047 	.word	0x08008047
 8007dac:	08008047 	.word	0x08008047
 8007db0:	08008047 	.word	0x08008047
 8007db4:	08008047 	.word	0x08008047
 8007db8:	08008047 	.word	0x08008047
 8007dbc:	08008047 	.word	0x08008047
 8007dc0:	08008047 	.word	0x08008047
 8007dc4:	08007e2f 	.word	0x08007e2f
 8007dc8:	08008047 	.word	0x08008047
 8007dcc:	08008047 	.word	0x08008047
 8007dd0:	08008047 	.word	0x08008047
 8007dd4:	08008047 	.word	0x08008047
 8007dd8:	08008047 	.word	0x08008047
 8007ddc:	08008047 	.word	0x08008047
 8007de0:	08008047 	.word	0x08008047
 8007de4:	08007e35 	.word	0x08007e35
 8007de8:	08008047 	.word	0x08008047
 8007dec:	08008047 	.word	0x08008047
 8007df0:	08008047 	.word	0x08008047
 8007df4:	08008047 	.word	0x08008047
 8007df8:	08008047 	.word	0x08008047
 8007dfc:	08008047 	.word	0x08008047
 8007e00:	08008047 	.word	0x08008047
 8007e04:	08007e3b 	.word	0x08007e3b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e08:	4b94      	ldr	r3, [pc, #592]	@ (800805c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f003 0320 	and.w	r3, r3, #32
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d009      	beq.n	8007e28 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007e14:	4b91      	ldr	r3, [pc, #580]	@ (800805c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	08db      	lsrs	r3, r3, #3
 8007e1a:	f003 0303 	and.w	r3, r3, #3
 8007e1e:	4a90      	ldr	r2, [pc, #576]	@ (8008060 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007e20:	fa22 f303 	lsr.w	r3, r2, r3
 8007e24:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007e26:	e111      	b.n	800804c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007e28:	4b8d      	ldr	r3, [pc, #564]	@ (8008060 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007e2a:	61bb      	str	r3, [r7, #24]
      break;
 8007e2c:	e10e      	b.n	800804c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007e2e:	4b8d      	ldr	r3, [pc, #564]	@ (8008064 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007e30:	61bb      	str	r3, [r7, #24]
      break;
 8007e32:	e10b      	b.n	800804c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007e34:	4b8c      	ldr	r3, [pc, #560]	@ (8008068 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007e36:	61bb      	str	r3, [r7, #24]
      break;
 8007e38:	e108      	b.n	800804c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007e3a:	4b88      	ldr	r3, [pc, #544]	@ (800805c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e3e:	f003 0303 	and.w	r3, r3, #3
 8007e42:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007e44:	4b85      	ldr	r3, [pc, #532]	@ (800805c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e48:	091b      	lsrs	r3, r3, #4
 8007e4a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007e4e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007e50:	4b82      	ldr	r3, [pc, #520]	@ (800805c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e54:	f003 0301 	and.w	r3, r3, #1
 8007e58:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007e5a:	4b80      	ldr	r3, [pc, #512]	@ (800805c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e5e:	08db      	lsrs	r3, r3, #3
 8007e60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007e64:	68fa      	ldr	r2, [r7, #12]
 8007e66:	fb02 f303 	mul.w	r3, r2, r3
 8007e6a:	ee07 3a90 	vmov	s15, r3
 8007e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e72:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	f000 80e1 	beq.w	8008040 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	2b02      	cmp	r3, #2
 8007e82:	f000 8083 	beq.w	8007f8c <HAL_RCC_GetSysClockFreq+0x204>
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	2b02      	cmp	r3, #2
 8007e8a:	f200 80a1 	bhi.w	8007fd0 <HAL_RCC_GetSysClockFreq+0x248>
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d003      	beq.n	8007e9c <HAL_RCC_GetSysClockFreq+0x114>
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	2b01      	cmp	r3, #1
 8007e98:	d056      	beq.n	8007f48 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007e9a:	e099      	b.n	8007fd0 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e9c:	4b6f      	ldr	r3, [pc, #444]	@ (800805c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f003 0320 	and.w	r3, r3, #32
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d02d      	beq.n	8007f04 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007ea8:	4b6c      	ldr	r3, [pc, #432]	@ (800805c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	08db      	lsrs	r3, r3, #3
 8007eae:	f003 0303 	and.w	r3, r3, #3
 8007eb2:	4a6b      	ldr	r2, [pc, #428]	@ (8008060 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007eb4:	fa22 f303 	lsr.w	r3, r2, r3
 8007eb8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	ee07 3a90 	vmov	s15, r3
 8007ec0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	ee07 3a90 	vmov	s15, r3
 8007eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ece:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ed2:	4b62      	ldr	r3, [pc, #392]	@ (800805c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007eda:	ee07 3a90 	vmov	s15, r3
 8007ede:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ee2:	ed97 6a02 	vldr	s12, [r7, #8]
 8007ee6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800806c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007eea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007eee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ef2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ef6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007efa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007efe:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007f02:	e087      	b.n	8008014 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	ee07 3a90 	vmov	s15, r3
 8007f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f0e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8008070 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007f12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f16:	4b51      	ldr	r3, [pc, #324]	@ (800805c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f1e:	ee07 3a90 	vmov	s15, r3
 8007f22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f26:	ed97 6a02 	vldr	s12, [r7, #8]
 8007f2a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800806c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007f2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f42:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007f46:	e065      	b.n	8008014 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	ee07 3a90 	vmov	s15, r3
 8007f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f52:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8008074 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007f56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f5a:	4b40      	ldr	r3, [pc, #256]	@ (800805c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f62:	ee07 3a90 	vmov	s15, r3
 8007f66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8007f6e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800806c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007f72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f86:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007f8a:	e043      	b.n	8008014 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	ee07 3a90 	vmov	s15, r3
 8007f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f96:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8008078 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007f9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f9e:	4b2f      	ldr	r3, [pc, #188]	@ (800805c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fa6:	ee07 3a90 	vmov	s15, r3
 8007faa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fae:	ed97 6a02 	vldr	s12, [r7, #8]
 8007fb2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800806c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007fb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007fc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007fce:	e021      	b.n	8008014 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	ee07 3a90 	vmov	s15, r3
 8007fd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fda:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8008074 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007fde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fe2:	4b1e      	ldr	r3, [pc, #120]	@ (800805c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fea:	ee07 3a90 	vmov	s15, r3
 8007fee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ff2:	ed97 6a02 	vldr	s12, [r7, #8]
 8007ff6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800806c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007ffa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ffe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008002:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008006:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800800a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800800e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008012:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008014:	4b11      	ldr	r3, [pc, #68]	@ (800805c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008018:	0a5b      	lsrs	r3, r3, #9
 800801a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800801e:	3301      	adds	r3, #1
 8008020:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	ee07 3a90 	vmov	s15, r3
 8008028:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800802c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008030:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008034:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008038:	ee17 3a90 	vmov	r3, s15
 800803c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800803e:	e005      	b.n	800804c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008040:	2300      	movs	r3, #0
 8008042:	61bb      	str	r3, [r7, #24]
      break;
 8008044:	e002      	b.n	800804c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008046:	4b07      	ldr	r3, [pc, #28]	@ (8008064 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008048:	61bb      	str	r3, [r7, #24]
      break;
 800804a:	bf00      	nop
  }

  return sysclockfreq;
 800804c:	69bb      	ldr	r3, [r7, #24]
}
 800804e:	4618      	mov	r0, r3
 8008050:	3724      	adds	r7, #36	@ 0x24
 8008052:	46bd      	mov	sp, r7
 8008054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008058:	4770      	bx	lr
 800805a:	bf00      	nop
 800805c:	58024400 	.word	0x58024400
 8008060:	03d09000 	.word	0x03d09000
 8008064:	003d0900 	.word	0x003d0900
 8008068:	017d7840 	.word	0x017d7840
 800806c:	46000000 	.word	0x46000000
 8008070:	4c742400 	.word	0x4c742400
 8008074:	4a742400 	.word	0x4a742400
 8008078:	4bbebc20 	.word	0x4bbebc20

0800807c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b082      	sub	sp, #8
 8008080:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008082:	f7ff fe81 	bl	8007d88 <HAL_RCC_GetSysClockFreq>
 8008086:	4602      	mov	r2, r0
 8008088:	4b10      	ldr	r3, [pc, #64]	@ (80080cc <HAL_RCC_GetHCLKFreq+0x50>)
 800808a:	699b      	ldr	r3, [r3, #24]
 800808c:	0a1b      	lsrs	r3, r3, #8
 800808e:	f003 030f 	and.w	r3, r3, #15
 8008092:	490f      	ldr	r1, [pc, #60]	@ (80080d0 <HAL_RCC_GetHCLKFreq+0x54>)
 8008094:	5ccb      	ldrb	r3, [r1, r3]
 8008096:	f003 031f 	and.w	r3, r3, #31
 800809a:	fa22 f303 	lsr.w	r3, r2, r3
 800809e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80080a0:	4b0a      	ldr	r3, [pc, #40]	@ (80080cc <HAL_RCC_GetHCLKFreq+0x50>)
 80080a2:	699b      	ldr	r3, [r3, #24]
 80080a4:	f003 030f 	and.w	r3, r3, #15
 80080a8:	4a09      	ldr	r2, [pc, #36]	@ (80080d0 <HAL_RCC_GetHCLKFreq+0x54>)
 80080aa:	5cd3      	ldrb	r3, [r2, r3]
 80080ac:	f003 031f 	and.w	r3, r3, #31
 80080b0:	687a      	ldr	r2, [r7, #4]
 80080b2:	fa22 f303 	lsr.w	r3, r2, r3
 80080b6:	4a07      	ldr	r2, [pc, #28]	@ (80080d4 <HAL_RCC_GetHCLKFreq+0x58>)
 80080b8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80080ba:	4a07      	ldr	r2, [pc, #28]	@ (80080d8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80080c0:	4b04      	ldr	r3, [pc, #16]	@ (80080d4 <HAL_RCC_GetHCLKFreq+0x58>)
 80080c2:	681b      	ldr	r3, [r3, #0]
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3708      	adds	r7, #8
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}
 80080cc:	58024400 	.word	0x58024400
 80080d0:	0800cab8 	.word	0x0800cab8
 80080d4:	24000004 	.word	0x24000004
 80080d8:	24000000 	.word	0x24000000

080080dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80080e0:	f7ff ffcc 	bl	800807c <HAL_RCC_GetHCLKFreq>
 80080e4:	4602      	mov	r2, r0
 80080e6:	4b06      	ldr	r3, [pc, #24]	@ (8008100 <HAL_RCC_GetPCLK1Freq+0x24>)
 80080e8:	69db      	ldr	r3, [r3, #28]
 80080ea:	091b      	lsrs	r3, r3, #4
 80080ec:	f003 0307 	and.w	r3, r3, #7
 80080f0:	4904      	ldr	r1, [pc, #16]	@ (8008104 <HAL_RCC_GetPCLK1Freq+0x28>)
 80080f2:	5ccb      	ldrb	r3, [r1, r3]
 80080f4:	f003 031f 	and.w	r3, r3, #31
 80080f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	bd80      	pop	{r7, pc}
 8008100:	58024400 	.word	0x58024400
 8008104:	0800cab8 	.word	0x0800cab8

08008108 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800810c:	f7ff ffb6 	bl	800807c <HAL_RCC_GetHCLKFreq>
 8008110:	4602      	mov	r2, r0
 8008112:	4b06      	ldr	r3, [pc, #24]	@ (800812c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008114:	69db      	ldr	r3, [r3, #28]
 8008116:	0a1b      	lsrs	r3, r3, #8
 8008118:	f003 0307 	and.w	r3, r3, #7
 800811c:	4904      	ldr	r1, [pc, #16]	@ (8008130 <HAL_RCC_GetPCLK2Freq+0x28>)
 800811e:	5ccb      	ldrb	r3, [r1, r3]
 8008120:	f003 031f 	and.w	r3, r3, #31
 8008124:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008128:	4618      	mov	r0, r3
 800812a:	bd80      	pop	{r7, pc}
 800812c:	58024400 	.word	0x58024400
 8008130:	0800cab8 	.word	0x0800cab8

08008134 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008134:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008138:	b0ca      	sub	sp, #296	@ 0x128
 800813a:	af00      	add	r7, sp, #0
 800813c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008140:	2300      	movs	r3, #0
 8008142:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008146:	2300      	movs	r3, #0
 8008148:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800814c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008154:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8008158:	2500      	movs	r5, #0
 800815a:	ea54 0305 	orrs.w	r3, r4, r5
 800815e:	d049      	beq.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008160:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008164:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008166:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800816a:	d02f      	beq.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800816c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008170:	d828      	bhi.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008172:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008176:	d01a      	beq.n	80081ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008178:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800817c:	d822      	bhi.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800817e:	2b00      	cmp	r3, #0
 8008180:	d003      	beq.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008182:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008186:	d007      	beq.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008188:	e01c      	b.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800818a:	4bb8      	ldr	r3, [pc, #736]	@ (800846c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800818c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800818e:	4ab7      	ldr	r2, [pc, #732]	@ (800846c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008190:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008194:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008196:	e01a      	b.n	80081ce <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008198:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800819c:	3308      	adds	r3, #8
 800819e:	2102      	movs	r1, #2
 80081a0:	4618      	mov	r0, r3
 80081a2:	f002 fb61 	bl	800a868 <RCCEx_PLL2_Config>
 80081a6:	4603      	mov	r3, r0
 80081a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80081ac:	e00f      	b.n	80081ce <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80081ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081b2:	3328      	adds	r3, #40	@ 0x28
 80081b4:	2102      	movs	r1, #2
 80081b6:	4618      	mov	r0, r3
 80081b8:	f002 fc08 	bl	800a9cc <RCCEx_PLL3_Config>
 80081bc:	4603      	mov	r3, r0
 80081be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80081c2:	e004      	b.n	80081ce <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80081c4:	2301      	movs	r3, #1
 80081c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80081ca:	e000      	b.n	80081ce <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80081cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d10a      	bne.n	80081ec <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80081d6:	4ba5      	ldr	r3, [pc, #660]	@ (800846c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80081d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081da:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80081de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80081e4:	4aa1      	ldr	r2, [pc, #644]	@ (800846c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80081e6:	430b      	orrs	r3, r1
 80081e8:	6513      	str	r3, [r2, #80]	@ 0x50
 80081ea:	e003      	b.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80081f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081fc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8008200:	f04f 0900 	mov.w	r9, #0
 8008204:	ea58 0309 	orrs.w	r3, r8, r9
 8008208:	d047      	beq.n	800829a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800820a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800820e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008210:	2b04      	cmp	r3, #4
 8008212:	d82a      	bhi.n	800826a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008214:	a201      	add	r2, pc, #4	@ (adr r2, 800821c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800821a:	bf00      	nop
 800821c:	08008231 	.word	0x08008231
 8008220:	0800823f 	.word	0x0800823f
 8008224:	08008255 	.word	0x08008255
 8008228:	08008273 	.word	0x08008273
 800822c:	08008273 	.word	0x08008273
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008230:	4b8e      	ldr	r3, [pc, #568]	@ (800846c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008234:	4a8d      	ldr	r2, [pc, #564]	@ (800846c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008236:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800823a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800823c:	e01a      	b.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800823e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008242:	3308      	adds	r3, #8
 8008244:	2100      	movs	r1, #0
 8008246:	4618      	mov	r0, r3
 8008248:	f002 fb0e 	bl	800a868 <RCCEx_PLL2_Config>
 800824c:	4603      	mov	r3, r0
 800824e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008252:	e00f      	b.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008254:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008258:	3328      	adds	r3, #40	@ 0x28
 800825a:	2100      	movs	r1, #0
 800825c:	4618      	mov	r0, r3
 800825e:	f002 fbb5 	bl	800a9cc <RCCEx_PLL3_Config>
 8008262:	4603      	mov	r3, r0
 8008264:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008268:	e004      	b.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800826a:	2301      	movs	r3, #1
 800826c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008270:	e000      	b.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008272:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008274:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008278:	2b00      	cmp	r3, #0
 800827a:	d10a      	bne.n	8008292 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800827c:	4b7b      	ldr	r3, [pc, #492]	@ (800846c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800827e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008280:	f023 0107 	bic.w	r1, r3, #7
 8008284:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008288:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800828a:	4a78      	ldr	r2, [pc, #480]	@ (800846c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800828c:	430b      	orrs	r3, r1
 800828e:	6513      	str	r3, [r2, #80]	@ 0x50
 8008290:	e003      	b.n	800829a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008292:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008296:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800829a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800829e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80082a6:	f04f 0b00 	mov.w	fp, #0
 80082aa:	ea5a 030b 	orrs.w	r3, sl, fp
 80082ae:	d04c      	beq.n	800834a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80082b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80082b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082ba:	d030      	beq.n	800831e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80082bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082c0:	d829      	bhi.n	8008316 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80082c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80082c4:	d02d      	beq.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80082c6:	2bc0      	cmp	r3, #192	@ 0xc0
 80082c8:	d825      	bhi.n	8008316 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80082ca:	2b80      	cmp	r3, #128	@ 0x80
 80082cc:	d018      	beq.n	8008300 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80082ce:	2b80      	cmp	r3, #128	@ 0x80
 80082d0:	d821      	bhi.n	8008316 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d002      	beq.n	80082dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80082d6:	2b40      	cmp	r3, #64	@ 0x40
 80082d8:	d007      	beq.n	80082ea <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80082da:	e01c      	b.n	8008316 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082dc:	4b63      	ldr	r3, [pc, #396]	@ (800846c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80082de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082e0:	4a62      	ldr	r2, [pc, #392]	@ (800846c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80082e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80082e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80082e8:	e01c      	b.n	8008324 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80082ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082ee:	3308      	adds	r3, #8
 80082f0:	2100      	movs	r1, #0
 80082f2:	4618      	mov	r0, r3
 80082f4:	f002 fab8 	bl	800a868 <RCCEx_PLL2_Config>
 80082f8:	4603      	mov	r3, r0
 80082fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80082fe:	e011      	b.n	8008324 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008300:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008304:	3328      	adds	r3, #40	@ 0x28
 8008306:	2100      	movs	r1, #0
 8008308:	4618      	mov	r0, r3
 800830a:	f002 fb5f 	bl	800a9cc <RCCEx_PLL3_Config>
 800830e:	4603      	mov	r3, r0
 8008310:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008314:	e006      	b.n	8008324 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008316:	2301      	movs	r3, #1
 8008318:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800831c:	e002      	b.n	8008324 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800831e:	bf00      	nop
 8008320:	e000      	b.n	8008324 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008322:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008324:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008328:	2b00      	cmp	r3, #0
 800832a:	d10a      	bne.n	8008342 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800832c:	4b4f      	ldr	r3, [pc, #316]	@ (800846c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800832e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008330:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8008334:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008338:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800833a:	4a4c      	ldr	r2, [pc, #304]	@ (800846c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800833c:	430b      	orrs	r3, r1
 800833e:	6513      	str	r3, [r2, #80]	@ 0x50
 8008340:	e003      	b.n	800834a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008342:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008346:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800834a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800834e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008352:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8008356:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800835a:	2300      	movs	r3, #0
 800835c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8008360:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8008364:	460b      	mov	r3, r1
 8008366:	4313      	orrs	r3, r2
 8008368:	d053      	beq.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800836a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800836e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008372:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008376:	d035      	beq.n	80083e4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8008378:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800837c:	d82e      	bhi.n	80083dc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800837e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008382:	d031      	beq.n	80083e8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8008384:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008388:	d828      	bhi.n	80083dc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800838a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800838e:	d01a      	beq.n	80083c6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8008390:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008394:	d822      	bhi.n	80083dc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008396:	2b00      	cmp	r3, #0
 8008398:	d003      	beq.n	80083a2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800839a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800839e:	d007      	beq.n	80083b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80083a0:	e01c      	b.n	80083dc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083a2:	4b32      	ldr	r3, [pc, #200]	@ (800846c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80083a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083a6:	4a31      	ldr	r2, [pc, #196]	@ (800846c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80083a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80083ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80083ae:	e01c      	b.n	80083ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80083b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083b4:	3308      	adds	r3, #8
 80083b6:	2100      	movs	r1, #0
 80083b8:	4618      	mov	r0, r3
 80083ba:	f002 fa55 	bl	800a868 <RCCEx_PLL2_Config>
 80083be:	4603      	mov	r3, r0
 80083c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80083c4:	e011      	b.n	80083ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80083c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083ca:	3328      	adds	r3, #40	@ 0x28
 80083cc:	2100      	movs	r1, #0
 80083ce:	4618      	mov	r0, r3
 80083d0:	f002 fafc 	bl	800a9cc <RCCEx_PLL3_Config>
 80083d4:	4603      	mov	r3, r0
 80083d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80083da:	e006      	b.n	80083ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80083dc:	2301      	movs	r3, #1
 80083de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80083e2:	e002      	b.n	80083ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80083e4:	bf00      	nop
 80083e6:	e000      	b.n	80083ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80083e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d10b      	bne.n	800840a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80083f2:	4b1e      	ldr	r3, [pc, #120]	@ (800846c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80083f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083f6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80083fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083fe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008402:	4a1a      	ldr	r2, [pc, #104]	@ (800846c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008404:	430b      	orrs	r3, r1
 8008406:	6593      	str	r3, [r2, #88]	@ 0x58
 8008408:	e003      	b.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800840a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800840e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008412:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800841a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800841e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008422:	2300      	movs	r3, #0
 8008424:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008428:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800842c:	460b      	mov	r3, r1
 800842e:	4313      	orrs	r3, r2
 8008430:	d056      	beq.n	80084e0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008432:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008436:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800843a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800843e:	d038      	beq.n	80084b2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008440:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008444:	d831      	bhi.n	80084aa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008446:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800844a:	d034      	beq.n	80084b6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800844c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008450:	d82b      	bhi.n	80084aa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008452:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008456:	d01d      	beq.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8008458:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800845c:	d825      	bhi.n	80084aa <HAL_RCCEx_PeriphCLKConfig+0x376>
 800845e:	2b00      	cmp	r3, #0
 8008460:	d006      	beq.n	8008470 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8008462:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008466:	d00a      	beq.n	800847e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008468:	e01f      	b.n	80084aa <HAL_RCCEx_PeriphCLKConfig+0x376>
 800846a:	bf00      	nop
 800846c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008470:	4ba2      	ldr	r3, [pc, #648]	@ (80086fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008474:	4aa1      	ldr	r2, [pc, #644]	@ (80086fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008476:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800847a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800847c:	e01c      	b.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800847e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008482:	3308      	adds	r3, #8
 8008484:	2100      	movs	r1, #0
 8008486:	4618      	mov	r0, r3
 8008488:	f002 f9ee 	bl	800a868 <RCCEx_PLL2_Config>
 800848c:	4603      	mov	r3, r0
 800848e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008492:	e011      	b.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008494:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008498:	3328      	adds	r3, #40	@ 0x28
 800849a:	2100      	movs	r1, #0
 800849c:	4618      	mov	r0, r3
 800849e:	f002 fa95 	bl	800a9cc <RCCEx_PLL3_Config>
 80084a2:	4603      	mov	r3, r0
 80084a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80084a8:	e006      	b.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80084aa:	2301      	movs	r3, #1
 80084ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80084b0:	e002      	b.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80084b2:	bf00      	nop
 80084b4:	e000      	b.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80084b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d10b      	bne.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80084c0:	4b8e      	ldr	r3, [pc, #568]	@ (80086fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80084c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80084c4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80084c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084cc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80084d0:	4a8a      	ldr	r2, [pc, #552]	@ (80086fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80084d2:	430b      	orrs	r3, r1
 80084d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80084d6:	e003      	b.n	80084e0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80084e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084e8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80084ec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80084f0:	2300      	movs	r3, #0
 80084f2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80084f6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80084fa:	460b      	mov	r3, r1
 80084fc:	4313      	orrs	r3, r2
 80084fe:	d03a      	beq.n	8008576 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8008500:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008504:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008506:	2b30      	cmp	r3, #48	@ 0x30
 8008508:	d01f      	beq.n	800854a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800850a:	2b30      	cmp	r3, #48	@ 0x30
 800850c:	d819      	bhi.n	8008542 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800850e:	2b20      	cmp	r3, #32
 8008510:	d00c      	beq.n	800852c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8008512:	2b20      	cmp	r3, #32
 8008514:	d815      	bhi.n	8008542 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008516:	2b00      	cmp	r3, #0
 8008518:	d019      	beq.n	800854e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800851a:	2b10      	cmp	r3, #16
 800851c:	d111      	bne.n	8008542 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800851e:	4b77      	ldr	r3, [pc, #476]	@ (80086fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008522:	4a76      	ldr	r2, [pc, #472]	@ (80086fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008524:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008528:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800852a:	e011      	b.n	8008550 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800852c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008530:	3308      	adds	r3, #8
 8008532:	2102      	movs	r1, #2
 8008534:	4618      	mov	r0, r3
 8008536:	f002 f997 	bl	800a868 <RCCEx_PLL2_Config>
 800853a:	4603      	mov	r3, r0
 800853c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008540:	e006      	b.n	8008550 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008542:	2301      	movs	r3, #1
 8008544:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008548:	e002      	b.n	8008550 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800854a:	bf00      	nop
 800854c:	e000      	b.n	8008550 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800854e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008550:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008554:	2b00      	cmp	r3, #0
 8008556:	d10a      	bne.n	800856e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008558:	4b68      	ldr	r3, [pc, #416]	@ (80086fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800855a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800855c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008560:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008566:	4a65      	ldr	r2, [pc, #404]	@ (80086fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008568:	430b      	orrs	r3, r1
 800856a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800856c:	e003      	b.n	8008576 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800856e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008572:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008576:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800857a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800857e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8008582:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008586:	2300      	movs	r3, #0
 8008588:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800858c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8008590:	460b      	mov	r3, r1
 8008592:	4313      	orrs	r3, r2
 8008594:	d051      	beq.n	800863a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008596:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800859a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800859c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80085a0:	d035      	beq.n	800860e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80085a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80085a6:	d82e      	bhi.n	8008606 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80085a8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80085ac:	d031      	beq.n	8008612 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80085ae:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80085b2:	d828      	bhi.n	8008606 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80085b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80085b8:	d01a      	beq.n	80085f0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80085ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80085be:	d822      	bhi.n	8008606 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d003      	beq.n	80085cc <HAL_RCCEx_PeriphCLKConfig+0x498>
 80085c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80085c8:	d007      	beq.n	80085da <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80085ca:	e01c      	b.n	8008606 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085cc:	4b4b      	ldr	r3, [pc, #300]	@ (80086fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80085ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085d0:	4a4a      	ldr	r2, [pc, #296]	@ (80086fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80085d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80085d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80085d8:	e01c      	b.n	8008614 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80085da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085de:	3308      	adds	r3, #8
 80085e0:	2100      	movs	r1, #0
 80085e2:	4618      	mov	r0, r3
 80085e4:	f002 f940 	bl	800a868 <RCCEx_PLL2_Config>
 80085e8:	4603      	mov	r3, r0
 80085ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80085ee:	e011      	b.n	8008614 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80085f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085f4:	3328      	adds	r3, #40	@ 0x28
 80085f6:	2100      	movs	r1, #0
 80085f8:	4618      	mov	r0, r3
 80085fa:	f002 f9e7 	bl	800a9cc <RCCEx_PLL3_Config>
 80085fe:	4603      	mov	r3, r0
 8008600:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008604:	e006      	b.n	8008614 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008606:	2301      	movs	r3, #1
 8008608:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800860c:	e002      	b.n	8008614 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800860e:	bf00      	nop
 8008610:	e000      	b.n	8008614 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008612:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008614:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008618:	2b00      	cmp	r3, #0
 800861a:	d10a      	bne.n	8008632 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800861c:	4b37      	ldr	r3, [pc, #220]	@ (80086fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800861e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008620:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008624:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008628:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800862a:	4a34      	ldr	r2, [pc, #208]	@ (80086fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800862c:	430b      	orrs	r3, r1
 800862e:	6513      	str	r3, [r2, #80]	@ 0x50
 8008630:	e003      	b.n	800863a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008632:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008636:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800863a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800863e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008642:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8008646:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800864a:	2300      	movs	r3, #0
 800864c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008650:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8008654:	460b      	mov	r3, r1
 8008656:	4313      	orrs	r3, r2
 8008658:	d056      	beq.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800865a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800865e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008660:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008664:	d033      	beq.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8008666:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800866a:	d82c      	bhi.n	80086c6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800866c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008670:	d02f      	beq.n	80086d2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8008672:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008676:	d826      	bhi.n	80086c6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008678:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800867c:	d02b      	beq.n	80086d6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800867e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008682:	d820      	bhi.n	80086c6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008684:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008688:	d012      	beq.n	80086b0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800868a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800868e:	d81a      	bhi.n	80086c6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008690:	2b00      	cmp	r3, #0
 8008692:	d022      	beq.n	80086da <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8008694:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008698:	d115      	bne.n	80086c6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800869a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800869e:	3308      	adds	r3, #8
 80086a0:	2101      	movs	r1, #1
 80086a2:	4618      	mov	r0, r3
 80086a4:	f002 f8e0 	bl	800a868 <RCCEx_PLL2_Config>
 80086a8:	4603      	mov	r3, r0
 80086aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80086ae:	e015      	b.n	80086dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80086b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086b4:	3328      	adds	r3, #40	@ 0x28
 80086b6:	2101      	movs	r1, #1
 80086b8:	4618      	mov	r0, r3
 80086ba:	f002 f987 	bl	800a9cc <RCCEx_PLL3_Config>
 80086be:	4603      	mov	r3, r0
 80086c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80086c4:	e00a      	b.n	80086dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80086c6:	2301      	movs	r3, #1
 80086c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80086cc:	e006      	b.n	80086dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80086ce:	bf00      	nop
 80086d0:	e004      	b.n	80086dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80086d2:	bf00      	nop
 80086d4:	e002      	b.n	80086dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80086d6:	bf00      	nop
 80086d8:	e000      	b.n	80086dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80086da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80086dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d10d      	bne.n	8008700 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80086e4:	4b05      	ldr	r3, [pc, #20]	@ (80086fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80086e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086e8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80086ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80086f2:	4a02      	ldr	r2, [pc, #8]	@ (80086fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80086f4:	430b      	orrs	r3, r1
 80086f6:	6513      	str	r3, [r2, #80]	@ 0x50
 80086f8:	e006      	b.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80086fa:	bf00      	nop
 80086fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008700:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008704:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008708:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800870c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008710:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8008714:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008718:	2300      	movs	r3, #0
 800871a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800871e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8008722:	460b      	mov	r3, r1
 8008724:	4313      	orrs	r3, r2
 8008726:	d055      	beq.n	80087d4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008728:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800872c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008730:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008734:	d033      	beq.n	800879e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8008736:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800873a:	d82c      	bhi.n	8008796 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800873c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008740:	d02f      	beq.n	80087a2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8008742:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008746:	d826      	bhi.n	8008796 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008748:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800874c:	d02b      	beq.n	80087a6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800874e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008752:	d820      	bhi.n	8008796 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008754:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008758:	d012      	beq.n	8008780 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800875a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800875e:	d81a      	bhi.n	8008796 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008760:	2b00      	cmp	r3, #0
 8008762:	d022      	beq.n	80087aa <HAL_RCCEx_PeriphCLKConfig+0x676>
 8008764:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008768:	d115      	bne.n	8008796 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800876a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800876e:	3308      	adds	r3, #8
 8008770:	2101      	movs	r1, #1
 8008772:	4618      	mov	r0, r3
 8008774:	f002 f878 	bl	800a868 <RCCEx_PLL2_Config>
 8008778:	4603      	mov	r3, r0
 800877a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800877e:	e015      	b.n	80087ac <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008780:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008784:	3328      	adds	r3, #40	@ 0x28
 8008786:	2101      	movs	r1, #1
 8008788:	4618      	mov	r0, r3
 800878a:	f002 f91f 	bl	800a9cc <RCCEx_PLL3_Config>
 800878e:	4603      	mov	r3, r0
 8008790:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008794:	e00a      	b.n	80087ac <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8008796:	2301      	movs	r3, #1
 8008798:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800879c:	e006      	b.n	80087ac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800879e:	bf00      	nop
 80087a0:	e004      	b.n	80087ac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80087a2:	bf00      	nop
 80087a4:	e002      	b.n	80087ac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80087a6:	bf00      	nop
 80087a8:	e000      	b.n	80087ac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80087aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d10b      	bne.n	80087cc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80087b4:	4ba3      	ldr	r3, [pc, #652]	@ (8008a44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80087b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087b8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80087bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80087c4:	4a9f      	ldr	r2, [pc, #636]	@ (8008a44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80087c6:	430b      	orrs	r3, r1
 80087c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80087ca:	e003      	b.n	80087d4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80087d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087dc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80087e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80087e4:	2300      	movs	r3, #0
 80087e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80087ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80087ee:	460b      	mov	r3, r1
 80087f0:	4313      	orrs	r3, r2
 80087f2:	d037      	beq.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80087f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80087fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80087fe:	d00e      	beq.n	800881e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8008800:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008804:	d816      	bhi.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8008806:	2b00      	cmp	r3, #0
 8008808:	d018      	beq.n	800883c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800880a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800880e:	d111      	bne.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008810:	4b8c      	ldr	r3, [pc, #560]	@ (8008a44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008814:	4a8b      	ldr	r2, [pc, #556]	@ (8008a44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008816:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800881a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800881c:	e00f      	b.n	800883e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800881e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008822:	3308      	adds	r3, #8
 8008824:	2101      	movs	r1, #1
 8008826:	4618      	mov	r0, r3
 8008828:	f002 f81e 	bl	800a868 <RCCEx_PLL2_Config>
 800882c:	4603      	mov	r3, r0
 800882e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008832:	e004      	b.n	800883e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008834:	2301      	movs	r3, #1
 8008836:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800883a:	e000      	b.n	800883e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800883c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800883e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008842:	2b00      	cmp	r3, #0
 8008844:	d10a      	bne.n	800885c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008846:	4b7f      	ldr	r3, [pc, #508]	@ (8008a44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008848:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800884a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800884e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008852:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008854:	4a7b      	ldr	r2, [pc, #492]	@ (8008a44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008856:	430b      	orrs	r3, r1
 8008858:	6513      	str	r3, [r2, #80]	@ 0x50
 800885a:	e003      	b.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800885c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008860:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008864:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800886c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8008870:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008874:	2300      	movs	r3, #0
 8008876:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800887a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800887e:	460b      	mov	r3, r1
 8008880:	4313      	orrs	r3, r2
 8008882:	d039      	beq.n	80088f8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008884:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008888:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800888a:	2b03      	cmp	r3, #3
 800888c:	d81c      	bhi.n	80088c8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800888e:	a201      	add	r2, pc, #4	@ (adr r2, 8008894 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8008890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008894:	080088d1 	.word	0x080088d1
 8008898:	080088a5 	.word	0x080088a5
 800889c:	080088b3 	.word	0x080088b3
 80088a0:	080088d1 	.word	0x080088d1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088a4:	4b67      	ldr	r3, [pc, #412]	@ (8008a44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80088a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088a8:	4a66      	ldr	r2, [pc, #408]	@ (8008a44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80088aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80088ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80088b0:	e00f      	b.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80088b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088b6:	3308      	adds	r3, #8
 80088b8:	2102      	movs	r1, #2
 80088ba:	4618      	mov	r0, r3
 80088bc:	f001 ffd4 	bl	800a868 <RCCEx_PLL2_Config>
 80088c0:	4603      	mov	r3, r0
 80088c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80088c6:	e004      	b.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80088c8:	2301      	movs	r3, #1
 80088ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80088ce:	e000      	b.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80088d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d10a      	bne.n	80088f0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80088da:	4b5a      	ldr	r3, [pc, #360]	@ (8008a44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80088dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80088de:	f023 0103 	bic.w	r1, r3, #3
 80088e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80088e8:	4a56      	ldr	r2, [pc, #344]	@ (8008a44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80088ea:	430b      	orrs	r3, r1
 80088ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80088ee:	e003      	b.n	80088f8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80088f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008900:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8008904:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008908:	2300      	movs	r3, #0
 800890a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800890e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8008912:	460b      	mov	r3, r1
 8008914:	4313      	orrs	r3, r2
 8008916:	f000 809f 	beq.w	8008a58 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800891a:	4b4b      	ldr	r3, [pc, #300]	@ (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	4a4a      	ldr	r2, [pc, #296]	@ (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008920:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008924:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008926:	f7fa fadf 	bl	8002ee8 <HAL_GetTick>
 800892a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800892e:	e00b      	b.n	8008948 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008930:	f7fa fada 	bl	8002ee8 <HAL_GetTick>
 8008934:	4602      	mov	r2, r0
 8008936:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800893a:	1ad3      	subs	r3, r2, r3
 800893c:	2b64      	cmp	r3, #100	@ 0x64
 800893e:	d903      	bls.n	8008948 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8008940:	2303      	movs	r3, #3
 8008942:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008946:	e005      	b.n	8008954 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008948:	4b3f      	ldr	r3, [pc, #252]	@ (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008950:	2b00      	cmp	r3, #0
 8008952:	d0ed      	beq.n	8008930 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8008954:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008958:	2b00      	cmp	r3, #0
 800895a:	d179      	bne.n	8008a50 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800895c:	4b39      	ldr	r3, [pc, #228]	@ (8008a44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800895e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008960:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008964:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008968:	4053      	eors	r3, r2
 800896a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800896e:	2b00      	cmp	r3, #0
 8008970:	d015      	beq.n	800899e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008972:	4b34      	ldr	r3, [pc, #208]	@ (8008a44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008974:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008976:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800897a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800897e:	4b31      	ldr	r3, [pc, #196]	@ (8008a44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008980:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008982:	4a30      	ldr	r2, [pc, #192]	@ (8008a44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008984:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008988:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800898a:	4b2e      	ldr	r3, [pc, #184]	@ (8008a44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800898c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800898e:	4a2d      	ldr	r2, [pc, #180]	@ (8008a44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008990:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008994:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008996:	4a2b      	ldr	r2, [pc, #172]	@ (8008a44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008998:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800899c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800899e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80089a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089aa:	d118      	bne.n	80089de <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089ac:	f7fa fa9c 	bl	8002ee8 <HAL_GetTick>
 80089b0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80089b4:	e00d      	b.n	80089d2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80089b6:	f7fa fa97 	bl	8002ee8 <HAL_GetTick>
 80089ba:	4602      	mov	r2, r0
 80089bc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80089c0:	1ad2      	subs	r2, r2, r3
 80089c2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80089c6:	429a      	cmp	r2, r3
 80089c8:	d903      	bls.n	80089d2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80089ca:	2303      	movs	r3, #3
 80089cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80089d0:	e005      	b.n	80089de <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80089d2:	4b1c      	ldr	r3, [pc, #112]	@ (8008a44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80089d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089d6:	f003 0302 	and.w	r3, r3, #2
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d0eb      	beq.n	80089b6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80089de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d129      	bne.n	8008a3a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80089e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80089ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80089f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80089f6:	d10e      	bne.n	8008a16 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80089f8:	4b12      	ldr	r3, [pc, #72]	@ (8008a44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80089fa:	691b      	ldr	r3, [r3, #16]
 80089fc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8008a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a04:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008a08:	091a      	lsrs	r2, r3, #4
 8008a0a:	4b10      	ldr	r3, [pc, #64]	@ (8008a4c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8008a0c:	4013      	ands	r3, r2
 8008a0e:	4a0d      	ldr	r2, [pc, #52]	@ (8008a44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008a10:	430b      	orrs	r3, r1
 8008a12:	6113      	str	r3, [r2, #16]
 8008a14:	e005      	b.n	8008a22 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8008a16:	4b0b      	ldr	r3, [pc, #44]	@ (8008a44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008a18:	691b      	ldr	r3, [r3, #16]
 8008a1a:	4a0a      	ldr	r2, [pc, #40]	@ (8008a44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008a1c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008a20:	6113      	str	r3, [r2, #16]
 8008a22:	4b08      	ldr	r3, [pc, #32]	@ (8008a44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008a24:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8008a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a2a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008a2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a32:	4a04      	ldr	r2, [pc, #16]	@ (8008a44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008a34:	430b      	orrs	r3, r1
 8008a36:	6713      	str	r3, [r2, #112]	@ 0x70
 8008a38:	e00e      	b.n	8008a58 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008a3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8008a42:	e009      	b.n	8008a58 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008a44:	58024400 	.word	0x58024400
 8008a48:	58024800 	.word	0x58024800
 8008a4c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a54:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a60:	f002 0301 	and.w	r3, r2, #1
 8008a64:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008a68:	2300      	movs	r3, #0
 8008a6a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008a6e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008a72:	460b      	mov	r3, r1
 8008a74:	4313      	orrs	r3, r2
 8008a76:	f000 8089 	beq.w	8008b8c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8008a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a7e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008a80:	2b28      	cmp	r3, #40	@ 0x28
 8008a82:	d86b      	bhi.n	8008b5c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8008a84:	a201      	add	r2, pc, #4	@ (adr r2, 8008a8c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a8a:	bf00      	nop
 8008a8c:	08008b65 	.word	0x08008b65
 8008a90:	08008b5d 	.word	0x08008b5d
 8008a94:	08008b5d 	.word	0x08008b5d
 8008a98:	08008b5d 	.word	0x08008b5d
 8008a9c:	08008b5d 	.word	0x08008b5d
 8008aa0:	08008b5d 	.word	0x08008b5d
 8008aa4:	08008b5d 	.word	0x08008b5d
 8008aa8:	08008b5d 	.word	0x08008b5d
 8008aac:	08008b31 	.word	0x08008b31
 8008ab0:	08008b5d 	.word	0x08008b5d
 8008ab4:	08008b5d 	.word	0x08008b5d
 8008ab8:	08008b5d 	.word	0x08008b5d
 8008abc:	08008b5d 	.word	0x08008b5d
 8008ac0:	08008b5d 	.word	0x08008b5d
 8008ac4:	08008b5d 	.word	0x08008b5d
 8008ac8:	08008b5d 	.word	0x08008b5d
 8008acc:	08008b47 	.word	0x08008b47
 8008ad0:	08008b5d 	.word	0x08008b5d
 8008ad4:	08008b5d 	.word	0x08008b5d
 8008ad8:	08008b5d 	.word	0x08008b5d
 8008adc:	08008b5d 	.word	0x08008b5d
 8008ae0:	08008b5d 	.word	0x08008b5d
 8008ae4:	08008b5d 	.word	0x08008b5d
 8008ae8:	08008b5d 	.word	0x08008b5d
 8008aec:	08008b65 	.word	0x08008b65
 8008af0:	08008b5d 	.word	0x08008b5d
 8008af4:	08008b5d 	.word	0x08008b5d
 8008af8:	08008b5d 	.word	0x08008b5d
 8008afc:	08008b5d 	.word	0x08008b5d
 8008b00:	08008b5d 	.word	0x08008b5d
 8008b04:	08008b5d 	.word	0x08008b5d
 8008b08:	08008b5d 	.word	0x08008b5d
 8008b0c:	08008b65 	.word	0x08008b65
 8008b10:	08008b5d 	.word	0x08008b5d
 8008b14:	08008b5d 	.word	0x08008b5d
 8008b18:	08008b5d 	.word	0x08008b5d
 8008b1c:	08008b5d 	.word	0x08008b5d
 8008b20:	08008b5d 	.word	0x08008b5d
 8008b24:	08008b5d 	.word	0x08008b5d
 8008b28:	08008b5d 	.word	0x08008b5d
 8008b2c:	08008b65 	.word	0x08008b65
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008b30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b34:	3308      	adds	r3, #8
 8008b36:	2101      	movs	r1, #1
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f001 fe95 	bl	800a868 <RCCEx_PLL2_Config>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008b44:	e00f      	b.n	8008b66 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008b46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b4a:	3328      	adds	r3, #40	@ 0x28
 8008b4c:	2101      	movs	r1, #1
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f001 ff3c 	bl	800a9cc <RCCEx_PLL3_Config>
 8008b54:	4603      	mov	r3, r0
 8008b56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008b5a:	e004      	b.n	8008b66 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008b62:	e000      	b.n	8008b66 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8008b64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d10a      	bne.n	8008b84 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008b6e:	4bbf      	ldr	r3, [pc, #764]	@ (8008e6c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008b70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b72:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8008b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b7a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008b7c:	4abb      	ldr	r2, [pc, #748]	@ (8008e6c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008b7e:	430b      	orrs	r3, r1
 8008b80:	6553      	str	r3, [r2, #84]	@ 0x54
 8008b82:	e003      	b.n	8008b8c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b88:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b94:	f002 0302 	and.w	r3, r2, #2
 8008b98:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008ba2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8008ba6:	460b      	mov	r3, r1
 8008ba8:	4313      	orrs	r3, r2
 8008baa:	d041      	beq.n	8008c30 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008bac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bb0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008bb2:	2b05      	cmp	r3, #5
 8008bb4:	d824      	bhi.n	8008c00 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8008bb6:	a201      	add	r2, pc, #4	@ (adr r2, 8008bbc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8008bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bbc:	08008c09 	.word	0x08008c09
 8008bc0:	08008bd5 	.word	0x08008bd5
 8008bc4:	08008beb 	.word	0x08008beb
 8008bc8:	08008c09 	.word	0x08008c09
 8008bcc:	08008c09 	.word	0x08008c09
 8008bd0:	08008c09 	.word	0x08008c09
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bd8:	3308      	adds	r3, #8
 8008bda:	2101      	movs	r1, #1
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f001 fe43 	bl	800a868 <RCCEx_PLL2_Config>
 8008be2:	4603      	mov	r3, r0
 8008be4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008be8:	e00f      	b.n	8008c0a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bee:	3328      	adds	r3, #40	@ 0x28
 8008bf0:	2101      	movs	r1, #1
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f001 feea 	bl	800a9cc <RCCEx_PLL3_Config>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008bfe:	e004      	b.n	8008c0a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c00:	2301      	movs	r3, #1
 8008c02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008c06:	e000      	b.n	8008c0a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8008c08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d10a      	bne.n	8008c28 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008c12:	4b96      	ldr	r3, [pc, #600]	@ (8008e6c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008c14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c16:	f023 0107 	bic.w	r1, r3, #7
 8008c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c1e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008c20:	4a92      	ldr	r2, [pc, #584]	@ (8008e6c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008c22:	430b      	orrs	r3, r1
 8008c24:	6553      	str	r3, [r2, #84]	@ 0x54
 8008c26:	e003      	b.n	8008c30 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c2c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c38:	f002 0304 	and.w	r3, r2, #4
 8008c3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008c40:	2300      	movs	r3, #0
 8008c42:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008c46:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8008c4a:	460b      	mov	r3, r1
 8008c4c:	4313      	orrs	r3, r2
 8008c4e:	d044      	beq.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008c50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c54:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008c58:	2b05      	cmp	r3, #5
 8008c5a:	d825      	bhi.n	8008ca8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8008c5c:	a201      	add	r2, pc, #4	@ (adr r2, 8008c64 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8008c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c62:	bf00      	nop
 8008c64:	08008cb1 	.word	0x08008cb1
 8008c68:	08008c7d 	.word	0x08008c7d
 8008c6c:	08008c93 	.word	0x08008c93
 8008c70:	08008cb1 	.word	0x08008cb1
 8008c74:	08008cb1 	.word	0x08008cb1
 8008c78:	08008cb1 	.word	0x08008cb1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c80:	3308      	adds	r3, #8
 8008c82:	2101      	movs	r1, #1
 8008c84:	4618      	mov	r0, r3
 8008c86:	f001 fdef 	bl	800a868 <RCCEx_PLL2_Config>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008c90:	e00f      	b.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c96:	3328      	adds	r3, #40	@ 0x28
 8008c98:	2101      	movs	r1, #1
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f001 fe96 	bl	800a9cc <RCCEx_PLL3_Config>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008ca6:	e004      	b.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ca8:	2301      	movs	r3, #1
 8008caa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008cae:	e000      	b.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8008cb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008cb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d10b      	bne.n	8008cd2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008cba:	4b6c      	ldr	r3, [pc, #432]	@ (8008e6c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008cbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cbe:	f023 0107 	bic.w	r1, r3, #7
 8008cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008cca:	4a68      	ldr	r2, [pc, #416]	@ (8008e6c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008ccc:	430b      	orrs	r3, r1
 8008cce:	6593      	str	r3, [r2, #88]	@ 0x58
 8008cd0:	e003      	b.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008cd6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce2:	f002 0320 	and.w	r3, r2, #32
 8008ce6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008cea:	2300      	movs	r3, #0
 8008cec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008cf0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008cf4:	460b      	mov	r3, r1
 8008cf6:	4313      	orrs	r3, r2
 8008cf8:	d055      	beq.n	8008da6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d02:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008d06:	d033      	beq.n	8008d70 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8008d08:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008d0c:	d82c      	bhi.n	8008d68 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d12:	d02f      	beq.n	8008d74 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8008d14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d18:	d826      	bhi.n	8008d68 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008d1a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008d1e:	d02b      	beq.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8008d20:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008d24:	d820      	bhi.n	8008d68 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008d26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d2a:	d012      	beq.n	8008d52 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008d2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d30:	d81a      	bhi.n	8008d68 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d022      	beq.n	8008d7c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8008d36:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d3a:	d115      	bne.n	8008d68 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d40:	3308      	adds	r3, #8
 8008d42:	2100      	movs	r1, #0
 8008d44:	4618      	mov	r0, r3
 8008d46:	f001 fd8f 	bl	800a868 <RCCEx_PLL2_Config>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008d50:	e015      	b.n	8008d7e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d56:	3328      	adds	r3, #40	@ 0x28
 8008d58:	2102      	movs	r1, #2
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f001 fe36 	bl	800a9cc <RCCEx_PLL3_Config>
 8008d60:	4603      	mov	r3, r0
 8008d62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008d66:	e00a      	b.n	8008d7e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d68:	2301      	movs	r3, #1
 8008d6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008d6e:	e006      	b.n	8008d7e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008d70:	bf00      	nop
 8008d72:	e004      	b.n	8008d7e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008d74:	bf00      	nop
 8008d76:	e002      	b.n	8008d7e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008d78:	bf00      	nop
 8008d7a:	e000      	b.n	8008d7e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008d7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d10b      	bne.n	8008d9e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008d86:	4b39      	ldr	r3, [pc, #228]	@ (8008e6c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008d88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d8a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d96:	4a35      	ldr	r2, [pc, #212]	@ (8008e6c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008d98:	430b      	orrs	r3, r1
 8008d9a:	6553      	str	r3, [r2, #84]	@ 0x54
 8008d9c:	e003      	b.n	8008da6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008da2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008da6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dae:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008db2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008db6:	2300      	movs	r3, #0
 8008db8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008dbc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008dc0:	460b      	mov	r3, r1
 8008dc2:	4313      	orrs	r3, r2
 8008dc4:	d058      	beq.n	8008e78 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008dce:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008dd2:	d033      	beq.n	8008e3c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8008dd4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008dd8:	d82c      	bhi.n	8008e34 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008dda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008dde:	d02f      	beq.n	8008e40 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8008de0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008de4:	d826      	bhi.n	8008e34 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008de6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008dea:	d02b      	beq.n	8008e44 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8008dec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008df0:	d820      	bhi.n	8008e34 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008df2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008df6:	d012      	beq.n	8008e1e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8008df8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008dfc:	d81a      	bhi.n	8008e34 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d022      	beq.n	8008e48 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8008e02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e06:	d115      	bne.n	8008e34 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008e08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e0c:	3308      	adds	r3, #8
 8008e0e:	2100      	movs	r1, #0
 8008e10:	4618      	mov	r0, r3
 8008e12:	f001 fd29 	bl	800a868 <RCCEx_PLL2_Config>
 8008e16:	4603      	mov	r3, r0
 8008e18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008e1c:	e015      	b.n	8008e4a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e22:	3328      	adds	r3, #40	@ 0x28
 8008e24:	2102      	movs	r1, #2
 8008e26:	4618      	mov	r0, r3
 8008e28:	f001 fdd0 	bl	800a9cc <RCCEx_PLL3_Config>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008e32:	e00a      	b.n	8008e4a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e34:	2301      	movs	r3, #1
 8008e36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008e3a:	e006      	b.n	8008e4a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008e3c:	bf00      	nop
 8008e3e:	e004      	b.n	8008e4a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008e40:	bf00      	nop
 8008e42:	e002      	b.n	8008e4a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008e44:	bf00      	nop
 8008e46:	e000      	b.n	8008e4a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008e48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d10e      	bne.n	8008e70 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008e52:	4b06      	ldr	r3, [pc, #24]	@ (8008e6c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008e54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e56:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8008e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008e62:	4a02      	ldr	r2, [pc, #8]	@ (8008e6c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008e64:	430b      	orrs	r3, r1
 8008e66:	6593      	str	r3, [r2, #88]	@ 0x58
 8008e68:	e006      	b.n	8008e78 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8008e6a:	bf00      	nop
 8008e6c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e80:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008e84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008e88:	2300      	movs	r3, #0
 8008e8a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008e8e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008e92:	460b      	mov	r3, r1
 8008e94:	4313      	orrs	r3, r2
 8008e96:	d055      	beq.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e9c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008ea0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008ea4:	d033      	beq.n	8008f0e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8008ea6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008eaa:	d82c      	bhi.n	8008f06 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008eac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008eb0:	d02f      	beq.n	8008f12 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8008eb2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008eb6:	d826      	bhi.n	8008f06 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008eb8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008ebc:	d02b      	beq.n	8008f16 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8008ebe:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008ec2:	d820      	bhi.n	8008f06 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008ec4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008ec8:	d012      	beq.n	8008ef0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8008eca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008ece:	d81a      	bhi.n	8008f06 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d022      	beq.n	8008f1a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8008ed4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008ed8:	d115      	bne.n	8008f06 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ede:	3308      	adds	r3, #8
 8008ee0:	2100      	movs	r1, #0
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f001 fcc0 	bl	800a868 <RCCEx_PLL2_Config>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008eee:	e015      	b.n	8008f1c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ef4:	3328      	adds	r3, #40	@ 0x28
 8008ef6:	2102      	movs	r1, #2
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f001 fd67 	bl	800a9cc <RCCEx_PLL3_Config>
 8008efe:	4603      	mov	r3, r0
 8008f00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008f04:	e00a      	b.n	8008f1c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f06:	2301      	movs	r3, #1
 8008f08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008f0c:	e006      	b.n	8008f1c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008f0e:	bf00      	nop
 8008f10:	e004      	b.n	8008f1c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008f12:	bf00      	nop
 8008f14:	e002      	b.n	8008f1c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008f16:	bf00      	nop
 8008f18:	e000      	b.n	8008f1c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008f1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d10b      	bne.n	8008f3c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008f24:	4ba1      	ldr	r3, [pc, #644]	@ (80091ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008f26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f28:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008f2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f30:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008f34:	4a9d      	ldr	r2, [pc, #628]	@ (80091ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008f36:	430b      	orrs	r3, r1
 8008f38:	6593      	str	r3, [r2, #88]	@ 0x58
 8008f3a:	e003      	b.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f40:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f4c:	f002 0308 	and.w	r3, r2, #8
 8008f50:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008f54:	2300      	movs	r3, #0
 8008f56:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008f5a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008f5e:	460b      	mov	r3, r1
 8008f60:	4313      	orrs	r3, r2
 8008f62:	d01e      	beq.n	8008fa2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008f64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008f6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f70:	d10c      	bne.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f76:	3328      	adds	r3, #40	@ 0x28
 8008f78:	2102      	movs	r1, #2
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f001 fd26 	bl	800a9cc <RCCEx_PLL3_Config>
 8008f80:	4603      	mov	r3, r0
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d002      	beq.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8008f86:	2301      	movs	r3, #1
 8008f88:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008f8c:	4b87      	ldr	r3, [pc, #540]	@ (80091ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008f8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f90:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008f94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008f9c:	4a83      	ldr	r2, [pc, #524]	@ (80091ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008f9e:	430b      	orrs	r3, r1
 8008fa0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008fa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008faa:	f002 0310 	and.w	r3, r2, #16
 8008fae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008fb8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008fbc:	460b      	mov	r3, r1
 8008fbe:	4313      	orrs	r3, r2
 8008fc0:	d01e      	beq.n	8009000 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008fca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008fce:	d10c      	bne.n	8008fea <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008fd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fd4:	3328      	adds	r3, #40	@ 0x28
 8008fd6:	2102      	movs	r1, #2
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f001 fcf7 	bl	800a9cc <RCCEx_PLL3_Config>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d002      	beq.n	8008fea <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008fea:	4b70      	ldr	r3, [pc, #448]	@ (80091ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008fec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008fee:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ff6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008ffa:	4a6c      	ldr	r2, [pc, #432]	@ (80091ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008ffc:	430b      	orrs	r3, r1
 8008ffe:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009000:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009008:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800900c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009010:	2300      	movs	r3, #0
 8009012:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009016:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800901a:	460b      	mov	r3, r1
 800901c:	4313      	orrs	r3, r2
 800901e:	d03e      	beq.n	800909e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009020:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009024:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009028:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800902c:	d022      	beq.n	8009074 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800902e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009032:	d81b      	bhi.n	800906c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8009034:	2b00      	cmp	r3, #0
 8009036:	d003      	beq.n	8009040 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8009038:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800903c:	d00b      	beq.n	8009056 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800903e:	e015      	b.n	800906c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009040:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009044:	3308      	adds	r3, #8
 8009046:	2100      	movs	r1, #0
 8009048:	4618      	mov	r0, r3
 800904a:	f001 fc0d 	bl	800a868 <RCCEx_PLL2_Config>
 800904e:	4603      	mov	r3, r0
 8009050:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009054:	e00f      	b.n	8009076 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009056:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800905a:	3328      	adds	r3, #40	@ 0x28
 800905c:	2102      	movs	r1, #2
 800905e:	4618      	mov	r0, r3
 8009060:	f001 fcb4 	bl	800a9cc <RCCEx_PLL3_Config>
 8009064:	4603      	mov	r3, r0
 8009066:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800906a:	e004      	b.n	8009076 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800906c:	2301      	movs	r3, #1
 800906e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009072:	e000      	b.n	8009076 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8009074:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009076:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800907a:	2b00      	cmp	r3, #0
 800907c:	d10b      	bne.n	8009096 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800907e:	4b4b      	ldr	r3, [pc, #300]	@ (80091ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009080:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009082:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8009086:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800908a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800908e:	4a47      	ldr	r2, [pc, #284]	@ (80091ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009090:	430b      	orrs	r3, r1
 8009092:	6593      	str	r3, [r2, #88]	@ 0x58
 8009094:	e003      	b.n	800909e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009096:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800909a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800909e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090a6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80090aa:	67bb      	str	r3, [r7, #120]	@ 0x78
 80090ac:	2300      	movs	r3, #0
 80090ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80090b0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80090b4:	460b      	mov	r3, r1
 80090b6:	4313      	orrs	r3, r2
 80090b8:	d03b      	beq.n	8009132 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80090ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80090c2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80090c6:	d01f      	beq.n	8009108 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80090c8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80090cc:	d818      	bhi.n	8009100 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80090ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80090d2:	d003      	beq.n	80090dc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80090d4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80090d8:	d007      	beq.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80090da:	e011      	b.n	8009100 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090dc:	4b33      	ldr	r3, [pc, #204]	@ (80091ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80090de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090e0:	4a32      	ldr	r2, [pc, #200]	@ (80091ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80090e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80090e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80090e8:	e00f      	b.n	800910a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80090ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090ee:	3328      	adds	r3, #40	@ 0x28
 80090f0:	2101      	movs	r1, #1
 80090f2:	4618      	mov	r0, r3
 80090f4:	f001 fc6a 	bl	800a9cc <RCCEx_PLL3_Config>
 80090f8:	4603      	mov	r3, r0
 80090fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80090fe:	e004      	b.n	800910a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009100:	2301      	movs	r3, #1
 8009102:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009106:	e000      	b.n	800910a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8009108:	bf00      	nop
    }

    if (ret == HAL_OK)
 800910a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800910e:	2b00      	cmp	r3, #0
 8009110:	d10b      	bne.n	800912a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009112:	4b26      	ldr	r3, [pc, #152]	@ (80091ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009114:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009116:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800911a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800911e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009122:	4a22      	ldr	r2, [pc, #136]	@ (80091ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009124:	430b      	orrs	r3, r1
 8009126:	6553      	str	r3, [r2, #84]	@ 0x54
 8009128:	e003      	b.n	8009132 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800912a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800912e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009132:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800913a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800913e:	673b      	str	r3, [r7, #112]	@ 0x70
 8009140:	2300      	movs	r3, #0
 8009142:	677b      	str	r3, [r7, #116]	@ 0x74
 8009144:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8009148:	460b      	mov	r3, r1
 800914a:	4313      	orrs	r3, r2
 800914c:	d034      	beq.n	80091b8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800914e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009152:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009154:	2b00      	cmp	r3, #0
 8009156:	d003      	beq.n	8009160 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8009158:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800915c:	d007      	beq.n	800916e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800915e:	e011      	b.n	8009184 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009160:	4b12      	ldr	r3, [pc, #72]	@ (80091ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009164:	4a11      	ldr	r2, [pc, #68]	@ (80091ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009166:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800916a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800916c:	e00e      	b.n	800918c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800916e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009172:	3308      	adds	r3, #8
 8009174:	2102      	movs	r1, #2
 8009176:	4618      	mov	r0, r3
 8009178:	f001 fb76 	bl	800a868 <RCCEx_PLL2_Config>
 800917c:	4603      	mov	r3, r0
 800917e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009182:	e003      	b.n	800918c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8009184:	2301      	movs	r3, #1
 8009186:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800918a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800918c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009190:	2b00      	cmp	r3, #0
 8009192:	d10d      	bne.n	80091b0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009194:	4b05      	ldr	r3, [pc, #20]	@ (80091ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009196:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009198:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800919c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091a2:	4a02      	ldr	r2, [pc, #8]	@ (80091ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80091a4:	430b      	orrs	r3, r1
 80091a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80091a8:	e006      	b.n	80091b8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80091aa:	bf00      	nop
 80091ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80091b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80091b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80091c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80091c6:	2300      	movs	r3, #0
 80091c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80091ca:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80091ce:	460b      	mov	r3, r1
 80091d0:	4313      	orrs	r3, r2
 80091d2:	d00c      	beq.n	80091ee <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80091d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091d8:	3328      	adds	r3, #40	@ 0x28
 80091da:	2102      	movs	r1, #2
 80091dc:	4618      	mov	r0, r3
 80091de:	f001 fbf5 	bl	800a9cc <RCCEx_PLL3_Config>
 80091e2:	4603      	mov	r3, r0
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d002      	beq.n	80091ee <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80091e8:	2301      	movs	r3, #1
 80091ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80091ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091f6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80091fa:	663b      	str	r3, [r7, #96]	@ 0x60
 80091fc:	2300      	movs	r3, #0
 80091fe:	667b      	str	r3, [r7, #100]	@ 0x64
 8009200:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8009204:	460b      	mov	r3, r1
 8009206:	4313      	orrs	r3, r2
 8009208:	d038      	beq.n	800927c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800920a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800920e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009212:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009216:	d018      	beq.n	800924a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8009218:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800921c:	d811      	bhi.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800921e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009222:	d014      	beq.n	800924e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8009224:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009228:	d80b      	bhi.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800922a:	2b00      	cmp	r3, #0
 800922c:	d011      	beq.n	8009252 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800922e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009232:	d106      	bne.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009234:	4bc3      	ldr	r3, [pc, #780]	@ (8009544 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009238:	4ac2      	ldr	r2, [pc, #776]	@ (8009544 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800923a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800923e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009240:	e008      	b.n	8009254 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009242:	2301      	movs	r3, #1
 8009244:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009248:	e004      	b.n	8009254 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800924a:	bf00      	nop
 800924c:	e002      	b.n	8009254 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800924e:	bf00      	nop
 8009250:	e000      	b.n	8009254 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009252:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009254:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009258:	2b00      	cmp	r3, #0
 800925a:	d10b      	bne.n	8009274 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800925c:	4bb9      	ldr	r3, [pc, #740]	@ (8009544 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800925e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009260:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009264:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009268:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800926c:	4ab5      	ldr	r2, [pc, #724]	@ (8009544 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800926e:	430b      	orrs	r3, r1
 8009270:	6553      	str	r3, [r2, #84]	@ 0x54
 8009272:	e003      	b.n	800927c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009274:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009278:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800927c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009284:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8009288:	65bb      	str	r3, [r7, #88]	@ 0x58
 800928a:	2300      	movs	r3, #0
 800928c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800928e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8009292:	460b      	mov	r3, r1
 8009294:	4313      	orrs	r3, r2
 8009296:	d009      	beq.n	80092ac <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009298:	4baa      	ldr	r3, [pc, #680]	@ (8009544 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800929a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800929c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80092a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80092a6:	4aa7      	ldr	r2, [pc, #668]	@ (8009544 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80092a8:	430b      	orrs	r3, r1
 80092aa:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80092ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80092b8:	653b      	str	r3, [r7, #80]	@ 0x50
 80092ba:	2300      	movs	r3, #0
 80092bc:	657b      	str	r3, [r7, #84]	@ 0x54
 80092be:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80092c2:	460b      	mov	r3, r1
 80092c4:	4313      	orrs	r3, r2
 80092c6:	d00a      	beq.n	80092de <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80092c8:	4b9e      	ldr	r3, [pc, #632]	@ (8009544 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80092ca:	691b      	ldr	r3, [r3, #16]
 80092cc:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80092d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092d4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80092d8:	4a9a      	ldr	r2, [pc, #616]	@ (8009544 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80092da:	430b      	orrs	r3, r1
 80092dc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80092de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092e6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80092ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80092ec:	2300      	movs	r3, #0
 80092ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80092f0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80092f4:	460b      	mov	r3, r1
 80092f6:	4313      	orrs	r3, r2
 80092f8:	d009      	beq.n	800930e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80092fa:	4b92      	ldr	r3, [pc, #584]	@ (8009544 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80092fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092fe:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8009302:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009306:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009308:	4a8e      	ldr	r2, [pc, #568]	@ (8009544 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800930a:	430b      	orrs	r3, r1
 800930c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800930e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009316:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800931a:	643b      	str	r3, [r7, #64]	@ 0x40
 800931c:	2300      	movs	r3, #0
 800931e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009320:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009324:	460b      	mov	r3, r1
 8009326:	4313      	orrs	r3, r2
 8009328:	d00e      	beq.n	8009348 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800932a:	4b86      	ldr	r3, [pc, #536]	@ (8009544 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800932c:	691b      	ldr	r3, [r3, #16]
 800932e:	4a85      	ldr	r2, [pc, #532]	@ (8009544 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009330:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009334:	6113      	str	r3, [r2, #16]
 8009336:	4b83      	ldr	r3, [pc, #524]	@ (8009544 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009338:	6919      	ldr	r1, [r3, #16]
 800933a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800933e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009342:	4a80      	ldr	r2, [pc, #512]	@ (8009544 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009344:	430b      	orrs	r3, r1
 8009346:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009348:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800934c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009350:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8009354:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009356:	2300      	movs	r3, #0
 8009358:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800935a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800935e:	460b      	mov	r3, r1
 8009360:	4313      	orrs	r3, r2
 8009362:	d009      	beq.n	8009378 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009364:	4b77      	ldr	r3, [pc, #476]	@ (8009544 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009366:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009368:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800936c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009370:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009372:	4a74      	ldr	r2, [pc, #464]	@ (8009544 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009374:	430b      	orrs	r3, r1
 8009376:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009378:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800937c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009380:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8009384:	633b      	str	r3, [r7, #48]	@ 0x30
 8009386:	2300      	movs	r3, #0
 8009388:	637b      	str	r3, [r7, #52]	@ 0x34
 800938a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800938e:	460b      	mov	r3, r1
 8009390:	4313      	orrs	r3, r2
 8009392:	d00a      	beq.n	80093aa <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009394:	4b6b      	ldr	r3, [pc, #428]	@ (8009544 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009396:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009398:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800939c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80093a4:	4a67      	ldr	r2, [pc, #412]	@ (8009544 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80093a6:	430b      	orrs	r3, r1
 80093a8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80093aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093b2:	2100      	movs	r1, #0
 80093b4:	62b9      	str	r1, [r7, #40]	@ 0x28
 80093b6:	f003 0301 	and.w	r3, r3, #1
 80093ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80093bc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80093c0:	460b      	mov	r3, r1
 80093c2:	4313      	orrs	r3, r2
 80093c4:	d011      	beq.n	80093ea <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80093c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093ca:	3308      	adds	r3, #8
 80093cc:	2100      	movs	r1, #0
 80093ce:	4618      	mov	r0, r3
 80093d0:	f001 fa4a 	bl	800a868 <RCCEx_PLL2_Config>
 80093d4:	4603      	mov	r3, r0
 80093d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80093da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d003      	beq.n	80093ea <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80093ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093f2:	2100      	movs	r1, #0
 80093f4:	6239      	str	r1, [r7, #32]
 80093f6:	f003 0302 	and.w	r3, r3, #2
 80093fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80093fc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009400:	460b      	mov	r3, r1
 8009402:	4313      	orrs	r3, r2
 8009404:	d011      	beq.n	800942a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009406:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800940a:	3308      	adds	r3, #8
 800940c:	2101      	movs	r1, #1
 800940e:	4618      	mov	r0, r3
 8009410:	f001 fa2a 	bl	800a868 <RCCEx_PLL2_Config>
 8009414:	4603      	mov	r3, r0
 8009416:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800941a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800941e:	2b00      	cmp	r3, #0
 8009420:	d003      	beq.n	800942a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009422:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009426:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800942a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800942e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009432:	2100      	movs	r1, #0
 8009434:	61b9      	str	r1, [r7, #24]
 8009436:	f003 0304 	and.w	r3, r3, #4
 800943a:	61fb      	str	r3, [r7, #28]
 800943c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009440:	460b      	mov	r3, r1
 8009442:	4313      	orrs	r3, r2
 8009444:	d011      	beq.n	800946a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009446:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800944a:	3308      	adds	r3, #8
 800944c:	2102      	movs	r1, #2
 800944e:	4618      	mov	r0, r3
 8009450:	f001 fa0a 	bl	800a868 <RCCEx_PLL2_Config>
 8009454:	4603      	mov	r3, r0
 8009456:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800945a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800945e:	2b00      	cmp	r3, #0
 8009460:	d003      	beq.n	800946a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009462:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009466:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800946a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800946e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009472:	2100      	movs	r1, #0
 8009474:	6139      	str	r1, [r7, #16]
 8009476:	f003 0308 	and.w	r3, r3, #8
 800947a:	617b      	str	r3, [r7, #20]
 800947c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009480:	460b      	mov	r3, r1
 8009482:	4313      	orrs	r3, r2
 8009484:	d011      	beq.n	80094aa <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009486:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800948a:	3328      	adds	r3, #40	@ 0x28
 800948c:	2100      	movs	r1, #0
 800948e:	4618      	mov	r0, r3
 8009490:	f001 fa9c 	bl	800a9cc <RCCEx_PLL3_Config>
 8009494:	4603      	mov	r3, r0
 8009496:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800949a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d003      	beq.n	80094aa <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80094a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80094aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094b2:	2100      	movs	r1, #0
 80094b4:	60b9      	str	r1, [r7, #8]
 80094b6:	f003 0310 	and.w	r3, r3, #16
 80094ba:	60fb      	str	r3, [r7, #12]
 80094bc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80094c0:	460b      	mov	r3, r1
 80094c2:	4313      	orrs	r3, r2
 80094c4:	d011      	beq.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80094c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094ca:	3328      	adds	r3, #40	@ 0x28
 80094cc:	2101      	movs	r1, #1
 80094ce:	4618      	mov	r0, r3
 80094d0:	f001 fa7c 	bl	800a9cc <RCCEx_PLL3_Config>
 80094d4:	4603      	mov	r3, r0
 80094d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80094da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d003      	beq.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80094e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80094ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094f2:	2100      	movs	r1, #0
 80094f4:	6039      	str	r1, [r7, #0]
 80094f6:	f003 0320 	and.w	r3, r3, #32
 80094fa:	607b      	str	r3, [r7, #4]
 80094fc:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009500:	460b      	mov	r3, r1
 8009502:	4313      	orrs	r3, r2
 8009504:	d011      	beq.n	800952a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009506:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800950a:	3328      	adds	r3, #40	@ 0x28
 800950c:	2102      	movs	r1, #2
 800950e:	4618      	mov	r0, r3
 8009510:	f001 fa5c 	bl	800a9cc <RCCEx_PLL3_Config>
 8009514:	4603      	mov	r3, r0
 8009516:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800951a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800951e:	2b00      	cmp	r3, #0
 8009520:	d003      	beq.n	800952a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009522:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009526:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800952a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800952e:	2b00      	cmp	r3, #0
 8009530:	d101      	bne.n	8009536 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8009532:	2300      	movs	r3, #0
 8009534:	e000      	b.n	8009538 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8009536:	2301      	movs	r3, #1
}
 8009538:	4618      	mov	r0, r3
 800953a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800953e:	46bd      	mov	sp, r7
 8009540:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009544:	58024400 	.word	0x58024400

08009548 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b090      	sub	sp, #64	@ 0x40
 800954c:	af00      	add	r7, sp, #0
 800954e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009552:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009556:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800955a:	430b      	orrs	r3, r1
 800955c:	f040 8094 	bne.w	8009688 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8009560:	4b9e      	ldr	r3, [pc, #632]	@ (80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009562:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009564:	f003 0307 	and.w	r3, r3, #7
 8009568:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800956a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800956c:	2b04      	cmp	r3, #4
 800956e:	f200 8087 	bhi.w	8009680 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8009572:	a201      	add	r2, pc, #4	@ (adr r2, 8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8009574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009578:	0800958d 	.word	0x0800958d
 800957c:	080095b5 	.word	0x080095b5
 8009580:	080095dd 	.word	0x080095dd
 8009584:	08009679 	.word	0x08009679
 8009588:	08009605 	.word	0x08009605
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800958c:	4b93      	ldr	r3, [pc, #588]	@ (80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009594:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009598:	d108      	bne.n	80095ac <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800959a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800959e:	4618      	mov	r0, r3
 80095a0:	f001 f810 	bl	800a5c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80095a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095a8:	f000 bd45 	b.w	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80095ac:	2300      	movs	r3, #0
 80095ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095b0:	f000 bd41 	b.w	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80095b4:	4b89      	ldr	r3, [pc, #548]	@ (80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80095bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80095c0:	d108      	bne.n	80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095c2:	f107 0318 	add.w	r3, r7, #24
 80095c6:	4618      	mov	r0, r3
 80095c8:	f000 fd54 	bl	800a074 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80095cc:	69bb      	ldr	r3, [r7, #24]
 80095ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095d0:	f000 bd31 	b.w	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80095d4:	2300      	movs	r3, #0
 80095d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095d8:	f000 bd2d 	b.w	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80095dc:	4b7f      	ldr	r3, [pc, #508]	@ (80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80095e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80095e8:	d108      	bne.n	80095fc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095ea:	f107 030c 	add.w	r3, r7, #12
 80095ee:	4618      	mov	r0, r3
 80095f0:	f000 fe94 	bl	800a31c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095f8:	f000 bd1d 	b.w	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80095fc:	2300      	movs	r3, #0
 80095fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009600:	f000 bd19 	b.w	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009604:	4b75      	ldr	r3, [pc, #468]	@ (80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009606:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009608:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800960c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800960e:	4b73      	ldr	r3, [pc, #460]	@ (80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f003 0304 	and.w	r3, r3, #4
 8009616:	2b04      	cmp	r3, #4
 8009618:	d10c      	bne.n	8009634 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800961a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800961c:	2b00      	cmp	r3, #0
 800961e:	d109      	bne.n	8009634 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009620:	4b6e      	ldr	r3, [pc, #440]	@ (80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	08db      	lsrs	r3, r3, #3
 8009626:	f003 0303 	and.w	r3, r3, #3
 800962a:	4a6d      	ldr	r2, [pc, #436]	@ (80097e0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800962c:	fa22 f303 	lsr.w	r3, r2, r3
 8009630:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009632:	e01f      	b.n	8009674 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009634:	4b69      	ldr	r3, [pc, #420]	@ (80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800963c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009640:	d106      	bne.n	8009650 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8009642:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009644:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009648:	d102      	bne.n	8009650 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800964a:	4b66      	ldr	r3, [pc, #408]	@ (80097e4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800964c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800964e:	e011      	b.n	8009674 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009650:	4b62      	ldr	r3, [pc, #392]	@ (80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009658:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800965c:	d106      	bne.n	800966c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800965e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009660:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009664:	d102      	bne.n	800966c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009666:	4b60      	ldr	r3, [pc, #384]	@ (80097e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009668:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800966a:	e003      	b.n	8009674 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800966c:	2300      	movs	r3, #0
 800966e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009670:	f000 bce1 	b.w	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009674:	f000 bcdf 	b.w	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009678:	4b5c      	ldr	r3, [pc, #368]	@ (80097ec <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800967a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800967c:	f000 bcdb 	b.w	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009680:	2300      	movs	r3, #0
 8009682:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009684:	f000 bcd7 	b.w	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8009688:	e9d7 2300 	ldrd	r2, r3, [r7]
 800968c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8009690:	430b      	orrs	r3, r1
 8009692:	f040 80ad 	bne.w	80097f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8009696:	4b51      	ldr	r3, [pc, #324]	@ (80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009698:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800969a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800969e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80096a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80096a6:	d056      	beq.n	8009756 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80096a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80096ae:	f200 8090 	bhi.w	80097d2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80096b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096b4:	2bc0      	cmp	r3, #192	@ 0xc0
 80096b6:	f000 8088 	beq.w	80097ca <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80096ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096bc:	2bc0      	cmp	r3, #192	@ 0xc0
 80096be:	f200 8088 	bhi.w	80097d2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80096c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096c4:	2b80      	cmp	r3, #128	@ 0x80
 80096c6:	d032      	beq.n	800972e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80096c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096ca:	2b80      	cmp	r3, #128	@ 0x80
 80096cc:	f200 8081 	bhi.w	80097d2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80096d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d003      	beq.n	80096de <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80096d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096d8:	2b40      	cmp	r3, #64	@ 0x40
 80096da:	d014      	beq.n	8009706 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80096dc:	e079      	b.n	80097d2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80096de:	4b3f      	ldr	r3, [pc, #252]	@ (80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80096e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80096ea:	d108      	bne.n	80096fe <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80096ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80096f0:	4618      	mov	r0, r3
 80096f2:	f000 ff67 	bl	800a5c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80096f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80096fa:	f000 bc9c 	b.w	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80096fe:	2300      	movs	r3, #0
 8009700:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009702:	f000 bc98 	b.w	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009706:	4b35      	ldr	r3, [pc, #212]	@ (80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800970e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009712:	d108      	bne.n	8009726 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009714:	f107 0318 	add.w	r3, r7, #24
 8009718:	4618      	mov	r0, r3
 800971a:	f000 fcab 	bl	800a074 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800971e:	69bb      	ldr	r3, [r7, #24]
 8009720:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009722:	f000 bc88 	b.w	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009726:	2300      	movs	r3, #0
 8009728:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800972a:	f000 bc84 	b.w	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800972e:	4b2b      	ldr	r3, [pc, #172]	@ (80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009736:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800973a:	d108      	bne.n	800974e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800973c:	f107 030c 	add.w	r3, r7, #12
 8009740:	4618      	mov	r0, r3
 8009742:	f000 fdeb 	bl	800a31c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800974a:	f000 bc74 	b.w	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800974e:	2300      	movs	r3, #0
 8009750:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009752:	f000 bc70 	b.w	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009756:	4b21      	ldr	r3, [pc, #132]	@ (80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800975a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800975e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009760:	4b1e      	ldr	r3, [pc, #120]	@ (80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f003 0304 	and.w	r3, r3, #4
 8009768:	2b04      	cmp	r3, #4
 800976a:	d10c      	bne.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800976c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800976e:	2b00      	cmp	r3, #0
 8009770:	d109      	bne.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009772:	4b1a      	ldr	r3, [pc, #104]	@ (80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	08db      	lsrs	r3, r3, #3
 8009778:	f003 0303 	and.w	r3, r3, #3
 800977c:	4a18      	ldr	r2, [pc, #96]	@ (80097e0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800977e:	fa22 f303 	lsr.w	r3, r2, r3
 8009782:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009784:	e01f      	b.n	80097c6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009786:	4b15      	ldr	r3, [pc, #84]	@ (80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800978e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009792:	d106      	bne.n	80097a2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8009794:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009796:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800979a:	d102      	bne.n	80097a2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800979c:	4b11      	ldr	r3, [pc, #68]	@ (80097e4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800979e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80097a0:	e011      	b.n	80097c6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80097a2:	4b0e      	ldr	r3, [pc, #56]	@ (80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80097aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80097ae:	d106      	bne.n	80097be <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80097b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80097b6:	d102      	bne.n	80097be <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80097b8:	4b0b      	ldr	r3, [pc, #44]	@ (80097e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80097ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80097bc:	e003      	b.n	80097c6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80097be:	2300      	movs	r3, #0
 80097c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80097c2:	f000 bc38 	b.w	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80097c6:	f000 bc36 	b.w	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80097ca:	4b08      	ldr	r3, [pc, #32]	@ (80097ec <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80097cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097ce:	f000 bc32 	b.w	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80097d2:	2300      	movs	r3, #0
 80097d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097d6:	f000 bc2e 	b.w	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80097da:	bf00      	nop
 80097dc:	58024400 	.word	0x58024400
 80097e0:	03d09000 	.word	0x03d09000
 80097e4:	003d0900 	.word	0x003d0900
 80097e8:	017d7840 	.word	0x017d7840
 80097ec:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80097f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097f4:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80097f8:	430b      	orrs	r3, r1
 80097fa:	f040 809c 	bne.w	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80097fe:	4b9e      	ldr	r3, [pc, #632]	@ (8009a78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009800:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009802:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8009806:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800980a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800980e:	d054      	beq.n	80098ba <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8009810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009812:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009816:	f200 808b 	bhi.w	8009930 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800981a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800981c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009820:	f000 8083 	beq.w	800992a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8009824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009826:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800982a:	f200 8081 	bhi.w	8009930 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800982e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009830:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009834:	d02f      	beq.n	8009896 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8009836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009838:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800983c:	d878      	bhi.n	8009930 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800983e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009840:	2b00      	cmp	r3, #0
 8009842:	d004      	beq.n	800984e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8009844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009846:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800984a:	d012      	beq.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800984c:	e070      	b.n	8009930 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800984e:	4b8a      	ldr	r3, [pc, #552]	@ (8009a78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009856:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800985a:	d107      	bne.n	800986c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800985c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009860:	4618      	mov	r0, r3
 8009862:	f000 feaf 	bl	800a5c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009868:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800986a:	e3e4      	b.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800986c:	2300      	movs	r3, #0
 800986e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009870:	e3e1      	b.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009872:	4b81      	ldr	r3, [pc, #516]	@ (8009a78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800987a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800987e:	d107      	bne.n	8009890 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009880:	f107 0318 	add.w	r3, r7, #24
 8009884:	4618      	mov	r0, r3
 8009886:	f000 fbf5 	bl	800a074 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800988a:	69bb      	ldr	r3, [r7, #24]
 800988c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800988e:	e3d2      	b.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009890:	2300      	movs	r3, #0
 8009892:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009894:	e3cf      	b.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009896:	4b78      	ldr	r3, [pc, #480]	@ (8009a78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800989e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80098a2:	d107      	bne.n	80098b4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80098a4:	f107 030c 	add.w	r3, r7, #12
 80098a8:	4618      	mov	r0, r3
 80098aa:	f000 fd37 	bl	800a31c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098b2:	e3c0      	b.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80098b4:	2300      	movs	r3, #0
 80098b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098b8:	e3bd      	b.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80098ba:	4b6f      	ldr	r3, [pc, #444]	@ (8009a78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80098bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80098be:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80098c2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80098c4:	4b6c      	ldr	r3, [pc, #432]	@ (8009a78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f003 0304 	and.w	r3, r3, #4
 80098cc:	2b04      	cmp	r3, #4
 80098ce:	d10c      	bne.n	80098ea <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80098d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d109      	bne.n	80098ea <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80098d6:	4b68      	ldr	r3, [pc, #416]	@ (8009a78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	08db      	lsrs	r3, r3, #3
 80098dc:	f003 0303 	and.w	r3, r3, #3
 80098e0:	4a66      	ldr	r2, [pc, #408]	@ (8009a7c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80098e2:	fa22 f303 	lsr.w	r3, r2, r3
 80098e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80098e8:	e01e      	b.n	8009928 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80098ea:	4b63      	ldr	r3, [pc, #396]	@ (8009a78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80098f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80098f6:	d106      	bne.n	8009906 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80098f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80098fe:	d102      	bne.n	8009906 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009900:	4b5f      	ldr	r3, [pc, #380]	@ (8009a80 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8009902:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009904:	e010      	b.n	8009928 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009906:	4b5c      	ldr	r3, [pc, #368]	@ (8009a78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800990e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009912:	d106      	bne.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8009914:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009916:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800991a:	d102      	bne.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800991c:	4b59      	ldr	r3, [pc, #356]	@ (8009a84 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800991e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009920:	e002      	b.n	8009928 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009922:	2300      	movs	r3, #0
 8009924:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009926:	e386      	b.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009928:	e385      	b.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800992a:	4b57      	ldr	r3, [pc, #348]	@ (8009a88 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800992c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800992e:	e382      	b.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009930:	2300      	movs	r3, #0
 8009932:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009934:	e37f      	b.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009936:	e9d7 2300 	ldrd	r2, r3, [r7]
 800993a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800993e:	430b      	orrs	r3, r1
 8009940:	f040 80a7 	bne.w	8009a92 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8009944:	4b4c      	ldr	r3, [pc, #304]	@ (8009a78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009946:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009948:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800994c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800994e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009950:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009954:	d055      	beq.n	8009a02 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8009956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009958:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800995c:	f200 8096 	bhi.w	8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009962:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009966:	f000 8084 	beq.w	8009a72 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800996a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800996c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009970:	f200 808c 	bhi.w	8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009976:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800997a:	d030      	beq.n	80099de <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800997c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800997e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009982:	f200 8083 	bhi.w	8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009988:	2b00      	cmp	r3, #0
 800998a:	d004      	beq.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800998c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800998e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009992:	d012      	beq.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8009994:	e07a      	b.n	8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009996:	4b38      	ldr	r3, [pc, #224]	@ (8009a78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800999e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80099a2:	d107      	bne.n	80099b4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80099a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80099a8:	4618      	mov	r0, r3
 80099aa:	f000 fe0b 	bl	800a5c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80099ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80099b2:	e340      	b.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80099b4:	2300      	movs	r3, #0
 80099b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099b8:	e33d      	b.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80099ba:	4b2f      	ldr	r3, [pc, #188]	@ (8009a78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80099c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80099c6:	d107      	bne.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80099c8:	f107 0318 	add.w	r3, r7, #24
 80099cc:	4618      	mov	r0, r3
 80099ce:	f000 fb51 	bl	800a074 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80099d2:	69bb      	ldr	r3, [r7, #24]
 80099d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80099d6:	e32e      	b.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80099d8:	2300      	movs	r3, #0
 80099da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099dc:	e32b      	b.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80099de:	4b26      	ldr	r3, [pc, #152]	@ (8009a78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80099e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80099ea:	d107      	bne.n	80099fc <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80099ec:	f107 030c 	add.w	r3, r7, #12
 80099f0:	4618      	mov	r0, r3
 80099f2:	f000 fc93 	bl	800a31c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80099fa:	e31c      	b.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80099fc:	2300      	movs	r3, #0
 80099fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a00:	e319      	b.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009a02:	4b1d      	ldr	r3, [pc, #116]	@ (8009a78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009a04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009a06:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009a0a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009a0c:	4b1a      	ldr	r3, [pc, #104]	@ (8009a78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f003 0304 	and.w	r3, r3, #4
 8009a14:	2b04      	cmp	r3, #4
 8009a16:	d10c      	bne.n	8009a32 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8009a18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d109      	bne.n	8009a32 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009a1e:	4b16      	ldr	r3, [pc, #88]	@ (8009a78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	08db      	lsrs	r3, r3, #3
 8009a24:	f003 0303 	and.w	r3, r3, #3
 8009a28:	4a14      	ldr	r2, [pc, #80]	@ (8009a7c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009a2a:	fa22 f303 	lsr.w	r3, r2, r3
 8009a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a30:	e01e      	b.n	8009a70 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009a32:	4b11      	ldr	r3, [pc, #68]	@ (8009a78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009a3e:	d106      	bne.n	8009a4e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8009a40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a42:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009a46:	d102      	bne.n	8009a4e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009a48:	4b0d      	ldr	r3, [pc, #52]	@ (8009a80 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8009a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a4c:	e010      	b.n	8009a70 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009a4e:	4b0a      	ldr	r3, [pc, #40]	@ (8009a78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a56:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009a5a:	d106      	bne.n	8009a6a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8009a5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a62:	d102      	bne.n	8009a6a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009a64:	4b07      	ldr	r3, [pc, #28]	@ (8009a84 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8009a66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a68:	e002      	b.n	8009a70 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009a6e:	e2e2      	b.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009a70:	e2e1      	b.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009a72:	4b05      	ldr	r3, [pc, #20]	@ (8009a88 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009a74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a76:	e2de      	b.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009a78:	58024400 	.word	0x58024400
 8009a7c:	03d09000 	.word	0x03d09000
 8009a80:	003d0900 	.word	0x003d0900
 8009a84:	017d7840 	.word	0x017d7840
 8009a88:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a90:	e2d1      	b.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009a92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a96:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8009a9a:	430b      	orrs	r3, r1
 8009a9c:	f040 809c 	bne.w	8009bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8009aa0:	4b93      	ldr	r3, [pc, #588]	@ (8009cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009aa2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009aa4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8009aa8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009aaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009ab0:	d054      	beq.n	8009b5c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8009ab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ab4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009ab8:	f200 808b 	bhi.w	8009bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009abc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009abe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009ac2:	f000 8083 	beq.w	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8009ac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ac8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009acc:	f200 8081 	bhi.w	8009bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009ad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ad2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009ad6:	d02f      	beq.n	8009b38 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8009ad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ada:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009ade:	d878      	bhi.n	8009bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009ae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d004      	beq.n	8009af0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8009ae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ae8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009aec:	d012      	beq.n	8009b14 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8009aee:	e070      	b.n	8009bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009af0:	4b7f      	ldr	r3, [pc, #508]	@ (8009cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009af8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009afc:	d107      	bne.n	8009b0e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009afe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009b02:	4618      	mov	r0, r3
 8009b04:	f000 fd5e 	bl	800a5c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b0c:	e293      	b.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b0e:	2300      	movs	r3, #0
 8009b10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b12:	e290      	b.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009b14:	4b76      	ldr	r3, [pc, #472]	@ (8009cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009b1c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009b20:	d107      	bne.n	8009b32 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b22:	f107 0318 	add.w	r3, r7, #24
 8009b26:	4618      	mov	r0, r3
 8009b28:	f000 faa4 	bl	800a074 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009b2c:	69bb      	ldr	r3, [r7, #24]
 8009b2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b30:	e281      	b.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b32:	2300      	movs	r3, #0
 8009b34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b36:	e27e      	b.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009b38:	4b6d      	ldr	r3, [pc, #436]	@ (8009cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009b40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b44:	d107      	bne.n	8009b56 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b46:	f107 030c 	add.w	r3, r7, #12
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	f000 fbe6 	bl	800a31c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b54:	e26f      	b.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b56:	2300      	movs	r3, #0
 8009b58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b5a:	e26c      	b.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009b5c:	4b64      	ldr	r3, [pc, #400]	@ (8009cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009b5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b60:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009b64:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009b66:	4b62      	ldr	r3, [pc, #392]	@ (8009cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f003 0304 	and.w	r3, r3, #4
 8009b6e:	2b04      	cmp	r3, #4
 8009b70:	d10c      	bne.n	8009b8c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8009b72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d109      	bne.n	8009b8c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009b78:	4b5d      	ldr	r3, [pc, #372]	@ (8009cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	08db      	lsrs	r3, r3, #3
 8009b7e:	f003 0303 	and.w	r3, r3, #3
 8009b82:	4a5c      	ldr	r2, [pc, #368]	@ (8009cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8009b84:	fa22 f303 	lsr.w	r3, r2, r3
 8009b88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009b8a:	e01e      	b.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009b8c:	4b58      	ldr	r3, [pc, #352]	@ (8009cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b98:	d106      	bne.n	8009ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8009b9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b9c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009ba0:	d102      	bne.n	8009ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009ba2:	4b55      	ldr	r3, [pc, #340]	@ (8009cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009ba4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009ba6:	e010      	b.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009ba8:	4b51      	ldr	r3, [pc, #324]	@ (8009cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009bb0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009bb4:	d106      	bne.n	8009bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8009bb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bb8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009bbc:	d102      	bne.n	8009bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009bbe:	4b4f      	ldr	r3, [pc, #316]	@ (8009cfc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009bc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009bc2:	e002      	b.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009bc8:	e235      	b.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009bca:	e234      	b.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009bcc:	4b4c      	ldr	r3, [pc, #304]	@ (8009d00 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8009bce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bd0:	e231      	b.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bd6:	e22e      	b.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8009bd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009bdc:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8009be0:	430b      	orrs	r3, r1
 8009be2:	f040 808f 	bne.w	8009d04 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8009be6:	4b42      	ldr	r3, [pc, #264]	@ (8009cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009be8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009bea:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8009bee:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8009bf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bf2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009bf6:	d06b      	beq.n	8009cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8009bf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bfa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009bfe:	d874      	bhi.n	8009cea <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009c00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c02:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009c06:	d056      	beq.n	8009cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8009c08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c0a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009c0e:	d86c      	bhi.n	8009cea <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009c10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c12:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009c16:	d03b      	beq.n	8009c90 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8009c18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c1a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009c1e:	d864      	bhi.n	8009cea <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009c20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c22:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009c26:	d021      	beq.n	8009c6c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8009c28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c2a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009c2e:	d85c      	bhi.n	8009cea <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d004      	beq.n	8009c40 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8009c36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009c3c:	d004      	beq.n	8009c48 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8009c3e:	e054      	b.n	8009cea <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8009c40:	f7fe fa4c 	bl	80080dc <HAL_RCC_GetPCLK1Freq>
 8009c44:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009c46:	e1f6      	b.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009c48:	4b29      	ldr	r3, [pc, #164]	@ (8009cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009c50:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009c54:	d107      	bne.n	8009c66 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c56:	f107 0318 	add.w	r3, r7, #24
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	f000 fa0a 	bl	800a074 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009c60:	69fb      	ldr	r3, [r7, #28]
 8009c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c64:	e1e7      	b.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009c66:	2300      	movs	r3, #0
 8009c68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c6a:	e1e4      	b.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009c6c:	4b20      	ldr	r3, [pc, #128]	@ (8009cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009c74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009c78:	d107      	bne.n	8009c8a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c7a:	f107 030c 	add.w	r3, r7, #12
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f000 fb4c 	bl	800a31c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009c84:	693b      	ldr	r3, [r7, #16]
 8009c86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c88:	e1d5      	b.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c8e:	e1d2      	b.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009c90:	4b17      	ldr	r3, [pc, #92]	@ (8009cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	f003 0304 	and.w	r3, r3, #4
 8009c98:	2b04      	cmp	r3, #4
 8009c9a:	d109      	bne.n	8009cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009c9c:	4b14      	ldr	r3, [pc, #80]	@ (8009cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	08db      	lsrs	r3, r3, #3
 8009ca2:	f003 0303 	and.w	r3, r3, #3
 8009ca6:	4a13      	ldr	r2, [pc, #76]	@ (8009cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8009ca8:	fa22 f303 	lsr.w	r3, r2, r3
 8009cac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009cae:	e1c2      	b.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cb4:	e1bf      	b.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009cb6:	4b0e      	ldr	r3, [pc, #56]	@ (8009cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009cbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009cc2:	d102      	bne.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8009cc4:	4b0c      	ldr	r3, [pc, #48]	@ (8009cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009cc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009cc8:	e1b5      	b.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009cca:	2300      	movs	r3, #0
 8009ccc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cce:	e1b2      	b.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009cd0:	4b07      	ldr	r3, [pc, #28]	@ (8009cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009cd8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009cdc:	d102      	bne.n	8009ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8009cde:	4b07      	ldr	r3, [pc, #28]	@ (8009cfc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009ce0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ce2:	e1a8      	b.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ce8:	e1a5      	b.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009cea:	2300      	movs	r3, #0
 8009cec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cee:	e1a2      	b.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009cf0:	58024400 	.word	0x58024400
 8009cf4:	03d09000 	.word	0x03d09000
 8009cf8:	003d0900 	.word	0x003d0900
 8009cfc:	017d7840 	.word	0x017d7840
 8009d00:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009d04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d08:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8009d0c:	430b      	orrs	r3, r1
 8009d0e:	d173      	bne.n	8009df8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8009d10:	4b9c      	ldr	r3, [pc, #624]	@ (8009f84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009d12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d14:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009d18:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009d1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d1c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009d20:	d02f      	beq.n	8009d82 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8009d22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d24:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009d28:	d863      	bhi.n	8009df2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8009d2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d004      	beq.n	8009d3a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8009d30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d36:	d012      	beq.n	8009d5e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8009d38:	e05b      	b.n	8009df2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009d3a:	4b92      	ldr	r3, [pc, #584]	@ (8009f84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009d42:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009d46:	d107      	bne.n	8009d58 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d48:	f107 0318 	add.w	r3, r7, #24
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	f000 f991 	bl	800a074 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009d52:	69bb      	ldr	r3, [r7, #24]
 8009d54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009d56:	e16e      	b.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009d58:	2300      	movs	r3, #0
 8009d5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d5c:	e16b      	b.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009d5e:	4b89      	ldr	r3, [pc, #548]	@ (8009f84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009d66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009d6a:	d107      	bne.n	8009d7c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d6c:	f107 030c 	add.w	r3, r7, #12
 8009d70:	4618      	mov	r0, r3
 8009d72:	f000 fad3 	bl	800a31c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009d7a:	e15c      	b.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d80:	e159      	b.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009d82:	4b80      	ldr	r3, [pc, #512]	@ (8009f84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009d84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009d86:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009d8a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009d8c:	4b7d      	ldr	r3, [pc, #500]	@ (8009f84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f003 0304 	and.w	r3, r3, #4
 8009d94:	2b04      	cmp	r3, #4
 8009d96:	d10c      	bne.n	8009db2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8009d98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d109      	bne.n	8009db2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009d9e:	4b79      	ldr	r3, [pc, #484]	@ (8009f84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	08db      	lsrs	r3, r3, #3
 8009da4:	f003 0303 	and.w	r3, r3, #3
 8009da8:	4a77      	ldr	r2, [pc, #476]	@ (8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8009daa:	fa22 f303 	lsr.w	r3, r2, r3
 8009dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009db0:	e01e      	b.n	8009df0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009db2:	4b74      	ldr	r3, [pc, #464]	@ (8009f84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009dba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009dbe:	d106      	bne.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8009dc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009dc2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009dc6:	d102      	bne.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009dc8:	4b70      	ldr	r3, [pc, #448]	@ (8009f8c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8009dca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009dcc:	e010      	b.n	8009df0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009dce:	4b6d      	ldr	r3, [pc, #436]	@ (8009f84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009dd6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009dda:	d106      	bne.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8009ddc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009dde:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009de2:	d102      	bne.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009de4:	4b6a      	ldr	r3, [pc, #424]	@ (8009f90 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009de6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009de8:	e002      	b.n	8009df0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009dea:	2300      	movs	r3, #0
 8009dec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009dee:	e122      	b.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009df0:	e121      	b.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009df2:	2300      	movs	r3, #0
 8009df4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009df6:	e11e      	b.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009df8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009dfc:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8009e00:	430b      	orrs	r3, r1
 8009e02:	d133      	bne.n	8009e6c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8009e04:	4b5f      	ldr	r3, [pc, #380]	@ (8009f84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009e06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009e0c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009e0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d004      	beq.n	8009e1e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8009e14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e1a:	d012      	beq.n	8009e42 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8009e1c:	e023      	b.n	8009e66 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009e1e:	4b59      	ldr	r3, [pc, #356]	@ (8009f84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009e26:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009e2a:	d107      	bne.n	8009e3c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009e2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009e30:	4618      	mov	r0, r3
 8009e32:	f000 fbc7 	bl	800a5c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009e36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e3a:	e0fc      	b.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e40:	e0f9      	b.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009e42:	4b50      	ldr	r3, [pc, #320]	@ (8009f84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009e4a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009e4e:	d107      	bne.n	8009e60 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e50:	f107 0318 	add.w	r3, r7, #24
 8009e54:	4618      	mov	r0, r3
 8009e56:	f000 f90d 	bl	800a074 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009e5a:	6a3b      	ldr	r3, [r7, #32]
 8009e5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e5e:	e0ea      	b.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009e60:	2300      	movs	r3, #0
 8009e62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e64:	e0e7      	b.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009e66:	2300      	movs	r3, #0
 8009e68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e6a:	e0e4      	b.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009e6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e70:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8009e74:	430b      	orrs	r3, r1
 8009e76:	f040 808d 	bne.w	8009f94 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8009e7a:	4b42      	ldr	r3, [pc, #264]	@ (8009f84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009e7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e7e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8009e82:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009e84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e86:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009e8a:	d06b      	beq.n	8009f64 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8009e8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009e92:	d874      	bhi.n	8009f7e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009e94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e9a:	d056      	beq.n	8009f4a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8009e9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ea2:	d86c      	bhi.n	8009f7e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009ea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ea6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009eaa:	d03b      	beq.n	8009f24 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8009eac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009eb2:	d864      	bhi.n	8009f7e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009eb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eb6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009eba:	d021      	beq.n	8009f00 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8009ebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ebe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009ec2:	d85c      	bhi.n	8009f7e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009ec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d004      	beq.n	8009ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8009eca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ecc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009ed0:	d004      	beq.n	8009edc <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8009ed2:	e054      	b.n	8009f7e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009ed4:	f000 f8b8 	bl	800a048 <HAL_RCCEx_GetD3PCLK1Freq>
 8009ed8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009eda:	e0ac      	b.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009edc:	4b29      	ldr	r3, [pc, #164]	@ (8009f84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009ee4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009ee8:	d107      	bne.n	8009efa <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009eea:	f107 0318 	add.w	r3, r7, #24
 8009eee:	4618      	mov	r0, r3
 8009ef0:	f000 f8c0 	bl	800a074 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009ef4:	69fb      	ldr	r3, [r7, #28]
 8009ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ef8:	e09d      	b.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009efa:	2300      	movs	r3, #0
 8009efc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009efe:	e09a      	b.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009f00:	4b20      	ldr	r3, [pc, #128]	@ (8009f84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009f08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009f0c:	d107      	bne.n	8009f1e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f0e:	f107 030c 	add.w	r3, r7, #12
 8009f12:	4618      	mov	r0, r3
 8009f14:	f000 fa02 	bl	800a31c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009f18:	693b      	ldr	r3, [r7, #16]
 8009f1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f1c:	e08b      	b.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f1e:	2300      	movs	r3, #0
 8009f20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f22:	e088      	b.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009f24:	4b17      	ldr	r3, [pc, #92]	@ (8009f84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f003 0304 	and.w	r3, r3, #4
 8009f2c:	2b04      	cmp	r3, #4
 8009f2e:	d109      	bne.n	8009f44 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009f30:	4b14      	ldr	r3, [pc, #80]	@ (8009f84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	08db      	lsrs	r3, r3, #3
 8009f36:	f003 0303 	and.w	r3, r3, #3
 8009f3a:	4a13      	ldr	r2, [pc, #76]	@ (8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8009f3c:	fa22 f303 	lsr.w	r3, r2, r3
 8009f40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f42:	e078      	b.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f44:	2300      	movs	r3, #0
 8009f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f48:	e075      	b.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009f4a:	4b0e      	ldr	r3, [pc, #56]	@ (8009f84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f56:	d102      	bne.n	8009f5e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8009f58:	4b0c      	ldr	r3, [pc, #48]	@ (8009f8c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8009f5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f5c:	e06b      	b.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f5e:	2300      	movs	r3, #0
 8009f60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f62:	e068      	b.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009f64:	4b07      	ldr	r3, [pc, #28]	@ (8009f84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009f6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009f70:	d102      	bne.n	8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8009f72:	4b07      	ldr	r3, [pc, #28]	@ (8009f90 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009f74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f76:	e05e      	b.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f78:	2300      	movs	r3, #0
 8009f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f7c:	e05b      	b.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8009f7e:	2300      	movs	r3, #0
 8009f80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f82:	e058      	b.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009f84:	58024400 	.word	0x58024400
 8009f88:	03d09000 	.word	0x03d09000
 8009f8c:	003d0900 	.word	0x003d0900
 8009f90:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009f94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f98:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8009f9c:	430b      	orrs	r3, r1
 8009f9e:	d148      	bne.n	800a032 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009fa0:	4b27      	ldr	r3, [pc, #156]	@ (800a040 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009fa2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009fa4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009fa8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009faa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009fb0:	d02a      	beq.n	800a008 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8009fb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fb4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009fb8:	d838      	bhi.n	800a02c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8009fba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d004      	beq.n	8009fca <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8009fc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fc2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009fc6:	d00d      	beq.n	8009fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8009fc8:	e030      	b.n	800a02c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009fca:	4b1d      	ldr	r3, [pc, #116]	@ (800a040 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009fd2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009fd6:	d102      	bne.n	8009fde <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8009fd8:	4b1a      	ldr	r3, [pc, #104]	@ (800a044 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8009fda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009fdc:	e02b      	b.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009fde:	2300      	movs	r3, #0
 8009fe0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009fe2:	e028      	b.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009fe4:	4b16      	ldr	r3, [pc, #88]	@ (800a040 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009fec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009ff0:	d107      	bne.n	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009ff2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	f000 fae4 	bl	800a5c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009ffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ffe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a000:	e019      	b.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a002:	2300      	movs	r3, #0
 800a004:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a006:	e016      	b.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a008:	4b0d      	ldr	r3, [pc, #52]	@ (800a040 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a010:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a014:	d107      	bne.n	800a026 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a016:	f107 0318 	add.w	r3, r7, #24
 800a01a:	4618      	mov	r0, r3
 800a01c:	f000 f82a 	bl	800a074 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a020:	69fb      	ldr	r3, [r7, #28]
 800a022:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a024:	e007      	b.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a026:	2300      	movs	r3, #0
 800a028:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a02a:	e004      	b.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a02c:	2300      	movs	r3, #0
 800a02e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a030:	e001      	b.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800a032:	2300      	movs	r3, #0
 800a034:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800a036:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a038:	4618      	mov	r0, r3
 800a03a:	3740      	adds	r7, #64	@ 0x40
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bd80      	pop	{r7, pc}
 800a040:	58024400 	.word	0x58024400
 800a044:	017d7840 	.word	0x017d7840

0800a048 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a04c:	f7fe f816 	bl	800807c <HAL_RCC_GetHCLKFreq>
 800a050:	4602      	mov	r2, r0
 800a052:	4b06      	ldr	r3, [pc, #24]	@ (800a06c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a054:	6a1b      	ldr	r3, [r3, #32]
 800a056:	091b      	lsrs	r3, r3, #4
 800a058:	f003 0307 	and.w	r3, r3, #7
 800a05c:	4904      	ldr	r1, [pc, #16]	@ (800a070 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a05e:	5ccb      	ldrb	r3, [r1, r3]
 800a060:	f003 031f 	and.w	r3, r3, #31
 800a064:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a068:	4618      	mov	r0, r3
 800a06a:	bd80      	pop	{r7, pc}
 800a06c:	58024400 	.word	0x58024400
 800a070:	0800cab8 	.word	0x0800cab8

0800a074 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a074:	b480      	push	{r7}
 800a076:	b089      	sub	sp, #36	@ 0x24
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a07c:	4ba1      	ldr	r3, [pc, #644]	@ (800a304 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a07e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a080:	f003 0303 	and.w	r3, r3, #3
 800a084:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a086:	4b9f      	ldr	r3, [pc, #636]	@ (800a304 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a08a:	0b1b      	lsrs	r3, r3, #12
 800a08c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a090:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a092:	4b9c      	ldr	r3, [pc, #624]	@ (800a304 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a096:	091b      	lsrs	r3, r3, #4
 800a098:	f003 0301 	and.w	r3, r3, #1
 800a09c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a09e:	4b99      	ldr	r3, [pc, #612]	@ (800a304 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a0a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a0a2:	08db      	lsrs	r3, r3, #3
 800a0a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a0a8:	693a      	ldr	r2, [r7, #16]
 800a0aa:	fb02 f303 	mul.w	r3, r2, r3
 800a0ae:	ee07 3a90 	vmov	s15, r3
 800a0b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0b6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a0ba:	697b      	ldr	r3, [r7, #20]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	f000 8111 	beq.w	800a2e4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a0c2:	69bb      	ldr	r3, [r7, #24]
 800a0c4:	2b02      	cmp	r3, #2
 800a0c6:	f000 8083 	beq.w	800a1d0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a0ca:	69bb      	ldr	r3, [r7, #24]
 800a0cc:	2b02      	cmp	r3, #2
 800a0ce:	f200 80a1 	bhi.w	800a214 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a0d2:	69bb      	ldr	r3, [r7, #24]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d003      	beq.n	800a0e0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a0d8:	69bb      	ldr	r3, [r7, #24]
 800a0da:	2b01      	cmp	r3, #1
 800a0dc:	d056      	beq.n	800a18c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a0de:	e099      	b.n	800a214 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a0e0:	4b88      	ldr	r3, [pc, #544]	@ (800a304 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	f003 0320 	and.w	r3, r3, #32
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d02d      	beq.n	800a148 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a0ec:	4b85      	ldr	r3, [pc, #532]	@ (800a304 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	08db      	lsrs	r3, r3, #3
 800a0f2:	f003 0303 	and.w	r3, r3, #3
 800a0f6:	4a84      	ldr	r2, [pc, #528]	@ (800a308 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a0f8:	fa22 f303 	lsr.w	r3, r2, r3
 800a0fc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a0fe:	68bb      	ldr	r3, [r7, #8]
 800a100:	ee07 3a90 	vmov	s15, r3
 800a104:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a108:	697b      	ldr	r3, [r7, #20]
 800a10a:	ee07 3a90 	vmov	s15, r3
 800a10e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a112:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a116:	4b7b      	ldr	r3, [pc, #492]	@ (800a304 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a118:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a11a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a11e:	ee07 3a90 	vmov	s15, r3
 800a122:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a126:	ed97 6a03 	vldr	s12, [r7, #12]
 800a12a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a30c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a12e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a132:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a136:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a13a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a13e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a142:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a146:	e087      	b.n	800a258 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a148:	697b      	ldr	r3, [r7, #20]
 800a14a:	ee07 3a90 	vmov	s15, r3
 800a14e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a152:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a310 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a156:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a15a:	4b6a      	ldr	r3, [pc, #424]	@ (800a304 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a15c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a15e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a162:	ee07 3a90 	vmov	s15, r3
 800a166:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a16a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a16e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a30c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a172:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a176:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a17a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a17e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a182:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a186:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a18a:	e065      	b.n	800a258 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a18c:	697b      	ldr	r3, [r7, #20]
 800a18e:	ee07 3a90 	vmov	s15, r3
 800a192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a196:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a314 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a19a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a19e:	4b59      	ldr	r3, [pc, #356]	@ (800a304 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a1a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1a6:	ee07 3a90 	vmov	s15, r3
 800a1aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1ae:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1b2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a30c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a1b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a1c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a1ce:	e043      	b.n	800a258 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a1d0:	697b      	ldr	r3, [r7, #20]
 800a1d2:	ee07 3a90 	vmov	s15, r3
 800a1d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1da:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a318 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a1de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1e2:	4b48      	ldr	r3, [pc, #288]	@ (800a304 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a1e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1ea:	ee07 3a90 	vmov	s15, r3
 800a1ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1f2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1f6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a30c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a1fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a202:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a206:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a20a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a20e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a212:	e021      	b.n	800a258 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a214:	697b      	ldr	r3, [r7, #20]
 800a216:	ee07 3a90 	vmov	s15, r3
 800a21a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a21e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a314 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a222:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a226:	4b37      	ldr	r3, [pc, #220]	@ (800a304 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a228:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a22a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a22e:	ee07 3a90 	vmov	s15, r3
 800a232:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a236:	ed97 6a03 	vldr	s12, [r7, #12]
 800a23a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a30c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a23e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a242:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a246:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a24a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a24e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a252:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a256:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800a258:	4b2a      	ldr	r3, [pc, #168]	@ (800a304 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a25a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a25c:	0a5b      	lsrs	r3, r3, #9
 800a25e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a262:	ee07 3a90 	vmov	s15, r3
 800a266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a26a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a26e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a272:	edd7 6a07 	vldr	s13, [r7, #28]
 800a276:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a27a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a27e:	ee17 2a90 	vmov	r2, s15
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800a286:	4b1f      	ldr	r3, [pc, #124]	@ (800a304 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a288:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a28a:	0c1b      	lsrs	r3, r3, #16
 800a28c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a290:	ee07 3a90 	vmov	s15, r3
 800a294:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a298:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a29c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a2a0:	edd7 6a07 	vldr	s13, [r7, #28]
 800a2a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a2a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a2ac:	ee17 2a90 	vmov	r2, s15
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800a2b4:	4b13      	ldr	r3, [pc, #76]	@ (800a304 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a2b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2b8:	0e1b      	lsrs	r3, r3, #24
 800a2ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a2be:	ee07 3a90 	vmov	s15, r3
 800a2c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a2ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a2ce:	edd7 6a07 	vldr	s13, [r7, #28]
 800a2d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a2d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a2da:	ee17 2a90 	vmov	r2, s15
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a2e2:	e008      	b.n	800a2f6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	609a      	str	r2, [r3, #8]
}
 800a2f6:	bf00      	nop
 800a2f8:	3724      	adds	r7, #36	@ 0x24
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a300:	4770      	bx	lr
 800a302:	bf00      	nop
 800a304:	58024400 	.word	0x58024400
 800a308:	03d09000 	.word	0x03d09000
 800a30c:	46000000 	.word	0x46000000
 800a310:	4c742400 	.word	0x4c742400
 800a314:	4a742400 	.word	0x4a742400
 800a318:	4bbebc20 	.word	0x4bbebc20

0800a31c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800a31c:	b480      	push	{r7}
 800a31e:	b089      	sub	sp, #36	@ 0x24
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a324:	4ba1      	ldr	r3, [pc, #644]	@ (800a5ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a328:	f003 0303 	and.w	r3, r3, #3
 800a32c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800a32e:	4b9f      	ldr	r3, [pc, #636]	@ (800a5ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a332:	0d1b      	lsrs	r3, r3, #20
 800a334:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a338:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a33a:	4b9c      	ldr	r3, [pc, #624]	@ (800a5ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a33c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a33e:	0a1b      	lsrs	r3, r3, #8
 800a340:	f003 0301 	and.w	r3, r3, #1
 800a344:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800a346:	4b99      	ldr	r3, [pc, #612]	@ (800a5ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a34a:	08db      	lsrs	r3, r3, #3
 800a34c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a350:	693a      	ldr	r2, [r7, #16]
 800a352:	fb02 f303 	mul.w	r3, r2, r3
 800a356:	ee07 3a90 	vmov	s15, r3
 800a35a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a35e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a362:	697b      	ldr	r3, [r7, #20]
 800a364:	2b00      	cmp	r3, #0
 800a366:	f000 8111 	beq.w	800a58c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a36a:	69bb      	ldr	r3, [r7, #24]
 800a36c:	2b02      	cmp	r3, #2
 800a36e:	f000 8083 	beq.w	800a478 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a372:	69bb      	ldr	r3, [r7, #24]
 800a374:	2b02      	cmp	r3, #2
 800a376:	f200 80a1 	bhi.w	800a4bc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a37a:	69bb      	ldr	r3, [r7, #24]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d003      	beq.n	800a388 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a380:	69bb      	ldr	r3, [r7, #24]
 800a382:	2b01      	cmp	r3, #1
 800a384:	d056      	beq.n	800a434 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a386:	e099      	b.n	800a4bc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a388:	4b88      	ldr	r3, [pc, #544]	@ (800a5ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f003 0320 	and.w	r3, r3, #32
 800a390:	2b00      	cmp	r3, #0
 800a392:	d02d      	beq.n	800a3f0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a394:	4b85      	ldr	r3, [pc, #532]	@ (800a5ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	08db      	lsrs	r3, r3, #3
 800a39a:	f003 0303 	and.w	r3, r3, #3
 800a39e:	4a84      	ldr	r2, [pc, #528]	@ (800a5b0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a3a0:	fa22 f303 	lsr.w	r3, r2, r3
 800a3a4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a3a6:	68bb      	ldr	r3, [r7, #8]
 800a3a8:	ee07 3a90 	vmov	s15, r3
 800a3ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3b0:	697b      	ldr	r3, [r7, #20]
 800a3b2:	ee07 3a90 	vmov	s15, r3
 800a3b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a3be:	4b7b      	ldr	r3, [pc, #492]	@ (800a5ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a3c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3c6:	ee07 3a90 	vmov	s15, r3
 800a3ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3ce:	ed97 6a03 	vldr	s12, [r7, #12]
 800a3d2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a5b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a3d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a3da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a3e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3ea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a3ee:	e087      	b.n	800a500 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a3f0:	697b      	ldr	r3, [r7, #20]
 800a3f2:	ee07 3a90 	vmov	s15, r3
 800a3f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3fa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a5b8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a3fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a402:	4b6a      	ldr	r3, [pc, #424]	@ (800a5ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a406:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a40a:	ee07 3a90 	vmov	s15, r3
 800a40e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a412:	ed97 6a03 	vldr	s12, [r7, #12]
 800a416:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a5b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a41a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a41e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a422:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a426:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a42a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a42e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a432:	e065      	b.n	800a500 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a434:	697b      	ldr	r3, [r7, #20]
 800a436:	ee07 3a90 	vmov	s15, r3
 800a43a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a43e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a5bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a442:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a446:	4b59      	ldr	r3, [pc, #356]	@ (800a5ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a44a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a44e:	ee07 3a90 	vmov	s15, r3
 800a452:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a456:	ed97 6a03 	vldr	s12, [r7, #12]
 800a45a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a5b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a45e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a462:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a466:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a46a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a46e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a472:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a476:	e043      	b.n	800a500 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a478:	697b      	ldr	r3, [r7, #20]
 800a47a:	ee07 3a90 	vmov	s15, r3
 800a47e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a482:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a5c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a486:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a48a:	4b48      	ldr	r3, [pc, #288]	@ (800a5ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a48c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a48e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a492:	ee07 3a90 	vmov	s15, r3
 800a496:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a49a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a49e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a5b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a4a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a4ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a4ba:	e021      	b.n	800a500 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a4bc:	697b      	ldr	r3, [r7, #20]
 800a4be:	ee07 3a90 	vmov	s15, r3
 800a4c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4c6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a5bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a4ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4ce:	4b37      	ldr	r3, [pc, #220]	@ (800a5ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a4d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4d6:	ee07 3a90 	vmov	s15, r3
 800a4da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4de:	ed97 6a03 	vldr	s12, [r7, #12]
 800a4e2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a5b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a4e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a4f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a4fe:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800a500:	4b2a      	ldr	r3, [pc, #168]	@ (800a5ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a504:	0a5b      	lsrs	r3, r3, #9
 800a506:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a50a:	ee07 3a90 	vmov	s15, r3
 800a50e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a512:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a516:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a51a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a51e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a522:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a526:	ee17 2a90 	vmov	r2, s15
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800a52e:	4b1f      	ldr	r3, [pc, #124]	@ (800a5ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a532:	0c1b      	lsrs	r3, r3, #16
 800a534:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a538:	ee07 3a90 	vmov	s15, r3
 800a53c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a540:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a544:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a548:	edd7 6a07 	vldr	s13, [r7, #28]
 800a54c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a550:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a554:	ee17 2a90 	vmov	r2, s15
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800a55c:	4b13      	ldr	r3, [pc, #76]	@ (800a5ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a55e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a560:	0e1b      	lsrs	r3, r3, #24
 800a562:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a566:	ee07 3a90 	vmov	s15, r3
 800a56a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a56e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a572:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a576:	edd7 6a07 	vldr	s13, [r7, #28]
 800a57a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a57e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a582:	ee17 2a90 	vmov	r2, s15
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a58a:	e008      	b.n	800a59e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2200      	movs	r2, #0
 800a590:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	2200      	movs	r2, #0
 800a596:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2200      	movs	r2, #0
 800a59c:	609a      	str	r2, [r3, #8]
}
 800a59e:	bf00      	nop
 800a5a0:	3724      	adds	r7, #36	@ 0x24
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a8:	4770      	bx	lr
 800a5aa:	bf00      	nop
 800a5ac:	58024400 	.word	0x58024400
 800a5b0:	03d09000 	.word	0x03d09000
 800a5b4:	46000000 	.word	0x46000000
 800a5b8:	4c742400 	.word	0x4c742400
 800a5bc:	4a742400 	.word	0x4a742400
 800a5c0:	4bbebc20 	.word	0x4bbebc20

0800a5c4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800a5c4:	b480      	push	{r7}
 800a5c6:	b089      	sub	sp, #36	@ 0x24
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a5cc:	4ba0      	ldr	r3, [pc, #640]	@ (800a850 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a5ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5d0:	f003 0303 	and.w	r3, r3, #3
 800a5d4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800a5d6:	4b9e      	ldr	r3, [pc, #632]	@ (800a850 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a5d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5da:	091b      	lsrs	r3, r3, #4
 800a5dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a5e0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a5e2:	4b9b      	ldr	r3, [pc, #620]	@ (800a850 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a5e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5e6:	f003 0301 	and.w	r3, r3, #1
 800a5ea:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a5ec:	4b98      	ldr	r3, [pc, #608]	@ (800a850 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a5ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a5f0:	08db      	lsrs	r3, r3, #3
 800a5f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a5f6:	693a      	ldr	r2, [r7, #16]
 800a5f8:	fb02 f303 	mul.w	r3, r2, r3
 800a5fc:	ee07 3a90 	vmov	s15, r3
 800a600:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a604:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a608:	697b      	ldr	r3, [r7, #20]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	f000 8111 	beq.w	800a832 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800a610:	69bb      	ldr	r3, [r7, #24]
 800a612:	2b02      	cmp	r3, #2
 800a614:	f000 8083 	beq.w	800a71e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800a618:	69bb      	ldr	r3, [r7, #24]
 800a61a:	2b02      	cmp	r3, #2
 800a61c:	f200 80a1 	bhi.w	800a762 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800a620:	69bb      	ldr	r3, [r7, #24]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d003      	beq.n	800a62e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800a626:	69bb      	ldr	r3, [r7, #24]
 800a628:	2b01      	cmp	r3, #1
 800a62a:	d056      	beq.n	800a6da <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800a62c:	e099      	b.n	800a762 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a62e:	4b88      	ldr	r3, [pc, #544]	@ (800a850 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	f003 0320 	and.w	r3, r3, #32
 800a636:	2b00      	cmp	r3, #0
 800a638:	d02d      	beq.n	800a696 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a63a:	4b85      	ldr	r3, [pc, #532]	@ (800a850 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	08db      	lsrs	r3, r3, #3
 800a640:	f003 0303 	and.w	r3, r3, #3
 800a644:	4a83      	ldr	r2, [pc, #524]	@ (800a854 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800a646:	fa22 f303 	lsr.w	r3, r2, r3
 800a64a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a64c:	68bb      	ldr	r3, [r7, #8]
 800a64e:	ee07 3a90 	vmov	s15, r3
 800a652:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a656:	697b      	ldr	r3, [r7, #20]
 800a658:	ee07 3a90 	vmov	s15, r3
 800a65c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a660:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a664:	4b7a      	ldr	r3, [pc, #488]	@ (800a850 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a666:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a668:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a66c:	ee07 3a90 	vmov	s15, r3
 800a670:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a674:	ed97 6a03 	vldr	s12, [r7, #12]
 800a678:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800a858 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a67c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a680:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a684:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a688:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a68c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a690:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a694:	e087      	b.n	800a7a6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a696:	697b      	ldr	r3, [r7, #20]
 800a698:	ee07 3a90 	vmov	s15, r3
 800a69c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6a0:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800a85c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a6a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6a8:	4b69      	ldr	r3, [pc, #420]	@ (800a850 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a6aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6b0:	ee07 3a90 	vmov	s15, r3
 800a6b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6b8:	ed97 6a03 	vldr	s12, [r7, #12]
 800a6bc:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800a858 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a6c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6c8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a6cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a6d8:	e065      	b.n	800a7a6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a6da:	697b      	ldr	r3, [r7, #20]
 800a6dc:	ee07 3a90 	vmov	s15, r3
 800a6e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6e4:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800a860 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a6e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6ec:	4b58      	ldr	r3, [pc, #352]	@ (800a850 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a6ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6f4:	ee07 3a90 	vmov	s15, r3
 800a6f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6fc:	ed97 6a03 	vldr	s12, [r7, #12]
 800a700:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800a858 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a704:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a708:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a70c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a710:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a714:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a718:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a71c:	e043      	b.n	800a7a6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a71e:	697b      	ldr	r3, [r7, #20]
 800a720:	ee07 3a90 	vmov	s15, r3
 800a724:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a728:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800a864 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a72c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a730:	4b47      	ldr	r3, [pc, #284]	@ (800a850 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a734:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a738:	ee07 3a90 	vmov	s15, r3
 800a73c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a740:	ed97 6a03 	vldr	s12, [r7, #12]
 800a744:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800a858 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a748:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a74c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a750:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a754:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a758:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a75c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a760:	e021      	b.n	800a7a6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a762:	697b      	ldr	r3, [r7, #20]
 800a764:	ee07 3a90 	vmov	s15, r3
 800a768:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a76c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800a85c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a770:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a774:	4b36      	ldr	r3, [pc, #216]	@ (800a850 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a776:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a778:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a77c:	ee07 3a90 	vmov	s15, r3
 800a780:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a784:	ed97 6a03 	vldr	s12, [r7, #12]
 800a788:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800a858 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a78c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a790:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a794:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a798:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a79c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7a0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a7a4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800a7a6:	4b2a      	ldr	r3, [pc, #168]	@ (800a850 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a7a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7aa:	0a5b      	lsrs	r3, r3, #9
 800a7ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a7b0:	ee07 3a90 	vmov	s15, r3
 800a7b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7b8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a7bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a7c0:	edd7 6a07 	vldr	s13, [r7, #28]
 800a7c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a7c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a7cc:	ee17 2a90 	vmov	r2, s15
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800a7d4:	4b1e      	ldr	r3, [pc, #120]	@ (800a850 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a7d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7d8:	0c1b      	lsrs	r3, r3, #16
 800a7da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a7de:	ee07 3a90 	vmov	s15, r3
 800a7e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a7ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a7ee:	edd7 6a07 	vldr	s13, [r7, #28]
 800a7f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a7f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a7fa:	ee17 2a90 	vmov	r2, s15
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800a802:	4b13      	ldr	r3, [pc, #76]	@ (800a850 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a806:	0e1b      	lsrs	r3, r3, #24
 800a808:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a80c:	ee07 3a90 	vmov	s15, r3
 800a810:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a814:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a818:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a81c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a820:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a824:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a828:	ee17 2a90 	vmov	r2, s15
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a830:	e008      	b.n	800a844 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2200      	movs	r2, #0
 800a836:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2200      	movs	r2, #0
 800a83c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	2200      	movs	r2, #0
 800a842:	609a      	str	r2, [r3, #8]
}
 800a844:	bf00      	nop
 800a846:	3724      	adds	r7, #36	@ 0x24
 800a848:	46bd      	mov	sp, r7
 800a84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84e:	4770      	bx	lr
 800a850:	58024400 	.word	0x58024400
 800a854:	03d09000 	.word	0x03d09000
 800a858:	46000000 	.word	0x46000000
 800a85c:	4c742400 	.word	0x4c742400
 800a860:	4a742400 	.word	0x4a742400
 800a864:	4bbebc20 	.word	0x4bbebc20

0800a868 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b084      	sub	sp, #16
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
 800a870:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a872:	2300      	movs	r3, #0
 800a874:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a876:	4b53      	ldr	r3, [pc, #332]	@ (800a9c4 <RCCEx_PLL2_Config+0x15c>)
 800a878:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a87a:	f003 0303 	and.w	r3, r3, #3
 800a87e:	2b03      	cmp	r3, #3
 800a880:	d101      	bne.n	800a886 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a882:	2301      	movs	r3, #1
 800a884:	e099      	b.n	800a9ba <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a886:	4b4f      	ldr	r3, [pc, #316]	@ (800a9c4 <RCCEx_PLL2_Config+0x15c>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	4a4e      	ldr	r2, [pc, #312]	@ (800a9c4 <RCCEx_PLL2_Config+0x15c>)
 800a88c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a890:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a892:	f7f8 fb29 	bl	8002ee8 <HAL_GetTick>
 800a896:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a898:	e008      	b.n	800a8ac <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a89a:	f7f8 fb25 	bl	8002ee8 <HAL_GetTick>
 800a89e:	4602      	mov	r2, r0
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	1ad3      	subs	r3, r2, r3
 800a8a4:	2b02      	cmp	r3, #2
 800a8a6:	d901      	bls.n	800a8ac <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a8a8:	2303      	movs	r3, #3
 800a8aa:	e086      	b.n	800a9ba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a8ac:	4b45      	ldr	r3, [pc, #276]	@ (800a9c4 <RCCEx_PLL2_Config+0x15c>)
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d1f0      	bne.n	800a89a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a8b8:	4b42      	ldr	r3, [pc, #264]	@ (800a9c4 <RCCEx_PLL2_Config+0x15c>)
 800a8ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8bc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	031b      	lsls	r3, r3, #12
 800a8c6:	493f      	ldr	r1, [pc, #252]	@ (800a9c4 <RCCEx_PLL2_Config+0x15c>)
 800a8c8:	4313      	orrs	r3, r2
 800a8ca:	628b      	str	r3, [r1, #40]	@ 0x28
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	685b      	ldr	r3, [r3, #4]
 800a8d0:	3b01      	subs	r3, #1
 800a8d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	689b      	ldr	r3, [r3, #8]
 800a8da:	3b01      	subs	r3, #1
 800a8dc:	025b      	lsls	r3, r3, #9
 800a8de:	b29b      	uxth	r3, r3
 800a8e0:	431a      	orrs	r2, r3
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	68db      	ldr	r3, [r3, #12]
 800a8e6:	3b01      	subs	r3, #1
 800a8e8:	041b      	lsls	r3, r3, #16
 800a8ea:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a8ee:	431a      	orrs	r2, r3
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	691b      	ldr	r3, [r3, #16]
 800a8f4:	3b01      	subs	r3, #1
 800a8f6:	061b      	lsls	r3, r3, #24
 800a8f8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a8fc:	4931      	ldr	r1, [pc, #196]	@ (800a9c4 <RCCEx_PLL2_Config+0x15c>)
 800a8fe:	4313      	orrs	r3, r2
 800a900:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a902:	4b30      	ldr	r3, [pc, #192]	@ (800a9c4 <RCCEx_PLL2_Config+0x15c>)
 800a904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a906:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	695b      	ldr	r3, [r3, #20]
 800a90e:	492d      	ldr	r1, [pc, #180]	@ (800a9c4 <RCCEx_PLL2_Config+0x15c>)
 800a910:	4313      	orrs	r3, r2
 800a912:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a914:	4b2b      	ldr	r3, [pc, #172]	@ (800a9c4 <RCCEx_PLL2_Config+0x15c>)
 800a916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a918:	f023 0220 	bic.w	r2, r3, #32
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	699b      	ldr	r3, [r3, #24]
 800a920:	4928      	ldr	r1, [pc, #160]	@ (800a9c4 <RCCEx_PLL2_Config+0x15c>)
 800a922:	4313      	orrs	r3, r2
 800a924:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a926:	4b27      	ldr	r3, [pc, #156]	@ (800a9c4 <RCCEx_PLL2_Config+0x15c>)
 800a928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a92a:	4a26      	ldr	r2, [pc, #152]	@ (800a9c4 <RCCEx_PLL2_Config+0x15c>)
 800a92c:	f023 0310 	bic.w	r3, r3, #16
 800a930:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a932:	4b24      	ldr	r3, [pc, #144]	@ (800a9c4 <RCCEx_PLL2_Config+0x15c>)
 800a934:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a936:	4b24      	ldr	r3, [pc, #144]	@ (800a9c8 <RCCEx_PLL2_Config+0x160>)
 800a938:	4013      	ands	r3, r2
 800a93a:	687a      	ldr	r2, [r7, #4]
 800a93c:	69d2      	ldr	r2, [r2, #28]
 800a93e:	00d2      	lsls	r2, r2, #3
 800a940:	4920      	ldr	r1, [pc, #128]	@ (800a9c4 <RCCEx_PLL2_Config+0x15c>)
 800a942:	4313      	orrs	r3, r2
 800a944:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a946:	4b1f      	ldr	r3, [pc, #124]	@ (800a9c4 <RCCEx_PLL2_Config+0x15c>)
 800a948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a94a:	4a1e      	ldr	r2, [pc, #120]	@ (800a9c4 <RCCEx_PLL2_Config+0x15c>)
 800a94c:	f043 0310 	orr.w	r3, r3, #16
 800a950:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d106      	bne.n	800a966 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a958:	4b1a      	ldr	r3, [pc, #104]	@ (800a9c4 <RCCEx_PLL2_Config+0x15c>)
 800a95a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a95c:	4a19      	ldr	r2, [pc, #100]	@ (800a9c4 <RCCEx_PLL2_Config+0x15c>)
 800a95e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a962:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a964:	e00f      	b.n	800a986 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	2b01      	cmp	r3, #1
 800a96a:	d106      	bne.n	800a97a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a96c:	4b15      	ldr	r3, [pc, #84]	@ (800a9c4 <RCCEx_PLL2_Config+0x15c>)
 800a96e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a970:	4a14      	ldr	r2, [pc, #80]	@ (800a9c4 <RCCEx_PLL2_Config+0x15c>)
 800a972:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a976:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a978:	e005      	b.n	800a986 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a97a:	4b12      	ldr	r3, [pc, #72]	@ (800a9c4 <RCCEx_PLL2_Config+0x15c>)
 800a97c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a97e:	4a11      	ldr	r2, [pc, #68]	@ (800a9c4 <RCCEx_PLL2_Config+0x15c>)
 800a980:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a984:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a986:	4b0f      	ldr	r3, [pc, #60]	@ (800a9c4 <RCCEx_PLL2_Config+0x15c>)
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	4a0e      	ldr	r2, [pc, #56]	@ (800a9c4 <RCCEx_PLL2_Config+0x15c>)
 800a98c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a990:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a992:	f7f8 faa9 	bl	8002ee8 <HAL_GetTick>
 800a996:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a998:	e008      	b.n	800a9ac <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a99a:	f7f8 faa5 	bl	8002ee8 <HAL_GetTick>
 800a99e:	4602      	mov	r2, r0
 800a9a0:	68bb      	ldr	r3, [r7, #8]
 800a9a2:	1ad3      	subs	r3, r2, r3
 800a9a4:	2b02      	cmp	r3, #2
 800a9a6:	d901      	bls.n	800a9ac <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a9a8:	2303      	movs	r3, #3
 800a9aa:	e006      	b.n	800a9ba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a9ac:	4b05      	ldr	r3, [pc, #20]	@ (800a9c4 <RCCEx_PLL2_Config+0x15c>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d0f0      	beq.n	800a99a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a9b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	3710      	adds	r7, #16
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	bd80      	pop	{r7, pc}
 800a9c2:	bf00      	nop
 800a9c4:	58024400 	.word	0x58024400
 800a9c8:	ffff0007 	.word	0xffff0007

0800a9cc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b084      	sub	sp, #16
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
 800a9d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a9da:	4b53      	ldr	r3, [pc, #332]	@ (800ab28 <RCCEx_PLL3_Config+0x15c>)
 800a9dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9de:	f003 0303 	and.w	r3, r3, #3
 800a9e2:	2b03      	cmp	r3, #3
 800a9e4:	d101      	bne.n	800a9ea <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a9e6:	2301      	movs	r3, #1
 800a9e8:	e099      	b.n	800ab1e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a9ea:	4b4f      	ldr	r3, [pc, #316]	@ (800ab28 <RCCEx_PLL3_Config+0x15c>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	4a4e      	ldr	r2, [pc, #312]	@ (800ab28 <RCCEx_PLL3_Config+0x15c>)
 800a9f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a9f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a9f6:	f7f8 fa77 	bl	8002ee8 <HAL_GetTick>
 800a9fa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a9fc:	e008      	b.n	800aa10 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a9fe:	f7f8 fa73 	bl	8002ee8 <HAL_GetTick>
 800aa02:	4602      	mov	r2, r0
 800aa04:	68bb      	ldr	r3, [r7, #8]
 800aa06:	1ad3      	subs	r3, r2, r3
 800aa08:	2b02      	cmp	r3, #2
 800aa0a:	d901      	bls.n	800aa10 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800aa0c:	2303      	movs	r3, #3
 800aa0e:	e086      	b.n	800ab1e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800aa10:	4b45      	ldr	r3, [pc, #276]	@ (800ab28 <RCCEx_PLL3_Config+0x15c>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d1f0      	bne.n	800a9fe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800aa1c:	4b42      	ldr	r3, [pc, #264]	@ (800ab28 <RCCEx_PLL3_Config+0x15c>)
 800aa1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa20:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	051b      	lsls	r3, r3, #20
 800aa2a:	493f      	ldr	r1, [pc, #252]	@ (800ab28 <RCCEx_PLL3_Config+0x15c>)
 800aa2c:	4313      	orrs	r3, r2
 800aa2e:	628b      	str	r3, [r1, #40]	@ 0x28
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	685b      	ldr	r3, [r3, #4]
 800aa34:	3b01      	subs	r3, #1
 800aa36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	689b      	ldr	r3, [r3, #8]
 800aa3e:	3b01      	subs	r3, #1
 800aa40:	025b      	lsls	r3, r3, #9
 800aa42:	b29b      	uxth	r3, r3
 800aa44:	431a      	orrs	r2, r3
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	68db      	ldr	r3, [r3, #12]
 800aa4a:	3b01      	subs	r3, #1
 800aa4c:	041b      	lsls	r3, r3, #16
 800aa4e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800aa52:	431a      	orrs	r2, r3
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	691b      	ldr	r3, [r3, #16]
 800aa58:	3b01      	subs	r3, #1
 800aa5a:	061b      	lsls	r3, r3, #24
 800aa5c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800aa60:	4931      	ldr	r1, [pc, #196]	@ (800ab28 <RCCEx_PLL3_Config+0x15c>)
 800aa62:	4313      	orrs	r3, r2
 800aa64:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800aa66:	4b30      	ldr	r3, [pc, #192]	@ (800ab28 <RCCEx_PLL3_Config+0x15c>)
 800aa68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa6a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	695b      	ldr	r3, [r3, #20]
 800aa72:	492d      	ldr	r1, [pc, #180]	@ (800ab28 <RCCEx_PLL3_Config+0x15c>)
 800aa74:	4313      	orrs	r3, r2
 800aa76:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800aa78:	4b2b      	ldr	r3, [pc, #172]	@ (800ab28 <RCCEx_PLL3_Config+0x15c>)
 800aa7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa7c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	699b      	ldr	r3, [r3, #24]
 800aa84:	4928      	ldr	r1, [pc, #160]	@ (800ab28 <RCCEx_PLL3_Config+0x15c>)
 800aa86:	4313      	orrs	r3, r2
 800aa88:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800aa8a:	4b27      	ldr	r3, [pc, #156]	@ (800ab28 <RCCEx_PLL3_Config+0x15c>)
 800aa8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa8e:	4a26      	ldr	r2, [pc, #152]	@ (800ab28 <RCCEx_PLL3_Config+0x15c>)
 800aa90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aa94:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800aa96:	4b24      	ldr	r3, [pc, #144]	@ (800ab28 <RCCEx_PLL3_Config+0x15c>)
 800aa98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800aa9a:	4b24      	ldr	r3, [pc, #144]	@ (800ab2c <RCCEx_PLL3_Config+0x160>)
 800aa9c:	4013      	ands	r3, r2
 800aa9e:	687a      	ldr	r2, [r7, #4]
 800aaa0:	69d2      	ldr	r2, [r2, #28]
 800aaa2:	00d2      	lsls	r2, r2, #3
 800aaa4:	4920      	ldr	r1, [pc, #128]	@ (800ab28 <RCCEx_PLL3_Config+0x15c>)
 800aaa6:	4313      	orrs	r3, r2
 800aaa8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800aaaa:	4b1f      	ldr	r3, [pc, #124]	@ (800ab28 <RCCEx_PLL3_Config+0x15c>)
 800aaac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aaae:	4a1e      	ldr	r2, [pc, #120]	@ (800ab28 <RCCEx_PLL3_Config+0x15c>)
 800aab0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aab4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800aab6:	683b      	ldr	r3, [r7, #0]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d106      	bne.n	800aaca <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800aabc:	4b1a      	ldr	r3, [pc, #104]	@ (800ab28 <RCCEx_PLL3_Config+0x15c>)
 800aabe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aac0:	4a19      	ldr	r2, [pc, #100]	@ (800ab28 <RCCEx_PLL3_Config+0x15c>)
 800aac2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800aac6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800aac8:	e00f      	b.n	800aaea <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	2b01      	cmp	r3, #1
 800aace:	d106      	bne.n	800aade <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800aad0:	4b15      	ldr	r3, [pc, #84]	@ (800ab28 <RCCEx_PLL3_Config+0x15c>)
 800aad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aad4:	4a14      	ldr	r2, [pc, #80]	@ (800ab28 <RCCEx_PLL3_Config+0x15c>)
 800aad6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800aada:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800aadc:	e005      	b.n	800aaea <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800aade:	4b12      	ldr	r3, [pc, #72]	@ (800ab28 <RCCEx_PLL3_Config+0x15c>)
 800aae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aae2:	4a11      	ldr	r2, [pc, #68]	@ (800ab28 <RCCEx_PLL3_Config+0x15c>)
 800aae4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800aae8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800aaea:	4b0f      	ldr	r3, [pc, #60]	@ (800ab28 <RCCEx_PLL3_Config+0x15c>)
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	4a0e      	ldr	r2, [pc, #56]	@ (800ab28 <RCCEx_PLL3_Config+0x15c>)
 800aaf0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aaf4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aaf6:	f7f8 f9f7 	bl	8002ee8 <HAL_GetTick>
 800aafa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800aafc:	e008      	b.n	800ab10 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800aafe:	f7f8 f9f3 	bl	8002ee8 <HAL_GetTick>
 800ab02:	4602      	mov	r2, r0
 800ab04:	68bb      	ldr	r3, [r7, #8]
 800ab06:	1ad3      	subs	r3, r2, r3
 800ab08:	2b02      	cmp	r3, #2
 800ab0a:	d901      	bls.n	800ab10 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ab0c:	2303      	movs	r3, #3
 800ab0e:	e006      	b.n	800ab1e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ab10:	4b05      	ldr	r3, [pc, #20]	@ (800ab28 <RCCEx_PLL3_Config+0x15c>)
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d0f0      	beq.n	800aafe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800ab1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab1e:	4618      	mov	r0, r3
 800ab20:	3710      	adds	r7, #16
 800ab22:	46bd      	mov	sp, r7
 800ab24:	bd80      	pop	{r7, pc}
 800ab26:	bf00      	nop
 800ab28:	58024400 	.word	0x58024400
 800ab2c:	ffff0007 	.word	0xffff0007

0800ab30 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b086      	sub	sp, #24
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	60f8      	str	r0, [r7, #12]
 800ab38:	60b9      	str	r1, [r7, #8]
 800ab3a:	607a      	str	r2, [r7, #4]
 800ab3c:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800ab3e:	68bb      	ldr	r3, [r7, #8]
 800ab40:	2b02      	cmp	r3, #2
 800ab42:	d904      	bls.n	800ab4e <HAL_SAI_InitProtocol+0x1e>
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	3b03      	subs	r3, #3
 800ab48:	2b01      	cmp	r3, #1
 800ab4a:	d812      	bhi.n	800ab72 <HAL_SAI_InitProtocol+0x42>
 800ab4c:	e008      	b.n	800ab60 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	687a      	ldr	r2, [r7, #4]
 800ab52:	68b9      	ldr	r1, [r7, #8]
 800ab54:	68f8      	ldr	r0, [r7, #12]
 800ab56:	f000 fc2f 	bl	800b3b8 <SAI_InitI2S>
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	75fb      	strb	r3, [r7, #23]
      break;
 800ab5e:	e00b      	b.n	800ab78 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	687a      	ldr	r2, [r7, #4]
 800ab64:	68b9      	ldr	r1, [r7, #8]
 800ab66:	68f8      	ldr	r0, [r7, #12]
 800ab68:	f000 fcd8 	bl	800b51c <SAI_InitPCM>
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	75fb      	strb	r3, [r7, #23]
      break;
 800ab70:	e002      	b.n	800ab78 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800ab72:	2301      	movs	r3, #1
 800ab74:	75fb      	strb	r3, [r7, #23]
      break;
 800ab76:	bf00      	nop
  }

  if (status == HAL_OK)
 800ab78:	7dfb      	ldrb	r3, [r7, #23]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d104      	bne.n	800ab88 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800ab7e:	68f8      	ldr	r0, [r7, #12]
 800ab80:	f000 f808 	bl	800ab94 <HAL_SAI_Init>
 800ab84:	4603      	mov	r3, r0
 800ab86:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800ab88:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	3718      	adds	r7, #24
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	bd80      	pop	{r7, pc}
	...

0800ab94 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b08a      	sub	sp, #40	@ 0x28
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d101      	bne.n	800aba6 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800aba2:	2301      	movs	r3, #1
 800aba4:	e28e      	b.n	800b0c4 <HAL_SAI_Init+0x530>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800aba6:	f7f8 f9cf 	bl	8002f48 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800abb0:	2b01      	cmp	r3, #1
 800abb2:	d113      	bne.n	800abdc <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	4a96      	ldr	r2, [pc, #600]	@ (800ae14 <HAL_SAI_Init+0x280>)
 800abba:	4293      	cmp	r3, r2
 800abbc:	d004      	beq.n	800abc8 <HAL_SAI_Init+0x34>
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	4a95      	ldr	r2, [pc, #596]	@ (800ae18 <HAL_SAI_Init+0x284>)
 800abc4:	4293      	cmp	r3, r2
 800abc6:	d107      	bne.n	800abd8 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800abcc:	2b01      	cmp	r3, #1
 800abce:	d103      	bne.n	800abd8 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d001      	beq.n	800abdc <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 800abd8:	2301      	movs	r3, #1
 800abda:	e273      	b.n	800b0c4 <HAL_SAI_Init+0x530>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	4a8c      	ldr	r2, [pc, #560]	@ (800ae14 <HAL_SAI_Init+0x280>)
 800abe2:	4293      	cmp	r3, r2
 800abe4:	d004      	beq.n	800abf0 <HAL_SAI_Init+0x5c>
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	4a8c      	ldr	r2, [pc, #560]	@ (800ae1c <HAL_SAI_Init+0x288>)
 800abec:	4293      	cmp	r3, r2
 800abee:	d102      	bne.n	800abf6 <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 800abf0:	4b8b      	ldr	r3, [pc, #556]	@ (800ae20 <HAL_SAI_Init+0x28c>)
 800abf2:	61bb      	str	r3, [r7, #24]
 800abf4:	e028      	b.n	800ac48 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	4a8a      	ldr	r2, [pc, #552]	@ (800ae24 <HAL_SAI_Init+0x290>)
 800abfc:	4293      	cmp	r3, r2
 800abfe:	d004      	beq.n	800ac0a <HAL_SAI_Init+0x76>
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	4a88      	ldr	r2, [pc, #544]	@ (800ae28 <HAL_SAI_Init+0x294>)
 800ac06:	4293      	cmp	r3, r2
 800ac08:	d102      	bne.n	800ac10 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 800ac0a:	4b88      	ldr	r3, [pc, #544]	@ (800ae2c <HAL_SAI_Init+0x298>)
 800ac0c:	61bb      	str	r3, [r7, #24]
 800ac0e:	e01b      	b.n	800ac48 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	4a86      	ldr	r2, [pc, #536]	@ (800ae30 <HAL_SAI_Init+0x29c>)
 800ac16:	4293      	cmp	r3, r2
 800ac18:	d004      	beq.n	800ac24 <HAL_SAI_Init+0x90>
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	4a85      	ldr	r2, [pc, #532]	@ (800ae34 <HAL_SAI_Init+0x2a0>)
 800ac20:	4293      	cmp	r3, r2
 800ac22:	d102      	bne.n	800ac2a <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 800ac24:	4b84      	ldr	r3, [pc, #528]	@ (800ae38 <HAL_SAI_Init+0x2a4>)
 800ac26:	61bb      	str	r3, [r7, #24]
 800ac28:	e00e      	b.n	800ac48 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	4a7a      	ldr	r2, [pc, #488]	@ (800ae18 <HAL_SAI_Init+0x284>)
 800ac30:	4293      	cmp	r3, r2
 800ac32:	d004      	beq.n	800ac3e <HAL_SAI_Init+0xaa>
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	4a80      	ldr	r2, [pc, #512]	@ (800ae3c <HAL_SAI_Init+0x2a8>)
 800ac3a:	4293      	cmp	r3, r2
 800ac3c:	d102      	bne.n	800ac44 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 800ac3e:	4b80      	ldr	r3, [pc, #512]	@ (800ae40 <HAL_SAI_Init+0x2ac>)
 800ac40:	61bb      	str	r3, [r7, #24]
 800ac42:	e001      	b.n	800ac48 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800ac44:	2301      	movs	r3, #1
 800ac46:	e23d      	b.n	800b0c4 <HAL_SAI_Init+0x530>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800ac4e:	b2db      	uxtb	r3, r3
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d106      	bne.n	800ac62 <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2200      	movs	r2, #0
 800ac58:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800ac5c:	6878      	ldr	r0, [r7, #4]
 800ac5e:	f7f7 fea9 	bl	80029b4 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 800ac62:	6878      	ldr	r0, [r7, #4]
 800ac64:	f000 fd14 	bl	800b690 <SAI_Disable>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d001      	beq.n	800ac72 <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 800ac6e:	2301      	movs	r3, #1
 800ac70:	e228      	b.n	800b0c4 <HAL_SAI_Init+0x530>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2202      	movs	r2, #2
 800ac76:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	68db      	ldr	r3, [r3, #12]
 800ac7e:	2b02      	cmp	r3, #2
 800ac80:	d00c      	beq.n	800ac9c <HAL_SAI_Init+0x108>
 800ac82:	2b02      	cmp	r3, #2
 800ac84:	d80d      	bhi.n	800aca2 <HAL_SAI_Init+0x10e>
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d002      	beq.n	800ac90 <HAL_SAI_Init+0xfc>
 800ac8a:	2b01      	cmp	r3, #1
 800ac8c:	d003      	beq.n	800ac96 <HAL_SAI_Init+0x102>
 800ac8e:	e008      	b.n	800aca2 <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800ac90:	2300      	movs	r3, #0
 800ac92:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800ac94:	e008      	b.n	800aca8 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800ac96:	2310      	movs	r3, #16
 800ac98:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800ac9a:	e005      	b.n	800aca8 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800ac9c:	2320      	movs	r3, #32
 800ac9e:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800aca0:	e002      	b.n	800aca8 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 800aca2:	2300      	movs	r3, #0
 800aca4:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800aca6:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	689b      	ldr	r3, [r3, #8]
 800acac:	2b05      	cmp	r3, #5
 800acae:	d832      	bhi.n	800ad16 <HAL_SAI_Init+0x182>
 800acb0:	a201      	add	r2, pc, #4	@ (adr r2, 800acb8 <HAL_SAI_Init+0x124>)
 800acb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acb6:	bf00      	nop
 800acb8:	0800acd1 	.word	0x0800acd1
 800acbc:	0800acd7 	.word	0x0800acd7
 800acc0:	0800acdf 	.word	0x0800acdf
 800acc4:	0800ace7 	.word	0x0800ace7
 800acc8:	0800acf7 	.word	0x0800acf7
 800accc:	0800ad07 	.word	0x0800ad07
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800acd0:	2300      	movs	r3, #0
 800acd2:	61fb      	str	r3, [r7, #28]
      break;
 800acd4:	e022      	b.n	800ad1c <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800acd6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800acda:	61fb      	str	r3, [r7, #28]
      break;
 800acdc:	e01e      	b.n	800ad1c <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800acde:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ace2:	61fb      	str	r3, [r7, #28]
      break;
 800ace4:	e01a      	b.n	800ad1c <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800ace6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800acea:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800acec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acee:	f043 0301 	orr.w	r3, r3, #1
 800acf2:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800acf4:	e012      	b.n	800ad1c <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800acf6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800acfa:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 800acfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acfe:	f043 0302 	orr.w	r3, r3, #2
 800ad02:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800ad04:	e00a      	b.n	800ad1c <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800ad06:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ad0a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 800ad0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad0e:	f043 0303 	orr.w	r3, r3, #3
 800ad12:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800ad14:	e002      	b.n	800ad1c <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800ad16:	2300      	movs	r3, #0
 800ad18:	61fb      	str	r3, [r7, #28]
      break;
 800ad1a:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 800ad1c:	69bb      	ldr	r3, [r7, #24]
 800ad1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ad20:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	6a1b      	ldr	r3, [r3, #32]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	f000 80c5 	beq.w	800aeb6 <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	4a37      	ldr	r2, [pc, #220]	@ (800ae14 <HAL_SAI_Init+0x280>)
 800ad36:	4293      	cmp	r3, r2
 800ad38:	d004      	beq.n	800ad44 <HAL_SAI_Init+0x1b0>
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	4a37      	ldr	r2, [pc, #220]	@ (800ae1c <HAL_SAI_Init+0x288>)
 800ad40:	4293      	cmp	r3, r2
 800ad42:	d106      	bne.n	800ad52 <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800ad44:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800ad48:	f04f 0100 	mov.w	r1, #0
 800ad4c:	f7fe fbfc 	bl	8009548 <HAL_RCCEx_GetPeriphCLKFreq>
 800ad50:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	4a33      	ldr	r2, [pc, #204]	@ (800ae24 <HAL_SAI_Init+0x290>)
 800ad58:	4293      	cmp	r3, r2
 800ad5a:	d004      	beq.n	800ad66 <HAL_SAI_Init+0x1d2>
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	4a31      	ldr	r2, [pc, #196]	@ (800ae28 <HAL_SAI_Init+0x294>)
 800ad62:	4293      	cmp	r3, r2
 800ad64:	d106      	bne.n	800ad74 <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800ad66:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800ad6a:	f04f 0100 	mov.w	r1, #0
 800ad6e:	f7fe fbeb 	bl	8009548 <HAL_RCCEx_GetPeriphCLKFreq>
 800ad72:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	4a2d      	ldr	r2, [pc, #180]	@ (800ae30 <HAL_SAI_Init+0x29c>)
 800ad7a:	4293      	cmp	r3, r2
 800ad7c:	d004      	beq.n	800ad88 <HAL_SAI_Init+0x1f4>
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	4a2c      	ldr	r2, [pc, #176]	@ (800ae34 <HAL_SAI_Init+0x2a0>)
 800ad84:	4293      	cmp	r3, r2
 800ad86:	d106      	bne.n	800ad96 <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 800ad88:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800ad8c:	f04f 0100 	mov.w	r1, #0
 800ad90:	f7fe fbda 	bl	8009548 <HAL_RCCEx_GetPeriphCLKFreq>
 800ad94:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	4a1f      	ldr	r2, [pc, #124]	@ (800ae18 <HAL_SAI_Init+0x284>)
 800ad9c:	4293      	cmp	r3, r2
 800ad9e:	d106      	bne.n	800adae <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800ada0:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800ada4:	f04f 0100 	mov.w	r1, #0
 800ada8:	f7fe fbce 	bl	8009548 <HAL_RCCEx_GetPeriphCLKFreq>
 800adac:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	4a22      	ldr	r2, [pc, #136]	@ (800ae3c <HAL_SAI_Init+0x2a8>)
 800adb4:	4293      	cmp	r3, r2
 800adb6:	d106      	bne.n	800adc6 <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800adb8:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800adbc:	f04f 0100 	mov.w	r1, #0
 800adc0:	f7fe fbc2 	bl	8009548 <HAL_RCCEx_GetPeriphCLKFreq>
 800adc4:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	699b      	ldr	r3, [r3, #24]
 800adca:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800adce:	d139      	bne.n	800ae44 <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800add4:	2b04      	cmp	r3, #4
 800add6:	d102      	bne.n	800adde <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800add8:	2340      	movs	r3, #64	@ 0x40
 800adda:	60fb      	str	r3, [r7, #12]
 800addc:	e00a      	b.n	800adf4 <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ade2:	2b08      	cmp	r3, #8
 800ade4:	d103      	bne.n	800adee <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800ade6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800adea:	60fb      	str	r3, [r7, #12]
 800adec:	e002      	b.n	800adf4 <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800adf2:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800adf4:	697a      	ldr	r2, [r7, #20]
 800adf6:	4613      	mov	r3, r2
 800adf8:	009b      	lsls	r3, r3, #2
 800adfa:	4413      	add	r3, r2
 800adfc:	005b      	lsls	r3, r3, #1
 800adfe:	4619      	mov	r1, r3
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	6a1b      	ldr	r3, [r3, #32]
 800ae04:	68fa      	ldr	r2, [r7, #12]
 800ae06:	fb02 f303 	mul.w	r3, r2, r3
 800ae0a:	fbb1 f3f3 	udiv	r3, r1, r3
 800ae0e:	613b      	str	r3, [r7, #16]
 800ae10:	e030      	b.n	800ae74 <HAL_SAI_Init+0x2e0>
 800ae12:	bf00      	nop
 800ae14:	40015804 	.word	0x40015804
 800ae18:	58005404 	.word	0x58005404
 800ae1c:	40015824 	.word	0x40015824
 800ae20:	40015800 	.word	0x40015800
 800ae24:	40015c04 	.word	0x40015c04
 800ae28:	40015c24 	.word	0x40015c24
 800ae2c:	40015c00 	.word	0x40015c00
 800ae30:	40016004 	.word	0x40016004
 800ae34:	40016024 	.word	0x40016024
 800ae38:	40016000 	.word	0x40016000
 800ae3c:	58005424 	.word	0x58005424
 800ae40:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae48:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ae4c:	d101      	bne.n	800ae52 <HAL_SAI_Init+0x2be>
 800ae4e:	2302      	movs	r3, #2
 800ae50:	e000      	b.n	800ae54 <HAL_SAI_Init+0x2c0>
 800ae52:	2301      	movs	r3, #1
 800ae54:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800ae56:	697a      	ldr	r2, [r7, #20]
 800ae58:	4613      	mov	r3, r2
 800ae5a:	009b      	lsls	r3, r3, #2
 800ae5c:	4413      	add	r3, r2
 800ae5e:	005b      	lsls	r3, r3, #1
 800ae60:	4619      	mov	r1, r3
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	6a1b      	ldr	r3, [r3, #32]
 800ae66:	68ba      	ldr	r2, [r7, #8]
 800ae68:	fb02 f303 	mul.w	r3, r2, r3
 800ae6c:	021b      	lsls	r3, r3, #8
 800ae6e:	fbb1 f3f3 	udiv	r3, r1, r3
 800ae72:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800ae74:	693b      	ldr	r3, [r7, #16]
 800ae76:	4a95      	ldr	r2, [pc, #596]	@ (800b0cc <HAL_SAI_Init+0x538>)
 800ae78:	fba2 2303 	umull	r2, r3, r2, r3
 800ae7c:	08da      	lsrs	r2, r3, #3
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800ae82:	6939      	ldr	r1, [r7, #16]
 800ae84:	4b91      	ldr	r3, [pc, #580]	@ (800b0cc <HAL_SAI_Init+0x538>)
 800ae86:	fba3 2301 	umull	r2, r3, r3, r1
 800ae8a:	08da      	lsrs	r2, r3, #3
 800ae8c:	4613      	mov	r3, r2
 800ae8e:	009b      	lsls	r3, r3, #2
 800ae90:	4413      	add	r3, r2
 800ae92:	005b      	lsls	r3, r3, #1
 800ae94:	1aca      	subs	r2, r1, r3
 800ae96:	2a08      	cmp	r2, #8
 800ae98:	d904      	bls.n	800aea4 <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae9e:	1c5a      	adds	r2, r3, #1
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aea8:	2b04      	cmp	r3, #4
 800aeaa:	d104      	bne.n	800aeb6 <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aeb0:	085a      	lsrs	r2, r3, #1
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	685b      	ldr	r3, [r3, #4]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d003      	beq.n	800aec6 <HAL_SAI_Init+0x332>
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	685b      	ldr	r3, [r3, #4]
 800aec2:	2b02      	cmp	r3, #2
 800aec4:	d109      	bne.n	800aeda <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aeca:	2b01      	cmp	r3, #1
 800aecc:	d101      	bne.n	800aed2 <HAL_SAI_Init+0x33e>
 800aece:	2300      	movs	r3, #0
 800aed0:	e001      	b.n	800aed6 <HAL_SAI_Init+0x342>
 800aed2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aed6:	623b      	str	r3, [r7, #32]
 800aed8:	e008      	b.n	800aeec <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aede:	2b01      	cmp	r3, #1
 800aee0:	d102      	bne.n	800aee8 <HAL_SAI_Init+0x354>
 800aee2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aee6:	e000      	b.n	800aeea <HAL_SAI_Init+0x356>
 800aee8:	2300      	movs	r3, #0
 800aeea:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800aeec:	f7f8 f82c 	bl	8002f48 <HAL_GetREVID>
 800aef0:	4603      	mov	r3, r0
 800aef2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aef6:	d331      	bcc.n	800af5c <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	6819      	ldr	r1, [r3, #0]
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681a      	ldr	r2, [r3, #0]
 800af02:	4b73      	ldr	r3, [pc, #460]	@ (800b0d0 <HAL_SAI_Init+0x53c>)
 800af04:	400b      	ands	r3, r1
 800af06:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	6819      	ldr	r1, [r3, #0]
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	685a      	ldr	r2, [r3, #4]
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af16:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800af1c:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800af22:	431a      	orrs	r2, r3
 800af24:	6a3b      	ldr	r3, [r7, #32]
 800af26:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800af28:	69fb      	ldr	r3, [r7, #28]
 800af2a:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            ckstr_bits | syncen_bits |                             \
 800af30:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	695b      	ldr	r3, [r3, #20]
 800af36:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800af3c:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af42:	051b      	lsls	r3, r3, #20
 800af44:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800af4a:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	691b      	ldr	r3, [r3, #16]
 800af50:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	430a      	orrs	r2, r1
 800af58:	601a      	str	r2, [r3, #0]
 800af5a:	e02d      	b.n	800afb8 <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	6819      	ldr	r1, [r3, #0]
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681a      	ldr	r2, [r3, #0]
 800af66:	4b5b      	ldr	r3, [pc, #364]	@ (800b0d4 <HAL_SAI_Init+0x540>)
 800af68:	400b      	ands	r3, r1
 800af6a:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	6819      	ldr	r1, [r3, #0]
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	685a      	ldr	r2, [r3, #4]
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af7a:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800af80:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800af86:	431a      	orrs	r2, r3
 800af88:	6a3b      	ldr	r3, [r7, #32]
 800af8a:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800af8c:	69fb      	ldr	r3, [r7, #28]
 800af8e:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            ckstr_bits | syncen_bits |                             \
 800af94:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	695b      	ldr	r3, [r3, #20]
 800af9a:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800afa0:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afa6:	051b      	lsls	r3, r3, #20
 800afa8:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800afae:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	430a      	orrs	r2, r1
 800afb6:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	6859      	ldr	r1, [r3, #4]
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681a      	ldr	r2, [r3, #0]
 800afc2:	4b45      	ldr	r3, [pc, #276]	@ (800b0d8 <HAL_SAI_Init+0x544>)
 800afc4:	400b      	ands	r3, r1
 800afc6:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	6859      	ldr	r1, [r3, #4]
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	69da      	ldr	r2, [r3, #28]
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800afd6:	431a      	orrs	r2, r3
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800afdc:	431a      	orrs	r2, r3
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	430a      	orrs	r2, r1
 800afe4:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	6899      	ldr	r1, [r3, #8]
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681a      	ldr	r2, [r3, #0]
 800aff0:	4b3a      	ldr	r3, [pc, #232]	@ (800b0dc <HAL_SAI_Init+0x548>)
 800aff2:	400b      	ands	r3, r1
 800aff4:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	6899      	ldr	r1, [r3, #8]
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b000:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800b006:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 800b00c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 800b012:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b018:	3b01      	subs	r3, #1
 800b01a:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800b01c:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	430a      	orrs	r2, r1
 800b024:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	68d9      	ldr	r1, [r3, #12]
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681a      	ldr	r2, [r3, #0]
 800b030:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800b034:	400b      	ands	r3, r1
 800b036:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	68d9      	ldr	r1, [r3, #12]
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b046:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b04c:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800b04e:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b054:	3b01      	subs	r3, #1
 800b056:	021b      	lsls	r3, r3, #8
 800b058:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	430a      	orrs	r2, r1
 800b060:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	4a1e      	ldr	r2, [pc, #120]	@ (800b0e0 <HAL_SAI_Init+0x54c>)
 800b068:	4293      	cmp	r3, r2
 800b06a:	d004      	beq.n	800b076 <HAL_SAI_Init+0x4e2>
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	4a1c      	ldr	r2, [pc, #112]	@ (800b0e4 <HAL_SAI_Init+0x550>)
 800b072:	4293      	cmp	r3, r2
 800b074:	d119      	bne.n	800b0aa <HAL_SAI_Init+0x516>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800b076:	69bb      	ldr	r3, [r7, #24]
 800b078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b07a:	f023 0201 	bic.w	r2, r3, #1
 800b07e:	69bb      	ldr	r3, [r7, #24]
 800b080:	645a      	str	r2, [r3, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b088:	2b01      	cmp	r3, #1
 800b08a:	d10e      	bne.n	800b0aa <HAL_SAI_Init+0x516>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b094:	3b01      	subs	r3, #1
 800b096:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800b098:	431a      	orrs	r2, r3
 800b09a:	69bb      	ldr	r3, [r7, #24]
 800b09c:	645a      	str	r2, [r3, #68]	@ 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800b09e:	69bb      	ldr	r3, [r7, #24]
 800b0a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b0a2:	f043 0201 	orr.w	r2, r3, #1
 800b0a6:	69bb      	ldr	r3, [r7, #24]
 800b0a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	2201      	movs	r2, #1
 800b0b6:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	2200      	movs	r2, #0
 800b0be:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 800b0c2:	2300      	movs	r3, #0
}
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	3728      	adds	r7, #40	@ 0x28
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	bd80      	pop	{r7, pc}
 800b0cc:	cccccccd 	.word	0xcccccccd
 800b0d0:	f005c010 	.word	0xf005c010
 800b0d4:	f805c010 	.word	0xf805c010
 800b0d8:	ffff1ff0 	.word	0xffff1ff0
 800b0dc:	fff88000 	.word	0xfff88000
 800b0e0:	40015804 	.word	0x40015804
 800b0e4:	58005404 	.word	0x58005404

0800b0e8 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b086      	sub	sp, #24
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	60f8      	str	r0, [r7, #12]
 800b0f0:	60b9      	str	r1, [r7, #8]
 800b0f2:	4613      	mov	r3, r2
 800b0f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800b0f6:	f7f7 fef7 	bl	8002ee8 <HAL_GetTick>
 800b0fa:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d002      	beq.n	800b108 <HAL_SAI_Transmit_DMA+0x20>
 800b102:	88fb      	ldrh	r3, [r7, #6]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d101      	bne.n	800b10c <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800b108:	2301      	movs	r3, #1
 800b10a:	e098      	b.n	800b23e <HAL_SAI_Transmit_DMA+0x156>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800b112:	b2db      	uxtb	r3, r3
 800b114:	2b01      	cmp	r3, #1
 800b116:	f040 8091 	bne.w	800b23c <HAL_SAI_Transmit_DMA+0x154>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800b120:	2b01      	cmp	r3, #1
 800b122:	d101      	bne.n	800b128 <HAL_SAI_Transmit_DMA+0x40>
 800b124:	2302      	movs	r3, #2
 800b126:	e08a      	b.n	800b23e <HAL_SAI_Transmit_DMA+0x156>
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	2201      	movs	r2, #1
 800b12c:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->pBuffPtr = pData;
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	68ba      	ldr	r2, [r7, #8]
 800b134:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->XferSize = Size;
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	88fa      	ldrh	r2, [r7, #6]
 800b13a:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	88fa      	ldrh	r2, [r7, #6]
 800b142:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	2200      	movs	r2, #0
 800b14a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	2212      	movs	r2, #18
 800b152:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b15c:	4a3a      	ldr	r2, [pc, #232]	@ (800b248 <HAL_SAI_Transmit_DMA+0x160>)
 800b15e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b166:	4a39      	ldr	r2, [pc, #228]	@ (800b24c <HAL_SAI_Transmit_DMA+0x164>)
 800b168:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b170:	4a37      	ldr	r2, [pc, #220]	@ (800b250 <HAL_SAI_Transmit_DMA+0x168>)
 800b172:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b17a:	2200      	movs	r2, #0
 800b17c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b188:	4619      	mov	r1, r3
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	331c      	adds	r3, #28
 800b190:	461a      	mov	r2, r3
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 800b198:	f7f8 fb4e 	bl	8003838 <HAL_DMA_Start_IT>
 800b19c:	4603      	mov	r3, r0
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d005      	beq.n	800b1ae <HAL_SAI_Transmit_DMA+0xc6>
    {
      __HAL_UNLOCK(hsai);
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      return  HAL_ERROR;
 800b1aa:	2301      	movs	r3, #1
 800b1ac:	e047      	b.n	800b23e <HAL_SAI_Transmit_DMA+0x156>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800b1ae:	2100      	movs	r1, #0
 800b1b0:	68f8      	ldr	r0, [r7, #12]
 800b1b2:	f000 fa35 	bl	800b620 <SAI_InterruptFlag>
 800b1b6:	4601      	mov	r1, r0
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	691a      	ldr	r2, [r3, #16]
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	430a      	orrs	r2, r1
 800b1c4:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	681a      	ldr	r2, [r3, #0]
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800b1d4:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800b1d6:	e015      	b.n	800b204 <HAL_SAI_Transmit_DMA+0x11c>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800b1d8:	f7f7 fe86 	bl	8002ee8 <HAL_GetTick>
 800b1dc:	4602      	mov	r2, r0
 800b1de:	697b      	ldr	r3, [r7, #20]
 800b1e0:	1ad3      	subs	r3, r2, r3
 800b1e2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b1e6:	d90d      	bls.n	800b204 <HAL_SAI_Transmit_DMA+0x11c>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b1ee:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

        return HAL_TIMEOUT;
 800b200:	2303      	movs	r3, #3
 800b202:	e01c      	b.n	800b23e <HAL_SAI_Transmit_DMA+0x156>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	695b      	ldr	r3, [r3, #20]
 800b20a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d0e2      	beq.n	800b1d8 <HAL_SAI_Transmit_DMA+0xf0>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d107      	bne.n	800b230 <HAL_SAI_Transmit_DMA+0x148>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	681a      	ldr	r2, [r3, #0]
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800b22e:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	2200      	movs	r2, #0
 800b234:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 800b238:	2300      	movs	r3, #0
 800b23a:	e000      	b.n	800b23e <HAL_SAI_Transmit_DMA+0x156>
  }
  else
  {
    return HAL_BUSY;
 800b23c:	2302      	movs	r3, #2
  }
}
 800b23e:	4618      	mov	r0, r3
 800b240:	3718      	adds	r7, #24
 800b242:	46bd      	mov	sp, r7
 800b244:	bd80      	pop	{r7, pc}
 800b246:	bf00      	nop
 800b248:	0800b765 	.word	0x0800b765
 800b24c:	0800b705 	.word	0x0800b705
 800b250:	0800b7fd 	.word	0x0800b7fd

0800b254 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800b254:	b580      	push	{r7, lr}
 800b256:	b084      	sub	sp, #16
 800b258:	af00      	add	r7, sp, #0
 800b25a:	60f8      	str	r0, [r7, #12]
 800b25c:	60b9      	str	r1, [r7, #8]
 800b25e:	4613      	mov	r3, r2
 800b260:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 800b262:	68bb      	ldr	r3, [r7, #8]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d002      	beq.n	800b26e <HAL_SAI_Receive_DMA+0x1a>
 800b268:	88fb      	ldrh	r3, [r7, #6]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d101      	bne.n	800b272 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800b26e:	2301      	movs	r3, #1
 800b270:	e079      	b.n	800b366 <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800b278:	b2db      	uxtb	r3, r3
 800b27a:	2b01      	cmp	r3, #1
 800b27c:	d172      	bne.n	800b364 <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800b284:	2b01      	cmp	r3, #1
 800b286:	d101      	bne.n	800b28c <HAL_SAI_Receive_DMA+0x38>
 800b288:	2302      	movs	r3, #2
 800b28a:	e06c      	b.n	800b366 <HAL_SAI_Receive_DMA+0x112>
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	2201      	movs	r2, #1
 800b290:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->pBuffPtr = pData;
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	68ba      	ldr	r2, [r7, #8]
 800b298:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->XferSize = Size;
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	88fa      	ldrh	r2, [r7, #6]
 800b29e:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	88fa      	ldrh	r2, [r7, #6]
 800b2a6:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	2222      	movs	r2, #34	@ 0x22
 800b2b6:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b2c0:	4a2b      	ldr	r2, [pc, #172]	@ (800b370 <HAL_SAI_Receive_DMA+0x11c>)
 800b2c2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b2ca:	4a2a      	ldr	r2, [pc, #168]	@ (800b374 <HAL_SAI_Receive_DMA+0x120>)
 800b2cc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b2d4:	4a28      	ldr	r2, [pc, #160]	@ (800b378 <HAL_SAI_Receive_DMA+0x124>)
 800b2d6:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b2de:	2200      	movs	r2, #0
 800b2e0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	331c      	adds	r3, #28
 800b2ee:	4619      	mov	r1, r3
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b2f4:	461a      	mov	r2, r3
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 800b2fc:	f7f8 fa9c 	bl	8003838 <HAL_DMA_Start_IT>
 800b300:	4603      	mov	r3, r0
 800b302:	2b00      	cmp	r3, #0
 800b304:	d005      	beq.n	800b312 <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	2200      	movs	r2, #0
 800b30a:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      return  HAL_ERROR;
 800b30e:	2301      	movs	r3, #1
 800b310:	e029      	b.n	800b366 <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800b312:	2100      	movs	r1, #0
 800b314:	68f8      	ldr	r0, [r7, #12]
 800b316:	f000 f983 	bl	800b620 <SAI_InterruptFlag>
 800b31a:	4601      	mov	r1, r0
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	691a      	ldr	r2, [r3, #16]
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	430a      	orrs	r2, r1
 800b328:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	681a      	ldr	r2, [r3, #0]
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800b338:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b344:	2b00      	cmp	r3, #0
 800b346:	d107      	bne.n	800b358 <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	681a      	ldr	r2, [r3, #0]
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800b356:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	2200      	movs	r2, #0
 800b35c:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 800b360:	2300      	movs	r3, #0
 800b362:	e000      	b.n	800b366 <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 800b364:	2302      	movs	r3, #2
  }
}
 800b366:	4618      	mov	r0, r3
 800b368:	3710      	adds	r7, #16
 800b36a:	46bd      	mov	sp, r7
 800b36c:	bd80      	pop	{r7, pc}
 800b36e:	bf00      	nop
 800b370:	0800b7e1 	.word	0x0800b7e1
 800b374:	0800b781 	.word	0x0800b781
 800b378:	0800b7fd 	.word	0x0800b7fd

0800b37c <HAL_SAI_TxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 800b37c:	b480      	push	{r7}
 800b37e:	b083      	sub	sp, #12
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxCpltCallback could be implemented in the user file
   */
}
 800b384:	bf00      	nop
 800b386:	370c      	adds	r7, #12
 800b388:	46bd      	mov	sp, r7
 800b38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38e:	4770      	bx	lr

0800b390 <HAL_SAI_TxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 800b390:	b480      	push	{r7}
 800b392:	b083      	sub	sp, #12
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxHalfCpltCallback could be implemented in the user file
   */
}
 800b398:	bf00      	nop
 800b39a:	370c      	adds	r7, #12
 800b39c:	46bd      	mov	sp, r7
 800b39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a2:	4770      	bx	lr

0800b3a4 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800b3a4:	b480      	push	{r7}
 800b3a6:	b083      	sub	sp, #12
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 800b3ac:	bf00      	nop
 800b3ae:	370c      	adds	r7, #12
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b6:	4770      	bx	lr

0800b3b8 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800b3b8:	b480      	push	{r7}
 800b3ba:	b087      	sub	sp, #28
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	60f8      	str	r0, [r7, #12]
 800b3c0:	60b9      	str	r1, [r7, #8]
 800b3c2:	607a      	str	r2, [r7, #4]
 800b3c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	685b      	ldr	r3, [r3, #4]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d003      	beq.n	800b3e6 <SAI_InitI2S+0x2e>
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	685b      	ldr	r3, [r3, #4]
 800b3e2:	2b02      	cmp	r3, #2
 800b3e4:	d103      	bne.n	800b3ee <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	651a      	str	r2, [r3, #80]	@ 0x50
 800b3ec:	e002      	b.n	800b3f4 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	2201      	movs	r2, #1
 800b3f2:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800b3fa:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b402:	675a      	str	r2, [r3, #116]	@ 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	2200      	movs	r2, #0
 800b408:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	683a      	ldr	r2, [r7, #0]
 800b40e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	f003 0301 	and.w	r3, r3, #1
 800b416:	2b00      	cmp	r3, #0
 800b418:	d001      	beq.n	800b41e <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800b41a:	2301      	movs	r3, #1
 800b41c:	e077      	b.n	800b50e <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800b41e:	68bb      	ldr	r3, [r7, #8]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d107      	bne.n	800b434 <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	2200      	movs	r2, #0
 800b428:	661a      	str	r2, [r3, #96]	@ 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800b430:	665a      	str	r2, [r3, #100]	@ 0x64
 800b432:	e006      	b.n	800b442 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800b43a:	661a      	str	r2, [r3, #96]	@ 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	2200      	movs	r2, #0
 800b440:	665a      	str	r2, [r3, #100]	@ 0x64
  }

  /* Frame definition */
  switch (datasize)
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	2b03      	cmp	r3, #3
 800b446:	d84f      	bhi.n	800b4e8 <SAI_InitI2S+0x130>
 800b448:	a201      	add	r2, pc, #4	@ (adr r2, 800b450 <SAI_InitI2S+0x98>)
 800b44a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b44e:	bf00      	nop
 800b450:	0800b461 	.word	0x0800b461
 800b454:	0800b483 	.word	0x0800b483
 800b458:	0800b4a5 	.word	0x0800b4a5
 800b45c:	0800b4c7 	.word	0x0800b4c7
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	2280      	movs	r2, #128	@ 0x80
 800b464:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	085b      	lsrs	r3, r3, #1
 800b46a:	015a      	lsls	r2, r3, #5
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	085b      	lsrs	r3, r3, #1
 800b474:	011a      	lsls	r2, r3, #4
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	2240      	movs	r2, #64	@ 0x40
 800b47e:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800b480:	e035      	b.n	800b4ee <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	2280      	movs	r2, #128	@ 0x80
 800b486:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	085b      	lsrs	r3, r3, #1
 800b48c:	019a      	lsls	r2, r3, #6
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	085b      	lsrs	r3, r3, #1
 800b496:	015a      	lsls	r2, r3, #5
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	2280      	movs	r2, #128	@ 0x80
 800b4a0:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800b4a2:	e024      	b.n	800b4ee <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	22c0      	movs	r2, #192	@ 0xc0
 800b4a8:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800b4aa:	683b      	ldr	r3, [r7, #0]
 800b4ac:	085b      	lsrs	r3, r3, #1
 800b4ae:	019a      	lsls	r2, r3, #6
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800b4b4:	683b      	ldr	r3, [r7, #0]
 800b4b6:	085b      	lsrs	r3, r3, #1
 800b4b8:	015a      	lsls	r2, r3, #5
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	2280      	movs	r2, #128	@ 0x80
 800b4c2:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800b4c4:	e013      	b.n	800b4ee <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	22e0      	movs	r2, #224	@ 0xe0
 800b4ca:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	085b      	lsrs	r3, r3, #1
 800b4d0:	019a      	lsls	r2, r3, #6
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	085b      	lsrs	r3, r3, #1
 800b4da:	015a      	lsls	r2, r3, #5
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	2280      	movs	r2, #128	@ 0x80
 800b4e4:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800b4e6:	e002      	b.n	800b4ee <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800b4e8:	2301      	movs	r3, #1
 800b4ea:	75fb      	strb	r3, [r7, #23]
      break;
 800b4ec:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800b4ee:	68bb      	ldr	r3, [r7, #8]
 800b4f0:	2b02      	cmp	r3, #2
 800b4f2:	d10b      	bne.n	800b50c <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2b01      	cmp	r3, #1
 800b4f8:	d102      	bne.n	800b500 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	2210      	movs	r2, #16
 800b4fe:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2b02      	cmp	r3, #2
 800b504:	d102      	bne.n	800b50c <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	2208      	movs	r2, #8
 800b50a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }
  return status;
 800b50c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b50e:	4618      	mov	r0, r3
 800b510:	371c      	adds	r7, #28
 800b512:	46bd      	mov	sp, r7
 800b514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b518:	4770      	bx	lr
 800b51a:	bf00      	nop

0800b51c <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800b51c:	b480      	push	{r7}
 800b51e:	b087      	sub	sp, #28
 800b520:	af00      	add	r7, sp, #0
 800b522:	60f8      	str	r0, [r7, #12]
 800b524:	60b9      	str	r1, [r7, #8]
 800b526:	607a      	str	r2, [r7, #4]
 800b528:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b52a:	2300      	movs	r3, #0
 800b52c:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	2200      	movs	r2, #0
 800b532:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	2200      	movs	r2, #0
 800b538:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	685b      	ldr	r3, [r3, #4]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d003      	beq.n	800b54a <SAI_InitPCM+0x2e>
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	685b      	ldr	r3, [r3, #4]
 800b546:	2b02      	cmp	r3, #2
 800b548:	d103      	bne.n	800b552 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	2201      	movs	r2, #1
 800b54e:	651a      	str	r2, [r3, #80]	@ 0x50
 800b550:	e002      	b.n	800b558 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	2200      	movs	r2, #0
 800b556:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	2200      	movs	r2, #0
 800b55c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800b564:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800b56c:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	2200      	movs	r2, #0
 800b572:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	683a      	ldr	r2, [r7, #0]
 800b578:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b580:	675a      	str	r2, [r3, #116]	@ 0x74

  if (protocol == SAI_PCM_SHORT)
 800b582:	68bb      	ldr	r3, [r7, #8]
 800b584:	2b04      	cmp	r3, #4
 800b586:	d103      	bne.n	800b590 <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	2201      	movs	r2, #1
 800b58c:	659a      	str	r2, [r3, #88]	@ 0x58
 800b58e:	e002      	b.n	800b596 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	220d      	movs	r2, #13
 800b594:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  switch (datasize)
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	2b03      	cmp	r3, #3
 800b59a:	d837      	bhi.n	800b60c <SAI_InitPCM+0xf0>
 800b59c:	a201      	add	r2, pc, #4	@ (adr r2, 800b5a4 <SAI_InitPCM+0x88>)
 800b59e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5a2:	bf00      	nop
 800b5a4:	0800b5b5 	.word	0x0800b5b5
 800b5a8:	0800b5cb 	.word	0x0800b5cb
 800b5ac:	0800b5e1 	.word	0x0800b5e1
 800b5b0:	0800b5f7 	.word	0x0800b5f7
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	2280      	movs	r2, #128	@ 0x80
 800b5b8:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	011a      	lsls	r2, r3, #4
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	2240      	movs	r2, #64	@ 0x40
 800b5c6:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800b5c8:	e023      	b.n	800b612 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	2280      	movs	r2, #128	@ 0x80
 800b5ce:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800b5d0:	683b      	ldr	r3, [r7, #0]
 800b5d2:	015a      	lsls	r2, r3, #5
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	2280      	movs	r2, #128	@ 0x80
 800b5dc:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800b5de:	e018      	b.n	800b612 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	22c0      	movs	r2, #192	@ 0xc0
 800b5e4:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800b5e6:	683b      	ldr	r3, [r7, #0]
 800b5e8:	015a      	lsls	r2, r3, #5
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	2280      	movs	r2, #128	@ 0x80
 800b5f2:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800b5f4:	e00d      	b.n	800b612 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	22e0      	movs	r2, #224	@ 0xe0
 800b5fa:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	015a      	lsls	r2, r3, #5
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	2280      	movs	r2, #128	@ 0x80
 800b608:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800b60a:	e002      	b.n	800b612 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800b60c:	2301      	movs	r3, #1
 800b60e:	75fb      	strb	r3, [r7, #23]
      break;
 800b610:	bf00      	nop
  }

  return status;
 800b612:	7dfb      	ldrb	r3, [r7, #23]
}
 800b614:	4618      	mov	r0, r3
 800b616:	371c      	adds	r7, #28
 800b618:	46bd      	mov	sp, r7
 800b61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61e:	4770      	bx	lr

0800b620 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 800b620:	b480      	push	{r7}
 800b622:	b085      	sub	sp, #20
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
 800b628:	460b      	mov	r3, r1
 800b62a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800b62c:	2301      	movs	r3, #1
 800b62e:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800b630:	78fb      	ldrb	r3, [r7, #3]
 800b632:	2b01      	cmp	r3, #1
 800b634:	d103      	bne.n	800b63e <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	f043 0308 	orr.w	r3, r3, #8
 800b63c:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b642:	2b08      	cmp	r3, #8
 800b644:	d10b      	bne.n	800b65e <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800b64a:	2b03      	cmp	r3, #3
 800b64c:	d003      	beq.n	800b656 <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	685b      	ldr	r3, [r3, #4]
 800b652:	2b01      	cmp	r3, #1
 800b654:	d103      	bne.n	800b65e <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	f043 0310 	orr.w	r3, r3, #16
 800b65c:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	685b      	ldr	r3, [r3, #4]
 800b662:	2b03      	cmp	r3, #3
 800b664:	d003      	beq.n	800b66e <SAI_InterruptFlag+0x4e>
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	685b      	ldr	r3, [r3, #4]
 800b66a:	2b02      	cmp	r3, #2
 800b66c:	d104      	bne.n	800b678 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800b674:	60fb      	str	r3, [r7, #12]
 800b676:	e003      	b.n	800b680 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	f043 0304 	orr.w	r3, r3, #4
 800b67e:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800b680:	68fb      	ldr	r3, [r7, #12]
}
 800b682:	4618      	mov	r0, r3
 800b684:	3714      	adds	r7, #20
 800b686:	46bd      	mov	sp, r7
 800b688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68c:	4770      	bx	lr
	...

0800b690 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800b690:	b480      	push	{r7}
 800b692:	b085      	sub	sp, #20
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800b698:	4b18      	ldr	r3, [pc, #96]	@ (800b6fc <SAI_Disable+0x6c>)
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	4a18      	ldr	r2, [pc, #96]	@ (800b700 <SAI_Disable+0x70>)
 800b69e:	fba2 2303 	umull	r2, r3, r2, r3
 800b6a2:	0b1b      	lsrs	r3, r3, #12
 800b6a4:	009b      	lsls	r3, r3, #2
 800b6a6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	681a      	ldr	r2, [r3, #0]
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800b6ba:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d10a      	bne.n	800b6d8 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b6c8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 800b6d2:	2303      	movs	r3, #3
 800b6d4:	72fb      	strb	r3, [r7, #11]
      break;
 800b6d6:	e009      	b.n	800b6ec <SAI_Disable+0x5c>
    }
    count--;
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	3b01      	subs	r3, #1
 800b6dc:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d1e7      	bne.n	800b6bc <SAI_Disable+0x2c>

  return status;
 800b6ec:	7afb      	ldrb	r3, [r7, #11]
}
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	3714      	adds	r7, #20
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f8:	4770      	bx	lr
 800b6fa:	bf00      	nop
 800b6fc:	24000000 	.word	0x24000000
 800b700:	95cbec1b 	.word	0x95cbec1b

0800b704 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800b704:	b580      	push	{r7, lr}
 800b706:	b084      	sub	sp, #16
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b710:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	69db      	ldr	r3, [r3, #28]
 800b716:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b71a:	d01c      	beq.n	800b756 <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	2200      	movs	r2, #0
 800b720:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	681a      	ldr	r2, [r3, #0]
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800b732:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800b734:	2100      	movs	r1, #0
 800b736:	68f8      	ldr	r0, [r7, #12]
 800b738:	f7ff ff72 	bl	800b620 <SAI_InterruptFlag>
 800b73c:	4603      	mov	r3, r0
 800b73e:	43d9      	mvns	r1, r3
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	691a      	ldr	r2, [r3, #16]
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	400a      	ands	r2, r1
 800b74c:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	2201      	movs	r2, #1
 800b752:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800b756:	68f8      	ldr	r0, [r7, #12]
 800b758:	f7ff fe10 	bl	800b37c <HAL_SAI_TxCpltCallback>
#endif
}
 800b75c:	bf00      	nop
 800b75e:	3710      	adds	r7, #16
 800b760:	46bd      	mov	sp, r7
 800b762:	bd80      	pop	{r7, pc}

0800b764 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b084      	sub	sp, #16
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b770:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800b772:	68f8      	ldr	r0, [r7, #12]
 800b774:	f7ff fe0c 	bl	800b390 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 800b778:	bf00      	nop
 800b77a:	3710      	adds	r7, #16
 800b77c:	46bd      	mov	sp, r7
 800b77e:	bd80      	pop	{r7, pc}

0800b780 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b084      	sub	sp, #16
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b78c:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	69db      	ldr	r3, [r3, #28]
 800b792:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b796:	d01c      	beq.n	800b7d2 <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	681a      	ldr	r2, [r3, #0]
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800b7a6:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800b7b0:	2100      	movs	r1, #0
 800b7b2:	68f8      	ldr	r0, [r7, #12]
 800b7b4:	f7ff ff34 	bl	800b620 <SAI_InterruptFlag>
 800b7b8:	4603      	mov	r3, r0
 800b7ba:	43d9      	mvns	r1, r3
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	691a      	ldr	r2, [r3, #16]
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	400a      	ands	r2, r1
 800b7c8:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	2201      	movs	r2, #1
 800b7ce:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800b7d2:	68f8      	ldr	r0, [r7, #12]
 800b7d4:	f7f6 fd5c 	bl	8002290 <HAL_SAI_RxCpltCallback>
#endif
}
 800b7d8:	bf00      	nop
 800b7da:	3710      	adds	r7, #16
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	bd80      	pop	{r7, pc}

0800b7e0 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b084      	sub	sp, #16
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7ec:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800b7ee:	68f8      	ldr	r0, [r7, #12]
 800b7f0:	f7f6 fd04 	bl	80021fc <HAL_SAI_RxHalfCpltCallback>
#endif
}
 800b7f4:	bf00      	nop
 800b7f6:	3710      	adds	r7, #16
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	bd80      	pop	{r7, pc}

0800b7fc <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b084      	sub	sp, #16
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b808:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800b80a:	6878      	ldr	r0, [r7, #4]
 800b80c:	f7f9 f9a8 	bl	8004b60 <HAL_DMA_GetError>
 800b810:	4603      	mov	r3, r0
 800b812:	2b02      	cmp	r3, #2
 800b814:	d01d      	beq.n	800b852 <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b81c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	681a      	ldr	r2, [r3, #0]
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800b834:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 800b836:	68f8      	ldr	r0, [r7, #12]
 800b838:	f7ff ff2a 	bl	800b690 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	2201      	movs	r2, #1
 800b840:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	2200      	movs	r2, #0
 800b848:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 800b84c:	68f8      	ldr	r0, [r7, #12]
 800b84e:	f7ff fda9 	bl	800b3a4 <HAL_SAI_ErrorCallback>
#endif
  }
}
 800b852:	bf00      	nop
 800b854:	3710      	adds	r7, #16
 800b856:	46bd      	mov	sp, r7
 800b858:	bd80      	pop	{r7, pc}

0800b85a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b85a:	b580      	push	{r7, lr}
 800b85c:	b082      	sub	sp, #8
 800b85e:	af00      	add	r7, sp, #0
 800b860:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d101      	bne.n	800b86c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b868:	2301      	movs	r3, #1
 800b86a:	e042      	b.n	800b8f2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b872:	2b00      	cmp	r3, #0
 800b874:	d106      	bne.n	800b884 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	2200      	movs	r2, #0
 800b87a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b87e:	6878      	ldr	r0, [r7, #4]
 800b880:	f7f7 f84e 	bl	8002920 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2224      	movs	r2, #36	@ 0x24
 800b888:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	681a      	ldr	r2, [r3, #0]
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	f022 0201 	bic.w	r2, r2, #1
 800b89a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d002      	beq.n	800b8aa <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b8a4:	6878      	ldr	r0, [r7, #4]
 800b8a6:	f000 fd91 	bl	800c3cc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f000 f826 	bl	800b8fc <UART_SetConfig>
 800b8b0:	4603      	mov	r3, r0
 800b8b2:	2b01      	cmp	r3, #1
 800b8b4:	d101      	bne.n	800b8ba <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b8b6:	2301      	movs	r3, #1
 800b8b8:	e01b      	b.n	800b8f2 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	685a      	ldr	r2, [r3, #4]
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b8c8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	689a      	ldr	r2, [r3, #8]
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b8d8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	681a      	ldr	r2, [r3, #0]
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	f042 0201 	orr.w	r2, r2, #1
 800b8e8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b8ea:	6878      	ldr	r0, [r7, #4]
 800b8ec:	f000 fe10 	bl	800c510 <UART_CheckIdleState>
 800b8f0:	4603      	mov	r3, r0
}
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	3708      	adds	r7, #8
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	bd80      	pop	{r7, pc}
	...

0800b8fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b8fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b900:	b092      	sub	sp, #72	@ 0x48
 800b902:	af00      	add	r7, sp, #0
 800b904:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b906:	2300      	movs	r3, #0
 800b908:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b90c:	697b      	ldr	r3, [r7, #20]
 800b90e:	689a      	ldr	r2, [r3, #8]
 800b910:	697b      	ldr	r3, [r7, #20]
 800b912:	691b      	ldr	r3, [r3, #16]
 800b914:	431a      	orrs	r2, r3
 800b916:	697b      	ldr	r3, [r7, #20]
 800b918:	695b      	ldr	r3, [r3, #20]
 800b91a:	431a      	orrs	r2, r3
 800b91c:	697b      	ldr	r3, [r7, #20]
 800b91e:	69db      	ldr	r3, [r3, #28]
 800b920:	4313      	orrs	r3, r2
 800b922:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b924:	697b      	ldr	r3, [r7, #20]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	681a      	ldr	r2, [r3, #0]
 800b92a:	4bbe      	ldr	r3, [pc, #760]	@ (800bc24 <UART_SetConfig+0x328>)
 800b92c:	4013      	ands	r3, r2
 800b92e:	697a      	ldr	r2, [r7, #20]
 800b930:	6812      	ldr	r2, [r2, #0]
 800b932:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b934:	430b      	orrs	r3, r1
 800b936:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b938:	697b      	ldr	r3, [r7, #20]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	685b      	ldr	r3, [r3, #4]
 800b93e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b942:	697b      	ldr	r3, [r7, #20]
 800b944:	68da      	ldr	r2, [r3, #12]
 800b946:	697b      	ldr	r3, [r7, #20]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	430a      	orrs	r2, r1
 800b94c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b94e:	697b      	ldr	r3, [r7, #20]
 800b950:	699b      	ldr	r3, [r3, #24]
 800b952:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b954:	697b      	ldr	r3, [r7, #20]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	4ab3      	ldr	r2, [pc, #716]	@ (800bc28 <UART_SetConfig+0x32c>)
 800b95a:	4293      	cmp	r3, r2
 800b95c:	d004      	beq.n	800b968 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b95e:	697b      	ldr	r3, [r7, #20]
 800b960:	6a1b      	ldr	r3, [r3, #32]
 800b962:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b964:	4313      	orrs	r3, r2
 800b966:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b968:	697b      	ldr	r3, [r7, #20]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	689a      	ldr	r2, [r3, #8]
 800b96e:	4baf      	ldr	r3, [pc, #700]	@ (800bc2c <UART_SetConfig+0x330>)
 800b970:	4013      	ands	r3, r2
 800b972:	697a      	ldr	r2, [r7, #20]
 800b974:	6812      	ldr	r2, [r2, #0]
 800b976:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b978:	430b      	orrs	r3, r1
 800b97a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b97c:	697b      	ldr	r3, [r7, #20]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b982:	f023 010f 	bic.w	r1, r3, #15
 800b986:	697b      	ldr	r3, [r7, #20]
 800b988:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b98a:	697b      	ldr	r3, [r7, #20]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	430a      	orrs	r2, r1
 800b990:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b992:	697b      	ldr	r3, [r7, #20]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	4aa6      	ldr	r2, [pc, #664]	@ (800bc30 <UART_SetConfig+0x334>)
 800b998:	4293      	cmp	r3, r2
 800b99a:	d177      	bne.n	800ba8c <UART_SetConfig+0x190>
 800b99c:	4ba5      	ldr	r3, [pc, #660]	@ (800bc34 <UART_SetConfig+0x338>)
 800b99e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b9a0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b9a4:	2b28      	cmp	r3, #40	@ 0x28
 800b9a6:	d86d      	bhi.n	800ba84 <UART_SetConfig+0x188>
 800b9a8:	a201      	add	r2, pc, #4	@ (adr r2, 800b9b0 <UART_SetConfig+0xb4>)
 800b9aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9ae:	bf00      	nop
 800b9b0:	0800ba55 	.word	0x0800ba55
 800b9b4:	0800ba85 	.word	0x0800ba85
 800b9b8:	0800ba85 	.word	0x0800ba85
 800b9bc:	0800ba85 	.word	0x0800ba85
 800b9c0:	0800ba85 	.word	0x0800ba85
 800b9c4:	0800ba85 	.word	0x0800ba85
 800b9c8:	0800ba85 	.word	0x0800ba85
 800b9cc:	0800ba85 	.word	0x0800ba85
 800b9d0:	0800ba5d 	.word	0x0800ba5d
 800b9d4:	0800ba85 	.word	0x0800ba85
 800b9d8:	0800ba85 	.word	0x0800ba85
 800b9dc:	0800ba85 	.word	0x0800ba85
 800b9e0:	0800ba85 	.word	0x0800ba85
 800b9e4:	0800ba85 	.word	0x0800ba85
 800b9e8:	0800ba85 	.word	0x0800ba85
 800b9ec:	0800ba85 	.word	0x0800ba85
 800b9f0:	0800ba65 	.word	0x0800ba65
 800b9f4:	0800ba85 	.word	0x0800ba85
 800b9f8:	0800ba85 	.word	0x0800ba85
 800b9fc:	0800ba85 	.word	0x0800ba85
 800ba00:	0800ba85 	.word	0x0800ba85
 800ba04:	0800ba85 	.word	0x0800ba85
 800ba08:	0800ba85 	.word	0x0800ba85
 800ba0c:	0800ba85 	.word	0x0800ba85
 800ba10:	0800ba6d 	.word	0x0800ba6d
 800ba14:	0800ba85 	.word	0x0800ba85
 800ba18:	0800ba85 	.word	0x0800ba85
 800ba1c:	0800ba85 	.word	0x0800ba85
 800ba20:	0800ba85 	.word	0x0800ba85
 800ba24:	0800ba85 	.word	0x0800ba85
 800ba28:	0800ba85 	.word	0x0800ba85
 800ba2c:	0800ba85 	.word	0x0800ba85
 800ba30:	0800ba75 	.word	0x0800ba75
 800ba34:	0800ba85 	.word	0x0800ba85
 800ba38:	0800ba85 	.word	0x0800ba85
 800ba3c:	0800ba85 	.word	0x0800ba85
 800ba40:	0800ba85 	.word	0x0800ba85
 800ba44:	0800ba85 	.word	0x0800ba85
 800ba48:	0800ba85 	.word	0x0800ba85
 800ba4c:	0800ba85 	.word	0x0800ba85
 800ba50:	0800ba7d 	.word	0x0800ba7d
 800ba54:	2301      	movs	r3, #1
 800ba56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba5a:	e222      	b.n	800bea2 <UART_SetConfig+0x5a6>
 800ba5c:	2304      	movs	r3, #4
 800ba5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba62:	e21e      	b.n	800bea2 <UART_SetConfig+0x5a6>
 800ba64:	2308      	movs	r3, #8
 800ba66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba6a:	e21a      	b.n	800bea2 <UART_SetConfig+0x5a6>
 800ba6c:	2310      	movs	r3, #16
 800ba6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba72:	e216      	b.n	800bea2 <UART_SetConfig+0x5a6>
 800ba74:	2320      	movs	r3, #32
 800ba76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba7a:	e212      	b.n	800bea2 <UART_SetConfig+0x5a6>
 800ba7c:	2340      	movs	r3, #64	@ 0x40
 800ba7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba82:	e20e      	b.n	800bea2 <UART_SetConfig+0x5a6>
 800ba84:	2380      	movs	r3, #128	@ 0x80
 800ba86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba8a:	e20a      	b.n	800bea2 <UART_SetConfig+0x5a6>
 800ba8c:	697b      	ldr	r3, [r7, #20]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	4a69      	ldr	r2, [pc, #420]	@ (800bc38 <UART_SetConfig+0x33c>)
 800ba92:	4293      	cmp	r3, r2
 800ba94:	d130      	bne.n	800baf8 <UART_SetConfig+0x1fc>
 800ba96:	4b67      	ldr	r3, [pc, #412]	@ (800bc34 <UART_SetConfig+0x338>)
 800ba98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba9a:	f003 0307 	and.w	r3, r3, #7
 800ba9e:	2b05      	cmp	r3, #5
 800baa0:	d826      	bhi.n	800baf0 <UART_SetConfig+0x1f4>
 800baa2:	a201      	add	r2, pc, #4	@ (adr r2, 800baa8 <UART_SetConfig+0x1ac>)
 800baa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baa8:	0800bac1 	.word	0x0800bac1
 800baac:	0800bac9 	.word	0x0800bac9
 800bab0:	0800bad1 	.word	0x0800bad1
 800bab4:	0800bad9 	.word	0x0800bad9
 800bab8:	0800bae1 	.word	0x0800bae1
 800babc:	0800bae9 	.word	0x0800bae9
 800bac0:	2300      	movs	r3, #0
 800bac2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bac6:	e1ec      	b.n	800bea2 <UART_SetConfig+0x5a6>
 800bac8:	2304      	movs	r3, #4
 800baca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bace:	e1e8      	b.n	800bea2 <UART_SetConfig+0x5a6>
 800bad0:	2308      	movs	r3, #8
 800bad2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bad6:	e1e4      	b.n	800bea2 <UART_SetConfig+0x5a6>
 800bad8:	2310      	movs	r3, #16
 800bada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bade:	e1e0      	b.n	800bea2 <UART_SetConfig+0x5a6>
 800bae0:	2320      	movs	r3, #32
 800bae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bae6:	e1dc      	b.n	800bea2 <UART_SetConfig+0x5a6>
 800bae8:	2340      	movs	r3, #64	@ 0x40
 800baea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800baee:	e1d8      	b.n	800bea2 <UART_SetConfig+0x5a6>
 800baf0:	2380      	movs	r3, #128	@ 0x80
 800baf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800baf6:	e1d4      	b.n	800bea2 <UART_SetConfig+0x5a6>
 800baf8:	697b      	ldr	r3, [r7, #20]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	4a4f      	ldr	r2, [pc, #316]	@ (800bc3c <UART_SetConfig+0x340>)
 800bafe:	4293      	cmp	r3, r2
 800bb00:	d130      	bne.n	800bb64 <UART_SetConfig+0x268>
 800bb02:	4b4c      	ldr	r3, [pc, #304]	@ (800bc34 <UART_SetConfig+0x338>)
 800bb04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb06:	f003 0307 	and.w	r3, r3, #7
 800bb0a:	2b05      	cmp	r3, #5
 800bb0c:	d826      	bhi.n	800bb5c <UART_SetConfig+0x260>
 800bb0e:	a201      	add	r2, pc, #4	@ (adr r2, 800bb14 <UART_SetConfig+0x218>)
 800bb10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb14:	0800bb2d 	.word	0x0800bb2d
 800bb18:	0800bb35 	.word	0x0800bb35
 800bb1c:	0800bb3d 	.word	0x0800bb3d
 800bb20:	0800bb45 	.word	0x0800bb45
 800bb24:	0800bb4d 	.word	0x0800bb4d
 800bb28:	0800bb55 	.word	0x0800bb55
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb32:	e1b6      	b.n	800bea2 <UART_SetConfig+0x5a6>
 800bb34:	2304      	movs	r3, #4
 800bb36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb3a:	e1b2      	b.n	800bea2 <UART_SetConfig+0x5a6>
 800bb3c:	2308      	movs	r3, #8
 800bb3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb42:	e1ae      	b.n	800bea2 <UART_SetConfig+0x5a6>
 800bb44:	2310      	movs	r3, #16
 800bb46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb4a:	e1aa      	b.n	800bea2 <UART_SetConfig+0x5a6>
 800bb4c:	2320      	movs	r3, #32
 800bb4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb52:	e1a6      	b.n	800bea2 <UART_SetConfig+0x5a6>
 800bb54:	2340      	movs	r3, #64	@ 0x40
 800bb56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb5a:	e1a2      	b.n	800bea2 <UART_SetConfig+0x5a6>
 800bb5c:	2380      	movs	r3, #128	@ 0x80
 800bb5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb62:	e19e      	b.n	800bea2 <UART_SetConfig+0x5a6>
 800bb64:	697b      	ldr	r3, [r7, #20]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	4a35      	ldr	r2, [pc, #212]	@ (800bc40 <UART_SetConfig+0x344>)
 800bb6a:	4293      	cmp	r3, r2
 800bb6c:	d130      	bne.n	800bbd0 <UART_SetConfig+0x2d4>
 800bb6e:	4b31      	ldr	r3, [pc, #196]	@ (800bc34 <UART_SetConfig+0x338>)
 800bb70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb72:	f003 0307 	and.w	r3, r3, #7
 800bb76:	2b05      	cmp	r3, #5
 800bb78:	d826      	bhi.n	800bbc8 <UART_SetConfig+0x2cc>
 800bb7a:	a201      	add	r2, pc, #4	@ (adr r2, 800bb80 <UART_SetConfig+0x284>)
 800bb7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb80:	0800bb99 	.word	0x0800bb99
 800bb84:	0800bba1 	.word	0x0800bba1
 800bb88:	0800bba9 	.word	0x0800bba9
 800bb8c:	0800bbb1 	.word	0x0800bbb1
 800bb90:	0800bbb9 	.word	0x0800bbb9
 800bb94:	0800bbc1 	.word	0x0800bbc1
 800bb98:	2300      	movs	r3, #0
 800bb9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb9e:	e180      	b.n	800bea2 <UART_SetConfig+0x5a6>
 800bba0:	2304      	movs	r3, #4
 800bba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bba6:	e17c      	b.n	800bea2 <UART_SetConfig+0x5a6>
 800bba8:	2308      	movs	r3, #8
 800bbaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbae:	e178      	b.n	800bea2 <UART_SetConfig+0x5a6>
 800bbb0:	2310      	movs	r3, #16
 800bbb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbb6:	e174      	b.n	800bea2 <UART_SetConfig+0x5a6>
 800bbb8:	2320      	movs	r3, #32
 800bbba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbbe:	e170      	b.n	800bea2 <UART_SetConfig+0x5a6>
 800bbc0:	2340      	movs	r3, #64	@ 0x40
 800bbc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbc6:	e16c      	b.n	800bea2 <UART_SetConfig+0x5a6>
 800bbc8:	2380      	movs	r3, #128	@ 0x80
 800bbca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbce:	e168      	b.n	800bea2 <UART_SetConfig+0x5a6>
 800bbd0:	697b      	ldr	r3, [r7, #20]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	4a1b      	ldr	r2, [pc, #108]	@ (800bc44 <UART_SetConfig+0x348>)
 800bbd6:	4293      	cmp	r3, r2
 800bbd8:	d142      	bne.n	800bc60 <UART_SetConfig+0x364>
 800bbda:	4b16      	ldr	r3, [pc, #88]	@ (800bc34 <UART_SetConfig+0x338>)
 800bbdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bbde:	f003 0307 	and.w	r3, r3, #7
 800bbe2:	2b05      	cmp	r3, #5
 800bbe4:	d838      	bhi.n	800bc58 <UART_SetConfig+0x35c>
 800bbe6:	a201      	add	r2, pc, #4	@ (adr r2, 800bbec <UART_SetConfig+0x2f0>)
 800bbe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbec:	0800bc05 	.word	0x0800bc05
 800bbf0:	0800bc0d 	.word	0x0800bc0d
 800bbf4:	0800bc15 	.word	0x0800bc15
 800bbf8:	0800bc1d 	.word	0x0800bc1d
 800bbfc:	0800bc49 	.word	0x0800bc49
 800bc00:	0800bc51 	.word	0x0800bc51
 800bc04:	2300      	movs	r3, #0
 800bc06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc0a:	e14a      	b.n	800bea2 <UART_SetConfig+0x5a6>
 800bc0c:	2304      	movs	r3, #4
 800bc0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc12:	e146      	b.n	800bea2 <UART_SetConfig+0x5a6>
 800bc14:	2308      	movs	r3, #8
 800bc16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc1a:	e142      	b.n	800bea2 <UART_SetConfig+0x5a6>
 800bc1c:	2310      	movs	r3, #16
 800bc1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc22:	e13e      	b.n	800bea2 <UART_SetConfig+0x5a6>
 800bc24:	cfff69f3 	.word	0xcfff69f3
 800bc28:	58000c00 	.word	0x58000c00
 800bc2c:	11fff4ff 	.word	0x11fff4ff
 800bc30:	40011000 	.word	0x40011000
 800bc34:	58024400 	.word	0x58024400
 800bc38:	40004400 	.word	0x40004400
 800bc3c:	40004800 	.word	0x40004800
 800bc40:	40004c00 	.word	0x40004c00
 800bc44:	40005000 	.word	0x40005000
 800bc48:	2320      	movs	r3, #32
 800bc4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc4e:	e128      	b.n	800bea2 <UART_SetConfig+0x5a6>
 800bc50:	2340      	movs	r3, #64	@ 0x40
 800bc52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc56:	e124      	b.n	800bea2 <UART_SetConfig+0x5a6>
 800bc58:	2380      	movs	r3, #128	@ 0x80
 800bc5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc5e:	e120      	b.n	800bea2 <UART_SetConfig+0x5a6>
 800bc60:	697b      	ldr	r3, [r7, #20]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	4acb      	ldr	r2, [pc, #812]	@ (800bf94 <UART_SetConfig+0x698>)
 800bc66:	4293      	cmp	r3, r2
 800bc68:	d176      	bne.n	800bd58 <UART_SetConfig+0x45c>
 800bc6a:	4bcb      	ldr	r3, [pc, #812]	@ (800bf98 <UART_SetConfig+0x69c>)
 800bc6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc6e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bc72:	2b28      	cmp	r3, #40	@ 0x28
 800bc74:	d86c      	bhi.n	800bd50 <UART_SetConfig+0x454>
 800bc76:	a201      	add	r2, pc, #4	@ (adr r2, 800bc7c <UART_SetConfig+0x380>)
 800bc78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc7c:	0800bd21 	.word	0x0800bd21
 800bc80:	0800bd51 	.word	0x0800bd51
 800bc84:	0800bd51 	.word	0x0800bd51
 800bc88:	0800bd51 	.word	0x0800bd51
 800bc8c:	0800bd51 	.word	0x0800bd51
 800bc90:	0800bd51 	.word	0x0800bd51
 800bc94:	0800bd51 	.word	0x0800bd51
 800bc98:	0800bd51 	.word	0x0800bd51
 800bc9c:	0800bd29 	.word	0x0800bd29
 800bca0:	0800bd51 	.word	0x0800bd51
 800bca4:	0800bd51 	.word	0x0800bd51
 800bca8:	0800bd51 	.word	0x0800bd51
 800bcac:	0800bd51 	.word	0x0800bd51
 800bcb0:	0800bd51 	.word	0x0800bd51
 800bcb4:	0800bd51 	.word	0x0800bd51
 800bcb8:	0800bd51 	.word	0x0800bd51
 800bcbc:	0800bd31 	.word	0x0800bd31
 800bcc0:	0800bd51 	.word	0x0800bd51
 800bcc4:	0800bd51 	.word	0x0800bd51
 800bcc8:	0800bd51 	.word	0x0800bd51
 800bccc:	0800bd51 	.word	0x0800bd51
 800bcd0:	0800bd51 	.word	0x0800bd51
 800bcd4:	0800bd51 	.word	0x0800bd51
 800bcd8:	0800bd51 	.word	0x0800bd51
 800bcdc:	0800bd39 	.word	0x0800bd39
 800bce0:	0800bd51 	.word	0x0800bd51
 800bce4:	0800bd51 	.word	0x0800bd51
 800bce8:	0800bd51 	.word	0x0800bd51
 800bcec:	0800bd51 	.word	0x0800bd51
 800bcf0:	0800bd51 	.word	0x0800bd51
 800bcf4:	0800bd51 	.word	0x0800bd51
 800bcf8:	0800bd51 	.word	0x0800bd51
 800bcfc:	0800bd41 	.word	0x0800bd41
 800bd00:	0800bd51 	.word	0x0800bd51
 800bd04:	0800bd51 	.word	0x0800bd51
 800bd08:	0800bd51 	.word	0x0800bd51
 800bd0c:	0800bd51 	.word	0x0800bd51
 800bd10:	0800bd51 	.word	0x0800bd51
 800bd14:	0800bd51 	.word	0x0800bd51
 800bd18:	0800bd51 	.word	0x0800bd51
 800bd1c:	0800bd49 	.word	0x0800bd49
 800bd20:	2301      	movs	r3, #1
 800bd22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd26:	e0bc      	b.n	800bea2 <UART_SetConfig+0x5a6>
 800bd28:	2304      	movs	r3, #4
 800bd2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd2e:	e0b8      	b.n	800bea2 <UART_SetConfig+0x5a6>
 800bd30:	2308      	movs	r3, #8
 800bd32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd36:	e0b4      	b.n	800bea2 <UART_SetConfig+0x5a6>
 800bd38:	2310      	movs	r3, #16
 800bd3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd3e:	e0b0      	b.n	800bea2 <UART_SetConfig+0x5a6>
 800bd40:	2320      	movs	r3, #32
 800bd42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd46:	e0ac      	b.n	800bea2 <UART_SetConfig+0x5a6>
 800bd48:	2340      	movs	r3, #64	@ 0x40
 800bd4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd4e:	e0a8      	b.n	800bea2 <UART_SetConfig+0x5a6>
 800bd50:	2380      	movs	r3, #128	@ 0x80
 800bd52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd56:	e0a4      	b.n	800bea2 <UART_SetConfig+0x5a6>
 800bd58:	697b      	ldr	r3, [r7, #20]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	4a8f      	ldr	r2, [pc, #572]	@ (800bf9c <UART_SetConfig+0x6a0>)
 800bd5e:	4293      	cmp	r3, r2
 800bd60:	d130      	bne.n	800bdc4 <UART_SetConfig+0x4c8>
 800bd62:	4b8d      	ldr	r3, [pc, #564]	@ (800bf98 <UART_SetConfig+0x69c>)
 800bd64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bd66:	f003 0307 	and.w	r3, r3, #7
 800bd6a:	2b05      	cmp	r3, #5
 800bd6c:	d826      	bhi.n	800bdbc <UART_SetConfig+0x4c0>
 800bd6e:	a201      	add	r2, pc, #4	@ (adr r2, 800bd74 <UART_SetConfig+0x478>)
 800bd70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd74:	0800bd8d 	.word	0x0800bd8d
 800bd78:	0800bd95 	.word	0x0800bd95
 800bd7c:	0800bd9d 	.word	0x0800bd9d
 800bd80:	0800bda5 	.word	0x0800bda5
 800bd84:	0800bdad 	.word	0x0800bdad
 800bd88:	0800bdb5 	.word	0x0800bdb5
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd92:	e086      	b.n	800bea2 <UART_SetConfig+0x5a6>
 800bd94:	2304      	movs	r3, #4
 800bd96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd9a:	e082      	b.n	800bea2 <UART_SetConfig+0x5a6>
 800bd9c:	2308      	movs	r3, #8
 800bd9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bda2:	e07e      	b.n	800bea2 <UART_SetConfig+0x5a6>
 800bda4:	2310      	movs	r3, #16
 800bda6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bdaa:	e07a      	b.n	800bea2 <UART_SetConfig+0x5a6>
 800bdac:	2320      	movs	r3, #32
 800bdae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bdb2:	e076      	b.n	800bea2 <UART_SetConfig+0x5a6>
 800bdb4:	2340      	movs	r3, #64	@ 0x40
 800bdb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bdba:	e072      	b.n	800bea2 <UART_SetConfig+0x5a6>
 800bdbc:	2380      	movs	r3, #128	@ 0x80
 800bdbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bdc2:	e06e      	b.n	800bea2 <UART_SetConfig+0x5a6>
 800bdc4:	697b      	ldr	r3, [r7, #20]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	4a75      	ldr	r2, [pc, #468]	@ (800bfa0 <UART_SetConfig+0x6a4>)
 800bdca:	4293      	cmp	r3, r2
 800bdcc:	d130      	bne.n	800be30 <UART_SetConfig+0x534>
 800bdce:	4b72      	ldr	r3, [pc, #456]	@ (800bf98 <UART_SetConfig+0x69c>)
 800bdd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bdd2:	f003 0307 	and.w	r3, r3, #7
 800bdd6:	2b05      	cmp	r3, #5
 800bdd8:	d826      	bhi.n	800be28 <UART_SetConfig+0x52c>
 800bdda:	a201      	add	r2, pc, #4	@ (adr r2, 800bde0 <UART_SetConfig+0x4e4>)
 800bddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bde0:	0800bdf9 	.word	0x0800bdf9
 800bde4:	0800be01 	.word	0x0800be01
 800bde8:	0800be09 	.word	0x0800be09
 800bdec:	0800be11 	.word	0x0800be11
 800bdf0:	0800be19 	.word	0x0800be19
 800bdf4:	0800be21 	.word	0x0800be21
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bdfe:	e050      	b.n	800bea2 <UART_SetConfig+0x5a6>
 800be00:	2304      	movs	r3, #4
 800be02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be06:	e04c      	b.n	800bea2 <UART_SetConfig+0x5a6>
 800be08:	2308      	movs	r3, #8
 800be0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be0e:	e048      	b.n	800bea2 <UART_SetConfig+0x5a6>
 800be10:	2310      	movs	r3, #16
 800be12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be16:	e044      	b.n	800bea2 <UART_SetConfig+0x5a6>
 800be18:	2320      	movs	r3, #32
 800be1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be1e:	e040      	b.n	800bea2 <UART_SetConfig+0x5a6>
 800be20:	2340      	movs	r3, #64	@ 0x40
 800be22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be26:	e03c      	b.n	800bea2 <UART_SetConfig+0x5a6>
 800be28:	2380      	movs	r3, #128	@ 0x80
 800be2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be2e:	e038      	b.n	800bea2 <UART_SetConfig+0x5a6>
 800be30:	697b      	ldr	r3, [r7, #20]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	4a5b      	ldr	r2, [pc, #364]	@ (800bfa4 <UART_SetConfig+0x6a8>)
 800be36:	4293      	cmp	r3, r2
 800be38:	d130      	bne.n	800be9c <UART_SetConfig+0x5a0>
 800be3a:	4b57      	ldr	r3, [pc, #348]	@ (800bf98 <UART_SetConfig+0x69c>)
 800be3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800be3e:	f003 0307 	and.w	r3, r3, #7
 800be42:	2b05      	cmp	r3, #5
 800be44:	d826      	bhi.n	800be94 <UART_SetConfig+0x598>
 800be46:	a201      	add	r2, pc, #4	@ (adr r2, 800be4c <UART_SetConfig+0x550>)
 800be48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be4c:	0800be65 	.word	0x0800be65
 800be50:	0800be6d 	.word	0x0800be6d
 800be54:	0800be75 	.word	0x0800be75
 800be58:	0800be7d 	.word	0x0800be7d
 800be5c:	0800be85 	.word	0x0800be85
 800be60:	0800be8d 	.word	0x0800be8d
 800be64:	2302      	movs	r3, #2
 800be66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be6a:	e01a      	b.n	800bea2 <UART_SetConfig+0x5a6>
 800be6c:	2304      	movs	r3, #4
 800be6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be72:	e016      	b.n	800bea2 <UART_SetConfig+0x5a6>
 800be74:	2308      	movs	r3, #8
 800be76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be7a:	e012      	b.n	800bea2 <UART_SetConfig+0x5a6>
 800be7c:	2310      	movs	r3, #16
 800be7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be82:	e00e      	b.n	800bea2 <UART_SetConfig+0x5a6>
 800be84:	2320      	movs	r3, #32
 800be86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be8a:	e00a      	b.n	800bea2 <UART_SetConfig+0x5a6>
 800be8c:	2340      	movs	r3, #64	@ 0x40
 800be8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be92:	e006      	b.n	800bea2 <UART_SetConfig+0x5a6>
 800be94:	2380      	movs	r3, #128	@ 0x80
 800be96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be9a:	e002      	b.n	800bea2 <UART_SetConfig+0x5a6>
 800be9c:	2380      	movs	r3, #128	@ 0x80
 800be9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bea2:	697b      	ldr	r3, [r7, #20]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	4a3f      	ldr	r2, [pc, #252]	@ (800bfa4 <UART_SetConfig+0x6a8>)
 800bea8:	4293      	cmp	r3, r2
 800beaa:	f040 80f8 	bne.w	800c09e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800beae:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800beb2:	2b20      	cmp	r3, #32
 800beb4:	dc46      	bgt.n	800bf44 <UART_SetConfig+0x648>
 800beb6:	2b02      	cmp	r3, #2
 800beb8:	f2c0 8082 	blt.w	800bfc0 <UART_SetConfig+0x6c4>
 800bebc:	3b02      	subs	r3, #2
 800bebe:	2b1e      	cmp	r3, #30
 800bec0:	d87e      	bhi.n	800bfc0 <UART_SetConfig+0x6c4>
 800bec2:	a201      	add	r2, pc, #4	@ (adr r2, 800bec8 <UART_SetConfig+0x5cc>)
 800bec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bec8:	0800bf4b 	.word	0x0800bf4b
 800becc:	0800bfc1 	.word	0x0800bfc1
 800bed0:	0800bf53 	.word	0x0800bf53
 800bed4:	0800bfc1 	.word	0x0800bfc1
 800bed8:	0800bfc1 	.word	0x0800bfc1
 800bedc:	0800bfc1 	.word	0x0800bfc1
 800bee0:	0800bf63 	.word	0x0800bf63
 800bee4:	0800bfc1 	.word	0x0800bfc1
 800bee8:	0800bfc1 	.word	0x0800bfc1
 800beec:	0800bfc1 	.word	0x0800bfc1
 800bef0:	0800bfc1 	.word	0x0800bfc1
 800bef4:	0800bfc1 	.word	0x0800bfc1
 800bef8:	0800bfc1 	.word	0x0800bfc1
 800befc:	0800bfc1 	.word	0x0800bfc1
 800bf00:	0800bf73 	.word	0x0800bf73
 800bf04:	0800bfc1 	.word	0x0800bfc1
 800bf08:	0800bfc1 	.word	0x0800bfc1
 800bf0c:	0800bfc1 	.word	0x0800bfc1
 800bf10:	0800bfc1 	.word	0x0800bfc1
 800bf14:	0800bfc1 	.word	0x0800bfc1
 800bf18:	0800bfc1 	.word	0x0800bfc1
 800bf1c:	0800bfc1 	.word	0x0800bfc1
 800bf20:	0800bfc1 	.word	0x0800bfc1
 800bf24:	0800bfc1 	.word	0x0800bfc1
 800bf28:	0800bfc1 	.word	0x0800bfc1
 800bf2c:	0800bfc1 	.word	0x0800bfc1
 800bf30:	0800bfc1 	.word	0x0800bfc1
 800bf34:	0800bfc1 	.word	0x0800bfc1
 800bf38:	0800bfc1 	.word	0x0800bfc1
 800bf3c:	0800bfc1 	.word	0x0800bfc1
 800bf40:	0800bfb3 	.word	0x0800bfb3
 800bf44:	2b40      	cmp	r3, #64	@ 0x40
 800bf46:	d037      	beq.n	800bfb8 <UART_SetConfig+0x6bc>
 800bf48:	e03a      	b.n	800bfc0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800bf4a:	f7fe f87d 	bl	800a048 <HAL_RCCEx_GetD3PCLK1Freq>
 800bf4e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bf50:	e03c      	b.n	800bfcc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bf56:	4618      	mov	r0, r3
 800bf58:	f7fe f88c 	bl	800a074 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bf5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bf60:	e034      	b.n	800bfcc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bf62:	f107 0318 	add.w	r3, r7, #24
 800bf66:	4618      	mov	r0, r3
 800bf68:	f7fe f9d8 	bl	800a31c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bf6c:	69fb      	ldr	r3, [r7, #28]
 800bf6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bf70:	e02c      	b.n	800bfcc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bf72:	4b09      	ldr	r3, [pc, #36]	@ (800bf98 <UART_SetConfig+0x69c>)
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	f003 0320 	and.w	r3, r3, #32
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d016      	beq.n	800bfac <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bf7e:	4b06      	ldr	r3, [pc, #24]	@ (800bf98 <UART_SetConfig+0x69c>)
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	08db      	lsrs	r3, r3, #3
 800bf84:	f003 0303 	and.w	r3, r3, #3
 800bf88:	4a07      	ldr	r2, [pc, #28]	@ (800bfa8 <UART_SetConfig+0x6ac>)
 800bf8a:	fa22 f303 	lsr.w	r3, r2, r3
 800bf8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bf90:	e01c      	b.n	800bfcc <UART_SetConfig+0x6d0>
 800bf92:	bf00      	nop
 800bf94:	40011400 	.word	0x40011400
 800bf98:	58024400 	.word	0x58024400
 800bf9c:	40007800 	.word	0x40007800
 800bfa0:	40007c00 	.word	0x40007c00
 800bfa4:	58000c00 	.word	0x58000c00
 800bfa8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800bfac:	4b9d      	ldr	r3, [pc, #628]	@ (800c224 <UART_SetConfig+0x928>)
 800bfae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bfb0:	e00c      	b.n	800bfcc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bfb2:	4b9d      	ldr	r3, [pc, #628]	@ (800c228 <UART_SetConfig+0x92c>)
 800bfb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bfb6:	e009      	b.n	800bfcc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bfb8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bfbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bfbe:	e005      	b.n	800bfcc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800bfc4:	2301      	movs	r3, #1
 800bfc6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800bfca:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bfcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	f000 81de 	beq.w	800c390 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bfd4:	697b      	ldr	r3, [r7, #20]
 800bfd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfd8:	4a94      	ldr	r2, [pc, #592]	@ (800c22c <UART_SetConfig+0x930>)
 800bfda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bfde:	461a      	mov	r2, r3
 800bfe0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bfe2:	fbb3 f3f2 	udiv	r3, r3, r2
 800bfe6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bfe8:	697b      	ldr	r3, [r7, #20]
 800bfea:	685a      	ldr	r2, [r3, #4]
 800bfec:	4613      	mov	r3, r2
 800bfee:	005b      	lsls	r3, r3, #1
 800bff0:	4413      	add	r3, r2
 800bff2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bff4:	429a      	cmp	r2, r3
 800bff6:	d305      	bcc.n	800c004 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bff8:	697b      	ldr	r3, [r7, #20]
 800bffa:	685b      	ldr	r3, [r3, #4]
 800bffc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bffe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c000:	429a      	cmp	r2, r3
 800c002:	d903      	bls.n	800c00c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800c004:	2301      	movs	r3, #1
 800c006:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c00a:	e1c1      	b.n	800c390 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c00c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c00e:	2200      	movs	r2, #0
 800c010:	60bb      	str	r3, [r7, #8]
 800c012:	60fa      	str	r2, [r7, #12]
 800c014:	697b      	ldr	r3, [r7, #20]
 800c016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c018:	4a84      	ldr	r2, [pc, #528]	@ (800c22c <UART_SetConfig+0x930>)
 800c01a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c01e:	b29b      	uxth	r3, r3
 800c020:	2200      	movs	r2, #0
 800c022:	603b      	str	r3, [r7, #0]
 800c024:	607a      	str	r2, [r7, #4]
 800c026:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c02a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c02e:	f7f4 f953 	bl	80002d8 <__aeabi_uldivmod>
 800c032:	4602      	mov	r2, r0
 800c034:	460b      	mov	r3, r1
 800c036:	4610      	mov	r0, r2
 800c038:	4619      	mov	r1, r3
 800c03a:	f04f 0200 	mov.w	r2, #0
 800c03e:	f04f 0300 	mov.w	r3, #0
 800c042:	020b      	lsls	r3, r1, #8
 800c044:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c048:	0202      	lsls	r2, r0, #8
 800c04a:	6979      	ldr	r1, [r7, #20]
 800c04c:	6849      	ldr	r1, [r1, #4]
 800c04e:	0849      	lsrs	r1, r1, #1
 800c050:	2000      	movs	r0, #0
 800c052:	460c      	mov	r4, r1
 800c054:	4605      	mov	r5, r0
 800c056:	eb12 0804 	adds.w	r8, r2, r4
 800c05a:	eb43 0905 	adc.w	r9, r3, r5
 800c05e:	697b      	ldr	r3, [r7, #20]
 800c060:	685b      	ldr	r3, [r3, #4]
 800c062:	2200      	movs	r2, #0
 800c064:	469a      	mov	sl, r3
 800c066:	4693      	mov	fp, r2
 800c068:	4652      	mov	r2, sl
 800c06a:	465b      	mov	r3, fp
 800c06c:	4640      	mov	r0, r8
 800c06e:	4649      	mov	r1, r9
 800c070:	f7f4 f932 	bl	80002d8 <__aeabi_uldivmod>
 800c074:	4602      	mov	r2, r0
 800c076:	460b      	mov	r3, r1
 800c078:	4613      	mov	r3, r2
 800c07a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c07c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c07e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c082:	d308      	bcc.n	800c096 <UART_SetConfig+0x79a>
 800c084:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c086:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c08a:	d204      	bcs.n	800c096 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800c08c:	697b      	ldr	r3, [r7, #20]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c092:	60da      	str	r2, [r3, #12]
 800c094:	e17c      	b.n	800c390 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800c096:	2301      	movs	r3, #1
 800c098:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c09c:	e178      	b.n	800c390 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c09e:	697b      	ldr	r3, [r7, #20]
 800c0a0:	69db      	ldr	r3, [r3, #28]
 800c0a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c0a6:	f040 80c5 	bne.w	800c234 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800c0aa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c0ae:	2b20      	cmp	r3, #32
 800c0b0:	dc48      	bgt.n	800c144 <UART_SetConfig+0x848>
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	db7b      	blt.n	800c1ae <UART_SetConfig+0x8b2>
 800c0b6:	2b20      	cmp	r3, #32
 800c0b8:	d879      	bhi.n	800c1ae <UART_SetConfig+0x8b2>
 800c0ba:	a201      	add	r2, pc, #4	@ (adr r2, 800c0c0 <UART_SetConfig+0x7c4>)
 800c0bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0c0:	0800c14b 	.word	0x0800c14b
 800c0c4:	0800c153 	.word	0x0800c153
 800c0c8:	0800c1af 	.word	0x0800c1af
 800c0cc:	0800c1af 	.word	0x0800c1af
 800c0d0:	0800c15b 	.word	0x0800c15b
 800c0d4:	0800c1af 	.word	0x0800c1af
 800c0d8:	0800c1af 	.word	0x0800c1af
 800c0dc:	0800c1af 	.word	0x0800c1af
 800c0e0:	0800c16b 	.word	0x0800c16b
 800c0e4:	0800c1af 	.word	0x0800c1af
 800c0e8:	0800c1af 	.word	0x0800c1af
 800c0ec:	0800c1af 	.word	0x0800c1af
 800c0f0:	0800c1af 	.word	0x0800c1af
 800c0f4:	0800c1af 	.word	0x0800c1af
 800c0f8:	0800c1af 	.word	0x0800c1af
 800c0fc:	0800c1af 	.word	0x0800c1af
 800c100:	0800c17b 	.word	0x0800c17b
 800c104:	0800c1af 	.word	0x0800c1af
 800c108:	0800c1af 	.word	0x0800c1af
 800c10c:	0800c1af 	.word	0x0800c1af
 800c110:	0800c1af 	.word	0x0800c1af
 800c114:	0800c1af 	.word	0x0800c1af
 800c118:	0800c1af 	.word	0x0800c1af
 800c11c:	0800c1af 	.word	0x0800c1af
 800c120:	0800c1af 	.word	0x0800c1af
 800c124:	0800c1af 	.word	0x0800c1af
 800c128:	0800c1af 	.word	0x0800c1af
 800c12c:	0800c1af 	.word	0x0800c1af
 800c130:	0800c1af 	.word	0x0800c1af
 800c134:	0800c1af 	.word	0x0800c1af
 800c138:	0800c1af 	.word	0x0800c1af
 800c13c:	0800c1af 	.word	0x0800c1af
 800c140:	0800c1a1 	.word	0x0800c1a1
 800c144:	2b40      	cmp	r3, #64	@ 0x40
 800c146:	d02e      	beq.n	800c1a6 <UART_SetConfig+0x8aa>
 800c148:	e031      	b.n	800c1ae <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c14a:	f7fb ffc7 	bl	80080dc <HAL_RCC_GetPCLK1Freq>
 800c14e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c150:	e033      	b.n	800c1ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c152:	f7fb ffd9 	bl	8008108 <HAL_RCC_GetPCLK2Freq>
 800c156:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c158:	e02f      	b.n	800c1ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c15a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c15e:	4618      	mov	r0, r3
 800c160:	f7fd ff88 	bl	800a074 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c166:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c168:	e027      	b.n	800c1ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c16a:	f107 0318 	add.w	r3, r7, #24
 800c16e:	4618      	mov	r0, r3
 800c170:	f7fe f8d4 	bl	800a31c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c174:	69fb      	ldr	r3, [r7, #28]
 800c176:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c178:	e01f      	b.n	800c1ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c17a:	4b2d      	ldr	r3, [pc, #180]	@ (800c230 <UART_SetConfig+0x934>)
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	f003 0320 	and.w	r3, r3, #32
 800c182:	2b00      	cmp	r3, #0
 800c184:	d009      	beq.n	800c19a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c186:	4b2a      	ldr	r3, [pc, #168]	@ (800c230 <UART_SetConfig+0x934>)
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	08db      	lsrs	r3, r3, #3
 800c18c:	f003 0303 	and.w	r3, r3, #3
 800c190:	4a24      	ldr	r2, [pc, #144]	@ (800c224 <UART_SetConfig+0x928>)
 800c192:	fa22 f303 	lsr.w	r3, r2, r3
 800c196:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c198:	e00f      	b.n	800c1ba <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c19a:	4b22      	ldr	r3, [pc, #136]	@ (800c224 <UART_SetConfig+0x928>)
 800c19c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c19e:	e00c      	b.n	800c1ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c1a0:	4b21      	ldr	r3, [pc, #132]	@ (800c228 <UART_SetConfig+0x92c>)
 800c1a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c1a4:	e009      	b.n	800c1ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c1a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c1aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c1ac:	e005      	b.n	800c1ba <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c1b2:	2301      	movs	r3, #1
 800c1b4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c1b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c1ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	f000 80e7 	beq.w	800c390 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c1c2:	697b      	ldr	r3, [r7, #20]
 800c1c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1c6:	4a19      	ldr	r2, [pc, #100]	@ (800c22c <UART_SetConfig+0x930>)
 800c1c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c1cc:	461a      	mov	r2, r3
 800c1ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c1d0:	fbb3 f3f2 	udiv	r3, r3, r2
 800c1d4:	005a      	lsls	r2, r3, #1
 800c1d6:	697b      	ldr	r3, [r7, #20]
 800c1d8:	685b      	ldr	r3, [r3, #4]
 800c1da:	085b      	lsrs	r3, r3, #1
 800c1dc:	441a      	add	r2, r3
 800c1de:	697b      	ldr	r3, [r7, #20]
 800c1e0:	685b      	ldr	r3, [r3, #4]
 800c1e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c1e6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c1e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1ea:	2b0f      	cmp	r3, #15
 800c1ec:	d916      	bls.n	800c21c <UART_SetConfig+0x920>
 800c1ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c1f4:	d212      	bcs.n	800c21c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c1f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1f8:	b29b      	uxth	r3, r3
 800c1fa:	f023 030f 	bic.w	r3, r3, #15
 800c1fe:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c202:	085b      	lsrs	r3, r3, #1
 800c204:	b29b      	uxth	r3, r3
 800c206:	f003 0307 	and.w	r3, r3, #7
 800c20a:	b29a      	uxth	r2, r3
 800c20c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c20e:	4313      	orrs	r3, r2
 800c210:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800c212:	697b      	ldr	r3, [r7, #20]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800c218:	60da      	str	r2, [r3, #12]
 800c21a:	e0b9      	b.n	800c390 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c21c:	2301      	movs	r3, #1
 800c21e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c222:	e0b5      	b.n	800c390 <UART_SetConfig+0xa94>
 800c224:	03d09000 	.word	0x03d09000
 800c228:	003d0900 	.word	0x003d0900
 800c22c:	0800cad4 	.word	0x0800cad4
 800c230:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800c234:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c238:	2b20      	cmp	r3, #32
 800c23a:	dc49      	bgt.n	800c2d0 <UART_SetConfig+0x9d4>
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	db7c      	blt.n	800c33a <UART_SetConfig+0xa3e>
 800c240:	2b20      	cmp	r3, #32
 800c242:	d87a      	bhi.n	800c33a <UART_SetConfig+0xa3e>
 800c244:	a201      	add	r2, pc, #4	@ (adr r2, 800c24c <UART_SetConfig+0x950>)
 800c246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c24a:	bf00      	nop
 800c24c:	0800c2d7 	.word	0x0800c2d7
 800c250:	0800c2df 	.word	0x0800c2df
 800c254:	0800c33b 	.word	0x0800c33b
 800c258:	0800c33b 	.word	0x0800c33b
 800c25c:	0800c2e7 	.word	0x0800c2e7
 800c260:	0800c33b 	.word	0x0800c33b
 800c264:	0800c33b 	.word	0x0800c33b
 800c268:	0800c33b 	.word	0x0800c33b
 800c26c:	0800c2f7 	.word	0x0800c2f7
 800c270:	0800c33b 	.word	0x0800c33b
 800c274:	0800c33b 	.word	0x0800c33b
 800c278:	0800c33b 	.word	0x0800c33b
 800c27c:	0800c33b 	.word	0x0800c33b
 800c280:	0800c33b 	.word	0x0800c33b
 800c284:	0800c33b 	.word	0x0800c33b
 800c288:	0800c33b 	.word	0x0800c33b
 800c28c:	0800c307 	.word	0x0800c307
 800c290:	0800c33b 	.word	0x0800c33b
 800c294:	0800c33b 	.word	0x0800c33b
 800c298:	0800c33b 	.word	0x0800c33b
 800c29c:	0800c33b 	.word	0x0800c33b
 800c2a0:	0800c33b 	.word	0x0800c33b
 800c2a4:	0800c33b 	.word	0x0800c33b
 800c2a8:	0800c33b 	.word	0x0800c33b
 800c2ac:	0800c33b 	.word	0x0800c33b
 800c2b0:	0800c33b 	.word	0x0800c33b
 800c2b4:	0800c33b 	.word	0x0800c33b
 800c2b8:	0800c33b 	.word	0x0800c33b
 800c2bc:	0800c33b 	.word	0x0800c33b
 800c2c0:	0800c33b 	.word	0x0800c33b
 800c2c4:	0800c33b 	.word	0x0800c33b
 800c2c8:	0800c33b 	.word	0x0800c33b
 800c2cc:	0800c32d 	.word	0x0800c32d
 800c2d0:	2b40      	cmp	r3, #64	@ 0x40
 800c2d2:	d02e      	beq.n	800c332 <UART_SetConfig+0xa36>
 800c2d4:	e031      	b.n	800c33a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c2d6:	f7fb ff01 	bl	80080dc <HAL_RCC_GetPCLK1Freq>
 800c2da:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c2dc:	e033      	b.n	800c346 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c2de:	f7fb ff13 	bl	8008108 <HAL_RCC_GetPCLK2Freq>
 800c2e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c2e4:	e02f      	b.n	800c346 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c2e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	f7fd fec2 	bl	800a074 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c2f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c2f4:	e027      	b.n	800c346 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c2f6:	f107 0318 	add.w	r3, r7, #24
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	f7fe f80e 	bl	800a31c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c300:	69fb      	ldr	r3, [r7, #28]
 800c302:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c304:	e01f      	b.n	800c346 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c306:	4b2d      	ldr	r3, [pc, #180]	@ (800c3bc <UART_SetConfig+0xac0>)
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	f003 0320 	and.w	r3, r3, #32
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d009      	beq.n	800c326 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c312:	4b2a      	ldr	r3, [pc, #168]	@ (800c3bc <UART_SetConfig+0xac0>)
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	08db      	lsrs	r3, r3, #3
 800c318:	f003 0303 	and.w	r3, r3, #3
 800c31c:	4a28      	ldr	r2, [pc, #160]	@ (800c3c0 <UART_SetConfig+0xac4>)
 800c31e:	fa22 f303 	lsr.w	r3, r2, r3
 800c322:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c324:	e00f      	b.n	800c346 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800c326:	4b26      	ldr	r3, [pc, #152]	@ (800c3c0 <UART_SetConfig+0xac4>)
 800c328:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c32a:	e00c      	b.n	800c346 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c32c:	4b25      	ldr	r3, [pc, #148]	@ (800c3c4 <UART_SetConfig+0xac8>)
 800c32e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c330:	e009      	b.n	800c346 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c332:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c336:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c338:	e005      	b.n	800c346 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800c33a:	2300      	movs	r3, #0
 800c33c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c33e:	2301      	movs	r3, #1
 800c340:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c344:	bf00      	nop
    }

    if (pclk != 0U)
 800c346:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d021      	beq.n	800c390 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c34c:	697b      	ldr	r3, [r7, #20]
 800c34e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c350:	4a1d      	ldr	r2, [pc, #116]	@ (800c3c8 <UART_SetConfig+0xacc>)
 800c352:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c356:	461a      	mov	r2, r3
 800c358:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c35a:	fbb3 f2f2 	udiv	r2, r3, r2
 800c35e:	697b      	ldr	r3, [r7, #20]
 800c360:	685b      	ldr	r3, [r3, #4]
 800c362:	085b      	lsrs	r3, r3, #1
 800c364:	441a      	add	r2, r3
 800c366:	697b      	ldr	r3, [r7, #20]
 800c368:	685b      	ldr	r3, [r3, #4]
 800c36a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c36e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c372:	2b0f      	cmp	r3, #15
 800c374:	d909      	bls.n	800c38a <UART_SetConfig+0xa8e>
 800c376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c378:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c37c:	d205      	bcs.n	800c38a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c37e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c380:	b29a      	uxth	r2, r3
 800c382:	697b      	ldr	r3, [r7, #20]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	60da      	str	r2, [r3, #12]
 800c388:	e002      	b.n	800c390 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c38a:	2301      	movs	r3, #1
 800c38c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c390:	697b      	ldr	r3, [r7, #20]
 800c392:	2201      	movs	r2, #1
 800c394:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800c398:	697b      	ldr	r3, [r7, #20]
 800c39a:	2201      	movs	r2, #1
 800c39c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c3a0:	697b      	ldr	r3, [r7, #20]
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c3a6:	697b      	ldr	r3, [r7, #20]
 800c3a8:	2200      	movs	r2, #0
 800c3aa:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c3ac:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	3748      	adds	r7, #72	@ 0x48
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c3ba:	bf00      	nop
 800c3bc:	58024400 	.word	0x58024400
 800c3c0:	03d09000 	.word	0x03d09000
 800c3c4:	003d0900 	.word	0x003d0900
 800c3c8:	0800cad4 	.word	0x0800cad4

0800c3cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c3cc:	b480      	push	{r7}
 800c3ce:	b083      	sub	sp, #12
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3d8:	f003 0308 	and.w	r3, r3, #8
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d00a      	beq.n	800c3f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	685b      	ldr	r3, [r3, #4]
 800c3e6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	430a      	orrs	r2, r1
 800c3f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3fa:	f003 0301 	and.w	r3, r3, #1
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d00a      	beq.n	800c418 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	685b      	ldr	r3, [r3, #4]
 800c408:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	430a      	orrs	r2, r1
 800c416:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c41c:	f003 0302 	and.w	r3, r3, #2
 800c420:	2b00      	cmp	r3, #0
 800c422:	d00a      	beq.n	800c43a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	685b      	ldr	r3, [r3, #4]
 800c42a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	430a      	orrs	r2, r1
 800c438:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c43e:	f003 0304 	and.w	r3, r3, #4
 800c442:	2b00      	cmp	r3, #0
 800c444:	d00a      	beq.n	800c45c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	685b      	ldr	r3, [r3, #4]
 800c44c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	430a      	orrs	r2, r1
 800c45a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c460:	f003 0310 	and.w	r3, r3, #16
 800c464:	2b00      	cmp	r3, #0
 800c466:	d00a      	beq.n	800c47e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	689b      	ldr	r3, [r3, #8]
 800c46e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	430a      	orrs	r2, r1
 800c47c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c482:	f003 0320 	and.w	r3, r3, #32
 800c486:	2b00      	cmp	r3, #0
 800c488:	d00a      	beq.n	800c4a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	689b      	ldr	r3, [r3, #8]
 800c490:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	430a      	orrs	r2, r1
 800c49e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c4a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d01a      	beq.n	800c4e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	685b      	ldr	r3, [r3, #4]
 800c4b2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	430a      	orrs	r2, r1
 800c4c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c4c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c4ca:	d10a      	bne.n	800c4e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	685b      	ldr	r3, [r3, #4]
 800c4d2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	430a      	orrs	r2, r1
 800c4e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c4e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d00a      	beq.n	800c504 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	685b      	ldr	r3, [r3, #4]
 800c4f4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	430a      	orrs	r2, r1
 800c502:	605a      	str	r2, [r3, #4]
  }
}
 800c504:	bf00      	nop
 800c506:	370c      	adds	r7, #12
 800c508:	46bd      	mov	sp, r7
 800c50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50e:	4770      	bx	lr

0800c510 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c510:	b580      	push	{r7, lr}
 800c512:	b098      	sub	sp, #96	@ 0x60
 800c514:	af02      	add	r7, sp, #8
 800c516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	2200      	movs	r2, #0
 800c51c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c520:	f7f6 fce2 	bl	8002ee8 <HAL_GetTick>
 800c524:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	f003 0308 	and.w	r3, r3, #8
 800c530:	2b08      	cmp	r3, #8
 800c532:	d12f      	bne.n	800c594 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c534:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c538:	9300      	str	r3, [sp, #0]
 800c53a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c53c:	2200      	movs	r2, #0
 800c53e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c542:	6878      	ldr	r0, [r7, #4]
 800c544:	f000 f88e 	bl	800c664 <UART_WaitOnFlagUntilTimeout>
 800c548:	4603      	mov	r3, r0
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d022      	beq.n	800c594 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c556:	e853 3f00 	ldrex	r3, [r3]
 800c55a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c55c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c55e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c562:	653b      	str	r3, [r7, #80]	@ 0x50
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	461a      	mov	r2, r3
 800c56a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c56c:	647b      	str	r3, [r7, #68]	@ 0x44
 800c56e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c570:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c572:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c574:	e841 2300 	strex	r3, r2, [r1]
 800c578:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c57a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d1e6      	bne.n	800c54e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	2220      	movs	r2, #32
 800c584:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	2200      	movs	r2, #0
 800c58c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c590:	2303      	movs	r3, #3
 800c592:	e063      	b.n	800c65c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	f003 0304 	and.w	r3, r3, #4
 800c59e:	2b04      	cmp	r3, #4
 800c5a0:	d149      	bne.n	800c636 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c5a2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c5a6:	9300      	str	r3, [sp, #0]
 800c5a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c5b0:	6878      	ldr	r0, [r7, #4]
 800c5b2:	f000 f857 	bl	800c664 <UART_WaitOnFlagUntilTimeout>
 800c5b6:	4603      	mov	r3, r0
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d03c      	beq.n	800c636 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5c4:	e853 3f00 	ldrex	r3, [r3]
 800c5c8:	623b      	str	r3, [r7, #32]
   return(result);
 800c5ca:	6a3b      	ldr	r3, [r7, #32]
 800c5cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c5d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	461a      	mov	r2, r3
 800c5d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c5da:	633b      	str	r3, [r7, #48]	@ 0x30
 800c5dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c5e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c5e2:	e841 2300 	strex	r3, r2, [r1]
 800c5e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c5e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d1e6      	bne.n	800c5bc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	3308      	adds	r3, #8
 800c5f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5f6:	693b      	ldr	r3, [r7, #16]
 800c5f8:	e853 3f00 	ldrex	r3, [r3]
 800c5fc:	60fb      	str	r3, [r7, #12]
   return(result);
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	f023 0301 	bic.w	r3, r3, #1
 800c604:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	3308      	adds	r3, #8
 800c60c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c60e:	61fa      	str	r2, [r7, #28]
 800c610:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c612:	69b9      	ldr	r1, [r7, #24]
 800c614:	69fa      	ldr	r2, [r7, #28]
 800c616:	e841 2300 	strex	r3, r2, [r1]
 800c61a:	617b      	str	r3, [r7, #20]
   return(result);
 800c61c:	697b      	ldr	r3, [r7, #20]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d1e5      	bne.n	800c5ee <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	2220      	movs	r2, #32
 800c626:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	2200      	movs	r2, #0
 800c62e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c632:	2303      	movs	r3, #3
 800c634:	e012      	b.n	800c65c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	2220      	movs	r2, #32
 800c63a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	2220      	movs	r2, #32
 800c642:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	2200      	movs	r2, #0
 800c64a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	2200      	movs	r2, #0
 800c650:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	2200      	movs	r2, #0
 800c656:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c65a:	2300      	movs	r3, #0
}
 800c65c:	4618      	mov	r0, r3
 800c65e:	3758      	adds	r7, #88	@ 0x58
 800c660:	46bd      	mov	sp, r7
 800c662:	bd80      	pop	{r7, pc}

0800c664 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c664:	b580      	push	{r7, lr}
 800c666:	b084      	sub	sp, #16
 800c668:	af00      	add	r7, sp, #0
 800c66a:	60f8      	str	r0, [r7, #12]
 800c66c:	60b9      	str	r1, [r7, #8]
 800c66e:	603b      	str	r3, [r7, #0]
 800c670:	4613      	mov	r3, r2
 800c672:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c674:	e04f      	b.n	800c716 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c676:	69bb      	ldr	r3, [r7, #24]
 800c678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c67c:	d04b      	beq.n	800c716 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c67e:	f7f6 fc33 	bl	8002ee8 <HAL_GetTick>
 800c682:	4602      	mov	r2, r0
 800c684:	683b      	ldr	r3, [r7, #0]
 800c686:	1ad3      	subs	r3, r2, r3
 800c688:	69ba      	ldr	r2, [r7, #24]
 800c68a:	429a      	cmp	r2, r3
 800c68c:	d302      	bcc.n	800c694 <UART_WaitOnFlagUntilTimeout+0x30>
 800c68e:	69bb      	ldr	r3, [r7, #24]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d101      	bne.n	800c698 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c694:	2303      	movs	r3, #3
 800c696:	e04e      	b.n	800c736 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	f003 0304 	and.w	r3, r3, #4
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d037      	beq.n	800c716 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c6a6:	68bb      	ldr	r3, [r7, #8]
 800c6a8:	2b80      	cmp	r3, #128	@ 0x80
 800c6aa:	d034      	beq.n	800c716 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c6ac:	68bb      	ldr	r3, [r7, #8]
 800c6ae:	2b40      	cmp	r3, #64	@ 0x40
 800c6b0:	d031      	beq.n	800c716 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	69db      	ldr	r3, [r3, #28]
 800c6b8:	f003 0308 	and.w	r3, r3, #8
 800c6bc:	2b08      	cmp	r3, #8
 800c6be:	d110      	bne.n	800c6e2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	2208      	movs	r2, #8
 800c6c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c6c8:	68f8      	ldr	r0, [r7, #12]
 800c6ca:	f000 f839 	bl	800c740 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	2208      	movs	r2, #8
 800c6d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	2200      	movs	r2, #0
 800c6da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c6de:	2301      	movs	r3, #1
 800c6e0:	e029      	b.n	800c736 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	69db      	ldr	r3, [r3, #28]
 800c6e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c6ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c6f0:	d111      	bne.n	800c716 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c6fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c6fc:	68f8      	ldr	r0, [r7, #12]
 800c6fe:	f000 f81f 	bl	800c740 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	2220      	movs	r2, #32
 800c706:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	2200      	movs	r2, #0
 800c70e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c712:	2303      	movs	r3, #3
 800c714:	e00f      	b.n	800c736 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	69da      	ldr	r2, [r3, #28]
 800c71c:	68bb      	ldr	r3, [r7, #8]
 800c71e:	4013      	ands	r3, r2
 800c720:	68ba      	ldr	r2, [r7, #8]
 800c722:	429a      	cmp	r2, r3
 800c724:	bf0c      	ite	eq
 800c726:	2301      	moveq	r3, #1
 800c728:	2300      	movne	r3, #0
 800c72a:	b2db      	uxtb	r3, r3
 800c72c:	461a      	mov	r2, r3
 800c72e:	79fb      	ldrb	r3, [r7, #7]
 800c730:	429a      	cmp	r2, r3
 800c732:	d0a0      	beq.n	800c676 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c734:	2300      	movs	r3, #0
}
 800c736:	4618      	mov	r0, r3
 800c738:	3710      	adds	r7, #16
 800c73a:	46bd      	mov	sp, r7
 800c73c:	bd80      	pop	{r7, pc}
	...

0800c740 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c740:	b480      	push	{r7}
 800c742:	b095      	sub	sp, #84	@ 0x54
 800c744:	af00      	add	r7, sp, #0
 800c746:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c74e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c750:	e853 3f00 	ldrex	r3, [r3]
 800c754:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c758:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c75c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	461a      	mov	r2, r3
 800c764:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c766:	643b      	str	r3, [r7, #64]	@ 0x40
 800c768:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c76a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c76c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c76e:	e841 2300 	strex	r3, r2, [r1]
 800c772:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c776:	2b00      	cmp	r3, #0
 800c778:	d1e6      	bne.n	800c748 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	3308      	adds	r3, #8
 800c780:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c782:	6a3b      	ldr	r3, [r7, #32]
 800c784:	e853 3f00 	ldrex	r3, [r3]
 800c788:	61fb      	str	r3, [r7, #28]
   return(result);
 800c78a:	69fa      	ldr	r2, [r7, #28]
 800c78c:	4b1e      	ldr	r3, [pc, #120]	@ (800c808 <UART_EndRxTransfer+0xc8>)
 800c78e:	4013      	ands	r3, r2
 800c790:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	3308      	adds	r3, #8
 800c798:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c79a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c79c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c79e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c7a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c7a2:	e841 2300 	strex	r3, r2, [r1]
 800c7a6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c7a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d1e5      	bne.n	800c77a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c7b2:	2b01      	cmp	r3, #1
 800c7b4:	d118      	bne.n	800c7e8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	e853 3f00 	ldrex	r3, [r3]
 800c7c2:	60bb      	str	r3, [r7, #8]
   return(result);
 800c7c4:	68bb      	ldr	r3, [r7, #8]
 800c7c6:	f023 0310 	bic.w	r3, r3, #16
 800c7ca:	647b      	str	r3, [r7, #68]	@ 0x44
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	461a      	mov	r2, r3
 800c7d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c7d4:	61bb      	str	r3, [r7, #24]
 800c7d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7d8:	6979      	ldr	r1, [r7, #20]
 800c7da:	69ba      	ldr	r2, [r7, #24]
 800c7dc:	e841 2300 	strex	r3, r2, [r1]
 800c7e0:	613b      	str	r3, [r7, #16]
   return(result);
 800c7e2:	693b      	ldr	r3, [r7, #16]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d1e6      	bne.n	800c7b6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	2220      	movs	r2, #32
 800c7ec:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	2200      	movs	r2, #0
 800c7f4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	2200      	movs	r2, #0
 800c7fa:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c7fc:	bf00      	nop
 800c7fe:	3754      	adds	r7, #84	@ 0x54
 800c800:	46bd      	mov	sp, r7
 800c802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c806:	4770      	bx	lr
 800c808:	effffffe 	.word	0xeffffffe

0800c80c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c80c:	b480      	push	{r7}
 800c80e:	b085      	sub	sp, #20
 800c810:	af00      	add	r7, sp, #0
 800c812:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c81a:	2b01      	cmp	r3, #1
 800c81c:	d101      	bne.n	800c822 <HAL_UARTEx_DisableFifoMode+0x16>
 800c81e:	2302      	movs	r3, #2
 800c820:	e027      	b.n	800c872 <HAL_UARTEx_DisableFifoMode+0x66>
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	2201      	movs	r2, #1
 800c826:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	2224      	movs	r2, #36	@ 0x24
 800c82e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	681a      	ldr	r2, [r3, #0]
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	f022 0201 	bic.w	r2, r2, #1
 800c848:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c850:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	2200      	movs	r2, #0
 800c856:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	68fa      	ldr	r2, [r7, #12]
 800c85e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	2220      	movs	r2, #32
 800c864:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	2200      	movs	r2, #0
 800c86c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c870:	2300      	movs	r3, #0
}
 800c872:	4618      	mov	r0, r3
 800c874:	3714      	adds	r7, #20
 800c876:	46bd      	mov	sp, r7
 800c878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87c:	4770      	bx	lr

0800c87e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c87e:	b580      	push	{r7, lr}
 800c880:	b084      	sub	sp, #16
 800c882:	af00      	add	r7, sp, #0
 800c884:	6078      	str	r0, [r7, #4]
 800c886:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c88e:	2b01      	cmp	r3, #1
 800c890:	d101      	bne.n	800c896 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c892:	2302      	movs	r3, #2
 800c894:	e02d      	b.n	800c8f2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	2201      	movs	r2, #1
 800c89a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	2224      	movs	r2, #36	@ 0x24
 800c8a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	681a      	ldr	r2, [r3, #0]
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	f022 0201 	bic.w	r2, r2, #1
 800c8bc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	689b      	ldr	r3, [r3, #8]
 800c8c4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	683a      	ldr	r2, [r7, #0]
 800c8ce:	430a      	orrs	r2, r1
 800c8d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c8d2:	6878      	ldr	r0, [r7, #4]
 800c8d4:	f000 f850 	bl	800c978 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	68fa      	ldr	r2, [r7, #12]
 800c8de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	2220      	movs	r2, #32
 800c8e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c8f0:	2300      	movs	r3, #0
}
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	3710      	adds	r7, #16
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	bd80      	pop	{r7, pc}

0800c8fa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c8fa:	b580      	push	{r7, lr}
 800c8fc:	b084      	sub	sp, #16
 800c8fe:	af00      	add	r7, sp, #0
 800c900:	6078      	str	r0, [r7, #4]
 800c902:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c90a:	2b01      	cmp	r3, #1
 800c90c:	d101      	bne.n	800c912 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c90e:	2302      	movs	r3, #2
 800c910:	e02d      	b.n	800c96e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	2201      	movs	r2, #1
 800c916:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	2224      	movs	r2, #36	@ 0x24
 800c91e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	681a      	ldr	r2, [r3, #0]
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	f022 0201 	bic.w	r2, r2, #1
 800c938:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	689b      	ldr	r3, [r3, #8]
 800c940:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	683a      	ldr	r2, [r7, #0]
 800c94a:	430a      	orrs	r2, r1
 800c94c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c94e:	6878      	ldr	r0, [r7, #4]
 800c950:	f000 f812 	bl	800c978 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	68fa      	ldr	r2, [r7, #12]
 800c95a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	2220      	movs	r2, #32
 800c960:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	2200      	movs	r2, #0
 800c968:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c96c:	2300      	movs	r3, #0
}
 800c96e:	4618      	mov	r0, r3
 800c970:	3710      	adds	r7, #16
 800c972:	46bd      	mov	sp, r7
 800c974:	bd80      	pop	{r7, pc}
	...

0800c978 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c978:	b480      	push	{r7}
 800c97a:	b085      	sub	sp, #20
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c984:	2b00      	cmp	r3, #0
 800c986:	d108      	bne.n	800c99a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	2201      	movs	r2, #1
 800c98c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	2201      	movs	r2, #1
 800c994:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c998:	e031      	b.n	800c9fe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c99a:	2310      	movs	r3, #16
 800c99c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c99e:	2310      	movs	r3, #16
 800c9a0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	689b      	ldr	r3, [r3, #8]
 800c9a8:	0e5b      	lsrs	r3, r3, #25
 800c9aa:	b2db      	uxtb	r3, r3
 800c9ac:	f003 0307 	and.w	r3, r3, #7
 800c9b0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	689b      	ldr	r3, [r3, #8]
 800c9b8:	0f5b      	lsrs	r3, r3, #29
 800c9ba:	b2db      	uxtb	r3, r3
 800c9bc:	f003 0307 	and.w	r3, r3, #7
 800c9c0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c9c2:	7bbb      	ldrb	r3, [r7, #14]
 800c9c4:	7b3a      	ldrb	r2, [r7, #12]
 800c9c6:	4911      	ldr	r1, [pc, #68]	@ (800ca0c <UARTEx_SetNbDataToProcess+0x94>)
 800c9c8:	5c8a      	ldrb	r2, [r1, r2]
 800c9ca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c9ce:	7b3a      	ldrb	r2, [r7, #12]
 800c9d0:	490f      	ldr	r1, [pc, #60]	@ (800ca10 <UARTEx_SetNbDataToProcess+0x98>)
 800c9d2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c9d4:	fb93 f3f2 	sdiv	r3, r3, r2
 800c9d8:	b29a      	uxth	r2, r3
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c9e0:	7bfb      	ldrb	r3, [r7, #15]
 800c9e2:	7b7a      	ldrb	r2, [r7, #13]
 800c9e4:	4909      	ldr	r1, [pc, #36]	@ (800ca0c <UARTEx_SetNbDataToProcess+0x94>)
 800c9e6:	5c8a      	ldrb	r2, [r1, r2]
 800c9e8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c9ec:	7b7a      	ldrb	r2, [r7, #13]
 800c9ee:	4908      	ldr	r1, [pc, #32]	@ (800ca10 <UARTEx_SetNbDataToProcess+0x98>)
 800c9f0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c9f2:	fb93 f3f2 	sdiv	r3, r3, r2
 800c9f6:	b29a      	uxth	r2, r3
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c9fe:	bf00      	nop
 800ca00:	3714      	adds	r7, #20
 800ca02:	46bd      	mov	sp, r7
 800ca04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca08:	4770      	bx	lr
 800ca0a:	bf00      	nop
 800ca0c:	0800caec 	.word	0x0800caec
 800ca10:	0800caf4 	.word	0x0800caf4

0800ca14 <memset>:
 800ca14:	4402      	add	r2, r0
 800ca16:	4603      	mov	r3, r0
 800ca18:	4293      	cmp	r3, r2
 800ca1a:	d100      	bne.n	800ca1e <memset+0xa>
 800ca1c:	4770      	bx	lr
 800ca1e:	f803 1b01 	strb.w	r1, [r3], #1
 800ca22:	e7f9      	b.n	800ca18 <memset+0x4>

0800ca24 <__libc_init_array>:
 800ca24:	b570      	push	{r4, r5, r6, lr}
 800ca26:	4d0d      	ldr	r5, [pc, #52]	@ (800ca5c <__libc_init_array+0x38>)
 800ca28:	4c0d      	ldr	r4, [pc, #52]	@ (800ca60 <__libc_init_array+0x3c>)
 800ca2a:	1b64      	subs	r4, r4, r5
 800ca2c:	10a4      	asrs	r4, r4, #2
 800ca2e:	2600      	movs	r6, #0
 800ca30:	42a6      	cmp	r6, r4
 800ca32:	d109      	bne.n	800ca48 <__libc_init_array+0x24>
 800ca34:	4d0b      	ldr	r5, [pc, #44]	@ (800ca64 <__libc_init_array+0x40>)
 800ca36:	4c0c      	ldr	r4, [pc, #48]	@ (800ca68 <__libc_init_array+0x44>)
 800ca38:	f000 f826 	bl	800ca88 <_init>
 800ca3c:	1b64      	subs	r4, r4, r5
 800ca3e:	10a4      	asrs	r4, r4, #2
 800ca40:	2600      	movs	r6, #0
 800ca42:	42a6      	cmp	r6, r4
 800ca44:	d105      	bne.n	800ca52 <__libc_init_array+0x2e>
 800ca46:	bd70      	pop	{r4, r5, r6, pc}
 800ca48:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca4c:	4798      	blx	r3
 800ca4e:	3601      	adds	r6, #1
 800ca50:	e7ee      	b.n	800ca30 <__libc_init_array+0xc>
 800ca52:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca56:	4798      	blx	r3
 800ca58:	3601      	adds	r6, #1
 800ca5a:	e7f2      	b.n	800ca42 <__libc_init_array+0x1e>
 800ca5c:	0800cb04 	.word	0x0800cb04
 800ca60:	0800cb04 	.word	0x0800cb04
 800ca64:	0800cb04 	.word	0x0800cb04
 800ca68:	0800cb08 	.word	0x0800cb08

0800ca6c <memcpy>:
 800ca6c:	440a      	add	r2, r1
 800ca6e:	4291      	cmp	r1, r2
 800ca70:	f100 33ff 	add.w	r3, r0, #4294967295
 800ca74:	d100      	bne.n	800ca78 <memcpy+0xc>
 800ca76:	4770      	bx	lr
 800ca78:	b510      	push	{r4, lr}
 800ca7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ca82:	4291      	cmp	r1, r2
 800ca84:	d1f9      	bne.n	800ca7a <memcpy+0xe>
 800ca86:	bd10      	pop	{r4, pc}

0800ca88 <_init>:
 800ca88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca8a:	bf00      	nop
 800ca8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca8e:	bc08      	pop	{r3}
 800ca90:	469e      	mov	lr, r3
 800ca92:	4770      	bx	lr

0800ca94 <_fini>:
 800ca94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca96:	bf00      	nop
 800ca98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca9a:	bc08      	pop	{r3}
 800ca9c:	469e      	mov	lr, r3
 800ca9e:	4770      	bx	lr
