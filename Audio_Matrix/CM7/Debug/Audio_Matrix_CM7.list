
Audio_Matrix_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cb6c  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  0800ce04  0800ce04  0000de04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cea0  0800cea0  0000e020  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800cea0  0800cea0  0000dea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cea8  0800cea8  0000e020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cea8  0800cea8  0000dea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ceac  0800ceac  0000deac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  24000000  0800ceb0  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001010  24000020  0800ced0  0000e020  2**5
                  ALLOC
 10 .audiobuffer  00000800  20000000  20000000  0000f000  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  24001030  24001030  0000e030  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0000e020  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001dedb  00000000  00000000  0000e04e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a0e  00000000  00000000  0002bf29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013a0  00000000  00000000  0002f938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f2c  00000000  00000000  00030cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003bd2f  00000000  00000000  00031c04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ea5e  00000000  00000000  0006d933  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00183fb6  00000000  00000000  0008c391  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000b8  00000000  00000000  00210347  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000051d8  00000000  00000000  00210400  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  002155d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00000fad  00000000  00000000  0021563e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 00000280  00000000  00000000  002165eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000020 	.word	0x24000020
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800cdec 	.word	0x0800cdec

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000024 	.word	0x24000024
 80002d4:	0800cdec 	.word	0x0800cdec

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b988 	b.w	8000600 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	468e      	mov	lr, r1
 8000310:	4604      	mov	r4, r0
 8000312:	4688      	mov	r8, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d962      	bls.n	80003e4 <__udivmoddi4+0xdc>
 800031e:	fab2 f682 	clz	r6, r2
 8000322:	b14e      	cbz	r6, 8000338 <__udivmoddi4+0x30>
 8000324:	f1c6 0320 	rsb	r3, r6, #32
 8000328:	fa01 f806 	lsl.w	r8, r1, r6
 800032c:	fa20 f303 	lsr.w	r3, r0, r3
 8000330:	40b7      	lsls	r7, r6
 8000332:	ea43 0808 	orr.w	r8, r3, r8
 8000336:	40b4      	lsls	r4, r6
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	fbb8 f1fe 	udiv	r1, r8, lr
 8000344:	0c23      	lsrs	r3, r4, #16
 8000346:	fb0e 8811 	mls	r8, lr, r1, r8
 800034a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034e:	fb01 f20c 	mul.w	r2, r1, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d909      	bls.n	800036a <__udivmoddi4+0x62>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f101 30ff 	add.w	r0, r1, #4294967295
 800035c:	f080 80ea 	bcs.w	8000534 <__udivmoddi4+0x22c>
 8000360:	429a      	cmp	r2, r3
 8000362:	f240 80e7 	bls.w	8000534 <__udivmoddi4+0x22c>
 8000366:	3902      	subs	r1, #2
 8000368:	443b      	add	r3, r7
 800036a:	1a9a      	subs	r2, r3, r2
 800036c:	b2a3      	uxth	r3, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800037a:	fb00 fc0c 	mul.w	ip, r0, ip
 800037e:	459c      	cmp	ip, r3
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x8e>
 8000382:	18fb      	adds	r3, r7, r3
 8000384:	f100 32ff 	add.w	r2, r0, #4294967295
 8000388:	f080 80d6 	bcs.w	8000538 <__udivmoddi4+0x230>
 800038c:	459c      	cmp	ip, r3
 800038e:	f240 80d3 	bls.w	8000538 <__udivmoddi4+0x230>
 8000392:	443b      	add	r3, r7
 8000394:	3802      	subs	r0, #2
 8000396:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039a:	eba3 030c 	sub.w	r3, r3, ip
 800039e:	2100      	movs	r1, #0
 80003a0:	b11d      	cbz	r5, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40f3      	lsrs	r3, r6
 80003a4:	2200      	movs	r2, #0
 80003a6:	e9c5 3200 	strd	r3, r2, [r5]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d905      	bls.n	80003be <__udivmoddi4+0xb6>
 80003b2:	b10d      	cbz	r5, 80003b8 <__udivmoddi4+0xb0>
 80003b4:	e9c5 0100 	strd	r0, r1, [r5]
 80003b8:	2100      	movs	r1, #0
 80003ba:	4608      	mov	r0, r1
 80003bc:	e7f5      	b.n	80003aa <__udivmoddi4+0xa2>
 80003be:	fab3 f183 	clz	r1, r3
 80003c2:	2900      	cmp	r1, #0
 80003c4:	d146      	bne.n	8000454 <__udivmoddi4+0x14c>
 80003c6:	4573      	cmp	r3, lr
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0xc8>
 80003ca:	4282      	cmp	r2, r0
 80003cc:	f200 8105 	bhi.w	80005da <__udivmoddi4+0x2d2>
 80003d0:	1a84      	subs	r4, r0, r2
 80003d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	4690      	mov	r8, r2
 80003da:	2d00      	cmp	r5, #0
 80003dc:	d0e5      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003de:	e9c5 4800 	strd	r4, r8, [r5]
 80003e2:	e7e2      	b.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	2a00      	cmp	r2, #0
 80003e6:	f000 8090 	beq.w	800050a <__udivmoddi4+0x202>
 80003ea:	fab2 f682 	clz	r6, r2
 80003ee:	2e00      	cmp	r6, #0
 80003f0:	f040 80a4 	bne.w	800053c <__udivmoddi4+0x234>
 80003f4:	1a8a      	subs	r2, r1, r2
 80003f6:	0c03      	lsrs	r3, r0, #16
 80003f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fc:	b280      	uxth	r0, r0
 80003fe:	b2bc      	uxth	r4, r7
 8000400:	2101      	movs	r1, #1
 8000402:	fbb2 fcfe 	udiv	ip, r2, lr
 8000406:	fb0e 221c 	mls	r2, lr, ip, r2
 800040a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800040e:	fb04 f20c 	mul.w	r2, r4, ip
 8000412:	429a      	cmp	r2, r3
 8000414:	d907      	bls.n	8000426 <__udivmoddi4+0x11e>
 8000416:	18fb      	adds	r3, r7, r3
 8000418:	f10c 38ff 	add.w	r8, ip, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x11c>
 800041e:	429a      	cmp	r2, r3
 8000420:	f200 80e0 	bhi.w	80005e4 <__udivmoddi4+0x2dc>
 8000424:	46c4      	mov	ip, r8
 8000426:	1a9b      	subs	r3, r3, r2
 8000428:	fbb3 f2fe 	udiv	r2, r3, lr
 800042c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000430:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000434:	fb02 f404 	mul.w	r4, r2, r4
 8000438:	429c      	cmp	r4, r3
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x144>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x142>
 8000444:	429c      	cmp	r4, r3
 8000446:	f200 80ca 	bhi.w	80005de <__udivmoddi4+0x2d6>
 800044a:	4602      	mov	r2, r0
 800044c:	1b1b      	subs	r3, r3, r4
 800044e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000452:	e7a5      	b.n	80003a0 <__udivmoddi4+0x98>
 8000454:	f1c1 0620 	rsb	r6, r1, #32
 8000458:	408b      	lsls	r3, r1
 800045a:	fa22 f706 	lsr.w	r7, r2, r6
 800045e:	431f      	orrs	r7, r3
 8000460:	fa0e f401 	lsl.w	r4, lr, r1
 8000464:	fa20 f306 	lsr.w	r3, r0, r6
 8000468:	fa2e fe06 	lsr.w	lr, lr, r6
 800046c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000470:	4323      	orrs	r3, r4
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	fa1f fc87 	uxth.w	ip, r7
 800047a:	fbbe f0f9 	udiv	r0, lr, r9
 800047e:	0c1c      	lsrs	r4, r3, #16
 8000480:	fb09 ee10 	mls	lr, r9, r0, lr
 8000484:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000488:	fb00 fe0c 	mul.w	lr, r0, ip
 800048c:	45a6      	cmp	lr, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	d909      	bls.n	80004a8 <__udivmoddi4+0x1a0>
 8000494:	193c      	adds	r4, r7, r4
 8000496:	f100 3aff 	add.w	sl, r0, #4294967295
 800049a:	f080 809c 	bcs.w	80005d6 <__udivmoddi4+0x2ce>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f240 8099 	bls.w	80005d6 <__udivmoddi4+0x2ce>
 80004a4:	3802      	subs	r0, #2
 80004a6:	443c      	add	r4, r7
 80004a8:	eba4 040e 	sub.w	r4, r4, lr
 80004ac:	fa1f fe83 	uxth.w	lr, r3
 80004b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b4:	fb09 4413 	mls	r4, r9, r3, r4
 80004b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c0:	45a4      	cmp	ip, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x1ce>
 80004c4:	193c      	adds	r4, r7, r4
 80004c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80004ca:	f080 8082 	bcs.w	80005d2 <__udivmoddi4+0x2ca>
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d97f      	bls.n	80005d2 <__udivmoddi4+0x2ca>
 80004d2:	3b02      	subs	r3, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	fba0 ec02 	umull	lr, ip, r0, r2
 80004e2:	4564      	cmp	r4, ip
 80004e4:	4673      	mov	r3, lr
 80004e6:	46e1      	mov	r9, ip
 80004e8:	d362      	bcc.n	80005b0 <__udivmoddi4+0x2a8>
 80004ea:	d05f      	beq.n	80005ac <__udivmoddi4+0x2a4>
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x1fe>
 80004ee:	ebb8 0203 	subs.w	r2, r8, r3
 80004f2:	eb64 0409 	sbc.w	r4, r4, r9
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	fa22 f301 	lsr.w	r3, r2, r1
 80004fe:	431e      	orrs	r6, r3
 8000500:	40cc      	lsrs	r4, r1
 8000502:	e9c5 6400 	strd	r6, r4, [r5]
 8000506:	2100      	movs	r1, #0
 8000508:	e74f      	b.n	80003aa <__udivmoddi4+0xa2>
 800050a:	fbb1 fcf2 	udiv	ip, r1, r2
 800050e:	0c01      	lsrs	r1, r0, #16
 8000510:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000514:	b280      	uxth	r0, r0
 8000516:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800051a:	463b      	mov	r3, r7
 800051c:	4638      	mov	r0, r7
 800051e:	463c      	mov	r4, r7
 8000520:	46b8      	mov	r8, r7
 8000522:	46be      	mov	lr, r7
 8000524:	2620      	movs	r6, #32
 8000526:	fbb1 f1f7 	udiv	r1, r1, r7
 800052a:	eba2 0208 	sub.w	r2, r2, r8
 800052e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000532:	e766      	b.n	8000402 <__udivmoddi4+0xfa>
 8000534:	4601      	mov	r1, r0
 8000536:	e718      	b.n	800036a <__udivmoddi4+0x62>
 8000538:	4610      	mov	r0, r2
 800053a:	e72c      	b.n	8000396 <__udivmoddi4+0x8e>
 800053c:	f1c6 0220 	rsb	r2, r6, #32
 8000540:	fa2e f302 	lsr.w	r3, lr, r2
 8000544:	40b7      	lsls	r7, r6
 8000546:	40b1      	lsls	r1, r6
 8000548:	fa20 f202 	lsr.w	r2, r0, r2
 800054c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000550:	430a      	orrs	r2, r1
 8000552:	fbb3 f8fe 	udiv	r8, r3, lr
 8000556:	b2bc      	uxth	r4, r7
 8000558:	fb0e 3318 	mls	r3, lr, r8, r3
 800055c:	0c11      	lsrs	r1, r2, #16
 800055e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000562:	fb08 f904 	mul.w	r9, r8, r4
 8000566:	40b0      	lsls	r0, r6
 8000568:	4589      	cmp	r9, r1
 800056a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800056e:	b280      	uxth	r0, r0
 8000570:	d93e      	bls.n	80005f0 <__udivmoddi4+0x2e8>
 8000572:	1879      	adds	r1, r7, r1
 8000574:	f108 3cff 	add.w	ip, r8, #4294967295
 8000578:	d201      	bcs.n	800057e <__udivmoddi4+0x276>
 800057a:	4589      	cmp	r9, r1
 800057c:	d81f      	bhi.n	80005be <__udivmoddi4+0x2b6>
 800057e:	eba1 0109 	sub.w	r1, r1, r9
 8000582:	fbb1 f9fe 	udiv	r9, r1, lr
 8000586:	fb09 f804 	mul.w	r8, r9, r4
 800058a:	fb0e 1119 	mls	r1, lr, r9, r1
 800058e:	b292      	uxth	r2, r2
 8000590:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000594:	4542      	cmp	r2, r8
 8000596:	d229      	bcs.n	80005ec <__udivmoddi4+0x2e4>
 8000598:	18ba      	adds	r2, r7, r2
 800059a:	f109 31ff 	add.w	r1, r9, #4294967295
 800059e:	d2c4      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a0:	4542      	cmp	r2, r8
 80005a2:	d2c2      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a4:	f1a9 0102 	sub.w	r1, r9, #2
 80005a8:	443a      	add	r2, r7
 80005aa:	e7be      	b.n	800052a <__udivmoddi4+0x222>
 80005ac:	45f0      	cmp	r8, lr
 80005ae:	d29d      	bcs.n	80004ec <__udivmoddi4+0x1e4>
 80005b0:	ebbe 0302 	subs.w	r3, lr, r2
 80005b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005b8:	3801      	subs	r0, #1
 80005ba:	46e1      	mov	r9, ip
 80005bc:	e796      	b.n	80004ec <__udivmoddi4+0x1e4>
 80005be:	eba7 0909 	sub.w	r9, r7, r9
 80005c2:	4449      	add	r1, r9
 80005c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80005c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80005cc:	fb09 f804 	mul.w	r8, r9, r4
 80005d0:	e7db      	b.n	800058a <__udivmoddi4+0x282>
 80005d2:	4673      	mov	r3, lr
 80005d4:	e77f      	b.n	80004d6 <__udivmoddi4+0x1ce>
 80005d6:	4650      	mov	r0, sl
 80005d8:	e766      	b.n	80004a8 <__udivmoddi4+0x1a0>
 80005da:	4608      	mov	r0, r1
 80005dc:	e6fd      	b.n	80003da <__udivmoddi4+0xd2>
 80005de:	443b      	add	r3, r7
 80005e0:	3a02      	subs	r2, #2
 80005e2:	e733      	b.n	800044c <__udivmoddi4+0x144>
 80005e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e8:	443b      	add	r3, r7
 80005ea:	e71c      	b.n	8000426 <__udivmoddi4+0x11e>
 80005ec:	4649      	mov	r1, r9
 80005ee:	e79c      	b.n	800052a <__udivmoddi4+0x222>
 80005f0:	eba1 0109 	sub.w	r1, r1, r9
 80005f4:	46c4      	mov	ip, r8
 80005f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80005fa:	fb09 f804 	mul.w	r8, r9, r4
 80005fe:	e7c4      	b.n	800058a <__udivmoddi4+0x282>

08000600 <__aeabi_idiv0>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000608:	4b49      	ldr	r3, [pc, #292]	@ (8000730 <SystemInit+0x12c>)
 800060a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800060e:	4a48      	ldr	r2, [pc, #288]	@ (8000730 <SystemInit+0x12c>)
 8000610:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000614:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000618:	4b45      	ldr	r3, [pc, #276]	@ (8000730 <SystemInit+0x12c>)
 800061a:	691b      	ldr	r3, [r3, #16]
 800061c:	4a44      	ldr	r2, [pc, #272]	@ (8000730 <SystemInit+0x12c>)
 800061e:	f043 0310 	orr.w	r3, r3, #16
 8000622:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000624:	4b43      	ldr	r3, [pc, #268]	@ (8000734 <SystemInit+0x130>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f003 030f 	and.w	r3, r3, #15
 800062c:	2b06      	cmp	r3, #6
 800062e:	d807      	bhi.n	8000640 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000630:	4b40      	ldr	r3, [pc, #256]	@ (8000734 <SystemInit+0x130>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f023 030f 	bic.w	r3, r3, #15
 8000638:	4a3e      	ldr	r2, [pc, #248]	@ (8000734 <SystemInit+0x130>)
 800063a:	f043 0307 	orr.w	r3, r3, #7
 800063e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000640:	4b3d      	ldr	r3, [pc, #244]	@ (8000738 <SystemInit+0x134>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a3c      	ldr	r2, [pc, #240]	@ (8000738 <SystemInit+0x134>)
 8000646:	f043 0301 	orr.w	r3, r3, #1
 800064a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800064c:	4b3a      	ldr	r3, [pc, #232]	@ (8000738 <SystemInit+0x134>)
 800064e:	2200      	movs	r2, #0
 8000650:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000652:	4b39      	ldr	r3, [pc, #228]	@ (8000738 <SystemInit+0x134>)
 8000654:	681a      	ldr	r2, [r3, #0]
 8000656:	4938      	ldr	r1, [pc, #224]	@ (8000738 <SystemInit+0x134>)
 8000658:	4b38      	ldr	r3, [pc, #224]	@ (800073c <SystemInit+0x138>)
 800065a:	4013      	ands	r3, r2
 800065c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800065e:	4b35      	ldr	r3, [pc, #212]	@ (8000734 <SystemInit+0x130>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	f003 0308 	and.w	r3, r3, #8
 8000666:	2b00      	cmp	r3, #0
 8000668:	d007      	beq.n	800067a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800066a:	4b32      	ldr	r3, [pc, #200]	@ (8000734 <SystemInit+0x130>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	f023 030f 	bic.w	r3, r3, #15
 8000672:	4a30      	ldr	r2, [pc, #192]	@ (8000734 <SystemInit+0x130>)
 8000674:	f043 0307 	orr.w	r3, r3, #7
 8000678:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800067a:	4b2f      	ldr	r3, [pc, #188]	@ (8000738 <SystemInit+0x134>)
 800067c:	2200      	movs	r2, #0
 800067e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000680:	4b2d      	ldr	r3, [pc, #180]	@ (8000738 <SystemInit+0x134>)
 8000682:	2200      	movs	r2, #0
 8000684:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000686:	4b2c      	ldr	r3, [pc, #176]	@ (8000738 <SystemInit+0x134>)
 8000688:	2200      	movs	r2, #0
 800068a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800068c:	4b2a      	ldr	r3, [pc, #168]	@ (8000738 <SystemInit+0x134>)
 800068e:	4a2c      	ldr	r2, [pc, #176]	@ (8000740 <SystemInit+0x13c>)
 8000690:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000692:	4b29      	ldr	r3, [pc, #164]	@ (8000738 <SystemInit+0x134>)
 8000694:	4a2b      	ldr	r2, [pc, #172]	@ (8000744 <SystemInit+0x140>)
 8000696:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000698:	4b27      	ldr	r3, [pc, #156]	@ (8000738 <SystemInit+0x134>)
 800069a:	4a2b      	ldr	r2, [pc, #172]	@ (8000748 <SystemInit+0x144>)
 800069c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800069e:	4b26      	ldr	r3, [pc, #152]	@ (8000738 <SystemInit+0x134>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80006a4:	4b24      	ldr	r3, [pc, #144]	@ (8000738 <SystemInit+0x134>)
 80006a6:	4a28      	ldr	r2, [pc, #160]	@ (8000748 <SystemInit+0x144>)
 80006a8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80006aa:	4b23      	ldr	r3, [pc, #140]	@ (8000738 <SystemInit+0x134>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80006b0:	4b21      	ldr	r3, [pc, #132]	@ (8000738 <SystemInit+0x134>)
 80006b2:	4a25      	ldr	r2, [pc, #148]	@ (8000748 <SystemInit+0x144>)
 80006b4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80006b6:	4b20      	ldr	r3, [pc, #128]	@ (8000738 <SystemInit+0x134>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80006bc:	4b1e      	ldr	r3, [pc, #120]	@ (8000738 <SystemInit+0x134>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a1d      	ldr	r2, [pc, #116]	@ (8000738 <SystemInit+0x134>)
 80006c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80006c6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000738 <SystemInit+0x134>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006ce:	4b1f      	ldr	r3, [pc, #124]	@ (800074c <SystemInit+0x148>)
 80006d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006d2:	4a1e      	ldr	r2, [pc, #120]	@ (800074c <SystemInit+0x148>)
 80006d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006d8:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006da:	4b1d      	ldr	r3, [pc, #116]	@ (8000750 <SystemInit+0x14c>)
 80006dc:	681a      	ldr	r2, [r3, #0]
 80006de:	4b1d      	ldr	r3, [pc, #116]	@ (8000754 <SystemInit+0x150>)
 80006e0:	4013      	ands	r3, r2
 80006e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80006e6:	d202      	bcs.n	80006ee <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000758 <SystemInit+0x154>)
 80006ea:	2201      	movs	r2, #1
 80006ec:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80006ee:	4b12      	ldr	r3, [pc, #72]	@ (8000738 <SystemInit+0x134>)
 80006f0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80006f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d113      	bne.n	8000724 <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80006fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000738 <SystemInit+0x134>)
 80006fe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000702:	4a0d      	ldr	r2, [pc, #52]	@ (8000738 <SystemInit+0x134>)
 8000704:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000708:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800070c:	4b13      	ldr	r3, [pc, #76]	@ (800075c <SystemInit+0x158>)
 800070e:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000712:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000714:	4b08      	ldr	r3, [pc, #32]	@ (8000738 <SystemInit+0x134>)
 8000716:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800071a:	4a07      	ldr	r2, [pc, #28]	@ (8000738 <SystemInit+0x134>)
 800071c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000720:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	e000ed00 	.word	0xe000ed00
 8000734:	52002000 	.word	0x52002000
 8000738:	58024400 	.word	0x58024400
 800073c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000740:	02020200 	.word	0x02020200
 8000744:	01ff0000 	.word	0x01ff0000
 8000748:	01010280 	.word	0x01010280
 800074c:	580000c0 	.word	0x580000c0
 8000750:	5c001000 	.word	0x5c001000
 8000754:	ffff0000 	.word	0xffff0000
 8000758:	51008108 	.word	0x51008108
 800075c:	52004000 	.word	0x52004000

08000760 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8000764:	4b09      	ldr	r3, [pc, #36]	@ (800078c <ExitRun0Mode+0x2c>)
 8000766:	68db      	ldr	r3, [r3, #12]
 8000768:	4a08      	ldr	r2, [pc, #32]	@ (800078c <ExitRun0Mode+0x2c>)
 800076a:	f023 0302 	bic.w	r3, r3, #2
 800076e:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000770:	bf00      	nop
 8000772:	4b06      	ldr	r3, [pc, #24]	@ (800078c <ExitRun0Mode+0x2c>)
 8000774:	685b      	ldr	r3, [r3, #4]
 8000776:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800077a:	2b00      	cmp	r3, #0
 800077c:	d0f9      	beq.n	8000772 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800077e:	bf00      	nop
 8000780:	bf00      	nop
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	58024800 	.word	0x58024800

08000790 <AIC3X_Init>:
 *
 * @param haic3x Pointer to a AIC3X_HandleTypeDef structure that contains
 *  the configuration information for the specified AIC3X
 * @retval Hal Status
 */
HAL_StatusTypeDef AIC3X_Init(AIC3X_HandleTypeDef *haic3x) {
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]

	if (haic3x == NULL) {
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d101      	bne.n	80007a2 <AIC3X_Init+0x12>
		return HAL_ERROR;
 800079e:	2301      	movs	r3, #1
 80007a0:	e006      	b.n	80007b0 <AIC3X_Init+0x20>
	}

	AIC3X_HwReset(haic3x);
 80007a2:	6878      	ldr	r0, [r7, #4]
 80007a4:	f000 f808 	bl	80007b8 <AIC3X_HwReset>
	return AIC3X_SwReset(haic3x);
 80007a8:	6878      	ldr	r0, [r7, #4]
 80007aa:	f000 f829 	bl	8000800 <AIC3X_SwReset>
 80007ae:	4603      	mov	r3, r0
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <AIC3X_HwReset>:
 *
 * @param haic3x Pointer to a AIC3X_HandleTypeDef structure that contains
 *  the configuration information for the specified AIC3X.
 * @retval Hal Status
 */
HAL_StatusTypeDef AIC3X_HwReset(AIC3X_HandleTypeDef *haic3x) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]

	if (haic3x == NULL) {
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d101      	bne.n	80007ca <AIC3X_HwReset+0x12>
		return HAL_ERROR;
 80007c6:	2301      	movs	r3, #1
 80007c8:	e016      	b.n	80007f8 <AIC3X_HwReset+0x40>
	}

	HAL_GPIO_WritePin(haic3x->rst_port, haic3x->rst_pin, GPIO_PIN_RESET);
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	6858      	ldr	r0, [r3, #4]
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	891b      	ldrh	r3, [r3, #8]
 80007d2:	2200      	movs	r2, #0
 80007d4:	4619      	mov	r1, r3
 80007d6:	f005 f855 	bl	8005884 <HAL_GPIO_WritePin>
	HAL_Delay(AIC3X_RESET_TIME_LOW);
 80007da:	20c8      	movs	r0, #200	@ 0xc8
 80007dc:	f002 fb84 	bl	8002ee8 <HAL_Delay>

	HAL_GPIO_WritePin(haic3x->rst_port, haic3x->rst_pin, GPIO_PIN_SET);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	6858      	ldr	r0, [r3, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	891b      	ldrh	r3, [r3, #8]
 80007e8:	2201      	movs	r2, #1
 80007ea:	4619      	mov	r1, r3
 80007ec:	f005 f84a 	bl	8005884 <HAL_GPIO_WritePin>
	HAL_Delay(AIC3X_RESET_TIME_HIGH);
 80007f0:	2000      	movs	r0, #0
 80007f2:	f002 fb79 	bl	8002ee8 <HAL_Delay>
	return HAL_OK;
 80007f6:	2300      	movs	r3, #0
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	3708      	adds	r7, #8
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}

08000800 <AIC3X_SwReset>:
 *
 * @param haic3x Pointer to a AIC3X_HandleTypeDef structure that contains
 *  the configuration information for the specified AIC3X.
 * @return Hal Status
 */
HAL_StatusTypeDef AIC3X_SwReset(AIC3X_HandleTypeDef *haic3x) {
 8000800:	b580      	push	{r7, lr}
 8000802:	b088      	sub	sp, #32
 8000804:	af04      	add	r7, sp, #16
 8000806:	6078      	str	r0, [r7, #4]

	if (haic3x == NULL) {
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d101      	bne.n	8000812 <AIC3X_SwReset+0x12>
		return HAL_ERROR;
 800080e:	2301      	movs	r3, #1
 8000810:	e010      	b.n	8000834 <AIC3X_SwReset+0x34>
	}

	uint8_t writeBuffer = 0x80u;
 8000812:	2380      	movs	r3, #128	@ 0x80
 8000814:	73fb      	strb	r3, [r7, #15]
	return HAL_I2C_Mem_Write(haic3x->hi2c, (uint16_t) AIC3x_ADDRESS << 1,
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	6818      	ldr	r0, [r3, #0]
 800081a:	230a      	movs	r3, #10
 800081c:	9302      	str	r3, [sp, #8]
 800081e:	2301      	movs	r3, #1
 8000820:	9301      	str	r3, [sp, #4]
 8000822:	f107 030f 	add.w	r3, r7, #15
 8000826:	9300      	str	r3, [sp, #0]
 8000828:	2301      	movs	r3, #1
 800082a:	2201      	movs	r2, #1
 800082c:	2130      	movs	r1, #48	@ 0x30
 800082e:	f005 f90d 	bl	8005a4c <HAL_I2C_Mem_Write>
 8000832:	4603      	mov	r3, r0
	AIC3X_RESET, I2C_MEMADD_SIZE_8BIT, &writeBuffer, 1U, 10);
}
 8000834:	4618      	mov	r0, r3
 8000836:	3710      	adds	r7, #16
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}

0800083c <AIC3X_ReadData>:

HAL_StatusTypeDef AIC3X_ReadData(AIC3X_HandleTypeDef *haic3x, uint8_t reg,
		uint8_t *data, uint8_t dataSize) {
 800083c:	b580      	push	{r7, lr}
 800083e:	b088      	sub	sp, #32
 8000840:	af04      	add	r7, sp, #16
 8000842:	60f8      	str	r0, [r7, #12]
 8000844:	607a      	str	r2, [r7, #4]
 8000846:	461a      	mov	r2, r3
 8000848:	460b      	mov	r3, r1
 800084a:	72fb      	strb	r3, [r7, #11]
 800084c:	4613      	mov	r3, r2
 800084e:	72bb      	strb	r3, [r7, #10]
	if (haic3x == NULL) {
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d101      	bne.n	800085a <AIC3X_ReadData+0x1e>
		return HAL_ERROR;
 8000856:	2301      	movs	r3, #1
 8000858:	e014      	b.n	8000884 <AIC3X_ReadData+0x48>
	}

	if (data == NULL) {
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d101      	bne.n	8000864 <AIC3X_ReadData+0x28>
		return HAL_ERROR;
 8000860:	2301      	movs	r3, #1
 8000862:	e00f      	b.n	8000884 <AIC3X_ReadData+0x48>
	}

	return HAL_I2C_Mem_Read(haic3x->hi2c, (uint16_t) AIC3x_ADDRESS << 1, reg,
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	6818      	ldr	r0, [r3, #0]
 8000868:	7afb      	ldrb	r3, [r7, #11]
 800086a:	b29a      	uxth	r2, r3
 800086c:	7abb      	ldrb	r3, [r7, #10]
 800086e:	b29b      	uxth	r3, r3
 8000870:	210a      	movs	r1, #10
 8000872:	9102      	str	r1, [sp, #8]
 8000874:	9301      	str	r3, [sp, #4]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	9300      	str	r3, [sp, #0]
 800087a:	2301      	movs	r3, #1
 800087c:	2130      	movs	r1, #48	@ 0x30
 800087e:	f005 f9f9 	bl	8005c74 <HAL_I2C_Mem_Read>
 8000882:	4603      	mov	r3, r0
	I2C_MEMADD_SIZE_8BIT, data, dataSize, 10);
}
 8000884:	4618      	mov	r0, r3
 8000886:	3710      	adds	r7, #16
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}

0800088c <AIC3X_WriteData>:

HAL_StatusTypeDef AIC3X_WriteData(AIC3X_HandleTypeDef *haic3x, uint8_t reg,
		uint8_t *data, uint8_t dataSize) {
 800088c:	b580      	push	{r7, lr}
 800088e:	b088      	sub	sp, #32
 8000890:	af04      	add	r7, sp, #16
 8000892:	60f8      	str	r0, [r7, #12]
 8000894:	607a      	str	r2, [r7, #4]
 8000896:	461a      	mov	r2, r3
 8000898:	460b      	mov	r3, r1
 800089a:	72fb      	strb	r3, [r7, #11]
 800089c:	4613      	mov	r3, r2
 800089e:	72bb      	strb	r3, [r7, #10]
	if (haic3x == NULL) {
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d101      	bne.n	80008aa <AIC3X_WriteData+0x1e>
		return HAL_ERROR;
 80008a6:	2301      	movs	r3, #1
 80008a8:	e014      	b.n	80008d4 <AIC3X_WriteData+0x48>
	}

	if (data == NULL) {
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d101      	bne.n	80008b4 <AIC3X_WriteData+0x28>
		return HAL_ERROR;
 80008b0:	2301      	movs	r3, #1
 80008b2:	e00f      	b.n	80008d4 <AIC3X_WriteData+0x48>
	}

	return HAL_I2C_Mem_Write(haic3x->hi2c, (uint16_t) AIC3x_ADDRESS << 1, reg,
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	6818      	ldr	r0, [r3, #0]
 80008b8:	7afb      	ldrb	r3, [r7, #11]
 80008ba:	b29a      	uxth	r2, r3
 80008bc:	7abb      	ldrb	r3, [r7, #10]
 80008be:	b29b      	uxth	r3, r3
 80008c0:	210a      	movs	r1, #10
 80008c2:	9102      	str	r1, [sp, #8]
 80008c4:	9301      	str	r3, [sp, #4]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	9300      	str	r3, [sp, #0]
 80008ca:	2301      	movs	r3, #1
 80008cc:	2130      	movs	r1, #48	@ 0x30
 80008ce:	f005 f8bd 	bl	8005a4c <HAL_I2C_Mem_Write>
 80008d2:	4603      	mov	r3, r0
	I2C_MEMADD_SIZE_8BIT, data, dataSize, 10);
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	3710      	adds	r7, #16
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}

080008dc <AIC3X_WriteDataPathControl>:

	return HAL_OK;
}

HAL_StatusTypeDef AIC3X_WriteDataPathControl(AIC3X_HandleTypeDef *haic3x,
		AIC3X_DataPathControl_TypeDef *pDataPathControl) {
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	6039      	str	r1, [r7, #0]
	if (haic3x == NULL) {
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d101      	bne.n	80008f0 <AIC3X_WriteDataPathControl+0x14>
		return HAL_ERROR;
 80008ec:	2301      	movs	r3, #1
 80008ee:	e030      	b.n	8000952 <AIC3X_WriteDataPathControl+0x76>
	}

	if (pDataPathControl == NULL) {
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d101      	bne.n	80008fa <AIC3X_WriteDataPathControl+0x1e>
		return HAL_ERROR;
 80008f6:	2301      	movs	r3, #1
 80008f8:	e02b      	b.n	8000952 <AIC3X_WriteDataPathControl+0x76>
	}

	uint8_t readBuffer;
	uint8_t writeBuffer;

	readBuffer = AIC3X_ReadData(haic3x, AIC3X_CODEC_DATAPATH_REG, &readBuffer,
 80008fa:	f107 020f 	add.w	r2, r7, #15
 80008fe:	2301      	movs	r3, #1
 8000900:	2107      	movs	r1, #7
 8000902:	6878      	ldr	r0, [r7, #4]
 8000904:	f7ff ff9a 	bl	800083c <AIC3X_ReadData>
 8000908:	4603      	mov	r3, r0
 800090a:	73fb      	strb	r3, [r7, #15]
			sizeof(readBuffer));

	writeBuffer = readBuffer
			& (~(AIC3X_DATAPATH_LEFT_MASK | AIC3X_DATAPATH_RIGHT_MASK));
 800090c:	7bfb      	ldrb	r3, [r7, #15]
 800090e:	f023 031e 	bic.w	r3, r3, #30
 8000912:	b2db      	uxtb	r3, r3
	writeBuffer = readBuffer
 8000914:	73bb      	strb	r3, [r7, #14]

	writeBuffer |= (uint8_t) pDataPathControl->LeftDACDataPath << 3;
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	b25b      	sxtb	r3, r3
 800091c:	00db      	lsls	r3, r3, #3
 800091e:	b25a      	sxtb	r2, r3
 8000920:	7bbb      	ldrb	r3, [r7, #14]
 8000922:	b25b      	sxtb	r3, r3
 8000924:	4313      	orrs	r3, r2
 8000926:	b25b      	sxtb	r3, r3
 8000928:	b2db      	uxtb	r3, r3
 800092a:	73bb      	strb	r3, [r7, #14]
	writeBuffer |= (uint8_t) pDataPathControl->RightDACDataPath << 1;
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	785b      	ldrb	r3, [r3, #1]
 8000930:	b25b      	sxtb	r3, r3
 8000932:	005b      	lsls	r3, r3, #1
 8000934:	b25a      	sxtb	r2, r3
 8000936:	7bbb      	ldrb	r3, [r7, #14]
 8000938:	b25b      	sxtb	r3, r3
 800093a:	4313      	orrs	r3, r2
 800093c:	b25b      	sxtb	r3, r3
 800093e:	b2db      	uxtb	r3, r3
 8000940:	73bb      	strb	r3, [r7, #14]

	return AIC3X_WriteData(haic3x, AIC3X_CODEC_DATAPATH_REG, &writeBuffer,
 8000942:	f107 020e 	add.w	r2, r7, #14
 8000946:	2301      	movs	r3, #1
 8000948:	2107      	movs	r1, #7
 800094a:	6878      	ldr	r0, [r7, #4]
 800094c:	f7ff ff9e 	bl	800088c <AIC3X_WriteData>
 8000950:	4603      	mov	r3, r0
			sizeof(writeBuffer));
}
 8000952:	4618      	mov	r0, r3
 8000954:	3710      	adds	r7, #16
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}

0800095a <AIC3X_WriteASDataIntfControl>:
 *
 * @warning The size of the sent data is not calculated with sizeof() but set
 * 	with a constant value of 3u because the registers have a length of 24 bits.
 */
HAL_StatusTypeDef AIC3X_WriteASDataIntfControl(AIC3X_HandleTypeDef *haic3x,
		AIC3X_ASDIntCtrl_TypeDef *pASDIntfCtrl) {
 800095a:	b580      	push	{r7, lr}
 800095c:	b088      	sub	sp, #32
 800095e:	af04      	add	r7, sp, #16
 8000960:	6078      	str	r0, [r7, #4]
 8000962:	6039      	str	r1, [r7, #0]

	if (haic3x == NULL) {
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d101      	bne.n	800096e <AIC3X_WriteASDataIntfControl+0x14>
		return HAL_ERROR;
 800096a:	2301      	movs	r3, #1
 800096c:	e060      	b.n	8000a30 <AIC3X_WriteASDataIntfControl+0xd6>
	}

	if (pASDIntfCtrl == NULL) {
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d101      	bne.n	8000978 <AIC3X_WriteASDataIntfControl+0x1e>
		return HAL_ERROR;
 8000974:	2301      	movs	r3, #1
 8000976:	e05b      	b.n	8000a30 <AIC3X_WriteASDataIntfControl+0xd6>
	}

	uint32_t writeBuffer = 0;
 8000978:	2300      	movs	r3, #0
 800097a:	60fb      	str	r3, [r7, #12]

	/*Set corresponding bits for the values in pASDIntfCtrl */
	writeBuffer |= pASDIntfCtrl->BclkOutput << 24;
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	061a      	lsls	r2, r3, #24
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	4313      	orrs	r3, r2
 8000986:	60fb      	str	r3, [r7, #12]
	writeBuffer |= pASDIntfCtrl->WclkOutput << 23;
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	785b      	ldrb	r3, [r3, #1]
 800098c:	05da      	lsls	r2, r3, #23
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	4313      	orrs	r3, r2
 8000992:	60fb      	str	r3, [r7, #12]
	writeBuffer |= pASDIntfCtrl->DoutTristate << 22;
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	789b      	ldrb	r3, [r3, #2]
 8000998:	059a      	lsls	r2, r3, #22
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	4313      	orrs	r3, r2
 800099e:	60fb      	str	r3, [r7, #12]
	writeBuffer |= pASDIntfCtrl->ClkDriveCtrl << 21;
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	78db      	ldrb	r3, [r3, #3]
 80009a4:	055a      	lsls	r2, r3, #21
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	4313      	orrs	r3, r2
 80009aa:	60fb      	str	r3, [r7, #12]
	writeBuffer |= pASDIntfCtrl->Effect3D << 19;
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	791b      	ldrb	r3, [r3, #4]
 80009b0:	04da      	lsls	r2, r3, #19
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	4313      	orrs	r3, r2
 80009b6:	60fb      	str	r3, [r7, #12]
	writeBuffer |= pASDIntfCtrl->TransferMode << 14;
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	795b      	ldrb	r3, [r3, #5]
 80009bc:	039a      	lsls	r2, r3, #14
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	4313      	orrs	r3, r2
 80009c2:	60fb      	str	r3, [r7, #12]
	writeBuffer |= pASDIntfCtrl->WordLength << 12;
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	799b      	ldrb	r3, [r3, #6]
 80009c8:	031a      	lsls	r2, r3, #12
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	4313      	orrs	r3, r2
 80009ce:	60fb      	str	r3, [r7, #12]
	writeBuffer |= pASDIntfCtrl->Bclk265ClockMode << 11;
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	79db      	ldrb	r3, [r3, #7]
 80009d4:	02da      	lsls	r2, r3, #11
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	4313      	orrs	r3, r2
 80009da:	60fb      	str	r3, [r7, #12]
	writeBuffer |= pASDIntfCtrl->DACResync << 10;
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	7a1b      	ldrb	r3, [r3, #8]
 80009e0:	029a      	lsls	r2, r3, #10
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	4313      	orrs	r3, r2
 80009e6:	60fb      	str	r3, [r7, #12]
	writeBuffer |= pASDIntfCtrl->ADCResync << 9;
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	7a5b      	ldrb	r3, [r3, #9]
 80009ec:	025a      	lsls	r2, r3, #9
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	4313      	orrs	r3, r2
 80009f2:	60fb      	str	r3, [r7, #12]
	writeBuffer |= pASDIntfCtrl->ReSyncMute << 8;
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	7a9b      	ldrb	r3, [r3, #10]
 80009f8:	021a      	lsls	r2, r3, #8
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	4313      	orrs	r3, r2
 80009fe:	60fb      	str	r3, [r7, #12]
	writeBuffer |= pASDIntfCtrl->WordOffset;
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	7adb      	ldrb	r3, [r3, #11]
 8000a04:	461a      	mov	r2, r3
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	60fb      	str	r3, [r7, #12]

	/* Shift the writeBuffer to the left by 8 bits to make place for the bits of the ASD overflow control register*/
	writeBuffer = writeBuffer << 8;
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	021b      	lsls	r3, r3, #8
 8000a10:	60fb      	str	r3, [r7, #12]

	/* Write the ASD interface control register */
	return HAL_I2C_Mem_Write(haic3x->hi2c, (uint16_t) AIC3x_ADDRESS << 1,
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	6818      	ldr	r0, [r3, #0]
 8000a16:	230a      	movs	r3, #10
 8000a18:	9302      	str	r3, [sp, #8]
 8000a1a:	2303      	movs	r3, #3
 8000a1c:	9301      	str	r3, [sp, #4]
 8000a1e:	f107 030c 	add.w	r3, r7, #12
 8000a22:	9300      	str	r3, [sp, #0]
 8000a24:	2301      	movs	r3, #1
 8000a26:	2208      	movs	r2, #8
 8000a28:	2130      	movs	r1, #48	@ 0x30
 8000a2a:	f005 f80f 	bl	8005a4c <HAL_I2C_Mem_Write>
 8000a2e:	4603      	mov	r3, r0
	AIC3X_ASD_INTF_CTRLA, I2C_MEMADD_SIZE_8BIT, (uint8_t*) &writeBuffer, 3u, 10);

}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3710      	adds	r7, #16
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <AIC3X_WritePGAGainControl>:

	return HAL_OK;
}

HAL_StatusTypeDef AIC3X_WritePGAGainControl(AIC3X_HandleTypeDef *haic3x,
		AIC3X_PGAGainControl_TypeDef *pPGAGainControl) {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	6039      	str	r1, [r7, #0]
	if (haic3x == NULL) {
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d101      	bne.n	8000a4c <AIC3X_WritePGAGainControl+0x14>
		return HAL_ERROR;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	e038      	b.n	8000abe <AIC3X_WritePGAGainControl+0x86>
	}

	if (pPGAGainControl == NULL) {
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d101      	bne.n	8000a56 <AIC3X_WritePGAGainControl+0x1e>
		return HAL_ERROR;
 8000a52:	2301      	movs	r3, #1
 8000a54:	e033      	b.n	8000abe <AIC3X_WritePGAGainControl+0x86>
	}

	uint16_t writeBuffer = 0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	81fb      	strh	r3, [r7, #14]

	writeBuffer |= pPGAGainControl->LADCMuted << 15;
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	b21b      	sxth	r3, r3
 8000a60:	03db      	lsls	r3, r3, #15
 8000a62:	b21a      	sxth	r2, r3
 8000a64:	89fb      	ldrh	r3, [r7, #14]
 8000a66:	b21b      	sxth	r3, r3
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	b21b      	sxth	r3, r3
 8000a6c:	b29b      	uxth	r3, r3
 8000a6e:	81fb      	strh	r3, [r7, #14]
	writeBuffer |= (pPGAGainControl->LADCGain & AIC3X_PGA_GAIN_MASK) << 8;
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	785b      	ldrb	r3, [r3, #1]
 8000a74:	021b      	lsls	r3, r3, #8
 8000a76:	b29b      	uxth	r3, r3
 8000a78:	f403 43fe 	and.w	r3, r3, #32512	@ 0x7f00
 8000a7c:	b29a      	uxth	r2, r3
 8000a7e:	89fb      	ldrh	r3, [r7, #14]
 8000a80:	4313      	orrs	r3, r2
 8000a82:	b29b      	uxth	r3, r3
 8000a84:	81fb      	strh	r3, [r7, #14]
	writeBuffer |= pPGAGainControl->RADCMuted << 7;
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	789b      	ldrb	r3, [r3, #2]
 8000a8a:	b21b      	sxth	r3, r3
 8000a8c:	01db      	lsls	r3, r3, #7
 8000a8e:	b21a      	sxth	r2, r3
 8000a90:	89fb      	ldrh	r3, [r7, #14]
 8000a92:	b21b      	sxth	r3, r3
 8000a94:	4313      	orrs	r3, r2
 8000a96:	b21b      	sxth	r3, r3
 8000a98:	b29b      	uxth	r3, r3
 8000a9a:	81fb      	strh	r3, [r7, #14]
	writeBuffer |= pPGAGainControl->RADCGain & AIC3X_PGA_GAIN_MASK;
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	78db      	ldrb	r3, [r3, #3]
 8000aa0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000aa4:	b29a      	uxth	r2, r3
 8000aa6:	89fb      	ldrh	r3, [r7, #14]
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	b29b      	uxth	r3, r3
 8000aac:	81fb      	strh	r3, [r7, #14]

	return AIC3X_WriteData(haic3x, LADC_VOL, (uint8_t*) &writeBuffer,
 8000aae:	f107 020e 	add.w	r2, r7, #14
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	210f      	movs	r1, #15
 8000ab6:	6878      	ldr	r0, [r7, #4]
 8000ab8:	f7ff fee8 	bl	800088c <AIC3X_WriteData>
 8000abc:	4603      	mov	r3, r0
			sizeof(writeBuffer));
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3710      	adds	r7, #16
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <AIC3X_WriteADCMixControl>:

	return HAL_OK;
}

HAL_StatusTypeDef AIC3X_WriteADCMixControl(AIC3X_HandleTypeDef *haic3x,
		AIC3X_ADCMixControl_TypeDef *pADCMixControl) {
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b086      	sub	sp, #24
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
 8000ace:	6039      	str	r1, [r7, #0]
	if (haic3x == NULL) {
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d101      	bne.n	8000ada <AIC3X_WriteADCMixControl+0x14>
		return HAL_ERROR;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	e12f      	b.n	8000d3a <AIC3X_WriteADCMixControl+0x274>
	}

	if (pADCMixControl == NULL) {
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d101      	bne.n	8000ae4 <AIC3X_WriteADCMixControl+0x1e>
		return HAL_ERROR;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	e12a      	b.n	8000d3a <AIC3X_WriteADCMixControl+0x274>
	}

	if ((pADCMixControl->LeftADC_MIC2LGain > 8
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	2b08      	cmp	r3, #8
 8000aea:	d903      	bls.n	8000af4 <AIC3X_WriteADCMixControl+0x2e>
			&& pADCMixControl->LeftADC_MIC2LGain < 15)
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	2b0e      	cmp	r3, #14
 8000af2:	d937      	bls.n	8000b64 <AIC3X_WriteADCMixControl+0x9e>
			|| (pADCMixControl->LeftADC_MIC2RGain > 8
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	785b      	ldrb	r3, [r3, #1]
 8000af8:	2b08      	cmp	r3, #8
 8000afa:	d903      	bls.n	8000b04 <AIC3X_WriteADCMixControl+0x3e>
					&& pADCMixControl->LeftADC_MIC2RGain < 15)
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	785b      	ldrb	r3, [r3, #1]
 8000b00:	2b0e      	cmp	r3, #14
 8000b02:	d92f      	bls.n	8000b64 <AIC3X_WriteADCMixControl+0x9e>
			|| (pADCMixControl->RightADC_MIC2LGain > 8
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	789b      	ldrb	r3, [r3, #2]
 8000b08:	2b08      	cmp	r3, #8
 8000b0a:	d903      	bls.n	8000b14 <AIC3X_WriteADCMixControl+0x4e>
					&& pADCMixControl->RightADC_MIC2LGain < 15)
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	789b      	ldrb	r3, [r3, #2]
 8000b10:	2b0e      	cmp	r3, #14
 8000b12:	d927      	bls.n	8000b64 <AIC3X_WriteADCMixControl+0x9e>
			|| (pADCMixControl->RightADC_MIC2RGain > 8
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	78db      	ldrb	r3, [r3, #3]
 8000b18:	2b08      	cmp	r3, #8
 8000b1a:	d903      	bls.n	8000b24 <AIC3X_WriteADCMixControl+0x5e>
					&& pADCMixControl->RightADC_MIC2RGain < 15)
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	78db      	ldrb	r3, [r3, #3]
 8000b20:	2b0e      	cmp	r3, #14
 8000b22:	d91f      	bls.n	8000b64 <AIC3X_WriteADCMixControl+0x9e>
			|| (pADCMixControl->LeftADC_MIC1LPGain > 8
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	795b      	ldrb	r3, [r3, #5]
 8000b28:	2b08      	cmp	r3, #8
 8000b2a:	d903      	bls.n	8000b34 <AIC3X_WriteADCMixControl+0x6e>
					&& pADCMixControl->LeftADC_MIC1LPGain < 15)
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	795b      	ldrb	r3, [r3, #5]
 8000b30:	2b0e      	cmp	r3, #14
 8000b32:	d917      	bls.n	8000b64 <AIC3X_WriteADCMixControl+0x9e>
			|| (pADCMixControl->LeftADC_MIC1RPGain > 8
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	7a5b      	ldrb	r3, [r3, #9]
 8000b38:	2b08      	cmp	r3, #8
 8000b3a:	d903      	bls.n	8000b44 <AIC3X_WriteADCMixControl+0x7e>
					&& pADCMixControl->LeftADC_MIC1RPGain < 15)
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	7a5b      	ldrb	r3, [r3, #9]
 8000b40:	2b0e      	cmp	r3, #14
 8000b42:	d90f      	bls.n	8000b64 <AIC3X_WriteADCMixControl+0x9e>
			|| (pADCMixControl->RightADC_MIC1LPGain > 8
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	7bdb      	ldrb	r3, [r3, #15]
 8000b48:	2b08      	cmp	r3, #8
 8000b4a:	d903      	bls.n	8000b54 <AIC3X_WriteADCMixControl+0x8e>
					&& pADCMixControl->RightADC_MIC1LPGain < 15)
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	7bdb      	ldrb	r3, [r3, #15]
 8000b50:	2b0e      	cmp	r3, #14
 8000b52:	d907      	bls.n	8000b64 <AIC3X_WriteADCMixControl+0x9e>
			|| (pADCMixControl->RightADC_MIC1RPGain > 8
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	7adb      	ldrb	r3, [r3, #11]
 8000b58:	2b08      	cmp	r3, #8
 8000b5a:	d905      	bls.n	8000b68 <AIC3X_WriteADCMixControl+0xa2>
					&& pADCMixControl->RightADC_MIC1RPGain < 15)) {
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	7adb      	ldrb	r3, [r3, #11]
 8000b60:	2b0e      	cmp	r3, #14
 8000b62:	d801      	bhi.n	8000b68 <AIC3X_WriteADCMixControl+0xa2>
		return HAL_ERROR;
 8000b64:	2301      	movs	r3, #1
 8000b66:	e0e8      	b.n	8000d3a <AIC3X_WriteADCMixControl+0x274>
	}

uint16_t writeBufferMIC2 = 0;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	82bb      	strh	r3, [r7, #20]
uint8_t writeBufferLeftADCMIC1LP = 0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	74fb      	strb	r3, [r7, #19]
uint16_t writeBufferMIC1RP = 0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	823b      	strh	r3, [r7, #16]
uint8_t writeBufferRightADCMIC1LP = 0;
 8000b74:	2300      	movs	r3, #0
 8000b76:	73fb      	strb	r3, [r7, #15]

writeBufferMIC2 |= pADCMixControl->LeftADC_MIC2LGain << 12;
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	b21b      	sxth	r3, r3
 8000b7e:	031b      	lsls	r3, r3, #12
 8000b80:	b21a      	sxth	r2, r3
 8000b82:	8abb      	ldrh	r3, [r7, #20]
 8000b84:	b21b      	sxth	r3, r3
 8000b86:	4313      	orrs	r3, r2
 8000b88:	b21b      	sxth	r3, r3
 8000b8a:	b29b      	uxth	r3, r3
 8000b8c:	82bb      	strh	r3, [r7, #20]
writeBufferMIC2 |= pADCMixControl->LeftADC_MIC2RGain << 8;
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	785b      	ldrb	r3, [r3, #1]
 8000b92:	b21b      	sxth	r3, r3
 8000b94:	021b      	lsls	r3, r3, #8
 8000b96:	b21a      	sxth	r2, r3
 8000b98:	8abb      	ldrh	r3, [r7, #20]
 8000b9a:	b21b      	sxth	r3, r3
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	b21b      	sxth	r3, r3
 8000ba0:	b29b      	uxth	r3, r3
 8000ba2:	82bb      	strh	r3, [r7, #20]
writeBufferMIC2 |= pADCMixControl->RightADC_MIC2LGain << 4;
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	789b      	ldrb	r3, [r3, #2]
 8000ba8:	b21b      	sxth	r3, r3
 8000baa:	011b      	lsls	r3, r3, #4
 8000bac:	b21a      	sxth	r2, r3
 8000bae:	8abb      	ldrh	r3, [r7, #20]
 8000bb0:	b21b      	sxth	r3, r3
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	b21b      	sxth	r3, r3
 8000bb6:	b29b      	uxth	r3, r3
 8000bb8:	82bb      	strh	r3, [r7, #20]
writeBufferMIC2 |= pADCMixControl->RightADC_MIC2RGain;
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	78db      	ldrb	r3, [r3, #3]
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	8abb      	ldrh	r3, [r7, #20]
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	b29b      	uxth	r3, r3
 8000bc6:	82bb      	strh	r3, [r7, #20]

writeBufferLeftADCMIC1LP |= pADCMixControl->LeftADC_MIC1LPDifferential << 7;
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	791b      	ldrb	r3, [r3, #4]
 8000bcc:	b25b      	sxtb	r3, r3
 8000bce:	01db      	lsls	r3, r3, #7
 8000bd0:	b25a      	sxtb	r2, r3
 8000bd2:	7cfb      	ldrb	r3, [r7, #19]
 8000bd4:	b25b      	sxtb	r3, r3
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	b25b      	sxtb	r3, r3
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	74fb      	strb	r3, [r7, #19]
writeBufferLeftADCMIC1LP |= pADCMixControl->LeftADC_MIC1LPGain << 3;
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	795b      	ldrb	r3, [r3, #5]
 8000be2:	b25b      	sxtb	r3, r3
 8000be4:	00db      	lsls	r3, r3, #3
 8000be6:	b25a      	sxtb	r2, r3
 8000be8:	7cfb      	ldrb	r3, [r7, #19]
 8000bea:	b25b      	sxtb	r3, r3
 8000bec:	4313      	orrs	r3, r2
 8000bee:	b25b      	sxtb	r3, r3
 8000bf0:	b2db      	uxtb	r3, r3
 8000bf2:	74fb      	strb	r3, [r7, #19]
writeBufferLeftADCMIC1LP |= pADCMixControl->LeftADC_PowerUp << 2;
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	799b      	ldrb	r3, [r3, #6]
 8000bf8:	b25b      	sxtb	r3, r3
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	b25a      	sxtb	r2, r3
 8000bfe:	7cfb      	ldrb	r3, [r7, #19]
 8000c00:	b25b      	sxtb	r3, r3
 8000c02:	4313      	orrs	r3, r2
 8000c04:	b25b      	sxtb	r3, r3
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	74fb      	strb	r3, [r7, #19]
writeBufferLeftADCMIC1LP |= pADCMixControl->LeftADC_PGASoftStepping & AIC3X_LEFT_ADC_MIC1LP_SOFT_STEPPING_MASK;
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	79db      	ldrb	r3, [r3, #7]
 8000c0e:	f003 0303 	and.w	r3, r3, #3
 8000c12:	b2da      	uxtb	r2, r3
 8000c14:	7cfb      	ldrb	r3, [r7, #19]
 8000c16:	4313      	orrs	r3, r2
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	74fb      	strb	r3, [r7, #19]

writeBufferMIC1RP |= pADCMixControl->LeftADC_MIC1RPDifferential << 15;
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	7a1b      	ldrb	r3, [r3, #8]
 8000c20:	b21b      	sxth	r3, r3
 8000c22:	03db      	lsls	r3, r3, #15
 8000c24:	b21a      	sxth	r2, r3
 8000c26:	8a3b      	ldrh	r3, [r7, #16]
 8000c28:	b21b      	sxth	r3, r3
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	b21b      	sxth	r3, r3
 8000c2e:	b29b      	uxth	r3, r3
 8000c30:	823b      	strh	r3, [r7, #16]
writeBufferMIC1RP |= pADCMixControl->LeftADC_MIC1RPGain << 11;
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	7a5b      	ldrb	r3, [r3, #9]
 8000c36:	b21b      	sxth	r3, r3
 8000c38:	02db      	lsls	r3, r3, #11
 8000c3a:	b21a      	sxth	r2, r3
 8000c3c:	8a3b      	ldrh	r3, [r7, #16]
 8000c3e:	b21b      	sxth	r3, r3
 8000c40:	4313      	orrs	r3, r2
 8000c42:	b21b      	sxth	r3, r3
 8000c44:	b29b      	uxth	r3, r3
 8000c46:	823b      	strh	r3, [r7, #16]
writeBufferMIC1RP |= pADCMixControl->RightADC_MIC1RPDifferential << 7;
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	7a9b      	ldrb	r3, [r3, #10]
 8000c4c:	b21b      	sxth	r3, r3
 8000c4e:	01db      	lsls	r3, r3, #7
 8000c50:	b21a      	sxth	r2, r3
 8000c52:	8a3b      	ldrh	r3, [r7, #16]
 8000c54:	b21b      	sxth	r3, r3
 8000c56:	4313      	orrs	r3, r2
 8000c58:	b21b      	sxth	r3, r3
 8000c5a:	b29b      	uxth	r3, r3
 8000c5c:	823b      	strh	r3, [r7, #16]
writeBufferMIC1RP |= pADCMixControl->RightADC_MIC1RPGain << 3;
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	7adb      	ldrb	r3, [r3, #11]
 8000c62:	b21b      	sxth	r3, r3
 8000c64:	00db      	lsls	r3, r3, #3
 8000c66:	b21a      	sxth	r2, r3
 8000c68:	8a3b      	ldrh	r3, [r7, #16]
 8000c6a:	b21b      	sxth	r3, r3
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	b21b      	sxth	r3, r3
 8000c70:	b29b      	uxth	r3, r3
 8000c72:	823b      	strh	r3, [r7, #16]
writeBufferMIC1RP |= pADCMixControl->RightADC_PowerUp << 2;
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	7b1b      	ldrb	r3, [r3, #12]
 8000c78:	b21b      	sxth	r3, r3
 8000c7a:	009b      	lsls	r3, r3, #2
 8000c7c:	b21a      	sxth	r2, r3
 8000c7e:	8a3b      	ldrh	r3, [r7, #16]
 8000c80:	b21b      	sxth	r3, r3
 8000c82:	4313      	orrs	r3, r2
 8000c84:	b21b      	sxth	r3, r3
 8000c86:	b29b      	uxth	r3, r3
 8000c88:	823b      	strh	r3, [r7, #16]
writeBufferMIC1RP |= pADCMixControl->RightADC_PGASoftStepping & AIC3X_RIGHT_ADC_MIC1RP_SOFT_STEPPING_MASK;
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	7b5b      	ldrb	r3, [r3, #13]
 8000c8e:	f003 0303 	and.w	r3, r3, #3
 8000c92:	b29a      	uxth	r2, r3
 8000c94:	8a3b      	ldrh	r3, [r7, #16]
 8000c96:	4313      	orrs	r3, r2
 8000c98:	b29b      	uxth	r3, r3
 8000c9a:	823b      	strh	r3, [r7, #16]

writeBufferRightADCMIC1LP |= pADCMixControl->RightADC_MIC1LPDifferential
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	7b9b      	ldrb	r3, [r3, #14]
 8000ca0:	b25b      	sxtb	r3, r3
 8000ca2:	01db      	lsls	r3, r3, #7
 8000ca4:	b25a      	sxtb	r2, r3
 8000ca6:	7bfb      	ldrb	r3, [r7, #15]
 8000ca8:	b25b      	sxtb	r3, r3
 8000caa:	4313      	orrs	r3, r2
 8000cac:	b25b      	sxtb	r3, r3
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	73fb      	strb	r3, [r7, #15]
<< 7;
writeBufferRightADCMIC1LP |= pADCMixControl->RightADC_MIC1LPGain << 3;
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	7bdb      	ldrb	r3, [r3, #15]
 8000cb6:	b25b      	sxtb	r3, r3
 8000cb8:	00db      	lsls	r3, r3, #3
 8000cba:	b25a      	sxtb	r2, r3
 8000cbc:	7bfb      	ldrb	r3, [r7, #15]
 8000cbe:	b25b      	sxtb	r3, r3
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	b25b      	sxtb	r3, r3
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	73fb      	strb	r3, [r7, #15]

HAL_StatusTypeDef status;

status = AIC3X_WriteData(haic3x, MIC2LR_LADC_CTRL, (uint8_t*) &writeBufferMIC2,
 8000cc8:	f107 0214 	add.w	r2, r7, #20
 8000ccc:	2302      	movs	r3, #2
 8000cce:	2111      	movs	r1, #17
 8000cd0:	6878      	ldr	r0, [r7, #4]
 8000cd2:	f7ff fddb 	bl	800088c <AIC3X_WriteData>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	75fb      	strb	r3, [r7, #23]
		sizeof(writeBufferMIC2));

if (status != HAL_OK) {
 8000cda:	7dfb      	ldrb	r3, [r7, #23]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <AIC3X_WriteADCMixControl+0x21e>
	return status;
 8000ce0:	7dfb      	ldrb	r3, [r7, #23]
 8000ce2:	e02a      	b.n	8000d3a <AIC3X_WriteADCMixControl+0x274>
}

status = AIC3X_WriteData(haic3x, MIC1L_LADC_CTRL, &writeBufferLeftADCMIC1LP,
 8000ce4:	f107 0213 	add.w	r2, r7, #19
 8000ce8:	2301      	movs	r3, #1
 8000cea:	2113      	movs	r1, #19
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f7ff fdcd 	bl	800088c <AIC3X_WriteData>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	75fb      	strb	r3, [r7, #23]
		sizeof(writeBufferLeftADCMIC1LP));

if (status != HAL_OK) {
 8000cf6:	7dfb      	ldrb	r3, [r7, #23]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <AIC3X_WriteADCMixControl+0x23a>
	return status;
 8000cfc:	7dfb      	ldrb	r3, [r7, #23]
 8000cfe:	e01c      	b.n	8000d3a <AIC3X_WriteADCMixControl+0x274>
}

status = AIC3X_WriteData(haic3x, MIC1R_LADC_CTRL, (uint8_t*) &writeBufferMIC1RP,
 8000d00:	f107 0210 	add.w	r2, r7, #16
 8000d04:	2302      	movs	r3, #2
 8000d06:	2115      	movs	r1, #21
 8000d08:	6878      	ldr	r0, [r7, #4]
 8000d0a:	f7ff fdbf 	bl	800088c <AIC3X_WriteData>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	75fb      	strb	r3, [r7, #23]
		sizeof(writeBufferMIC1RP));

if (status != HAL_OK) {
 8000d12:	7dfb      	ldrb	r3, [r7, #23]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <AIC3X_WriteADCMixControl+0x256>
	return status;
 8000d18:	7dfb      	ldrb	r3, [r7, #23]
 8000d1a:	e00e      	b.n	8000d3a <AIC3X_WriteADCMixControl+0x274>
}

status = AIC3X_WriteData(haic3x, MIC1L_RADC_CTRL, &writeBufferRightADCMIC1LP,
 8000d1c:	f107 020f 	add.w	r2, r7, #15
 8000d20:	2301      	movs	r3, #1
 8000d22:	2118      	movs	r1, #24
 8000d24:	6878      	ldr	r0, [r7, #4]
 8000d26:	f7ff fdb1 	bl	800088c <AIC3X_WriteData>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	75fb      	strb	r3, [r7, #23]
		sizeof(writeBufferRightADCMIC1LP));

if (status != HAL_OK) {
 8000d2e:	7dfb      	ldrb	r3, [r7, #23]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <AIC3X_WriteADCMixControl+0x272>
	return status;
 8000d34:	7dfb      	ldrb	r3, [r7, #23]
 8000d36:	e000      	b.n	8000d3a <AIC3X_WriteADCMixControl+0x274>
}

return HAL_OK;
 8000d38:	2300      	movs	r3, #0
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3718      	adds	r7, #24
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <AIC3X_WriteDACPowerControl>:

return HAL_OK;
}

HAL_StatusTypeDef AIC3X_WriteDACPowerControl(AIC3X_HandleTypeDef *haic3x,
	AIC3X_DACPowerControl_TypeDef *pDACPowerControl) {
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b084      	sub	sp, #16
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	6078      	str	r0, [r7, #4]
 8000d4a:	6039      	str	r1, [r7, #0]
if (haic3x == NULL) {
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d101      	bne.n	8000d56 <AIC3X_WriteDACPowerControl+0x14>
	return HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	e035      	b.n	8000dc2 <AIC3X_WriteDACPowerControl+0x80>
}

if (pDACPowerControl == NULL) {
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d101      	bne.n	8000d60 <AIC3X_WriteDACPowerControl+0x1e>
	return HAL_ERROR;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	e030      	b.n	8000dc2 <AIC3X_WriteDACPowerControl+0x80>
}

uint8_t readBuffer;
HAL_StatusTypeDef status;

status = AIC3X_ReadData(haic3x, DAC_PWR, &readBuffer, sizeof(readBuffer));
 8000d60:	f107 020e 	add.w	r2, r7, #14
 8000d64:	2301      	movs	r3, #1
 8000d66:	2125      	movs	r1, #37	@ 0x25
 8000d68:	6878      	ldr	r0, [r7, #4]
 8000d6a:	f7ff fd67 	bl	800083c <AIC3X_ReadData>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	73fb      	strb	r3, [r7, #15]

if (status != HAL_OK) {
 8000d72:	7bfb      	ldrb	r3, [r7, #15]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <AIC3X_WriteDACPowerControl+0x3a>
	return status;
 8000d78:	7bfb      	ldrb	r3, [r7, #15]
 8000d7a:	e022      	b.n	8000dc2 <AIC3X_WriteDACPowerControl+0x80>
}

uint8_t writeBuffer = readBuffer
		& (~(AIC3X_LEFT_DAC_POWER_MASK | AIC3X_RIGHT_DAC_POWER_MASK));
 8000d7c:	7bbb      	ldrb	r3, [r7, #14]
 8000d7e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000d82:	b2db      	uxtb	r3, r3
uint8_t writeBuffer = readBuffer
 8000d84:	737b      	strb	r3, [r7, #13]

writeBuffer |= pDACPowerControl->LeftDACPoweredUp << 7;
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	b25b      	sxtb	r3, r3
 8000d8c:	01db      	lsls	r3, r3, #7
 8000d8e:	b25a      	sxtb	r2, r3
 8000d90:	7b7b      	ldrb	r3, [r7, #13]
 8000d92:	b25b      	sxtb	r3, r3
 8000d94:	4313      	orrs	r3, r2
 8000d96:	b25b      	sxtb	r3, r3
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	737b      	strb	r3, [r7, #13]
writeBuffer |= pDACPowerControl->RightDACPoweredUp << 6;
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	785b      	ldrb	r3, [r3, #1]
 8000da0:	b25b      	sxtb	r3, r3
 8000da2:	019b      	lsls	r3, r3, #6
 8000da4:	b25a      	sxtb	r2, r3
 8000da6:	7b7b      	ldrb	r3, [r7, #13]
 8000da8:	b25b      	sxtb	r3, r3
 8000daa:	4313      	orrs	r3, r2
 8000dac:	b25b      	sxtb	r3, r3
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	737b      	strb	r3, [r7, #13]

return AIC3X_WriteData(haic3x, DAC_PWR, &writeBuffer, sizeof(writeBuffer));
 8000db2:	f107 020d 	add.w	r2, r7, #13
 8000db6:	2301      	movs	r3, #1
 8000db8:	2125      	movs	r1, #37	@ 0x25
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	f7ff fd66 	bl	800088c <AIC3X_WriteData>
 8000dc0:	4603      	mov	r3, r0
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3710      	adds	r7, #16
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <AIC3X_WriteVolControl>:

return HAL_OK;
}

HAL_StatusTypeDef AIC3X_WriteVolControl(AIC3X_HandleTypeDef *haic3x,
	uint8_t reg, AIC3X_VolControl_TypeDef *pVolControl) {
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b086      	sub	sp, #24
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	60f8      	str	r0, [r7, #12]
 8000dd2:	460b      	mov	r3, r1
 8000dd4:	607a      	str	r2, [r7, #4]
 8000dd6:	72fb      	strb	r3, [r7, #11]
if (haic3x == NULL) {
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d101      	bne.n	8000de2 <AIC3X_WriteVolControl+0x18>
	return HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
 8000de0:	e03e      	b.n	8000e60 <AIC3X_WriteVolControl+0x96>
}

if (pVolControl == NULL) {
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d101      	bne.n	8000dec <AIC3X_WriteVolControl+0x22>
	return HAL_ERROR;
 8000de8:	2301      	movs	r3, #1
 8000dea:	e039      	b.n	8000e60 <AIC3X_WriteVolControl+0x96>
}

if (pVolControl->Volume > 127) {
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	785b      	ldrb	r3, [r3, #1]
 8000df0:	b25b      	sxtb	r3, r3
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	da01      	bge.n	8000dfa <AIC3X_WriteVolControl+0x30>
	return HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
 8000df8:	e032      	b.n	8000e60 <AIC3X_WriteVolControl+0x96>
}

uint8_t writeBuffer = 0;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	75fb      	strb	r3, [r7, #23]
if(reg == LDAC_VOL || reg == RDAC_VOL)
 8000dfe:	7afb      	ldrb	r3, [r7, #11]
 8000e00:	2b2b      	cmp	r3, #43	@ 0x2b
 8000e02:	d002      	beq.n	8000e0a <AIC3X_WriteVolControl+0x40>
 8000e04:	7afb      	ldrb	r3, [r7, #11]
 8000e06:	2b2c      	cmp	r3, #44	@ 0x2c
 8000e08:	d10b      	bne.n	8000e22 <AIC3X_WriteVolControl+0x58>
{
	writeBuffer |= pVolControl->Muted << 7;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	b25b      	sxtb	r3, r3
 8000e10:	01db      	lsls	r3, r3, #7
 8000e12:	b25a      	sxtb	r2, r3
 8000e14:	7dfb      	ldrb	r3, [r7, #23]
 8000e16:	b25b      	sxtb	r3, r3
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	b25b      	sxtb	r3, r3
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	75fb      	strb	r3, [r7, #23]
 8000e20:	e00d      	b.n	8000e3e <AIC3X_WriteVolControl+0x74>
}
else
{
	writeBuffer |= ((!pVolControl->Muted ) << 7) & AIC3X_VOL_MUTED_MASK ;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	f083 0301 	eor.w	r3, r3, #1
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <AIC3X_WriteVolControl+0x6a>
 8000e30:	2280      	movs	r2, #128	@ 0x80
 8000e32:	e000      	b.n	8000e36 <AIC3X_WriteVolControl+0x6c>
 8000e34:	2200      	movs	r2, #0
 8000e36:	7dfb      	ldrb	r3, [r7, #23]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	75fb      	strb	r3, [r7, #23]
}
writeBuffer |= pVolControl->Volume & AIC3X_VOL_MASK;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	785b      	ldrb	r3, [r3, #1]
 8000e42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000e46:	b2da      	uxtb	r2, r3
 8000e48:	7dfb      	ldrb	r3, [r7, #23]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	75fb      	strb	r3, [r7, #23]

return AIC3X_WriteData(haic3x, reg, (uint8_t*) &writeBuffer,
 8000e50:	f107 0217 	add.w	r2, r7, #23
 8000e54:	7af9      	ldrb	r1, [r7, #11]
 8000e56:	2301      	movs	r3, #1
 8000e58:	68f8      	ldr	r0, [r7, #12]
 8000e5a:	f7ff fd17 	bl	800088c <AIC3X_WriteData>
 8000e5e:	4603      	mov	r3, r0
		sizeof(writeBuffer));
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3718      	adds	r7, #24
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <AIC3X_WriteOutputLevelControl>:

return HAL_OK;
}

HAL_StatusTypeDef AIC3X_WriteOutputLevelControl(AIC3X_HandleTypeDef *haic3x,
	uint8_t reg, AIC3X_OutputLevelControl_TypeDef *pOutputLevelControl) {
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	460b      	mov	r3, r1
 8000e72:	607a      	str	r2, [r7, #4]
 8000e74:	72fb      	strb	r3, [r7, #11]
if (haic3x == NULL) {
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d101      	bne.n	8000e80 <AIC3X_WriteOutputLevelControl+0x18>
	return HAL_ERROR;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	e04a      	b.n	8000f16 <AIC3X_WriteOutputLevelControl+0xae>
}

if (pOutputLevelControl == NULL) {
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d101      	bne.n	8000e8a <AIC3X_WriteOutputLevelControl+0x22>
	return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	e045      	b.n	8000f16 <AIC3X_WriteOutputLevelControl+0xae>
}

if(pOutputLevelControl->Level > 9)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	2b09      	cmp	r3, #9
 8000e90:	d901      	bls.n	8000e96 <AIC3X_WriteOutputLevelControl+0x2e>
{
	return HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
 8000e94:	e03f      	b.n	8000f16 <AIC3X_WriteOutputLevelControl+0xae>
}

uint8_t writeBuffer = 0;
 8000e96:	2300      	movs	r3, #0
 8000e98:	75fb      	strb	r3, [r7, #23]

writeBuffer |= pOutputLevelControl->Level << 4;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	b25b      	sxtb	r3, r3
 8000ea0:	011b      	lsls	r3, r3, #4
 8000ea2:	b25a      	sxtb	r2, r3
 8000ea4:	7dfb      	ldrb	r3, [r7, #23]
 8000ea6:	b25b      	sxtb	r3, r3
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	b25b      	sxtb	r3, r3
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	75fb      	strb	r3, [r7, #23]
writeBuffer |= (!pOutputLevelControl->Muted) << 3;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	785b      	ldrb	r3, [r3, #1]
 8000eb4:	f083 0301 	eor.w	r3, r3, #1
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	b25b      	sxtb	r3, r3
 8000ebc:	00db      	lsls	r3, r3, #3
 8000ebe:	b25a      	sxtb	r2, r3
 8000ec0:	7dfb      	ldrb	r3, [r7, #23]
 8000ec2:	b25b      	sxtb	r3, r3
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	b25b      	sxtb	r3, r3
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	75fb      	strb	r3, [r7, #23]
writeBuffer |= pOutputLevelControl->PowerDownDriveControl << 2;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	789b      	ldrb	r3, [r3, #2]
 8000ed0:	b25b      	sxtb	r3, r3
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	b25a      	sxtb	r2, r3
 8000ed6:	7dfb      	ldrb	r3, [r7, #23]
 8000ed8:	b25b      	sxtb	r3, r3
 8000eda:	4313      	orrs	r3, r2
 8000edc:	b25b      	sxtb	r3, r3
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	75fb      	strb	r3, [r7, #23]
writeBuffer |= pOutputLevelControl->VolumeControlStatus << 1;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	78db      	ldrb	r3, [r3, #3]
 8000ee6:	b25b      	sxtb	r3, r3
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	b25a      	sxtb	r2, r3
 8000eec:	7dfb      	ldrb	r3, [r7, #23]
 8000eee:	b25b      	sxtb	r3, r3
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	b25b      	sxtb	r3, r3
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	75fb      	strb	r3, [r7, #23]
writeBuffer |= pOutputLevelControl->PowerControl;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	791b      	ldrb	r3, [r3, #4]
 8000efc:	461a      	mov	r2, r3
 8000efe:	7dfb      	ldrb	r3, [r7, #23]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	75fb      	strb	r3, [r7, #23]

return AIC3X_WriteData(haic3x, reg, (uint8_t*) &writeBuffer,
 8000f06:	f107 0217 	add.w	r2, r7, #23
 8000f0a:	7af9      	ldrb	r1, [r7, #11]
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	68f8      	ldr	r0, [r7, #12]
 8000f10:	f7ff fcbc 	bl	800088c <AIC3X_WriteData>
 8000f14:	4603      	mov	r3, r0
		sizeof(writeBuffer));
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3718      	adds	r7, #24
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
	...

08000f20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b086      	sub	sp, #24
 8000f24:	af02      	add	r7, sp, #8
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/

	timeout = 0xFFFF;
 8000f26:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f2a:	60fb      	str	r3, [r7, #12]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0))
 8000f2c:	bf00      	nop
 8000f2e:	4b9f      	ldr	r3, [pc, #636]	@ (80011ac <main+0x28c>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d004      	beq.n	8000f44 <main+0x24>
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	1e5a      	subs	r2, r3, #1
 8000f3e:	60fa      	str	r2, [r7, #12]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	dcf4      	bgt.n	8000f2e <main+0xe>
		;
	if (timeout < 0) {
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	da01      	bge.n	8000f4e <main+0x2e>
		Error_Handler();
 8000f4a:	f001 fc41 	bl	80027d0 <Error_Handler>
	}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f4e:	f001 ff39 	bl	8002dc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f52:	f000 fb91 	bl	8001678 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000f56:	f000 fc0d 	bl	8001774 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
	 HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8000f5a:	4b94      	ldr	r3, [pc, #592]	@ (80011ac <main+0x28c>)
 8000f5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f60:	4a92      	ldr	r2, [pc, #584]	@ (80011ac <main+0x28c>)
 8000f62:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f6a:	4b90      	ldr	r3, [pc, #576]	@ (80011ac <main+0x28c>)
 8000f6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f74:	607b      	str	r3, [r7, #4]
 8000f76:	687b      	ldr	r3, [r7, #4]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8000f78:	2000      	movs	r0, #0
 8000f7a:	f004 fc9d 	bl	80058b8 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0, 0);
 8000f7e:	2100      	movs	r1, #0
 8000f80:	2000      	movs	r0, #0
 8000f82:	f004 fcb3 	bl	80058ec <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 8000f86:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f8a:	60fb      	str	r3, [r7, #12]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0))
 8000f8c:	bf00      	nop
 8000f8e:	4b87      	ldr	r3, [pc, #540]	@ (80011ac <main+0x28c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d104      	bne.n	8000fa4 <main+0x84>
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	1e5a      	subs	r2, r3, #1
 8000f9e:	60fa      	str	r2, [r7, #12]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	dcf4      	bgt.n	8000f8e <main+0x6e>
		;
	if (timeout < 0) {
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	da01      	bge.n	8000fae <main+0x8e>
		Error_Handler();
 8000faa:	f001 fc11 	bl	80027d0 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_DMA_Init();
 8000fae:	f000 fcfd 	bl	80019ac <MX_DMA_Init>
  MX_GPIO_Init();
 8000fb2:	f001 f839 	bl	8002028 <MX_GPIO_Init>
  MX_MDMA_Init();
 8000fb6:	f000 fd21 	bl	80019fc <MX_MDMA_Init>
  MX_SAI1_Init();
 8000fba:	f000 fc49 	bl	8001850 <MX_SAI1_Init>
  MX_I2C2_Init();
 8000fbe:	f000 fc09 	bl	80017d4 <MX_I2C2_Init>
  MX_USART3_UART_Init();
 8000fc2:	f000 fca7 	bl	8001914 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  arm_status filterStatus;

  filterStatus = arm_fir_init_q15(&firInstanceQ15_ch1_l, NUM_TAPS, firCoeffsQ15, firStateQ15_ch1_l, AUDIO_BUFFER_LENGTH_HALF);
 8000fc6:	2380      	movs	r3, #128	@ 0x80
 8000fc8:	9300      	str	r3, [sp, #0]
 8000fca:	4b79      	ldr	r3, [pc, #484]	@ (80011b0 <main+0x290>)
 8000fcc:	4a79      	ldr	r2, [pc, #484]	@ (80011b4 <main+0x294>)
 8000fce:	2120      	movs	r1, #32
 8000fd0:	4879      	ldr	r0, [pc, #484]	@ (80011b8 <main+0x298>)
 8000fd2:	f00b fecb 	bl	800cd6c <arm_fir_init_q15>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	72fb      	strb	r3, [r7, #11]
  filterStatus = arm_fir_init_q15(&firInstanceQ15_ch1_r, NUM_TAPS, firCoeffsQ15, firStateQ15_ch1_r, AUDIO_BUFFER_LENGTH_HALF);
 8000fda:	2380      	movs	r3, #128	@ 0x80
 8000fdc:	9300      	str	r3, [sp, #0]
 8000fde:	4b77      	ldr	r3, [pc, #476]	@ (80011bc <main+0x29c>)
 8000fe0:	4a74      	ldr	r2, [pc, #464]	@ (80011b4 <main+0x294>)
 8000fe2:	2120      	movs	r1, #32
 8000fe4:	4876      	ldr	r0, [pc, #472]	@ (80011c0 <main+0x2a0>)
 8000fe6:	f00b fec1 	bl	800cd6c <arm_fir_init_q15>
 8000fea:	4603      	mov	r3, r0
 8000fec:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status;
  HAL_StatusTypeDef saiStatus;


	saiStatus = HAL_SAI_Init(&hsai_BlockA1);
 8000fee:	4875      	ldr	r0, [pc, #468]	@ (80011c4 <main+0x2a4>)
 8000ff0:	f009 fdc4 	bl	800ab7c <HAL_SAI_Init>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	72bb      	strb	r3, [r7, #10]
	saiStatus = HAL_SAI_Init(&hsai_BlockB1);
 8000ff8:	4873      	ldr	r0, [pc, #460]	@ (80011c8 <main+0x2a8>)
 8000ffa:	f009 fdbf 	bl	800ab7c <HAL_SAI_Init>
 8000ffe:	4603      	mov	r3, r0
 8001000:	72bb      	strb	r3, [r7, #10]
	__HAL_SAI_ENABLE(&hsai_BlockA1);
 8001002:	4b70      	ldr	r3, [pc, #448]	@ (80011c4 <main+0x2a4>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	4b6e      	ldr	r3, [pc, #440]	@ (80011c4 <main+0x2a4>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001010:	601a      	str	r2, [r3, #0]
	__HAL_SAI_ENABLE(&hsai_BlockB1);
 8001012:	4b6d      	ldr	r3, [pc, #436]	@ (80011c8 <main+0x2a8>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	4b6b      	ldr	r3, [pc, #428]	@ (80011c8 <main+0x2a8>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001020:	601a      	str	r2, [r3, #0]
	SET_BIT(audio_rx_status, AUDIO_STATUS_L_HALF_PENDING);
 8001022:	4b6a      	ldr	r3, [pc, #424]	@ (80011cc <main+0x2ac>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	b2db      	uxtb	r3, r3
 8001028:	f043 0301 	orr.w	r3, r3, #1
 800102c:	b2da      	uxtb	r2, r3
 800102e:	4b67      	ldr	r3, [pc, #412]	@ (80011cc <main+0x2ac>)
 8001030:	701a      	strb	r2, [r3, #0]

	HAL_Delay(1000);
 8001032:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001036:	f001 ff57 	bl	8002ee8 <HAL_Delay>

	status = codecSetup();
 800103a:	f001 facb 	bl	80025d4 <codecSetup>
 800103e:	4603      	mov	r3, r0
 8001040:	727b      	strb	r3, [r7, #9]
	  if(HAL_OK != HAL_SAI_Receive_DMA(&hsai_BlockA1, (uint8_t*)sai_buffer_rx, sizeof(sai_buffer_tx)/AUDIO_SAMPLE_SIZE))
 8001042:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001046:	4962      	ldr	r1, [pc, #392]	@ (80011d0 <main+0x2b0>)
 8001048:	485e      	ldr	r0, [pc, #376]	@ (80011c4 <main+0x2a4>)
 800104a:	f00a f8f7 	bl	800b23c <HAL_SAI_Receive_DMA>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <main+0x138>
	  {
		Error_Handler();
 8001054:	f001 fbbc 	bl	80027d0 <Error_Handler>
	  }
	  if(HAL_OK != HAL_SAI_Transmit_DMA(&hsai_BlockB1, (uint8_t*)sai_buffer_tx, sizeof(sai_buffer_tx)/AUDIO_SAMPLE_SIZE))
 8001058:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800105c:	495d      	ldr	r1, [pc, #372]	@ (80011d4 <main+0x2b4>)
 800105e:	485a      	ldr	r0, [pc, #360]	@ (80011c8 <main+0x2a8>)
 8001060:	f00a f836 	bl	800b0d0 <HAL_SAI_Transmit_DMA>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <main+0x14e>
	  {
		Error_Handler();
 800106a:	f001 fbb1 	bl	80027d0 <Error_Handler>
	  }

  /* USER CODE END 2 */

  /* Initialize User push-button without interrupt mode. */
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 800106e:	2100      	movs	r1, #0
 8001070:	2000      	movs	r0, #0
 8001072:	f001 fe23 	bl	8002cbc <BSP_PB_Init>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001076:	b672      	cpsid	i
}
 8001078:	bf00      	nop

    /* USER CODE BEGIN 3 */

		//Check for completed SAI RX and trigger tranfers from sai to audio buffers
		__disable_irq();
		if (READ_BIT(sai_status,
 800107a:	4b57      	ldr	r3, [pc, #348]	@ (80011d8 <main+0x2b8>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	b2db      	uxtb	r3, r3
 8001080:	f003 0302 	and.w	r3, r3, #2
 8001084:	2b00      	cmp	r3, #0
 8001086:	d03b      	beq.n	8001100 <main+0x1e0>
				SAI_STATUS_RX_HALF_CPLT) && READ_BIT(audio_rx_status, AUDIO_STATUS_L_HALF_PENDING) == false
 8001088:	4b50      	ldr	r3, [pc, #320]	@ (80011cc <main+0x2ac>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	b2db      	uxtb	r3, r3
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	2b00      	cmp	r3, #0
 8001094:	d134      	bne.n	8001100 <main+0x1e0>
				&& READ_BIT(audio_rx_status, AUDIO_STATUS_L_HALF_CPLT) == false)
 8001096:	4b4d      	ldr	r3, [pc, #308]	@ (80011cc <main+0x2ac>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	b2db      	uxtb	r3, r3
 800109c:	f003 0302 	and.w	r3, r3, #2
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d12d      	bne.n	8001100 <main+0x1e0>
  __ASM volatile ("cpsie i" : : : "memory");
 80010a4:	b662      	cpsie	i
}
 80010a6:	bf00      	nop
		{
			//TODO Check if previous TX was completed
			__enable_irq();

			SET_BIT(audio_rx_status, AUDIO_STATUS_L_HALF_PENDING);
 80010a8:	4b48      	ldr	r3, [pc, #288]	@ (80011cc <main+0x2ac>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	f043 0301 	orr.w	r3, r3, #1
 80010b2:	b2da      	uxtb	r2, r3
 80010b4:	4b45      	ldr	r3, [pc, #276]	@ (80011cc <main+0x2ac>)
 80010b6:	701a      	strb	r2, [r3, #0]
			if (startUpRx)
 80010b8:	4b48      	ldr	r3, [pc, #288]	@ (80011dc <main+0x2bc>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d00c      	beq.n	80010dc <main+0x1bc>
			{
				startUpRx = false;
 80010c2:	4b46      	ldr	r3, [pc, #280]	@ (80011dc <main+0x2bc>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	701a      	strb	r2, [r3, #0]
				HAL_MDMA_Start_IT(&hmdma_mdma_channel0_sw_0,
 80010c8:	4941      	ldr	r1, [pc, #260]	@ (80011d0 <main+0x2b0>)
 80010ca:	4a45      	ldr	r2, [pc, #276]	@ (80011e0 <main+0x2c0>)
 80010cc:	2301      	movs	r3, #1
 80010ce:	9300      	str	r3, [sp, #0]
 80010d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010d4:	4843      	ldr	r0, [pc, #268]	@ (80011e4 <main+0x2c4>)
 80010d6:	f005 fcca 	bl	8006a6e <HAL_MDMA_Start_IT>
			if (startUpRx)
 80010da:	e0ab      	b.n	8001234 <main+0x314>
						(uint32_t) audio_buffer_rx_ch1_l, AUDIO_BUFFER_SIZE_HALF,
						1);
			}
			else
			{
				if (READ_BIT(audio_tx_status, AUDIO_STATUS_L_CPLT) == false
 80010dc:	4b42      	ldr	r3, [pc, #264]	@ (80011e8 <main+0x2c8>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	f003 0320 	and.w	r3, r3, #32
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d106      	bne.n	80010f8 <main+0x1d8>
						&& READ_BIT(audio_tx_status, AUDIO_STATUS_R_CPLT)
								== false)
 80010ea:	4b3f      	ldr	r3, [pc, #252]	@ (80011e8 <main+0x2c8>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	b25b      	sxtb	r3, r3
						&& READ_BIT(audio_tx_status, AUDIO_STATUS_R_CPLT)
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	db00      	blt.n	80010f8 <main+0x1d8>
				{
					__BKPT();
 80010f6:	be00      	bkpt	0x0000
				}
				HAL_MDMA_GenerateSWRequest(&hmdma_mdma_channel0_sw_0);
 80010f8:	483a      	ldr	r0, [pc, #232]	@ (80011e4 <main+0x2c4>)
 80010fa:	f005 fd39 	bl	8006b70 <HAL_MDMA_GenerateSWRequest>
			if (startUpRx)
 80010fe:	e099      	b.n	8001234 <main+0x314>

			}

		}
		else if (READ_BIT(audio_rx_status,
 8001100:	4b32      	ldr	r3, [pc, #200]	@ (80011cc <main+0x2ac>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	b2db      	uxtb	r3, r3
 8001106:	f003 0302 	and.w	r3, r3, #2
 800110a:	2b00      	cmp	r3, #0
 800110c:	d01b      	beq.n	8001146 <main+0x226>
				AUDIO_STATUS_L_HALF_CPLT) && READ_BIT(audio_rx_status, AUDIO_STATUS_R_HALF_PENDING) == false
 800110e:	4b2f      	ldr	r3, [pc, #188]	@ (80011cc <main+0x2ac>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	b2db      	uxtb	r3, r3
 8001114:	f003 0304 	and.w	r3, r3, #4
 8001118:	2b00      	cmp	r3, #0
 800111a:	d114      	bne.n	8001146 <main+0x226>
				&& READ_BIT(audio_rx_status, AUDIO_STATUS_R_HALF_CPLT) == false)
 800111c:	4b2b      	ldr	r3, [pc, #172]	@ (80011cc <main+0x2ac>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	b2db      	uxtb	r3, r3
 8001122:	f003 0308 	and.w	r3, r3, #8
 8001126:	2b00      	cmp	r3, #0
 8001128:	d10d      	bne.n	8001146 <main+0x226>
  __ASM volatile ("cpsie i" : : : "memory");
 800112a:	b662      	cpsie	i
}
 800112c:	bf00      	nop
		{
			__enable_irq();

			SET_BIT(audio_rx_status, AUDIO_STATUS_R_HALF_PENDING);
 800112e:	4b27      	ldr	r3, [pc, #156]	@ (80011cc <main+0x2ac>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	b2db      	uxtb	r3, r3
 8001134:	f043 0304 	orr.w	r3, r3, #4
 8001138:	b2da      	uxtb	r2, r3
 800113a:	4b24      	ldr	r3, [pc, #144]	@ (80011cc <main+0x2ac>)
 800113c:	701a      	strb	r2, [r3, #0]

			HAL_MDMA_GenerateSWRequest(&hmdma_mdma_channel0_sw_0);
 800113e:	4829      	ldr	r0, [pc, #164]	@ (80011e4 <main+0x2c4>)
 8001140:	f005 fd16 	bl	8006b70 <HAL_MDMA_GenerateSWRequest>
 8001144:	e076      	b.n	8001234 <main+0x314>
		}
		else if (READ_BIT(sai_status,
 8001146:	4b24      	ldr	r3, [pc, #144]	@ (80011d8 <main+0x2b8>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	b2db      	uxtb	r3, r3
 800114c:	f003 0308 	and.w	r3, r3, #8
 8001150:	2b00      	cmp	r3, #0
 8001152:	d04b      	beq.n	80011ec <main+0x2cc>
				SAI_STATUS_RX_FULL_CPLT) && READ_BIT(audio_rx_status, AUDIO_STATUS_L_PENDING) == false
 8001154:	4b1d      	ldr	r3, [pc, #116]	@ (80011cc <main+0x2ac>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	b2db      	uxtb	r3, r3
 800115a:	f003 0310 	and.w	r3, r3, #16
 800115e:	2b00      	cmp	r3, #0
 8001160:	d144      	bne.n	80011ec <main+0x2cc>
				&& READ_BIT(audio_rx_status, AUDIO_STATUS_L_CPLT) == false)
 8001162:	4b1a      	ldr	r3, [pc, #104]	@ (80011cc <main+0x2ac>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	b2db      	uxtb	r3, r3
 8001168:	f003 0320 	and.w	r3, r3, #32
 800116c:	2b00      	cmp	r3, #0
 800116e:	d13d      	bne.n	80011ec <main+0x2cc>
  __ASM volatile ("cpsie i" : : : "memory");
 8001170:	b662      	cpsie	i
}
 8001172:	bf00      	nop
		{
			//TODO Check if previous TX was completed
			__enable_irq();

			if (READ_BIT(audio_tx_status, AUDIO_STATUS_L_HALF_CPLT) == false
 8001174:	4b1c      	ldr	r3, [pc, #112]	@ (80011e8 <main+0x2c8>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	b2db      	uxtb	r3, r3
 800117a:	f003 0302 	and.w	r3, r3, #2
 800117e:	2b00      	cmp	r3, #0
 8001180:	d107      	bne.n	8001192 <main+0x272>
					&& READ_BIT(audio_tx_status, AUDIO_STATUS_R_HALF_CPLT)
 8001182:	4b19      	ldr	r3, [pc, #100]	@ (80011e8 <main+0x2c8>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	b2db      	uxtb	r3, r3
 8001188:	f003 0308 	and.w	r3, r3, #8
 800118c:	2b00      	cmp	r3, #0
 800118e:	d100      	bne.n	8001192 <main+0x272>
							== false)
			{
				__BKPT();
 8001190:	be00      	bkpt	0x0000
			}
			SET_BIT(audio_rx_status, AUDIO_STATUS_L_PENDING);
 8001192:	4b0e      	ldr	r3, [pc, #56]	@ (80011cc <main+0x2ac>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	b2db      	uxtb	r3, r3
 8001198:	f043 0310 	orr.w	r3, r3, #16
 800119c:	b2da      	uxtb	r2, r3
 800119e:	4b0b      	ldr	r3, [pc, #44]	@ (80011cc <main+0x2ac>)
 80011a0:	701a      	strb	r2, [r3, #0]

			HAL_MDMA_GenerateSWRequest(&hmdma_mdma_channel0_sw_0);
 80011a2:	4810      	ldr	r0, [pc, #64]	@ (80011e4 <main+0x2c4>)
 80011a4:	f005 fce4 	bl	8006b70 <HAL_MDMA_GenerateSWRequest>
 80011a8:	e044      	b.n	8001234 <main+0x314>
 80011aa:	bf00      	nop
 80011ac:	58024400 	.word	0x58024400
 80011b0:	24000d88 	.word	0x24000d88
 80011b4:	0800ce2c 	.word	0x0800ce2c
 80011b8:	24001008 	.word	0x24001008
 80011bc:	24000ec8 	.word	0x24000ec8
 80011c0:	24001014 	.word	0x24001014
 80011c4:	24000090 	.word	0x24000090
 80011c8:	24000128 	.word	0x24000128
 80011cc:	24000d80 	.word	0x24000d80
 80011d0:	24000580 	.word	0x24000580
 80011d4:	24000980 	.word	0x24000980
 80011d8:	24000d83 	.word	0x24000d83
 80011dc:	24000008 	.word	0x24000008
 80011e0:	20000000 	.word	0x20000000
 80011e4:	24000344 	.word	0x24000344
 80011e8:	24000d82 	.word	0x24000d82
		}
		else if (READ_BIT(audio_rx_status,
 80011ec:	4b9e      	ldr	r3, [pc, #632]	@ (8001468 <main+0x548>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	f003 0320 	and.w	r3, r3, #32
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d01a      	beq.n	8001230 <main+0x310>
				AUDIO_STATUS_L_CPLT) && READ_BIT(audio_rx_status, AUDIO_STATUS_R_PENDING) == false
 80011fa:	4b9b      	ldr	r3, [pc, #620]	@ (8001468 <main+0x548>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001204:	2b00      	cmp	r3, #0
 8001206:	d113      	bne.n	8001230 <main+0x310>
				&& READ_BIT(audio_rx_status, AUDIO_STATUS_R_CPLT) == false)
 8001208:	4b97      	ldr	r3, [pc, #604]	@ (8001468 <main+0x548>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	b2db      	uxtb	r3, r3
 800120e:	b25b      	sxtb	r3, r3
 8001210:	2b00      	cmp	r3, #0
 8001212:	db0d      	blt.n	8001230 <main+0x310>
  __ASM volatile ("cpsie i" : : : "memory");
 8001214:	b662      	cpsie	i
}
 8001216:	bf00      	nop
		{
			__enable_irq();

			SET_BIT(audio_rx_status, AUDIO_STATUS_R_PENDING);
 8001218:	4b93      	ldr	r3, [pc, #588]	@ (8001468 <main+0x548>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	b2db      	uxtb	r3, r3
 800121e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001222:	b2da      	uxtb	r2, r3
 8001224:	4b90      	ldr	r3, [pc, #576]	@ (8001468 <main+0x548>)
 8001226:	701a      	strb	r2, [r3, #0]

			HAL_MDMA_GenerateSWRequest(&hmdma_mdma_channel0_sw_0);
 8001228:	4890      	ldr	r0, [pc, #576]	@ (800146c <main+0x54c>)
 800122a:	f005 fca1 	bl	8006b70 <HAL_MDMA_GenerateSWRequest>
 800122e:	e001      	b.n	8001234 <main+0x314>
  __ASM volatile ("cpsie i" : : : "memory");
 8001230:	b662      	cpsie	i
}
 8001232:	bf00      	nop
  __ASM volatile ("cpsid i" : : : "memory");
 8001234:	b672      	cpsid	i
}
 8001236:	bf00      	nop
		}

		//Check for completed audio rx transfers and run dsp

		__disable_irq();
		if (READ_BIT(audio_rx_status,
 8001238:	4b8b      	ldr	r3, [pc, #556]	@ (8001468 <main+0x548>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	b2db      	uxtb	r3, r3
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	2b00      	cmp	r3, #0
 8001244:	d020      	beq.n	8001288 <main+0x368>
				AUDIO_STATUS_L_HALF_CPLT) && READ_BIT(audio_dsp_status, AUDIO_STATUS_L_HALF_PENDING) == false
 8001246:	4b8a      	ldr	r3, [pc, #552]	@ (8001470 <main+0x550>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	b2db      	uxtb	r3, r3
 800124c:	f003 0301 	and.w	r3, r3, #1
 8001250:	2b00      	cmp	r3, #0
 8001252:	d119      	bne.n	8001288 <main+0x368>
				&& READ_BIT(audio_dsp_status, AUDIO_STATUS_L_HALF_CPLT) == false)
 8001254:	4b86      	ldr	r3, [pc, #536]	@ (8001470 <main+0x550>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	b2db      	uxtb	r3, r3
 800125a:	f003 0302 	and.w	r3, r3, #2
 800125e:	2b00      	cmp	r3, #0
 8001260:	d112      	bne.n	8001288 <main+0x368>
  __ASM volatile ("cpsie i" : : : "memory");
 8001262:	b662      	cpsie	i
}
 8001264:	bf00      	nop
		{
			__enable_irq();
			SET_BIT(audio_dsp_status, AUDIO_STATUS_L_HALF_PENDING);
 8001266:	4b82      	ldr	r3, [pc, #520]	@ (8001470 <main+0x550>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	b2db      	uxtb	r3, r3
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	b2da      	uxtb	r2, r3
 8001272:	4b7f      	ldr	r3, [pc, #508]	@ (8001470 <main+0x550>)
 8001274:	701a      	strb	r2, [r3, #0]
			CLEAR_BIT(audio_dsp_status, AUDIO_STATUS_L_HALF_CPLT);
 8001276:	4b7e      	ldr	r3, [pc, #504]	@ (8001470 <main+0x550>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	b2db      	uxtb	r3, r3
 800127c:	f023 0302 	bic.w	r3, r3, #2
 8001280:	b2da      	uxtb	r2, r3
 8001282:	4b7b      	ldr	r3, [pc, #492]	@ (8001470 <main+0x550>)
 8001284:	701a      	strb	r2, [r3, #0]
 8001286:	e077      	b.n	8001378 <main+0x458>
//					(void*) audio_buffer_rx_ch1_l, AUDIO_BUFFER_LENGTH_HALF * AUDIO_SAMPLE_SIZE);

			//CLEAR_BIT(audio_dsp_status, AUDIO_STATUS_L_HALF_PENDING);
			//SET_BIT(audio_dsp_status, AUDIO_STATUS_L_HALF_CPLT);
		}
		else if (READ_BIT(audio_rx_status,
 8001288:	4b77      	ldr	r3, [pc, #476]	@ (8001468 <main+0x548>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	b2db      	uxtb	r3, r3
 800128e:	f003 0308 	and.w	r3, r3, #8
 8001292:	2b00      	cmp	r3, #0
 8001294:	d020      	beq.n	80012d8 <main+0x3b8>
				AUDIO_STATUS_R_HALF_CPLT) && READ_BIT(audio_dsp_status, AUDIO_STATUS_R_HALF_PENDING) == false
 8001296:	4b76      	ldr	r3, [pc, #472]	@ (8001470 <main+0x550>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	b2db      	uxtb	r3, r3
 800129c:	f003 0304 	and.w	r3, r3, #4
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d119      	bne.n	80012d8 <main+0x3b8>
				&& READ_BIT(audio_dsp_status, AUDIO_STATUS_R_HALF_CPLT) == false)
 80012a4:	4b72      	ldr	r3, [pc, #456]	@ (8001470 <main+0x550>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	f003 0308 	and.w	r3, r3, #8
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d112      	bne.n	80012d8 <main+0x3b8>
  __ASM volatile ("cpsie i" : : : "memory");
 80012b2:	b662      	cpsie	i
}
 80012b4:	bf00      	nop
		{
			__enable_irq();

			SET_BIT(audio_dsp_status, AUDIO_STATUS_R_HALF_PENDING);
 80012b6:	4b6e      	ldr	r3, [pc, #440]	@ (8001470 <main+0x550>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	f043 0304 	orr.w	r3, r3, #4
 80012c0:	b2da      	uxtb	r2, r3
 80012c2:	4b6b      	ldr	r3, [pc, #428]	@ (8001470 <main+0x550>)
 80012c4:	701a      	strb	r2, [r3, #0]
			CLEAR_BIT(audio_dsp_status, AUDIO_STATUS_R_HALF_CPLT);
 80012c6:	4b6a      	ldr	r3, [pc, #424]	@ (8001470 <main+0x550>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	f023 0308 	bic.w	r3, r3, #8
 80012d0:	b2da      	uxtb	r2, r3
 80012d2:	4b67      	ldr	r3, [pc, #412]	@ (8001470 <main+0x550>)
 80012d4:	701a      	strb	r2, [r3, #0]
 80012d6:	e04f      	b.n	8001378 <main+0x458>
//			memcpy((void*) audio_buffer_tx_ch1_r,
//					(void*) audio_buffer_rx_ch1_r, AUDIO_BUFFER_LENGTH_HALF * AUDIO_SAMPLE_SIZE);


		}
		else if (READ_BIT(audio_rx_status,
 80012d8:	4b63      	ldr	r3, [pc, #396]	@ (8001468 <main+0x548>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	f003 0320 	and.w	r3, r3, #32
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d020      	beq.n	8001328 <main+0x408>
				AUDIO_STATUS_L_CPLT) && READ_BIT(audio_dsp_status, AUDIO_STATUS_L_PENDING) == false
 80012e6:	4b62      	ldr	r3, [pc, #392]	@ (8001470 <main+0x550>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	f003 0310 	and.w	r3, r3, #16
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d119      	bne.n	8001328 <main+0x408>
				&& READ_BIT(audio_dsp_status, AUDIO_STATUS_L_CPLT) == false)
 80012f4:	4b5e      	ldr	r3, [pc, #376]	@ (8001470 <main+0x550>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	f003 0320 	and.w	r3, r3, #32
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d112      	bne.n	8001328 <main+0x408>
  __ASM volatile ("cpsie i" : : : "memory");
 8001302:	b662      	cpsie	i
}
 8001304:	bf00      	nop
		{
			__enable_irq();

			SET_BIT(audio_dsp_status, AUDIO_STATUS_L_PENDING);
 8001306:	4b5a      	ldr	r3, [pc, #360]	@ (8001470 <main+0x550>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	b2db      	uxtb	r3, r3
 800130c:	f043 0310 	orr.w	r3, r3, #16
 8001310:	b2da      	uxtb	r2, r3
 8001312:	4b57      	ldr	r3, [pc, #348]	@ (8001470 <main+0x550>)
 8001314:	701a      	strb	r2, [r3, #0]
			CLEAR_BIT(audio_dsp_status, AUDIO_STATUS_L_CPLT);
 8001316:	4b56      	ldr	r3, [pc, #344]	@ (8001470 <main+0x550>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	b2db      	uxtb	r3, r3
 800131c:	f023 0320 	bic.w	r3, r3, #32
 8001320:	b2da      	uxtb	r2, r3
 8001322:	4b53      	ldr	r3, [pc, #332]	@ (8001470 <main+0x550>)
 8001324:	701a      	strb	r2, [r3, #0]
 8001326:	e027      	b.n	8001378 <main+0x458>
//					(void*) &audio_buffer_rx_ch1_l[AUDIO_BUFFER_LENGTH_HALF], AUDIO_BUFFER_LENGTH_HALF * AUDIO_SAMPLE_SIZE);

			//CLEAR_BIT(audio_dsp_status, AUDIO_STATUS_L_PENDING);
			//SET_BIT(audio_dsp_status, AUDIO_STATUS_L_CPLT);
		}
		else if (READ_BIT(audio_rx_status,
 8001328:	4b4f      	ldr	r3, [pc, #316]	@ (8001468 <main+0x548>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	b2db      	uxtb	r3, r3
 800132e:	b25b      	sxtb	r3, r3
 8001330:	2b00      	cmp	r3, #0
 8001332:	da1f      	bge.n	8001374 <main+0x454>
				AUDIO_STATUS_R_CPLT) && READ_BIT(audio_dsp_status, AUDIO_STATUS_R_PENDING) == false
 8001334:	4b4e      	ldr	r3, [pc, #312]	@ (8001470 <main+0x550>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	b2db      	uxtb	r3, r3
 800133a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800133e:	2b00      	cmp	r3, #0
 8001340:	d118      	bne.n	8001374 <main+0x454>
				&& READ_BIT(audio_dsp_status, AUDIO_STATUS_R_CPLT) == false)
 8001342:	4b4b      	ldr	r3, [pc, #300]	@ (8001470 <main+0x550>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	b2db      	uxtb	r3, r3
 8001348:	b25b      	sxtb	r3, r3
 800134a:	2b00      	cmp	r3, #0
 800134c:	db12      	blt.n	8001374 <main+0x454>
  __ASM volatile ("cpsie i" : : : "memory");
 800134e:	b662      	cpsie	i
}
 8001350:	bf00      	nop
		{
			__enable_irq();

			SET_BIT(audio_dsp_status, AUDIO_STATUS_R_PENDING);
 8001352:	4b47      	ldr	r3, [pc, #284]	@ (8001470 <main+0x550>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	b2db      	uxtb	r3, r3
 8001358:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800135c:	b2da      	uxtb	r2, r3
 800135e:	4b44      	ldr	r3, [pc, #272]	@ (8001470 <main+0x550>)
 8001360:	701a      	strb	r2, [r3, #0]
			CLEAR_BIT(audio_dsp_status, AUDIO_STATUS_R_CPLT);
 8001362:	4b43      	ldr	r3, [pc, #268]	@ (8001470 <main+0x550>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	b2db      	uxtb	r3, r3
 8001368:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800136c:	b2da      	uxtb	r2, r3
 800136e:	4b40      	ldr	r3, [pc, #256]	@ (8001470 <main+0x550>)
 8001370:	701a      	strb	r2, [r3, #0]
 8001372:	e001      	b.n	8001378 <main+0x458>
  __ASM volatile ("cpsie i" : : : "memory");
 8001374:	b662      	cpsie	i
}
 8001376:	bf00      	nop
  __ASM volatile ("cpsid i" : : : "memory");
 8001378:	b672      	cpsid	i
}
 800137a:	bf00      	nop



		//check for completed dsp and trigger tranfers from audio to sai buffer
		__disable_irq();
		if (READ_BIT(audio_dsp_status,
 800137c:	4b3c      	ldr	r3, [pc, #240]	@ (8001470 <main+0x550>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	b2db      	uxtb	r3, r3
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	2b00      	cmp	r3, #0
 8001388:	d03c      	beq.n	8001404 <main+0x4e4>
				AUDIO_STATUS_L_HALF_CPLT) && READ_BIT(audio_rx_status, AUDIO_STATUS_R_HALF_CPLT)
 800138a:	4b37      	ldr	r3, [pc, #220]	@ (8001468 <main+0x548>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	b2db      	uxtb	r3, r3
 8001390:	f003 0308 	and.w	r3, r3, #8
 8001394:	2b00      	cmp	r3, #0
 8001396:	d035      	beq.n	8001404 <main+0x4e4>
				&& READ_BIT(audio_tx_status, AUDIO_STATUS_L_HALF_PENDING) == false
 8001398:	4b36      	ldr	r3, [pc, #216]	@ (8001474 <main+0x554>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	b2db      	uxtb	r3, r3
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d12e      	bne.n	8001404 <main+0x4e4>
				&& READ_BIT(audio_tx_status, AUDIO_STATUS_L_HALF_CPLT) == false)
 80013a6:	4b33      	ldr	r3, [pc, #204]	@ (8001474 <main+0x554>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	f003 0302 	and.w	r3, r3, #2
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d127      	bne.n	8001404 <main+0x4e4>
  __ASM volatile ("cpsie i" : : : "memory");
 80013b4:	b662      	cpsie	i
}
 80013b6:	bf00      	nop
		{
			__enable_irq();

			SET_BIT(audio_tx_status, AUDIO_STATUS_L_HALF_PENDING);
 80013b8:	4b2e      	ldr	r3, [pc, #184]	@ (8001474 <main+0x554>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	f043 0301 	orr.w	r3, r3, #1
 80013c2:	b2da      	uxtb	r2, r3
 80013c4:	4b2b      	ldr	r3, [pc, #172]	@ (8001474 <main+0x554>)
 80013c6:	701a      	strb	r2, [r3, #0]
			CLEAR_BIT(audio_tx_status, AUDIO_STATUS_L_HALF_CPLT);
 80013c8:	4b2a      	ldr	r3, [pc, #168]	@ (8001474 <main+0x554>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	f023 0302 	bic.w	r3, r3, #2
 80013d2:	b2da      	uxtb	r2, r3
 80013d4:	4b27      	ldr	r3, [pc, #156]	@ (8001474 <main+0x554>)
 80013d6:	701a      	strb	r2, [r3, #0]
			if (startUpTx)
 80013d8:	4b27      	ldr	r3, [pc, #156]	@ (8001478 <main+0x558>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d00c      	beq.n	80013fc <main+0x4dc>
			{
				startUpTx = false;
 80013e2:	4b25      	ldr	r3, [pc, #148]	@ (8001478 <main+0x558>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	701a      	strb	r2, [r3, #0]
				HAL_MDMA_Start_IT(&hmdma_mdma_channel2_sw_0,
 80013e8:	4924      	ldr	r1, [pc, #144]	@ (800147c <main+0x55c>)
 80013ea:	4a25      	ldr	r2, [pc, #148]	@ (8001480 <main+0x560>)
 80013ec:	2301      	movs	r3, #1
 80013ee:	9300      	str	r3, [sp, #0]
 80013f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013f4:	4823      	ldr	r0, [pc, #140]	@ (8001484 <main+0x564>)
 80013f6:	f005 fb3a 	bl	8006a6e <HAL_MDMA_Start_IT>
			if (startUpTx)
 80013fa:	e0a8      	b.n	800154e <main+0x62e>
						(uint32_t) audio_buffer_tx_ch1_l,
						(uint32_t) sai_buffer_tx, AUDIO_BUFFER_SIZE_HALF,
						1);
			}
			else{
				HAL_MDMA_GenerateSWRequest(&hmdma_mdma_channel2_sw_0);
 80013fc:	4821      	ldr	r0, [pc, #132]	@ (8001484 <main+0x564>)
 80013fe:	f005 fbb7 	bl	8006b70 <HAL_MDMA_GenerateSWRequest>
			if (startUpTx)
 8001402:	e0a4      	b.n	800154e <main+0x62e>
			}
		}
		else if (READ_BIT(audio_dsp_status, AUDIO_STATUS_R_HALF_CPLT) &&
 8001404:	4b1a      	ldr	r3, [pc, #104]	@ (8001470 <main+0x550>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	b2db      	uxtb	r3, r3
 800140a:	f003 0308 	and.w	r3, r3, #8
 800140e:	2b00      	cmp	r3, #0
 8001410:	d03a      	beq.n	8001488 <main+0x568>
		READ_BIT(audio_tx_status, AUDIO_STATUS_L_HALF_CPLT)
 8001412:	4b18      	ldr	r3, [pc, #96]	@ (8001474 <main+0x554>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	b2db      	uxtb	r3, r3
 8001418:	f003 0302 	and.w	r3, r3, #2
		else if (READ_BIT(audio_dsp_status, AUDIO_STATUS_R_HALF_CPLT) &&
 800141c:	2b00      	cmp	r3, #0
 800141e:	d033      	beq.n	8001488 <main+0x568>
		&& READ_BIT(audio_tx_status, AUDIO_STATUS_R_HALF_PENDING) == false
 8001420:	4b14      	ldr	r3, [pc, #80]	@ (8001474 <main+0x554>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	b2db      	uxtb	r3, r3
 8001426:	f003 0304 	and.w	r3, r3, #4
 800142a:	2b00      	cmp	r3, #0
 800142c:	d12c      	bne.n	8001488 <main+0x568>
		&& READ_BIT(audio_tx_status, AUDIO_STATUS_R_HALF_CPLT) == false)
 800142e:	4b11      	ldr	r3, [pc, #68]	@ (8001474 <main+0x554>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	b2db      	uxtb	r3, r3
 8001434:	f003 0308 	and.w	r3, r3, #8
 8001438:	2b00      	cmp	r3, #0
 800143a:	d125      	bne.n	8001488 <main+0x568>
  __ASM volatile ("cpsie i" : : : "memory");
 800143c:	b662      	cpsie	i
}
 800143e:	bf00      	nop
		{
			__enable_irq();

			SET_BIT(audio_tx_status, AUDIO_STATUS_R_HALF_PENDING);
 8001440:	4b0c      	ldr	r3, [pc, #48]	@ (8001474 <main+0x554>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	b2db      	uxtb	r3, r3
 8001446:	f043 0304 	orr.w	r3, r3, #4
 800144a:	b2da      	uxtb	r2, r3
 800144c:	4b09      	ldr	r3, [pc, #36]	@ (8001474 <main+0x554>)
 800144e:	701a      	strb	r2, [r3, #0]
			CLEAR_BIT(audio_tx_status, AUDIO_STATUS_R_HALF_CPLT);
 8001450:	4b08      	ldr	r3, [pc, #32]	@ (8001474 <main+0x554>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	b2db      	uxtb	r3, r3
 8001456:	f023 0308 	bic.w	r3, r3, #8
 800145a:	b2da      	uxtb	r2, r3
 800145c:	4b05      	ldr	r3, [pc, #20]	@ (8001474 <main+0x554>)
 800145e:	701a      	strb	r2, [r3, #0]
			HAL_MDMA_GenerateSWRequest(&hmdma_mdma_channel2_sw_0);
 8001460:	4808      	ldr	r0, [pc, #32]	@ (8001484 <main+0x564>)
 8001462:	f005 fb85 	bl	8006b70 <HAL_MDMA_GenerateSWRequest>
 8001466:	e072      	b.n	800154e <main+0x62e>
 8001468:	24000d80 	.word	0x24000d80
 800146c:	24000344 	.word	0x24000344
 8001470:	24000d81 	.word	0x24000d81
 8001474:	24000d82 	.word	0x24000d82
 8001478:	24000009 	.word	0x24000009
 800147c:	20000400 	.word	0x20000400
 8001480:	24000980 	.word	0x24000980
 8001484:	24000450 	.word	0x24000450
		}
		else if (READ_BIT(audio_dsp_status, AUDIO_STATUS_L_CPLT) &&
 8001488:	4b6d      	ldr	r3, [pc, #436]	@ (8001640 <main+0x720>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	b2db      	uxtb	r3, r3
 800148e:	f003 0320 	and.w	r3, r3, #32
 8001492:	2b00      	cmp	r3, #0
 8001494:	d029      	beq.n	80014ea <main+0x5ca>
 8001496:	4b6b      	ldr	r3, [pc, #428]	@ (8001644 <main+0x724>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	b2db      	uxtb	r3, r3
 800149c:	b25b      	sxtb	r3, r3
 800149e:	2b00      	cmp	r3, #0
 80014a0:	da23      	bge.n	80014ea <main+0x5ca>
		READ_BIT(audio_rx_status, AUDIO_STATUS_R_CPLT)
		&& READ_BIT(audio_tx_status, AUDIO_STATUS_L_PENDING) == false
 80014a2:	4b69      	ldr	r3, [pc, #420]	@ (8001648 <main+0x728>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	f003 0310 	and.w	r3, r3, #16
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d11c      	bne.n	80014ea <main+0x5ca>
		&& READ_BIT(audio_tx_status, AUDIO_STATUS_L_CPLT) == false)
 80014b0:	4b65      	ldr	r3, [pc, #404]	@ (8001648 <main+0x728>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	f003 0320 	and.w	r3, r3, #32
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d115      	bne.n	80014ea <main+0x5ca>
  __ASM volatile ("cpsie i" : : : "memory");
 80014be:	b662      	cpsie	i
}
 80014c0:	bf00      	nop
		{
			__enable_irq();

			SET_BIT(audio_tx_status, AUDIO_STATUS_L_PENDING);
 80014c2:	4b61      	ldr	r3, [pc, #388]	@ (8001648 <main+0x728>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	f043 0310 	orr.w	r3, r3, #16
 80014cc:	b2da      	uxtb	r2, r3
 80014ce:	4b5e      	ldr	r3, [pc, #376]	@ (8001648 <main+0x728>)
 80014d0:	701a      	strb	r2, [r3, #0]
			CLEAR_BIT(audio_tx_status, AUDIO_STATUS_L_CPLT);
 80014d2:	4b5d      	ldr	r3, [pc, #372]	@ (8001648 <main+0x728>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	f023 0320 	bic.w	r3, r3, #32
 80014dc:	b2da      	uxtb	r2, r3
 80014de:	4b5a      	ldr	r3, [pc, #360]	@ (8001648 <main+0x728>)
 80014e0:	701a      	strb	r2, [r3, #0]
			HAL_MDMA_GenerateSWRequest(&hmdma_mdma_channel2_sw_0);
 80014e2:	485a      	ldr	r0, [pc, #360]	@ (800164c <main+0x72c>)
 80014e4:	f005 fb44 	bl	8006b70 <HAL_MDMA_GenerateSWRequest>
 80014e8:	e031      	b.n	800154e <main+0x62e>
		}
		else if (READ_BIT(audio_dsp_status, AUDIO_STATUS_R_CPLT) &&
 80014ea:	4b55      	ldr	r3, [pc, #340]	@ (8001640 <main+0x720>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	b25b      	sxtb	r3, r3
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	da29      	bge.n	800154a <main+0x62a>
		READ_BIT(audio_tx_status, AUDIO_STATUS_L_CPLT)
 80014f6:	4b54      	ldr	r3, [pc, #336]	@ (8001648 <main+0x728>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	f003 0320 	and.w	r3, r3, #32
		else if (READ_BIT(audio_dsp_status, AUDIO_STATUS_R_CPLT) &&
 8001500:	2b00      	cmp	r3, #0
 8001502:	d022      	beq.n	800154a <main+0x62a>
		&& READ_BIT(audio_tx_status, AUDIO_STATUS_R_PENDING) == false
 8001504:	4b50      	ldr	r3, [pc, #320]	@ (8001648 <main+0x728>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	b2db      	uxtb	r3, r3
 800150a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800150e:	2b00      	cmp	r3, #0
 8001510:	d11b      	bne.n	800154a <main+0x62a>
		&& READ_BIT(audio_tx_status, AUDIO_STATUS_R_CPLT) == false)
 8001512:	4b4d      	ldr	r3, [pc, #308]	@ (8001648 <main+0x728>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	b2db      	uxtb	r3, r3
 8001518:	b25b      	sxtb	r3, r3
 800151a:	2b00      	cmp	r3, #0
 800151c:	db15      	blt.n	800154a <main+0x62a>
  __ASM volatile ("cpsie i" : : : "memory");
 800151e:	b662      	cpsie	i
}
 8001520:	bf00      	nop
		{
			__enable_irq();

			SET_BIT(audio_tx_status, AUDIO_STATUS_R_PENDING);
 8001522:	4b49      	ldr	r3, [pc, #292]	@ (8001648 <main+0x728>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	b2db      	uxtb	r3, r3
 8001528:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800152c:	b2da      	uxtb	r2, r3
 800152e:	4b46      	ldr	r3, [pc, #280]	@ (8001648 <main+0x728>)
 8001530:	701a      	strb	r2, [r3, #0]
			CLEAR_BIT(audio_tx_status, AUDIO_STATUS_R_CPLT);
 8001532:	4b45      	ldr	r3, [pc, #276]	@ (8001648 <main+0x728>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	b2db      	uxtb	r3, r3
 8001538:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800153c:	b2da      	uxtb	r2, r3
 800153e:	4b42      	ldr	r3, [pc, #264]	@ (8001648 <main+0x728>)
 8001540:	701a      	strb	r2, [r3, #0]
			HAL_MDMA_GenerateSWRequest(&hmdma_mdma_channel2_sw_0);
 8001542:	4842      	ldr	r0, [pc, #264]	@ (800164c <main+0x72c>)
 8001544:	f005 fb14 	bl	8006b70 <HAL_MDMA_GenerateSWRequest>
 8001548:	e001      	b.n	800154e <main+0x62e>
  __ASM volatile ("cpsie i" : : : "memory");
 800154a:	b662      	cpsie	i
}
 800154c:	bf00      	nop
		{
			__enable_irq();
		}


		if(READ_BIT(audio_dsp_status, AUDIO_STATUS_L_HALF_PENDING)){
 800154e:	4b3c      	ldr	r3, [pc, #240]	@ (8001640 <main+0x720>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	b2db      	uxtb	r3, r3
 8001554:	f003 0301 	and.w	r3, r3, #1
 8001558:	2b00      	cmp	r3, #0
 800155a:	d016      	beq.n	800158a <main+0x66a>

			arm_fir_q15(&firInstanceQ15_ch1_l, (q15_t*) audio_buffer_rx_ch1_l,
 800155c:	2380      	movs	r3, #128	@ 0x80
 800155e:	4a3c      	ldr	r2, [pc, #240]	@ (8001650 <main+0x730>)
 8001560:	493c      	ldr	r1, [pc, #240]	@ (8001654 <main+0x734>)
 8001562:	483d      	ldr	r0, [pc, #244]	@ (8001658 <main+0x738>)
 8001564:	f00b fa4a 	bl	800c9fc <arm_fir_q15>
					(q15_t*) audio_buffer_tx_ch1_l, AUDIO_BUFFER_LENGTH_HALF);

			CLEAR_BIT(audio_dsp_status, AUDIO_STATUS_L_HALF_PENDING);
 8001568:	4b35      	ldr	r3, [pc, #212]	@ (8001640 <main+0x720>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	b2db      	uxtb	r3, r3
 800156e:	f023 0301 	bic.w	r3, r3, #1
 8001572:	b2da      	uxtb	r2, r3
 8001574:	4b32      	ldr	r3, [pc, #200]	@ (8001640 <main+0x720>)
 8001576:	701a      	strb	r2, [r3, #0]
			SET_BIT(audio_dsp_status, AUDIO_STATUS_L_HALF_CPLT);
 8001578:	4b31      	ldr	r3, [pc, #196]	@ (8001640 <main+0x720>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	b2db      	uxtb	r3, r3
 800157e:	f043 0302 	orr.w	r3, r3, #2
 8001582:	b2da      	uxtb	r2, r3
 8001584:	4b2e      	ldr	r3, [pc, #184]	@ (8001640 <main+0x720>)
 8001586:	701a      	strb	r2, [r3, #0]
 8001588:	e575      	b.n	8001076 <main+0x156>
		}
		else if(READ_BIT(audio_dsp_status, AUDIO_STATUS_R_HALF_PENDING)){
 800158a:	4b2d      	ldr	r3, [pc, #180]	@ (8001640 <main+0x720>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	b2db      	uxtb	r3, r3
 8001590:	f003 0304 	and.w	r3, r3, #4
 8001594:	2b00      	cmp	r3, #0
 8001596:	d016      	beq.n	80015c6 <main+0x6a6>

			arm_fir_q15(&firInstanceQ15_ch1_r, (q15_t*) audio_buffer_rx_ch1_r,
 8001598:	2380      	movs	r3, #128	@ 0x80
 800159a:	4a30      	ldr	r2, [pc, #192]	@ (800165c <main+0x73c>)
 800159c:	4930      	ldr	r1, [pc, #192]	@ (8001660 <main+0x740>)
 800159e:	4831      	ldr	r0, [pc, #196]	@ (8001664 <main+0x744>)
 80015a0:	f00b fa2c 	bl	800c9fc <arm_fir_q15>
					(q15_t*) audio_buffer_tx_ch1_r, AUDIO_BUFFER_LENGTH_HALF);

			CLEAR_BIT(audio_dsp_status, AUDIO_STATUS_R_HALF_PENDING);
 80015a4:	4b26      	ldr	r3, [pc, #152]	@ (8001640 <main+0x720>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	f023 0304 	bic.w	r3, r3, #4
 80015ae:	b2da      	uxtb	r2, r3
 80015b0:	4b23      	ldr	r3, [pc, #140]	@ (8001640 <main+0x720>)
 80015b2:	701a      	strb	r2, [r3, #0]
			SET_BIT(audio_dsp_status, AUDIO_STATUS_R_HALF_CPLT);
 80015b4:	4b22      	ldr	r3, [pc, #136]	@ (8001640 <main+0x720>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	f043 0308 	orr.w	r3, r3, #8
 80015be:	b2da      	uxtb	r2, r3
 80015c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001640 <main+0x720>)
 80015c2:	701a      	strb	r2, [r3, #0]
 80015c4:	e557      	b.n	8001076 <main+0x156>
		}
		else if(READ_BIT(audio_dsp_status, AUDIO_STATUS_L_PENDING)){
 80015c6:	4b1e      	ldr	r3, [pc, #120]	@ (8001640 <main+0x720>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	f003 0310 	and.w	r3, r3, #16
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d016      	beq.n	8001602 <main+0x6e2>

			arm_fir_q15(&firInstanceQ15_ch1_l, (q15_t*) &audio_buffer_rx_ch1_l[AUDIO_BUFFER_LENGTH_HALF],
 80015d4:	2380      	movs	r3, #128	@ 0x80
 80015d6:	4a24      	ldr	r2, [pc, #144]	@ (8001668 <main+0x748>)
 80015d8:	4924      	ldr	r1, [pc, #144]	@ (800166c <main+0x74c>)
 80015da:	481f      	ldr	r0, [pc, #124]	@ (8001658 <main+0x738>)
 80015dc:	f00b fa0e 	bl	800c9fc <arm_fir_q15>
					(q15_t*) &audio_buffer_tx_ch1_l[AUDIO_BUFFER_LENGTH_HALF], AUDIO_BUFFER_LENGTH_HALF);

			CLEAR_BIT(audio_dsp_status, AUDIO_STATUS_L_PENDING);
 80015e0:	4b17      	ldr	r3, [pc, #92]	@ (8001640 <main+0x720>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	f023 0310 	bic.w	r3, r3, #16
 80015ea:	b2da      	uxtb	r2, r3
 80015ec:	4b14      	ldr	r3, [pc, #80]	@ (8001640 <main+0x720>)
 80015ee:	701a      	strb	r2, [r3, #0]
			SET_BIT(audio_dsp_status, AUDIO_STATUS_L_CPLT);
 80015f0:	4b13      	ldr	r3, [pc, #76]	@ (8001640 <main+0x720>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	f043 0320 	orr.w	r3, r3, #32
 80015fa:	b2da      	uxtb	r2, r3
 80015fc:	4b10      	ldr	r3, [pc, #64]	@ (8001640 <main+0x720>)
 80015fe:	701a      	strb	r2, [r3, #0]
 8001600:	e539      	b.n	8001076 <main+0x156>
		}
		else if(READ_BIT(audio_dsp_status, AUDIO_STATUS_R_PENDING)){
 8001602:	4b0f      	ldr	r3, [pc, #60]	@ (8001640 <main+0x720>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	b2db      	uxtb	r3, r3
 8001608:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800160c:	2b00      	cmp	r3, #0
 800160e:	f43f ad32 	beq.w	8001076 <main+0x156>

			arm_fir_q15(&firInstanceQ15_ch1_r, (q15_t*) &audio_buffer_rx_ch1_r[AUDIO_BUFFER_LENGTH_HALF],
 8001612:	2380      	movs	r3, #128	@ 0x80
 8001614:	4a16      	ldr	r2, [pc, #88]	@ (8001670 <main+0x750>)
 8001616:	4917      	ldr	r1, [pc, #92]	@ (8001674 <main+0x754>)
 8001618:	4812      	ldr	r0, [pc, #72]	@ (8001664 <main+0x744>)
 800161a:	f00b f9ef 	bl	800c9fc <arm_fir_q15>
					(q15_t*) &audio_buffer_tx_ch1_r[AUDIO_BUFFER_LENGTH_HALF], AUDIO_BUFFER_LENGTH_HALF);

			CLEAR_BIT(audio_dsp_status, AUDIO_STATUS_R_PENDING);
 800161e:	4b08      	ldr	r3, [pc, #32]	@ (8001640 <main+0x720>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	b2db      	uxtb	r3, r3
 8001624:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001628:	b2da      	uxtb	r2, r3
 800162a:	4b05      	ldr	r3, [pc, #20]	@ (8001640 <main+0x720>)
 800162c:	701a      	strb	r2, [r3, #0]
			SET_BIT(audio_dsp_status, AUDIO_STATUS_R_CPLT);
 800162e:	4b04      	ldr	r3, [pc, #16]	@ (8001640 <main+0x720>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	b2db      	uxtb	r3, r3
 8001634:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001638:	b2da      	uxtb	r2, r3
 800163a:	4b01      	ldr	r3, [pc, #4]	@ (8001640 <main+0x720>)
 800163c:	701a      	strb	r2, [r3, #0]
		__disable_irq();
 800163e:	e51a      	b.n	8001076 <main+0x156>
 8001640:	24000d81 	.word	0x24000d81
 8001644:	24000d80 	.word	0x24000d80
 8001648:	24000d82 	.word	0x24000d82
 800164c:	24000450 	.word	0x24000450
 8001650:	20000400 	.word	0x20000400
 8001654:	20000000 	.word	0x20000000
 8001658:	24001008 	.word	0x24001008
 800165c:	20000600 	.word	0x20000600
 8001660:	20000200 	.word	0x20000200
 8001664:	24001014 	.word	0x24001014
 8001668:	20000500 	.word	0x20000500
 800166c:	20000100 	.word	0x20000100
 8001670:	20000700 	.word	0x20000700
 8001674:	20000300 	.word	0x20000300

08001678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b09c      	sub	sp, #112	@ 0x70
 800167c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800167e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001682:	224c      	movs	r2, #76	@ 0x4c
 8001684:	2100      	movs	r1, #0
 8001686:	4618      	mov	r0, r3
 8001688:	f00b fb84 	bl	800cd94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800168c:	1d3b      	adds	r3, r7, #4
 800168e:	2220      	movs	r2, #32
 8001690:	2100      	movs	r1, #0
 8001692:	4618      	mov	r0, r3
 8001694:	f00b fb7e 	bl	800cd94 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001698:	2004      	movs	r0, #4
 800169a:	f005 fcff 	bl	800709c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800169e:	2300      	movs	r3, #0
 80016a0:	603b      	str	r3, [r7, #0]
 80016a2:	4b32      	ldr	r3, [pc, #200]	@ (800176c <SystemClock_Config+0xf4>)
 80016a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016a6:	4a31      	ldr	r2, [pc, #196]	@ (800176c <SystemClock_Config+0xf4>)
 80016a8:	f023 0301 	bic.w	r3, r3, #1
 80016ac:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80016ae:	4b2f      	ldr	r3, [pc, #188]	@ (800176c <SystemClock_Config+0xf4>)
 80016b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	603b      	str	r3, [r7, #0]
 80016b8:	4b2d      	ldr	r3, [pc, #180]	@ (8001770 <SystemClock_Config+0xf8>)
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80016c0:	4a2b      	ldr	r2, [pc, #172]	@ (8001770 <SystemClock_Config+0xf8>)
 80016c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016c6:	6193      	str	r3, [r2, #24]
 80016c8:	4b29      	ldr	r3, [pc, #164]	@ (8001770 <SystemClock_Config+0xf8>)
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80016d0:	603b      	str	r3, [r7, #0]
 80016d2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80016d4:	bf00      	nop
 80016d6:	4b26      	ldr	r3, [pc, #152]	@ (8001770 <SystemClock_Config+0xf8>)
 80016d8:	699b      	ldr	r3, [r3, #24]
 80016da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80016de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80016e2:	d1f8      	bne.n	80016d6 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016e4:	2302      	movs	r3, #2
 80016e6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80016e8:	2301      	movs	r3, #1
 80016ea:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016ec:	2340      	movs	r3, #64	@ 0x40
 80016ee:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016f0:	2302      	movs	r3, #2
 80016f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016f4:	2300      	movs	r3, #0
 80016f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80016f8:	2304      	movs	r3, #4
 80016fa:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 50;
 80016fc:	2332      	movs	r3, #50	@ 0x32
 80016fe:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001700:	2302      	movs	r3, #2
 8001702:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 65;
 8001704:	2341      	movs	r3, #65	@ 0x41
 8001706:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001708:	2302      	movs	r3, #2
 800170a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800170c:	230c      	movs	r3, #12
 800170e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001710:	2300      	movs	r3, #0
 8001712:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001714:	2300      	movs	r3, #0
 8001716:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001718:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800171c:	4618      	mov	r0, r3
 800171e:	f005 fd17 	bl	8007150 <HAL_RCC_OscConfig>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001728:	f001 f852 	bl	80027d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800172c:	233f      	movs	r3, #63	@ 0x3f
 800172e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001730:	2303      	movs	r3, #3
 8001732:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 8001734:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001738:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800173a:	2308      	movs	r3, #8
 800173c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800173e:	2340      	movs	r3, #64	@ 0x40
 8001740:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001742:	2340      	movs	r3, #64	@ 0x40
 8001744:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001746:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800174a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800174c:	2340      	movs	r3, #64	@ 0x40
 800174e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001750:	1d3b      	adds	r3, r7, #4
 8001752:	2102      	movs	r1, #2
 8001754:	4618      	mov	r0, r3
 8001756:	f006 f955 	bl	8007a04 <HAL_RCC_ClockConfig>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <SystemClock_Config+0xec>
  {
    Error_Handler();
 8001760:	f001 f836 	bl	80027d0 <Error_Handler>
  }
}
 8001764:	bf00      	nop
 8001766:	3770      	adds	r7, #112	@ 0x70
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	58000400 	.word	0x58000400
 8001770:	58024800 	.word	0x58024800

08001774 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b0b0      	sub	sp, #192	@ 0xc0
 8001778:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800177a:	463b      	mov	r3, r7
 800177c:	22c0      	movs	r2, #192	@ 0xc0
 800177e:	2100      	movs	r1, #0
 8001780:	4618      	mov	r0, r3
 8001782:	f00b fb07 	bl	800cd94 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_USART3;
 8001786:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800178a:	f04f 0300 	mov.w	r3, #0
 800178e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 5;
 8001792:	2305      	movs	r3, #5
 8001794:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 24;
 8001796:	2318      	movs	r3, #24
 8001798:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 25;
 800179a:	2319      	movs	r3, #25
 800179c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 24;
 800179e:	2318      	movs	r3, #24
 80017a0:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80017a2:	2302      	movs	r3, #2
 80017a4:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80017a6:	23c0      	movs	r3, #192	@ 0xc0
 80017a8:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80017aa:	2300      	movs	r3, #0
 80017ac:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80017ae:	2300      	movs	r3, #0
 80017b0:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 80017b2:	2301      	movs	r3, #1
 80017b4:	65bb      	str	r3, [r7, #88]	@ 0x58
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL2;
 80017b6:	2301      	movs	r3, #1
 80017b8:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017ba:	463b      	mov	r3, r7
 80017bc:	4618      	mov	r0, r3
 80017be:	f006 fcad 	bl	800811c <HAL_RCCEx_PeriphCLKConfig>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 80017c8:	f001 f802 	bl	80027d0 <Error_Handler>
  }
}
 80017cc:	bf00      	nop
 80017ce:	37c0      	adds	r7, #192	@ 0xc0
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80017d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001848 <MX_I2C2_Init+0x74>)
 80017da:	4a1c      	ldr	r2, [pc, #112]	@ (800184c <MX_I2C2_Init+0x78>)
 80017dc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000873;
 80017de:	4b1a      	ldr	r3, [pc, #104]	@ (8001848 <MX_I2C2_Init+0x74>)
 80017e0:	f640 0273 	movw	r2, #2163	@ 0x873
 80017e4:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80017e6:	4b18      	ldr	r3, [pc, #96]	@ (8001848 <MX_I2C2_Init+0x74>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017ec:	4b16      	ldr	r3, [pc, #88]	@ (8001848 <MX_I2C2_Init+0x74>)
 80017ee:	2201      	movs	r2, #1
 80017f0:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017f2:	4b15      	ldr	r3, [pc, #84]	@ (8001848 <MX_I2C2_Init+0x74>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80017f8:	4b13      	ldr	r3, [pc, #76]	@ (8001848 <MX_I2C2_Init+0x74>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017fe:	4b12      	ldr	r3, [pc, #72]	@ (8001848 <MX_I2C2_Init+0x74>)
 8001800:	2200      	movs	r2, #0
 8001802:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001804:	4b10      	ldr	r3, [pc, #64]	@ (8001848 <MX_I2C2_Init+0x74>)
 8001806:	2200      	movs	r2, #0
 8001808:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800180a:	4b0f      	ldr	r3, [pc, #60]	@ (8001848 <MX_I2C2_Init+0x74>)
 800180c:	2200      	movs	r2, #0
 800180e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001810:	480d      	ldr	r0, [pc, #52]	@ (8001848 <MX_I2C2_Init+0x74>)
 8001812:	f004 f87f 	bl	8005914 <HAL_I2C_Init>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800181c:	f000 ffd8 	bl	80027d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001820:	2100      	movs	r1, #0
 8001822:	4809      	ldr	r0, [pc, #36]	@ (8001848 <MX_I2C2_Init+0x74>)
 8001824:	f004 fe02 	bl	800642c <HAL_I2CEx_ConfigAnalogFilter>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800182e:	f000 ffcf 	bl	80027d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001832:	2100      	movs	r1, #0
 8001834:	4804      	ldr	r0, [pc, #16]	@ (8001848 <MX_I2C2_Init+0x74>)
 8001836:	f004 fe44 	bl	80064c2 <HAL_I2CEx_ConfigDigitalFilter>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001840:	f000 ffc6 	bl	80027d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001844:	bf00      	nop
 8001846:	bd80      	pop	{r7, pc}
 8001848:	2400003c 	.word	0x2400003c
 800184c:	40005800 	.word	0x40005800

08001850 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8001854:	4b2b      	ldr	r3, [pc, #172]	@ (8001904 <MX_SAI1_Init+0xb4>)
 8001856:	4a2c      	ldr	r2, [pc, #176]	@ (8001908 <MX_SAI1_Init+0xb8>)
 8001858:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
 800185a:	4b2a      	ldr	r3, [pc, #168]	@ (8001904 <MX_SAI1_Init+0xb4>)
 800185c:	2201      	movs	r2, #1
 800185e:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001860:	4b28      	ldr	r3, [pc, #160]	@ (8001904 <MX_SAI1_Init+0xb4>)
 8001862:	2200      	movs	r2, #0
 8001864:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001866:	4b27      	ldr	r3, [pc, #156]	@ (8001904 <MX_SAI1_Init+0xb4>)
 8001868:	2200      	movs	r2, #0
 800186a:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MCK_OVERSAMPLING_DISABLE;
 800186c:	4b25      	ldr	r3, [pc, #148]	@ (8001904 <MX_SAI1_Init+0xb4>)
 800186e:	2200      	movs	r2, #0
 8001870:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8001872:	4b24      	ldr	r3, [pc, #144]	@ (8001904 <MX_SAI1_Init+0xb4>)
 8001874:	2200      	movs	r2, #0
 8001876:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8001878:	4b22      	ldr	r3, [pc, #136]	@ (8001904 <MX_SAI1_Init+0xb4>)
 800187a:	2201      	movs	r2, #1
 800187c:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 800187e:	4b21      	ldr	r3, [pc, #132]	@ (8001904 <MX_SAI1_Init+0xb4>)
 8001880:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8001884:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001886:	4b1f      	ldr	r3, [pc, #124]	@ (8001904 <MX_SAI1_Init+0xb4>)
 8001888:	2200      	movs	r2, #0
 800188a:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 800188c:	4b1d      	ldr	r3, [pc, #116]	@ (8001904 <MX_SAI1_Init+0xb4>)
 800188e:	2200      	movs	r2, #0
 8001890:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001892:	4b1c      	ldr	r3, [pc, #112]	@ (8001904 <MX_SAI1_Init+0xb4>)
 8001894:	2200      	movs	r2, #0
 8001896:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8001898:	2302      	movs	r3, #2
 800189a:	2200      	movs	r2, #0
 800189c:	2100      	movs	r1, #0
 800189e:	4819      	ldr	r0, [pc, #100]	@ (8001904 <MX_SAI1_Init+0xb4>)
 80018a0:	f009 f93a 	bl	800ab18 <HAL_SAI_InitProtocol>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_SAI1_Init+0x5e>
  {
    Error_Handler();
 80018aa:	f000 ff91 	bl	80027d0 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 80018ae:	4b17      	ldr	r3, [pc, #92]	@ (800190c <MX_SAI1_Init+0xbc>)
 80018b0:	4a17      	ldr	r2, [pc, #92]	@ (8001910 <MX_SAI1_Init+0xc0>)
 80018b2:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_TX;
 80018b4:	4b15      	ldr	r3, [pc, #84]	@ (800190c <MX_SAI1_Init+0xbc>)
 80018b6:	2202      	movs	r2, #2
 80018b8:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 80018ba:	4b14      	ldr	r3, [pc, #80]	@ (800190c <MX_SAI1_Init+0xbc>)
 80018bc:	2201      	movs	r2, #1
 80018be:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80018c0:	4b12      	ldr	r3, [pc, #72]	@ (800190c <MX_SAI1_Init+0xbc>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 80018c6:	4b11      	ldr	r3, [pc, #68]	@ (800190c <MX_SAI1_Init+0xbc>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 80018cc:	4b0f      	ldr	r3, [pc, #60]	@ (800190c <MX_SAI1_Init+0xbc>)
 80018ce:	2201      	movs	r2, #1
 80018d0:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80018d2:	4b0e      	ldr	r3, [pc, #56]	@ (800190c <MX_SAI1_Init+0xbc>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 80018d8:	4b0c      	ldr	r3, [pc, #48]	@ (800190c <MX_SAI1_Init+0xbc>)
 80018da:	2200      	movs	r2, #0
 80018dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 80018de:	4b0b      	ldr	r3, [pc, #44]	@ (800190c <MX_SAI1_Init+0xbc>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80018e4:	4b09      	ldr	r3, [pc, #36]	@ (800190c <MX_SAI1_Init+0xbc>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 80018ea:	2302      	movs	r3, #2
 80018ec:	2200      	movs	r2, #0
 80018ee:	2100      	movs	r1, #0
 80018f0:	4806      	ldr	r0, [pc, #24]	@ (800190c <MX_SAI1_Init+0xbc>)
 80018f2:	f009 f911 	bl	800ab18 <HAL_SAI_InitProtocol>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_SAI1_Init+0xb0>
  {
    Error_Handler();
 80018fc:	f000 ff68 	bl	80027d0 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8001900:	bf00      	nop
 8001902:	bd80      	pop	{r7, pc}
 8001904:	24000090 	.word	0x24000090
 8001908:	40015804 	.word	0x40015804
 800190c:	24000128 	.word	0x24000128
 8001910:	40015824 	.word	0x40015824

08001914 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001918:	4b22      	ldr	r3, [pc, #136]	@ (80019a4 <MX_USART3_UART_Init+0x90>)
 800191a:	4a23      	ldr	r2, [pc, #140]	@ (80019a8 <MX_USART3_UART_Init+0x94>)
 800191c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800191e:	4b21      	ldr	r3, [pc, #132]	@ (80019a4 <MX_USART3_UART_Init+0x90>)
 8001920:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001924:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001926:	4b1f      	ldr	r3, [pc, #124]	@ (80019a4 <MX_USART3_UART_Init+0x90>)
 8001928:	2200      	movs	r2, #0
 800192a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800192c:	4b1d      	ldr	r3, [pc, #116]	@ (80019a4 <MX_USART3_UART_Init+0x90>)
 800192e:	2200      	movs	r2, #0
 8001930:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001932:	4b1c      	ldr	r3, [pc, #112]	@ (80019a4 <MX_USART3_UART_Init+0x90>)
 8001934:	2200      	movs	r2, #0
 8001936:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001938:	4b1a      	ldr	r3, [pc, #104]	@ (80019a4 <MX_USART3_UART_Init+0x90>)
 800193a:	220c      	movs	r2, #12
 800193c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800193e:	4b19      	ldr	r3, [pc, #100]	@ (80019a4 <MX_USART3_UART_Init+0x90>)
 8001940:	2200      	movs	r2, #0
 8001942:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001944:	4b17      	ldr	r3, [pc, #92]	@ (80019a4 <MX_USART3_UART_Init+0x90>)
 8001946:	2200      	movs	r2, #0
 8001948:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800194a:	4b16      	ldr	r3, [pc, #88]	@ (80019a4 <MX_USART3_UART_Init+0x90>)
 800194c:	2200      	movs	r2, #0
 800194e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001950:	4b14      	ldr	r3, [pc, #80]	@ (80019a4 <MX_USART3_UART_Init+0x90>)
 8001952:	2200      	movs	r2, #0
 8001954:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001956:	4b13      	ldr	r3, [pc, #76]	@ (80019a4 <MX_USART3_UART_Init+0x90>)
 8001958:	2200      	movs	r2, #0
 800195a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800195c:	4811      	ldr	r0, [pc, #68]	@ (80019a4 <MX_USART3_UART_Init+0x90>)
 800195e:	f009 ff70 	bl	800b842 <HAL_UART_Init>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001968:	f000 ff32 	bl	80027d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800196c:	2100      	movs	r1, #0
 800196e:	480d      	ldr	r0, [pc, #52]	@ (80019a4 <MX_USART3_UART_Init+0x90>)
 8001970:	f00a ff79 	bl	800c866 <HAL_UARTEx_SetTxFifoThreshold>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800197a:	f000 ff29 	bl	80027d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800197e:	2100      	movs	r1, #0
 8001980:	4808      	ldr	r0, [pc, #32]	@ (80019a4 <MX_USART3_UART_Init+0x90>)
 8001982:	f00a ffae 	bl	800c8e2 <HAL_UARTEx_SetRxFifoThreshold>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800198c:	f000 ff20 	bl	80027d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001990:	4804      	ldr	r0, [pc, #16]	@ (80019a4 <MX_USART3_UART_Init+0x90>)
 8001992:	f00a ff2f 	bl	800c7f4 <HAL_UARTEx_DisableFifoMode>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800199c:	f000 ff18 	bl	80027d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80019a0:	bf00      	nop
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	240002b0 	.word	0x240002b0
 80019a8:	40004800 	.word	0x40004800

080019ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019b2:	4b11      	ldr	r3, [pc, #68]	@ (80019f8 <MX_DMA_Init+0x4c>)
 80019b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80019b8:	4a0f      	ldr	r2, [pc, #60]	@ (80019f8 <MX_DMA_Init+0x4c>)
 80019ba:	f043 0301 	orr.w	r3, r3, #1
 80019be:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80019c2:	4b0d      	ldr	r3, [pc, #52]	@ (80019f8 <MX_DMA_Init+0x4c>)
 80019c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80019c8:	f003 0301 	and.w	r3, r3, #1
 80019cc:	607b      	str	r3, [r7, #4]
 80019ce:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80019d0:	2200      	movs	r2, #0
 80019d2:	2100      	movs	r1, #0
 80019d4:	200b      	movs	r0, #11
 80019d6:	f001 fb92 	bl	80030fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80019da:	200b      	movs	r0, #11
 80019dc:	f001 fba9 	bl	8003132 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80019e0:	2200      	movs	r2, #0
 80019e2:	2100      	movs	r1, #0
 80019e4:	200c      	movs	r0, #12
 80019e6:	f001 fb8a 	bl	80030fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80019ea:	200c      	movs	r0, #12
 80019ec:	f001 fba1 	bl	8003132 <HAL_NVIC_EnableIRQ>

}
 80019f0:	bf00      	nop
 80019f2:	3708      	adds	r7, #8
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	58024400 	.word	0x58024400

080019fc <MX_MDMA_Init>:
  *   node_mdma_channel2_sw_2
  *   node_mdma_channel2_sw_3
  *   node_mdma_channel2_sw_4
  */
static void MX_MDMA_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b096      	sub	sp, #88	@ 0x58
 8001a00:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 8001a02:	4baf      	ldr	r3, [pc, #700]	@ (8001cc0 <MX_MDMA_Init+0x2c4>)
 8001a04:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001a08:	4aad      	ldr	r2, [pc, #692]	@ (8001cc0 <MX_MDMA_Init+0x2c4>)
 8001a0a:	f043 0301 	orr.w	r3, r3, #1
 8001a0e:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001a12:	4bab      	ldr	r3, [pc, #684]	@ (8001cc0 <MX_MDMA_Init+0x2c4>)
 8001a14:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001a18:	f003 0301 	and.w	r3, r3, #1
 8001a1c:	607b      	str	r3, [r7, #4]
 8001a1e:	687b      	ldr	r3, [r7, #4]
  /* Local variables */
  MDMA_LinkNodeConfTypeDef nodeConfig;

  /* Configure MDMA channel MDMA_Channel0 */
  /* Configure MDMA request hmdma_mdma_channel0_sw_0 on MDMA_Channel0 */
  hmdma_mdma_channel0_sw_0.Instance = MDMA_Channel0;
 8001a20:	4ba8      	ldr	r3, [pc, #672]	@ (8001cc4 <MX_MDMA_Init+0x2c8>)
 8001a22:	4aa9      	ldr	r2, [pc, #676]	@ (8001cc8 <MX_MDMA_Init+0x2cc>)
 8001a24:	601a      	str	r2, [r3, #0]
  hmdma_mdma_channel0_sw_0.Init.Request = MDMA_REQUEST_SW;
 8001a26:	4ba7      	ldr	r3, [pc, #668]	@ (8001cc4 <MX_MDMA_Init+0x2c8>)
 8001a28:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a2c:	605a      	str	r2, [r3, #4]
  hmdma_mdma_channel0_sw_0.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 8001a2e:	4ba5      	ldr	r3, [pc, #660]	@ (8001cc4 <MX_MDMA_Init+0x2c8>)
 8001a30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001a34:	609a      	str	r2, [r3, #8]
  hmdma_mdma_channel0_sw_0.Init.Priority = MDMA_PRIORITY_HIGH;
 8001a36:	4ba3      	ldr	r3, [pc, #652]	@ (8001cc4 <MX_MDMA_Init+0x2c8>)
 8001a38:	2280      	movs	r2, #128	@ 0x80
 8001a3a:	60da      	str	r2, [r3, #12]
  hmdma_mdma_channel0_sw_0.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8001a3c:	4ba1      	ldr	r3, [pc, #644]	@ (8001cc4 <MX_MDMA_Init+0x2c8>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	611a      	str	r2, [r3, #16]
  hmdma_mdma_channel0_sw_0.Init.SourceInc = MDMA_SRC_INC_WORD;
 8001a42:	4ba0      	ldr	r3, [pc, #640]	@ (8001cc4 <MX_MDMA_Init+0x2c8>)
 8001a44:	f240 2202 	movw	r2, #514	@ 0x202
 8001a48:	615a      	str	r2, [r3, #20]
  hmdma_mdma_channel0_sw_0.Init.DestinationInc = MDMA_DEST_INC_HALFWORD;
 8001a4a:	4b9e      	ldr	r3, [pc, #632]	@ (8001cc4 <MX_MDMA_Init+0x2c8>)
 8001a4c:	f44f 6281 	mov.w	r2, #1032	@ 0x408
 8001a50:	619a      	str	r2, [r3, #24]
  hmdma_mdma_channel0_sw_0.Init.SourceDataSize = MDMA_SRC_DATASIZE_HALFWORD;
 8001a52:	4b9c      	ldr	r3, [pc, #624]	@ (8001cc4 <MX_MDMA_Init+0x2c8>)
 8001a54:	2210      	movs	r2, #16
 8001a56:	61da      	str	r2, [r3, #28]
  hmdma_mdma_channel0_sw_0.Init.DestDataSize = MDMA_DEST_DATASIZE_HALFWORD;
 8001a58:	4b9a      	ldr	r3, [pc, #616]	@ (8001cc4 <MX_MDMA_Init+0x2c8>)
 8001a5a:	2240      	movs	r2, #64	@ 0x40
 8001a5c:	621a      	str	r2, [r3, #32]
  hmdma_mdma_channel0_sw_0.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001a5e:	4b99      	ldr	r3, [pc, #612]	@ (8001cc4 <MX_MDMA_Init+0x2c8>)
 8001a60:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a64:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma_mdma_channel0_sw_0.Init.BufferTransferLength = AUDIO_SAMPLE_SIZE;
 8001a66:	4b97      	ldr	r3, [pc, #604]	@ (8001cc4 <MX_MDMA_Init+0x2c8>)
 8001a68:	2202      	movs	r2, #2
 8001a6a:	629a      	str	r2, [r3, #40]	@ 0x28
  hmdma_mdma_channel0_sw_0.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8001a6c:	4b95      	ldr	r3, [pc, #596]	@ (8001cc4 <MX_MDMA_Init+0x2c8>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	62da      	str	r2, [r3, #44]	@ 0x2c
  hmdma_mdma_channel0_sw_0.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8001a72:	4b94      	ldr	r3, [pc, #592]	@ (8001cc4 <MX_MDMA_Init+0x2c8>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	631a      	str	r2, [r3, #48]	@ 0x30
  hmdma_mdma_channel0_sw_0.Init.SourceBlockAddressOffset = 0;
 8001a78:	4b92      	ldr	r3, [pc, #584]	@ (8001cc4 <MX_MDMA_Init+0x2c8>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	635a      	str	r2, [r3, #52]	@ 0x34
  hmdma_mdma_channel0_sw_0.Init.DestBlockAddressOffset = 0;
 8001a7e:	4b91      	ldr	r3, [pc, #580]	@ (8001cc4 <MX_MDMA_Init+0x2c8>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_MDMA_Init(&hmdma_mdma_channel0_sw_0) != HAL_OK)
 8001a84:	488f      	ldr	r0, [pc, #572]	@ (8001cc4 <MX_MDMA_Init+0x2c8>)
 8001a86:	f004 fd68 	bl	800655a <HAL_MDMA_Init>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <MX_MDMA_Init+0x98>
  {
    Error_Handler();
 8001a90:	f000 fe9e 	bl	80027d0 <Error_Handler>
  }

  /* Initialize MDMA link node according to specified parameters */
  nodeConfig.Init.Request = MDMA_REQUEST_SW;
 8001a94:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001a98:	60bb      	str	r3, [r7, #8]
  nodeConfig.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 8001a9a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001a9e:	60fb      	str	r3, [r7, #12]
  nodeConfig.Init.Priority = MDMA_PRIORITY_HIGH;
 8001aa0:	2380      	movs	r3, #128	@ 0x80
 8001aa2:	613b      	str	r3, [r7, #16]
  nodeConfig.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]
  nodeConfig.Init.SourceInc = MDMA_SRC_INC_WORD;
 8001aa8:	f240 2302 	movw	r3, #514	@ 0x202
 8001aac:	61bb      	str	r3, [r7, #24]
  nodeConfig.Init.DestinationInc = MDMA_DEST_INC_HALFWORD;
 8001aae:	f44f 6381 	mov.w	r3, #1032	@ 0x408
 8001ab2:	61fb      	str	r3, [r7, #28]
  nodeConfig.Init.SourceDataSize = MDMA_SRC_DATASIZE_HALFWORD;
 8001ab4:	2310      	movs	r3, #16
 8001ab6:	623b      	str	r3, [r7, #32]
  nodeConfig.Init.DestDataSize = MDMA_DEST_DATASIZE_HALFWORD;
 8001ab8:	2340      	movs	r3, #64	@ 0x40
 8001aba:	627b      	str	r3, [r7, #36]	@ 0x24
  nodeConfig.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001abc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ac0:	62bb      	str	r3, [r7, #40]	@ 0x28
  nodeConfig.Init.BufferTransferLength = AUDIO_SAMPLE_SIZE;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  nodeConfig.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	633b      	str	r3, [r7, #48]	@ 0x30
  nodeConfig.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8001aca:	2300      	movs	r3, #0
 8001acc:	637b      	str	r3, [r7, #52]	@ 0x34
  nodeConfig.Init.SourceBlockAddressOffset = 0;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	63bb      	str	r3, [r7, #56]	@ 0x38
  nodeConfig.Init.DestBlockAddressOffset = 0;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  nodeConfig.PostRequestMaskAddress = 0;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	653b      	str	r3, [r7, #80]	@ 0x50
  nodeConfig.PostRequestMaskData = 0;
 8001ada:	2300      	movs	r3, #0
 8001adc:	657b      	str	r3, [r7, #84]	@ 0x54
  nodeConfig.SrcAddress = (uint32_t) &sai_buffer_rx[1];
 8001ade:	4b7b      	ldr	r3, [pc, #492]	@ (8001ccc <MX_MDMA_Init+0x2d0>)
 8001ae0:	643b      	str	r3, [r7, #64]	@ 0x40
  nodeConfig.DstAddress = (uint32_t) &audio_buffer_rx_ch1_r[0];
 8001ae2:	4b7b      	ldr	r3, [pc, #492]	@ (8001cd0 <MX_MDMA_Init+0x2d4>)
 8001ae4:	647b      	str	r3, [r7, #68]	@ 0x44
  nodeConfig.BlockDataLength = AUDIO_BUFFER_SIZE_HALF;
 8001ae6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001aea:	64bb      	str	r3, [r7, #72]	@ 0x48
  nodeConfig.BlockCount = 1;
 8001aec:	2301      	movs	r3, #1
 8001aee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_MDMA_LinkedList_CreateNode(&node_mdma_channel0_sw_1, &nodeConfig) != HAL_OK)
 8001af0:	f107 0308 	add.w	r3, r7, #8
 8001af4:	4619      	mov	r1, r3
 8001af6:	4877      	ldr	r0, [pc, #476]	@ (8001cd4 <MX_MDMA_Init+0x2d8>)
 8001af8:	f004 fdd6 	bl	80066a8 <HAL_MDMA_LinkedList_CreateNode>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <MX_MDMA_Init+0x10a>
  {
    Error_Handler();
 8001b02:	f000 fe65 	bl	80027d0 <Error_Handler>
  }
  /* USER CODE BEGIN mdma_channel0_sw_1 */
  HAL_MDMA_RegisterCallback(&hmdma_mdma_channel0_sw_0, HAL_MDMA_XFER_BLOCKCPLT_CB_ID, MDMA_RxXferBlockCpltCallback);
 8001b06:	4a74      	ldr	r2, [pc, #464]	@ (8001cd8 <MX_MDMA_Init+0x2dc>)
 8001b08:	2102      	movs	r1, #2
 8001b0a:	486e      	ldr	r0, [pc, #440]	@ (8001cc4 <MX_MDMA_Init+0x2c8>)
 8001b0c:	f004 fd72 	bl	80065f4 <HAL_MDMA_RegisterCallback>
  HAL_MDMA_RegisterCallback(&hmdma_mdma_channel0_sw_0, HAL_MDMA_XFER_ERROR_CB_ID, MDMA_RxErrorCallback);
 8001b10:	4a72      	ldr	r2, [pc, #456]	@ (8001cdc <MX_MDMA_Init+0x2e0>)
 8001b12:	2104      	movs	r1, #4
 8001b14:	486b      	ldr	r0, [pc, #428]	@ (8001cc4 <MX_MDMA_Init+0x2c8>)
 8001b16:	f004 fd6d 	bl	80065f4 <HAL_MDMA_RegisterCallback>
  /* USER CODE END mdma_channel0_sw_1 */

  /* Connect a node to the linked list */
  if (HAL_MDMA_LinkedList_AddNode(&hmdma_mdma_channel0_sw_0, &node_mdma_channel0_sw_1, 0) != HAL_OK)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	496d      	ldr	r1, [pc, #436]	@ (8001cd4 <MX_MDMA_Init+0x2d8>)
 8001b1e:	4869      	ldr	r0, [pc, #420]	@ (8001cc4 <MX_MDMA_Init+0x2c8>)
 8001b20:	f004 fe9e 	bl	8006860 <HAL_MDMA_LinkedList_AddNode>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <MX_MDMA_Init+0x132>
  {
    Error_Handler();
 8001b2a:	f000 fe51 	bl	80027d0 <Error_Handler>
  }

  /* Initialize MDMA link node according to specified parameters */
  nodeConfig.Init.Request = MDMA_REQUEST_SW;
 8001b2e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001b32:	60bb      	str	r3, [r7, #8]
  nodeConfig.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 8001b34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001b38:	60fb      	str	r3, [r7, #12]
  nodeConfig.Init.Priority = MDMA_PRIORITY_HIGH;
 8001b3a:	2380      	movs	r3, #128	@ 0x80
 8001b3c:	613b      	str	r3, [r7, #16]
  nodeConfig.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	617b      	str	r3, [r7, #20]
  nodeConfig.Init.SourceInc = MDMA_SRC_INC_WORD;
 8001b42:	f240 2302 	movw	r3, #514	@ 0x202
 8001b46:	61bb      	str	r3, [r7, #24]
  nodeConfig.Init.DestinationInc = MDMA_DEST_INC_HALFWORD;
 8001b48:	f44f 6381 	mov.w	r3, #1032	@ 0x408
 8001b4c:	61fb      	str	r3, [r7, #28]
  nodeConfig.Init.SourceDataSize = MDMA_SRC_DATASIZE_HALFWORD;
 8001b4e:	2310      	movs	r3, #16
 8001b50:	623b      	str	r3, [r7, #32]
  nodeConfig.Init.DestDataSize = MDMA_DEST_DATASIZE_HALFWORD;
 8001b52:	2340      	movs	r3, #64	@ 0x40
 8001b54:	627b      	str	r3, [r7, #36]	@ 0x24
  nodeConfig.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001b56:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  nodeConfig.Init.BufferTransferLength = AUDIO_SAMPLE_SIZE;
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  nodeConfig.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8001b60:	2300      	movs	r3, #0
 8001b62:	633b      	str	r3, [r7, #48]	@ 0x30
  nodeConfig.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8001b64:	2300      	movs	r3, #0
 8001b66:	637b      	str	r3, [r7, #52]	@ 0x34
  nodeConfig.Init.SourceBlockAddressOffset = 0;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	63bb      	str	r3, [r7, #56]	@ 0x38
  nodeConfig.Init.DestBlockAddressOffset = 0;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  nodeConfig.PostRequestMaskAddress = 0;
 8001b70:	2300      	movs	r3, #0
 8001b72:	653b      	str	r3, [r7, #80]	@ 0x50
  nodeConfig.PostRequestMaskData = 0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	657b      	str	r3, [r7, #84]	@ 0x54
  nodeConfig.SrcAddress = (uint32_t) &sai_buffer_rx[SAI_BUFFER_LENGTH_HALF];
 8001b78:	4b59      	ldr	r3, [pc, #356]	@ (8001ce0 <MX_MDMA_Init+0x2e4>)
 8001b7a:	643b      	str	r3, [r7, #64]	@ 0x40
  nodeConfig.DstAddress = (uint32_t) &audio_buffer_rx_ch1_l[AUDIO_BUFFER_LENGTH_HALF];
 8001b7c:	4b59      	ldr	r3, [pc, #356]	@ (8001ce4 <MX_MDMA_Init+0x2e8>)
 8001b7e:	647b      	str	r3, [r7, #68]	@ 0x44
  nodeConfig.BlockDataLength = AUDIO_BUFFER_SIZE_HALF;
 8001b80:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b84:	64bb      	str	r3, [r7, #72]	@ 0x48
  nodeConfig.BlockCount = 1;
 8001b86:	2301      	movs	r3, #1
 8001b88:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_MDMA_LinkedList_CreateNode(&node_mdma_channel0_sw_2, &nodeConfig) != HAL_OK)
 8001b8a:	f107 0308 	add.w	r3, r7, #8
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4855      	ldr	r0, [pc, #340]	@ (8001ce8 <MX_MDMA_Init+0x2ec>)
 8001b92:	f004 fd89 	bl	80066a8 <HAL_MDMA_LinkedList_CreateNode>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <MX_MDMA_Init+0x1a4>
  {
    Error_Handler();
 8001b9c:	f000 fe18 	bl	80027d0 <Error_Handler>
  /* USER CODE BEGIN mdma_channel0_sw_2 */

  /* USER CODE END mdma_channel0_sw_2 */

  /* Connect a node to the linked list */
  if (HAL_MDMA_LinkedList_AddNode(&hmdma_mdma_channel0_sw_0, &node_mdma_channel0_sw_2, 0) != HAL_OK)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	4951      	ldr	r1, [pc, #324]	@ (8001ce8 <MX_MDMA_Init+0x2ec>)
 8001ba4:	4847      	ldr	r0, [pc, #284]	@ (8001cc4 <MX_MDMA_Init+0x2c8>)
 8001ba6:	f004 fe5b 	bl	8006860 <HAL_MDMA_LinkedList_AddNode>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <MX_MDMA_Init+0x1b8>
  {
    Error_Handler();
 8001bb0:	f000 fe0e 	bl	80027d0 <Error_Handler>
  }

  /* Initialize MDMA link node according to specified parameters */
  nodeConfig.Init.Request = MDMA_REQUEST_SW;
 8001bb4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001bb8:	60bb      	str	r3, [r7, #8]
  nodeConfig.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 8001bba:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001bbe:	60fb      	str	r3, [r7, #12]
  nodeConfig.Init.Priority = MDMA_PRIORITY_HIGH;
 8001bc0:	2380      	movs	r3, #128	@ 0x80
 8001bc2:	613b      	str	r3, [r7, #16]
  nodeConfig.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	617b      	str	r3, [r7, #20]
  nodeConfig.Init.SourceInc = MDMA_SRC_INC_WORD;
 8001bc8:	f240 2302 	movw	r3, #514	@ 0x202
 8001bcc:	61bb      	str	r3, [r7, #24]
  nodeConfig.Init.DestinationInc = MDMA_DEST_INC_HALFWORD;
 8001bce:	f44f 6381 	mov.w	r3, #1032	@ 0x408
 8001bd2:	61fb      	str	r3, [r7, #28]
  nodeConfig.Init.SourceDataSize = MDMA_SRC_DATASIZE_HALFWORD;
 8001bd4:	2310      	movs	r3, #16
 8001bd6:	623b      	str	r3, [r7, #32]
  nodeConfig.Init.DestDataSize = MDMA_DEST_DATASIZE_HALFWORD;
 8001bd8:	2340      	movs	r3, #64	@ 0x40
 8001bda:	627b      	str	r3, [r7, #36]	@ 0x24
  nodeConfig.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001bdc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001be0:	62bb      	str	r3, [r7, #40]	@ 0x28
  nodeConfig.Init.BufferTransferLength = AUDIO_SAMPLE_SIZE;
 8001be2:	2302      	movs	r3, #2
 8001be4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  nodeConfig.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8001be6:	2300      	movs	r3, #0
 8001be8:	633b      	str	r3, [r7, #48]	@ 0x30
  nodeConfig.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8001bea:	2300      	movs	r3, #0
 8001bec:	637b      	str	r3, [r7, #52]	@ 0x34
  nodeConfig.Init.SourceBlockAddressOffset = 0;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	63bb      	str	r3, [r7, #56]	@ 0x38
  nodeConfig.Init.DestBlockAddressOffset = 0;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  nodeConfig.PostRequestMaskAddress = 0;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	653b      	str	r3, [r7, #80]	@ 0x50
  nodeConfig.PostRequestMaskData = 0;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	657b      	str	r3, [r7, #84]	@ 0x54
  nodeConfig.SrcAddress = (uint32_t) &sai_buffer_rx[SAI_BUFFER_LENGTH_HALF+1];
 8001bfe:	4b3b      	ldr	r3, [pc, #236]	@ (8001cec <MX_MDMA_Init+0x2f0>)
 8001c00:	643b      	str	r3, [r7, #64]	@ 0x40
  nodeConfig.DstAddress = (uint32_t) &audio_buffer_rx_ch1_r[AUDIO_BUFFER_LENGTH_HALF];
 8001c02:	4b3b      	ldr	r3, [pc, #236]	@ (8001cf0 <MX_MDMA_Init+0x2f4>)
 8001c04:	647b      	str	r3, [r7, #68]	@ 0x44
  nodeConfig.BlockDataLength = AUDIO_BUFFER_SIZE_HALF;
 8001c06:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c0a:	64bb      	str	r3, [r7, #72]	@ 0x48
  nodeConfig.BlockCount = 1;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_MDMA_LinkedList_CreateNode(&node_mdma_channel0_sw_3, &nodeConfig) != HAL_OK)
 8001c10:	f107 0308 	add.w	r3, r7, #8
 8001c14:	4619      	mov	r1, r3
 8001c16:	4837      	ldr	r0, [pc, #220]	@ (8001cf4 <MX_MDMA_Init+0x2f8>)
 8001c18:	f004 fd46 	bl	80066a8 <HAL_MDMA_LinkedList_CreateNode>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <MX_MDMA_Init+0x22a>
  {
    Error_Handler();
 8001c22:	f000 fdd5 	bl	80027d0 <Error_Handler>
  /* USER CODE BEGIN mdma_channel0_sw_3 */

  /* USER CODE END mdma_channel0_sw_3 */

  /* Connect a node to the linked list */
  if (HAL_MDMA_LinkedList_AddNode(&hmdma_mdma_channel0_sw_0, &node_mdma_channel0_sw_3, 0) != HAL_OK)
 8001c26:	2200      	movs	r2, #0
 8001c28:	4932      	ldr	r1, [pc, #200]	@ (8001cf4 <MX_MDMA_Init+0x2f8>)
 8001c2a:	4826      	ldr	r0, [pc, #152]	@ (8001cc4 <MX_MDMA_Init+0x2c8>)
 8001c2c:	f004 fe18 	bl	8006860 <HAL_MDMA_LinkedList_AddNode>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <MX_MDMA_Init+0x23e>
  {
    Error_Handler();
 8001c36:	f000 fdcb 	bl	80027d0 <Error_Handler>
  }

  /* Initialize MDMA link node according to specified parameters */
  nodeConfig.Init.Request = MDMA_REQUEST_SW;
 8001c3a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c3e:	60bb      	str	r3, [r7, #8]
  nodeConfig.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 8001c40:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001c44:	60fb      	str	r3, [r7, #12]
  nodeConfig.Init.Priority = MDMA_PRIORITY_HIGH;
 8001c46:	2380      	movs	r3, #128	@ 0x80
 8001c48:	613b      	str	r3, [r7, #16]
  nodeConfig.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	617b      	str	r3, [r7, #20]
  nodeConfig.Init.SourceInc = MDMA_SRC_INC_WORD;
 8001c4e:	f240 2302 	movw	r3, #514	@ 0x202
 8001c52:	61bb      	str	r3, [r7, #24]
  nodeConfig.Init.DestinationInc = MDMA_DEST_INC_HALFWORD;
 8001c54:	f44f 6381 	mov.w	r3, #1032	@ 0x408
 8001c58:	61fb      	str	r3, [r7, #28]
  nodeConfig.Init.SourceDataSize = MDMA_SRC_DATASIZE_HALFWORD;
 8001c5a:	2310      	movs	r3, #16
 8001c5c:	623b      	str	r3, [r7, #32]
  nodeConfig.Init.DestDataSize = MDMA_DEST_DATASIZE_HALFWORD;
 8001c5e:	2340      	movs	r3, #64	@ 0x40
 8001c60:	627b      	str	r3, [r7, #36]	@ 0x24
  nodeConfig.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001c62:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c66:	62bb      	str	r3, [r7, #40]	@ 0x28
  nodeConfig.Init.BufferTransferLength = AUDIO_SAMPLE_SIZE;
 8001c68:	2302      	movs	r3, #2
 8001c6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  nodeConfig.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	633b      	str	r3, [r7, #48]	@ 0x30
  nodeConfig.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8001c70:	2300      	movs	r3, #0
 8001c72:	637b      	str	r3, [r7, #52]	@ 0x34
  nodeConfig.Init.SourceBlockAddressOffset = 0;
 8001c74:	2300      	movs	r3, #0
 8001c76:	63bb      	str	r3, [r7, #56]	@ 0x38
  nodeConfig.Init.DestBlockAddressOffset = 0;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  nodeConfig.PostRequestMaskAddress = 0;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	653b      	str	r3, [r7, #80]	@ 0x50
  nodeConfig.PostRequestMaskData = 0;
 8001c80:	2300      	movs	r3, #0
 8001c82:	657b      	str	r3, [r7, #84]	@ 0x54
  nodeConfig.SrcAddress = (uint32_t) &sai_buffer_rx[0];
 8001c84:	4b1c      	ldr	r3, [pc, #112]	@ (8001cf8 <MX_MDMA_Init+0x2fc>)
 8001c86:	643b      	str	r3, [r7, #64]	@ 0x40
  nodeConfig.DstAddress = (uint32_t) &audio_buffer_rx_ch1_l[0];
 8001c88:	4b1c      	ldr	r3, [pc, #112]	@ (8001cfc <MX_MDMA_Init+0x300>)
 8001c8a:	647b      	str	r3, [r7, #68]	@ 0x44
  nodeConfig.BlockDataLength = AUDIO_BUFFER_SIZE_HALF;
 8001c8c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c90:	64bb      	str	r3, [r7, #72]	@ 0x48
  nodeConfig.BlockCount = 1;
 8001c92:	2301      	movs	r3, #1
 8001c94:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_MDMA_LinkedList_CreateNode(&node_mdma_channel0_sw_4, &nodeConfig) != HAL_OK)
 8001c96:	f107 0308 	add.w	r3, r7, #8
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4818      	ldr	r0, [pc, #96]	@ (8001d00 <MX_MDMA_Init+0x304>)
 8001c9e:	f004 fd03 	bl	80066a8 <HAL_MDMA_LinkedList_CreateNode>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <MX_MDMA_Init+0x2b0>
  {
    Error_Handler();
 8001ca8:	f000 fd92 	bl	80027d0 <Error_Handler>
  /* USER CODE BEGIN mdma_channel0_sw_4 */

  /* USER CODE END mdma_channel0_sw_4 */

  /* Connect a node to the linked list */
  if (HAL_MDMA_LinkedList_AddNode(&hmdma_mdma_channel0_sw_0, &node_mdma_channel0_sw_4, 0) != HAL_OK)
 8001cac:	2200      	movs	r2, #0
 8001cae:	4914      	ldr	r1, [pc, #80]	@ (8001d00 <MX_MDMA_Init+0x304>)
 8001cb0:	4804      	ldr	r0, [pc, #16]	@ (8001cc4 <MX_MDMA_Init+0x2c8>)
 8001cb2:	f004 fdd5 	bl	8006860 <HAL_MDMA_LinkedList_AddNode>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d025      	beq.n	8001d08 <MX_MDMA_Init+0x30c>
 8001cbc:	e022      	b.n	8001d04 <MX_MDMA_Init+0x308>
 8001cbe:	bf00      	nop
 8001cc0:	58024400 	.word	0x58024400
 8001cc4:	24000344 	.word	0x24000344
 8001cc8:	52000040 	.word	0x52000040
 8001ccc:	24000582 	.word	0x24000582
 8001cd0:	20000200 	.word	0x20000200
 8001cd4:	240003b0 	.word	0x240003b0
 8001cd8:	0800230d 	.word	0x0800230d
 8001cdc:	080025ad 	.word	0x080025ad
 8001ce0:	24000780 	.word	0x24000780
 8001ce4:	20000100 	.word	0x20000100
 8001ce8:	240003d8 	.word	0x240003d8
 8001cec:	24000782 	.word	0x24000782
 8001cf0:	20000300 	.word	0x20000300
 8001cf4:	24000400 	.word	0x24000400
 8001cf8:	24000580 	.word	0x24000580
 8001cfc:	20000000 	.word	0x20000000
 8001d00:	24000428 	.word	0x24000428
  {
    Error_Handler();
 8001d04:	f000 fd64 	bl	80027d0 <Error_Handler>
  }

  /* Make the linked list circular by connecting the last node to the first */
  if (HAL_MDMA_LinkedList_EnableCircularMode(&hmdma_mdma_channel0_sw_0) != HAL_OK)
 8001d08:	48ae      	ldr	r0, [pc, #696]	@ (8001fc4 <MX_MDMA_Init+0x5c8>)
 8001d0a:	f004 fe6d 	bl	80069e8 <HAL_MDMA_LinkedList_EnableCircularMode>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <MX_MDMA_Init+0x31c>
  {
    Error_Handler();
 8001d14:	f000 fd5c 	bl	80027d0 <Error_Handler>
  }

  /* Configure MDMA channel MDMA_Channel2 */
  /* Configure MDMA request hmdma_mdma_channel2_sw_0 on MDMA_Channel2 */
  hmdma_mdma_channel2_sw_0.Instance = MDMA_Channel2;
 8001d18:	4bab      	ldr	r3, [pc, #684]	@ (8001fc8 <MX_MDMA_Init+0x5cc>)
 8001d1a:	4aac      	ldr	r2, [pc, #688]	@ (8001fcc <MX_MDMA_Init+0x5d0>)
 8001d1c:	601a      	str	r2, [r3, #0]
  hmdma_mdma_channel2_sw_0.Init.Request = MDMA_REQUEST_SW;
 8001d1e:	4baa      	ldr	r3, [pc, #680]	@ (8001fc8 <MX_MDMA_Init+0x5cc>)
 8001d20:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d24:	605a      	str	r2, [r3, #4]
  hmdma_mdma_channel2_sw_0.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 8001d26:	4ba8      	ldr	r3, [pc, #672]	@ (8001fc8 <MX_MDMA_Init+0x5cc>)
 8001d28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001d2c:	609a      	str	r2, [r3, #8]
  hmdma_mdma_channel2_sw_0.Init.Priority = MDMA_PRIORITY_MEDIUM;
 8001d2e:	4ba6      	ldr	r3, [pc, #664]	@ (8001fc8 <MX_MDMA_Init+0x5cc>)
 8001d30:	2240      	movs	r2, #64	@ 0x40
 8001d32:	60da      	str	r2, [r3, #12]
  hmdma_mdma_channel2_sw_0.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8001d34:	4ba4      	ldr	r3, [pc, #656]	@ (8001fc8 <MX_MDMA_Init+0x5cc>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	611a      	str	r2, [r3, #16]
  hmdma_mdma_channel2_sw_0.Init.SourceInc = MDMA_SRC_INC_HALFWORD;
 8001d3a:	4ba3      	ldr	r3, [pc, #652]	@ (8001fc8 <MX_MDMA_Init+0x5cc>)
 8001d3c:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8001d40:	615a      	str	r2, [r3, #20]
  hmdma_mdma_channel2_sw_0.Init.DestinationInc = MDMA_DEST_INC_WORD;
 8001d42:	4ba1      	ldr	r3, [pc, #644]	@ (8001fc8 <MX_MDMA_Init+0x5cc>)
 8001d44:	f640 0208 	movw	r2, #2056	@ 0x808
 8001d48:	619a      	str	r2, [r3, #24]
  hmdma_mdma_channel2_sw_0.Init.SourceDataSize = MDMA_SRC_DATASIZE_HALFWORD;
 8001d4a:	4b9f      	ldr	r3, [pc, #636]	@ (8001fc8 <MX_MDMA_Init+0x5cc>)
 8001d4c:	2210      	movs	r2, #16
 8001d4e:	61da      	str	r2, [r3, #28]
  hmdma_mdma_channel2_sw_0.Init.DestDataSize = MDMA_DEST_DATASIZE_HALFWORD;
 8001d50:	4b9d      	ldr	r3, [pc, #628]	@ (8001fc8 <MX_MDMA_Init+0x5cc>)
 8001d52:	2240      	movs	r2, #64	@ 0x40
 8001d54:	621a      	str	r2, [r3, #32]
  hmdma_mdma_channel2_sw_0.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001d56:	4b9c      	ldr	r3, [pc, #624]	@ (8001fc8 <MX_MDMA_Init+0x5cc>)
 8001d58:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d5c:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma_mdma_channel2_sw_0.Init.BufferTransferLength = AUDIO_SAMPLE_SIZE;
 8001d5e:	4b9a      	ldr	r3, [pc, #616]	@ (8001fc8 <MX_MDMA_Init+0x5cc>)
 8001d60:	2202      	movs	r2, #2
 8001d62:	629a      	str	r2, [r3, #40]	@ 0x28
  hmdma_mdma_channel2_sw_0.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8001d64:	4b98      	ldr	r3, [pc, #608]	@ (8001fc8 <MX_MDMA_Init+0x5cc>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	62da      	str	r2, [r3, #44]	@ 0x2c
  hmdma_mdma_channel2_sw_0.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8001d6a:	4b97      	ldr	r3, [pc, #604]	@ (8001fc8 <MX_MDMA_Init+0x5cc>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hmdma_mdma_channel2_sw_0.Init.SourceBlockAddressOffset = 0;
 8001d70:	4b95      	ldr	r3, [pc, #596]	@ (8001fc8 <MX_MDMA_Init+0x5cc>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	635a      	str	r2, [r3, #52]	@ 0x34
  hmdma_mdma_channel2_sw_0.Init.DestBlockAddressOffset = 0;
 8001d76:	4b94      	ldr	r3, [pc, #592]	@ (8001fc8 <MX_MDMA_Init+0x5cc>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_MDMA_Init(&hmdma_mdma_channel2_sw_0) != HAL_OK)
 8001d7c:	4892      	ldr	r0, [pc, #584]	@ (8001fc8 <MX_MDMA_Init+0x5cc>)
 8001d7e:	f004 fbec 	bl	800655a <HAL_MDMA_Init>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_MDMA_Init+0x390>
  {
    Error_Handler();
 8001d88:	f000 fd22 	bl	80027d0 <Error_Handler>
  }

  /* Initialize MDMA link node according to specified parameters */
  nodeConfig.Init.Request = MDMA_REQUEST_SW;
 8001d8c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001d90:	60bb      	str	r3, [r7, #8]
  nodeConfig.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 8001d92:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001d96:	60fb      	str	r3, [r7, #12]
  nodeConfig.Init.Priority = MDMA_PRIORITY_MEDIUM;
 8001d98:	2340      	movs	r3, #64	@ 0x40
 8001d9a:	613b      	str	r3, [r7, #16]
  nodeConfig.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	617b      	str	r3, [r7, #20]
  nodeConfig.Init.SourceInc = MDMA_SRC_INC_HALFWORD;
 8001da0:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8001da4:	61bb      	str	r3, [r7, #24]
  nodeConfig.Init.DestinationInc = MDMA_DEST_INC_WORD;
 8001da6:	f640 0308 	movw	r3, #2056	@ 0x808
 8001daa:	61fb      	str	r3, [r7, #28]
  nodeConfig.Init.SourceDataSize = MDMA_SRC_DATASIZE_HALFWORD;
 8001dac:	2310      	movs	r3, #16
 8001dae:	623b      	str	r3, [r7, #32]
  nodeConfig.Init.DestDataSize = MDMA_DEST_DATASIZE_HALFWORD;
 8001db0:	2340      	movs	r3, #64	@ 0x40
 8001db2:	627b      	str	r3, [r7, #36]	@ 0x24
  nodeConfig.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001db4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001db8:	62bb      	str	r3, [r7, #40]	@ 0x28
  nodeConfig.Init.BufferTransferLength = AUDIO_SAMPLE_SIZE;
 8001dba:	2302      	movs	r3, #2
 8001dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  nodeConfig.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	633b      	str	r3, [r7, #48]	@ 0x30
  nodeConfig.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	637b      	str	r3, [r7, #52]	@ 0x34
  nodeConfig.Init.SourceBlockAddressOffset = 0;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	63bb      	str	r3, [r7, #56]	@ 0x38
  nodeConfig.Init.DestBlockAddressOffset = 0;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  nodeConfig.PostRequestMaskAddress = 0;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	653b      	str	r3, [r7, #80]	@ 0x50
  nodeConfig.PostRequestMaskData = 0;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	657b      	str	r3, [r7, #84]	@ 0x54
  nodeConfig.SrcAddress = (uint32_t) &audio_buffer_tx_ch1_r[0];
 8001dd6:	4b7e      	ldr	r3, [pc, #504]	@ (8001fd0 <MX_MDMA_Init+0x5d4>)
 8001dd8:	643b      	str	r3, [r7, #64]	@ 0x40
  nodeConfig.DstAddress = (uint32_t) &sai_buffer_tx[1];
 8001dda:	4b7e      	ldr	r3, [pc, #504]	@ (8001fd4 <MX_MDMA_Init+0x5d8>)
 8001ddc:	647b      	str	r3, [r7, #68]	@ 0x44
  nodeConfig.BlockDataLength = AUDIO_BUFFER_SIZE_HALF;
 8001dde:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001de2:	64bb      	str	r3, [r7, #72]	@ 0x48
  nodeConfig.BlockCount = 1;
 8001de4:	2301      	movs	r3, #1
 8001de6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_MDMA_LinkedList_CreateNode(&node_mdma_channel2_sw_1, &nodeConfig) != HAL_OK)
 8001de8:	f107 0308 	add.w	r3, r7, #8
 8001dec:	4619      	mov	r1, r3
 8001dee:	487a      	ldr	r0, [pc, #488]	@ (8001fd8 <MX_MDMA_Init+0x5dc>)
 8001df0:	f004 fc5a 	bl	80066a8 <HAL_MDMA_LinkedList_CreateNode>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <MX_MDMA_Init+0x402>
  {
    Error_Handler();
 8001dfa:	f000 fce9 	bl	80027d0 <Error_Handler>
  }
  /* USER CODE BEGIN mdma_channel2_sw_1 */
  HAL_MDMA_RegisterCallback(&hmdma_mdma_channel2_sw_0, HAL_MDMA_XFER_BLOCKCPLT_CB_ID, MDMA_TxXferBlockCpltCallback);
 8001dfe:	4a77      	ldr	r2, [pc, #476]	@ (8001fdc <MX_MDMA_Init+0x5e0>)
 8001e00:	2102      	movs	r1, #2
 8001e02:	4871      	ldr	r0, [pc, #452]	@ (8001fc8 <MX_MDMA_Init+0x5cc>)
 8001e04:	f004 fbf6 	bl	80065f4 <HAL_MDMA_RegisterCallback>
  HAL_MDMA_RegisterCallback(&hmdma_mdma_channel2_sw_0, HAL_MDMA_XFER_ERROR_CB_ID, MDMA_TxErrorCallback);
 8001e08:	4a75      	ldr	r2, [pc, #468]	@ (8001fe0 <MX_MDMA_Init+0x5e4>)
 8001e0a:	2104      	movs	r1, #4
 8001e0c:	486e      	ldr	r0, [pc, #440]	@ (8001fc8 <MX_MDMA_Init+0x5cc>)
 8001e0e:	f004 fbf1 	bl	80065f4 <HAL_MDMA_RegisterCallback>
  /* USER CODE END mdma_channel2_sw_1 */

  /* Connect a node to the linked list */
  if (HAL_MDMA_LinkedList_AddNode(&hmdma_mdma_channel2_sw_0, &node_mdma_channel2_sw_1, 0) != HAL_OK)
 8001e12:	2200      	movs	r2, #0
 8001e14:	4970      	ldr	r1, [pc, #448]	@ (8001fd8 <MX_MDMA_Init+0x5dc>)
 8001e16:	486c      	ldr	r0, [pc, #432]	@ (8001fc8 <MX_MDMA_Init+0x5cc>)
 8001e18:	f004 fd22 	bl	8006860 <HAL_MDMA_LinkedList_AddNode>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <MX_MDMA_Init+0x42a>
  {
    Error_Handler();
 8001e22:	f000 fcd5 	bl	80027d0 <Error_Handler>
  }

  /* Initialize MDMA link node according to specified parameters */
  nodeConfig.Init.Request = MDMA_REQUEST_SW;
 8001e26:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001e2a:	60bb      	str	r3, [r7, #8]
  nodeConfig.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 8001e2c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001e30:	60fb      	str	r3, [r7, #12]
  nodeConfig.Init.Priority = MDMA_PRIORITY_MEDIUM;
 8001e32:	2340      	movs	r3, #64	@ 0x40
 8001e34:	613b      	str	r3, [r7, #16]
  nodeConfig.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8001e36:	2300      	movs	r3, #0
 8001e38:	617b      	str	r3, [r7, #20]
  nodeConfig.Init.SourceInc = MDMA_SRC_INC_HALFWORD;
 8001e3a:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8001e3e:	61bb      	str	r3, [r7, #24]
  nodeConfig.Init.DestinationInc = MDMA_DEST_INC_WORD;
 8001e40:	f640 0308 	movw	r3, #2056	@ 0x808
 8001e44:	61fb      	str	r3, [r7, #28]
  nodeConfig.Init.SourceDataSize = MDMA_SRC_DATASIZE_HALFWORD;
 8001e46:	2310      	movs	r3, #16
 8001e48:	623b      	str	r3, [r7, #32]
  nodeConfig.Init.DestDataSize = MDMA_DEST_DATASIZE_HALFWORD;
 8001e4a:	2340      	movs	r3, #64	@ 0x40
 8001e4c:	627b      	str	r3, [r7, #36]	@ 0x24
  nodeConfig.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001e4e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e52:	62bb      	str	r3, [r7, #40]	@ 0x28
  nodeConfig.Init.BufferTransferLength = AUDIO_SAMPLE_SIZE;
 8001e54:	2302      	movs	r3, #2
 8001e56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  nodeConfig.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	633b      	str	r3, [r7, #48]	@ 0x30
  nodeConfig.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	637b      	str	r3, [r7, #52]	@ 0x34
  nodeConfig.Init.SourceBlockAddressOffset = 0;
 8001e60:	2300      	movs	r3, #0
 8001e62:	63bb      	str	r3, [r7, #56]	@ 0x38
  nodeConfig.Init.DestBlockAddressOffset = 0;
 8001e64:	2300      	movs	r3, #0
 8001e66:	63fb      	str	r3, [r7, #60]	@ 0x3c
  nodeConfig.PostRequestMaskAddress = 0;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	653b      	str	r3, [r7, #80]	@ 0x50
  nodeConfig.PostRequestMaskData = 0;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	657b      	str	r3, [r7, #84]	@ 0x54
  nodeConfig.SrcAddress = (uint32_t) &audio_buffer_tx_ch1_l[AUDIO_BUFFER_LENGTH_HALF];
 8001e70:	4b5c      	ldr	r3, [pc, #368]	@ (8001fe4 <MX_MDMA_Init+0x5e8>)
 8001e72:	643b      	str	r3, [r7, #64]	@ 0x40
  nodeConfig.DstAddress = (uint32_t)(uintptr_t) &sai_buffer_tx[SAI_BUFFER_LENGTH_HALF];
 8001e74:	4b5c      	ldr	r3, [pc, #368]	@ (8001fe8 <MX_MDMA_Init+0x5ec>)
 8001e76:	647b      	str	r3, [r7, #68]	@ 0x44
  nodeConfig.BlockDataLength = AUDIO_BUFFER_SIZE_HALF;
 8001e78:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e7c:	64bb      	str	r3, [r7, #72]	@ 0x48
  nodeConfig.BlockCount = 1;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_MDMA_LinkedList_CreateNode(&node_mdma_channel2_sw_2, &nodeConfig) != HAL_OK)
 8001e82:	f107 0308 	add.w	r3, r7, #8
 8001e86:	4619      	mov	r1, r3
 8001e88:	4858      	ldr	r0, [pc, #352]	@ (8001fec <MX_MDMA_Init+0x5f0>)
 8001e8a:	f004 fc0d 	bl	80066a8 <HAL_MDMA_LinkedList_CreateNode>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <MX_MDMA_Init+0x49c>
  {
    Error_Handler();
 8001e94:	f000 fc9c 	bl	80027d0 <Error_Handler>
  /* USER CODE BEGIN mdma_channel2_sw_2 */

  /* USER CODE END mdma_channel2_sw_2 */

  /* Connect a node to the linked list */
  if (HAL_MDMA_LinkedList_AddNode(&hmdma_mdma_channel2_sw_0, &node_mdma_channel2_sw_2, 0) != HAL_OK)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	4954      	ldr	r1, [pc, #336]	@ (8001fec <MX_MDMA_Init+0x5f0>)
 8001e9c:	484a      	ldr	r0, [pc, #296]	@ (8001fc8 <MX_MDMA_Init+0x5cc>)
 8001e9e:	f004 fcdf 	bl	8006860 <HAL_MDMA_LinkedList_AddNode>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <MX_MDMA_Init+0x4b0>
  {
    Error_Handler();
 8001ea8:	f000 fc92 	bl	80027d0 <Error_Handler>
  }

  /* Initialize MDMA link node according to specified parameters */
  nodeConfig.Init.Request = MDMA_REQUEST_SW;
 8001eac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001eb0:	60bb      	str	r3, [r7, #8]
  nodeConfig.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 8001eb2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001eb6:	60fb      	str	r3, [r7, #12]
  nodeConfig.Init.Priority = MDMA_PRIORITY_MEDIUM;
 8001eb8:	2340      	movs	r3, #64	@ 0x40
 8001eba:	613b      	str	r3, [r7, #16]
  nodeConfig.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	617b      	str	r3, [r7, #20]
  nodeConfig.Init.SourceInc = MDMA_SRC_INC_HALFWORD;
 8001ec0:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8001ec4:	61bb      	str	r3, [r7, #24]
  nodeConfig.Init.DestinationInc = MDMA_DEST_INC_WORD;
 8001ec6:	f640 0308 	movw	r3, #2056	@ 0x808
 8001eca:	61fb      	str	r3, [r7, #28]
  nodeConfig.Init.SourceDataSize = MDMA_SRC_DATASIZE_HALFWORD;
 8001ecc:	2310      	movs	r3, #16
 8001ece:	623b      	str	r3, [r7, #32]
  nodeConfig.Init.DestDataSize = MDMA_DEST_DATASIZE_HALFWORD;
 8001ed0:	2340      	movs	r3, #64	@ 0x40
 8001ed2:	627b      	str	r3, [r7, #36]	@ 0x24
  nodeConfig.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001ed4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ed8:	62bb      	str	r3, [r7, #40]	@ 0x28
  nodeConfig.Init.BufferTransferLength = AUDIO_SAMPLE_SIZE;
 8001eda:	2302      	movs	r3, #2
 8001edc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  nodeConfig.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	633b      	str	r3, [r7, #48]	@ 0x30
  nodeConfig.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	637b      	str	r3, [r7, #52]	@ 0x34
  nodeConfig.Init.SourceBlockAddressOffset = 0;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	63bb      	str	r3, [r7, #56]	@ 0x38
  nodeConfig.Init.DestBlockAddressOffset = 0;
 8001eea:	2300      	movs	r3, #0
 8001eec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  nodeConfig.PostRequestMaskAddress = 0;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	653b      	str	r3, [r7, #80]	@ 0x50
  nodeConfig.PostRequestMaskData = 0;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	657b      	str	r3, [r7, #84]	@ 0x54
  nodeConfig.SrcAddress = (uint32_t) &audio_buffer_tx_ch1_r[AUDIO_BUFFER_LENGTH_HALF];
 8001ef6:	4b3e      	ldr	r3, [pc, #248]	@ (8001ff0 <MX_MDMA_Init+0x5f4>)
 8001ef8:	643b      	str	r3, [r7, #64]	@ 0x40
  nodeConfig.DstAddress = (uint32_t)(uintptr_t)  &sai_buffer_tx[SAI_BUFFER_LENGTH_HALF+1];
 8001efa:	4b3e      	ldr	r3, [pc, #248]	@ (8001ff4 <MX_MDMA_Init+0x5f8>)
 8001efc:	647b      	str	r3, [r7, #68]	@ 0x44
  nodeConfig.BlockDataLength = AUDIO_BUFFER_SIZE_HALF;
 8001efe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f02:	64bb      	str	r3, [r7, #72]	@ 0x48
  nodeConfig.BlockCount = 1;
 8001f04:	2301      	movs	r3, #1
 8001f06:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_MDMA_LinkedList_CreateNode(&node_mdma_channel2_sw_3, &nodeConfig) != HAL_OK)
 8001f08:	f107 0308 	add.w	r3, r7, #8
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	483a      	ldr	r0, [pc, #232]	@ (8001ff8 <MX_MDMA_Init+0x5fc>)
 8001f10:	f004 fbca 	bl	80066a8 <HAL_MDMA_LinkedList_CreateNode>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <MX_MDMA_Init+0x522>
  {
    Error_Handler();
 8001f1a:	f000 fc59 	bl	80027d0 <Error_Handler>
  /* USER CODE BEGIN mdma_channel2_sw_3 */

  /* USER CODE END mdma_channel2_sw_3 */

  /* Connect a node to the linked list */
  if (HAL_MDMA_LinkedList_AddNode(&hmdma_mdma_channel2_sw_0, &node_mdma_channel2_sw_3, 0) != HAL_OK)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	4935      	ldr	r1, [pc, #212]	@ (8001ff8 <MX_MDMA_Init+0x5fc>)
 8001f22:	4829      	ldr	r0, [pc, #164]	@ (8001fc8 <MX_MDMA_Init+0x5cc>)
 8001f24:	f004 fc9c 	bl	8006860 <HAL_MDMA_LinkedList_AddNode>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <MX_MDMA_Init+0x536>
  {
    Error_Handler();
 8001f2e:	f000 fc4f 	bl	80027d0 <Error_Handler>
  }

  /* Initialize MDMA link node according to specified parameters */
  nodeConfig.Init.Request = MDMA_REQUEST_SW;
 8001f32:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001f36:	60bb      	str	r3, [r7, #8]
  nodeConfig.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 8001f38:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001f3c:	60fb      	str	r3, [r7, #12]
  nodeConfig.Init.Priority = MDMA_PRIORITY_MEDIUM;
 8001f3e:	2340      	movs	r3, #64	@ 0x40
 8001f40:	613b      	str	r3, [r7, #16]
  nodeConfig.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8001f42:	2300      	movs	r3, #0
 8001f44:	617b      	str	r3, [r7, #20]
  nodeConfig.Init.SourceInc = MDMA_SRC_INC_HALFWORD;
 8001f46:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8001f4a:	61bb      	str	r3, [r7, #24]
  nodeConfig.Init.DestinationInc = MDMA_DEST_INC_WORD;
 8001f4c:	f640 0308 	movw	r3, #2056	@ 0x808
 8001f50:	61fb      	str	r3, [r7, #28]
  nodeConfig.Init.SourceDataSize = MDMA_SRC_DATASIZE_HALFWORD;
 8001f52:	2310      	movs	r3, #16
 8001f54:	623b      	str	r3, [r7, #32]
  nodeConfig.Init.DestDataSize = MDMA_DEST_DATASIZE_HALFWORD;
 8001f56:	2340      	movs	r3, #64	@ 0x40
 8001f58:	627b      	str	r3, [r7, #36]	@ 0x24
  nodeConfig.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001f5a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  nodeConfig.Init.BufferTransferLength = AUDIO_SAMPLE_SIZE;
 8001f60:	2302      	movs	r3, #2
 8001f62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  nodeConfig.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8001f64:	2300      	movs	r3, #0
 8001f66:	633b      	str	r3, [r7, #48]	@ 0x30
  nodeConfig.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	637b      	str	r3, [r7, #52]	@ 0x34
  nodeConfig.Init.SourceBlockAddressOffset = 0;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	63bb      	str	r3, [r7, #56]	@ 0x38
  nodeConfig.Init.DestBlockAddressOffset = 0;
 8001f70:	2300      	movs	r3, #0
 8001f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  nodeConfig.PostRequestMaskAddress = 0;
 8001f74:	2300      	movs	r3, #0
 8001f76:	653b      	str	r3, [r7, #80]	@ 0x50
  nodeConfig.PostRequestMaskData = 0;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	657b      	str	r3, [r7, #84]	@ 0x54
  nodeConfig.SrcAddress = (uint32_t) &audio_buffer_tx_ch1_l[0];
 8001f7c:	4b1f      	ldr	r3, [pc, #124]	@ (8001ffc <MX_MDMA_Init+0x600>)
 8001f7e:	643b      	str	r3, [r7, #64]	@ 0x40
  nodeConfig.DstAddress = (uint32_t) &sai_buffer_tx[0];
 8001f80:	4b1f      	ldr	r3, [pc, #124]	@ (8002000 <MX_MDMA_Init+0x604>)
 8001f82:	647b      	str	r3, [r7, #68]	@ 0x44
  nodeConfig.BlockDataLength = AUDIO_BUFFER_SIZE_HALF;
 8001f84:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f88:	64bb      	str	r3, [r7, #72]	@ 0x48
  nodeConfig.BlockCount = 1;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_MDMA_LinkedList_CreateNode(&node_mdma_channel2_sw_4, &nodeConfig) != HAL_OK)
 8001f8e:	f107 0308 	add.w	r3, r7, #8
 8001f92:	4619      	mov	r1, r3
 8001f94:	481b      	ldr	r0, [pc, #108]	@ (8002004 <MX_MDMA_Init+0x608>)
 8001f96:	f004 fb87 	bl	80066a8 <HAL_MDMA_LinkedList_CreateNode>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <MX_MDMA_Init+0x5a8>
  {
    Error_Handler();
 8001fa0:	f000 fc16 	bl	80027d0 <Error_Handler>
  /* USER CODE BEGIN mdma_channel2_sw_4 */

  /* USER CODE END mdma_channel2_sw_4 */

  /* Connect a node to the linked list */
  if (HAL_MDMA_LinkedList_AddNode(&hmdma_mdma_channel2_sw_0, &node_mdma_channel2_sw_4, 0) != HAL_OK)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	4917      	ldr	r1, [pc, #92]	@ (8002004 <MX_MDMA_Init+0x608>)
 8001fa8:	4807      	ldr	r0, [pc, #28]	@ (8001fc8 <MX_MDMA_Init+0x5cc>)
 8001faa:	f004 fc59 	bl	8006860 <HAL_MDMA_LinkedList_AddNode>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <MX_MDMA_Init+0x5bc>
  {
    Error_Handler();
 8001fb4:	f000 fc0c 	bl	80027d0 <Error_Handler>
  }

  /* Make the linked list circular by connecting the last node to the first */
  if (HAL_MDMA_LinkedList_EnableCircularMode(&hmdma_mdma_channel2_sw_0) != HAL_OK)
 8001fb8:	4803      	ldr	r0, [pc, #12]	@ (8001fc8 <MX_MDMA_Init+0x5cc>)
 8001fba:	f004 fd15 	bl	80069e8 <HAL_MDMA_LinkedList_EnableCircularMode>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	e021      	b.n	8002008 <MX_MDMA_Init+0x60c>
 8001fc4:	24000344 	.word	0x24000344
 8001fc8:	24000450 	.word	0x24000450
 8001fcc:	520000c0 	.word	0x520000c0
 8001fd0:	20000600 	.word	0x20000600
 8001fd4:	24000982 	.word	0x24000982
 8001fd8:	240004c0 	.word	0x240004c0
 8001fdc:	0800245d 	.word	0x0800245d
 8001fe0:	080025c1 	.word	0x080025c1
 8001fe4:	20000500 	.word	0x20000500
 8001fe8:	24000b80 	.word	0x24000b80
 8001fec:	240004e8 	.word	0x240004e8
 8001ff0:	20000700 	.word	0x20000700
 8001ff4:	24000b82 	.word	0x24000b82
 8001ff8:	24000510 	.word	0x24000510
 8001ffc:	20000400 	.word	0x20000400
 8002000:	24000980 	.word	0x24000980
 8002004:	24000538 	.word	0x24000538
 8002008:	d001      	beq.n	800200e <MX_MDMA_Init+0x612>
  {
    Error_Handler();
 800200a:	f000 fbe1 	bl	80027d0 <Error_Handler>
  }

  /* MDMA interrupt initialization */
  /* MDMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MDMA_IRQn, 0, 0);
 800200e:	2200      	movs	r2, #0
 8002010:	2100      	movs	r1, #0
 8002012:	207a      	movs	r0, #122	@ 0x7a
 8002014:	f001 f873 	bl	80030fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8002018:	207a      	movs	r0, #122	@ 0x7a
 800201a:	f001 f88a 	bl	8003132 <HAL_NVIC_EnableIRQ>

}
 800201e:	bf00      	nop
 8002020:	3758      	adds	r7, #88	@ 0x58
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop

08002028 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b08c      	sub	sp, #48	@ 0x30
 800202c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800202e:	f107 031c 	add.w	r3, r7, #28
 8002032:	2200      	movs	r2, #0
 8002034:	601a      	str	r2, [r3, #0]
 8002036:	605a      	str	r2, [r3, #4]
 8002038:	609a      	str	r2, [r3, #8]
 800203a:	60da      	str	r2, [r3, #12]
 800203c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800203e:	4b63      	ldr	r3, [pc, #396]	@ (80021cc <MX_GPIO_Init+0x1a4>)
 8002040:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002044:	4a61      	ldr	r2, [pc, #388]	@ (80021cc <MX_GPIO_Init+0x1a4>)
 8002046:	f043 0310 	orr.w	r3, r3, #16
 800204a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800204e:	4b5f      	ldr	r3, [pc, #380]	@ (80021cc <MX_GPIO_Init+0x1a4>)
 8002050:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002054:	f003 0310 	and.w	r3, r3, #16
 8002058:	61bb      	str	r3, [r7, #24]
 800205a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800205c:	4b5b      	ldr	r3, [pc, #364]	@ (80021cc <MX_GPIO_Init+0x1a4>)
 800205e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002062:	4a5a      	ldr	r2, [pc, #360]	@ (80021cc <MX_GPIO_Init+0x1a4>)
 8002064:	f043 0304 	orr.w	r3, r3, #4
 8002068:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800206c:	4b57      	ldr	r3, [pc, #348]	@ (80021cc <MX_GPIO_Init+0x1a4>)
 800206e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002072:	f003 0304 	and.w	r3, r3, #4
 8002076:	617b      	str	r3, [r7, #20]
 8002078:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800207a:	4b54      	ldr	r3, [pc, #336]	@ (80021cc <MX_GPIO_Init+0x1a4>)
 800207c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002080:	4a52      	ldr	r2, [pc, #328]	@ (80021cc <MX_GPIO_Init+0x1a4>)
 8002082:	f043 0301 	orr.w	r3, r3, #1
 8002086:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800208a:	4b50      	ldr	r3, [pc, #320]	@ (80021cc <MX_GPIO_Init+0x1a4>)
 800208c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002090:	f003 0301 	and.w	r3, r3, #1
 8002094:	613b      	str	r3, [r7, #16]
 8002096:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002098:	4b4c      	ldr	r3, [pc, #304]	@ (80021cc <MX_GPIO_Init+0x1a4>)
 800209a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800209e:	4a4b      	ldr	r2, [pc, #300]	@ (80021cc <MX_GPIO_Init+0x1a4>)
 80020a0:	f043 0302 	orr.w	r3, r3, #2
 80020a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020a8:	4b48      	ldr	r3, [pc, #288]	@ (80021cc <MX_GPIO_Init+0x1a4>)
 80020aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	60fb      	str	r3, [r7, #12]
 80020b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020b6:	4b45      	ldr	r3, [pc, #276]	@ (80021cc <MX_GPIO_Init+0x1a4>)
 80020b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020bc:	4a43      	ldr	r2, [pc, #268]	@ (80021cc <MX_GPIO_Init+0x1a4>)
 80020be:	f043 0308 	orr.w	r3, r3, #8
 80020c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020c6:	4b41      	ldr	r3, [pc, #260]	@ (80021cc <MX_GPIO_Init+0x1a4>)
 80020c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020cc:	f003 0308 	and.w	r3, r3, #8
 80020d0:	60bb      	str	r3, [r7, #8]
 80020d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80020d4:	4b3d      	ldr	r3, [pc, #244]	@ (80021cc <MX_GPIO_Init+0x1a4>)
 80020d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020da:	4a3c      	ldr	r2, [pc, #240]	@ (80021cc <MX_GPIO_Init+0x1a4>)
 80020dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80020e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020e4:	4b39      	ldr	r3, [pc, #228]	@ (80021cc <MX_GPIO_Init+0x1a4>)
 80020e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020ee:	607b      	str	r3, [r7, #4]
 80020f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_RESET);
 80020f2:	2200      	movs	r2, #0
 80020f4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80020f8:	4835      	ldr	r0, [pc, #212]	@ (80021d0 <MX_GPIO_Init+0x1a8>)
 80020fa:	f003 fbc3 	bl	8005884 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80020fe:	2332      	movs	r3, #50	@ 0x32
 8002100:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002102:	2302      	movs	r3, #2
 8002104:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002106:	2300      	movs	r3, #0
 8002108:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210a:	2300      	movs	r3, #0
 800210c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800210e:	230b      	movs	r3, #11
 8002110:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002112:	f107 031c 	add.w	r3, r7, #28
 8002116:	4619      	mov	r1, r3
 8002118:	482e      	ldr	r0, [pc, #184]	@ (80021d4 <MX_GPIO_Init+0x1ac>)
 800211a:	f003 fa03 	bl	8005524 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800211e:	2386      	movs	r3, #134	@ 0x86
 8002120:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002122:	2302      	movs	r3, #2
 8002124:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002126:	2300      	movs	r3, #0
 8002128:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212a:	2300      	movs	r3, #0
 800212c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800212e:	230b      	movs	r3, #11
 8002130:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002132:	f107 031c 	add.w	r3, r7, #28
 8002136:	4619      	mov	r1, r3
 8002138:	4827      	ldr	r0, [pc, #156]	@ (80021d8 <MX_GPIO_Init+0x1b0>)
 800213a:	f003 f9f3 	bl	8005524 <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_Pin */
  GPIO_InitStruct.Pin = RESET_Pin;
 800213e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002142:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002144:	2301      	movs	r3, #1
 8002146:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002148:	2300      	movs	r3, #0
 800214a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800214c:	2303      	movs	r3, #3
 800214e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 8002150:	f107 031c 	add.w	r3, r7, #28
 8002154:	4619      	mov	r1, r3
 8002156:	481e      	ldr	r0, [pc, #120]	@ (80021d0 <MX_GPIO_Init+0x1a8>)
 8002158:	f003 f9e4 	bl	8005524 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800215c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002160:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002162:	2302      	movs	r3, #2
 8002164:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002166:	2300      	movs	r3, #0
 8002168:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800216a:	2300      	movs	r3, #0
 800216c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800216e:	230b      	movs	r3, #11
 8002170:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002172:	f107 031c 	add.w	r3, r7, #28
 8002176:	4619      	mov	r1, r3
 8002178:	4818      	ldr	r0, [pc, #96]	@ (80021dc <MX_GPIO_Init+0x1b4>)
 800217a:	f003 f9d3 	bl	8005524 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800217e:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8002182:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002184:	2302      	movs	r3, #2
 8002186:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002188:	2300      	movs	r3, #0
 800218a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800218c:	2300      	movs	r3, #0
 800218e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002190:	230a      	movs	r3, #10
 8002192:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002194:	f107 031c 	add.w	r3, r7, #28
 8002198:	4619      	mov	r1, r3
 800219a:	480f      	ldr	r0, [pc, #60]	@ (80021d8 <MX_GPIO_Init+0x1b0>)
 800219c:	f003 f9c2 	bl	8005524 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80021a0:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80021a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a6:	2302      	movs	r3, #2
 80021a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021aa:	2300      	movs	r3, #0
 80021ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ae:	2300      	movs	r3, #0
 80021b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80021b2:	230b      	movs	r3, #11
 80021b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80021b6:	f107 031c 	add.w	r3, r7, #28
 80021ba:	4619      	mov	r1, r3
 80021bc:	4808      	ldr	r0, [pc, #32]	@ (80021e0 <MX_GPIO_Init+0x1b8>)
 80021be:	f003 f9b1 	bl	8005524 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80021c2:	bf00      	nop
 80021c4:	3730      	adds	r7, #48	@ 0x30
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	58024400 	.word	0x58024400
 80021d0:	58021000 	.word	0x58021000
 80021d4:	58020800 	.word	0x58020800
 80021d8:	58020000 	.word	0x58020000
 80021dc:	58020400 	.word	0x58020400
 80021e0:	58021800 	.word	0x58021800

080021e4 <HAL_SAI_RxHalfCpltCallback>:

/* USER CODE BEGIN 4 */
//TODO Adress/Size aligment error, Read error
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai) {
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
	CLEAR_BIT(sai_status, SAI_STATUS_RX_HALF_PENDING);
 80021ec:	4b1e      	ldr	r3, [pc, #120]	@ (8002268 <HAL_SAI_RxHalfCpltCallback+0x84>)
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	f023 0301 	bic.w	r3, r3, #1
 80021f6:	b2da      	uxtb	r2, r3
 80021f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002268 <HAL_SAI_RxHalfCpltCallback+0x84>)
 80021fa:	701a      	strb	r2, [r3, #0]
	SET_BIT(sai_status, SAI_STATUS_RX_HALF_CPLT);
 80021fc:	4b1a      	ldr	r3, [pc, #104]	@ (8002268 <HAL_SAI_RxHalfCpltCallback+0x84>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	b2db      	uxtb	r3, r3
 8002202:	f043 0302 	orr.w	r3, r3, #2
 8002206:	b2da      	uxtb	r2, r3
 8002208:	4b17      	ldr	r3, [pc, #92]	@ (8002268 <HAL_SAI_RxHalfCpltCallback+0x84>)
 800220a:	701a      	strb	r2, [r3, #0]
	CLEAR_BIT(sai_status, SAI_STATUS_RX_FULL_CPLT);
 800220c:	4b16      	ldr	r3, [pc, #88]	@ (8002268 <HAL_SAI_RxHalfCpltCallback+0x84>)
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	b2db      	uxtb	r3, r3
 8002212:	f023 0308 	bic.w	r3, r3, #8
 8002216:	b2da      	uxtb	r2, r3
 8002218:	4b13      	ldr	r3, [pc, #76]	@ (8002268 <HAL_SAI_RxHalfCpltCallback+0x84>)
 800221a:	701a      	strb	r2, [r3, #0]
	SET_BIT(sai_status, SAI_STATUS_RX_FULL_PENDING);
 800221c:	4b12      	ldr	r3, [pc, #72]	@ (8002268 <HAL_SAI_RxHalfCpltCallback+0x84>)
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	b2db      	uxtb	r3, r3
 8002222:	f043 0304 	orr.w	r3, r3, #4
 8002226:	b2da      	uxtb	r2, r3
 8002228:	4b0f      	ldr	r3, [pc, #60]	@ (8002268 <HAL_SAI_RxHalfCpltCallback+0x84>)
 800222a:	701a      	strb	r2, [r3, #0]

	CLEAR_BIT(audio_rx_status, AUDIO_STATUS_HALF_PART);
 800222c:	4b0f      	ldr	r3, [pc, #60]	@ (800226c <HAL_SAI_RxHalfCpltCallback+0x88>)
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	b2db      	uxtb	r3, r3
 8002232:	f023 030f 	bic.w	r3, r3, #15
 8002236:	b2da      	uxtb	r2, r3
 8002238:	4b0c      	ldr	r3, [pc, #48]	@ (800226c <HAL_SAI_RxHalfCpltCallback+0x88>)
 800223a:	701a      	strb	r2, [r3, #0]
	CLEAR_BIT(audio_dsp_status, AUDIO_STATUS_HALF_PART);
 800223c:	4b0c      	ldr	r3, [pc, #48]	@ (8002270 <HAL_SAI_RxHalfCpltCallback+0x8c>)
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	b2db      	uxtb	r3, r3
 8002242:	f023 030f 	bic.w	r3, r3, #15
 8002246:	b2da      	uxtb	r2, r3
 8002248:	4b09      	ldr	r3, [pc, #36]	@ (8002270 <HAL_SAI_RxHalfCpltCallback+0x8c>)
 800224a:	701a      	strb	r2, [r3, #0]
	CLEAR_BIT(audio_tx_status, AUDIO_STATUS_HALF_PART);
 800224c:	4b09      	ldr	r3, [pc, #36]	@ (8002274 <HAL_SAI_RxHalfCpltCallback+0x90>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	b2db      	uxtb	r3, r3
 8002252:	f023 030f 	bic.w	r3, r3, #15
 8002256:	b2da      	uxtb	r2, r3
 8002258:	4b06      	ldr	r3, [pc, #24]	@ (8002274 <HAL_SAI_RxHalfCpltCallback+0x90>)
 800225a:	701a      	strb	r2, [r3, #0]


}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr
 8002268:	24000d83 	.word	0x24000d83
 800226c:	24000d80 	.word	0x24000d80
 8002270:	24000d81 	.word	0x24000d81
 8002274:	24000d82 	.word	0x24000d82

08002278 <HAL_SAI_RxCpltCallback>:

void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai) {
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
	CLEAR_BIT(sai_status, SAI_STATUS_RX_FULL_PENDING);
 8002280:	4b1e      	ldr	r3, [pc, #120]	@ (80022fc <HAL_SAI_RxCpltCallback+0x84>)
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	b2db      	uxtb	r3, r3
 8002286:	f023 0304 	bic.w	r3, r3, #4
 800228a:	b2da      	uxtb	r2, r3
 800228c:	4b1b      	ldr	r3, [pc, #108]	@ (80022fc <HAL_SAI_RxCpltCallback+0x84>)
 800228e:	701a      	strb	r2, [r3, #0]
	SET_BIT(sai_status, SAI_STATUS_RX_FULL_CPLT);
 8002290:	4b1a      	ldr	r3, [pc, #104]	@ (80022fc <HAL_SAI_RxCpltCallback+0x84>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	b2db      	uxtb	r3, r3
 8002296:	f043 0308 	orr.w	r3, r3, #8
 800229a:	b2da      	uxtb	r2, r3
 800229c:	4b17      	ldr	r3, [pc, #92]	@ (80022fc <HAL_SAI_RxCpltCallback+0x84>)
 800229e:	701a      	strb	r2, [r3, #0]
	CLEAR_BIT(sai_status, SAI_STATUS_RX_HALF_CPLT);
 80022a0:	4b16      	ldr	r3, [pc, #88]	@ (80022fc <HAL_SAI_RxCpltCallback+0x84>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	f023 0302 	bic.w	r3, r3, #2
 80022aa:	b2da      	uxtb	r2, r3
 80022ac:	4b13      	ldr	r3, [pc, #76]	@ (80022fc <HAL_SAI_RxCpltCallback+0x84>)
 80022ae:	701a      	strb	r2, [r3, #0]
	SET_BIT(sai_status, SAI_STATUS_RX_HALF_PENDING);
 80022b0:	4b12      	ldr	r3, [pc, #72]	@ (80022fc <HAL_SAI_RxCpltCallback+0x84>)
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	f043 0301 	orr.w	r3, r3, #1
 80022ba:	b2da      	uxtb	r2, r3
 80022bc:	4b0f      	ldr	r3, [pc, #60]	@ (80022fc <HAL_SAI_RxCpltCallback+0x84>)
 80022be:	701a      	strb	r2, [r3, #0]

	CLEAR_BIT(audio_rx_status, AUDIO_STATUS_FULL);
 80022c0:	4b0f      	ldr	r3, [pc, #60]	@ (8002300 <HAL_SAI_RxCpltCallback+0x88>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	f003 030f 	and.w	r3, r3, #15
 80022ca:	b2da      	uxtb	r2, r3
 80022cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002300 <HAL_SAI_RxCpltCallback+0x88>)
 80022ce:	701a      	strb	r2, [r3, #0]
	CLEAR_BIT(audio_dsp_status, AUDIO_STATUS_FULL);
 80022d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002304 <HAL_SAI_RxCpltCallback+0x8c>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	f003 030f 	and.w	r3, r3, #15
 80022da:	b2da      	uxtb	r2, r3
 80022dc:	4b09      	ldr	r3, [pc, #36]	@ (8002304 <HAL_SAI_RxCpltCallback+0x8c>)
 80022de:	701a      	strb	r2, [r3, #0]
	CLEAR_BIT(audio_tx_status, AUDIO_STATUS_FULL);
 80022e0:	4b09      	ldr	r3, [pc, #36]	@ (8002308 <HAL_SAI_RxCpltCallback+0x90>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	f003 030f 	and.w	r3, r3, #15
 80022ea:	b2da      	uxtb	r2, r3
 80022ec:	4b06      	ldr	r3, [pc, #24]	@ (8002308 <HAL_SAI_RxCpltCallback+0x90>)
 80022ee:	701a      	strb	r2, [r3, #0]


}
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr
 80022fc:	24000d83 	.word	0x24000d83
 8002300:	24000d80 	.word	0x24000d80
 8002304:	24000d81 	.word	0x24000d81
 8002308:	24000d82 	.word	0x24000d82

0800230c <MDMA_RxXferBlockCpltCallback>:
////	}
//	//CLEAR_BIT(audio_tx_status, AUDIO_STATUS_HALF_PART);
//}

void MDMA_RxXferBlockCpltCallback(MDMA_HandleTypeDef *_hdma)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
	transfercounter++;
 8002314:	4b4f      	ldr	r3, [pc, #316]	@ (8002454 <MDMA_RxXferBlockCpltCallback+0x148>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	3301      	adds	r3, #1
 800231a:	4a4e      	ldr	r2, [pc, #312]	@ (8002454 <MDMA_RxXferBlockCpltCallback+0x148>)
 800231c:	6013      	str	r3, [r2, #0]
	uint8_t nextNodeIndex = 0;
 800231e:	2300      	movs	r3, #0
 8002320:	73fb      	strb	r3, [r7, #15]
	MDMA_LinkNodeTypeDef* currNode = _hdma->FirstLinkedListNodeAddress;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002326:	60bb      	str	r3, [r7, #8]
	for(; nextNodeIndex < _hdma->LinkedListNodeCounter && currNode != (MDMA_LinkNodeTypeDef*)_hdma->Instance->CLAR; nextNodeIndex++, currNode = (MDMA_LinkNodeTypeDef*)currNode->CLAR)
 8002328:	e005      	b.n	8002336 <MDMA_RxXferBlockCpltCallback+0x2a>
 800232a:	7bfb      	ldrb	r3, [r7, #15]
 800232c:	3301      	adds	r3, #1
 800232e:	73fb      	strb	r3, [r7, #15]
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	695b      	ldr	r3, [r3, #20]
 8002334:	60bb      	str	r3, [r7, #8]
 8002336:	7bfa      	ldrb	r2, [r7, #15]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800233c:	429a      	cmp	r2, r3
 800233e:	d206      	bcs.n	800234e <MDMA_RxXferBlockCpltCallback+0x42>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002346:	461a      	mov	r2, r3
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	4293      	cmp	r3, r2
 800234c:	d1ed      	bne.n	800232a <MDMA_RxXferBlockCpltCallback+0x1e>
	{
	}
	switch(nextNodeIndex){
 800234e:	7bfb      	ldrb	r3, [r7, #15]
 8002350:	2b03      	cmp	r3, #3
 8002352:	d877      	bhi.n	8002444 <MDMA_RxXferBlockCpltCallback+0x138>
 8002354:	a201      	add	r2, pc, #4	@ (adr r2, 800235c <MDMA_RxXferBlockCpltCallback+0x50>)
 8002356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800235a:	bf00      	nop
 800235c:	0800236d 	.word	0x0800236d
 8002360:	080023a3 	.word	0x080023a3
 8002364:	080023d9 	.word	0x080023d9
 8002368:	0800240f 	.word	0x0800240f
	case 0:
		if(READ_BIT(audio_rx_status, AUDIO_STATUS_R_PENDING)){
 800236c:	4b3a      	ldr	r3, [pc, #232]	@ (8002458 <MDMA_RxXferBlockCpltCallback+0x14c>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	b2db      	uxtb	r3, r3
 8002372:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002376:	2b00      	cmp	r3, #0
 8002378:	d010      	beq.n	800239c <MDMA_RxXferBlockCpltCallback+0x90>
			SET_BIT(audio_rx_status, AUDIO_STATUS_R_CPLT);
 800237a:	4b37      	ldr	r3, [pc, #220]	@ (8002458 <MDMA_RxXferBlockCpltCallback+0x14c>)
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	b2db      	uxtb	r3, r3
 8002380:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002384:	b2da      	uxtb	r2, r3
 8002386:	4b34      	ldr	r3, [pc, #208]	@ (8002458 <MDMA_RxXferBlockCpltCallback+0x14c>)
 8002388:	701a      	strb	r2, [r3, #0]
			CLEAR_BIT(audio_rx_status, AUDIO_STATUS_R_PENDING);
 800238a:	4b33      	ldr	r3, [pc, #204]	@ (8002458 <MDMA_RxXferBlockCpltCallback+0x14c>)
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	b2db      	uxtb	r3, r3
 8002390:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002394:	b2da      	uxtb	r2, r3
 8002396:	4b30      	ldr	r3, [pc, #192]	@ (8002458 <MDMA_RxXferBlockCpltCallback+0x14c>)
 8002398:	701a      	strb	r2, [r3, #0]
		}else{
			Error_Handler();
		}
		break;
 800239a:	e056      	b.n	800244a <MDMA_RxXferBlockCpltCallback+0x13e>
			Error_Handler();
 800239c:	f000 fa18 	bl	80027d0 <Error_Handler>
		break;
 80023a0:	e053      	b.n	800244a <MDMA_RxXferBlockCpltCallback+0x13e>
	case 1:
		if(READ_BIT(audio_rx_status, AUDIO_STATUS_L_HALF_PENDING)){
 80023a2:	4b2d      	ldr	r3, [pc, #180]	@ (8002458 <MDMA_RxXferBlockCpltCallback+0x14c>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	f003 0301 	and.w	r3, r3, #1
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d010      	beq.n	80023d2 <MDMA_RxXferBlockCpltCallback+0xc6>
			SET_BIT(audio_rx_status, AUDIO_STATUS_L_HALF_CPLT);
 80023b0:	4b29      	ldr	r3, [pc, #164]	@ (8002458 <MDMA_RxXferBlockCpltCallback+0x14c>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	f043 0302 	orr.w	r3, r3, #2
 80023ba:	b2da      	uxtb	r2, r3
 80023bc:	4b26      	ldr	r3, [pc, #152]	@ (8002458 <MDMA_RxXferBlockCpltCallback+0x14c>)
 80023be:	701a      	strb	r2, [r3, #0]
			CLEAR_BIT(audio_rx_status, AUDIO_STATUS_L_HALF_PENDING);
 80023c0:	4b25      	ldr	r3, [pc, #148]	@ (8002458 <MDMA_RxXferBlockCpltCallback+0x14c>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	f023 0301 	bic.w	r3, r3, #1
 80023ca:	b2da      	uxtb	r2, r3
 80023cc:	4b22      	ldr	r3, [pc, #136]	@ (8002458 <MDMA_RxXferBlockCpltCallback+0x14c>)
 80023ce:	701a      	strb	r2, [r3, #0]
		}else{
			Error_Handler();
		}
		break;
 80023d0:	e03b      	b.n	800244a <MDMA_RxXferBlockCpltCallback+0x13e>
			Error_Handler();
 80023d2:	f000 f9fd 	bl	80027d0 <Error_Handler>
		break;
 80023d6:	e038      	b.n	800244a <MDMA_RxXferBlockCpltCallback+0x13e>
	case 2:
		if(READ_BIT(audio_rx_status, AUDIO_STATUS_R_HALF_PENDING)){
 80023d8:	4b1f      	ldr	r3, [pc, #124]	@ (8002458 <MDMA_RxXferBlockCpltCallback+0x14c>)
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	f003 0304 	and.w	r3, r3, #4
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d010      	beq.n	8002408 <MDMA_RxXferBlockCpltCallback+0xfc>
			SET_BIT(audio_rx_status, AUDIO_STATUS_R_HALF_CPLT);
 80023e6:	4b1c      	ldr	r3, [pc, #112]	@ (8002458 <MDMA_RxXferBlockCpltCallback+0x14c>)
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	f043 0308 	orr.w	r3, r3, #8
 80023f0:	b2da      	uxtb	r2, r3
 80023f2:	4b19      	ldr	r3, [pc, #100]	@ (8002458 <MDMA_RxXferBlockCpltCallback+0x14c>)
 80023f4:	701a      	strb	r2, [r3, #0]
			CLEAR_BIT(audio_rx_status, AUDIO_STATUS_R_HALF_PENDING);
 80023f6:	4b18      	ldr	r3, [pc, #96]	@ (8002458 <MDMA_RxXferBlockCpltCallback+0x14c>)
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	f023 0304 	bic.w	r3, r3, #4
 8002400:	b2da      	uxtb	r2, r3
 8002402:	4b15      	ldr	r3, [pc, #84]	@ (8002458 <MDMA_RxXferBlockCpltCallback+0x14c>)
 8002404:	701a      	strb	r2, [r3, #0]
		}else{
			Error_Handler();
		}
		break;
 8002406:	e020      	b.n	800244a <MDMA_RxXferBlockCpltCallback+0x13e>
			Error_Handler();
 8002408:	f000 f9e2 	bl	80027d0 <Error_Handler>
		break;
 800240c:	e01d      	b.n	800244a <MDMA_RxXferBlockCpltCallback+0x13e>
	case 3:
		if(READ_BIT(audio_rx_status, AUDIO_STATUS_L_PENDING)){
 800240e:	4b12      	ldr	r3, [pc, #72]	@ (8002458 <MDMA_RxXferBlockCpltCallback+0x14c>)
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	b2db      	uxtb	r3, r3
 8002414:	f003 0310 	and.w	r3, r3, #16
 8002418:	2b00      	cmp	r3, #0
 800241a:	d010      	beq.n	800243e <MDMA_RxXferBlockCpltCallback+0x132>
			SET_BIT(audio_rx_status, AUDIO_STATUS_L_CPLT);
 800241c:	4b0e      	ldr	r3, [pc, #56]	@ (8002458 <MDMA_RxXferBlockCpltCallback+0x14c>)
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	b2db      	uxtb	r3, r3
 8002422:	f043 0320 	orr.w	r3, r3, #32
 8002426:	b2da      	uxtb	r2, r3
 8002428:	4b0b      	ldr	r3, [pc, #44]	@ (8002458 <MDMA_RxXferBlockCpltCallback+0x14c>)
 800242a:	701a      	strb	r2, [r3, #0]
			CLEAR_BIT(audio_rx_status, AUDIO_STATUS_L_PENDING);
 800242c:	4b0a      	ldr	r3, [pc, #40]	@ (8002458 <MDMA_RxXferBlockCpltCallback+0x14c>)
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	b2db      	uxtb	r3, r3
 8002432:	f023 0310 	bic.w	r3, r3, #16
 8002436:	b2da      	uxtb	r2, r3
 8002438:	4b07      	ldr	r3, [pc, #28]	@ (8002458 <MDMA_RxXferBlockCpltCallback+0x14c>)
 800243a:	701a      	strb	r2, [r3, #0]
		}else{
			Error_Handler();
		}
		break;
 800243c:	e005      	b.n	800244a <MDMA_RxXferBlockCpltCallback+0x13e>
			Error_Handler();
 800243e:	f000 f9c7 	bl	80027d0 <Error_Handler>
		break;
 8002442:	e002      	b.n	800244a <MDMA_RxXferBlockCpltCallback+0x13e>
	default:
		Error_Handler();
 8002444:	f000 f9c4 	bl	80027d0 <Error_Handler>
		break;
 8002448:	bf00      	nop
	}
}
 800244a:	bf00      	nop
 800244c:	3710      	adds	r7, #16
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	24000d84 	.word	0x24000d84
 8002458:	24000d80 	.word	0x24000d80

0800245c <MDMA_TxXferBlockCpltCallback>:

void MDMA_TxXferBlockCpltCallback(MDMA_HandleTypeDef *_hdma)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
	transfercounter++;
 8002464:	4b4f      	ldr	r3, [pc, #316]	@ (80025a4 <MDMA_TxXferBlockCpltCallback+0x148>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	3301      	adds	r3, #1
 800246a:	4a4e      	ldr	r2, [pc, #312]	@ (80025a4 <MDMA_TxXferBlockCpltCallback+0x148>)
 800246c:	6013      	str	r3, [r2, #0]
	uint8_t nextNodeIndex = 0;
 800246e:	2300      	movs	r3, #0
 8002470:	73fb      	strb	r3, [r7, #15]
	MDMA_LinkNodeTypeDef* currNode = _hdma->FirstLinkedListNodeAddress;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002476:	60bb      	str	r3, [r7, #8]
	for(; nextNodeIndex < _hdma->LinkedListNodeCounter && currNode != (MDMA_LinkNodeTypeDef*)_hdma->Instance->CLAR; nextNodeIndex++, currNode = (MDMA_LinkNodeTypeDef*)currNode->CLAR)
 8002478:	e005      	b.n	8002486 <MDMA_TxXferBlockCpltCallback+0x2a>
 800247a:	7bfb      	ldrb	r3, [r7, #15]
 800247c:	3301      	adds	r3, #1
 800247e:	73fb      	strb	r3, [r7, #15]
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	695b      	ldr	r3, [r3, #20]
 8002484:	60bb      	str	r3, [r7, #8]
 8002486:	7bfa      	ldrb	r2, [r7, #15]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800248c:	429a      	cmp	r2, r3
 800248e:	d206      	bcs.n	800249e <MDMA_TxXferBlockCpltCallback+0x42>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002496:	461a      	mov	r2, r3
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	4293      	cmp	r3, r2
 800249c:	d1ed      	bne.n	800247a <MDMA_TxXferBlockCpltCallback+0x1e>
	{
	}
	switch(nextNodeIndex){
 800249e:	7bfb      	ldrb	r3, [r7, #15]
 80024a0:	2b03      	cmp	r3, #3
 80024a2:	d877      	bhi.n	8002594 <MDMA_TxXferBlockCpltCallback+0x138>
 80024a4:	a201      	add	r2, pc, #4	@ (adr r2, 80024ac <MDMA_TxXferBlockCpltCallback+0x50>)
 80024a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024aa:	bf00      	nop
 80024ac:	080024bd 	.word	0x080024bd
 80024b0:	080024f3 	.word	0x080024f3
 80024b4:	08002529 	.word	0x08002529
 80024b8:	0800255f 	.word	0x0800255f
	case 0:
		if(READ_BIT(audio_tx_status, AUDIO_STATUS_R_PENDING)){
 80024bc:	4b3a      	ldr	r3, [pc, #232]	@ (80025a8 <MDMA_TxXferBlockCpltCallback+0x14c>)
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d010      	beq.n	80024ec <MDMA_TxXferBlockCpltCallback+0x90>
			SET_BIT(audio_tx_status, AUDIO_STATUS_R_CPLT);
 80024ca:	4b37      	ldr	r3, [pc, #220]	@ (80025a8 <MDMA_TxXferBlockCpltCallback+0x14c>)
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80024d4:	b2da      	uxtb	r2, r3
 80024d6:	4b34      	ldr	r3, [pc, #208]	@ (80025a8 <MDMA_TxXferBlockCpltCallback+0x14c>)
 80024d8:	701a      	strb	r2, [r3, #0]
			CLEAR_BIT(audio_tx_status, AUDIO_STATUS_R_PENDING);
 80024da:	4b33      	ldr	r3, [pc, #204]	@ (80025a8 <MDMA_TxXferBlockCpltCallback+0x14c>)
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80024e4:	b2da      	uxtb	r2, r3
 80024e6:	4b30      	ldr	r3, [pc, #192]	@ (80025a8 <MDMA_TxXferBlockCpltCallback+0x14c>)
 80024e8:	701a      	strb	r2, [r3, #0]
		}else{
			Error_Handler();
		}
		break;
 80024ea:	e056      	b.n	800259a <MDMA_TxXferBlockCpltCallback+0x13e>
			Error_Handler();
 80024ec:	f000 f970 	bl	80027d0 <Error_Handler>
		break;
 80024f0:	e053      	b.n	800259a <MDMA_TxXferBlockCpltCallback+0x13e>
	case 1:
		if(READ_BIT(audio_tx_status, AUDIO_STATUS_L_HALF_PENDING)){
 80024f2:	4b2d      	ldr	r3, [pc, #180]	@ (80025a8 <MDMA_TxXferBlockCpltCallback+0x14c>)
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	f003 0301 	and.w	r3, r3, #1
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d010      	beq.n	8002522 <MDMA_TxXferBlockCpltCallback+0xc6>
			SET_BIT(audio_tx_status, AUDIO_STATUS_L_HALF_CPLT);
 8002500:	4b29      	ldr	r3, [pc, #164]	@ (80025a8 <MDMA_TxXferBlockCpltCallback+0x14c>)
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	b2db      	uxtb	r3, r3
 8002506:	f043 0302 	orr.w	r3, r3, #2
 800250a:	b2da      	uxtb	r2, r3
 800250c:	4b26      	ldr	r3, [pc, #152]	@ (80025a8 <MDMA_TxXferBlockCpltCallback+0x14c>)
 800250e:	701a      	strb	r2, [r3, #0]
			CLEAR_BIT(audio_tx_status, AUDIO_STATUS_L_HALF_PENDING);
 8002510:	4b25      	ldr	r3, [pc, #148]	@ (80025a8 <MDMA_TxXferBlockCpltCallback+0x14c>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	b2db      	uxtb	r3, r3
 8002516:	f023 0301 	bic.w	r3, r3, #1
 800251a:	b2da      	uxtb	r2, r3
 800251c:	4b22      	ldr	r3, [pc, #136]	@ (80025a8 <MDMA_TxXferBlockCpltCallback+0x14c>)
 800251e:	701a      	strb	r2, [r3, #0]

		}else{
			Error_Handler();
		}
		break;
 8002520:	e03b      	b.n	800259a <MDMA_TxXferBlockCpltCallback+0x13e>
			Error_Handler();
 8002522:	f000 f955 	bl	80027d0 <Error_Handler>
		break;
 8002526:	e038      	b.n	800259a <MDMA_TxXferBlockCpltCallback+0x13e>
	case 2:
		if(READ_BIT(audio_tx_status, AUDIO_STATUS_R_HALF_PENDING)){
 8002528:	4b1f      	ldr	r3, [pc, #124]	@ (80025a8 <MDMA_TxXferBlockCpltCallback+0x14c>)
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	b2db      	uxtb	r3, r3
 800252e:	f003 0304 	and.w	r3, r3, #4
 8002532:	2b00      	cmp	r3, #0
 8002534:	d010      	beq.n	8002558 <MDMA_TxXferBlockCpltCallback+0xfc>
			SET_BIT(audio_tx_status, AUDIO_STATUS_R_HALF_CPLT);
 8002536:	4b1c      	ldr	r3, [pc, #112]	@ (80025a8 <MDMA_TxXferBlockCpltCallback+0x14c>)
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	b2db      	uxtb	r3, r3
 800253c:	f043 0308 	orr.w	r3, r3, #8
 8002540:	b2da      	uxtb	r2, r3
 8002542:	4b19      	ldr	r3, [pc, #100]	@ (80025a8 <MDMA_TxXferBlockCpltCallback+0x14c>)
 8002544:	701a      	strb	r2, [r3, #0]
			CLEAR_BIT(audio_tx_status, AUDIO_STATUS_R_HALF_PENDING);
 8002546:	4b18      	ldr	r3, [pc, #96]	@ (80025a8 <MDMA_TxXferBlockCpltCallback+0x14c>)
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	b2db      	uxtb	r3, r3
 800254c:	f023 0304 	bic.w	r3, r3, #4
 8002550:	b2da      	uxtb	r2, r3
 8002552:	4b15      	ldr	r3, [pc, #84]	@ (80025a8 <MDMA_TxXferBlockCpltCallback+0x14c>)
 8002554:	701a      	strb	r2, [r3, #0]
		}else{
			Error_Handler();
		}
		break;
 8002556:	e020      	b.n	800259a <MDMA_TxXferBlockCpltCallback+0x13e>
			Error_Handler();
 8002558:	f000 f93a 	bl	80027d0 <Error_Handler>
		break;
 800255c:	e01d      	b.n	800259a <MDMA_TxXferBlockCpltCallback+0x13e>
	case 3:
		if(READ_BIT(audio_tx_status, AUDIO_STATUS_L_PENDING)){
 800255e:	4b12      	ldr	r3, [pc, #72]	@ (80025a8 <MDMA_TxXferBlockCpltCallback+0x14c>)
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	b2db      	uxtb	r3, r3
 8002564:	f003 0310 	and.w	r3, r3, #16
 8002568:	2b00      	cmp	r3, #0
 800256a:	d010      	beq.n	800258e <MDMA_TxXferBlockCpltCallback+0x132>
			SET_BIT(audio_tx_status, AUDIO_STATUS_L_CPLT);
 800256c:	4b0e      	ldr	r3, [pc, #56]	@ (80025a8 <MDMA_TxXferBlockCpltCallback+0x14c>)
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	b2db      	uxtb	r3, r3
 8002572:	f043 0320 	orr.w	r3, r3, #32
 8002576:	b2da      	uxtb	r2, r3
 8002578:	4b0b      	ldr	r3, [pc, #44]	@ (80025a8 <MDMA_TxXferBlockCpltCallback+0x14c>)
 800257a:	701a      	strb	r2, [r3, #0]
			CLEAR_BIT(audio_tx_status, AUDIO_STATUS_L_PENDING);
 800257c:	4b0a      	ldr	r3, [pc, #40]	@ (80025a8 <MDMA_TxXferBlockCpltCallback+0x14c>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	b2db      	uxtb	r3, r3
 8002582:	f023 0310 	bic.w	r3, r3, #16
 8002586:	b2da      	uxtb	r2, r3
 8002588:	4b07      	ldr	r3, [pc, #28]	@ (80025a8 <MDMA_TxXferBlockCpltCallback+0x14c>)
 800258a:	701a      	strb	r2, [r3, #0]
		}else{
			Error_Handler();
		}
		break;
 800258c:	e005      	b.n	800259a <MDMA_TxXferBlockCpltCallback+0x13e>
			Error_Handler();
 800258e:	f000 f91f 	bl	80027d0 <Error_Handler>
		break;
 8002592:	e002      	b.n	800259a <MDMA_TxXferBlockCpltCallback+0x13e>
	default:
		Error_Handler();
 8002594:	f000 f91c 	bl	80027d0 <Error_Handler>
		break;
 8002598:	bf00      	nop
	}
}
 800259a:	bf00      	nop
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	24000d84 	.word	0x24000d84
 80025a8:	24000d82 	.word	0x24000d82

080025ac <MDMA_RxErrorCallback>:


void MDMA_RxErrorCallback(MDMA_HandleTypeDef *_hdma){
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
	Error_Handler();
 80025b4:	f000 f90c 	bl	80027d0 <Error_Handler>
}
 80025b8:	bf00      	nop
 80025ba:	3708      	adds	r7, #8
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <MDMA_TxErrorCallback>:

void MDMA_TxErrorCallback(MDMA_HandleTypeDef *_hdma){
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
	Error_Handler();
 80025c8:	f000 f902 	bl	80027d0 <Error_Handler>
}
 80025cc:	bf00      	nop
 80025ce:	3708      	adds	r7, #8
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <codecSetup>:

HAL_StatusTypeDef codecSetup(){
 80025d4:	b590      	push	{r4, r7, lr}
 80025d6:	b08f      	sub	sp, #60	@ 0x3c
 80025d8:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status;

	aic3xHandle.hi2c = &hi2c2;
 80025da:	4b77      	ldr	r3, [pc, #476]	@ (80027b8 <codecSetup+0x1e4>)
 80025dc:	4a77      	ldr	r2, [pc, #476]	@ (80027bc <codecSetup+0x1e8>)
 80025de:	601a      	str	r2, [r3, #0]
	aic3xHandle.rst_port = RESET_GPIO_Port;
 80025e0:	4b75      	ldr	r3, [pc, #468]	@ (80027b8 <codecSetup+0x1e4>)
 80025e2:	4a77      	ldr	r2, [pc, #476]	@ (80027c0 <codecSetup+0x1ec>)
 80025e4:	605a      	str	r2, [r3, #4]
	aic3xHandle.rst_pin = RESET_Pin;
 80025e6:	4b74      	ldr	r3, [pc, #464]	@ (80027b8 <codecSetup+0x1e4>)
 80025e8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80025ec:	811a      	strh	r2, [r3, #8]


	status = AIC3X_Init(&aic3xHandle);
 80025ee:	4872      	ldr	r0, [pc, #456]	@ (80027b8 <codecSetup+0x1e4>)
 80025f0:	f7fe f8ce 	bl	8000790 <AIC3X_Init>
 80025f4:	4603      	mov	r3, r0
 80025f6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	if (status != HAL_OK) {
 80025fa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d002      	beq.n	8002608 <codecSetup+0x34>
		return status;
 8002602:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002606:	e0d3      	b.n	80027b0 <codecSetup+0x1dc>
	}

	AIC3X_ASDIntCtrl_TypeDef asdIntCtrl = {
 8002608:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800260c:	2200      	movs	r2, #0
 800260e:	601a      	str	r2, [r3, #0]
 8002610:	605a      	str	r2, [r3, #4]
 8002612:	609a      	str	r2, [r3, #8]
 8002614:	2301      	movs	r3, #1
 8002616:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
			.ReSyncMute = false,
			.WordOffset = 0
	};


	status = AIC3X_WriteASDataIntfControl(&aic3xHandle, &asdIntCtrl);
 800261a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800261e:	4619      	mov	r1, r3
 8002620:	4865      	ldr	r0, [pc, #404]	@ (80027b8 <codecSetup+0x1e4>)
 8002622:	f7fe f99a 	bl	800095a <AIC3X_WriteASDataIntfControl>
 8002626:	4603      	mov	r3, r0
 8002628:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	if (status != HAL_OK) {
 800262c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002630:	2b00      	cmp	r3, #0
 8002632:	d002      	beq.n	800263a <codecSetup+0x66>
		return status;
 8002634:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002638:	e0ba      	b.n	80027b0 <codecSetup+0x1dc>
//	  				.PllR = 8
//	  		};
//
//	  		status = USER_AIC3X_WritePllProgramming(&aic3xHandle, &pllProgramming);

	AIC3X_PGAGainControl_TypeDef pgaGainControl = {
 800263a:	2300      	movs	r3, #0
 800263c:	627b      	str	r3, [r7, #36]	@ 0x24
			.RADCMuted = false,
			.RADCGain = 0
	};


	AIC3X_ADCMixControl_TypeDef adcMixControl = {
 800263e:	4b61      	ldr	r3, [pc, #388]	@ (80027c4 <codecSetup+0x1f0>)
 8002640:	f107 0414 	add.w	r4, r7, #20
 8002644:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002646:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				.RightADC_PGASoftStepping = 0b00,
				.RightADC_MIC1LPDifferential = false,
				.RightADC_MIC1LPGain = 0b1111
	};

	status = AIC3X_WriteADCMixControl(&aic3xHandle, &adcMixControl);
 800264a:	f107 0314 	add.w	r3, r7, #20
 800264e:	4619      	mov	r1, r3
 8002650:	4859      	ldr	r0, [pc, #356]	@ (80027b8 <codecSetup+0x1e4>)
 8002652:	f7fe fa38 	bl	8000ac6 <AIC3X_WriteADCMixControl>
 8002656:	4603      	mov	r3, r0
 8002658:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	if (status != HAL_OK) {
 800265c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002660:	2b00      	cmp	r3, #0
 8002662:	d002      	beq.n	800266a <codecSetup+0x96>
		return status;
 8002664:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002668:	e0a2      	b.n	80027b0 <codecSetup+0x1dc>
	}

	status = AIC3X_WritePGAGainControl(&aic3xHandle, &pgaGainControl);
 800266a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800266e:	4619      	mov	r1, r3
 8002670:	4851      	ldr	r0, [pc, #324]	@ (80027b8 <codecSetup+0x1e4>)
 8002672:	f7fe f9e1 	bl	8000a38 <AIC3X_WritePGAGainControl>
 8002676:	4603      	mov	r3, r0
 8002678:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	if (status != HAL_OK) {
 800267c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002680:	2b00      	cmp	r3, #0
 8002682:	d002      	beq.n	800268a <codecSetup+0xb6>
		return status;
 8002684:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002688:	e092      	b.n	80027b0 <codecSetup+0x1dc>
	}


	AIC3X_DataPathControl_TypeDef dataPathControl = {
 800268a:	4b4f      	ldr	r3, [pc, #316]	@ (80027c8 <codecSetup+0x1f4>)
 800268c:	881b      	ldrh	r3, [r3, #0]
 800268e:	823b      	strh	r3, [r7, #16]
			.LeftDACDataPath = AIC3X_DATAPATH_STRAIGHT,
			.RightDACDataPath = AIC3X_DATAPATH_STRAIGHT
	};

	status = AIC3X_WriteDataPathControl(&aic3xHandle, &dataPathControl);
 8002690:	f107 0310 	add.w	r3, r7, #16
 8002694:	4619      	mov	r1, r3
 8002696:	4848      	ldr	r0, [pc, #288]	@ (80027b8 <codecSetup+0x1e4>)
 8002698:	f7fe f920 	bl	80008dc <AIC3X_WriteDataPathControl>
 800269c:	4603      	mov	r3, r0
 800269e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	if (status != HAL_OK) {
 80026a2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d002      	beq.n	80026b0 <codecSetup+0xdc>
		return status;
 80026aa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80026ae:	e07f      	b.n	80027b0 <codecSetup+0x1dc>
	}

	AIC3X_DACPowerControl_TypeDef dacPowerControl = {
 80026b0:	4b46      	ldr	r3, [pc, #280]	@ (80027cc <codecSetup+0x1f8>)
 80026b2:	881b      	ldrh	r3, [r3, #0]
 80026b4:	81bb      	strh	r3, [r7, #12]
			.LeftDACPoweredUp = true,
			.RightDACPoweredUp = true
	};

	status = AIC3X_WriteDACPowerControl(&aic3xHandle, &dacPowerControl);
 80026b6:	f107 030c 	add.w	r3, r7, #12
 80026ba:	4619      	mov	r1, r3
 80026bc:	483e      	ldr	r0, [pc, #248]	@ (80027b8 <codecSetup+0x1e4>)
 80026be:	f7fe fb40 	bl	8000d42 <AIC3X_WriteDACPowerControl>
 80026c2:	4603      	mov	r3, r0
 80026c4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	if (status != HAL_OK) {
 80026c8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d002      	beq.n	80026d6 <codecSetup+0x102>
		return status;
 80026d0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80026d4:	e06c      	b.n	80027b0 <codecSetup+0x1dc>
	}


	AIC3X_VolControl_TypeDef defaultVolControl = {
 80026d6:	2300      	movs	r3, #0
 80026d8:	723b      	strb	r3, [r7, #8]
 80026da:	2300      	movs	r3, #0
 80026dc:	727b      	strb	r3, [r7, #9]
			.Muted = false,
			.Volume = 0,
	};

	status = AIC3X_WriteVolControl(&aic3xHandle,LDAC_VOL, &defaultVolControl);
 80026de:	f107 0308 	add.w	r3, r7, #8
 80026e2:	461a      	mov	r2, r3
 80026e4:	212b      	movs	r1, #43	@ 0x2b
 80026e6:	4834      	ldr	r0, [pc, #208]	@ (80027b8 <codecSetup+0x1e4>)
 80026e8:	f7fe fb6f 	bl	8000dca <AIC3X_WriteVolControl>
 80026ec:	4603      	mov	r3, r0
 80026ee:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	if (status != HAL_OK) {
 80026f2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d002      	beq.n	8002700 <codecSetup+0x12c>
		return status;
 80026fa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80026fe:	e057      	b.n	80027b0 <codecSetup+0x1dc>
	}

	status = AIC3X_WriteVolControl(&aic3xHandle,RDAC_VOL, &defaultVolControl);
 8002700:	f107 0308 	add.w	r3, r7, #8
 8002704:	461a      	mov	r2, r3
 8002706:	212c      	movs	r1, #44	@ 0x2c
 8002708:	482b      	ldr	r0, [pc, #172]	@ (80027b8 <codecSetup+0x1e4>)
 800270a:	f7fe fb5e 	bl	8000dca <AIC3X_WriteVolControl>
 800270e:	4603      	mov	r3, r0
 8002710:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	if (status != HAL_OK) {
 8002714:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002718:	2b00      	cmp	r3, #0
 800271a:	d002      	beq.n	8002722 <codecSetup+0x14e>
		return status;
 800271c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002720:	e046      	b.n	80027b0 <codecSetup+0x1dc>
	}

	status = AIC3X_WriteVolControl(&aic3xHandle,DACL1_2_LLOPM_VOL, &defaultVolControl);
 8002722:	f107 0308 	add.w	r3, r7, #8
 8002726:	461a      	mov	r2, r3
 8002728:	2152      	movs	r1, #82	@ 0x52
 800272a:	4823      	ldr	r0, [pc, #140]	@ (80027b8 <codecSetup+0x1e4>)
 800272c:	f7fe fb4d 	bl	8000dca <AIC3X_WriteVolControl>
 8002730:	4603      	mov	r3, r0
 8002732:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	if (status != HAL_OK) {
 8002736:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800273a:	2b00      	cmp	r3, #0
 800273c:	d002      	beq.n	8002744 <codecSetup+0x170>
		return status;
 800273e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002742:	e035      	b.n	80027b0 <codecSetup+0x1dc>
	}

	status = AIC3X_WriteVolControl(&aic3xHandle,DACR1_2_RLOPM_VOL, &defaultVolControl);
 8002744:	f107 0308 	add.w	r3, r7, #8
 8002748:	461a      	mov	r2, r3
 800274a:	215c      	movs	r1, #92	@ 0x5c
 800274c:	481a      	ldr	r0, [pc, #104]	@ (80027b8 <codecSetup+0x1e4>)
 800274e:	f7fe fb3c 	bl	8000dca <AIC3X_WriteVolControl>
 8002752:	4603      	mov	r3, r0
 8002754:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	if (status != HAL_OK) {
 8002758:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800275c:	2b00      	cmp	r3, #0
 800275e:	d002      	beq.n	8002766 <codecSetup+0x192>
		return status;
 8002760:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002764:	e024      	b.n	80027b0 <codecSetup+0x1dc>
	}

	AIC3X_OutputLevelControl_TypeDef defaultOutputLevelControl = {
 8002766:	2300      	movs	r3, #0
 8002768:	703b      	strb	r3, [r7, #0]
 800276a:	2300      	movs	r3, #0
 800276c:	707b      	strb	r3, [r7, #1]
 800276e:	2300      	movs	r3, #0
 8002770:	70bb      	strb	r3, [r7, #2]
 8002772:	2300      	movs	r3, #0
 8002774:	70fb      	strb	r3, [r7, #3]
 8002776:	2301      	movs	r3, #1
 8002778:	713b      	strb	r3, [r7, #4]
			.PowerDownDriveControl = false,
			.VolumeControlStatus = false,
			.PowerControl = true
	};

	status = AIC3X_WriteOutputLevelControl(&aic3xHandle, LLOPM_CTRL, &defaultOutputLevelControl);
 800277a:	463b      	mov	r3, r7
 800277c:	461a      	mov	r2, r3
 800277e:	2156      	movs	r1, #86	@ 0x56
 8002780:	480d      	ldr	r0, [pc, #52]	@ (80027b8 <codecSetup+0x1e4>)
 8002782:	f7fe fb71 	bl	8000e68 <AIC3X_WriteOutputLevelControl>
 8002786:	4603      	mov	r3, r0
 8002788:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	if (status != HAL_OK) {
 800278c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002790:	2b00      	cmp	r3, #0
 8002792:	d002      	beq.n	800279a <codecSetup+0x1c6>
		return status;
 8002794:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002798:	e00a      	b.n	80027b0 <codecSetup+0x1dc>
	}

	status = AIC3X_WriteOutputLevelControl(&aic3xHandle, RLOPM_CTRL, &defaultOutputLevelControl);
 800279a:	463b      	mov	r3, r7
 800279c:	461a      	mov	r2, r3
 800279e:	215d      	movs	r1, #93	@ 0x5d
 80027a0:	4805      	ldr	r0, [pc, #20]	@ (80027b8 <codecSetup+0x1e4>)
 80027a2:	f7fe fb61 	bl	8000e68 <AIC3X_WriteOutputLevelControl>
 80027a6:	4603      	mov	r3, r0
 80027a8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	return status;
 80027ac:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	373c      	adds	r7, #60	@ 0x3c
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd90      	pop	{r4, r7, pc}
 80027b8:	24000560 	.word	0x24000560
 80027bc:	2400003c 	.word	0x2400003c
 80027c0:	58021000 	.word	0x58021000
 80027c4:	0800ce04 	.word	0x0800ce04
 80027c8:	0800ce14 	.word	0x0800ce14
 80027cc:	0800ce18 	.word	0x0800ce18

080027d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80027d4:	b672      	cpsid	i
}
 80027d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
		__BKPT();
 80027d8:	be00      	bkpt	0x0000
 80027da:	e7fd      	b.n	80027d8 <Error_Handler+0x8>

080027dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027e2:	4b0a      	ldr	r3, [pc, #40]	@ (800280c <HAL_MspInit+0x30>)
 80027e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80027e8:	4a08      	ldr	r2, [pc, #32]	@ (800280c <HAL_MspInit+0x30>)
 80027ea:	f043 0302 	orr.w	r3, r3, #2
 80027ee:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80027f2:	4b06      	ldr	r3, [pc, #24]	@ (800280c <HAL_MspInit+0x30>)
 80027f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80027f8:	f003 0302 	and.w	r3, r3, #2
 80027fc:	607b      	str	r3, [r7, #4]
 80027fe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr
 800280c:	58024400 	.word	0x58024400

08002810 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b0ba      	sub	sp, #232	@ 0xe8
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002818:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800281c:	2200      	movs	r2, #0
 800281e:	601a      	str	r2, [r3, #0]
 8002820:	605a      	str	r2, [r3, #4]
 8002822:	609a      	str	r2, [r3, #8]
 8002824:	60da      	str	r2, [r3, #12]
 8002826:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002828:	f107 0310 	add.w	r3, r7, #16
 800282c:	22c0      	movs	r2, #192	@ 0xc0
 800282e:	2100      	movs	r1, #0
 8002830:	4618      	mov	r0, r3
 8002832:	f00a faaf 	bl	800cd94 <memset>
  if(hi2c->Instance==I2C2)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a30      	ldr	r2, [pc, #192]	@ (80028fc <HAL_I2C_MspInit+0xec>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d158      	bne.n	80028f2 <HAL_I2C_MspInit+0xe2>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002840:	f04f 0208 	mov.w	r2, #8
 8002844:	f04f 0300 	mov.w	r3, #0
 8002848:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 32;
 800284c:	2320      	movs	r3, #32
 800284e:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 129;
 8002850:	2381      	movs	r3, #129	@ 0x81
 8002852:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8002854:	2302      	movs	r3, #2
 8002856:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8002858:	2302      	movs	r3, #2
 800285a:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 100;
 800285c:	2364      	movs	r3, #100	@ 0x64
 800285e:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 8002860:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002864:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8002866:	2300      	movs	r3, #0
 8002868:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800286a:	2300      	movs	r3, #0
 800286c:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_PLL3;
 800286e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002872:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002876:	f107 0310 	add.w	r3, r7, #16
 800287a:	4618      	mov	r0, r3
 800287c:	f005 fc4e 	bl	800811c <HAL_RCCEx_PeriphCLKConfig>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d001      	beq.n	800288a <HAL_I2C_MspInit+0x7a>
    {
      Error_Handler();
 8002886:	f7ff ffa3 	bl	80027d0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800288a:	4b1d      	ldr	r3, [pc, #116]	@ (8002900 <HAL_I2C_MspInit+0xf0>)
 800288c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002890:	4a1b      	ldr	r2, [pc, #108]	@ (8002900 <HAL_I2C_MspInit+0xf0>)
 8002892:	f043 0302 	orr.w	r3, r3, #2
 8002896:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800289a:	4b19      	ldr	r3, [pc, #100]	@ (8002900 <HAL_I2C_MspInit+0xf0>)
 800289c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028a0:	f003 0302 	and.w	r3, r3, #2
 80028a4:	60fb      	str	r3, [r7, #12]
 80028a6:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80028a8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80028ac:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028b0:	2312      	movs	r3, #18
 80028b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028b6:	2301      	movs	r3, #1
 80028b8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028bc:	2303      	movs	r3, #3
 80028be:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80028c2:	2304      	movs	r3, #4
 80028c4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028c8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80028cc:	4619      	mov	r1, r3
 80028ce:	480d      	ldr	r0, [pc, #52]	@ (8002904 <HAL_I2C_MspInit+0xf4>)
 80028d0:	f002 fe28 	bl	8005524 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80028d4:	4b0a      	ldr	r3, [pc, #40]	@ (8002900 <HAL_I2C_MspInit+0xf0>)
 80028d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80028da:	4a09      	ldr	r2, [pc, #36]	@ (8002900 <HAL_I2C_MspInit+0xf0>)
 80028dc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80028e0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80028e4:	4b06      	ldr	r3, [pc, #24]	@ (8002900 <HAL_I2C_MspInit+0xf0>)
 80028e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80028ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028ee:	60bb      	str	r3, [r7, #8]
 80028f0:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 80028f2:	bf00      	nop
 80028f4:	37e8      	adds	r7, #232	@ 0xe8
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	40005800 	.word	0x40005800
 8002900:	58024400 	.word	0x58024400
 8002904:	58020400 	.word	0x58020400

08002908 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b08a      	sub	sp, #40	@ 0x28
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002910:	f107 0314 	add.w	r3, r7, #20
 8002914:	2200      	movs	r2, #0
 8002916:	601a      	str	r2, [r3, #0]
 8002918:	605a      	str	r2, [r3, #4]
 800291a:	609a      	str	r2, [r3, #8]
 800291c:	60da      	str	r2, [r3, #12]
 800291e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a1a      	ldr	r2, [pc, #104]	@ (8002990 <HAL_UART_MspInit+0x88>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d12e      	bne.n	8002988 <HAL_UART_MspInit+0x80>
  {
    /* USER CODE BEGIN USART3_MspInit 0 */

    /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800292a:	4b1a      	ldr	r3, [pc, #104]	@ (8002994 <HAL_UART_MspInit+0x8c>)
 800292c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002930:	4a18      	ldr	r2, [pc, #96]	@ (8002994 <HAL_UART_MspInit+0x8c>)
 8002932:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002936:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800293a:	4b16      	ldr	r3, [pc, #88]	@ (8002994 <HAL_UART_MspInit+0x8c>)
 800293c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002940:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002944:	613b      	str	r3, [r7, #16]
 8002946:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002948:	4b12      	ldr	r3, [pc, #72]	@ (8002994 <HAL_UART_MspInit+0x8c>)
 800294a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800294e:	4a11      	ldr	r2, [pc, #68]	@ (8002994 <HAL_UART_MspInit+0x8c>)
 8002950:	f043 0308 	orr.w	r3, r3, #8
 8002954:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002958:	4b0e      	ldr	r3, [pc, #56]	@ (8002994 <HAL_UART_MspInit+0x8c>)
 800295a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800295e:	f003 0308 	and.w	r3, r3, #8
 8002962:	60fb      	str	r3, [r7, #12]
 8002964:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002966:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800296a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800296c:	2302      	movs	r3, #2
 800296e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002970:	2300      	movs	r3, #0
 8002972:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002974:	2300      	movs	r3, #0
 8002976:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002978:	2307      	movs	r3, #7
 800297a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800297c:	f107 0314 	add.w	r3, r7, #20
 8002980:	4619      	mov	r1, r3
 8002982:	4805      	ldr	r0, [pc, #20]	@ (8002998 <HAL_UART_MspInit+0x90>)
 8002984:	f002 fdce 	bl	8005524 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8002988:	bf00      	nop
 800298a:	3728      	adds	r7, #40	@ 0x28
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	40004800 	.word	0x40004800
 8002994:	58024400 	.word	0x58024400
 8002998:	58020c00 	.word	0x58020c00

0800299c <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_b;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b08e      	sub	sp, #56	@ 0x38
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a7c      	ldr	r2, [pc, #496]	@ (8002b9c <HAL_SAI_MspInit+0x200>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d176      	bne.n	8002a9c <HAL_SAI_MspInit+0x100>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 80029ae:	4b7c      	ldr	r3, [pc, #496]	@ (8002ba0 <HAL_SAI_MspInit+0x204>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d10e      	bne.n	80029d4 <HAL_SAI_MspInit+0x38>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80029b6:	4b7b      	ldr	r3, [pc, #492]	@ (8002ba4 <HAL_SAI_MspInit+0x208>)
 80029b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80029bc:	4a79      	ldr	r2, [pc, #484]	@ (8002ba4 <HAL_SAI_MspInit+0x208>)
 80029be:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80029c2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80029c6:	4b77      	ldr	r3, [pc, #476]	@ (8002ba4 <HAL_SAI_MspInit+0x208>)
 80029c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80029cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029d0:	613b      	str	r3, [r7, #16]
 80029d2:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 80029d4:	4b72      	ldr	r3, [pc, #456]	@ (8002ba0 <HAL_SAI_MspInit+0x204>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	3301      	adds	r3, #1
 80029da:	4a71      	ldr	r2, [pc, #452]	@ (8002ba0 <HAL_SAI_MspInit+0x204>)
 80029dc:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80029de:	2374      	movs	r3, #116	@ 0x74
 80029e0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e2:	2302      	movs	r3, #2
 80029e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e6:	2300      	movs	r3, #0
 80029e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ea:	2300      	movs	r3, #0
 80029ec:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80029ee:	2306      	movs	r3, #6
 80029f0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80029f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029f6:	4619      	mov	r1, r3
 80029f8:	486b      	ldr	r0, [pc, #428]	@ (8002ba8 <HAL_SAI_MspInit+0x20c>)
 80029fa:	f002 fd93 	bl	8005524 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA1_Stream0;
 80029fe:	4b6b      	ldr	r3, [pc, #428]	@ (8002bac <HAL_SAI_MspInit+0x210>)
 8002a00:	4a6b      	ldr	r2, [pc, #428]	@ (8002bb0 <HAL_SAI_MspInit+0x214>)
 8002a02:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 8002a04:	4b69      	ldr	r3, [pc, #420]	@ (8002bac <HAL_SAI_MspInit+0x210>)
 8002a06:	2257      	movs	r2, #87	@ 0x57
 8002a08:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a0a:	4b68      	ldr	r3, [pc, #416]	@ (8002bac <HAL_SAI_MspInit+0x210>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a10:	4b66      	ldr	r3, [pc, #408]	@ (8002bac <HAL_SAI_MspInit+0x210>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8002a16:	4b65      	ldr	r3, [pc, #404]	@ (8002bac <HAL_SAI_MspInit+0x210>)
 8002a18:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a1c:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002a1e:	4b63      	ldr	r3, [pc, #396]	@ (8002bac <HAL_SAI_MspInit+0x210>)
 8002a20:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002a24:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002a26:	4b61      	ldr	r3, [pc, #388]	@ (8002bac <HAL_SAI_MspInit+0x210>)
 8002a28:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a2c:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8002a2e:	4b5f      	ldr	r3, [pc, #380]	@ (8002bac <HAL_SAI_MspInit+0x210>)
 8002a30:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a34:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_HIGH;
 8002a36:	4b5d      	ldr	r3, [pc, #372]	@ (8002bac <HAL_SAI_MspInit+0x210>)
 8002a38:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002a3c:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a3e:	4b5b      	ldr	r3, [pc, #364]	@ (8002bac <HAL_SAI_MspInit+0x210>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8002a44:	4859      	ldr	r0, [pc, #356]	@ (8002bac <HAL_SAI_MspInit+0x210>)
 8002a46:	f000 fb8f 	bl	8003168 <HAL_DMA_Init>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d001      	beq.n	8002a54 <HAL_SAI_MspInit+0xb8>
    {
      Error_Handler();
 8002a50:	f7ff febe 	bl	80027d0 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 8002a54:	2306      	movs	r3, #6
 8002a56:	617b      	str	r3, [r7, #20]
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_RISING;
 8002a58:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a5c:	61bb      	str	r3, [r7, #24]
    pSyncConfig.SyncEnable = DISABLE;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	773b      	strb	r3, [r7, #28]
    pSyncConfig.EventEnable = ENABLE;
 8002a62:	2301      	movs	r3, #1
 8002a64:	777b      	strb	r3, [r7, #29]
    pSyncConfig.RequestNumber = 1;
 8002a66:	2301      	movs	r3, #1
 8002a68:	623b      	str	r3, [r7, #32]
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai1_a, &pSyncConfig) != HAL_OK)
 8002a6a:	f107 0314 	add.w	r3, r7, #20
 8002a6e:	4619      	mov	r1, r3
 8002a70:	484e      	ldr	r0, [pc, #312]	@ (8002bac <HAL_SAI_MspInit+0x210>)
 8002a72:	f002 fc5d 	bl	8005330 <HAL_DMAEx_ConfigMuxSync>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d001      	beq.n	8002a80 <HAL_SAI_MspInit+0xe4>
    {
      Error_Handler();
 8002a7c:	f7ff fea8 	bl	80027d0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	4a4a      	ldr	r2, [pc, #296]	@ (8002bac <HAL_SAI_MspInit+0x210>)
 8002a84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8002a88:	4a48      	ldr	r2, [pc, #288]	@ (8002bac <HAL_SAI_MspInit+0x210>)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6393      	str	r3, [r2, #56]	@ 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a46      	ldr	r2, [pc, #280]	@ (8002bac <HAL_SAI_MspInit+0x210>)
 8002a92:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002a96:	4a45      	ldr	r2, [pc, #276]	@ (8002bac <HAL_SAI_MspInit+0x210>)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6393      	str	r3, [r2, #56]	@ 0x38

    }
    if(hsai->Instance==SAI1_Block_B)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a44      	ldr	r2, [pc, #272]	@ (8002bb4 <HAL_SAI_MspInit+0x218>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d176      	bne.n	8002b94 <HAL_SAI_MspInit+0x1f8>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 8002aa6:	4b3e      	ldr	r3, [pc, #248]	@ (8002ba0 <HAL_SAI_MspInit+0x204>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d10e      	bne.n	8002acc <HAL_SAI_MspInit+0x130>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002aae:	4b3d      	ldr	r3, [pc, #244]	@ (8002ba4 <HAL_SAI_MspInit+0x208>)
 8002ab0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002ab4:	4a3b      	ldr	r2, [pc, #236]	@ (8002ba4 <HAL_SAI_MspInit+0x208>)
 8002ab6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002aba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002abe:	4b39      	ldr	r3, [pc, #228]	@ (8002ba4 <HAL_SAI_MspInit+0x208>)
 8002ac0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002ac4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ac8:	60fb      	str	r3, [r7, #12]
 8002aca:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8002acc:	4b34      	ldr	r3, [pc, #208]	@ (8002ba0 <HAL_SAI_MspInit+0x204>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	4a33      	ldr	r2, [pc, #204]	@ (8002ba0 <HAL_SAI_MspInit+0x204>)
 8002ad4:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002ad6:	2308      	movs	r3, #8
 8002ad8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ada:	2302      	movs	r3, #2
 8002adc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002ae6:	2306      	movs	r3, #6
 8002ae8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002aea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002aee:	4619      	mov	r1, r3
 8002af0:	482d      	ldr	r0, [pc, #180]	@ (8002ba8 <HAL_SAI_MspInit+0x20c>)
 8002af2:	f002 fd17 	bl	8005524 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA1_Stream1;
 8002af6:	4b30      	ldr	r3, [pc, #192]	@ (8002bb8 <HAL_SAI_MspInit+0x21c>)
 8002af8:	4a30      	ldr	r2, [pc, #192]	@ (8002bbc <HAL_SAI_MspInit+0x220>)
 8002afa:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 8002afc:	4b2e      	ldr	r3, [pc, #184]	@ (8002bb8 <HAL_SAI_MspInit+0x21c>)
 8002afe:	2258      	movs	r2, #88	@ 0x58
 8002b00:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b02:	4b2d      	ldr	r3, [pc, #180]	@ (8002bb8 <HAL_SAI_MspInit+0x21c>)
 8002b04:	2240      	movs	r2, #64	@ 0x40
 8002b06:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b08:	4b2b      	ldr	r3, [pc, #172]	@ (8002bb8 <HAL_SAI_MspInit+0x21c>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 8002b0e:	4b2a      	ldr	r3, [pc, #168]	@ (8002bb8 <HAL_SAI_MspInit+0x21c>)
 8002b10:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b14:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002b16:	4b28      	ldr	r3, [pc, #160]	@ (8002bb8 <HAL_SAI_MspInit+0x21c>)
 8002b18:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002b1c:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002b1e:	4b26      	ldr	r3, [pc, #152]	@ (8002bb8 <HAL_SAI_MspInit+0x21c>)
 8002b20:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002b24:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 8002b26:	4b24      	ldr	r3, [pc, #144]	@ (8002bb8 <HAL_SAI_MspInit+0x21c>)
 8002b28:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002b2c:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_HIGH;
 8002b2e:	4b22      	ldr	r3, [pc, #136]	@ (8002bb8 <HAL_SAI_MspInit+0x21c>)
 8002b30:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002b34:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b36:	4b20      	ldr	r3, [pc, #128]	@ (8002bb8 <HAL_SAI_MspInit+0x21c>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8002b3c:	481e      	ldr	r0, [pc, #120]	@ (8002bb8 <HAL_SAI_MspInit+0x21c>)
 8002b3e:	f000 fb13 	bl	8003168 <HAL_DMA_Init>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <HAL_SAI_MspInit+0x1b0>
    {
      Error_Handler();
 8002b48:	f7ff fe42 	bl	80027d0 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_DMAMUX1_CH0_EVT;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	617b      	str	r3, [r7, #20]
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_RISING;
 8002b50:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b54:	61bb      	str	r3, [r7, #24]
    pSyncConfig.SyncEnable = ENABLE;
 8002b56:	2301      	movs	r3, #1
 8002b58:	773b      	strb	r3, [r7, #28]
    pSyncConfig.EventEnable = DISABLE;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	777b      	strb	r3, [r7, #29]
    pSyncConfig.RequestNumber = 1;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	623b      	str	r3, [r7, #32]
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai1_b, &pSyncConfig) != HAL_OK)
 8002b62:	f107 0314 	add.w	r3, r7, #20
 8002b66:	4619      	mov	r1, r3
 8002b68:	4813      	ldr	r0, [pc, #76]	@ (8002bb8 <HAL_SAI_MspInit+0x21c>)
 8002b6a:	f002 fbe1 	bl	8005330 <HAL_DMAEx_ConfigMuxSync>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <HAL_SAI_MspInit+0x1dc>
    {
      Error_Handler();
 8002b74:	f7ff fe2c 	bl	80027d0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	4a0f      	ldr	r2, [pc, #60]	@ (8002bb8 <HAL_SAI_MspInit+0x21c>)
 8002b7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8002b80:	4a0d      	ldr	r2, [pc, #52]	@ (8002bb8 <HAL_SAI_MspInit+0x21c>)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a0b      	ldr	r2, [pc, #44]	@ (8002bb8 <HAL_SAI_MspInit+0x21c>)
 8002b8a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002b8e:	4a0a      	ldr	r2, [pc, #40]	@ (8002bb8 <HAL_SAI_MspInit+0x21c>)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6393      	str	r3, [r2, #56]	@ 0x38
    }
}
 8002b94:	bf00      	nop
 8002b96:	3738      	adds	r7, #56	@ 0x38
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	40015804 	.word	0x40015804
 8002ba0:	24001020 	.word	0x24001020
 8002ba4:	58024400 	.word	0x58024400
 8002ba8:	58021000 	.word	0x58021000
 8002bac:	240001c0 	.word	0x240001c0
 8002bb0:	40020010 	.word	0x40020010
 8002bb4:	40015824 	.word	0x40015824
 8002bb8:	24000238 	.word	0x24000238
 8002bbc:	40020028 	.word	0x40020028

08002bc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002bc4:	bf00      	nop
 8002bc6:	e7fd      	b.n	8002bc4 <NMI_Handler+0x4>

08002bc8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bcc:	bf00      	nop
 8002bce:	e7fd      	b.n	8002bcc <HardFault_Handler+0x4>

08002bd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bd4:	bf00      	nop
 8002bd6:	e7fd      	b.n	8002bd4 <MemManage_Handler+0x4>

08002bd8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bdc:	bf00      	nop
 8002bde:	e7fd      	b.n	8002bdc <BusFault_Handler+0x4>

08002be0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002be4:	bf00      	nop
 8002be6:	e7fd      	b.n	8002be4 <UsageFault_Handler+0x4>

08002be8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bec:	bf00      	nop
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr

08002bf6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bfa:	bf00      	nop
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c08:	bf00      	nop
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr

08002c12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c16:	f000 f947 	bl	8002ea8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c1a:	bf00      	nop
 8002c1c:	bd80      	pop	{r7, pc}
	...

08002c20 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8002c24:	4802      	ldr	r0, [pc, #8]	@ (8002c30 <DMA1_Stream0_IRQHandler+0x10>)
 8002c26:	f001 f865 	bl	8003cf4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002c2a:	bf00      	nop
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	240001c0 	.word	0x240001c0

08002c34 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 8002c38:	4802      	ldr	r0, [pc, #8]	@ (8002c44 <DMA1_Stream1_IRQHandler+0x10>)
 8002c3a:	f001 f85b 	bl	8003cf4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002c3e:	bf00      	nop
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	24000238 	.word	0x24000238

08002c48 <MDMA_IRQHandler>:

/**
  * @brief This function handles MDMA global interrupt.
  */
void MDMA_IRQHandler(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_mdma_channel0_sw_0);
 8002c4c:	4803      	ldr	r0, [pc, #12]	@ (8002c5c <MDMA_IRQHandler+0x14>)
 8002c4e:	f003 ffc9 	bl	8006be4 <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_mdma_channel2_sw_0);
 8002c52:	4803      	ldr	r0, [pc, #12]	@ (8002c60 <MDMA_IRQHandler+0x18>)
 8002c54:	f003 ffc6 	bl	8006be4 <HAL_MDMA_IRQHandler>
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 8002c58:	bf00      	nop
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	24000344 	.word	0x24000344
 8002c60:	24000450 	.word	0x24000450

08002c64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002c64:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8002ca0 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8002c68:	f7fd fd7a 	bl	8000760 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002c6c:	f7fd fcca 	bl	8000604 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c70:	480c      	ldr	r0, [pc, #48]	@ (8002ca4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c72:	490d      	ldr	r1, [pc, #52]	@ (8002ca8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002c74:	4a0d      	ldr	r2, [pc, #52]	@ (8002cac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002c76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c78:	e002      	b.n	8002c80 <LoopCopyDataInit>

08002c7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c7e:	3304      	adds	r3, #4

08002c80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c84:	d3f9      	bcc.n	8002c7a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c86:	4a0a      	ldr	r2, [pc, #40]	@ (8002cb0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c88:	4c0a      	ldr	r4, [pc, #40]	@ (8002cb4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c8c:	e001      	b.n	8002c92 <LoopFillZerobss>

08002c8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c90:	3204      	adds	r2, #4

08002c92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c94:	d3fb      	bcc.n	8002c8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c96:	f00a f885 	bl	800cda4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c9a:	f7fe f941 	bl	8000f20 <main>
  bx  lr
 8002c9e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002ca0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002ca4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002ca8:	24000020 	.word	0x24000020
  ldr r2, =_sidata
 8002cac:	0800ceb0 	.word	0x0800ceb0
  ldr r2, =_sbss
 8002cb0:	24000020 	.word	0x24000020
  ldr r4, =_ebss
 8002cb4:	24001030 	.word	0x24001030

08002cb8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002cb8:	e7fe      	b.n	8002cb8 <ADC3_IRQHandler>
	...

08002cbc <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b088      	sub	sp, #32
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	460a      	mov	r2, r1
 8002cc6:	71fb      	strb	r3, [r7, #7]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8002ccc:	4b2e      	ldr	r3, [pc, #184]	@ (8002d88 <BSP_PB_Init+0xcc>)
 8002cce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002cd2:	4a2d      	ldr	r2, [pc, #180]	@ (8002d88 <BSP_PB_Init+0xcc>)
 8002cd4:	f043 0304 	orr.w	r3, r3, #4
 8002cd8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002cdc:	4b2a      	ldr	r3, [pc, #168]	@ (8002d88 <BSP_PB_Init+0xcc>)
 8002cde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ce2:	f003 0304 	and.w	r3, r3, #4
 8002ce6:	60bb      	str	r3, [r7, #8]
 8002ce8:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8002cea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002cee:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cf4:	2302      	movs	r3, #2
 8002cf6:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8002cf8:	79bb      	ldrb	r3, [r7, #6]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d10c      	bne.n	8002d18 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8002d02:	79fb      	ldrb	r3, [r7, #7]
 8002d04:	4a21      	ldr	r2, [pc, #132]	@ (8002d8c <BSP_PB_Init+0xd0>)
 8002d06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d0a:	f107 020c 	add.w	r2, r7, #12
 8002d0e:	4611      	mov	r1, r2
 8002d10:	4618      	mov	r0, r3
 8002d12:	f002 fc07 	bl	8005524 <HAL_GPIO_Init>
 8002d16:	e031      	b.n	8002d7c <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8002d18:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002d1c:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002d1e:	79fb      	ldrb	r3, [r7, #7]
 8002d20:	4a1a      	ldr	r2, [pc, #104]	@ (8002d8c <BSP_PB_Init+0xd0>)
 8002d22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d26:	f107 020c 	add.w	r2, r7, #12
 8002d2a:	4611      	mov	r1, r2
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f002 fbf9 	bl	8005524 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8002d32:	79fb      	ldrb	r3, [r7, #7]
 8002d34:	00db      	lsls	r3, r3, #3
 8002d36:	4a16      	ldr	r2, [pc, #88]	@ (8002d90 <BSP_PB_Init+0xd4>)
 8002d38:	441a      	add	r2, r3
 8002d3a:	79fb      	ldrb	r3, [r7, #7]
 8002d3c:	4915      	ldr	r1, [pc, #84]	@ (8002d94 <BSP_PB_Init+0xd8>)
 8002d3e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002d42:	4619      	mov	r1, r3
 8002d44:	4610      	mov	r0, r2
 8002d46:	f002 fbd8 	bl	80054fa <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8002d4a:	79fb      	ldrb	r3, [r7, #7]
 8002d4c:	00db      	lsls	r3, r3, #3
 8002d4e:	4a10      	ldr	r2, [pc, #64]	@ (8002d90 <BSP_PB_Init+0xd4>)
 8002d50:	1898      	adds	r0, r3, r2
 8002d52:	79fb      	ldrb	r3, [r7, #7]
 8002d54:	4a10      	ldr	r2, [pc, #64]	@ (8002d98 <BSP_PB_Init+0xdc>)
 8002d56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	2100      	movs	r1, #0
 8002d5e:	f002 fbad 	bl	80054bc <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8002d62:	2028      	movs	r0, #40	@ 0x28
 8002d64:	79fb      	ldrb	r3, [r7, #7]
 8002d66:	4a0d      	ldr	r2, [pc, #52]	@ (8002d9c <BSP_PB_Init+0xe0>)
 8002d68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	4619      	mov	r1, r3
 8002d70:	f000 f9c5 	bl	80030fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8002d74:	2328      	movs	r3, #40	@ 0x28
 8002d76:	4618      	mov	r0, r3
 8002d78:	f000 f9db 	bl	8003132 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3720      	adds	r7, #32
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	58024400 	.word	0x58024400
 8002d8c:	2400000c 	.word	0x2400000c
 8002d90:	24001024 	.word	0x24001024
 8002d94:	0800ce6c 	.word	0x0800ce6c
 8002d98:	24000010 	.word	0x24000010
 8002d9c:	24000014 	.word	0x24000014

08002da0 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	4603      	mov	r3, r0
 8002da8:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8002daa:	bf00      	nop
 8002dac:	370c      	adds	r7, #12
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr

08002db6 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8002db6:	b580      	push	{r7, lr}
 8002db8:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8002dba:	2000      	movs	r0, #0
 8002dbc:	f7ff fff0 	bl	8002da0 <BSP_PB_Callback>
}
 8002dc0:	bf00      	nop
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dca:	2003      	movs	r0, #3
 8002dcc:	f000 f98c 	bl	80030e8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002dd0:	f004 ffce 	bl	8007d70 <HAL_RCC_GetSysClockFreq>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	4b15      	ldr	r3, [pc, #84]	@ (8002e2c <HAL_Init+0x68>)
 8002dd8:	699b      	ldr	r3, [r3, #24]
 8002dda:	0a1b      	lsrs	r3, r3, #8
 8002ddc:	f003 030f 	and.w	r3, r3, #15
 8002de0:	4913      	ldr	r1, [pc, #76]	@ (8002e30 <HAL_Init+0x6c>)
 8002de2:	5ccb      	ldrb	r3, [r1, r3]
 8002de4:	f003 031f 	and.w	r3, r3, #31
 8002de8:	fa22 f303 	lsr.w	r3, r2, r3
 8002dec:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002dee:	4b0f      	ldr	r3, [pc, #60]	@ (8002e2c <HAL_Init+0x68>)
 8002df0:	699b      	ldr	r3, [r3, #24]
 8002df2:	f003 030f 	and.w	r3, r3, #15
 8002df6:	4a0e      	ldr	r2, [pc, #56]	@ (8002e30 <HAL_Init+0x6c>)
 8002df8:	5cd3      	ldrb	r3, [r2, r3]
 8002dfa:	f003 031f 	and.w	r3, r3, #31
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	fa22 f303 	lsr.w	r3, r2, r3
 8002e04:	4a0b      	ldr	r2, [pc, #44]	@ (8002e34 <HAL_Init+0x70>)
 8002e06:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002e08:	4a0b      	ldr	r2, [pc, #44]	@ (8002e38 <HAL_Init+0x74>)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e0e:	2000      	movs	r0, #0
 8002e10:	f000 f814 	bl	8002e3c <HAL_InitTick>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e002      	b.n	8002e24 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002e1e:	f7ff fcdd 	bl	80027dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3708      	adds	r7, #8
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	58024400 	.word	0x58024400
 8002e30:	0800ce1c 	.word	0x0800ce1c
 8002e34:	24000004 	.word	0x24000004
 8002e38:	24000000 	.word	0x24000000

08002e3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002e44:	4b15      	ldr	r3, [pc, #84]	@ (8002e9c <HAL_InitTick+0x60>)
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d101      	bne.n	8002e50 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e021      	b.n	8002e94 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002e50:	4b13      	ldr	r3, [pc, #76]	@ (8002ea0 <HAL_InitTick+0x64>)
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	4b11      	ldr	r3, [pc, #68]	@ (8002e9c <HAL_InitTick+0x60>)
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	4619      	mov	r1, r3
 8002e5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e66:	4618      	mov	r0, r3
 8002e68:	f000 f971 	bl	800314e <HAL_SYSTICK_Config>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e00e      	b.n	8002e94 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2b0f      	cmp	r3, #15
 8002e7a:	d80a      	bhi.n	8002e92 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	6879      	ldr	r1, [r7, #4]
 8002e80:	f04f 30ff 	mov.w	r0, #4294967295
 8002e84:	f000 f93b 	bl	80030fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e88:	4a06      	ldr	r2, [pc, #24]	@ (8002ea4 <HAL_InitTick+0x68>)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	e000      	b.n	8002e94 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3708      	adds	r7, #8
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	2400001c 	.word	0x2400001c
 8002ea0:	24000000 	.word	0x24000000
 8002ea4:	24000018 	.word	0x24000018

08002ea8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002eac:	4b06      	ldr	r3, [pc, #24]	@ (8002ec8 <HAL_IncTick+0x20>)
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	4b06      	ldr	r3, [pc, #24]	@ (8002ecc <HAL_IncTick+0x24>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	4a04      	ldr	r2, [pc, #16]	@ (8002ecc <HAL_IncTick+0x24>)
 8002eba:	6013      	str	r3, [r2, #0]
}
 8002ebc:	bf00      	nop
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	2400001c 	.word	0x2400001c
 8002ecc:	2400102c 	.word	0x2400102c

08002ed0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ed4:	4b03      	ldr	r3, [pc, #12]	@ (8002ee4 <HAL_GetTick+0x14>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	2400102c 	.word	0x2400102c

08002ee8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ef0:	f7ff ffee 	bl	8002ed0 <HAL_GetTick>
 8002ef4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f00:	d005      	beq.n	8002f0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f02:	4b0a      	ldr	r3, [pc, #40]	@ (8002f2c <HAL_Delay+0x44>)
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	461a      	mov	r2, r3
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	4413      	add	r3, r2
 8002f0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f0e:	bf00      	nop
 8002f10:	f7ff ffde 	bl	8002ed0 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d8f7      	bhi.n	8002f10 <HAL_Delay+0x28>
  {
  }
}
 8002f20:	bf00      	nop
 8002f22:	bf00      	nop
 8002f24:	3710      	adds	r7, #16
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	2400001c 	.word	0x2400001c

08002f30 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002f30:	b480      	push	{r7}
 8002f32:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002f34:	4b03      	ldr	r3, [pc, #12]	@ (8002f44 <HAL_GetREVID+0x14>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	0c1b      	lsrs	r3, r3, #16
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr
 8002f44:	5c001000 	.word	0x5c001000

08002f48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b085      	sub	sp, #20
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f003 0307 	and.w	r3, r3, #7
 8002f56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f58:	4b0b      	ldr	r3, [pc, #44]	@ (8002f88 <__NVIC_SetPriorityGrouping+0x40>)
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f5e:	68ba      	ldr	r2, [r7, #8]
 8002f60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f64:	4013      	ands	r3, r2
 8002f66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002f70:	4b06      	ldr	r3, [pc, #24]	@ (8002f8c <__NVIC_SetPriorityGrouping+0x44>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f76:	4a04      	ldr	r2, [pc, #16]	@ (8002f88 <__NVIC_SetPriorityGrouping+0x40>)
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	60d3      	str	r3, [r2, #12]
}
 8002f7c:	bf00      	nop
 8002f7e:	3714      	adds	r7, #20
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr
 8002f88:	e000ed00 	.word	0xe000ed00
 8002f8c:	05fa0000 	.word	0x05fa0000

08002f90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f90:	b480      	push	{r7}
 8002f92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f94:	4b04      	ldr	r3, [pc, #16]	@ (8002fa8 <__NVIC_GetPriorityGrouping+0x18>)
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	0a1b      	lsrs	r3, r3, #8
 8002f9a:	f003 0307 	and.w	r3, r3, #7
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr
 8002fa8:	e000ed00 	.word	0xe000ed00

08002fac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002fb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	db0b      	blt.n	8002fd6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fbe:	88fb      	ldrh	r3, [r7, #6]
 8002fc0:	f003 021f 	and.w	r2, r3, #31
 8002fc4:	4907      	ldr	r1, [pc, #28]	@ (8002fe4 <__NVIC_EnableIRQ+0x38>)
 8002fc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fca:	095b      	lsrs	r3, r3, #5
 8002fcc:	2001      	movs	r0, #1
 8002fce:	fa00 f202 	lsl.w	r2, r0, r2
 8002fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002fd6:	bf00      	nop
 8002fd8:	370c      	adds	r7, #12
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	e000e100 	.word	0xe000e100

08002fe8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	4603      	mov	r3, r0
 8002ff0:	6039      	str	r1, [r7, #0]
 8002ff2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002ff4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	db0a      	blt.n	8003012 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	b2da      	uxtb	r2, r3
 8003000:	490c      	ldr	r1, [pc, #48]	@ (8003034 <__NVIC_SetPriority+0x4c>)
 8003002:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003006:	0112      	lsls	r2, r2, #4
 8003008:	b2d2      	uxtb	r2, r2
 800300a:	440b      	add	r3, r1
 800300c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003010:	e00a      	b.n	8003028 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	b2da      	uxtb	r2, r3
 8003016:	4908      	ldr	r1, [pc, #32]	@ (8003038 <__NVIC_SetPriority+0x50>)
 8003018:	88fb      	ldrh	r3, [r7, #6]
 800301a:	f003 030f 	and.w	r3, r3, #15
 800301e:	3b04      	subs	r3, #4
 8003020:	0112      	lsls	r2, r2, #4
 8003022:	b2d2      	uxtb	r2, r2
 8003024:	440b      	add	r3, r1
 8003026:	761a      	strb	r2, [r3, #24]
}
 8003028:	bf00      	nop
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr
 8003034:	e000e100 	.word	0xe000e100
 8003038:	e000ed00 	.word	0xe000ed00

0800303c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800303c:	b480      	push	{r7}
 800303e:	b089      	sub	sp, #36	@ 0x24
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f003 0307 	and.w	r3, r3, #7
 800304e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	f1c3 0307 	rsb	r3, r3, #7
 8003056:	2b04      	cmp	r3, #4
 8003058:	bf28      	it	cs
 800305a:	2304      	movcs	r3, #4
 800305c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	3304      	adds	r3, #4
 8003062:	2b06      	cmp	r3, #6
 8003064:	d902      	bls.n	800306c <NVIC_EncodePriority+0x30>
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	3b03      	subs	r3, #3
 800306a:	e000      	b.n	800306e <NVIC_EncodePriority+0x32>
 800306c:	2300      	movs	r3, #0
 800306e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003070:	f04f 32ff 	mov.w	r2, #4294967295
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	fa02 f303 	lsl.w	r3, r2, r3
 800307a:	43da      	mvns	r2, r3
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	401a      	ands	r2, r3
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003084:	f04f 31ff 	mov.w	r1, #4294967295
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	fa01 f303 	lsl.w	r3, r1, r3
 800308e:	43d9      	mvns	r1, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003094:	4313      	orrs	r3, r2
         );
}
 8003096:	4618      	mov	r0, r3
 8003098:	3724      	adds	r7, #36	@ 0x24
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
	...

080030a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	3b01      	subs	r3, #1
 80030b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030b4:	d301      	bcc.n	80030ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030b6:	2301      	movs	r3, #1
 80030b8:	e00f      	b.n	80030da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030ba:	4a0a      	ldr	r2, [pc, #40]	@ (80030e4 <SysTick_Config+0x40>)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	3b01      	subs	r3, #1
 80030c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030c2:	210f      	movs	r1, #15
 80030c4:	f04f 30ff 	mov.w	r0, #4294967295
 80030c8:	f7ff ff8e 	bl	8002fe8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030cc:	4b05      	ldr	r3, [pc, #20]	@ (80030e4 <SysTick_Config+0x40>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030d2:	4b04      	ldr	r3, [pc, #16]	@ (80030e4 <SysTick_Config+0x40>)
 80030d4:	2207      	movs	r2, #7
 80030d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3708      	adds	r7, #8
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	e000e010 	.word	0xe000e010

080030e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f7ff ff29 	bl	8002f48 <__NVIC_SetPriorityGrouping>
}
 80030f6:	bf00      	nop
 80030f8:	3708      	adds	r7, #8
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030fe:	b580      	push	{r7, lr}
 8003100:	b086      	sub	sp, #24
 8003102:	af00      	add	r7, sp, #0
 8003104:	4603      	mov	r3, r0
 8003106:	60b9      	str	r1, [r7, #8]
 8003108:	607a      	str	r2, [r7, #4]
 800310a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800310c:	f7ff ff40 	bl	8002f90 <__NVIC_GetPriorityGrouping>
 8003110:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	68b9      	ldr	r1, [r7, #8]
 8003116:	6978      	ldr	r0, [r7, #20]
 8003118:	f7ff ff90 	bl	800303c <NVIC_EncodePriority>
 800311c:	4602      	mov	r2, r0
 800311e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003122:	4611      	mov	r1, r2
 8003124:	4618      	mov	r0, r3
 8003126:	f7ff ff5f 	bl	8002fe8 <__NVIC_SetPriority>
}
 800312a:	bf00      	nop
 800312c:	3718      	adds	r7, #24
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b082      	sub	sp, #8
 8003136:	af00      	add	r7, sp, #0
 8003138:	4603      	mov	r3, r0
 800313a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800313c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003140:	4618      	mov	r0, r3
 8003142:	f7ff ff33 	bl	8002fac <__NVIC_EnableIRQ>
}
 8003146:	bf00      	nop
 8003148:	3708      	adds	r7, #8
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}

0800314e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800314e:	b580      	push	{r7, lr}
 8003150:	b082      	sub	sp, #8
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f7ff ffa4 	bl	80030a4 <SysTick_Config>
 800315c:	4603      	mov	r3, r0
}
 800315e:	4618      	mov	r0, r3
 8003160:	3708      	adds	r7, #8
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
	...

08003168 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b086      	sub	sp, #24
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003170:	f7ff feae 	bl	8002ed0 <HAL_GetTick>
 8003174:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d101      	bne.n	8003180 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e316      	b.n	80037ae <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a66      	ldr	r2, [pc, #408]	@ (8003320 <HAL_DMA_Init+0x1b8>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d04a      	beq.n	8003220 <HAL_DMA_Init+0xb8>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a65      	ldr	r2, [pc, #404]	@ (8003324 <HAL_DMA_Init+0x1bc>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d045      	beq.n	8003220 <HAL_DMA_Init+0xb8>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a63      	ldr	r2, [pc, #396]	@ (8003328 <HAL_DMA_Init+0x1c0>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d040      	beq.n	8003220 <HAL_DMA_Init+0xb8>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a62      	ldr	r2, [pc, #392]	@ (800332c <HAL_DMA_Init+0x1c4>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d03b      	beq.n	8003220 <HAL_DMA_Init+0xb8>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a60      	ldr	r2, [pc, #384]	@ (8003330 <HAL_DMA_Init+0x1c8>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d036      	beq.n	8003220 <HAL_DMA_Init+0xb8>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a5f      	ldr	r2, [pc, #380]	@ (8003334 <HAL_DMA_Init+0x1cc>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d031      	beq.n	8003220 <HAL_DMA_Init+0xb8>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a5d      	ldr	r2, [pc, #372]	@ (8003338 <HAL_DMA_Init+0x1d0>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d02c      	beq.n	8003220 <HAL_DMA_Init+0xb8>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a5c      	ldr	r2, [pc, #368]	@ (800333c <HAL_DMA_Init+0x1d4>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d027      	beq.n	8003220 <HAL_DMA_Init+0xb8>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a5a      	ldr	r2, [pc, #360]	@ (8003340 <HAL_DMA_Init+0x1d8>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d022      	beq.n	8003220 <HAL_DMA_Init+0xb8>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a59      	ldr	r2, [pc, #356]	@ (8003344 <HAL_DMA_Init+0x1dc>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d01d      	beq.n	8003220 <HAL_DMA_Init+0xb8>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a57      	ldr	r2, [pc, #348]	@ (8003348 <HAL_DMA_Init+0x1e0>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d018      	beq.n	8003220 <HAL_DMA_Init+0xb8>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a56      	ldr	r2, [pc, #344]	@ (800334c <HAL_DMA_Init+0x1e4>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d013      	beq.n	8003220 <HAL_DMA_Init+0xb8>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a54      	ldr	r2, [pc, #336]	@ (8003350 <HAL_DMA_Init+0x1e8>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d00e      	beq.n	8003220 <HAL_DMA_Init+0xb8>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a53      	ldr	r2, [pc, #332]	@ (8003354 <HAL_DMA_Init+0x1ec>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d009      	beq.n	8003220 <HAL_DMA_Init+0xb8>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a51      	ldr	r2, [pc, #324]	@ (8003358 <HAL_DMA_Init+0x1f0>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d004      	beq.n	8003220 <HAL_DMA_Init+0xb8>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a50      	ldr	r2, [pc, #320]	@ (800335c <HAL_DMA_Init+0x1f4>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d101      	bne.n	8003224 <HAL_DMA_Init+0xbc>
 8003220:	2301      	movs	r3, #1
 8003222:	e000      	b.n	8003226 <HAL_DMA_Init+0xbe>
 8003224:	2300      	movs	r3, #0
 8003226:	2b00      	cmp	r3, #0
 8003228:	f000 813b 	beq.w	80034a2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2202      	movs	r2, #2
 8003230:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a37      	ldr	r2, [pc, #220]	@ (8003320 <HAL_DMA_Init+0x1b8>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d04a      	beq.n	80032dc <HAL_DMA_Init+0x174>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a36      	ldr	r2, [pc, #216]	@ (8003324 <HAL_DMA_Init+0x1bc>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d045      	beq.n	80032dc <HAL_DMA_Init+0x174>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a34      	ldr	r2, [pc, #208]	@ (8003328 <HAL_DMA_Init+0x1c0>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d040      	beq.n	80032dc <HAL_DMA_Init+0x174>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a33      	ldr	r2, [pc, #204]	@ (800332c <HAL_DMA_Init+0x1c4>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d03b      	beq.n	80032dc <HAL_DMA_Init+0x174>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a31      	ldr	r2, [pc, #196]	@ (8003330 <HAL_DMA_Init+0x1c8>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d036      	beq.n	80032dc <HAL_DMA_Init+0x174>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a30      	ldr	r2, [pc, #192]	@ (8003334 <HAL_DMA_Init+0x1cc>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d031      	beq.n	80032dc <HAL_DMA_Init+0x174>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a2e      	ldr	r2, [pc, #184]	@ (8003338 <HAL_DMA_Init+0x1d0>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d02c      	beq.n	80032dc <HAL_DMA_Init+0x174>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a2d      	ldr	r2, [pc, #180]	@ (800333c <HAL_DMA_Init+0x1d4>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d027      	beq.n	80032dc <HAL_DMA_Init+0x174>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a2b      	ldr	r2, [pc, #172]	@ (8003340 <HAL_DMA_Init+0x1d8>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d022      	beq.n	80032dc <HAL_DMA_Init+0x174>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a2a      	ldr	r2, [pc, #168]	@ (8003344 <HAL_DMA_Init+0x1dc>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d01d      	beq.n	80032dc <HAL_DMA_Init+0x174>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a28      	ldr	r2, [pc, #160]	@ (8003348 <HAL_DMA_Init+0x1e0>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d018      	beq.n	80032dc <HAL_DMA_Init+0x174>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a27      	ldr	r2, [pc, #156]	@ (800334c <HAL_DMA_Init+0x1e4>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d013      	beq.n	80032dc <HAL_DMA_Init+0x174>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a25      	ldr	r2, [pc, #148]	@ (8003350 <HAL_DMA_Init+0x1e8>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d00e      	beq.n	80032dc <HAL_DMA_Init+0x174>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a24      	ldr	r2, [pc, #144]	@ (8003354 <HAL_DMA_Init+0x1ec>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d009      	beq.n	80032dc <HAL_DMA_Init+0x174>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a22      	ldr	r2, [pc, #136]	@ (8003358 <HAL_DMA_Init+0x1f0>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d004      	beq.n	80032dc <HAL_DMA_Init+0x174>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a21      	ldr	r2, [pc, #132]	@ (800335c <HAL_DMA_Init+0x1f4>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d108      	bne.n	80032ee <HAL_DMA_Init+0x186>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f022 0201 	bic.w	r2, r2, #1
 80032ea:	601a      	str	r2, [r3, #0]
 80032ec:	e007      	b.n	80032fe <HAL_DMA_Init+0x196>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f022 0201 	bic.w	r2, r2, #1
 80032fc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80032fe:	e02f      	b.n	8003360 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003300:	f7ff fde6 	bl	8002ed0 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	2b05      	cmp	r3, #5
 800330c:	d928      	bls.n	8003360 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2220      	movs	r2, #32
 8003312:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2203      	movs	r2, #3
 8003318:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e246      	b.n	80037ae <HAL_DMA_Init+0x646>
 8003320:	40020010 	.word	0x40020010
 8003324:	40020028 	.word	0x40020028
 8003328:	40020040 	.word	0x40020040
 800332c:	40020058 	.word	0x40020058
 8003330:	40020070 	.word	0x40020070
 8003334:	40020088 	.word	0x40020088
 8003338:	400200a0 	.word	0x400200a0
 800333c:	400200b8 	.word	0x400200b8
 8003340:	40020410 	.word	0x40020410
 8003344:	40020428 	.word	0x40020428
 8003348:	40020440 	.word	0x40020440
 800334c:	40020458 	.word	0x40020458
 8003350:	40020470 	.word	0x40020470
 8003354:	40020488 	.word	0x40020488
 8003358:	400204a0 	.word	0x400204a0
 800335c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1c8      	bne.n	8003300 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003376:	697a      	ldr	r2, [r7, #20]
 8003378:	4b83      	ldr	r3, [pc, #524]	@ (8003588 <HAL_DMA_Init+0x420>)
 800337a:	4013      	ands	r3, r2
 800337c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003386:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003392:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800339e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a1b      	ldr	r3, [r3, #32]
 80033a4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80033a6:	697a      	ldr	r2, [r7, #20]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b0:	2b04      	cmp	r3, #4
 80033b2:	d107      	bne.n	80033c4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033bc:	4313      	orrs	r3, r2
 80033be:	697a      	ldr	r2, [r7, #20]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80033c4:	4b71      	ldr	r3, [pc, #452]	@ (800358c <HAL_DMA_Init+0x424>)
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	4b71      	ldr	r3, [pc, #452]	@ (8003590 <HAL_DMA_Init+0x428>)
 80033ca:	4013      	ands	r3, r2
 80033cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80033d0:	d328      	bcc.n	8003424 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	2b28      	cmp	r3, #40	@ 0x28
 80033d8:	d903      	bls.n	80033e2 <HAL_DMA_Init+0x27a>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	2b2e      	cmp	r3, #46	@ 0x2e
 80033e0:	d917      	bls.n	8003412 <HAL_DMA_Init+0x2aa>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	2b3e      	cmp	r3, #62	@ 0x3e
 80033e8:	d903      	bls.n	80033f2 <HAL_DMA_Init+0x28a>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	2b42      	cmp	r3, #66	@ 0x42
 80033f0:	d90f      	bls.n	8003412 <HAL_DMA_Init+0x2aa>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	2b46      	cmp	r3, #70	@ 0x46
 80033f8:	d903      	bls.n	8003402 <HAL_DMA_Init+0x29a>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	2b48      	cmp	r3, #72	@ 0x48
 8003400:	d907      	bls.n	8003412 <HAL_DMA_Init+0x2aa>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	2b4e      	cmp	r3, #78	@ 0x4e
 8003408:	d905      	bls.n	8003416 <HAL_DMA_Init+0x2ae>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	2b52      	cmp	r3, #82	@ 0x52
 8003410:	d801      	bhi.n	8003416 <HAL_DMA_Init+0x2ae>
 8003412:	2301      	movs	r3, #1
 8003414:	e000      	b.n	8003418 <HAL_DMA_Init+0x2b0>
 8003416:	2300      	movs	r3, #0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d003      	beq.n	8003424 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003422:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	697a      	ldr	r2, [r7, #20]
 800342a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	f023 0307 	bic.w	r3, r3, #7
 800343a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003440:	697a      	ldr	r2, [r7, #20]
 8003442:	4313      	orrs	r3, r2
 8003444:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800344a:	2b04      	cmp	r3, #4
 800344c:	d117      	bne.n	800347e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003452:	697a      	ldr	r2, [r7, #20]
 8003454:	4313      	orrs	r3, r2
 8003456:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800345c:	2b00      	cmp	r3, #0
 800345e:	d00e      	beq.n	800347e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f001 fddb 	bl	800501c <DMA_CheckFifoParam>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d008      	beq.n	800347e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2240      	movs	r2, #64	@ 0x40
 8003470:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2201      	movs	r2, #1
 8003476:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e197      	b.n	80037ae <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	697a      	ldr	r2, [r7, #20]
 8003484:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f001 fd16 	bl	8004eb8 <DMA_CalcBaseAndBitshift>
 800348c:	4603      	mov	r3, r0
 800348e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003494:	f003 031f 	and.w	r3, r3, #31
 8003498:	223f      	movs	r2, #63	@ 0x3f
 800349a:	409a      	lsls	r2, r3
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	609a      	str	r2, [r3, #8]
 80034a0:	e0cd      	b.n	800363e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a3b      	ldr	r2, [pc, #236]	@ (8003594 <HAL_DMA_Init+0x42c>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d022      	beq.n	80034f2 <HAL_DMA_Init+0x38a>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a39      	ldr	r2, [pc, #228]	@ (8003598 <HAL_DMA_Init+0x430>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d01d      	beq.n	80034f2 <HAL_DMA_Init+0x38a>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a38      	ldr	r2, [pc, #224]	@ (800359c <HAL_DMA_Init+0x434>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d018      	beq.n	80034f2 <HAL_DMA_Init+0x38a>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a36      	ldr	r2, [pc, #216]	@ (80035a0 <HAL_DMA_Init+0x438>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d013      	beq.n	80034f2 <HAL_DMA_Init+0x38a>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a35      	ldr	r2, [pc, #212]	@ (80035a4 <HAL_DMA_Init+0x43c>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d00e      	beq.n	80034f2 <HAL_DMA_Init+0x38a>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a33      	ldr	r2, [pc, #204]	@ (80035a8 <HAL_DMA_Init+0x440>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d009      	beq.n	80034f2 <HAL_DMA_Init+0x38a>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a32      	ldr	r2, [pc, #200]	@ (80035ac <HAL_DMA_Init+0x444>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d004      	beq.n	80034f2 <HAL_DMA_Init+0x38a>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a30      	ldr	r2, [pc, #192]	@ (80035b0 <HAL_DMA_Init+0x448>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d101      	bne.n	80034f6 <HAL_DMA_Init+0x38e>
 80034f2:	2301      	movs	r3, #1
 80034f4:	e000      	b.n	80034f8 <HAL_DMA_Init+0x390>
 80034f6:	2300      	movs	r3, #0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	f000 8097 	beq.w	800362c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a24      	ldr	r2, [pc, #144]	@ (8003594 <HAL_DMA_Init+0x42c>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d021      	beq.n	800354c <HAL_DMA_Init+0x3e4>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a22      	ldr	r2, [pc, #136]	@ (8003598 <HAL_DMA_Init+0x430>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d01c      	beq.n	800354c <HAL_DMA_Init+0x3e4>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a21      	ldr	r2, [pc, #132]	@ (800359c <HAL_DMA_Init+0x434>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d017      	beq.n	800354c <HAL_DMA_Init+0x3e4>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a1f      	ldr	r2, [pc, #124]	@ (80035a0 <HAL_DMA_Init+0x438>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d012      	beq.n	800354c <HAL_DMA_Init+0x3e4>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a1e      	ldr	r2, [pc, #120]	@ (80035a4 <HAL_DMA_Init+0x43c>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d00d      	beq.n	800354c <HAL_DMA_Init+0x3e4>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a1c      	ldr	r2, [pc, #112]	@ (80035a8 <HAL_DMA_Init+0x440>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d008      	beq.n	800354c <HAL_DMA_Init+0x3e4>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a1b      	ldr	r2, [pc, #108]	@ (80035ac <HAL_DMA_Init+0x444>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d003      	beq.n	800354c <HAL_DMA_Init+0x3e4>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a19      	ldr	r2, [pc, #100]	@ (80035b0 <HAL_DMA_Init+0x448>)
 800354a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2202      	movs	r2, #2
 8003550:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003564:	697a      	ldr	r2, [r7, #20]
 8003566:	4b13      	ldr	r3, [pc, #76]	@ (80035b4 <HAL_DMA_Init+0x44c>)
 8003568:	4013      	ands	r3, r2
 800356a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	2b40      	cmp	r3, #64	@ 0x40
 8003572:	d021      	beq.n	80035b8 <HAL_DMA_Init+0x450>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	2b80      	cmp	r3, #128	@ 0x80
 800357a:	d102      	bne.n	8003582 <HAL_DMA_Init+0x41a>
 800357c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003580:	e01b      	b.n	80035ba <HAL_DMA_Init+0x452>
 8003582:	2300      	movs	r3, #0
 8003584:	e019      	b.n	80035ba <HAL_DMA_Init+0x452>
 8003586:	bf00      	nop
 8003588:	fe10803f 	.word	0xfe10803f
 800358c:	5c001000 	.word	0x5c001000
 8003590:	ffff0000 	.word	0xffff0000
 8003594:	58025408 	.word	0x58025408
 8003598:	5802541c 	.word	0x5802541c
 800359c:	58025430 	.word	0x58025430
 80035a0:	58025444 	.word	0x58025444
 80035a4:	58025458 	.word	0x58025458
 80035a8:	5802546c 	.word	0x5802546c
 80035ac:	58025480 	.word	0x58025480
 80035b0:	58025494 	.word	0x58025494
 80035b4:	fffe000f 	.word	0xfffe000f
 80035b8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	68d2      	ldr	r2, [r2, #12]
 80035be:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80035c0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80035c8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80035d0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	699b      	ldr	r3, [r3, #24]
 80035d6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80035d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	69db      	ldr	r3, [r3, #28]
 80035de:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80035e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a1b      	ldr	r3, [r3, #32]
 80035e6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80035e8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80035ea:	697a      	ldr	r2, [r7, #20]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	697a      	ldr	r2, [r7, #20]
 80035f6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	461a      	mov	r2, r3
 80035fe:	4b6e      	ldr	r3, [pc, #440]	@ (80037b8 <HAL_DMA_Init+0x650>)
 8003600:	4413      	add	r3, r2
 8003602:	4a6e      	ldr	r2, [pc, #440]	@ (80037bc <HAL_DMA_Init+0x654>)
 8003604:	fba2 2303 	umull	r2, r3, r2, r3
 8003608:	091b      	lsrs	r3, r3, #4
 800360a:	009a      	lsls	r2, r3, #2
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f001 fc51 	bl	8004eb8 <DMA_CalcBaseAndBitshift>
 8003616:	4603      	mov	r3, r0
 8003618:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800361e:	f003 031f 	and.w	r3, r3, #31
 8003622:	2201      	movs	r2, #1
 8003624:	409a      	lsls	r2, r3
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	605a      	str	r2, [r3, #4]
 800362a:	e008      	b.n	800363e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2240      	movs	r2, #64	@ 0x40
 8003630:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2203      	movs	r2, #3
 8003636:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e0b7      	b.n	80037ae <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a5f      	ldr	r2, [pc, #380]	@ (80037c0 <HAL_DMA_Init+0x658>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d072      	beq.n	800372e <HAL_DMA_Init+0x5c6>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a5d      	ldr	r2, [pc, #372]	@ (80037c4 <HAL_DMA_Init+0x65c>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d06d      	beq.n	800372e <HAL_DMA_Init+0x5c6>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a5c      	ldr	r2, [pc, #368]	@ (80037c8 <HAL_DMA_Init+0x660>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d068      	beq.n	800372e <HAL_DMA_Init+0x5c6>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a5a      	ldr	r2, [pc, #360]	@ (80037cc <HAL_DMA_Init+0x664>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d063      	beq.n	800372e <HAL_DMA_Init+0x5c6>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a59      	ldr	r2, [pc, #356]	@ (80037d0 <HAL_DMA_Init+0x668>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d05e      	beq.n	800372e <HAL_DMA_Init+0x5c6>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a57      	ldr	r2, [pc, #348]	@ (80037d4 <HAL_DMA_Init+0x66c>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d059      	beq.n	800372e <HAL_DMA_Init+0x5c6>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a56      	ldr	r2, [pc, #344]	@ (80037d8 <HAL_DMA_Init+0x670>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d054      	beq.n	800372e <HAL_DMA_Init+0x5c6>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a54      	ldr	r2, [pc, #336]	@ (80037dc <HAL_DMA_Init+0x674>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d04f      	beq.n	800372e <HAL_DMA_Init+0x5c6>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a53      	ldr	r2, [pc, #332]	@ (80037e0 <HAL_DMA_Init+0x678>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d04a      	beq.n	800372e <HAL_DMA_Init+0x5c6>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a51      	ldr	r2, [pc, #324]	@ (80037e4 <HAL_DMA_Init+0x67c>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d045      	beq.n	800372e <HAL_DMA_Init+0x5c6>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a50      	ldr	r2, [pc, #320]	@ (80037e8 <HAL_DMA_Init+0x680>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d040      	beq.n	800372e <HAL_DMA_Init+0x5c6>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a4e      	ldr	r2, [pc, #312]	@ (80037ec <HAL_DMA_Init+0x684>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d03b      	beq.n	800372e <HAL_DMA_Init+0x5c6>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a4d      	ldr	r2, [pc, #308]	@ (80037f0 <HAL_DMA_Init+0x688>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d036      	beq.n	800372e <HAL_DMA_Init+0x5c6>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a4b      	ldr	r2, [pc, #300]	@ (80037f4 <HAL_DMA_Init+0x68c>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d031      	beq.n	800372e <HAL_DMA_Init+0x5c6>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a4a      	ldr	r2, [pc, #296]	@ (80037f8 <HAL_DMA_Init+0x690>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d02c      	beq.n	800372e <HAL_DMA_Init+0x5c6>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a48      	ldr	r2, [pc, #288]	@ (80037fc <HAL_DMA_Init+0x694>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d027      	beq.n	800372e <HAL_DMA_Init+0x5c6>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a47      	ldr	r2, [pc, #284]	@ (8003800 <HAL_DMA_Init+0x698>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d022      	beq.n	800372e <HAL_DMA_Init+0x5c6>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a45      	ldr	r2, [pc, #276]	@ (8003804 <HAL_DMA_Init+0x69c>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d01d      	beq.n	800372e <HAL_DMA_Init+0x5c6>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a44      	ldr	r2, [pc, #272]	@ (8003808 <HAL_DMA_Init+0x6a0>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d018      	beq.n	800372e <HAL_DMA_Init+0x5c6>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a42      	ldr	r2, [pc, #264]	@ (800380c <HAL_DMA_Init+0x6a4>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d013      	beq.n	800372e <HAL_DMA_Init+0x5c6>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a41      	ldr	r2, [pc, #260]	@ (8003810 <HAL_DMA_Init+0x6a8>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d00e      	beq.n	800372e <HAL_DMA_Init+0x5c6>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a3f      	ldr	r2, [pc, #252]	@ (8003814 <HAL_DMA_Init+0x6ac>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d009      	beq.n	800372e <HAL_DMA_Init+0x5c6>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a3e      	ldr	r2, [pc, #248]	@ (8003818 <HAL_DMA_Init+0x6b0>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d004      	beq.n	800372e <HAL_DMA_Init+0x5c6>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a3c      	ldr	r2, [pc, #240]	@ (800381c <HAL_DMA_Init+0x6b4>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d101      	bne.n	8003732 <HAL_DMA_Init+0x5ca>
 800372e:	2301      	movs	r3, #1
 8003730:	e000      	b.n	8003734 <HAL_DMA_Init+0x5cc>
 8003732:	2300      	movs	r3, #0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d032      	beq.n	800379e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f001 fceb 	bl	8005114 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	2b80      	cmp	r3, #128	@ 0x80
 8003744:	d102      	bne.n	800374c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685a      	ldr	r2, [r3, #4]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003754:	b2d2      	uxtb	r2, r2
 8003756:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003760:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d010      	beq.n	800378c <HAL_DMA_Init+0x624>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	2b08      	cmp	r3, #8
 8003770:	d80c      	bhi.n	800378c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f001 fd68 	bl	8005248 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800377c:	2200      	movs	r2, #0
 800377e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003788:	605a      	str	r2, [r3, #4]
 800378a:	e008      	b.n	800379e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3718      	adds	r7, #24
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	a7fdabf8 	.word	0xa7fdabf8
 80037bc:	cccccccd 	.word	0xcccccccd
 80037c0:	40020010 	.word	0x40020010
 80037c4:	40020028 	.word	0x40020028
 80037c8:	40020040 	.word	0x40020040
 80037cc:	40020058 	.word	0x40020058
 80037d0:	40020070 	.word	0x40020070
 80037d4:	40020088 	.word	0x40020088
 80037d8:	400200a0 	.word	0x400200a0
 80037dc:	400200b8 	.word	0x400200b8
 80037e0:	40020410 	.word	0x40020410
 80037e4:	40020428 	.word	0x40020428
 80037e8:	40020440 	.word	0x40020440
 80037ec:	40020458 	.word	0x40020458
 80037f0:	40020470 	.word	0x40020470
 80037f4:	40020488 	.word	0x40020488
 80037f8:	400204a0 	.word	0x400204a0
 80037fc:	400204b8 	.word	0x400204b8
 8003800:	58025408 	.word	0x58025408
 8003804:	5802541c 	.word	0x5802541c
 8003808:	58025430 	.word	0x58025430
 800380c:	58025444 	.word	0x58025444
 8003810:	58025458 	.word	0x58025458
 8003814:	5802546c 	.word	0x5802546c
 8003818:	58025480 	.word	0x58025480
 800381c:	58025494 	.word	0x58025494

08003820 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b086      	sub	sp, #24
 8003824:	af00      	add	r7, sp, #0
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	607a      	str	r2, [r7, #4]
 800382c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800382e:	2300      	movs	r3, #0
 8003830:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d101      	bne.n	800383c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e226      	b.n	8003c8a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003842:	2b01      	cmp	r3, #1
 8003844:	d101      	bne.n	800384a <HAL_DMA_Start_IT+0x2a>
 8003846:	2302      	movs	r3, #2
 8003848:	e21f      	b.n	8003c8a <HAL_DMA_Start_IT+0x46a>
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2201      	movs	r2, #1
 800384e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2b01      	cmp	r3, #1
 800385c:	f040 820a 	bne.w	8003c74 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2202      	movs	r2, #2
 8003864:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2200      	movs	r2, #0
 800386c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a68      	ldr	r2, [pc, #416]	@ (8003a14 <HAL_DMA_Start_IT+0x1f4>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d04a      	beq.n	800390e <HAL_DMA_Start_IT+0xee>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a66      	ldr	r2, [pc, #408]	@ (8003a18 <HAL_DMA_Start_IT+0x1f8>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d045      	beq.n	800390e <HAL_DMA_Start_IT+0xee>
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a65      	ldr	r2, [pc, #404]	@ (8003a1c <HAL_DMA_Start_IT+0x1fc>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d040      	beq.n	800390e <HAL_DMA_Start_IT+0xee>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a63      	ldr	r2, [pc, #396]	@ (8003a20 <HAL_DMA_Start_IT+0x200>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d03b      	beq.n	800390e <HAL_DMA_Start_IT+0xee>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a62      	ldr	r2, [pc, #392]	@ (8003a24 <HAL_DMA_Start_IT+0x204>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d036      	beq.n	800390e <HAL_DMA_Start_IT+0xee>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a60      	ldr	r2, [pc, #384]	@ (8003a28 <HAL_DMA_Start_IT+0x208>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d031      	beq.n	800390e <HAL_DMA_Start_IT+0xee>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a5f      	ldr	r2, [pc, #380]	@ (8003a2c <HAL_DMA_Start_IT+0x20c>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d02c      	beq.n	800390e <HAL_DMA_Start_IT+0xee>
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a5d      	ldr	r2, [pc, #372]	@ (8003a30 <HAL_DMA_Start_IT+0x210>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d027      	beq.n	800390e <HAL_DMA_Start_IT+0xee>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a5c      	ldr	r2, [pc, #368]	@ (8003a34 <HAL_DMA_Start_IT+0x214>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d022      	beq.n	800390e <HAL_DMA_Start_IT+0xee>
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a5a      	ldr	r2, [pc, #360]	@ (8003a38 <HAL_DMA_Start_IT+0x218>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d01d      	beq.n	800390e <HAL_DMA_Start_IT+0xee>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a59      	ldr	r2, [pc, #356]	@ (8003a3c <HAL_DMA_Start_IT+0x21c>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d018      	beq.n	800390e <HAL_DMA_Start_IT+0xee>
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a57      	ldr	r2, [pc, #348]	@ (8003a40 <HAL_DMA_Start_IT+0x220>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d013      	beq.n	800390e <HAL_DMA_Start_IT+0xee>
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a56      	ldr	r2, [pc, #344]	@ (8003a44 <HAL_DMA_Start_IT+0x224>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d00e      	beq.n	800390e <HAL_DMA_Start_IT+0xee>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a54      	ldr	r2, [pc, #336]	@ (8003a48 <HAL_DMA_Start_IT+0x228>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d009      	beq.n	800390e <HAL_DMA_Start_IT+0xee>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a53      	ldr	r2, [pc, #332]	@ (8003a4c <HAL_DMA_Start_IT+0x22c>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d004      	beq.n	800390e <HAL_DMA_Start_IT+0xee>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a51      	ldr	r2, [pc, #324]	@ (8003a50 <HAL_DMA_Start_IT+0x230>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d108      	bne.n	8003920 <HAL_DMA_Start_IT+0x100>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f022 0201 	bic.w	r2, r2, #1
 800391c:	601a      	str	r2, [r3, #0]
 800391e:	e007      	b.n	8003930 <HAL_DMA_Start_IT+0x110>
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f022 0201 	bic.w	r2, r2, #1
 800392e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	68b9      	ldr	r1, [r7, #8]
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	f001 f912 	bl	8004b60 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a34      	ldr	r2, [pc, #208]	@ (8003a14 <HAL_DMA_Start_IT+0x1f4>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d04a      	beq.n	80039dc <HAL_DMA_Start_IT+0x1bc>
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a33      	ldr	r2, [pc, #204]	@ (8003a18 <HAL_DMA_Start_IT+0x1f8>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d045      	beq.n	80039dc <HAL_DMA_Start_IT+0x1bc>
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a31      	ldr	r2, [pc, #196]	@ (8003a1c <HAL_DMA_Start_IT+0x1fc>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d040      	beq.n	80039dc <HAL_DMA_Start_IT+0x1bc>
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a30      	ldr	r2, [pc, #192]	@ (8003a20 <HAL_DMA_Start_IT+0x200>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d03b      	beq.n	80039dc <HAL_DMA_Start_IT+0x1bc>
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a2e      	ldr	r2, [pc, #184]	@ (8003a24 <HAL_DMA_Start_IT+0x204>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d036      	beq.n	80039dc <HAL_DMA_Start_IT+0x1bc>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a2d      	ldr	r2, [pc, #180]	@ (8003a28 <HAL_DMA_Start_IT+0x208>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d031      	beq.n	80039dc <HAL_DMA_Start_IT+0x1bc>
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a2b      	ldr	r2, [pc, #172]	@ (8003a2c <HAL_DMA_Start_IT+0x20c>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d02c      	beq.n	80039dc <HAL_DMA_Start_IT+0x1bc>
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a2a      	ldr	r2, [pc, #168]	@ (8003a30 <HAL_DMA_Start_IT+0x210>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d027      	beq.n	80039dc <HAL_DMA_Start_IT+0x1bc>
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a28      	ldr	r2, [pc, #160]	@ (8003a34 <HAL_DMA_Start_IT+0x214>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d022      	beq.n	80039dc <HAL_DMA_Start_IT+0x1bc>
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a27      	ldr	r2, [pc, #156]	@ (8003a38 <HAL_DMA_Start_IT+0x218>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d01d      	beq.n	80039dc <HAL_DMA_Start_IT+0x1bc>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a25      	ldr	r2, [pc, #148]	@ (8003a3c <HAL_DMA_Start_IT+0x21c>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d018      	beq.n	80039dc <HAL_DMA_Start_IT+0x1bc>
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a24      	ldr	r2, [pc, #144]	@ (8003a40 <HAL_DMA_Start_IT+0x220>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d013      	beq.n	80039dc <HAL_DMA_Start_IT+0x1bc>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a22      	ldr	r2, [pc, #136]	@ (8003a44 <HAL_DMA_Start_IT+0x224>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d00e      	beq.n	80039dc <HAL_DMA_Start_IT+0x1bc>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a21      	ldr	r2, [pc, #132]	@ (8003a48 <HAL_DMA_Start_IT+0x228>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d009      	beq.n	80039dc <HAL_DMA_Start_IT+0x1bc>
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a1f      	ldr	r2, [pc, #124]	@ (8003a4c <HAL_DMA_Start_IT+0x22c>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d004      	beq.n	80039dc <HAL_DMA_Start_IT+0x1bc>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a1e      	ldr	r2, [pc, #120]	@ (8003a50 <HAL_DMA_Start_IT+0x230>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d101      	bne.n	80039e0 <HAL_DMA_Start_IT+0x1c0>
 80039dc:	2301      	movs	r3, #1
 80039de:	e000      	b.n	80039e2 <HAL_DMA_Start_IT+0x1c2>
 80039e0:	2300      	movs	r3, #0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d036      	beq.n	8003a54 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f023 021e 	bic.w	r2, r3, #30
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f042 0216 	orr.w	r2, r2, #22
 80039f8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d03e      	beq.n	8003a80 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f042 0208 	orr.w	r2, r2, #8
 8003a10:	601a      	str	r2, [r3, #0]
 8003a12:	e035      	b.n	8003a80 <HAL_DMA_Start_IT+0x260>
 8003a14:	40020010 	.word	0x40020010
 8003a18:	40020028 	.word	0x40020028
 8003a1c:	40020040 	.word	0x40020040
 8003a20:	40020058 	.word	0x40020058
 8003a24:	40020070 	.word	0x40020070
 8003a28:	40020088 	.word	0x40020088
 8003a2c:	400200a0 	.word	0x400200a0
 8003a30:	400200b8 	.word	0x400200b8
 8003a34:	40020410 	.word	0x40020410
 8003a38:	40020428 	.word	0x40020428
 8003a3c:	40020440 	.word	0x40020440
 8003a40:	40020458 	.word	0x40020458
 8003a44:	40020470 	.word	0x40020470
 8003a48:	40020488 	.word	0x40020488
 8003a4c:	400204a0 	.word	0x400204a0
 8003a50:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f023 020e 	bic.w	r2, r3, #14
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f042 020a 	orr.w	r2, r2, #10
 8003a66:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d007      	beq.n	8003a80 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f042 0204 	orr.w	r2, r2, #4
 8003a7e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a83      	ldr	r2, [pc, #524]	@ (8003c94 <HAL_DMA_Start_IT+0x474>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d072      	beq.n	8003b70 <HAL_DMA_Start_IT+0x350>
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a82      	ldr	r2, [pc, #520]	@ (8003c98 <HAL_DMA_Start_IT+0x478>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d06d      	beq.n	8003b70 <HAL_DMA_Start_IT+0x350>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a80      	ldr	r2, [pc, #512]	@ (8003c9c <HAL_DMA_Start_IT+0x47c>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d068      	beq.n	8003b70 <HAL_DMA_Start_IT+0x350>
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a7f      	ldr	r2, [pc, #508]	@ (8003ca0 <HAL_DMA_Start_IT+0x480>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d063      	beq.n	8003b70 <HAL_DMA_Start_IT+0x350>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a7d      	ldr	r2, [pc, #500]	@ (8003ca4 <HAL_DMA_Start_IT+0x484>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d05e      	beq.n	8003b70 <HAL_DMA_Start_IT+0x350>
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a7c      	ldr	r2, [pc, #496]	@ (8003ca8 <HAL_DMA_Start_IT+0x488>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d059      	beq.n	8003b70 <HAL_DMA_Start_IT+0x350>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a7a      	ldr	r2, [pc, #488]	@ (8003cac <HAL_DMA_Start_IT+0x48c>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d054      	beq.n	8003b70 <HAL_DMA_Start_IT+0x350>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a79      	ldr	r2, [pc, #484]	@ (8003cb0 <HAL_DMA_Start_IT+0x490>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d04f      	beq.n	8003b70 <HAL_DMA_Start_IT+0x350>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a77      	ldr	r2, [pc, #476]	@ (8003cb4 <HAL_DMA_Start_IT+0x494>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d04a      	beq.n	8003b70 <HAL_DMA_Start_IT+0x350>
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a76      	ldr	r2, [pc, #472]	@ (8003cb8 <HAL_DMA_Start_IT+0x498>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d045      	beq.n	8003b70 <HAL_DMA_Start_IT+0x350>
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a74      	ldr	r2, [pc, #464]	@ (8003cbc <HAL_DMA_Start_IT+0x49c>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d040      	beq.n	8003b70 <HAL_DMA_Start_IT+0x350>
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a73      	ldr	r2, [pc, #460]	@ (8003cc0 <HAL_DMA_Start_IT+0x4a0>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d03b      	beq.n	8003b70 <HAL_DMA_Start_IT+0x350>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a71      	ldr	r2, [pc, #452]	@ (8003cc4 <HAL_DMA_Start_IT+0x4a4>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d036      	beq.n	8003b70 <HAL_DMA_Start_IT+0x350>
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a70      	ldr	r2, [pc, #448]	@ (8003cc8 <HAL_DMA_Start_IT+0x4a8>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d031      	beq.n	8003b70 <HAL_DMA_Start_IT+0x350>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a6e      	ldr	r2, [pc, #440]	@ (8003ccc <HAL_DMA_Start_IT+0x4ac>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d02c      	beq.n	8003b70 <HAL_DMA_Start_IT+0x350>
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a6d      	ldr	r2, [pc, #436]	@ (8003cd0 <HAL_DMA_Start_IT+0x4b0>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d027      	beq.n	8003b70 <HAL_DMA_Start_IT+0x350>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a6b      	ldr	r2, [pc, #428]	@ (8003cd4 <HAL_DMA_Start_IT+0x4b4>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d022      	beq.n	8003b70 <HAL_DMA_Start_IT+0x350>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a6a      	ldr	r2, [pc, #424]	@ (8003cd8 <HAL_DMA_Start_IT+0x4b8>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d01d      	beq.n	8003b70 <HAL_DMA_Start_IT+0x350>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a68      	ldr	r2, [pc, #416]	@ (8003cdc <HAL_DMA_Start_IT+0x4bc>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d018      	beq.n	8003b70 <HAL_DMA_Start_IT+0x350>
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a67      	ldr	r2, [pc, #412]	@ (8003ce0 <HAL_DMA_Start_IT+0x4c0>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d013      	beq.n	8003b70 <HAL_DMA_Start_IT+0x350>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a65      	ldr	r2, [pc, #404]	@ (8003ce4 <HAL_DMA_Start_IT+0x4c4>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d00e      	beq.n	8003b70 <HAL_DMA_Start_IT+0x350>
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a64      	ldr	r2, [pc, #400]	@ (8003ce8 <HAL_DMA_Start_IT+0x4c8>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d009      	beq.n	8003b70 <HAL_DMA_Start_IT+0x350>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a62      	ldr	r2, [pc, #392]	@ (8003cec <HAL_DMA_Start_IT+0x4cc>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d004      	beq.n	8003b70 <HAL_DMA_Start_IT+0x350>
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a61      	ldr	r2, [pc, #388]	@ (8003cf0 <HAL_DMA_Start_IT+0x4d0>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d101      	bne.n	8003b74 <HAL_DMA_Start_IT+0x354>
 8003b70:	2301      	movs	r3, #1
 8003b72:	e000      	b.n	8003b76 <HAL_DMA_Start_IT+0x356>
 8003b74:	2300      	movs	r3, #0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d01a      	beq.n	8003bb0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d007      	beq.n	8003b98 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b92:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b96:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d007      	beq.n	8003bb0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003baa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003bae:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a37      	ldr	r2, [pc, #220]	@ (8003c94 <HAL_DMA_Start_IT+0x474>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d04a      	beq.n	8003c50 <HAL_DMA_Start_IT+0x430>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a36      	ldr	r2, [pc, #216]	@ (8003c98 <HAL_DMA_Start_IT+0x478>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d045      	beq.n	8003c50 <HAL_DMA_Start_IT+0x430>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a34      	ldr	r2, [pc, #208]	@ (8003c9c <HAL_DMA_Start_IT+0x47c>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d040      	beq.n	8003c50 <HAL_DMA_Start_IT+0x430>
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a33      	ldr	r2, [pc, #204]	@ (8003ca0 <HAL_DMA_Start_IT+0x480>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d03b      	beq.n	8003c50 <HAL_DMA_Start_IT+0x430>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a31      	ldr	r2, [pc, #196]	@ (8003ca4 <HAL_DMA_Start_IT+0x484>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d036      	beq.n	8003c50 <HAL_DMA_Start_IT+0x430>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a30      	ldr	r2, [pc, #192]	@ (8003ca8 <HAL_DMA_Start_IT+0x488>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d031      	beq.n	8003c50 <HAL_DMA_Start_IT+0x430>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a2e      	ldr	r2, [pc, #184]	@ (8003cac <HAL_DMA_Start_IT+0x48c>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d02c      	beq.n	8003c50 <HAL_DMA_Start_IT+0x430>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a2d      	ldr	r2, [pc, #180]	@ (8003cb0 <HAL_DMA_Start_IT+0x490>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d027      	beq.n	8003c50 <HAL_DMA_Start_IT+0x430>
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a2b      	ldr	r2, [pc, #172]	@ (8003cb4 <HAL_DMA_Start_IT+0x494>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d022      	beq.n	8003c50 <HAL_DMA_Start_IT+0x430>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a2a      	ldr	r2, [pc, #168]	@ (8003cb8 <HAL_DMA_Start_IT+0x498>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d01d      	beq.n	8003c50 <HAL_DMA_Start_IT+0x430>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a28      	ldr	r2, [pc, #160]	@ (8003cbc <HAL_DMA_Start_IT+0x49c>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d018      	beq.n	8003c50 <HAL_DMA_Start_IT+0x430>
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a27      	ldr	r2, [pc, #156]	@ (8003cc0 <HAL_DMA_Start_IT+0x4a0>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d013      	beq.n	8003c50 <HAL_DMA_Start_IT+0x430>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a25      	ldr	r2, [pc, #148]	@ (8003cc4 <HAL_DMA_Start_IT+0x4a4>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d00e      	beq.n	8003c50 <HAL_DMA_Start_IT+0x430>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a24      	ldr	r2, [pc, #144]	@ (8003cc8 <HAL_DMA_Start_IT+0x4a8>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d009      	beq.n	8003c50 <HAL_DMA_Start_IT+0x430>
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a22      	ldr	r2, [pc, #136]	@ (8003ccc <HAL_DMA_Start_IT+0x4ac>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d004      	beq.n	8003c50 <HAL_DMA_Start_IT+0x430>
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a21      	ldr	r2, [pc, #132]	@ (8003cd0 <HAL_DMA_Start_IT+0x4b0>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d108      	bne.n	8003c62 <HAL_DMA_Start_IT+0x442>
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f042 0201 	orr.w	r2, r2, #1
 8003c5e:	601a      	str	r2, [r3, #0]
 8003c60:	e012      	b.n	8003c88 <HAL_DMA_Start_IT+0x468>
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f042 0201 	orr.w	r2, r2, #1
 8003c70:	601a      	str	r2, [r3, #0]
 8003c72:	e009      	b.n	8003c88 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003c7a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003c88:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3718      	adds	r7, #24
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	40020010 	.word	0x40020010
 8003c98:	40020028 	.word	0x40020028
 8003c9c:	40020040 	.word	0x40020040
 8003ca0:	40020058 	.word	0x40020058
 8003ca4:	40020070 	.word	0x40020070
 8003ca8:	40020088 	.word	0x40020088
 8003cac:	400200a0 	.word	0x400200a0
 8003cb0:	400200b8 	.word	0x400200b8
 8003cb4:	40020410 	.word	0x40020410
 8003cb8:	40020428 	.word	0x40020428
 8003cbc:	40020440 	.word	0x40020440
 8003cc0:	40020458 	.word	0x40020458
 8003cc4:	40020470 	.word	0x40020470
 8003cc8:	40020488 	.word	0x40020488
 8003ccc:	400204a0 	.word	0x400204a0
 8003cd0:	400204b8 	.word	0x400204b8
 8003cd4:	58025408 	.word	0x58025408
 8003cd8:	5802541c 	.word	0x5802541c
 8003cdc:	58025430 	.word	0x58025430
 8003ce0:	58025444 	.word	0x58025444
 8003ce4:	58025458 	.word	0x58025458
 8003ce8:	5802546c 	.word	0x5802546c
 8003cec:	58025480 	.word	0x58025480
 8003cf0:	58025494 	.word	0x58025494

08003cf4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b08a      	sub	sp, #40	@ 0x28
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003d00:	4b67      	ldr	r3, [pc, #412]	@ (8003ea0 <HAL_DMA_IRQHandler+0x1ac>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a67      	ldr	r2, [pc, #412]	@ (8003ea4 <HAL_DMA_IRQHandler+0x1b0>)
 8003d06:	fba2 2303 	umull	r2, r3, r2, r3
 8003d0a:	0a9b      	lsrs	r3, r3, #10
 8003d0c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d12:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d18:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003d1a:	6a3b      	ldr	r3, [r7, #32]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a5f      	ldr	r2, [pc, #380]	@ (8003ea8 <HAL_DMA_IRQHandler+0x1b4>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d04a      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0xd2>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a5d      	ldr	r2, [pc, #372]	@ (8003eac <HAL_DMA_IRQHandler+0x1b8>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d045      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0xd2>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a5c      	ldr	r2, [pc, #368]	@ (8003eb0 <HAL_DMA_IRQHandler+0x1bc>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d040      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0xd2>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a5a      	ldr	r2, [pc, #360]	@ (8003eb4 <HAL_DMA_IRQHandler+0x1c0>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d03b      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0xd2>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a59      	ldr	r2, [pc, #356]	@ (8003eb8 <HAL_DMA_IRQHandler+0x1c4>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d036      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0xd2>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a57      	ldr	r2, [pc, #348]	@ (8003ebc <HAL_DMA_IRQHandler+0x1c8>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d031      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0xd2>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a56      	ldr	r2, [pc, #344]	@ (8003ec0 <HAL_DMA_IRQHandler+0x1cc>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d02c      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0xd2>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a54      	ldr	r2, [pc, #336]	@ (8003ec4 <HAL_DMA_IRQHandler+0x1d0>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d027      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0xd2>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a53      	ldr	r2, [pc, #332]	@ (8003ec8 <HAL_DMA_IRQHandler+0x1d4>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d022      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0xd2>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a51      	ldr	r2, [pc, #324]	@ (8003ecc <HAL_DMA_IRQHandler+0x1d8>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d01d      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0xd2>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a50      	ldr	r2, [pc, #320]	@ (8003ed0 <HAL_DMA_IRQHandler+0x1dc>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d018      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0xd2>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a4e      	ldr	r2, [pc, #312]	@ (8003ed4 <HAL_DMA_IRQHandler+0x1e0>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d013      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0xd2>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a4d      	ldr	r2, [pc, #308]	@ (8003ed8 <HAL_DMA_IRQHandler+0x1e4>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d00e      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0xd2>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a4b      	ldr	r2, [pc, #300]	@ (8003edc <HAL_DMA_IRQHandler+0x1e8>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d009      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0xd2>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a4a      	ldr	r2, [pc, #296]	@ (8003ee0 <HAL_DMA_IRQHandler+0x1ec>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d004      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0xd2>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a48      	ldr	r2, [pc, #288]	@ (8003ee4 <HAL_DMA_IRQHandler+0x1f0>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d101      	bne.n	8003dca <HAL_DMA_IRQHandler+0xd6>
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e000      	b.n	8003dcc <HAL_DMA_IRQHandler+0xd8>
 8003dca:	2300      	movs	r3, #0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	f000 842b 	beq.w	8004628 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dd6:	f003 031f 	and.w	r3, r3, #31
 8003dda:	2208      	movs	r2, #8
 8003ddc:	409a      	lsls	r2, r3
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	4013      	ands	r3, r2
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	f000 80a2 	beq.w	8003f2c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a2e      	ldr	r2, [pc, #184]	@ (8003ea8 <HAL_DMA_IRQHandler+0x1b4>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d04a      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x194>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a2d      	ldr	r2, [pc, #180]	@ (8003eac <HAL_DMA_IRQHandler+0x1b8>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d045      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x194>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a2b      	ldr	r2, [pc, #172]	@ (8003eb0 <HAL_DMA_IRQHandler+0x1bc>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d040      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x194>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a2a      	ldr	r2, [pc, #168]	@ (8003eb4 <HAL_DMA_IRQHandler+0x1c0>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d03b      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x194>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a28      	ldr	r2, [pc, #160]	@ (8003eb8 <HAL_DMA_IRQHandler+0x1c4>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d036      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x194>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a27      	ldr	r2, [pc, #156]	@ (8003ebc <HAL_DMA_IRQHandler+0x1c8>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d031      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x194>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a25      	ldr	r2, [pc, #148]	@ (8003ec0 <HAL_DMA_IRQHandler+0x1cc>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d02c      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x194>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a24      	ldr	r2, [pc, #144]	@ (8003ec4 <HAL_DMA_IRQHandler+0x1d0>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d027      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x194>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a22      	ldr	r2, [pc, #136]	@ (8003ec8 <HAL_DMA_IRQHandler+0x1d4>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d022      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x194>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a21      	ldr	r2, [pc, #132]	@ (8003ecc <HAL_DMA_IRQHandler+0x1d8>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d01d      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x194>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a1f      	ldr	r2, [pc, #124]	@ (8003ed0 <HAL_DMA_IRQHandler+0x1dc>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d018      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x194>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a1e      	ldr	r2, [pc, #120]	@ (8003ed4 <HAL_DMA_IRQHandler+0x1e0>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d013      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x194>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a1c      	ldr	r2, [pc, #112]	@ (8003ed8 <HAL_DMA_IRQHandler+0x1e4>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d00e      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x194>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a1b      	ldr	r2, [pc, #108]	@ (8003edc <HAL_DMA_IRQHandler+0x1e8>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d009      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x194>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a19      	ldr	r2, [pc, #100]	@ (8003ee0 <HAL_DMA_IRQHandler+0x1ec>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d004      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x194>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a18      	ldr	r2, [pc, #96]	@ (8003ee4 <HAL_DMA_IRQHandler+0x1f0>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d12f      	bne.n	8003ee8 <HAL_DMA_IRQHandler+0x1f4>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0304 	and.w	r3, r3, #4
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	bf14      	ite	ne
 8003e96:	2301      	movne	r3, #1
 8003e98:	2300      	moveq	r3, #0
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	e02e      	b.n	8003efc <HAL_DMA_IRQHandler+0x208>
 8003e9e:	bf00      	nop
 8003ea0:	24000000 	.word	0x24000000
 8003ea4:	1b4e81b5 	.word	0x1b4e81b5
 8003ea8:	40020010 	.word	0x40020010
 8003eac:	40020028 	.word	0x40020028
 8003eb0:	40020040 	.word	0x40020040
 8003eb4:	40020058 	.word	0x40020058
 8003eb8:	40020070 	.word	0x40020070
 8003ebc:	40020088 	.word	0x40020088
 8003ec0:	400200a0 	.word	0x400200a0
 8003ec4:	400200b8 	.word	0x400200b8
 8003ec8:	40020410 	.word	0x40020410
 8003ecc:	40020428 	.word	0x40020428
 8003ed0:	40020440 	.word	0x40020440
 8003ed4:	40020458 	.word	0x40020458
 8003ed8:	40020470 	.word	0x40020470
 8003edc:	40020488 	.word	0x40020488
 8003ee0:	400204a0 	.word	0x400204a0
 8003ee4:	400204b8 	.word	0x400204b8
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0308 	and.w	r3, r3, #8
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	bf14      	ite	ne
 8003ef6:	2301      	movne	r3, #1
 8003ef8:	2300      	moveq	r3, #0
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d015      	beq.n	8003f2c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f022 0204 	bic.w	r2, r2, #4
 8003f0e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f14:	f003 031f 	and.w	r3, r3, #31
 8003f18:	2208      	movs	r2, #8
 8003f1a:	409a      	lsls	r2, r3
 8003f1c:	6a3b      	ldr	r3, [r7, #32]
 8003f1e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f24:	f043 0201 	orr.w	r2, r3, #1
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f30:	f003 031f 	and.w	r3, r3, #31
 8003f34:	69ba      	ldr	r2, [r7, #24]
 8003f36:	fa22 f303 	lsr.w	r3, r2, r3
 8003f3a:	f003 0301 	and.w	r3, r3, #1
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d06e      	beq.n	8004020 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a69      	ldr	r2, [pc, #420]	@ (80040ec <HAL_DMA_IRQHandler+0x3f8>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d04a      	beq.n	8003fe2 <HAL_DMA_IRQHandler+0x2ee>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a67      	ldr	r2, [pc, #412]	@ (80040f0 <HAL_DMA_IRQHandler+0x3fc>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d045      	beq.n	8003fe2 <HAL_DMA_IRQHandler+0x2ee>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a66      	ldr	r2, [pc, #408]	@ (80040f4 <HAL_DMA_IRQHandler+0x400>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d040      	beq.n	8003fe2 <HAL_DMA_IRQHandler+0x2ee>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a64      	ldr	r2, [pc, #400]	@ (80040f8 <HAL_DMA_IRQHandler+0x404>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d03b      	beq.n	8003fe2 <HAL_DMA_IRQHandler+0x2ee>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a63      	ldr	r2, [pc, #396]	@ (80040fc <HAL_DMA_IRQHandler+0x408>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d036      	beq.n	8003fe2 <HAL_DMA_IRQHandler+0x2ee>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a61      	ldr	r2, [pc, #388]	@ (8004100 <HAL_DMA_IRQHandler+0x40c>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d031      	beq.n	8003fe2 <HAL_DMA_IRQHandler+0x2ee>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a60      	ldr	r2, [pc, #384]	@ (8004104 <HAL_DMA_IRQHandler+0x410>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d02c      	beq.n	8003fe2 <HAL_DMA_IRQHandler+0x2ee>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a5e      	ldr	r2, [pc, #376]	@ (8004108 <HAL_DMA_IRQHandler+0x414>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d027      	beq.n	8003fe2 <HAL_DMA_IRQHandler+0x2ee>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a5d      	ldr	r2, [pc, #372]	@ (800410c <HAL_DMA_IRQHandler+0x418>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d022      	beq.n	8003fe2 <HAL_DMA_IRQHandler+0x2ee>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a5b      	ldr	r2, [pc, #364]	@ (8004110 <HAL_DMA_IRQHandler+0x41c>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d01d      	beq.n	8003fe2 <HAL_DMA_IRQHandler+0x2ee>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a5a      	ldr	r2, [pc, #360]	@ (8004114 <HAL_DMA_IRQHandler+0x420>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d018      	beq.n	8003fe2 <HAL_DMA_IRQHandler+0x2ee>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a58      	ldr	r2, [pc, #352]	@ (8004118 <HAL_DMA_IRQHandler+0x424>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d013      	beq.n	8003fe2 <HAL_DMA_IRQHandler+0x2ee>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a57      	ldr	r2, [pc, #348]	@ (800411c <HAL_DMA_IRQHandler+0x428>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d00e      	beq.n	8003fe2 <HAL_DMA_IRQHandler+0x2ee>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a55      	ldr	r2, [pc, #340]	@ (8004120 <HAL_DMA_IRQHandler+0x42c>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d009      	beq.n	8003fe2 <HAL_DMA_IRQHandler+0x2ee>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a54      	ldr	r2, [pc, #336]	@ (8004124 <HAL_DMA_IRQHandler+0x430>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d004      	beq.n	8003fe2 <HAL_DMA_IRQHandler+0x2ee>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a52      	ldr	r2, [pc, #328]	@ (8004128 <HAL_DMA_IRQHandler+0x434>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d10a      	bne.n	8003ff8 <HAL_DMA_IRQHandler+0x304>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	695b      	ldr	r3, [r3, #20]
 8003fe8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	bf14      	ite	ne
 8003ff0:	2301      	movne	r3, #1
 8003ff2:	2300      	moveq	r3, #0
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	e003      	b.n	8004000 <HAL_DMA_IRQHandler+0x30c>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2300      	movs	r3, #0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d00d      	beq.n	8004020 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004008:	f003 031f 	and.w	r3, r3, #31
 800400c:	2201      	movs	r2, #1
 800400e:	409a      	lsls	r2, r3
 8004010:	6a3b      	ldr	r3, [r7, #32]
 8004012:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004018:	f043 0202 	orr.w	r2, r3, #2
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004024:	f003 031f 	and.w	r3, r3, #31
 8004028:	2204      	movs	r2, #4
 800402a:	409a      	lsls	r2, r3
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	4013      	ands	r3, r2
 8004030:	2b00      	cmp	r3, #0
 8004032:	f000 808f 	beq.w	8004154 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a2c      	ldr	r2, [pc, #176]	@ (80040ec <HAL_DMA_IRQHandler+0x3f8>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d04a      	beq.n	80040d6 <HAL_DMA_IRQHandler+0x3e2>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a2a      	ldr	r2, [pc, #168]	@ (80040f0 <HAL_DMA_IRQHandler+0x3fc>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d045      	beq.n	80040d6 <HAL_DMA_IRQHandler+0x3e2>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a29      	ldr	r2, [pc, #164]	@ (80040f4 <HAL_DMA_IRQHandler+0x400>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d040      	beq.n	80040d6 <HAL_DMA_IRQHandler+0x3e2>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a27      	ldr	r2, [pc, #156]	@ (80040f8 <HAL_DMA_IRQHandler+0x404>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d03b      	beq.n	80040d6 <HAL_DMA_IRQHandler+0x3e2>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a26      	ldr	r2, [pc, #152]	@ (80040fc <HAL_DMA_IRQHandler+0x408>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d036      	beq.n	80040d6 <HAL_DMA_IRQHandler+0x3e2>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a24      	ldr	r2, [pc, #144]	@ (8004100 <HAL_DMA_IRQHandler+0x40c>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d031      	beq.n	80040d6 <HAL_DMA_IRQHandler+0x3e2>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a23      	ldr	r2, [pc, #140]	@ (8004104 <HAL_DMA_IRQHandler+0x410>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d02c      	beq.n	80040d6 <HAL_DMA_IRQHandler+0x3e2>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a21      	ldr	r2, [pc, #132]	@ (8004108 <HAL_DMA_IRQHandler+0x414>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d027      	beq.n	80040d6 <HAL_DMA_IRQHandler+0x3e2>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a20      	ldr	r2, [pc, #128]	@ (800410c <HAL_DMA_IRQHandler+0x418>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d022      	beq.n	80040d6 <HAL_DMA_IRQHandler+0x3e2>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a1e      	ldr	r2, [pc, #120]	@ (8004110 <HAL_DMA_IRQHandler+0x41c>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d01d      	beq.n	80040d6 <HAL_DMA_IRQHandler+0x3e2>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a1d      	ldr	r2, [pc, #116]	@ (8004114 <HAL_DMA_IRQHandler+0x420>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d018      	beq.n	80040d6 <HAL_DMA_IRQHandler+0x3e2>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a1b      	ldr	r2, [pc, #108]	@ (8004118 <HAL_DMA_IRQHandler+0x424>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d013      	beq.n	80040d6 <HAL_DMA_IRQHandler+0x3e2>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a1a      	ldr	r2, [pc, #104]	@ (800411c <HAL_DMA_IRQHandler+0x428>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d00e      	beq.n	80040d6 <HAL_DMA_IRQHandler+0x3e2>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a18      	ldr	r2, [pc, #96]	@ (8004120 <HAL_DMA_IRQHandler+0x42c>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d009      	beq.n	80040d6 <HAL_DMA_IRQHandler+0x3e2>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a17      	ldr	r2, [pc, #92]	@ (8004124 <HAL_DMA_IRQHandler+0x430>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d004      	beq.n	80040d6 <HAL_DMA_IRQHandler+0x3e2>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a15      	ldr	r2, [pc, #84]	@ (8004128 <HAL_DMA_IRQHandler+0x434>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d12a      	bne.n	800412c <HAL_DMA_IRQHandler+0x438>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0302 	and.w	r3, r3, #2
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	bf14      	ite	ne
 80040e4:	2301      	movne	r3, #1
 80040e6:	2300      	moveq	r3, #0
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	e023      	b.n	8004134 <HAL_DMA_IRQHandler+0x440>
 80040ec:	40020010 	.word	0x40020010
 80040f0:	40020028 	.word	0x40020028
 80040f4:	40020040 	.word	0x40020040
 80040f8:	40020058 	.word	0x40020058
 80040fc:	40020070 	.word	0x40020070
 8004100:	40020088 	.word	0x40020088
 8004104:	400200a0 	.word	0x400200a0
 8004108:	400200b8 	.word	0x400200b8
 800410c:	40020410 	.word	0x40020410
 8004110:	40020428 	.word	0x40020428
 8004114:	40020440 	.word	0x40020440
 8004118:	40020458 	.word	0x40020458
 800411c:	40020470 	.word	0x40020470
 8004120:	40020488 	.word	0x40020488
 8004124:	400204a0 	.word	0x400204a0
 8004128:	400204b8 	.word	0x400204b8
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2300      	movs	r3, #0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00d      	beq.n	8004154 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800413c:	f003 031f 	and.w	r3, r3, #31
 8004140:	2204      	movs	r2, #4
 8004142:	409a      	lsls	r2, r3
 8004144:	6a3b      	ldr	r3, [r7, #32]
 8004146:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800414c:	f043 0204 	orr.w	r2, r3, #4
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004158:	f003 031f 	and.w	r3, r3, #31
 800415c:	2210      	movs	r2, #16
 800415e:	409a      	lsls	r2, r3
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	4013      	ands	r3, r2
 8004164:	2b00      	cmp	r3, #0
 8004166:	f000 80a6 	beq.w	80042b6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a85      	ldr	r2, [pc, #532]	@ (8004384 <HAL_DMA_IRQHandler+0x690>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d04a      	beq.n	800420a <HAL_DMA_IRQHandler+0x516>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a83      	ldr	r2, [pc, #524]	@ (8004388 <HAL_DMA_IRQHandler+0x694>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d045      	beq.n	800420a <HAL_DMA_IRQHandler+0x516>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a82      	ldr	r2, [pc, #520]	@ (800438c <HAL_DMA_IRQHandler+0x698>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d040      	beq.n	800420a <HAL_DMA_IRQHandler+0x516>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a80      	ldr	r2, [pc, #512]	@ (8004390 <HAL_DMA_IRQHandler+0x69c>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d03b      	beq.n	800420a <HAL_DMA_IRQHandler+0x516>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a7f      	ldr	r2, [pc, #508]	@ (8004394 <HAL_DMA_IRQHandler+0x6a0>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d036      	beq.n	800420a <HAL_DMA_IRQHandler+0x516>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a7d      	ldr	r2, [pc, #500]	@ (8004398 <HAL_DMA_IRQHandler+0x6a4>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d031      	beq.n	800420a <HAL_DMA_IRQHandler+0x516>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a7c      	ldr	r2, [pc, #496]	@ (800439c <HAL_DMA_IRQHandler+0x6a8>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d02c      	beq.n	800420a <HAL_DMA_IRQHandler+0x516>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a7a      	ldr	r2, [pc, #488]	@ (80043a0 <HAL_DMA_IRQHandler+0x6ac>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d027      	beq.n	800420a <HAL_DMA_IRQHandler+0x516>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a79      	ldr	r2, [pc, #484]	@ (80043a4 <HAL_DMA_IRQHandler+0x6b0>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d022      	beq.n	800420a <HAL_DMA_IRQHandler+0x516>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a77      	ldr	r2, [pc, #476]	@ (80043a8 <HAL_DMA_IRQHandler+0x6b4>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d01d      	beq.n	800420a <HAL_DMA_IRQHandler+0x516>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a76      	ldr	r2, [pc, #472]	@ (80043ac <HAL_DMA_IRQHandler+0x6b8>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d018      	beq.n	800420a <HAL_DMA_IRQHandler+0x516>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a74      	ldr	r2, [pc, #464]	@ (80043b0 <HAL_DMA_IRQHandler+0x6bc>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d013      	beq.n	800420a <HAL_DMA_IRQHandler+0x516>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a73      	ldr	r2, [pc, #460]	@ (80043b4 <HAL_DMA_IRQHandler+0x6c0>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d00e      	beq.n	800420a <HAL_DMA_IRQHandler+0x516>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a71      	ldr	r2, [pc, #452]	@ (80043b8 <HAL_DMA_IRQHandler+0x6c4>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d009      	beq.n	800420a <HAL_DMA_IRQHandler+0x516>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a70      	ldr	r2, [pc, #448]	@ (80043bc <HAL_DMA_IRQHandler+0x6c8>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d004      	beq.n	800420a <HAL_DMA_IRQHandler+0x516>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a6e      	ldr	r2, [pc, #440]	@ (80043c0 <HAL_DMA_IRQHandler+0x6cc>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d10a      	bne.n	8004220 <HAL_DMA_IRQHandler+0x52c>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0308 	and.w	r3, r3, #8
 8004214:	2b00      	cmp	r3, #0
 8004216:	bf14      	ite	ne
 8004218:	2301      	movne	r3, #1
 800421a:	2300      	moveq	r3, #0
 800421c:	b2db      	uxtb	r3, r3
 800421e:	e009      	b.n	8004234 <HAL_DMA_IRQHandler+0x540>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0304 	and.w	r3, r3, #4
 800422a:	2b00      	cmp	r3, #0
 800422c:	bf14      	ite	ne
 800422e:	2301      	movne	r3, #1
 8004230:	2300      	moveq	r3, #0
 8004232:	b2db      	uxtb	r3, r3
 8004234:	2b00      	cmp	r3, #0
 8004236:	d03e      	beq.n	80042b6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800423c:	f003 031f 	and.w	r3, r3, #31
 8004240:	2210      	movs	r2, #16
 8004242:	409a      	lsls	r2, r3
 8004244:	6a3b      	ldr	r3, [r7, #32]
 8004246:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d018      	beq.n	8004288 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d108      	bne.n	8004276 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004268:	2b00      	cmp	r3, #0
 800426a:	d024      	beq.n	80042b6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	4798      	blx	r3
 8004274:	e01f      	b.n	80042b6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800427a:	2b00      	cmp	r3, #0
 800427c:	d01b      	beq.n	80042b6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	4798      	blx	r3
 8004286:	e016      	b.n	80042b6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004292:	2b00      	cmp	r3, #0
 8004294:	d107      	bne.n	80042a6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f022 0208 	bic.w	r2, r2, #8
 80042a4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d003      	beq.n	80042b6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042ba:	f003 031f 	and.w	r3, r3, #31
 80042be:	2220      	movs	r2, #32
 80042c0:	409a      	lsls	r2, r3
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	4013      	ands	r3, r2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	f000 8110 	beq.w	80044ec <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a2c      	ldr	r2, [pc, #176]	@ (8004384 <HAL_DMA_IRQHandler+0x690>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d04a      	beq.n	800436c <HAL_DMA_IRQHandler+0x678>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a2b      	ldr	r2, [pc, #172]	@ (8004388 <HAL_DMA_IRQHandler+0x694>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d045      	beq.n	800436c <HAL_DMA_IRQHandler+0x678>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a29      	ldr	r2, [pc, #164]	@ (800438c <HAL_DMA_IRQHandler+0x698>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d040      	beq.n	800436c <HAL_DMA_IRQHandler+0x678>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a28      	ldr	r2, [pc, #160]	@ (8004390 <HAL_DMA_IRQHandler+0x69c>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d03b      	beq.n	800436c <HAL_DMA_IRQHandler+0x678>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a26      	ldr	r2, [pc, #152]	@ (8004394 <HAL_DMA_IRQHandler+0x6a0>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d036      	beq.n	800436c <HAL_DMA_IRQHandler+0x678>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a25      	ldr	r2, [pc, #148]	@ (8004398 <HAL_DMA_IRQHandler+0x6a4>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d031      	beq.n	800436c <HAL_DMA_IRQHandler+0x678>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a23      	ldr	r2, [pc, #140]	@ (800439c <HAL_DMA_IRQHandler+0x6a8>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d02c      	beq.n	800436c <HAL_DMA_IRQHandler+0x678>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a22      	ldr	r2, [pc, #136]	@ (80043a0 <HAL_DMA_IRQHandler+0x6ac>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d027      	beq.n	800436c <HAL_DMA_IRQHandler+0x678>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a20      	ldr	r2, [pc, #128]	@ (80043a4 <HAL_DMA_IRQHandler+0x6b0>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d022      	beq.n	800436c <HAL_DMA_IRQHandler+0x678>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a1f      	ldr	r2, [pc, #124]	@ (80043a8 <HAL_DMA_IRQHandler+0x6b4>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d01d      	beq.n	800436c <HAL_DMA_IRQHandler+0x678>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a1d      	ldr	r2, [pc, #116]	@ (80043ac <HAL_DMA_IRQHandler+0x6b8>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d018      	beq.n	800436c <HAL_DMA_IRQHandler+0x678>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a1c      	ldr	r2, [pc, #112]	@ (80043b0 <HAL_DMA_IRQHandler+0x6bc>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d013      	beq.n	800436c <HAL_DMA_IRQHandler+0x678>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a1a      	ldr	r2, [pc, #104]	@ (80043b4 <HAL_DMA_IRQHandler+0x6c0>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d00e      	beq.n	800436c <HAL_DMA_IRQHandler+0x678>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a19      	ldr	r2, [pc, #100]	@ (80043b8 <HAL_DMA_IRQHandler+0x6c4>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d009      	beq.n	800436c <HAL_DMA_IRQHandler+0x678>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a17      	ldr	r2, [pc, #92]	@ (80043bc <HAL_DMA_IRQHandler+0x6c8>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d004      	beq.n	800436c <HAL_DMA_IRQHandler+0x678>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a16      	ldr	r2, [pc, #88]	@ (80043c0 <HAL_DMA_IRQHandler+0x6cc>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d12b      	bne.n	80043c4 <HAL_DMA_IRQHandler+0x6d0>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0310 	and.w	r3, r3, #16
 8004376:	2b00      	cmp	r3, #0
 8004378:	bf14      	ite	ne
 800437a:	2301      	movne	r3, #1
 800437c:	2300      	moveq	r3, #0
 800437e:	b2db      	uxtb	r3, r3
 8004380:	e02a      	b.n	80043d8 <HAL_DMA_IRQHandler+0x6e4>
 8004382:	bf00      	nop
 8004384:	40020010 	.word	0x40020010
 8004388:	40020028 	.word	0x40020028
 800438c:	40020040 	.word	0x40020040
 8004390:	40020058 	.word	0x40020058
 8004394:	40020070 	.word	0x40020070
 8004398:	40020088 	.word	0x40020088
 800439c:	400200a0 	.word	0x400200a0
 80043a0:	400200b8 	.word	0x400200b8
 80043a4:	40020410 	.word	0x40020410
 80043a8:	40020428 	.word	0x40020428
 80043ac:	40020440 	.word	0x40020440
 80043b0:	40020458 	.word	0x40020458
 80043b4:	40020470 	.word	0x40020470
 80043b8:	40020488 	.word	0x40020488
 80043bc:	400204a0 	.word	0x400204a0
 80043c0:	400204b8 	.word	0x400204b8
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0302 	and.w	r3, r3, #2
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	bf14      	ite	ne
 80043d2:	2301      	movne	r3, #1
 80043d4:	2300      	moveq	r3, #0
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	2b00      	cmp	r3, #0
 80043da:	f000 8087 	beq.w	80044ec <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043e2:	f003 031f 	and.w	r3, r3, #31
 80043e6:	2220      	movs	r2, #32
 80043e8:	409a      	lsls	r2, r3
 80043ea:	6a3b      	ldr	r3, [r7, #32]
 80043ec:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	2b04      	cmp	r3, #4
 80043f8:	d139      	bne.n	800446e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f022 0216 	bic.w	r2, r2, #22
 8004408:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	695a      	ldr	r2, [r3, #20]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004418:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800441e:	2b00      	cmp	r3, #0
 8004420:	d103      	bne.n	800442a <HAL_DMA_IRQHandler+0x736>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004426:	2b00      	cmp	r3, #0
 8004428:	d007      	beq.n	800443a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f022 0208 	bic.w	r2, r2, #8
 8004438:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800443e:	f003 031f 	and.w	r3, r3, #31
 8004442:	223f      	movs	r2, #63	@ 0x3f
 8004444:	409a      	lsls	r2, r3
 8004446:	6a3b      	ldr	r3, [r7, #32]
 8004448:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2201      	movs	r2, #1
 800444e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800445e:	2b00      	cmp	r3, #0
 8004460:	f000 834a 	beq.w	8004af8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	4798      	blx	r3
          }
          return;
 800446c:	e344      	b.n	8004af8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d018      	beq.n	80044ae <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d108      	bne.n	800449c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800448e:	2b00      	cmp	r3, #0
 8004490:	d02c      	beq.n	80044ec <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	4798      	blx	r3
 800449a:	e027      	b.n	80044ec <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d023      	beq.n	80044ec <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	4798      	blx	r3
 80044ac:	e01e      	b.n	80044ec <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d10f      	bne.n	80044dc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f022 0210 	bic.w	r2, r2, #16
 80044ca:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d003      	beq.n	80044ec <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f000 8306 	beq.w	8004b02 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044fa:	f003 0301 	and.w	r3, r3, #1
 80044fe:	2b00      	cmp	r3, #0
 8004500:	f000 8088 	beq.w	8004614 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2204      	movs	r2, #4
 8004508:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a7a      	ldr	r2, [pc, #488]	@ (80046fc <HAL_DMA_IRQHandler+0xa08>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d04a      	beq.n	80045ac <HAL_DMA_IRQHandler+0x8b8>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a79      	ldr	r2, [pc, #484]	@ (8004700 <HAL_DMA_IRQHandler+0xa0c>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d045      	beq.n	80045ac <HAL_DMA_IRQHandler+0x8b8>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a77      	ldr	r2, [pc, #476]	@ (8004704 <HAL_DMA_IRQHandler+0xa10>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d040      	beq.n	80045ac <HAL_DMA_IRQHandler+0x8b8>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a76      	ldr	r2, [pc, #472]	@ (8004708 <HAL_DMA_IRQHandler+0xa14>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d03b      	beq.n	80045ac <HAL_DMA_IRQHandler+0x8b8>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a74      	ldr	r2, [pc, #464]	@ (800470c <HAL_DMA_IRQHandler+0xa18>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d036      	beq.n	80045ac <HAL_DMA_IRQHandler+0x8b8>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a73      	ldr	r2, [pc, #460]	@ (8004710 <HAL_DMA_IRQHandler+0xa1c>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d031      	beq.n	80045ac <HAL_DMA_IRQHandler+0x8b8>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a71      	ldr	r2, [pc, #452]	@ (8004714 <HAL_DMA_IRQHandler+0xa20>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d02c      	beq.n	80045ac <HAL_DMA_IRQHandler+0x8b8>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a70      	ldr	r2, [pc, #448]	@ (8004718 <HAL_DMA_IRQHandler+0xa24>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d027      	beq.n	80045ac <HAL_DMA_IRQHandler+0x8b8>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a6e      	ldr	r2, [pc, #440]	@ (800471c <HAL_DMA_IRQHandler+0xa28>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d022      	beq.n	80045ac <HAL_DMA_IRQHandler+0x8b8>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a6d      	ldr	r2, [pc, #436]	@ (8004720 <HAL_DMA_IRQHandler+0xa2c>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d01d      	beq.n	80045ac <HAL_DMA_IRQHandler+0x8b8>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a6b      	ldr	r2, [pc, #428]	@ (8004724 <HAL_DMA_IRQHandler+0xa30>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d018      	beq.n	80045ac <HAL_DMA_IRQHandler+0x8b8>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a6a      	ldr	r2, [pc, #424]	@ (8004728 <HAL_DMA_IRQHandler+0xa34>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d013      	beq.n	80045ac <HAL_DMA_IRQHandler+0x8b8>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a68      	ldr	r2, [pc, #416]	@ (800472c <HAL_DMA_IRQHandler+0xa38>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d00e      	beq.n	80045ac <HAL_DMA_IRQHandler+0x8b8>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a67      	ldr	r2, [pc, #412]	@ (8004730 <HAL_DMA_IRQHandler+0xa3c>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d009      	beq.n	80045ac <HAL_DMA_IRQHandler+0x8b8>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a65      	ldr	r2, [pc, #404]	@ (8004734 <HAL_DMA_IRQHandler+0xa40>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d004      	beq.n	80045ac <HAL_DMA_IRQHandler+0x8b8>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a64      	ldr	r2, [pc, #400]	@ (8004738 <HAL_DMA_IRQHandler+0xa44>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d108      	bne.n	80045be <HAL_DMA_IRQHandler+0x8ca>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f022 0201 	bic.w	r2, r2, #1
 80045ba:	601a      	str	r2, [r3, #0]
 80045bc:	e007      	b.n	80045ce <HAL_DMA_IRQHandler+0x8da>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f022 0201 	bic.w	r2, r2, #1
 80045cc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	3301      	adds	r3, #1
 80045d2:	60fb      	str	r3, [r7, #12]
 80045d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d307      	bcc.n	80045ea <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0301 	and.w	r3, r3, #1
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d1f2      	bne.n	80045ce <HAL_DMA_IRQHandler+0x8da>
 80045e8:	e000      	b.n	80045ec <HAL_DMA_IRQHandler+0x8f8>
            break;
 80045ea:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d004      	beq.n	8004604 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2203      	movs	r2, #3
 80045fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8004602:	e003      	b.n	800460c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004618:	2b00      	cmp	r3, #0
 800461a:	f000 8272 	beq.w	8004b02 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	4798      	blx	r3
 8004626:	e26c      	b.n	8004b02 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a43      	ldr	r2, [pc, #268]	@ (800473c <HAL_DMA_IRQHandler+0xa48>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d022      	beq.n	8004678 <HAL_DMA_IRQHandler+0x984>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a42      	ldr	r2, [pc, #264]	@ (8004740 <HAL_DMA_IRQHandler+0xa4c>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d01d      	beq.n	8004678 <HAL_DMA_IRQHandler+0x984>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a40      	ldr	r2, [pc, #256]	@ (8004744 <HAL_DMA_IRQHandler+0xa50>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d018      	beq.n	8004678 <HAL_DMA_IRQHandler+0x984>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a3f      	ldr	r2, [pc, #252]	@ (8004748 <HAL_DMA_IRQHandler+0xa54>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d013      	beq.n	8004678 <HAL_DMA_IRQHandler+0x984>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a3d      	ldr	r2, [pc, #244]	@ (800474c <HAL_DMA_IRQHandler+0xa58>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d00e      	beq.n	8004678 <HAL_DMA_IRQHandler+0x984>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a3c      	ldr	r2, [pc, #240]	@ (8004750 <HAL_DMA_IRQHandler+0xa5c>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d009      	beq.n	8004678 <HAL_DMA_IRQHandler+0x984>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a3a      	ldr	r2, [pc, #232]	@ (8004754 <HAL_DMA_IRQHandler+0xa60>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d004      	beq.n	8004678 <HAL_DMA_IRQHandler+0x984>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a39      	ldr	r2, [pc, #228]	@ (8004758 <HAL_DMA_IRQHandler+0xa64>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d101      	bne.n	800467c <HAL_DMA_IRQHandler+0x988>
 8004678:	2301      	movs	r3, #1
 800467a:	e000      	b.n	800467e <HAL_DMA_IRQHandler+0x98a>
 800467c:	2300      	movs	r3, #0
 800467e:	2b00      	cmp	r3, #0
 8004680:	f000 823f 	beq.w	8004b02 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004690:	f003 031f 	and.w	r3, r3, #31
 8004694:	2204      	movs	r2, #4
 8004696:	409a      	lsls	r2, r3
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	4013      	ands	r3, r2
 800469c:	2b00      	cmp	r3, #0
 800469e:	f000 80cd 	beq.w	800483c <HAL_DMA_IRQHandler+0xb48>
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	f003 0304 	and.w	r3, r3, #4
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	f000 80c7 	beq.w	800483c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046b2:	f003 031f 	and.w	r3, r3, #31
 80046b6:	2204      	movs	r2, #4
 80046b8:	409a      	lsls	r2, r3
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d049      	beq.n	800475c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d109      	bne.n	80046e6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	f000 8210 	beq.w	8004afc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046e4:	e20a      	b.n	8004afc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	f000 8206 	beq.w	8004afc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046f8:	e200      	b.n	8004afc <HAL_DMA_IRQHandler+0xe08>
 80046fa:	bf00      	nop
 80046fc:	40020010 	.word	0x40020010
 8004700:	40020028 	.word	0x40020028
 8004704:	40020040 	.word	0x40020040
 8004708:	40020058 	.word	0x40020058
 800470c:	40020070 	.word	0x40020070
 8004710:	40020088 	.word	0x40020088
 8004714:	400200a0 	.word	0x400200a0
 8004718:	400200b8 	.word	0x400200b8
 800471c:	40020410 	.word	0x40020410
 8004720:	40020428 	.word	0x40020428
 8004724:	40020440 	.word	0x40020440
 8004728:	40020458 	.word	0x40020458
 800472c:	40020470 	.word	0x40020470
 8004730:	40020488 	.word	0x40020488
 8004734:	400204a0 	.word	0x400204a0
 8004738:	400204b8 	.word	0x400204b8
 800473c:	58025408 	.word	0x58025408
 8004740:	5802541c 	.word	0x5802541c
 8004744:	58025430 	.word	0x58025430
 8004748:	58025444 	.word	0x58025444
 800474c:	58025458 	.word	0x58025458
 8004750:	5802546c 	.word	0x5802546c
 8004754:	58025480 	.word	0x58025480
 8004758:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	f003 0320 	and.w	r3, r3, #32
 8004762:	2b00      	cmp	r3, #0
 8004764:	d160      	bne.n	8004828 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a7f      	ldr	r2, [pc, #508]	@ (8004968 <HAL_DMA_IRQHandler+0xc74>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d04a      	beq.n	8004806 <HAL_DMA_IRQHandler+0xb12>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a7d      	ldr	r2, [pc, #500]	@ (800496c <HAL_DMA_IRQHandler+0xc78>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d045      	beq.n	8004806 <HAL_DMA_IRQHandler+0xb12>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a7c      	ldr	r2, [pc, #496]	@ (8004970 <HAL_DMA_IRQHandler+0xc7c>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d040      	beq.n	8004806 <HAL_DMA_IRQHandler+0xb12>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a7a      	ldr	r2, [pc, #488]	@ (8004974 <HAL_DMA_IRQHandler+0xc80>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d03b      	beq.n	8004806 <HAL_DMA_IRQHandler+0xb12>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a79      	ldr	r2, [pc, #484]	@ (8004978 <HAL_DMA_IRQHandler+0xc84>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d036      	beq.n	8004806 <HAL_DMA_IRQHandler+0xb12>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a77      	ldr	r2, [pc, #476]	@ (800497c <HAL_DMA_IRQHandler+0xc88>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d031      	beq.n	8004806 <HAL_DMA_IRQHandler+0xb12>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a76      	ldr	r2, [pc, #472]	@ (8004980 <HAL_DMA_IRQHandler+0xc8c>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d02c      	beq.n	8004806 <HAL_DMA_IRQHandler+0xb12>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a74      	ldr	r2, [pc, #464]	@ (8004984 <HAL_DMA_IRQHandler+0xc90>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d027      	beq.n	8004806 <HAL_DMA_IRQHandler+0xb12>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a73      	ldr	r2, [pc, #460]	@ (8004988 <HAL_DMA_IRQHandler+0xc94>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d022      	beq.n	8004806 <HAL_DMA_IRQHandler+0xb12>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a71      	ldr	r2, [pc, #452]	@ (800498c <HAL_DMA_IRQHandler+0xc98>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d01d      	beq.n	8004806 <HAL_DMA_IRQHandler+0xb12>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a70      	ldr	r2, [pc, #448]	@ (8004990 <HAL_DMA_IRQHandler+0xc9c>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d018      	beq.n	8004806 <HAL_DMA_IRQHandler+0xb12>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a6e      	ldr	r2, [pc, #440]	@ (8004994 <HAL_DMA_IRQHandler+0xca0>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d013      	beq.n	8004806 <HAL_DMA_IRQHandler+0xb12>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a6d      	ldr	r2, [pc, #436]	@ (8004998 <HAL_DMA_IRQHandler+0xca4>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d00e      	beq.n	8004806 <HAL_DMA_IRQHandler+0xb12>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a6b      	ldr	r2, [pc, #428]	@ (800499c <HAL_DMA_IRQHandler+0xca8>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d009      	beq.n	8004806 <HAL_DMA_IRQHandler+0xb12>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a6a      	ldr	r2, [pc, #424]	@ (80049a0 <HAL_DMA_IRQHandler+0xcac>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d004      	beq.n	8004806 <HAL_DMA_IRQHandler+0xb12>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a68      	ldr	r2, [pc, #416]	@ (80049a4 <HAL_DMA_IRQHandler+0xcb0>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d108      	bne.n	8004818 <HAL_DMA_IRQHandler+0xb24>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f022 0208 	bic.w	r2, r2, #8
 8004814:	601a      	str	r2, [r3, #0]
 8004816:	e007      	b.n	8004828 <HAL_DMA_IRQHandler+0xb34>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f022 0204 	bic.w	r2, r2, #4
 8004826:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800482c:	2b00      	cmp	r3, #0
 800482e:	f000 8165 	beq.w	8004afc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800483a:	e15f      	b.n	8004afc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004840:	f003 031f 	and.w	r3, r3, #31
 8004844:	2202      	movs	r2, #2
 8004846:	409a      	lsls	r2, r3
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	4013      	ands	r3, r2
 800484c:	2b00      	cmp	r3, #0
 800484e:	f000 80c5 	beq.w	80049dc <HAL_DMA_IRQHandler+0xce8>
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	f003 0302 	and.w	r3, r3, #2
 8004858:	2b00      	cmp	r3, #0
 800485a:	f000 80bf 	beq.w	80049dc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004862:	f003 031f 	and.w	r3, r3, #31
 8004866:	2202      	movs	r2, #2
 8004868:	409a      	lsls	r2, r3
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004874:	2b00      	cmp	r3, #0
 8004876:	d018      	beq.n	80048aa <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d109      	bne.n	8004896 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004886:	2b00      	cmp	r3, #0
 8004888:	f000 813a 	beq.w	8004b00 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004894:	e134      	b.n	8004b00 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800489a:	2b00      	cmp	r3, #0
 800489c:	f000 8130 	beq.w	8004b00 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048a8:	e12a      	b.n	8004b00 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	f003 0320 	and.w	r3, r3, #32
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	f040 8089 	bne.w	80049c8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a2b      	ldr	r2, [pc, #172]	@ (8004968 <HAL_DMA_IRQHandler+0xc74>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d04a      	beq.n	8004956 <HAL_DMA_IRQHandler+0xc62>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a29      	ldr	r2, [pc, #164]	@ (800496c <HAL_DMA_IRQHandler+0xc78>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d045      	beq.n	8004956 <HAL_DMA_IRQHandler+0xc62>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a28      	ldr	r2, [pc, #160]	@ (8004970 <HAL_DMA_IRQHandler+0xc7c>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d040      	beq.n	8004956 <HAL_DMA_IRQHandler+0xc62>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a26      	ldr	r2, [pc, #152]	@ (8004974 <HAL_DMA_IRQHandler+0xc80>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d03b      	beq.n	8004956 <HAL_DMA_IRQHandler+0xc62>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a25      	ldr	r2, [pc, #148]	@ (8004978 <HAL_DMA_IRQHandler+0xc84>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d036      	beq.n	8004956 <HAL_DMA_IRQHandler+0xc62>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a23      	ldr	r2, [pc, #140]	@ (800497c <HAL_DMA_IRQHandler+0xc88>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d031      	beq.n	8004956 <HAL_DMA_IRQHandler+0xc62>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a22      	ldr	r2, [pc, #136]	@ (8004980 <HAL_DMA_IRQHandler+0xc8c>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d02c      	beq.n	8004956 <HAL_DMA_IRQHandler+0xc62>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a20      	ldr	r2, [pc, #128]	@ (8004984 <HAL_DMA_IRQHandler+0xc90>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d027      	beq.n	8004956 <HAL_DMA_IRQHandler+0xc62>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a1f      	ldr	r2, [pc, #124]	@ (8004988 <HAL_DMA_IRQHandler+0xc94>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d022      	beq.n	8004956 <HAL_DMA_IRQHandler+0xc62>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a1d      	ldr	r2, [pc, #116]	@ (800498c <HAL_DMA_IRQHandler+0xc98>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d01d      	beq.n	8004956 <HAL_DMA_IRQHandler+0xc62>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a1c      	ldr	r2, [pc, #112]	@ (8004990 <HAL_DMA_IRQHandler+0xc9c>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d018      	beq.n	8004956 <HAL_DMA_IRQHandler+0xc62>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a1a      	ldr	r2, [pc, #104]	@ (8004994 <HAL_DMA_IRQHandler+0xca0>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d013      	beq.n	8004956 <HAL_DMA_IRQHandler+0xc62>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a19      	ldr	r2, [pc, #100]	@ (8004998 <HAL_DMA_IRQHandler+0xca4>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d00e      	beq.n	8004956 <HAL_DMA_IRQHandler+0xc62>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a17      	ldr	r2, [pc, #92]	@ (800499c <HAL_DMA_IRQHandler+0xca8>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d009      	beq.n	8004956 <HAL_DMA_IRQHandler+0xc62>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a16      	ldr	r2, [pc, #88]	@ (80049a0 <HAL_DMA_IRQHandler+0xcac>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d004      	beq.n	8004956 <HAL_DMA_IRQHandler+0xc62>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a14      	ldr	r2, [pc, #80]	@ (80049a4 <HAL_DMA_IRQHandler+0xcb0>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d128      	bne.n	80049a8 <HAL_DMA_IRQHandler+0xcb4>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f022 0214 	bic.w	r2, r2, #20
 8004964:	601a      	str	r2, [r3, #0]
 8004966:	e027      	b.n	80049b8 <HAL_DMA_IRQHandler+0xcc4>
 8004968:	40020010 	.word	0x40020010
 800496c:	40020028 	.word	0x40020028
 8004970:	40020040 	.word	0x40020040
 8004974:	40020058 	.word	0x40020058
 8004978:	40020070 	.word	0x40020070
 800497c:	40020088 	.word	0x40020088
 8004980:	400200a0 	.word	0x400200a0
 8004984:	400200b8 	.word	0x400200b8
 8004988:	40020410 	.word	0x40020410
 800498c:	40020428 	.word	0x40020428
 8004990:	40020440 	.word	0x40020440
 8004994:	40020458 	.word	0x40020458
 8004998:	40020470 	.word	0x40020470
 800499c:	40020488 	.word	0x40020488
 80049a0:	400204a0 	.word	0x400204a0
 80049a4:	400204b8 	.word	0x400204b8
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f022 020a 	bic.w	r2, r2, #10
 80049b6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	f000 8097 	beq.w	8004b00 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049da:	e091      	b.n	8004b00 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049e0:	f003 031f 	and.w	r3, r3, #31
 80049e4:	2208      	movs	r2, #8
 80049e6:	409a      	lsls	r2, r3
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	4013      	ands	r3, r2
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	f000 8088 	beq.w	8004b02 <HAL_DMA_IRQHandler+0xe0e>
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	f003 0308 	and.w	r3, r3, #8
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	f000 8082 	beq.w	8004b02 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a41      	ldr	r2, [pc, #260]	@ (8004b08 <HAL_DMA_IRQHandler+0xe14>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d04a      	beq.n	8004a9e <HAL_DMA_IRQHandler+0xdaa>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a3f      	ldr	r2, [pc, #252]	@ (8004b0c <HAL_DMA_IRQHandler+0xe18>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d045      	beq.n	8004a9e <HAL_DMA_IRQHandler+0xdaa>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a3e      	ldr	r2, [pc, #248]	@ (8004b10 <HAL_DMA_IRQHandler+0xe1c>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d040      	beq.n	8004a9e <HAL_DMA_IRQHandler+0xdaa>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a3c      	ldr	r2, [pc, #240]	@ (8004b14 <HAL_DMA_IRQHandler+0xe20>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d03b      	beq.n	8004a9e <HAL_DMA_IRQHandler+0xdaa>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a3b      	ldr	r2, [pc, #236]	@ (8004b18 <HAL_DMA_IRQHandler+0xe24>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d036      	beq.n	8004a9e <HAL_DMA_IRQHandler+0xdaa>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a39      	ldr	r2, [pc, #228]	@ (8004b1c <HAL_DMA_IRQHandler+0xe28>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d031      	beq.n	8004a9e <HAL_DMA_IRQHandler+0xdaa>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a38      	ldr	r2, [pc, #224]	@ (8004b20 <HAL_DMA_IRQHandler+0xe2c>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d02c      	beq.n	8004a9e <HAL_DMA_IRQHandler+0xdaa>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a36      	ldr	r2, [pc, #216]	@ (8004b24 <HAL_DMA_IRQHandler+0xe30>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d027      	beq.n	8004a9e <HAL_DMA_IRQHandler+0xdaa>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a35      	ldr	r2, [pc, #212]	@ (8004b28 <HAL_DMA_IRQHandler+0xe34>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d022      	beq.n	8004a9e <HAL_DMA_IRQHandler+0xdaa>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a33      	ldr	r2, [pc, #204]	@ (8004b2c <HAL_DMA_IRQHandler+0xe38>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d01d      	beq.n	8004a9e <HAL_DMA_IRQHandler+0xdaa>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a32      	ldr	r2, [pc, #200]	@ (8004b30 <HAL_DMA_IRQHandler+0xe3c>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d018      	beq.n	8004a9e <HAL_DMA_IRQHandler+0xdaa>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a30      	ldr	r2, [pc, #192]	@ (8004b34 <HAL_DMA_IRQHandler+0xe40>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d013      	beq.n	8004a9e <HAL_DMA_IRQHandler+0xdaa>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a2f      	ldr	r2, [pc, #188]	@ (8004b38 <HAL_DMA_IRQHandler+0xe44>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d00e      	beq.n	8004a9e <HAL_DMA_IRQHandler+0xdaa>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a2d      	ldr	r2, [pc, #180]	@ (8004b3c <HAL_DMA_IRQHandler+0xe48>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d009      	beq.n	8004a9e <HAL_DMA_IRQHandler+0xdaa>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a2c      	ldr	r2, [pc, #176]	@ (8004b40 <HAL_DMA_IRQHandler+0xe4c>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d004      	beq.n	8004a9e <HAL_DMA_IRQHandler+0xdaa>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a2a      	ldr	r2, [pc, #168]	@ (8004b44 <HAL_DMA_IRQHandler+0xe50>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d108      	bne.n	8004ab0 <HAL_DMA_IRQHandler+0xdbc>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f022 021c 	bic.w	r2, r2, #28
 8004aac:	601a      	str	r2, [r3, #0]
 8004aae:	e007      	b.n	8004ac0 <HAL_DMA_IRQHandler+0xdcc>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f022 020e 	bic.w	r2, r2, #14
 8004abe:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ac4:	f003 031f 	and.w	r3, r3, #31
 8004ac8:	2201      	movs	r2, #1
 8004aca:	409a      	lsls	r2, r3
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2201      	movs	r2, #1
 8004ada:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d009      	beq.n	8004b02 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	4798      	blx	r3
 8004af6:	e004      	b.n	8004b02 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004af8:	bf00      	nop
 8004afa:	e002      	b.n	8004b02 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004afc:	bf00      	nop
 8004afe:	e000      	b.n	8004b02 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b00:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004b02:	3728      	adds	r7, #40	@ 0x28
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	40020010 	.word	0x40020010
 8004b0c:	40020028 	.word	0x40020028
 8004b10:	40020040 	.word	0x40020040
 8004b14:	40020058 	.word	0x40020058
 8004b18:	40020070 	.word	0x40020070
 8004b1c:	40020088 	.word	0x40020088
 8004b20:	400200a0 	.word	0x400200a0
 8004b24:	400200b8 	.word	0x400200b8
 8004b28:	40020410 	.word	0x40020410
 8004b2c:	40020428 	.word	0x40020428
 8004b30:	40020440 	.word	0x40020440
 8004b34:	40020458 	.word	0x40020458
 8004b38:	40020470 	.word	0x40020470
 8004b3c:	40020488 	.word	0x40020488
 8004b40:	400204a0 	.word	0x400204a0
 8004b44:	400204b8 	.word	0x400204b8

08004b48 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	370c      	adds	r7, #12
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr

08004b60 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b087      	sub	sp, #28
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	607a      	str	r2, [r7, #4]
 8004b6c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b72:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b78:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a7f      	ldr	r2, [pc, #508]	@ (8004d7c <DMA_SetConfig+0x21c>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d072      	beq.n	8004c6a <DMA_SetConfig+0x10a>
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a7d      	ldr	r2, [pc, #500]	@ (8004d80 <DMA_SetConfig+0x220>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d06d      	beq.n	8004c6a <DMA_SetConfig+0x10a>
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a7c      	ldr	r2, [pc, #496]	@ (8004d84 <DMA_SetConfig+0x224>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d068      	beq.n	8004c6a <DMA_SetConfig+0x10a>
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a7a      	ldr	r2, [pc, #488]	@ (8004d88 <DMA_SetConfig+0x228>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d063      	beq.n	8004c6a <DMA_SetConfig+0x10a>
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a79      	ldr	r2, [pc, #484]	@ (8004d8c <DMA_SetConfig+0x22c>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d05e      	beq.n	8004c6a <DMA_SetConfig+0x10a>
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a77      	ldr	r2, [pc, #476]	@ (8004d90 <DMA_SetConfig+0x230>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d059      	beq.n	8004c6a <DMA_SetConfig+0x10a>
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a76      	ldr	r2, [pc, #472]	@ (8004d94 <DMA_SetConfig+0x234>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d054      	beq.n	8004c6a <DMA_SetConfig+0x10a>
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a74      	ldr	r2, [pc, #464]	@ (8004d98 <DMA_SetConfig+0x238>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d04f      	beq.n	8004c6a <DMA_SetConfig+0x10a>
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a73      	ldr	r2, [pc, #460]	@ (8004d9c <DMA_SetConfig+0x23c>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d04a      	beq.n	8004c6a <DMA_SetConfig+0x10a>
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a71      	ldr	r2, [pc, #452]	@ (8004da0 <DMA_SetConfig+0x240>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d045      	beq.n	8004c6a <DMA_SetConfig+0x10a>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a70      	ldr	r2, [pc, #448]	@ (8004da4 <DMA_SetConfig+0x244>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d040      	beq.n	8004c6a <DMA_SetConfig+0x10a>
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a6e      	ldr	r2, [pc, #440]	@ (8004da8 <DMA_SetConfig+0x248>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d03b      	beq.n	8004c6a <DMA_SetConfig+0x10a>
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a6d      	ldr	r2, [pc, #436]	@ (8004dac <DMA_SetConfig+0x24c>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d036      	beq.n	8004c6a <DMA_SetConfig+0x10a>
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a6b      	ldr	r2, [pc, #428]	@ (8004db0 <DMA_SetConfig+0x250>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d031      	beq.n	8004c6a <DMA_SetConfig+0x10a>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a6a      	ldr	r2, [pc, #424]	@ (8004db4 <DMA_SetConfig+0x254>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d02c      	beq.n	8004c6a <DMA_SetConfig+0x10a>
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a68      	ldr	r2, [pc, #416]	@ (8004db8 <DMA_SetConfig+0x258>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d027      	beq.n	8004c6a <DMA_SetConfig+0x10a>
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a67      	ldr	r2, [pc, #412]	@ (8004dbc <DMA_SetConfig+0x25c>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d022      	beq.n	8004c6a <DMA_SetConfig+0x10a>
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a65      	ldr	r2, [pc, #404]	@ (8004dc0 <DMA_SetConfig+0x260>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d01d      	beq.n	8004c6a <DMA_SetConfig+0x10a>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a64      	ldr	r2, [pc, #400]	@ (8004dc4 <DMA_SetConfig+0x264>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d018      	beq.n	8004c6a <DMA_SetConfig+0x10a>
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a62      	ldr	r2, [pc, #392]	@ (8004dc8 <DMA_SetConfig+0x268>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d013      	beq.n	8004c6a <DMA_SetConfig+0x10a>
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a61      	ldr	r2, [pc, #388]	@ (8004dcc <DMA_SetConfig+0x26c>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d00e      	beq.n	8004c6a <DMA_SetConfig+0x10a>
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a5f      	ldr	r2, [pc, #380]	@ (8004dd0 <DMA_SetConfig+0x270>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d009      	beq.n	8004c6a <DMA_SetConfig+0x10a>
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a5e      	ldr	r2, [pc, #376]	@ (8004dd4 <DMA_SetConfig+0x274>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d004      	beq.n	8004c6a <DMA_SetConfig+0x10a>
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a5c      	ldr	r2, [pc, #368]	@ (8004dd8 <DMA_SetConfig+0x278>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d101      	bne.n	8004c6e <DMA_SetConfig+0x10e>
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e000      	b.n	8004c70 <DMA_SetConfig+0x110>
 8004c6e:	2300      	movs	r3, #0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d00d      	beq.n	8004c90 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c78:	68fa      	ldr	r2, [r7, #12]
 8004c7a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004c7c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d004      	beq.n	8004c90 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c8a:	68fa      	ldr	r2, [r7, #12]
 8004c8c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004c8e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a39      	ldr	r2, [pc, #228]	@ (8004d7c <DMA_SetConfig+0x21c>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d04a      	beq.n	8004d30 <DMA_SetConfig+0x1d0>
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a38      	ldr	r2, [pc, #224]	@ (8004d80 <DMA_SetConfig+0x220>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d045      	beq.n	8004d30 <DMA_SetConfig+0x1d0>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a36      	ldr	r2, [pc, #216]	@ (8004d84 <DMA_SetConfig+0x224>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d040      	beq.n	8004d30 <DMA_SetConfig+0x1d0>
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a35      	ldr	r2, [pc, #212]	@ (8004d88 <DMA_SetConfig+0x228>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d03b      	beq.n	8004d30 <DMA_SetConfig+0x1d0>
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a33      	ldr	r2, [pc, #204]	@ (8004d8c <DMA_SetConfig+0x22c>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d036      	beq.n	8004d30 <DMA_SetConfig+0x1d0>
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a32      	ldr	r2, [pc, #200]	@ (8004d90 <DMA_SetConfig+0x230>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d031      	beq.n	8004d30 <DMA_SetConfig+0x1d0>
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a30      	ldr	r2, [pc, #192]	@ (8004d94 <DMA_SetConfig+0x234>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d02c      	beq.n	8004d30 <DMA_SetConfig+0x1d0>
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a2f      	ldr	r2, [pc, #188]	@ (8004d98 <DMA_SetConfig+0x238>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d027      	beq.n	8004d30 <DMA_SetConfig+0x1d0>
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a2d      	ldr	r2, [pc, #180]	@ (8004d9c <DMA_SetConfig+0x23c>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d022      	beq.n	8004d30 <DMA_SetConfig+0x1d0>
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a2c      	ldr	r2, [pc, #176]	@ (8004da0 <DMA_SetConfig+0x240>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d01d      	beq.n	8004d30 <DMA_SetConfig+0x1d0>
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a2a      	ldr	r2, [pc, #168]	@ (8004da4 <DMA_SetConfig+0x244>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d018      	beq.n	8004d30 <DMA_SetConfig+0x1d0>
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a29      	ldr	r2, [pc, #164]	@ (8004da8 <DMA_SetConfig+0x248>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d013      	beq.n	8004d30 <DMA_SetConfig+0x1d0>
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a27      	ldr	r2, [pc, #156]	@ (8004dac <DMA_SetConfig+0x24c>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d00e      	beq.n	8004d30 <DMA_SetConfig+0x1d0>
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a26      	ldr	r2, [pc, #152]	@ (8004db0 <DMA_SetConfig+0x250>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d009      	beq.n	8004d30 <DMA_SetConfig+0x1d0>
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a24      	ldr	r2, [pc, #144]	@ (8004db4 <DMA_SetConfig+0x254>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d004      	beq.n	8004d30 <DMA_SetConfig+0x1d0>
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a23      	ldr	r2, [pc, #140]	@ (8004db8 <DMA_SetConfig+0x258>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d101      	bne.n	8004d34 <DMA_SetConfig+0x1d4>
 8004d30:	2301      	movs	r3, #1
 8004d32:	e000      	b.n	8004d36 <DMA_SetConfig+0x1d6>
 8004d34:	2300      	movs	r3, #0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d059      	beq.n	8004dee <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d3e:	f003 031f 	and.w	r3, r3, #31
 8004d42:	223f      	movs	r2, #63	@ 0x3f
 8004d44:	409a      	lsls	r2, r3
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004d58:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	683a      	ldr	r2, [r7, #0]
 8004d60:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	2b40      	cmp	r3, #64	@ 0x40
 8004d68:	d138      	bne.n	8004ddc <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	68ba      	ldr	r2, [r7, #8]
 8004d78:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004d7a:	e086      	b.n	8004e8a <DMA_SetConfig+0x32a>
 8004d7c:	40020010 	.word	0x40020010
 8004d80:	40020028 	.word	0x40020028
 8004d84:	40020040 	.word	0x40020040
 8004d88:	40020058 	.word	0x40020058
 8004d8c:	40020070 	.word	0x40020070
 8004d90:	40020088 	.word	0x40020088
 8004d94:	400200a0 	.word	0x400200a0
 8004d98:	400200b8 	.word	0x400200b8
 8004d9c:	40020410 	.word	0x40020410
 8004da0:	40020428 	.word	0x40020428
 8004da4:	40020440 	.word	0x40020440
 8004da8:	40020458 	.word	0x40020458
 8004dac:	40020470 	.word	0x40020470
 8004db0:	40020488 	.word	0x40020488
 8004db4:	400204a0 	.word	0x400204a0
 8004db8:	400204b8 	.word	0x400204b8
 8004dbc:	58025408 	.word	0x58025408
 8004dc0:	5802541c 	.word	0x5802541c
 8004dc4:	58025430 	.word	0x58025430
 8004dc8:	58025444 	.word	0x58025444
 8004dcc:	58025458 	.word	0x58025458
 8004dd0:	5802546c 	.word	0x5802546c
 8004dd4:	58025480 	.word	0x58025480
 8004dd8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	68ba      	ldr	r2, [r7, #8]
 8004de2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	60da      	str	r2, [r3, #12]
}
 8004dec:	e04d      	b.n	8004e8a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a29      	ldr	r2, [pc, #164]	@ (8004e98 <DMA_SetConfig+0x338>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d022      	beq.n	8004e3e <DMA_SetConfig+0x2de>
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a27      	ldr	r2, [pc, #156]	@ (8004e9c <DMA_SetConfig+0x33c>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d01d      	beq.n	8004e3e <DMA_SetConfig+0x2de>
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a26      	ldr	r2, [pc, #152]	@ (8004ea0 <DMA_SetConfig+0x340>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d018      	beq.n	8004e3e <DMA_SetConfig+0x2de>
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a24      	ldr	r2, [pc, #144]	@ (8004ea4 <DMA_SetConfig+0x344>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d013      	beq.n	8004e3e <DMA_SetConfig+0x2de>
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a23      	ldr	r2, [pc, #140]	@ (8004ea8 <DMA_SetConfig+0x348>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d00e      	beq.n	8004e3e <DMA_SetConfig+0x2de>
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a21      	ldr	r2, [pc, #132]	@ (8004eac <DMA_SetConfig+0x34c>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d009      	beq.n	8004e3e <DMA_SetConfig+0x2de>
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a20      	ldr	r2, [pc, #128]	@ (8004eb0 <DMA_SetConfig+0x350>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d004      	beq.n	8004e3e <DMA_SetConfig+0x2de>
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a1e      	ldr	r2, [pc, #120]	@ (8004eb4 <DMA_SetConfig+0x354>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d101      	bne.n	8004e42 <DMA_SetConfig+0x2e2>
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e000      	b.n	8004e44 <DMA_SetConfig+0x2e4>
 8004e42:	2300      	movs	r3, #0
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d020      	beq.n	8004e8a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e4c:	f003 031f 	and.w	r3, r3, #31
 8004e50:	2201      	movs	r2, #1
 8004e52:	409a      	lsls	r2, r3
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	683a      	ldr	r2, [r7, #0]
 8004e5e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	2b40      	cmp	r3, #64	@ 0x40
 8004e66:	d108      	bne.n	8004e7a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	68ba      	ldr	r2, [r7, #8]
 8004e76:	60da      	str	r2, [r3, #12]
}
 8004e78:	e007      	b.n	8004e8a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68ba      	ldr	r2, [r7, #8]
 8004e80:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	60da      	str	r2, [r3, #12]
}
 8004e8a:	bf00      	nop
 8004e8c:	371c      	adds	r7, #28
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop
 8004e98:	58025408 	.word	0x58025408
 8004e9c:	5802541c 	.word	0x5802541c
 8004ea0:	58025430 	.word	0x58025430
 8004ea4:	58025444 	.word	0x58025444
 8004ea8:	58025458 	.word	0x58025458
 8004eac:	5802546c 	.word	0x5802546c
 8004eb0:	58025480 	.word	0x58025480
 8004eb4:	58025494 	.word	0x58025494

08004eb8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b085      	sub	sp, #20
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a42      	ldr	r2, [pc, #264]	@ (8004fd0 <DMA_CalcBaseAndBitshift+0x118>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d04a      	beq.n	8004f60 <DMA_CalcBaseAndBitshift+0xa8>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a41      	ldr	r2, [pc, #260]	@ (8004fd4 <DMA_CalcBaseAndBitshift+0x11c>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d045      	beq.n	8004f60 <DMA_CalcBaseAndBitshift+0xa8>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a3f      	ldr	r2, [pc, #252]	@ (8004fd8 <DMA_CalcBaseAndBitshift+0x120>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d040      	beq.n	8004f60 <DMA_CalcBaseAndBitshift+0xa8>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a3e      	ldr	r2, [pc, #248]	@ (8004fdc <DMA_CalcBaseAndBitshift+0x124>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d03b      	beq.n	8004f60 <DMA_CalcBaseAndBitshift+0xa8>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a3c      	ldr	r2, [pc, #240]	@ (8004fe0 <DMA_CalcBaseAndBitshift+0x128>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d036      	beq.n	8004f60 <DMA_CalcBaseAndBitshift+0xa8>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a3b      	ldr	r2, [pc, #236]	@ (8004fe4 <DMA_CalcBaseAndBitshift+0x12c>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d031      	beq.n	8004f60 <DMA_CalcBaseAndBitshift+0xa8>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a39      	ldr	r2, [pc, #228]	@ (8004fe8 <DMA_CalcBaseAndBitshift+0x130>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d02c      	beq.n	8004f60 <DMA_CalcBaseAndBitshift+0xa8>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a38      	ldr	r2, [pc, #224]	@ (8004fec <DMA_CalcBaseAndBitshift+0x134>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d027      	beq.n	8004f60 <DMA_CalcBaseAndBitshift+0xa8>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a36      	ldr	r2, [pc, #216]	@ (8004ff0 <DMA_CalcBaseAndBitshift+0x138>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d022      	beq.n	8004f60 <DMA_CalcBaseAndBitshift+0xa8>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a35      	ldr	r2, [pc, #212]	@ (8004ff4 <DMA_CalcBaseAndBitshift+0x13c>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d01d      	beq.n	8004f60 <DMA_CalcBaseAndBitshift+0xa8>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a33      	ldr	r2, [pc, #204]	@ (8004ff8 <DMA_CalcBaseAndBitshift+0x140>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d018      	beq.n	8004f60 <DMA_CalcBaseAndBitshift+0xa8>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a32      	ldr	r2, [pc, #200]	@ (8004ffc <DMA_CalcBaseAndBitshift+0x144>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d013      	beq.n	8004f60 <DMA_CalcBaseAndBitshift+0xa8>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a30      	ldr	r2, [pc, #192]	@ (8005000 <DMA_CalcBaseAndBitshift+0x148>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d00e      	beq.n	8004f60 <DMA_CalcBaseAndBitshift+0xa8>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a2f      	ldr	r2, [pc, #188]	@ (8005004 <DMA_CalcBaseAndBitshift+0x14c>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d009      	beq.n	8004f60 <DMA_CalcBaseAndBitshift+0xa8>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a2d      	ldr	r2, [pc, #180]	@ (8005008 <DMA_CalcBaseAndBitshift+0x150>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d004      	beq.n	8004f60 <DMA_CalcBaseAndBitshift+0xa8>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a2c      	ldr	r2, [pc, #176]	@ (800500c <DMA_CalcBaseAndBitshift+0x154>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d101      	bne.n	8004f64 <DMA_CalcBaseAndBitshift+0xac>
 8004f60:	2301      	movs	r3, #1
 8004f62:	e000      	b.n	8004f66 <DMA_CalcBaseAndBitshift+0xae>
 8004f64:	2300      	movs	r3, #0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d024      	beq.n	8004fb4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	3b10      	subs	r3, #16
 8004f72:	4a27      	ldr	r2, [pc, #156]	@ (8005010 <DMA_CalcBaseAndBitshift+0x158>)
 8004f74:	fba2 2303 	umull	r2, r3, r2, r3
 8004f78:	091b      	lsrs	r3, r3, #4
 8004f7a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f003 0307 	and.w	r3, r3, #7
 8004f82:	4a24      	ldr	r2, [pc, #144]	@ (8005014 <DMA_CalcBaseAndBitshift+0x15c>)
 8004f84:	5cd3      	ldrb	r3, [r2, r3]
 8004f86:	461a      	mov	r2, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2b03      	cmp	r3, #3
 8004f90:	d908      	bls.n	8004fa4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	461a      	mov	r2, r3
 8004f98:	4b1f      	ldr	r3, [pc, #124]	@ (8005018 <DMA_CalcBaseAndBitshift+0x160>)
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	1d1a      	adds	r2, r3, #4
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	659a      	str	r2, [r3, #88]	@ 0x58
 8004fa2:	e00d      	b.n	8004fc0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	461a      	mov	r2, r3
 8004faa:	4b1b      	ldr	r3, [pc, #108]	@ (8005018 <DMA_CalcBaseAndBitshift+0x160>)
 8004fac:	4013      	ands	r3, r2
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	6593      	str	r3, [r2, #88]	@ 0x58
 8004fb2:	e005      	b.n	8004fc0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3714      	adds	r7, #20
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr
 8004fd0:	40020010 	.word	0x40020010
 8004fd4:	40020028 	.word	0x40020028
 8004fd8:	40020040 	.word	0x40020040
 8004fdc:	40020058 	.word	0x40020058
 8004fe0:	40020070 	.word	0x40020070
 8004fe4:	40020088 	.word	0x40020088
 8004fe8:	400200a0 	.word	0x400200a0
 8004fec:	400200b8 	.word	0x400200b8
 8004ff0:	40020410 	.word	0x40020410
 8004ff4:	40020428 	.word	0x40020428
 8004ff8:	40020440 	.word	0x40020440
 8004ffc:	40020458 	.word	0x40020458
 8005000:	40020470 	.word	0x40020470
 8005004:	40020488 	.word	0x40020488
 8005008:	400204a0 	.word	0x400204a0
 800500c:	400204b8 	.word	0x400204b8
 8005010:	aaaaaaab 	.word	0xaaaaaaab
 8005014:	0800ce70 	.word	0x0800ce70
 8005018:	fffffc00 	.word	0xfffffc00

0800501c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 800501c:	b480      	push	{r7}
 800501e:	b085      	sub	sp, #20
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005024:	2300      	movs	r3, #0
 8005026:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	699b      	ldr	r3, [r3, #24]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d120      	bne.n	8005072 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005034:	2b03      	cmp	r3, #3
 8005036:	d858      	bhi.n	80050ea <DMA_CheckFifoParam+0xce>
 8005038:	a201      	add	r2, pc, #4	@ (adr r2, 8005040 <DMA_CheckFifoParam+0x24>)
 800503a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800503e:	bf00      	nop
 8005040:	08005051 	.word	0x08005051
 8005044:	08005063 	.word	0x08005063
 8005048:	08005051 	.word	0x08005051
 800504c:	080050eb 	.word	0x080050eb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005054:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005058:	2b00      	cmp	r3, #0
 800505a:	d048      	beq.n	80050ee <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005060:	e045      	b.n	80050ee <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005066:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800506a:	d142      	bne.n	80050f2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005070:	e03f      	b.n	80050f2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	699b      	ldr	r3, [r3, #24]
 8005076:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800507a:	d123      	bne.n	80050c4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005080:	2b03      	cmp	r3, #3
 8005082:	d838      	bhi.n	80050f6 <DMA_CheckFifoParam+0xda>
 8005084:	a201      	add	r2, pc, #4	@ (adr r2, 800508c <DMA_CheckFifoParam+0x70>)
 8005086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800508a:	bf00      	nop
 800508c:	0800509d 	.word	0x0800509d
 8005090:	080050a3 	.word	0x080050a3
 8005094:	0800509d 	.word	0x0800509d
 8005098:	080050b5 	.word	0x080050b5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	73fb      	strb	r3, [r7, #15]
        break;
 80050a0:	e030      	b.n	8005104 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050a6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d025      	beq.n	80050fa <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80050b2:	e022      	b.n	80050fa <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050b8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80050bc:	d11f      	bne.n	80050fe <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80050c2:	e01c      	b.n	80050fe <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	d902      	bls.n	80050d2 <DMA_CheckFifoParam+0xb6>
 80050cc:	2b03      	cmp	r3, #3
 80050ce:	d003      	beq.n	80050d8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80050d0:	e018      	b.n	8005104 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	73fb      	strb	r3, [r7, #15]
        break;
 80050d6:	e015      	b.n	8005104 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d00e      	beq.n	8005102 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	73fb      	strb	r3, [r7, #15]
    break;
 80050e8:	e00b      	b.n	8005102 <DMA_CheckFifoParam+0xe6>
        break;
 80050ea:	bf00      	nop
 80050ec:	e00a      	b.n	8005104 <DMA_CheckFifoParam+0xe8>
        break;
 80050ee:	bf00      	nop
 80050f0:	e008      	b.n	8005104 <DMA_CheckFifoParam+0xe8>
        break;
 80050f2:	bf00      	nop
 80050f4:	e006      	b.n	8005104 <DMA_CheckFifoParam+0xe8>
        break;
 80050f6:	bf00      	nop
 80050f8:	e004      	b.n	8005104 <DMA_CheckFifoParam+0xe8>
        break;
 80050fa:	bf00      	nop
 80050fc:	e002      	b.n	8005104 <DMA_CheckFifoParam+0xe8>
        break;
 80050fe:	bf00      	nop
 8005100:	e000      	b.n	8005104 <DMA_CheckFifoParam+0xe8>
    break;
 8005102:	bf00      	nop
    }
  }

  return status;
 8005104:	7bfb      	ldrb	r3, [r7, #15]
}
 8005106:	4618      	mov	r0, r3
 8005108:	3714      	adds	r7, #20
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr
 8005112:	bf00      	nop

08005114 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005114:	b480      	push	{r7}
 8005116:	b085      	sub	sp, #20
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a38      	ldr	r2, [pc, #224]	@ (8005208 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d022      	beq.n	8005172 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a36      	ldr	r2, [pc, #216]	@ (800520c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d01d      	beq.n	8005172 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a35      	ldr	r2, [pc, #212]	@ (8005210 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d018      	beq.n	8005172 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a33      	ldr	r2, [pc, #204]	@ (8005214 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d013      	beq.n	8005172 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a32      	ldr	r2, [pc, #200]	@ (8005218 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d00e      	beq.n	8005172 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a30      	ldr	r2, [pc, #192]	@ (800521c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d009      	beq.n	8005172 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a2f      	ldr	r2, [pc, #188]	@ (8005220 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d004      	beq.n	8005172 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a2d      	ldr	r2, [pc, #180]	@ (8005224 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d101      	bne.n	8005176 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005172:	2301      	movs	r3, #1
 8005174:	e000      	b.n	8005178 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005176:	2300      	movs	r3, #0
 8005178:	2b00      	cmp	r3, #0
 800517a:	d01a      	beq.n	80051b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	b2db      	uxtb	r3, r3
 8005182:	3b08      	subs	r3, #8
 8005184:	4a28      	ldr	r2, [pc, #160]	@ (8005228 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005186:	fba2 2303 	umull	r2, r3, r2, r3
 800518a:	091b      	lsrs	r3, r3, #4
 800518c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800518e:	68fa      	ldr	r2, [r7, #12]
 8005190:	4b26      	ldr	r3, [pc, #152]	@ (800522c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005192:	4413      	add	r3, r2
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	461a      	mov	r2, r3
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4a24      	ldr	r2, [pc, #144]	@ (8005230 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80051a0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	f003 031f 	and.w	r3, r3, #31
 80051a8:	2201      	movs	r2, #1
 80051aa:	409a      	lsls	r2, r3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80051b0:	e024      	b.n	80051fc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	3b10      	subs	r3, #16
 80051ba:	4a1e      	ldr	r2, [pc, #120]	@ (8005234 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80051bc:	fba2 2303 	umull	r2, r3, r2, r3
 80051c0:	091b      	lsrs	r3, r3, #4
 80051c2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	4a1c      	ldr	r2, [pc, #112]	@ (8005238 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d806      	bhi.n	80051da <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	4a1b      	ldr	r2, [pc, #108]	@ (800523c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d902      	bls.n	80051da <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	3308      	adds	r3, #8
 80051d8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	4b18      	ldr	r3, [pc, #96]	@ (8005240 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80051de:	4413      	add	r3, r2
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	461a      	mov	r2, r3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a16      	ldr	r2, [pc, #88]	@ (8005244 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80051ec:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f003 031f 	and.w	r3, r3, #31
 80051f4:	2201      	movs	r2, #1
 80051f6:	409a      	lsls	r2, r3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80051fc:	bf00      	nop
 80051fe:	3714      	adds	r7, #20
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr
 8005208:	58025408 	.word	0x58025408
 800520c:	5802541c 	.word	0x5802541c
 8005210:	58025430 	.word	0x58025430
 8005214:	58025444 	.word	0x58025444
 8005218:	58025458 	.word	0x58025458
 800521c:	5802546c 	.word	0x5802546c
 8005220:	58025480 	.word	0x58025480
 8005224:	58025494 	.word	0x58025494
 8005228:	cccccccd 	.word	0xcccccccd
 800522c:	16009600 	.word	0x16009600
 8005230:	58025880 	.word	0x58025880
 8005234:	aaaaaaab 	.word	0xaaaaaaab
 8005238:	400204b8 	.word	0x400204b8
 800523c:	4002040f 	.word	0x4002040f
 8005240:	10008200 	.word	0x10008200
 8005244:	40020880 	.word	0x40020880

08005248 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005248:	b480      	push	{r7}
 800524a:	b085      	sub	sp, #20
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	b2db      	uxtb	r3, r3
 8005256:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d04a      	beq.n	80052f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2b08      	cmp	r3, #8
 8005262:	d847      	bhi.n	80052f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a25      	ldr	r2, [pc, #148]	@ (8005300 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d022      	beq.n	80052b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a24      	ldr	r2, [pc, #144]	@ (8005304 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d01d      	beq.n	80052b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a22      	ldr	r2, [pc, #136]	@ (8005308 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d018      	beq.n	80052b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a21      	ldr	r2, [pc, #132]	@ (800530c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d013      	beq.n	80052b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a1f      	ldr	r2, [pc, #124]	@ (8005310 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d00e      	beq.n	80052b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a1e      	ldr	r2, [pc, #120]	@ (8005314 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d009      	beq.n	80052b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a1c      	ldr	r2, [pc, #112]	@ (8005318 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d004      	beq.n	80052b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a1b      	ldr	r2, [pc, #108]	@ (800531c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d101      	bne.n	80052b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80052b4:	2301      	movs	r3, #1
 80052b6:	e000      	b.n	80052ba <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80052b8:	2300      	movs	r3, #0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d00a      	beq.n	80052d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80052be:	68fa      	ldr	r2, [r7, #12]
 80052c0:	4b17      	ldr	r3, [pc, #92]	@ (8005320 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80052c2:	4413      	add	r3, r2
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	461a      	mov	r2, r3
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4a15      	ldr	r2, [pc, #84]	@ (8005324 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80052d0:	671a      	str	r2, [r3, #112]	@ 0x70
 80052d2:	e009      	b.n	80052e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80052d4:	68fa      	ldr	r2, [r7, #12]
 80052d6:	4b14      	ldr	r3, [pc, #80]	@ (8005328 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80052d8:	4413      	add	r3, r2
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	461a      	mov	r2, r3
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a11      	ldr	r2, [pc, #68]	@ (800532c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80052e6:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	3b01      	subs	r3, #1
 80052ec:	2201      	movs	r2, #1
 80052ee:	409a      	lsls	r2, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80052f4:	bf00      	nop
 80052f6:	3714      	adds	r7, #20
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr
 8005300:	58025408 	.word	0x58025408
 8005304:	5802541c 	.word	0x5802541c
 8005308:	58025430 	.word	0x58025430
 800530c:	58025444 	.word	0x58025444
 8005310:	58025458 	.word	0x58025458
 8005314:	5802546c 	.word	0x5802546c
 8005318:	58025480 	.word	0x58025480
 800531c:	58025494 	.word	0x58025494
 8005320:	1600963f 	.word	0x1600963f
 8005324:	58025940 	.word	0x58025940
 8005328:	1000823f 	.word	0x1000823f
 800532c:	40020940 	.word	0x40020940

08005330 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA Stream.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8005330:	b480      	push	{r7}
 8005332:	b085      	sub	sp, #20
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	6039      	str	r1, [r7, #0]
  uint32_t syncSignalID = 0;
 800533a:	2300      	movs	r3, #0
 800533c:	60fb      	str	r3, [r7, #12]
  uint32_t syncPolarity = 0;
 800533e:	2300      	movs	r3, #0
 8005340:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  if(pSyncConfig->SyncEnable == ENABLE)
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	7a1b      	ldrb	r3, [r3, #8]
 8005346:	2b01      	cmp	r3, #1
 8005348:	d154      	bne.n	80053f4 <HAL_DMAEx_ConfigMuxSync+0xc4>
  {
    assert_param(IS_DMAMUX_SYNC_POLARITY(pSyncConfig->SyncPolarity));

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a4b      	ldr	r2, [pc, #300]	@ (800547c <HAL_DMAEx_ConfigMuxSync+0x14c>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d049      	beq.n	80053e8 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a49      	ldr	r2, [pc, #292]	@ (8005480 <HAL_DMAEx_ConfigMuxSync+0x150>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d044      	beq.n	80053e8 <HAL_DMAEx_ConfigMuxSync+0xb8>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a48      	ldr	r2, [pc, #288]	@ (8005484 <HAL_DMAEx_ConfigMuxSync+0x154>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d03f      	beq.n	80053e8 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a46      	ldr	r2, [pc, #280]	@ (8005488 <HAL_DMAEx_ConfigMuxSync+0x158>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d03a      	beq.n	80053e8 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a45      	ldr	r2, [pc, #276]	@ (800548c <HAL_DMAEx_ConfigMuxSync+0x15c>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d035      	beq.n	80053e8 <HAL_DMAEx_ConfigMuxSync+0xb8>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a43      	ldr	r2, [pc, #268]	@ (8005490 <HAL_DMAEx_ConfigMuxSync+0x160>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d030      	beq.n	80053e8 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a42      	ldr	r2, [pc, #264]	@ (8005494 <HAL_DMAEx_ConfigMuxSync+0x164>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d02b      	beq.n	80053e8 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a40      	ldr	r2, [pc, #256]	@ (8005498 <HAL_DMAEx_ConfigMuxSync+0x168>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d026      	beq.n	80053e8 <HAL_DMAEx_ConfigMuxSync+0xb8>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a3f      	ldr	r2, [pc, #252]	@ (800549c <HAL_DMAEx_ConfigMuxSync+0x16c>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d021      	beq.n	80053e8 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a3d      	ldr	r2, [pc, #244]	@ (80054a0 <HAL_DMAEx_ConfigMuxSync+0x170>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d01c      	beq.n	80053e8 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a3c      	ldr	r2, [pc, #240]	@ (80054a4 <HAL_DMAEx_ConfigMuxSync+0x174>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d017      	beq.n	80053e8 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a3a      	ldr	r2, [pc, #232]	@ (80054a8 <HAL_DMAEx_ConfigMuxSync+0x178>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d012      	beq.n	80053e8 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a39      	ldr	r2, [pc, #228]	@ (80054ac <HAL_DMAEx_ConfigMuxSync+0x17c>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d00d      	beq.n	80053e8 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a37      	ldr	r2, [pc, #220]	@ (80054b0 <HAL_DMAEx_ConfigMuxSync+0x180>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d008      	beq.n	80053e8 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a36      	ldr	r2, [pc, #216]	@ (80054b4 <HAL_DMAEx_ConfigMuxSync+0x184>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d003      	beq.n	80053e8 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a34      	ldr	r2, [pc, #208]	@ (80054b8 <HAL_DMAEx_ConfigMuxSync+0x188>)
 80053e6:	4293      	cmp	r3, r2
    }
    else
    {
      assert_param(IS_BDMA_DMAMUX_SYNC_SIGNAL_ID(pSyncConfig->SyncSignalID));
    }
    syncSignalID = pSyncConfig->SyncSignalID;
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	60fb      	str	r3, [r7, #12]
    syncPolarity = pSyncConfig->SyncPolarity;
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	60bb      	str	r3, [r7, #8]
  }

  /*Check if the DMA state is ready */
  if(hdma->State == HAL_DMA_STATE_READY)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d131      	bne.n	8005464 <HAL_DMAEx_ConfigMuxSync+0x134>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005406:	2b01      	cmp	r3, #1
 8005408:	d101      	bne.n	800540e <HAL_DMAEx_ConfigMuxSync+0xde>
 800540a:	2302      	movs	r3, #2
 800540c:	e02f      	b.n	800546e <HAL_DMAEx_ConfigMuxSync+0x13e>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2201      	movs	r2, #1
 8005412:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the synchronization and event generation before applying a new config */
    CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005420:	f422 3281 	bic.w	r2, r2, #66048	@ 0x10200
 8005424:	601a      	str	r2, [r3, #0]

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	b2d9      	uxtb	r1, r3
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	061a      	lsls	r2, r3, #24
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	3b01      	subs	r3, #1
 8005438:	04db      	lsls	r3, r3, #19
 800543a:	431a      	orrs	r2, r3
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	431a      	orrs	r2, r3
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	7a1b      	ldrb	r3, [r3, #8]
 8005444:	041b      	lsls	r3, r3, #16
 8005446:	431a      	orrs	r2, r3
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	7a5b      	ldrb	r3, [r3, #9]
 800544c:	025b      	lsls	r3, r3, #9
 800544e:	431a      	orrs	r2, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005454:	430a      	orrs	r2, r1
 8005456:	601a      	str	r2, [r3, #0]
               ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               syncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)    | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

      /* Process Locked */
    __HAL_UNLOCK(hdma);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8005460:	2300      	movs	r3, #0
 8005462:	e004      	b.n	800546e <HAL_DMAEx_ConfigMuxSync+0x13e>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800546a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return error status */
    return HAL_ERROR;
 800546c:	2301      	movs	r3, #1
  }
}
 800546e:	4618      	mov	r0, r3
 8005470:	3714      	adds	r7, #20
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr
 800547a:	bf00      	nop
 800547c:	40020010 	.word	0x40020010
 8005480:	40020028 	.word	0x40020028
 8005484:	40020040 	.word	0x40020040
 8005488:	40020058 	.word	0x40020058
 800548c:	40020070 	.word	0x40020070
 8005490:	40020088 	.word	0x40020088
 8005494:	400200a0 	.word	0x400200a0
 8005498:	400200b8 	.word	0x400200b8
 800549c:	40020410 	.word	0x40020410
 80054a0:	40020428 	.word	0x40020428
 80054a4:	40020440 	.word	0x40020440
 80054a8:	40020458 	.word	0x40020458
 80054ac:	40020470 	.word	0x40020470
 80054b0:	40020488 	.word	0x40020488
 80054b4:	400204a0 	.word	0x400204a0
 80054b8:	400204b8 	.word	0x400204b8

080054bc <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80054bc:	b480      	push	{r7}
 80054be:	b087      	sub	sp, #28
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	460b      	mov	r3, r1
 80054c6:	607a      	str	r2, [r7, #4]
 80054c8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80054ca:	2300      	movs	r3, #0
 80054cc:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d101      	bne.n	80054d8 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e00a      	b.n	80054ee <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 80054d8:	7afb      	ldrb	r3, [r7, #11]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d103      	bne.n	80054e6 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	605a      	str	r2, [r3, #4]
      break;
 80054e4:	e002      	b.n	80054ec <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	75fb      	strb	r3, [r7, #23]
      break;
 80054ea:	bf00      	nop
  }

  return status;
 80054ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	371c      	adds	r7, #28
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr

080054fa <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80054fa:	b480      	push	{r7}
 80054fc:	b083      	sub	sp, #12
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
 8005502:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d101      	bne.n	800550e <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e003      	b.n	8005516 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	683a      	ldr	r2, [r7, #0]
 8005512:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8005514:	2300      	movs	r3, #0
  }
}
 8005516:	4618      	mov	r0, r3
 8005518:	370c      	adds	r7, #12
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr
	...

08005524 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8005524:	b480      	push	{r7}
 8005526:	b089      	sub	sp, #36	@ 0x24
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800552e:	2300      	movs	r3, #0
 8005530:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005532:	4b89      	ldr	r3, [pc, #548]	@ (8005758 <HAL_GPIO_Init+0x234>)
 8005534:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005536:	e194      	b.n	8005862 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	2101      	movs	r1, #1
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	fa01 f303 	lsl.w	r3, r1, r3
 8005544:	4013      	ands	r3, r2
 8005546:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	2b00      	cmp	r3, #0
 800554c:	f000 8186 	beq.w	800585c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	f003 0303 	and.w	r3, r3, #3
 8005558:	2b01      	cmp	r3, #1
 800555a:	d005      	beq.n	8005568 <HAL_GPIO_Init+0x44>
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	f003 0303 	and.w	r3, r3, #3
 8005564:	2b02      	cmp	r3, #2
 8005566:	d130      	bne.n	80055ca <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	005b      	lsls	r3, r3, #1
 8005572:	2203      	movs	r2, #3
 8005574:	fa02 f303 	lsl.w	r3, r2, r3
 8005578:	43db      	mvns	r3, r3
 800557a:	69ba      	ldr	r2, [r7, #24]
 800557c:	4013      	ands	r3, r2
 800557e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	68da      	ldr	r2, [r3, #12]
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	005b      	lsls	r3, r3, #1
 8005588:	fa02 f303 	lsl.w	r3, r2, r3
 800558c:	69ba      	ldr	r2, [r7, #24]
 800558e:	4313      	orrs	r3, r2
 8005590:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	69ba      	ldr	r2, [r7, #24]
 8005596:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800559e:	2201      	movs	r2, #1
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	fa02 f303 	lsl.w	r3, r2, r3
 80055a6:	43db      	mvns	r3, r3
 80055a8:	69ba      	ldr	r2, [r7, #24]
 80055aa:	4013      	ands	r3, r2
 80055ac:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	091b      	lsrs	r3, r3, #4
 80055b4:	f003 0201 	and.w	r2, r3, #1
 80055b8:	69fb      	ldr	r3, [r7, #28]
 80055ba:	fa02 f303 	lsl.w	r3, r2, r3
 80055be:	69ba      	ldr	r2, [r7, #24]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	69ba      	ldr	r2, [r7, #24]
 80055c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	f003 0303 	and.w	r3, r3, #3
 80055d2:	2b03      	cmp	r3, #3
 80055d4:	d017      	beq.n	8005606 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	005b      	lsls	r3, r3, #1
 80055e0:	2203      	movs	r2, #3
 80055e2:	fa02 f303 	lsl.w	r3, r2, r3
 80055e6:	43db      	mvns	r3, r3
 80055e8:	69ba      	ldr	r2, [r7, #24]
 80055ea:	4013      	ands	r3, r2
 80055ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	689a      	ldr	r2, [r3, #8]
 80055f2:	69fb      	ldr	r3, [r7, #28]
 80055f4:	005b      	lsls	r3, r3, #1
 80055f6:	fa02 f303 	lsl.w	r3, r2, r3
 80055fa:	69ba      	ldr	r2, [r7, #24]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	69ba      	ldr	r2, [r7, #24]
 8005604:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	f003 0303 	and.w	r3, r3, #3
 800560e:	2b02      	cmp	r3, #2
 8005610:	d123      	bne.n	800565a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	08da      	lsrs	r2, r3, #3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	3208      	adds	r2, #8
 800561a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800561e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	f003 0307 	and.w	r3, r3, #7
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	220f      	movs	r2, #15
 800562a:	fa02 f303 	lsl.w	r3, r2, r3
 800562e:	43db      	mvns	r3, r3
 8005630:	69ba      	ldr	r2, [r7, #24]
 8005632:	4013      	ands	r3, r2
 8005634:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	691a      	ldr	r2, [r3, #16]
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	f003 0307 	and.w	r3, r3, #7
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	fa02 f303 	lsl.w	r3, r2, r3
 8005646:	69ba      	ldr	r2, [r7, #24]
 8005648:	4313      	orrs	r3, r2
 800564a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	08da      	lsrs	r2, r3, #3
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	3208      	adds	r2, #8
 8005654:	69b9      	ldr	r1, [r7, #24]
 8005656:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	005b      	lsls	r3, r3, #1
 8005664:	2203      	movs	r2, #3
 8005666:	fa02 f303 	lsl.w	r3, r2, r3
 800566a:	43db      	mvns	r3, r3
 800566c:	69ba      	ldr	r2, [r7, #24]
 800566e:	4013      	ands	r3, r2
 8005670:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	f003 0203 	and.w	r2, r3, #3
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	005b      	lsls	r3, r3, #1
 800567e:	fa02 f303 	lsl.w	r3, r2, r3
 8005682:	69ba      	ldr	r2, [r7, #24]
 8005684:	4313      	orrs	r3, r2
 8005686:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	69ba      	ldr	r2, [r7, #24]
 800568c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005696:	2b00      	cmp	r3, #0
 8005698:	f000 80e0 	beq.w	800585c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800569c:	4b2f      	ldr	r3, [pc, #188]	@ (800575c <HAL_GPIO_Init+0x238>)
 800569e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80056a2:	4a2e      	ldr	r2, [pc, #184]	@ (800575c <HAL_GPIO_Init+0x238>)
 80056a4:	f043 0302 	orr.w	r3, r3, #2
 80056a8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80056ac:	4b2b      	ldr	r3, [pc, #172]	@ (800575c <HAL_GPIO_Init+0x238>)
 80056ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80056b2:	f003 0302 	and.w	r3, r3, #2
 80056b6:	60fb      	str	r3, [r7, #12]
 80056b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80056ba:	4a29      	ldr	r2, [pc, #164]	@ (8005760 <HAL_GPIO_Init+0x23c>)
 80056bc:	69fb      	ldr	r3, [r7, #28]
 80056be:	089b      	lsrs	r3, r3, #2
 80056c0:	3302      	adds	r3, #2
 80056c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80056c8:	69fb      	ldr	r3, [r7, #28]
 80056ca:	f003 0303 	and.w	r3, r3, #3
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	220f      	movs	r2, #15
 80056d2:	fa02 f303 	lsl.w	r3, r2, r3
 80056d6:	43db      	mvns	r3, r3
 80056d8:	69ba      	ldr	r2, [r7, #24]
 80056da:	4013      	ands	r3, r2
 80056dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a20      	ldr	r2, [pc, #128]	@ (8005764 <HAL_GPIO_Init+0x240>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d052      	beq.n	800578c <HAL_GPIO_Init+0x268>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a1f      	ldr	r2, [pc, #124]	@ (8005768 <HAL_GPIO_Init+0x244>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d031      	beq.n	8005752 <HAL_GPIO_Init+0x22e>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a1e      	ldr	r2, [pc, #120]	@ (800576c <HAL_GPIO_Init+0x248>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d02b      	beq.n	800574e <HAL_GPIO_Init+0x22a>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a1d      	ldr	r2, [pc, #116]	@ (8005770 <HAL_GPIO_Init+0x24c>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d025      	beq.n	800574a <HAL_GPIO_Init+0x226>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a1c      	ldr	r2, [pc, #112]	@ (8005774 <HAL_GPIO_Init+0x250>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d01f      	beq.n	8005746 <HAL_GPIO_Init+0x222>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a1b      	ldr	r2, [pc, #108]	@ (8005778 <HAL_GPIO_Init+0x254>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d019      	beq.n	8005742 <HAL_GPIO_Init+0x21e>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a1a      	ldr	r2, [pc, #104]	@ (800577c <HAL_GPIO_Init+0x258>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d013      	beq.n	800573e <HAL_GPIO_Init+0x21a>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a19      	ldr	r2, [pc, #100]	@ (8005780 <HAL_GPIO_Init+0x25c>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d00d      	beq.n	800573a <HAL_GPIO_Init+0x216>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a18      	ldr	r2, [pc, #96]	@ (8005784 <HAL_GPIO_Init+0x260>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d007      	beq.n	8005736 <HAL_GPIO_Init+0x212>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a17      	ldr	r2, [pc, #92]	@ (8005788 <HAL_GPIO_Init+0x264>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d101      	bne.n	8005732 <HAL_GPIO_Init+0x20e>
 800572e:	2309      	movs	r3, #9
 8005730:	e02d      	b.n	800578e <HAL_GPIO_Init+0x26a>
 8005732:	230a      	movs	r3, #10
 8005734:	e02b      	b.n	800578e <HAL_GPIO_Init+0x26a>
 8005736:	2308      	movs	r3, #8
 8005738:	e029      	b.n	800578e <HAL_GPIO_Init+0x26a>
 800573a:	2307      	movs	r3, #7
 800573c:	e027      	b.n	800578e <HAL_GPIO_Init+0x26a>
 800573e:	2306      	movs	r3, #6
 8005740:	e025      	b.n	800578e <HAL_GPIO_Init+0x26a>
 8005742:	2305      	movs	r3, #5
 8005744:	e023      	b.n	800578e <HAL_GPIO_Init+0x26a>
 8005746:	2304      	movs	r3, #4
 8005748:	e021      	b.n	800578e <HAL_GPIO_Init+0x26a>
 800574a:	2303      	movs	r3, #3
 800574c:	e01f      	b.n	800578e <HAL_GPIO_Init+0x26a>
 800574e:	2302      	movs	r3, #2
 8005750:	e01d      	b.n	800578e <HAL_GPIO_Init+0x26a>
 8005752:	2301      	movs	r3, #1
 8005754:	e01b      	b.n	800578e <HAL_GPIO_Init+0x26a>
 8005756:	bf00      	nop
 8005758:	58000080 	.word	0x58000080
 800575c:	58024400 	.word	0x58024400
 8005760:	58000400 	.word	0x58000400
 8005764:	58020000 	.word	0x58020000
 8005768:	58020400 	.word	0x58020400
 800576c:	58020800 	.word	0x58020800
 8005770:	58020c00 	.word	0x58020c00
 8005774:	58021000 	.word	0x58021000
 8005778:	58021400 	.word	0x58021400
 800577c:	58021800 	.word	0x58021800
 8005780:	58021c00 	.word	0x58021c00
 8005784:	58022000 	.word	0x58022000
 8005788:	58022400 	.word	0x58022400
 800578c:	2300      	movs	r3, #0
 800578e:	69fa      	ldr	r2, [r7, #28]
 8005790:	f002 0203 	and.w	r2, r2, #3
 8005794:	0092      	lsls	r2, r2, #2
 8005796:	4093      	lsls	r3, r2
 8005798:	69ba      	ldr	r2, [r7, #24]
 800579a:	4313      	orrs	r3, r2
 800579c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800579e:	4938      	ldr	r1, [pc, #224]	@ (8005880 <HAL_GPIO_Init+0x35c>)
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	089b      	lsrs	r3, r3, #2
 80057a4:	3302      	adds	r3, #2
 80057a6:	69ba      	ldr	r2, [r7, #24]
 80057a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80057ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	43db      	mvns	r3, r3
 80057b8:	69ba      	ldr	r2, [r7, #24]
 80057ba:	4013      	ands	r3, r2
 80057bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d003      	beq.n	80057d2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80057ca:	69ba      	ldr	r2, [r7, #24]
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80057d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80057da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	43db      	mvns	r3, r3
 80057e6:	69ba      	ldr	r2, [r7, #24]
 80057e8:	4013      	ands	r3, r2
 80057ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d003      	beq.n	8005800 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80057f8:	69ba      	ldr	r2, [r7, #24]
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005800:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005804:	69bb      	ldr	r3, [r7, #24]
 8005806:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	43db      	mvns	r3, r3
 8005812:	69ba      	ldr	r2, [r7, #24]
 8005814:	4013      	ands	r3, r2
 8005816:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005820:	2b00      	cmp	r3, #0
 8005822:	d003      	beq.n	800582c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005824:	69ba      	ldr	r2, [r7, #24]
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	4313      	orrs	r3, r2
 800582a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	69ba      	ldr	r2, [r7, #24]
 8005830:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	43db      	mvns	r3, r3
 800583c:	69ba      	ldr	r2, [r7, #24]
 800583e:	4013      	ands	r3, r2
 8005840:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800584a:	2b00      	cmp	r3, #0
 800584c:	d003      	beq.n	8005856 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800584e:	69ba      	ldr	r2, [r7, #24]
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	4313      	orrs	r3, r2
 8005854:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	69ba      	ldr	r2, [r7, #24]
 800585a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	3301      	adds	r3, #1
 8005860:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	69fb      	ldr	r3, [r7, #28]
 8005868:	fa22 f303 	lsr.w	r3, r2, r3
 800586c:	2b00      	cmp	r3, #0
 800586e:	f47f ae63 	bne.w	8005538 <HAL_GPIO_Init+0x14>
  }
}
 8005872:	bf00      	nop
 8005874:	bf00      	nop
 8005876:	3724      	adds	r7, #36	@ 0x24
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr
 8005880:	58000400 	.word	0x58000400

08005884 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	460b      	mov	r3, r1
 800588e:	807b      	strh	r3, [r7, #2]
 8005890:	4613      	mov	r3, r2
 8005892:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005894:	787b      	ldrb	r3, [r7, #1]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d003      	beq.n	80058a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800589a:	887a      	ldrh	r2, [r7, #2]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80058a0:	e003      	b.n	80058aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80058a2:	887b      	ldrh	r3, [r7, #2]
 80058a4:	041a      	lsls	r2, r3, #16
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	619a      	str	r2, [r3, #24]
}
 80058aa:	bf00      	nop
 80058ac:	370c      	adds	r7, #12
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr
	...

080058b8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80058c0:	4a08      	ldr	r2, [pc, #32]	@ (80058e4 <HAL_HSEM_FastTake+0x2c>)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	3320      	adds	r3, #32
 80058c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058ca:	4a07      	ldr	r2, [pc, #28]	@ (80058e8 <HAL_HSEM_FastTake+0x30>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d101      	bne.n	80058d4 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80058d0:	2300      	movs	r3, #0
 80058d2:	e000      	b.n	80058d6 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	370c      	adds	r7, #12
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr
 80058e2:	bf00      	nop
 80058e4:	58026400 	.word	0x58026400
 80058e8:	80000300 	.word	0x80000300

080058ec <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b083      	sub	sp, #12
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80058f6:	4906      	ldr	r1, [pc, #24]	@ (8005910 <HAL_HSEM_Release+0x24>)
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8005904:	bf00      	nop
 8005906:	370c      	adds	r7, #12
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr
 8005910:	58026400 	.word	0x58026400

08005914 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b082      	sub	sp, #8
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d101      	bne.n	8005926 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e08b      	b.n	8005a3e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800592c:	b2db      	uxtb	r3, r3
 800592e:	2b00      	cmp	r3, #0
 8005930:	d106      	bne.n	8005940 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f7fc ff68 	bl	8002810 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2224      	movs	r2, #36	@ 0x24
 8005944:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f022 0201 	bic.w	r2, r2, #1
 8005956:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	685a      	ldr	r2, [r3, #4]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005964:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	689a      	ldr	r2, [r3, #8]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005974:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	2b01      	cmp	r3, #1
 800597c:	d107      	bne.n	800598e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	689a      	ldr	r2, [r3, #8]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800598a:	609a      	str	r2, [r3, #8]
 800598c:	e006      	b.n	800599c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	689a      	ldr	r2, [r3, #8]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800599a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	2b02      	cmp	r3, #2
 80059a2:	d108      	bne.n	80059b6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	685a      	ldr	r2, [r3, #4]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80059b2:	605a      	str	r2, [r3, #4]
 80059b4:	e007      	b.n	80059c6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	685a      	ldr	r2, [r3, #4]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80059c4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	6859      	ldr	r1, [r3, #4]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	4b1d      	ldr	r3, [pc, #116]	@ (8005a48 <HAL_I2C_Init+0x134>)
 80059d2:	430b      	orrs	r3, r1
 80059d4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	68da      	ldr	r2, [r3, #12]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80059e4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	691a      	ldr	r2, [r3, #16]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	695b      	ldr	r3, [r3, #20]
 80059ee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	699b      	ldr	r3, [r3, #24]
 80059f6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	430a      	orrs	r2, r1
 80059fe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	69d9      	ldr	r1, [r3, #28]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6a1a      	ldr	r2, [r3, #32]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	430a      	orrs	r2, r1
 8005a0e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f042 0201 	orr.w	r2, r2, #1
 8005a1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2220      	movs	r2, #32
 8005a2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2200      	movs	r2, #0
 8005a38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005a3c:	2300      	movs	r3, #0
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3708      	adds	r7, #8
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
 8005a46:	bf00      	nop
 8005a48:	02008000 	.word	0x02008000

08005a4c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b088      	sub	sp, #32
 8005a50:	af02      	add	r7, sp, #8
 8005a52:	60f8      	str	r0, [r7, #12]
 8005a54:	4608      	mov	r0, r1
 8005a56:	4611      	mov	r1, r2
 8005a58:	461a      	mov	r2, r3
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	817b      	strh	r3, [r7, #10]
 8005a5e:	460b      	mov	r3, r1
 8005a60:	813b      	strh	r3, [r7, #8]
 8005a62:	4613      	mov	r3, r2
 8005a64:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	2b20      	cmp	r3, #32
 8005a70:	f040 80f9 	bne.w	8005c66 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a74:	6a3b      	ldr	r3, [r7, #32]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d002      	beq.n	8005a80 <HAL_I2C_Mem_Write+0x34>
 8005a7a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d105      	bne.n	8005a8c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a86:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	e0ed      	b.n	8005c68 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d101      	bne.n	8005a9a <HAL_I2C_Mem_Write+0x4e>
 8005a96:	2302      	movs	r3, #2
 8005a98:	e0e6      	b.n	8005c68 <HAL_I2C_Mem_Write+0x21c>
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005aa2:	f7fd fa15 	bl	8002ed0 <HAL_GetTick>
 8005aa6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	9300      	str	r3, [sp, #0]
 8005aac:	2319      	movs	r3, #25
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005ab4:	68f8      	ldr	r0, [r7, #12]
 8005ab6:	f000 fac3 	bl	8006040 <I2C_WaitOnFlagUntilTimeout>
 8005aba:	4603      	mov	r3, r0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d001      	beq.n	8005ac4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e0d1      	b.n	8005c68 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2221      	movs	r2, #33	@ 0x21
 8005ac8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2240      	movs	r2, #64	@ 0x40
 8005ad0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	6a3a      	ldr	r2, [r7, #32]
 8005ade:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005ae4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005aec:	88f8      	ldrh	r0, [r7, #6]
 8005aee:	893a      	ldrh	r2, [r7, #8]
 8005af0:	8979      	ldrh	r1, [r7, #10]
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	9301      	str	r3, [sp, #4]
 8005af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005af8:	9300      	str	r3, [sp, #0]
 8005afa:	4603      	mov	r3, r0
 8005afc:	68f8      	ldr	r0, [r7, #12]
 8005afe:	f000 f9d3 	bl	8005ea8 <I2C_RequestMemoryWrite>
 8005b02:	4603      	mov	r3, r0
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d005      	beq.n	8005b14 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	e0a9      	b.n	8005c68 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	2bff      	cmp	r3, #255	@ 0xff
 8005b1c:	d90e      	bls.n	8005b3c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	22ff      	movs	r2, #255	@ 0xff
 8005b22:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b28:	b2da      	uxtb	r2, r3
 8005b2a:	8979      	ldrh	r1, [r7, #10]
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	9300      	str	r3, [sp, #0]
 8005b30:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005b34:	68f8      	ldr	r0, [r7, #12]
 8005b36:	f000 fc47 	bl	80063c8 <I2C_TransferConfig>
 8005b3a:	e00f      	b.n	8005b5c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b40:	b29a      	uxth	r2, r3
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b4a:	b2da      	uxtb	r2, r3
 8005b4c:	8979      	ldrh	r1, [r7, #10]
 8005b4e:	2300      	movs	r3, #0
 8005b50:	9300      	str	r3, [sp, #0]
 8005b52:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005b56:	68f8      	ldr	r0, [r7, #12]
 8005b58:	f000 fc36 	bl	80063c8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b5c:	697a      	ldr	r2, [r7, #20]
 8005b5e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b60:	68f8      	ldr	r0, [r7, #12]
 8005b62:	f000 fac6 	bl	80060f2 <I2C_WaitOnTXISFlagUntilTimeout>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d001      	beq.n	8005b70 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e07b      	b.n	8005c68 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b74:	781a      	ldrb	r2, [r3, #0]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b80:	1c5a      	adds	r2, r3, #1
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	3b01      	subs	r3, #1
 8005b8e:	b29a      	uxth	r2, r3
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b98:	3b01      	subs	r3, #1
 8005b9a:	b29a      	uxth	r2, r3
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d034      	beq.n	8005c14 <HAL_I2C_Mem_Write+0x1c8>
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d130      	bne.n	8005c14 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	9300      	str	r3, [sp, #0]
 8005bb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bb8:	2200      	movs	r2, #0
 8005bba:	2180      	movs	r1, #128	@ 0x80
 8005bbc:	68f8      	ldr	r0, [r7, #12]
 8005bbe:	f000 fa3f 	bl	8006040 <I2C_WaitOnFlagUntilTimeout>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d001      	beq.n	8005bcc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e04d      	b.n	8005c68 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	2bff      	cmp	r3, #255	@ 0xff
 8005bd4:	d90e      	bls.n	8005bf4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	22ff      	movs	r2, #255	@ 0xff
 8005bda:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005be0:	b2da      	uxtb	r2, r3
 8005be2:	8979      	ldrh	r1, [r7, #10]
 8005be4:	2300      	movs	r3, #0
 8005be6:	9300      	str	r3, [sp, #0]
 8005be8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005bec:	68f8      	ldr	r0, [r7, #12]
 8005bee:	f000 fbeb 	bl	80063c8 <I2C_TransferConfig>
 8005bf2:	e00f      	b.n	8005c14 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bf8:	b29a      	uxth	r2, r3
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c02:	b2da      	uxtb	r2, r3
 8005c04:	8979      	ldrh	r1, [r7, #10]
 8005c06:	2300      	movs	r3, #0
 8005c08:	9300      	str	r3, [sp, #0]
 8005c0a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005c0e:	68f8      	ldr	r0, [r7, #12]
 8005c10:	f000 fbda 	bl	80063c8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d19e      	bne.n	8005b5c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c1e:	697a      	ldr	r2, [r7, #20]
 8005c20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005c22:	68f8      	ldr	r0, [r7, #12]
 8005c24:	f000 faac 	bl	8006180 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d001      	beq.n	8005c32 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e01a      	b.n	8005c68 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	2220      	movs	r2, #32
 8005c38:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	6859      	ldr	r1, [r3, #4]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	4b0a      	ldr	r3, [pc, #40]	@ (8005c70 <HAL_I2C_Mem_Write+0x224>)
 8005c46:	400b      	ands	r3, r1
 8005c48:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2220      	movs	r2, #32
 8005c4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2200      	movs	r2, #0
 8005c56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005c62:	2300      	movs	r3, #0
 8005c64:	e000      	b.n	8005c68 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005c66:	2302      	movs	r3, #2
  }
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3718      	adds	r7, #24
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}
 8005c70:	fe00e800 	.word	0xfe00e800

08005c74 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b088      	sub	sp, #32
 8005c78:	af02      	add	r7, sp, #8
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	4608      	mov	r0, r1
 8005c7e:	4611      	mov	r1, r2
 8005c80:	461a      	mov	r2, r3
 8005c82:	4603      	mov	r3, r0
 8005c84:	817b      	strh	r3, [r7, #10]
 8005c86:	460b      	mov	r3, r1
 8005c88:	813b      	strh	r3, [r7, #8]
 8005c8a:	4613      	mov	r3, r2
 8005c8c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	2b20      	cmp	r3, #32
 8005c98:	f040 80fd 	bne.w	8005e96 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c9c:	6a3b      	ldr	r3, [r7, #32]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d002      	beq.n	8005ca8 <HAL_I2C_Mem_Read+0x34>
 8005ca2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d105      	bne.n	8005cb4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005cae:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	e0f1      	b.n	8005e98 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d101      	bne.n	8005cc2 <HAL_I2C_Mem_Read+0x4e>
 8005cbe:	2302      	movs	r3, #2
 8005cc0:	e0ea      	b.n	8005e98 <HAL_I2C_Mem_Read+0x224>
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005cca:	f7fd f901 	bl	8002ed0 <HAL_GetTick>
 8005cce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	9300      	str	r3, [sp, #0]
 8005cd4:	2319      	movs	r3, #25
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005cdc:	68f8      	ldr	r0, [r7, #12]
 8005cde:	f000 f9af 	bl	8006040 <I2C_WaitOnFlagUntilTimeout>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d001      	beq.n	8005cec <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e0d5      	b.n	8005e98 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2222      	movs	r2, #34	@ 0x22
 8005cf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2240      	movs	r2, #64	@ 0x40
 8005cf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6a3a      	ldr	r2, [r7, #32]
 8005d06:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005d0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2200      	movs	r2, #0
 8005d12:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005d14:	88f8      	ldrh	r0, [r7, #6]
 8005d16:	893a      	ldrh	r2, [r7, #8]
 8005d18:	8979      	ldrh	r1, [r7, #10]
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	9301      	str	r3, [sp, #4]
 8005d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d20:	9300      	str	r3, [sp, #0]
 8005d22:	4603      	mov	r3, r0
 8005d24:	68f8      	ldr	r0, [r7, #12]
 8005d26:	f000 f913 	bl	8005f50 <I2C_RequestMemoryRead>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d005      	beq.n	8005d3c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e0ad      	b.n	8005e98 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	2bff      	cmp	r3, #255	@ 0xff
 8005d44:	d90e      	bls.n	8005d64 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	22ff      	movs	r2, #255	@ 0xff
 8005d4a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d50:	b2da      	uxtb	r2, r3
 8005d52:	8979      	ldrh	r1, [r7, #10]
 8005d54:	4b52      	ldr	r3, [pc, #328]	@ (8005ea0 <HAL_I2C_Mem_Read+0x22c>)
 8005d56:	9300      	str	r3, [sp, #0]
 8005d58:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005d5c:	68f8      	ldr	r0, [r7, #12]
 8005d5e:	f000 fb33 	bl	80063c8 <I2C_TransferConfig>
 8005d62:	e00f      	b.n	8005d84 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d68:	b29a      	uxth	r2, r3
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d72:	b2da      	uxtb	r2, r3
 8005d74:	8979      	ldrh	r1, [r7, #10]
 8005d76:	4b4a      	ldr	r3, [pc, #296]	@ (8005ea0 <HAL_I2C_Mem_Read+0x22c>)
 8005d78:	9300      	str	r3, [sp, #0]
 8005d7a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005d7e:	68f8      	ldr	r0, [r7, #12]
 8005d80:	f000 fb22 	bl	80063c8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	9300      	str	r3, [sp, #0]
 8005d88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	2104      	movs	r1, #4
 8005d8e:	68f8      	ldr	r0, [r7, #12]
 8005d90:	f000 f956 	bl	8006040 <I2C_WaitOnFlagUntilTimeout>
 8005d94:	4603      	mov	r3, r0
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d001      	beq.n	8005d9e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e07c      	b.n	8005e98 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005da8:	b2d2      	uxtb	r2, r2
 8005daa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005db0:	1c5a      	adds	r2, r3, #1
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dba:	3b01      	subs	r3, #1
 8005dbc:	b29a      	uxth	r2, r3
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	3b01      	subs	r3, #1
 8005dca:	b29a      	uxth	r2, r3
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d034      	beq.n	8005e44 <HAL_I2C_Mem_Read+0x1d0>
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d130      	bne.n	8005e44 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	9300      	str	r3, [sp, #0]
 8005de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005de8:	2200      	movs	r2, #0
 8005dea:	2180      	movs	r1, #128	@ 0x80
 8005dec:	68f8      	ldr	r0, [r7, #12]
 8005dee:	f000 f927 	bl	8006040 <I2C_WaitOnFlagUntilTimeout>
 8005df2:	4603      	mov	r3, r0
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d001      	beq.n	8005dfc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e04d      	b.n	8005e98 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	2bff      	cmp	r3, #255	@ 0xff
 8005e04:	d90e      	bls.n	8005e24 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	22ff      	movs	r2, #255	@ 0xff
 8005e0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e10:	b2da      	uxtb	r2, r3
 8005e12:	8979      	ldrh	r1, [r7, #10]
 8005e14:	2300      	movs	r3, #0
 8005e16:	9300      	str	r3, [sp, #0]
 8005e18:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005e1c:	68f8      	ldr	r0, [r7, #12]
 8005e1e:	f000 fad3 	bl	80063c8 <I2C_TransferConfig>
 8005e22:	e00f      	b.n	8005e44 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e28:	b29a      	uxth	r2, r3
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e32:	b2da      	uxtb	r2, r3
 8005e34:	8979      	ldrh	r1, [r7, #10]
 8005e36:	2300      	movs	r3, #0
 8005e38:	9300      	str	r3, [sp, #0]
 8005e3a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005e3e:	68f8      	ldr	r0, [r7, #12]
 8005e40:	f000 fac2 	bl	80063c8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d19a      	bne.n	8005d84 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e4e:	697a      	ldr	r2, [r7, #20]
 8005e50:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e52:	68f8      	ldr	r0, [r7, #12]
 8005e54:	f000 f994 	bl	8006180 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d001      	beq.n	8005e62 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	e01a      	b.n	8005e98 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	2220      	movs	r2, #32
 8005e68:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	6859      	ldr	r1, [r3, #4]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	4b0b      	ldr	r3, [pc, #44]	@ (8005ea4 <HAL_I2C_Mem_Read+0x230>)
 8005e76:	400b      	ands	r3, r1
 8005e78:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2220      	movs	r2, #32
 8005e7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2200      	movs	r2, #0
 8005e86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005e92:	2300      	movs	r3, #0
 8005e94:	e000      	b.n	8005e98 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005e96:	2302      	movs	r3, #2
  }
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3718      	adds	r7, #24
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}
 8005ea0:	80002400 	.word	0x80002400
 8005ea4:	fe00e800 	.word	0xfe00e800

08005ea8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b086      	sub	sp, #24
 8005eac:	af02      	add	r7, sp, #8
 8005eae:	60f8      	str	r0, [r7, #12]
 8005eb0:	4608      	mov	r0, r1
 8005eb2:	4611      	mov	r1, r2
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	817b      	strh	r3, [r7, #10]
 8005eba:	460b      	mov	r3, r1
 8005ebc:	813b      	strh	r3, [r7, #8]
 8005ebe:	4613      	mov	r3, r2
 8005ec0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005ec2:	88fb      	ldrh	r3, [r7, #6]
 8005ec4:	b2da      	uxtb	r2, r3
 8005ec6:	8979      	ldrh	r1, [r7, #10]
 8005ec8:	4b20      	ldr	r3, [pc, #128]	@ (8005f4c <I2C_RequestMemoryWrite+0xa4>)
 8005eca:	9300      	str	r3, [sp, #0]
 8005ecc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005ed0:	68f8      	ldr	r0, [r7, #12]
 8005ed2:	f000 fa79 	bl	80063c8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ed6:	69fa      	ldr	r2, [r7, #28]
 8005ed8:	69b9      	ldr	r1, [r7, #24]
 8005eda:	68f8      	ldr	r0, [r7, #12]
 8005edc:	f000 f909 	bl	80060f2 <I2C_WaitOnTXISFlagUntilTimeout>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d001      	beq.n	8005eea <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e02c      	b.n	8005f44 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005eea:	88fb      	ldrh	r3, [r7, #6]
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d105      	bne.n	8005efc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005ef0:	893b      	ldrh	r3, [r7, #8]
 8005ef2:	b2da      	uxtb	r2, r3
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	629a      	str	r2, [r3, #40]	@ 0x28
 8005efa:	e015      	b.n	8005f28 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005efc:	893b      	ldrh	r3, [r7, #8]
 8005efe:	0a1b      	lsrs	r3, r3, #8
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	b2da      	uxtb	r2, r3
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f0a:	69fa      	ldr	r2, [r7, #28]
 8005f0c:	69b9      	ldr	r1, [r7, #24]
 8005f0e:	68f8      	ldr	r0, [r7, #12]
 8005f10:	f000 f8ef 	bl	80060f2 <I2C_WaitOnTXISFlagUntilTimeout>
 8005f14:	4603      	mov	r3, r0
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d001      	beq.n	8005f1e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e012      	b.n	8005f44 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005f1e:	893b      	ldrh	r3, [r7, #8]
 8005f20:	b2da      	uxtb	r2, r3
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	9300      	str	r3, [sp, #0]
 8005f2c:	69bb      	ldr	r3, [r7, #24]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	2180      	movs	r1, #128	@ 0x80
 8005f32:	68f8      	ldr	r0, [r7, #12]
 8005f34:	f000 f884 	bl	8006040 <I2C_WaitOnFlagUntilTimeout>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d001      	beq.n	8005f42 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e000      	b.n	8005f44 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005f42:	2300      	movs	r3, #0
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3710      	adds	r7, #16
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}
 8005f4c:	80002000 	.word	0x80002000

08005f50 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b086      	sub	sp, #24
 8005f54:	af02      	add	r7, sp, #8
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	4608      	mov	r0, r1
 8005f5a:	4611      	mov	r1, r2
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	4603      	mov	r3, r0
 8005f60:	817b      	strh	r3, [r7, #10]
 8005f62:	460b      	mov	r3, r1
 8005f64:	813b      	strh	r3, [r7, #8]
 8005f66:	4613      	mov	r3, r2
 8005f68:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005f6a:	88fb      	ldrh	r3, [r7, #6]
 8005f6c:	b2da      	uxtb	r2, r3
 8005f6e:	8979      	ldrh	r1, [r7, #10]
 8005f70:	4b20      	ldr	r3, [pc, #128]	@ (8005ff4 <I2C_RequestMemoryRead+0xa4>)
 8005f72:	9300      	str	r3, [sp, #0]
 8005f74:	2300      	movs	r3, #0
 8005f76:	68f8      	ldr	r0, [r7, #12]
 8005f78:	f000 fa26 	bl	80063c8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f7c:	69fa      	ldr	r2, [r7, #28]
 8005f7e:	69b9      	ldr	r1, [r7, #24]
 8005f80:	68f8      	ldr	r0, [r7, #12]
 8005f82:	f000 f8b6 	bl	80060f2 <I2C_WaitOnTXISFlagUntilTimeout>
 8005f86:	4603      	mov	r3, r0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d001      	beq.n	8005f90 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e02c      	b.n	8005fea <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005f90:	88fb      	ldrh	r3, [r7, #6]
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d105      	bne.n	8005fa2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005f96:	893b      	ldrh	r3, [r7, #8]
 8005f98:	b2da      	uxtb	r2, r3
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005fa0:	e015      	b.n	8005fce <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005fa2:	893b      	ldrh	r3, [r7, #8]
 8005fa4:	0a1b      	lsrs	r3, r3, #8
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	b2da      	uxtb	r2, r3
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fb0:	69fa      	ldr	r2, [r7, #28]
 8005fb2:	69b9      	ldr	r1, [r7, #24]
 8005fb4:	68f8      	ldr	r0, [r7, #12]
 8005fb6:	f000 f89c 	bl	80060f2 <I2C_WaitOnTXISFlagUntilTimeout>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d001      	beq.n	8005fc4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e012      	b.n	8005fea <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005fc4:	893b      	ldrh	r3, [r7, #8]
 8005fc6:	b2da      	uxtb	r2, r3
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005fce:	69fb      	ldr	r3, [r7, #28]
 8005fd0:	9300      	str	r3, [sp, #0]
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	2140      	movs	r1, #64	@ 0x40
 8005fd8:	68f8      	ldr	r0, [r7, #12]
 8005fda:	f000 f831 	bl	8006040 <I2C_WaitOnFlagUntilTimeout>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d001      	beq.n	8005fe8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e000      	b.n	8005fea <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3710      	adds	r7, #16
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	bf00      	nop
 8005ff4:	80002000 	.word	0x80002000

08005ff8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b083      	sub	sp, #12
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	699b      	ldr	r3, [r3, #24]
 8006006:	f003 0302 	and.w	r3, r3, #2
 800600a:	2b02      	cmp	r3, #2
 800600c:	d103      	bne.n	8006016 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	2200      	movs	r2, #0
 8006014:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	699b      	ldr	r3, [r3, #24]
 800601c:	f003 0301 	and.w	r3, r3, #1
 8006020:	2b01      	cmp	r3, #1
 8006022:	d007      	beq.n	8006034 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	699a      	ldr	r2, [r3, #24]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f042 0201 	orr.w	r2, r2, #1
 8006032:	619a      	str	r2, [r3, #24]
  }
}
 8006034:	bf00      	nop
 8006036:	370c      	adds	r7, #12
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr

08006040 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b084      	sub	sp, #16
 8006044:	af00      	add	r7, sp, #0
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	60b9      	str	r1, [r7, #8]
 800604a:	603b      	str	r3, [r7, #0]
 800604c:	4613      	mov	r3, r2
 800604e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006050:	e03b      	b.n	80060ca <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006052:	69ba      	ldr	r2, [r7, #24]
 8006054:	6839      	ldr	r1, [r7, #0]
 8006056:	68f8      	ldr	r0, [r7, #12]
 8006058:	f000 f8d6 	bl	8006208 <I2C_IsErrorOccurred>
 800605c:	4603      	mov	r3, r0
 800605e:	2b00      	cmp	r3, #0
 8006060:	d001      	beq.n	8006066 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	e041      	b.n	80060ea <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800606c:	d02d      	beq.n	80060ca <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800606e:	f7fc ff2f 	bl	8002ed0 <HAL_GetTick>
 8006072:	4602      	mov	r2, r0
 8006074:	69bb      	ldr	r3, [r7, #24]
 8006076:	1ad3      	subs	r3, r2, r3
 8006078:	683a      	ldr	r2, [r7, #0]
 800607a:	429a      	cmp	r2, r3
 800607c:	d302      	bcc.n	8006084 <I2C_WaitOnFlagUntilTimeout+0x44>
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d122      	bne.n	80060ca <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	699a      	ldr	r2, [r3, #24]
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	4013      	ands	r3, r2
 800608e:	68ba      	ldr	r2, [r7, #8]
 8006090:	429a      	cmp	r2, r3
 8006092:	bf0c      	ite	eq
 8006094:	2301      	moveq	r3, #1
 8006096:	2300      	movne	r3, #0
 8006098:	b2db      	uxtb	r3, r3
 800609a:	461a      	mov	r2, r3
 800609c:	79fb      	ldrb	r3, [r7, #7]
 800609e:	429a      	cmp	r2, r3
 80060a0:	d113      	bne.n	80060ca <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060a6:	f043 0220 	orr.w	r2, r3, #32
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2220      	movs	r2, #32
 80060b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2200      	movs	r2, #0
 80060ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2200      	movs	r2, #0
 80060c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	e00f      	b.n	80060ea <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	699a      	ldr	r2, [r3, #24]
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	4013      	ands	r3, r2
 80060d4:	68ba      	ldr	r2, [r7, #8]
 80060d6:	429a      	cmp	r2, r3
 80060d8:	bf0c      	ite	eq
 80060da:	2301      	moveq	r3, #1
 80060dc:	2300      	movne	r3, #0
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	461a      	mov	r2, r3
 80060e2:	79fb      	ldrb	r3, [r7, #7]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d0b4      	beq.n	8006052 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060e8:	2300      	movs	r3, #0
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3710      	adds	r7, #16
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}

080060f2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80060f2:	b580      	push	{r7, lr}
 80060f4:	b084      	sub	sp, #16
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	60f8      	str	r0, [r7, #12]
 80060fa:	60b9      	str	r1, [r7, #8]
 80060fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80060fe:	e033      	b.n	8006168 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	68b9      	ldr	r1, [r7, #8]
 8006104:	68f8      	ldr	r0, [r7, #12]
 8006106:	f000 f87f 	bl	8006208 <I2C_IsErrorOccurred>
 800610a:	4603      	mov	r3, r0
 800610c:	2b00      	cmp	r3, #0
 800610e:	d001      	beq.n	8006114 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	e031      	b.n	8006178 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800611a:	d025      	beq.n	8006168 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800611c:	f7fc fed8 	bl	8002ed0 <HAL_GetTick>
 8006120:	4602      	mov	r2, r0
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	1ad3      	subs	r3, r2, r3
 8006126:	68ba      	ldr	r2, [r7, #8]
 8006128:	429a      	cmp	r2, r3
 800612a:	d302      	bcc.n	8006132 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d11a      	bne.n	8006168 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	699b      	ldr	r3, [r3, #24]
 8006138:	f003 0302 	and.w	r3, r3, #2
 800613c:	2b02      	cmp	r3, #2
 800613e:	d013      	beq.n	8006168 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006144:	f043 0220 	orr.w	r2, r3, #32
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2220      	movs	r2, #32
 8006150:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2200      	movs	r2, #0
 8006158:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2200      	movs	r2, #0
 8006160:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	e007      	b.n	8006178 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	699b      	ldr	r3, [r3, #24]
 800616e:	f003 0302 	and.w	r3, r3, #2
 8006172:	2b02      	cmp	r3, #2
 8006174:	d1c4      	bne.n	8006100 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006176:	2300      	movs	r3, #0
}
 8006178:	4618      	mov	r0, r3
 800617a:	3710      	adds	r7, #16
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}

08006180 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b084      	sub	sp, #16
 8006184:	af00      	add	r7, sp, #0
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	60b9      	str	r1, [r7, #8]
 800618a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800618c:	e02f      	b.n	80061ee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	68b9      	ldr	r1, [r7, #8]
 8006192:	68f8      	ldr	r0, [r7, #12]
 8006194:	f000 f838 	bl	8006208 <I2C_IsErrorOccurred>
 8006198:	4603      	mov	r3, r0
 800619a:	2b00      	cmp	r3, #0
 800619c:	d001      	beq.n	80061a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	e02d      	b.n	80061fe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061a2:	f7fc fe95 	bl	8002ed0 <HAL_GetTick>
 80061a6:	4602      	mov	r2, r0
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	1ad3      	subs	r3, r2, r3
 80061ac:	68ba      	ldr	r2, [r7, #8]
 80061ae:	429a      	cmp	r2, r3
 80061b0:	d302      	bcc.n	80061b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d11a      	bne.n	80061ee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	699b      	ldr	r3, [r3, #24]
 80061be:	f003 0320 	and.w	r3, r3, #32
 80061c2:	2b20      	cmp	r3, #32
 80061c4:	d013      	beq.n	80061ee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061ca:	f043 0220 	orr.w	r2, r3, #32
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2220      	movs	r2, #32
 80061d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2200      	movs	r2, #0
 80061de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2200      	movs	r2, #0
 80061e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	e007      	b.n	80061fe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	699b      	ldr	r3, [r3, #24]
 80061f4:	f003 0320 	and.w	r3, r3, #32
 80061f8:	2b20      	cmp	r3, #32
 80061fa:	d1c8      	bne.n	800618e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80061fc:	2300      	movs	r3, #0
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3710      	adds	r7, #16
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}
	...

08006208 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b08a      	sub	sp, #40	@ 0x28
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006214:	2300      	movs	r3, #0
 8006216:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	699b      	ldr	r3, [r3, #24]
 8006220:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006222:	2300      	movs	r3, #0
 8006224:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	f003 0310 	and.w	r3, r3, #16
 8006230:	2b00      	cmp	r3, #0
 8006232:	d068      	beq.n	8006306 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	2210      	movs	r2, #16
 800623a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800623c:	e049      	b.n	80062d2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006244:	d045      	beq.n	80062d2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006246:	f7fc fe43 	bl	8002ed0 <HAL_GetTick>
 800624a:	4602      	mov	r2, r0
 800624c:	69fb      	ldr	r3, [r7, #28]
 800624e:	1ad3      	subs	r3, r2, r3
 8006250:	68ba      	ldr	r2, [r7, #8]
 8006252:	429a      	cmp	r2, r3
 8006254:	d302      	bcc.n	800625c <I2C_IsErrorOccurred+0x54>
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d13a      	bne.n	80062d2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006266:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800626e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	699b      	ldr	r3, [r3, #24]
 8006276:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800627a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800627e:	d121      	bne.n	80062c4 <I2C_IsErrorOccurred+0xbc>
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006286:	d01d      	beq.n	80062c4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006288:	7cfb      	ldrb	r3, [r7, #19]
 800628a:	2b20      	cmp	r3, #32
 800628c:	d01a      	beq.n	80062c4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	685a      	ldr	r2, [r3, #4]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800629c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800629e:	f7fc fe17 	bl	8002ed0 <HAL_GetTick>
 80062a2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80062a4:	e00e      	b.n	80062c4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80062a6:	f7fc fe13 	bl	8002ed0 <HAL_GetTick>
 80062aa:	4602      	mov	r2, r0
 80062ac:	69fb      	ldr	r3, [r7, #28]
 80062ae:	1ad3      	subs	r3, r2, r3
 80062b0:	2b19      	cmp	r3, #25
 80062b2:	d907      	bls.n	80062c4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80062b4:	6a3b      	ldr	r3, [r7, #32]
 80062b6:	f043 0320 	orr.w	r3, r3, #32
 80062ba:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80062bc:	2301      	movs	r3, #1
 80062be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80062c2:	e006      	b.n	80062d2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	699b      	ldr	r3, [r3, #24]
 80062ca:	f003 0320 	and.w	r3, r3, #32
 80062ce:	2b20      	cmp	r3, #32
 80062d0:	d1e9      	bne.n	80062a6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	699b      	ldr	r3, [r3, #24]
 80062d8:	f003 0320 	and.w	r3, r3, #32
 80062dc:	2b20      	cmp	r3, #32
 80062de:	d003      	beq.n	80062e8 <I2C_IsErrorOccurred+0xe0>
 80062e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d0aa      	beq.n	800623e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80062e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d103      	bne.n	80062f8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	2220      	movs	r2, #32
 80062f6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80062f8:	6a3b      	ldr	r3, [r7, #32]
 80062fa:	f043 0304 	orr.w	r3, r3, #4
 80062fe:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	699b      	ldr	r3, [r3, #24]
 800630c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800630e:	69bb      	ldr	r3, [r7, #24]
 8006310:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006314:	2b00      	cmp	r3, #0
 8006316:	d00b      	beq.n	8006330 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006318:	6a3b      	ldr	r3, [r7, #32]
 800631a:	f043 0301 	orr.w	r3, r3, #1
 800631e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006328:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006330:	69bb      	ldr	r3, [r7, #24]
 8006332:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006336:	2b00      	cmp	r3, #0
 8006338:	d00b      	beq.n	8006352 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800633a:	6a3b      	ldr	r3, [r7, #32]
 800633c:	f043 0308 	orr.w	r3, r3, #8
 8006340:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800634a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006352:	69bb      	ldr	r3, [r7, #24]
 8006354:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006358:	2b00      	cmp	r3, #0
 800635a:	d00b      	beq.n	8006374 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800635c:	6a3b      	ldr	r3, [r7, #32]
 800635e:	f043 0302 	orr.w	r3, r3, #2
 8006362:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800636c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006374:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006378:	2b00      	cmp	r3, #0
 800637a:	d01c      	beq.n	80063b6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800637c:	68f8      	ldr	r0, [r7, #12]
 800637e:	f7ff fe3b 	bl	8005ff8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	6859      	ldr	r1, [r3, #4]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	4b0d      	ldr	r3, [pc, #52]	@ (80063c4 <I2C_IsErrorOccurred+0x1bc>)
 800638e:	400b      	ands	r3, r1
 8006390:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006396:	6a3b      	ldr	r3, [r7, #32]
 8006398:	431a      	orrs	r2, r3
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2220      	movs	r2, #32
 80063a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2200      	movs	r2, #0
 80063aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2200      	movs	r2, #0
 80063b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80063b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3728      	adds	r7, #40	@ 0x28
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	bf00      	nop
 80063c4:	fe00e800 	.word	0xfe00e800

080063c8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b087      	sub	sp, #28
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	60f8      	str	r0, [r7, #12]
 80063d0:	607b      	str	r3, [r7, #4]
 80063d2:	460b      	mov	r3, r1
 80063d4:	817b      	strh	r3, [r7, #10]
 80063d6:	4613      	mov	r3, r2
 80063d8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80063da:	897b      	ldrh	r3, [r7, #10]
 80063dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80063e0:	7a7b      	ldrb	r3, [r7, #9]
 80063e2:	041b      	lsls	r3, r3, #16
 80063e4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80063e8:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80063ee:	6a3b      	ldr	r3, [r7, #32]
 80063f0:	4313      	orrs	r3, r2
 80063f2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80063f6:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	685a      	ldr	r2, [r3, #4]
 80063fe:	6a3b      	ldr	r3, [r7, #32]
 8006400:	0d5b      	lsrs	r3, r3, #21
 8006402:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006406:	4b08      	ldr	r3, [pc, #32]	@ (8006428 <I2C_TransferConfig+0x60>)
 8006408:	430b      	orrs	r3, r1
 800640a:	43db      	mvns	r3, r3
 800640c:	ea02 0103 	and.w	r1, r2, r3
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	697a      	ldr	r2, [r7, #20]
 8006416:	430a      	orrs	r2, r1
 8006418:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800641a:	bf00      	nop
 800641c:	371c      	adds	r7, #28
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr
 8006426:	bf00      	nop
 8006428:	03ff63ff 	.word	0x03ff63ff

0800642c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800642c:	b480      	push	{r7}
 800642e:	b083      	sub	sp, #12
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800643c:	b2db      	uxtb	r3, r3
 800643e:	2b20      	cmp	r3, #32
 8006440:	d138      	bne.n	80064b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006448:	2b01      	cmp	r3, #1
 800644a:	d101      	bne.n	8006450 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800644c:	2302      	movs	r3, #2
 800644e:	e032      	b.n	80064b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2224      	movs	r2, #36	@ 0x24
 800645c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f022 0201 	bic.w	r2, r2, #1
 800646e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800647e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	6819      	ldr	r1, [r3, #0]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	683a      	ldr	r2, [r7, #0]
 800648c:	430a      	orrs	r2, r1
 800648e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	681a      	ldr	r2, [r3, #0]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f042 0201 	orr.w	r2, r2, #1
 800649e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2220      	movs	r2, #32
 80064a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2200      	movs	r2, #0
 80064ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80064b0:	2300      	movs	r3, #0
 80064b2:	e000      	b.n	80064b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80064b4:	2302      	movs	r3, #2
  }
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	370c      	adds	r7, #12
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr

080064c2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80064c2:	b480      	push	{r7}
 80064c4:	b085      	sub	sp, #20
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
 80064ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	2b20      	cmp	r3, #32
 80064d6:	d139      	bne.n	800654c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80064de:	2b01      	cmp	r3, #1
 80064e0:	d101      	bne.n	80064e6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80064e2:	2302      	movs	r3, #2
 80064e4:	e033      	b.n	800654e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2201      	movs	r2, #1
 80064ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2224      	movs	r2, #36	@ 0x24
 80064f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f022 0201 	bic.w	r2, r2, #1
 8006504:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006514:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	021b      	lsls	r3, r3, #8
 800651a:	68fa      	ldr	r2, [r7, #12]
 800651c:	4313      	orrs	r3, r2
 800651e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	68fa      	ldr	r2, [r7, #12]
 8006526:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f042 0201 	orr.w	r2, r2, #1
 8006536:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2220      	movs	r2, #32
 800653c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006548:	2300      	movs	r3, #0
 800654a:	e000      	b.n	800654e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800654c:	2302      	movs	r3, #2
  }
}
 800654e:	4618      	mov	r0, r3
 8006550:	3714      	adds	r7, #20
 8006552:	46bd      	mov	sp, r7
 8006554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006558:	4770      	bx	lr

0800655a <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800655a:	b580      	push	{r7, lr}
 800655c:	b084      	sub	sp, #16
 800655e:	af00      	add	r7, sp, #0
 8006560:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006562:	f7fc fcb5 	bl	8002ed0 <HAL_GetTick>
 8006566:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d101      	bne.n	8006572 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 800656e:	2301      	movs	r3, #1
 8006570:	e03b      	b.n	80065ea <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2200      	movs	r2, #0
 8006576:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2202      	movs	r2, #2
 800657e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	68da      	ldr	r2, [r3, #12]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f022 0201 	bic.w	r2, r2, #1
 8006590:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8006592:	e00f      	b.n	80065b4 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8006594:	f7fc fc9c 	bl	8002ed0 <HAL_GetTick>
 8006598:	4602      	mov	r2, r0
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	1ad3      	subs	r3, r2, r3
 800659e:	2b05      	cmp	r3, #5
 80065a0:	d908      	bls.n	80065b4 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2240      	movs	r2, #64	@ 0x40
 80065a6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2203      	movs	r2, #3
 80065ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      return HAL_ERROR;
 80065b0:	2301      	movs	r3, #1
 80065b2:	e01a      	b.n	80065ea <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	68db      	ldr	r3, [r3, #12]
 80065ba:	f003 0301 	and.w	r3, r3, #1
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d1e8      	bne.n	8006594 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 fcd2 	bl	8006f6c <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2200      	movs	r2, #0
 80065d8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2200      	movs	r2, #0
 80065de:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2201      	movs	r2, #1
 80065e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80065e8:	2300      	movs	r3, #0
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3710      	adds	r7, #16
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}
	...

080065f4 <HAL_MDMA_RegisterCallback>:
  * @param  CallbackID:           User Callback identifier
  * @param  pCallback:            pointer to callbacsk function.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_RegisterCallback(MDMA_HandleTypeDef *hmdma, HAL_MDMA_CallbackIDTypeDef CallbackID, void (* pCallback)(MDMA_HandleTypeDef *_hmdma))
{
 80065f4:	b480      	push	{r7}
 80065f6:	b087      	sub	sp, #28
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	60f8      	str	r0, [r7, #12]
 80065fc:	460b      	mov	r3, r1
 80065fe:	607a      	str	r2, [r7, #4]
 8006600:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8006602:	2300      	movs	r3, #0
 8006604:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d101      	bne.n	8006610 <HAL_MDMA_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	e044      	b.n	800669a <HAL_MDMA_RegisterCallback+0xa6>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006616:	2b01      	cmp	r3, #1
 8006618:	d101      	bne.n	800661e <HAL_MDMA_RegisterCallback+0x2a>
 800661a:	2302      	movs	r3, #2
 800661c:	e03d      	b.n	800669a <HAL_MDMA_RegisterCallback+0xa6>
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2201      	movs	r2, #1
 8006622:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800662c:	b2db      	uxtb	r3, r3
 800662e:	2b01      	cmp	r3, #1
 8006630:	d12a      	bne.n	8006688 <HAL_MDMA_RegisterCallback+0x94>
  {
    switch (CallbackID)
 8006632:	7afb      	ldrb	r3, [r7, #11]
 8006634:	2b05      	cmp	r3, #5
 8006636:	d82a      	bhi.n	800668e <HAL_MDMA_RegisterCallback+0x9a>
 8006638:	a201      	add	r2, pc, #4	@ (adr r2, 8006640 <HAL_MDMA_RegisterCallback+0x4c>)
 800663a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800663e:	bf00      	nop
 8006640:	08006659 	.word	0x08006659
 8006644:	08006661 	.word	0x08006661
 8006648:	08006669 	.word	0x08006669
 800664c:	08006671 	.word	0x08006671
 8006650:	08006679 	.word	0x08006679
 8006654:	08006681 	.word	0x08006681
    {
    case  HAL_MDMA_XFER_CPLT_CB_ID:
      hmdma->XferCpltCallback = pCallback;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	645a      	str	r2, [r3, #68]	@ 0x44
      break;
 800665e:	e017      	b.n	8006690 <HAL_MDMA_RegisterCallback+0x9c>

    case  HAL_MDMA_XFER_BUFFERCPLT_CB_ID:
      hmdma->XferBufferCpltCallback = pCallback;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	687a      	ldr	r2, [r7, #4]
 8006664:	649a      	str	r2, [r3, #72]	@ 0x48
      break;
 8006666:	e013      	b.n	8006690 <HAL_MDMA_RegisterCallback+0x9c>

    case  HAL_MDMA_XFER_BLOCKCPLT_CB_ID:
      hmdma->XferBlockCpltCallback = pCallback;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	687a      	ldr	r2, [r7, #4]
 800666c:	64da      	str	r2, [r3, #76]	@ 0x4c
      break;
 800666e:	e00f      	b.n	8006690 <HAL_MDMA_RegisterCallback+0x9c>

    case  HAL_MDMA_XFER_REPBLOCKCPLT_CB_ID:
      hmdma->XferRepeatBlockCpltCallback = pCallback;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006676:	e00b      	b.n	8006690 <HAL_MDMA_RegisterCallback+0x9c>

    case  HAL_MDMA_XFER_ERROR_CB_ID:
      hmdma->XferErrorCallback = pCallback;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800667e:	e007      	b.n	8006690 <HAL_MDMA_RegisterCallback+0x9c>

    case  HAL_MDMA_XFER_ABORT_CB_ID:
      hmdma->XferAbortCallback = pCallback;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8006686:	e003      	b.n	8006690 <HAL_MDMA_RegisterCallback+0x9c>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	75fb      	strb	r3, [r7, #23]
 800668c:	e000      	b.n	8006690 <HAL_MDMA_RegisterCallback+0x9c>
      break;
 800668e:	bf00      	nop
  }

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2200      	movs	r2, #0
 8006694:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006698:	7dfb      	ldrb	r3, [r7, #23]
}
 800669a:	4618      	mov	r0, r3
 800669c:	371c      	adds	r7, #28
 800669e:	46bd      	mov	sp, r7
 80066a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a4:	4770      	bx	lr
 80066a6:	bf00      	nop

080066a8 <HAL_MDMA_LinkedList_CreateNode>:
  * @param  pNodeConfig: Pointer to a MDMA_LinkNodeConfTypeDef structure that contains
  *               the configuration information for the specified MDMA Linked List Node.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_LinkedList_CreateNode(MDMA_LinkNodeTypeDef *pNode, MDMA_LinkNodeConfTypeDef *pNodeConfig)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b085      	sub	sp, #20
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6039      	str	r1, [r7, #0]
  uint32_t addressMask;
  uint32_t blockoffset;

  /* Check the MDMA peripheral state */
  if((pNode == NULL) || (pNodeConfig == NULL))
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d002      	beq.n	80066be <HAL_MDMA_LinkedList_CreateNode+0x16>
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d101      	bne.n	80066c2 <HAL_MDMA_LinkedList_CreateNode+0x1a>
  {
    return HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	e0c8      	b.n	8006854 <HAL_MDMA_LinkedList_CreateNode+0x1ac>
  assert_param(IS_MDMA_TRANSFER_LENGTH(pNodeConfig->BlockDataLength));
  assert_param(IS_MDMA_BLOCK_COUNT(pNodeConfig->BlockCount));


  /* Configure next Link node Address Register to zero */
  pNode->CLAR =  0;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	615a      	str	r2, [r3, #20]

  /* Configure the Link Node registers*/
  pNode->CTBR   = 0;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	619a      	str	r2, [r3, #24]
  pNode->CMAR   = 0;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2200      	movs	r2, #0
 80066d2:	621a      	str	r2, [r3, #32]
  pNode->CMDR   = 0;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2200      	movs	r2, #0
 80066d8:	625a      	str	r2, [r3, #36]	@ 0x24
  pNode->Reserved = 0;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2200      	movs	r2, #0
 80066de:	61da      	str	r2, [r3, #28]

  /* Write new CTCR Register value */
  pNode->CTCR =  pNodeConfig->Init.SourceInc | pNodeConfig->Init.DestinationInc | \
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	691a      	ldr	r2, [r3, #16]
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	695b      	ldr	r3, [r3, #20]
 80066e8:	431a      	orrs	r2, r3
    pNodeConfig->Init.SourceDataSize | pNodeConfig->Init.DestDataSize           | \
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	699b      	ldr	r3, [r3, #24]
  pNode->CTCR =  pNodeConfig->Init.SourceInc | pNodeConfig->Init.DestinationInc | \
 80066ee:	431a      	orrs	r2, r3
    pNodeConfig->Init.SourceDataSize | pNodeConfig->Init.DestDataSize           | \
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	69db      	ldr	r3, [r3, #28]
 80066f4:	431a      	orrs	r2, r3
      pNodeConfig->Init.DataAlignment| pNodeConfig->Init.SourceBurst            | \
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	6a1b      	ldr	r3, [r3, #32]
    pNodeConfig->Init.SourceDataSize | pNodeConfig->Init.DestDataSize           | \
 80066fa:	431a      	orrs	r2, r3
      pNodeConfig->Init.DataAlignment| pNodeConfig->Init.SourceBurst            | \
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006700:	431a      	orrs	r2, r3
        pNodeConfig->Init.DestBurst                                             | \
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      pNodeConfig->Init.DataAlignment| pNodeConfig->Init.SourceBurst            | \
 8006706:	431a      	orrs	r2, r3
          ((pNodeConfig->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800670c:	3b01      	subs	r3, #1
 800670e:	049b      	lsls	r3, r3, #18
        pNodeConfig->Init.DestBurst                                             | \
 8006710:	431a      	orrs	r2, r3
            pNodeConfig->Init.TransferTriggerMode;
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	685b      	ldr	r3, [r3, #4]
          ((pNodeConfig->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8006716:	431a      	orrs	r2, r3
  pNode->CTCR =  pNodeConfig->Init.SourceInc | pNodeConfig->Init.DestinationInc | \
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	601a      	str	r2, [r3, #0]

  /* If SW request set the CTCR register to SW Request Mode*/
  if(pNodeConfig->Init.Request == MDMA_REQUEST_SW)
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006724:	d105      	bne.n	8006732 <HAL_MDMA_LinkedList_CreateNode+0x8a>
  {
    pNode->CTCR |= MDMA_CTCR_SWRM;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	601a      	str	r2, [r3, #0]
  -If the request is done by SW : BWM could be set to 1 or 0.
  -If the request is done by a peripheral :
     If mask address not set (0) => BWM must be set to 0
     If mask address set (different than 0) => BWM could be set to 1 or 0
  */
  if((pNodeConfig->Init.Request == MDMA_REQUEST_SW) || (pNodeConfig->PostRequestMaskAddress != 0U))
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800673a:	d003      	beq.n	8006744 <HAL_MDMA_LinkedList_CreateNode+0x9c>
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006740:	2b00      	cmp	r3, #0
 8006742:	d005      	beq.n	8006750 <HAL_MDMA_LinkedList_CreateNode+0xa8>
  {
    pNode->CTCR |=  MDMA_CTCR_BWM;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	601a      	str	r2, [r3, #0]
  }

  /* Set the new CBNDTR Register value */
  pNode->CBNDTR = ((pNodeConfig->BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC;
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006754:	3b01      	subs	r3, #1
 8006756:	051a      	lsls	r2, r3, #20
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	605a      	str	r2, [r3, #4]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(pNodeConfig->Init.SourceBlockAddressOffset < 0)
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006760:	2b00      	cmp	r3, #0
 8006762:	da0e      	bge.n	8006782 <HAL_MDMA_LinkedList_CreateNode+0xda>
  {
    pNode->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	605a      	str	r2, [r3, #4]
    /*write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- pNodeConfig->Init.SourceBlockAddressOffset);
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006774:	425b      	negs	r3, r3
 8006776:	60fb      	str	r3, [r7, #12]
    pNode->CBRUR = blockoffset & 0x0000FFFFU;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	b29a      	uxth	r2, r3
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	611a      	str	r2, [r3, #16]
 8006780:	e004      	b.n	800678c <HAL_MDMA_LinkedList_CreateNode+0xe4>
  }
  else
  {
    /*write new CBRUR Register value : source repeat block offset */
    pNode->CBRUR = (((uint32_t) pNodeConfig->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006786:	b29a      	uxth	r2, r3
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	611a      	str	r2, [r3, #16]
  }

  /* if block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(pNodeConfig->Init.DestBlockAddressOffset < 0)
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006790:	2b00      	cmp	r3, #0
 8006792:	da11      	bge.n	80067b8 <HAL_MDMA_LinkedList_CreateNode+0x110>
  {
    pNode->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	605a      	str	r2, [r3, #4]
    /*write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- pNodeConfig->Init.DestBlockAddressOffset);
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067a4:	425b      	negs	r3, r3
 80067a6:	60fb      	str	r3, [r7, #12]
    pNode->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	691a      	ldr	r2, [r3, #16]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	041b      	lsls	r3, r3, #16
 80067b0:	431a      	orrs	r2, r3
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	611a      	str	r2, [r3, #16]
 80067b6:	e007      	b.n	80067c8 <HAL_MDMA_LinkedList_CreateNode+0x120>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    pNode->CBRUR |= ((((uint32_t)pNodeConfig->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	691a      	ldr	r2, [r3, #16]
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067c0:	041b      	lsls	r3, r3, #16
 80067c2:	431a      	orrs	r2, r3
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	611a      	str	r2, [r3, #16]
  }

  /* Configure MDMA Link Node data length */
  pNode->CBNDTR |=  pNodeConfig->BlockDataLength;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	685a      	ldr	r2, [r3, #4]
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067d0:	431a      	orrs	r2, r3
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	605a      	str	r2, [r3, #4]

  /* Configure MDMA Link Node destination address */
  pNode->CDAR = pNodeConfig->DstAddress;
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	60da      	str	r2, [r3, #12]

  /* Configure MDMA Link Node Source address */
  pNode->CSAR = pNodeConfig->SrcAddress;
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	609a      	str	r2, [r3, #8]

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData,  */
  if(pNodeConfig->Init.Request != MDMA_REQUEST_SW)
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067ee:	d00c      	beq.n	800680a <HAL_MDMA_LinkedList_CreateNode+0x162>
  {
    /* Set the HW request in CTBR register  */
    pNode->CTBR = pNodeConfig->Init.Request & MDMA_CTBR_TSEL;
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	b2da      	uxtb	r2, r3
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	619a      	str	r2, [r3, #24]
    /* Set the HW request clear Mask and Data */
    pNode->CMAR = pNodeConfig->PostRequestMaskAddress;
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	621a      	str	r2, [r3, #32]
    pNode->CMDR = pNodeConfig->PostRequestMaskData;
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  addressMask = pNodeConfig->SrcAddress & 0xFF000000U;
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800680e:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8006812:	60bb      	str	r3, [r7, #8]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800681a:	d002      	beq.n	8006822 <HAL_MDMA_LinkedList_CreateNode+0x17a>
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d105      	bne.n	800682e <HAL_MDMA_LinkedList_CreateNode+0x186>
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    pNode->CTBR |= MDMA_CTBR_SBUS;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	699b      	ldr	r3, [r3, #24]
 8006826:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	619a      	str	r2, [r3, #24]
  }

  addressMask = pNodeConfig->DstAddress & 0xFF000000U;
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006832:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8006836:	60bb      	str	r3, [r7, #8]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800683e:	d002      	beq.n	8006846 <HAL_MDMA_LinkedList_CreateNode+0x19e>
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d105      	bne.n	8006852 <HAL_MDMA_LinkedList_CreateNode+0x1aa>
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    pNode->CTBR |= MDMA_CTBR_DBUS;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	699b      	ldr	r3, [r3, #24]
 800684a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	619a      	str	r2, [r3, #24]
  }

  return HAL_OK;
 8006852:	2300      	movs	r3, #0
}
 8006854:	4618      	mov	r0, r3
 8006856:	3714      	adds	r7, #20
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr

08006860 <HAL_MDMA_LinkedList_AddNode>:
  *                    at the end of the list
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_LinkedList_AddNode(MDMA_HandleTypeDef *hmdma, MDMA_LinkNodeTypeDef *pNewNode, const MDMA_LinkNodeTypeDef *pPrevNode)
{
 8006860:	b480      	push	{r7}
 8006862:	b089      	sub	sp, #36	@ 0x24
 8006864:	af00      	add	r7, sp, #0
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	60b9      	str	r1, [r7, #8]
 800686a:	607a      	str	r2, [r7, #4]
  MDMA_LinkNodeTypeDef *pNode;
  uint32_t counter = 0, nodeInserted = 0;
 800686c:	2300      	movs	r3, #0
 800686e:	61bb      	str	r3, [r7, #24]
 8006870:	2300      	movs	r3, #0
 8006872:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006874:	2300      	movs	r3, #0
 8006876:	74fb      	strb	r3, [r7, #19]

  /* Check the MDMA peripheral handle */
  if((hmdma == NULL) || (pNewNode == NULL))
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d002      	beq.n	8006884 <HAL_MDMA_LinkedList_AddNode+0x24>
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d101      	bne.n	8006888 <HAL_MDMA_LinkedList_AddNode+0x28>
  {
    return HAL_ERROR;
 8006884:	2301      	movs	r3, #1
 8006886:	e0a9      	b.n	80069dc <HAL_MDMA_LinkedList_AddNode+0x17c>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800688e:	2b01      	cmp	r3, #1
 8006890:	d101      	bne.n	8006896 <HAL_MDMA_LinkedList_AddNode+0x36>
 8006892:	2302      	movs	r3, #2
 8006894:	e0a2      	b.n	80069dc <HAL_MDMA_LinkedList_AddNode+0x17c>
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2201      	movs	r2, #1
 800689a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	f040 8093 	bne.w	80069d2 <HAL_MDMA_LinkedList_AddNode+0x172>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2202      	movs	r2, #2
 80068b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Check if this is the first node (after the Inititlization node) */
    if((uint32_t)hmdma->FirstLinkedListNodeAddress == 0U)
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d116      	bne.n	80068ea <HAL_MDMA_LinkedList_AddNode+0x8a>
    {
      if(pPrevNode == NULL)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d110      	bne.n	80068e4 <HAL_MDMA_LinkedList_AddNode+0x84>
      {
        /* if this is the first node after the initialization
        connect this node to the node 0 by updating
        the MDMA channel CLAR register to this node address */
        hmdma->Instance->CLAR = (uint32_t)pNewNode;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	68ba      	ldr	r2, [r7, #8]
 80068c8:	625a      	str	r2, [r3, #36]	@ 0x24
        /* Set the MDMA handle First linked List node*/
        hmdma->FirstLinkedListNodeAddress = pNewNode;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	68ba      	ldr	r2, [r7, #8]
 80068ce:	65da      	str	r2, [r3, #92]	@ 0x5c

        /*reset New node link */
        pNewNode->CLAR = 0;
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	2200      	movs	r2, #0
 80068d4:	615a      	str	r2, [r3, #20]

        /* Update the Handle last node address */
        hmdma->LastLinkedListNodeAddress = pNewNode;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	68ba      	ldr	r2, [r7, #8]
 80068da:	661a      	str	r2, [r3, #96]	@ 0x60

        hmdma->LinkedListNodeCounter = 1;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2201      	movs	r2, #1
 80068e0:	665a      	str	r2, [r3, #100]	@ 0x64
 80068e2:	e06c      	b.n	80069be <HAL_MDMA_LinkedList_AddNode+0x15e>
      }
      else
      {
        hal_status = HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	74fb      	strb	r3, [r7, #19]
 80068e8:	e069      	b.n	80069be <HAL_MDMA_LinkedList_AddNode+0x15e>
      }
    }
    else if(hmdma->FirstLinkedListNodeAddress != pNewNode)
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068ee:	68ba      	ldr	r2, [r7, #8]
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d062      	beq.n	80069ba <HAL_MDMA_LinkedList_AddNode+0x15a>
    {
      /* Check if the node to insert already exists*/
      pNode = hmdma->FirstLinkedListNodeAddress;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068f8:	61fb      	str	r3, [r7, #28]
      while((counter < hmdma->LinkedListNodeCounter) && (hal_status == HAL_OK))
 80068fa:	e00c      	b.n	8006916 <HAL_MDMA_LinkedList_AddNode+0xb6>
      {
        if(pNode->CLAR == (uint32_t)pNewNode)
 80068fc:	69fb      	ldr	r3, [r7, #28]
 80068fe:	695a      	ldr	r2, [r3, #20]
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	429a      	cmp	r2, r3
 8006904:	d101      	bne.n	800690a <HAL_MDMA_LinkedList_AddNode+0xaa>
        {
          hal_status = HAL_ERROR; /* error this node already exist in the linked list and it is not first node */
 8006906:	2301      	movs	r3, #1
 8006908:	74fb      	strb	r3, [r7, #19]
        }
        pNode = (MDMA_LinkNodeTypeDef *)pNode->CLAR;
 800690a:	69fb      	ldr	r3, [r7, #28]
 800690c:	695b      	ldr	r3, [r3, #20]
 800690e:	61fb      	str	r3, [r7, #28]
        counter++;
 8006910:	69bb      	ldr	r3, [r7, #24]
 8006912:	3301      	adds	r3, #1
 8006914:	61bb      	str	r3, [r7, #24]
      while((counter < hmdma->LinkedListNodeCounter) && (hal_status == HAL_OK))
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800691a:	69ba      	ldr	r2, [r7, #24]
 800691c:	429a      	cmp	r2, r3
 800691e:	d202      	bcs.n	8006926 <HAL_MDMA_LinkedList_AddNode+0xc6>
 8006920:	7cfb      	ldrb	r3, [r7, #19]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d0ea      	beq.n	80068fc <HAL_MDMA_LinkedList_AddNode+0x9c>
      }

      if(hal_status == HAL_OK)
 8006926:	7cfb      	ldrb	r3, [r7, #19]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d148      	bne.n	80069be <HAL_MDMA_LinkedList_AddNode+0x15e>
      {
        /* Check if the previous node is the last one in the current list or zero */
        if((pPrevNode == hmdma->LastLinkedListNodeAddress) || (pPrevNode == NULL))
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	429a      	cmp	r2, r3
 8006934:	d002      	beq.n	800693c <HAL_MDMA_LinkedList_AddNode+0xdc>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d111      	bne.n	8006960 <HAL_MDMA_LinkedList_AddNode+0x100>
        {
          /* insert the new node at the end of the list */
          pNewNode->CLAR = hmdma->LastLinkedListNodeAddress->CLAR;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006940:	695a      	ldr	r2, [r3, #20]
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	615a      	str	r2, [r3, #20]
          hmdma->LastLinkedListNodeAddress->CLAR = (uint32_t)pNewNode;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800694a:	68ba      	ldr	r2, [r7, #8]
 800694c:	615a      	str	r2, [r3, #20]
          /* Update the Handle last node address */
          hmdma->LastLinkedListNodeAddress = pNewNode;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	68ba      	ldr	r2, [r7, #8]
 8006952:	661a      	str	r2, [r3, #96]	@ 0x60
          /* Increment the linked list node counter */
          hmdma->LinkedListNodeCounter++;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006958:	1c5a      	adds	r2, r3, #1
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	665a      	str	r2, [r3, #100]	@ 0x64
 800695e:	e02e      	b.n	80069be <HAL_MDMA_LinkedList_AddNode+0x15e>
        }
        else
        {
          /*insert the new node after the pPreviousNode node */
          pNode = hmdma->FirstLinkedListNodeAddress;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006964:	61fb      	str	r3, [r7, #28]
          counter = 0;
 8006966:	2300      	movs	r3, #0
 8006968:	61bb      	str	r3, [r7, #24]
          while((counter < hmdma->LinkedListNodeCounter) && (nodeInserted == 0U))
 800696a:	e018      	b.n	800699e <HAL_MDMA_LinkedList_AddNode+0x13e>
          {
            counter++;
 800696c:	69bb      	ldr	r3, [r7, #24]
 800696e:	3301      	adds	r3, #1
 8006970:	61bb      	str	r3, [r7, #24]
            if(pNode == pPrevNode)
 8006972:	69fa      	ldr	r2, [r7, #28]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	429a      	cmp	r2, r3
 8006978:	d10e      	bne.n	8006998 <HAL_MDMA_LinkedList_AddNode+0x138>
            {
              /*Insert the new node after the previous one */
              pNewNode->CLAR = pNode->CLAR;
 800697a:	69fb      	ldr	r3, [r7, #28]
 800697c:	695a      	ldr	r2, [r3, #20]
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	615a      	str	r2, [r3, #20]
              pNode->CLAR = (uint32_t)pNewNode;
 8006982:	68ba      	ldr	r2, [r7, #8]
 8006984:	69fb      	ldr	r3, [r7, #28]
 8006986:	615a      	str	r2, [r3, #20]
              /* Increment the linked list node counter */
              hmdma->LinkedListNodeCounter++;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800698c:	1c5a      	adds	r2, r3, #1
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	665a      	str	r2, [r3, #100]	@ 0x64
              nodeInserted = 1;
 8006992:	2301      	movs	r3, #1
 8006994:	617b      	str	r3, [r7, #20]
 8006996:	e002      	b.n	800699e <HAL_MDMA_LinkedList_AddNode+0x13e>
            }
            else
            {
              pNode = (MDMA_LinkNodeTypeDef *)pNode->CLAR;
 8006998:	69fb      	ldr	r3, [r7, #28]
 800699a:	695b      	ldr	r3, [r3, #20]
 800699c:	61fb      	str	r3, [r7, #28]
          while((counter < hmdma->LinkedListNodeCounter) && (nodeInserted == 0U))
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80069a2:	69ba      	ldr	r2, [r7, #24]
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d202      	bcs.n	80069ae <HAL_MDMA_LinkedList_AddNode+0x14e>
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d0de      	beq.n	800696c <HAL_MDMA_LinkedList_AddNode+0x10c>
            }
          }

          if(nodeInserted == 0U)
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d104      	bne.n	80069be <HAL_MDMA_LinkedList_AddNode+0x15e>
          {
            hal_status = HAL_ERROR;
 80069b4:	2301      	movs	r3, #1
 80069b6:	74fb      	strb	r3, [r7, #19]
 80069b8:	e001      	b.n	80069be <HAL_MDMA_LinkedList_AddNode+0x15e>
        }
      }
    }
    else
    {
      hal_status = HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	74fb      	strb	r3, [r7, #19]
    }

    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2200      	movs	r2, #0
 80069c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    hmdma->State = HAL_MDMA_STATE_READY;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2201      	movs	r2, #1
 80069ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return hal_status;
 80069ce:	7cfb      	ldrb	r3, [r7, #19]
 80069d0:	e004      	b.n	80069dc <HAL_MDMA_LinkedList_AddNode+0x17c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2200      	movs	r2, #0
 80069d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Return error status */
    return HAL_BUSY;
 80069da:	2302      	movs	r3, #2
  }
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3724      	adds	r7, #36	@ 0x24
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr

080069e8 <HAL_MDMA_LinkedList_EnableCircularMode>:
  * @param  hmdma : Pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_LinkedList_EnableCircularMode(MDMA_HandleTypeDef *hmdma)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b085      	sub	sp, #20
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80069f0:	2300      	movs	r3, #0
 80069f2:	73fb      	strb	r3, [r7, #15]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d101      	bne.n	80069fe <HAL_MDMA_LinkedList_EnableCircularMode+0x16>
  {
    return HAL_ERROR;
 80069fa:	2301      	movs	r3, #1
 80069fc:	e031      	b.n	8006a62 <HAL_MDMA_LinkedList_EnableCircularMode+0x7a>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d101      	bne.n	8006a0c <HAL_MDMA_LinkedList_EnableCircularMode+0x24>
 8006a08:	2302      	movs	r3, #2
 8006a0a:	e02a      	b.n	8006a62 <HAL_MDMA_LinkedList_EnableCircularMode+0x7a>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d117      	bne.n	8006a50 <HAL_MDMA_LinkedList_EnableCircularMode+0x68>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2202      	movs	r2, #2
 8006a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* If first and last node are null (no nodes in the list) : return error*/
    if(((uint32_t)hmdma->FirstLinkedListNodeAddress == 0U) || ((uint32_t)hmdma->LastLinkedListNodeAddress == 0U) || (hmdma->LinkedListNodeCounter == 0U))
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d007      	beq.n	8006a40 <HAL_MDMA_LinkedList_EnableCircularMode+0x58>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d003      	beq.n	8006a40 <HAL_MDMA_LinkedList_EnableCircularMode+0x58>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d102      	bne.n	8006a46 <HAL_MDMA_LinkedList_EnableCircularMode+0x5e>
    {
      hal_status = HAL_ERROR;
 8006a40:	2301      	movs	r3, #1
 8006a42:	73fb      	strb	r3, [r7, #15]
 8006a44:	e004      	b.n	8006a50 <HAL_MDMA_LinkedList_EnableCircularMode+0x68>
    }
    else
    {
      /* to enable circular mode Last Node should be connected to first node */
      hmdma->LastLinkedListNodeAddress->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a4e:	615a      	str	r2, [r3, #20]
    }

  }
  /* Process unlocked */
  __HAL_UNLOCK(hmdma);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2200      	movs	r2, #0
 8006a54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  hmdma->State = HAL_MDMA_STATE_READY;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return hal_status;
 8006a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3714      	adds	r7, #20
 8006a66:	46bd      	mov	sp, r7
 8006a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6c:	4770      	bx	lr

08006a6e <HAL_MDMA_Start_IT>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount      : The number of a blocks to be transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Start_IT(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 8006a6e:	b580      	push	{r7, lr}
 8006a70:	b086      	sub	sp, #24
 8006a72:	af02      	add	r7, sp, #8
 8006a74:	60f8      	str	r0, [r7, #12]
 8006a76:	60b9      	str	r1, [r7, #8]
 8006a78:	607a      	str	r2, [r7, #4]
 8006a7a:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_MDMA_TRANSFER_LENGTH(BlockDataLength));
  assert_param(IS_MDMA_BLOCK_COUNT(BlockCount));

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d101      	bne.n	8006a86 <HAL_MDMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006a82:	2301      	movs	r3, #1
 8006a84:	e070      	b.n	8006b68 <HAL_MDMA_Start_IT+0xfa>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d101      	bne.n	8006a94 <HAL_MDMA_Start_IT+0x26>
 8006a90:	2302      	movs	r3, #2
 8006a92:	e069      	b.n	8006b68 <HAL_MDMA_Start_IT+0xfa>
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2201      	movs	r2, #1
 8006a98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d158      	bne.n	8006b5a <HAL_MDMA_Start_IT+0xec>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2202      	movs	r2, #2
 8006aac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Initialize the error code */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Disable the peripheral */
    __HAL_MDMA_DISABLE(hmdma);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	68da      	ldr	r2, [r3, #12]
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f022 0201 	bic.w	r2, r2, #1
 8006ac4:	60da      	str	r2, [r3, #12]

    /* Configure the source, destination address and the data length */
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
 8006ac6:	69bb      	ldr	r3, [r7, #24]
 8006ac8:	9300      	str	r3, [sp, #0]
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	68b9      	ldr	r1, [r7, #8]
 8006ad0:	68f8      	ldr	r0, [r7, #12]
 8006ad2:	f000 f9db 	bl	8006e8c <MDMA_SetConfig>

    /* Enable Common interrupts i.e Transfer Error IT and Channel Transfer Complete IT*/
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	68da      	ldr	r2, [r3, #12]
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f042 0206 	orr.w	r2, r2, #6
 8006ae4:	60da      	str	r2, [r3, #12]

    if(hmdma->XferBlockCpltCallback != NULL)
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d007      	beq.n	8006afe <HAL_MDMA_Start_IT+0x90>
    {
      /* if Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	68da      	ldr	r2, [r3, #12]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f042 0210 	orr.w	r2, r2, #16
 8006afc:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d007      	beq.n	8006b16 <HAL_MDMA_Start_IT+0xa8>
    {
      /* if Repeated Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	68da      	ldr	r2, [r3, #12]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f042 0208 	orr.w	r2, r2, #8
 8006b14:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferBufferCpltCallback != NULL)
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d007      	beq.n	8006b2e <HAL_MDMA_Start_IT+0xc0>
    {
      /* if buffer transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	68da      	ldr	r2, [r3, #12]
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f042 0220 	orr.w	r2, r2, #32
 8006b2c:	60da      	str	r2, [r3, #12]
    }

    /* Enable the Peripheral */
    __HAL_MDMA_ENABLE(hmdma);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	68da      	ldr	r2, [r3, #12]
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f042 0201 	orr.w	r2, r2, #1
 8006b3c:	60da      	str	r2, [r3, #12]

    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b46:	d10e      	bne.n	8006b66 <HAL_MDMA_Start_IT+0xf8>
    {
      /* activate If SW request mode*/
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	68da      	ldr	r2, [r3, #12]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8006b56:	60da      	str	r2, [r3, #12]
 8006b58:	e005      	b.n	8006b66 <HAL_MDMA_Start_IT+0xf8>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Return error status */
    return HAL_BUSY;
 8006b62:	2302      	movs	r3, #2
 8006b64:	e000      	b.n	8006b68 <HAL_MDMA_Start_IT+0xfa>
  }

  return HAL_OK;
 8006b66:	2300      	movs	r3, #0
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3710      	adds	r7, #16
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}

08006b70 <HAL_MDMA_GenerateSWRequest>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_GenerateSWRequest(MDMA_HandleTypeDef *hmdma)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b085      	sub	sp, #20
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  uint32_t request_mode;

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d101      	bne.n	8006b82 <HAL_MDMA_GenerateSWRequest+0x12>
  {
    return HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e02a      	b.n	8006bd8 <HAL_MDMA_GenerateSWRequest+0x68>
  }

  /* Get the softawre request mode */
  request_mode = hmdma->Instance->CTCR & MDMA_CTCR_SWRM;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	691b      	ldr	r3, [r3, #16]
 8006b88:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006b8c:	60fb      	str	r3, [r7, #12]

  if((hmdma->Instance->CCR &  MDMA_CCR_EN) == 0U)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	68db      	ldr	r3, [r3, #12]
 8006b94:	f003 0301 	and.w	r3, r3, #1
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d104      	bne.n	8006ba6 <HAL_MDMA_GenerateSWRequest+0x36>
  {
    /* if no Transfer on going (MDMA enable bit not set) return error */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2280      	movs	r2, #128	@ 0x80
 8006ba0:	669a      	str	r2, [r3, #104]	@ 0x68

    return HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e018      	b.n	8006bd8 <HAL_MDMA_GenerateSWRequest+0x68>
  }
  else if(((hmdma->Instance->CISR &  MDMA_CISR_CRQA) != 0U) || (request_mode == 0U))
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d102      	bne.n	8006bba <HAL_MDMA_GenerateSWRequest+0x4a>
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d105      	bne.n	8006bc6 <HAL_MDMA_GenerateSWRequest+0x56>
  {
    /* if an MDMA ongoing request has not yet end or if request mode is not SW request return error */
    hmdma->ErrorCode = HAL_MDMA_ERROR_BUSY;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006bc0:	669a      	str	r2, [r3, #104]	@ 0x68

    return HAL_ERROR;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	e008      	b.n	8006bd8 <HAL_MDMA_GenerateSWRequest+0x68>
  }
  else
  {
    /* Set the SW request bit to activate the request on the Channel */
    hmdma->Instance->CCR |= MDMA_CCR_SWRQ;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	68da      	ldr	r2, [r3, #12]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8006bd4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006bd6:	2300      	movs	r3, #0
  }
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3714      	adds	r7, #20
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr

08006be4 <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b086      	sub	sp, #24
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 8006bec:	2300      	movs	r3, #0
 8006bee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006bf0:	4b91      	ldr	r3, [pc, #580]	@ (8006e38 <HAL_MDMA_IRQHandler+0x254>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a91      	ldr	r2, [pc, #580]	@ (8006e3c <HAL_MDMA_IRQHandler+0x258>)
 8006bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8006bfa:	0a9b      	lsrs	r3, r3, #10
 8006bfc:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	461a      	mov	r2, r3
 8006c04:	4b8e      	ldr	r3, [pc, #568]	@ (8006e40 <HAL_MDMA_IRQHandler+0x25c>)
 8006c06:	4413      	add	r3, r2
 8006c08:	099b      	lsrs	r3, r3, #6
 8006c0a:	f003 031f 	and.w	r3, r3, #31
 8006c0e:	2201      	movs	r2, #1
 8006c10:	fa02 f303 	lsl.w	r3, r2, r3
 8006c14:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8006c16:	f04f 43a4 	mov.w	r3, #1375731712	@ 0x52000000
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	4013      	ands	r3, r2
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	f000 812d 	beq.w	8006e80 <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f003 0301 	and.w	r3, r3, #1
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d054      	beq.n	8006cde <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	68db      	ldr	r3, [r3, #12]
 8006c3a:	f003 0302 	and.w	r3, r3, #2
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d04d      	beq.n	8006cde <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	68da      	ldr	r2, [r3, #12]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f022 0202 	bic.w	r2, r2, #2
 8006c50:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d106      	bne.n	8006c72 <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006c68:	f043 0201 	orr.w	r2, r3, #1
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	669a      	str	r2, [r3, #104]	@ 0x68
 8006c70:	e005      	b.n	8006c7e <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006c76:	f043 0202 	orr.w	r2, r3, #2
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d005      	beq.n	8006c94 <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006c8c:	f043 0204 	orr.w	r2, r3, #4
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d005      	beq.n	8006caa <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ca2:	f043 0208 	orr.w	r2, r3, #8
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d005      	beq.n	8006cc0 <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006cb8:	f043 0210 	orr.w	r2, r3, #16
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d005      	beq.n	8006cd6 <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006cce:	f043 0220 	orr.w	r2, r3, #32
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f003 0310 	and.w	r3, r3, #16
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d012      	beq.n	8006d12 <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	68db      	ldr	r3, [r3, #12]
 8006cf2:	f003 0320 	and.w	r3, r3, #32
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d00b      	beq.n	8006d12 <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	2210      	movs	r2, #16
 8006d00:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d003      	beq.n	8006d12 <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f003 0308 	and.w	r3, r3, #8
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d012      	beq.n	8006d46 <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	68db      	ldr	r3, [r3, #12]
 8006d26:	f003 0310 	and.w	r3, r3, #16
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d00b      	beq.n	8006d46 <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	2208      	movs	r2, #8
 8006d34:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d003      	beq.n	8006d46 <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f003 0304 	and.w	r3, r3, #4
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d012      	beq.n	8006d7a <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	68db      	ldr	r3, [r3, #12]
 8006d5a:	f003 0308 	and.w	r3, r3, #8
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d00b      	beq.n	8006d7a <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	2204      	movs	r2, #4
 8006d68:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d003      	beq.n	8006d7a <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f003 0302 	and.w	r3, r3, #2
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d039      	beq.n	8006dfc <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	68db      	ldr	r3, [r3, #12]
 8006d8e:	f003 0304 	and.w	r3, r3, #4
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d032      	beq.n	8006dfc <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	68da      	ldr	r2, [r3, #12]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 8006da4:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	2b04      	cmp	r3, #4
 8006db0:	d110      	bne.n	8006dd4 <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2200      	movs	r2, #0
 8006db6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        if(hmdma->XferAbortCallback != NULL)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d05c      	beq.n	8006e84 <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	4798      	blx	r3
        }
        return;
 8006dd2:	e057      	b.n	8006e84 <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	2202      	movs	r2, #2
 8006dda:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2200      	movs	r2, #0
 8006de0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2201      	movs	r2, #1
 8006de8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if(hmdma->XferCpltCallback != NULL)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d003      	beq.n	8006dfc <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d040      	beq.n	8006e86 <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2204      	movs	r2, #4
 8006e08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	68da      	ldr	r2, [r3, #12]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f022 0201 	bic.w	r2, r2, #1
 8006e1a:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	3301      	adds	r3, #1
 8006e20:	60bb      	str	r3, [r7, #8]
 8006e22:	697a      	ldr	r2, [r7, #20]
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d30d      	bcc.n	8006e44 <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	68db      	ldr	r3, [r3, #12]
 8006e2e:	f003 0301 	and.w	r3, r3, #1
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d1f2      	bne.n	8006e1c <HAL_MDMA_IRQHandler+0x238>
 8006e36:	e006      	b.n	8006e46 <HAL_MDMA_IRQHandler+0x262>
 8006e38:	24000000 	.word	0x24000000
 8006e3c:	1b4e81b5 	.word	0x1b4e81b5
 8006e40:	adffffc0 	.word	0xadffffc0
        break;
 8006e44:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	68db      	ldr	r3, [r3, #12]
 8006e54:	f003 0301 	and.w	r3, r3, #1
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d004      	beq.n	8006e66 <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2203      	movs	r2, #3
 8006e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006e64:	e003      	b.n	8006e6e <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2201      	movs	r2, #1
 8006e6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d007      	beq.n	8006e86 <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	4798      	blx	r3
 8006e7e:	e002      	b.n	8006e86 <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 8006e80:	bf00      	nop
 8006e82:	e000      	b.n	8006e86 <HAL_MDMA_IRQHandler+0x2a2>
        return;
 8006e84:	bf00      	nop
    }
  }
}
 8006e86:	3718      	adds	r7, #24
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}

08006e8c <MDMA_SetConfig>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount: The number of blocks to be transferred
  * @retval HAL status
  */
static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b087      	sub	sp, #28
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	60f8      	str	r0, [r7, #12]
 8006e94:	60b9      	str	r1, [r7, #8]
 8006e96:	607a      	str	r2, [r7, #4]
 8006e98:	603b      	str	r3, [r7, #0]
  uint32_t addressMask;

  /* Configure the MDMA Channel data length */
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	695a      	ldr	r2, [r3, #20]
 8006ea0:	4b31      	ldr	r3, [pc, #196]	@ (8006f68 <MDMA_SetConfig+0xdc>)
 8006ea2:	4013      	ands	r3, r2
 8006ea4:	683a      	ldr	r2, [r7, #0]
 8006ea6:	f3c2 0110 	ubfx	r1, r2, #0, #17
 8006eaa:	68fa      	ldr	r2, [r7, #12]
 8006eac:	6812      	ldr	r2, [r2, #0]
 8006eae:	430b      	orrs	r3, r1
 8006eb0:	6153      	str	r3, [r2, #20]

  /* Configure the MDMA block repeat count */
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	695b      	ldr	r3, [r3, #20]
 8006eb8:	f3c3 0113 	ubfx	r1, r3, #0, #20
 8006ebc:	6a3b      	ldr	r3, [r7, #32]
 8006ebe:	3b01      	subs	r3, #1
 8006ec0:	051a      	lsls	r2, r3, #20
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	430a      	orrs	r2, r1
 8006ec8:	615a      	str	r2, [r3, #20]

  /* Clear all interrupt flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	221f      	movs	r2, #31
 8006ed0:	605a      	str	r2, [r3, #4]

  /* Configure MDMA Channel destination address */
  hmdma->Instance->CDAR = DstAddress;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	61da      	str	r2, [r3, #28]

  /* Configure MDMA Channel Source address */
  hmdma->Instance->CSAR = SrcAddress;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	68ba      	ldr	r2, [r7, #8]
 8006ee0:	619a      	str	r2, [r3, #24]

  addressMask = SrcAddress & 0xFF000000U;
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8006ee8:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ef0:	d002      	beq.n	8006ef8 <MDMA_SetConfig+0x6c>
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d108      	bne.n	8006f0a <MDMA_SetConfig+0x7e>
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8006f06:	629a      	str	r2, [r3, #40]	@ 0x28
 8006f08:	e007      	b.n	8006f1a <MDMA_SetConfig+0x8e>
  }
  else
  {
    /*The AXI bus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006f18:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  addressMask = DstAddress & 0xFF000000U;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8006f20:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f28:	d002      	beq.n	8006f30 <MDMA_SetConfig+0xa4>
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d108      	bne.n	8006f42 <MDMA_SetConfig+0xb6>
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8006f3e:	629a      	str	r2, [r3, #40]	@ 0x28
 8006f40:	e007      	b.n	8006f52 <MDMA_SetConfig+0xc6>
  }
  else
  {
    /*The AXI bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8006f50:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Set the linked list register to the first node of the list */
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8006f5c:	bf00      	nop
 8006f5e:	371c      	adds	r7, #28
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr
 8006f68:	fffe0000 	.word	0xfffe0000

08006f6c <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b085      	sub	sp, #20
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	68d9      	ldr	r1, [r3, #12]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	691a      	ldr	r2, [r3, #16]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	430a      	orrs	r2, r1
 8006f82:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	695a      	ldr	r2, [r3, #20]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	699b      	ldr	r3, [r3, #24]
 8006f8c:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8006f92:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6a1b      	ldr	r3, [r3, #32]
 8006f98:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8006f9e:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fa4:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8006faa:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fb0:	3b01      	subs	r3, #1
 8006fb2:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 8006fb4:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8006fc0:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8006fc2:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fcc:	d107      	bne.n	8006fde <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	691a      	ldr	r2, [r3, #16]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 8006fdc:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	da11      	bge.n	8007012 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	695a      	ldr	r2, [r3, #20]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8006ffc:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007002:	425b      	negs	r3, r3
 8007004:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	68fa      	ldr	r2, [r7, #12]
 800700c:	b292      	uxth	r2, r2
 800700e:	621a      	str	r2, [r3, #32]
 8007010:	e006      	b.n	8007020 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007016:	461a      	mov	r2, r3
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	b292      	uxth	r2, r2
 800701e:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007024:	2b00      	cmp	r3, #0
 8007026:	da15      	bge.n	8007054 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	695a      	ldr	r2, [r3, #20]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8007036:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800703c:	425b      	negs	r3, r3
 800703e:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	6a19      	ldr	r1, [r3, #32]
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	041a      	lsls	r2, r3, #16
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	430a      	orrs	r2, r1
 8007050:	621a      	str	r2, [r3, #32]
 8007052:	e009      	b.n	8007068 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	6a19      	ldr	r1, [r3, #32]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800705e:	041a      	lsls	r2, r3, #16
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	430a      	orrs	r2, r1
 8007066:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007070:	d006      	beq.n	8007080 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	685a      	ldr	r2, [r3, #4]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	b2d2      	uxtb	r2, r2
 800707c:	629a      	str	r2, [r3, #40]	@ 0x28
 800707e:	e003      	b.n	8007088 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	2200      	movs	r2, #0
 8007086:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	2200      	movs	r2, #0
 800708e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8007090:	bf00      	nop
 8007092:	3714      	adds	r7, #20
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr

0800709c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b084      	sub	sp, #16
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80070a4:	4b29      	ldr	r3, [pc, #164]	@ (800714c <HAL_PWREx_ConfigSupply+0xb0>)
 80070a6:	68db      	ldr	r3, [r3, #12]
 80070a8:	f003 0307 	and.w	r3, r3, #7
 80070ac:	2b06      	cmp	r3, #6
 80070ae:	d00a      	beq.n	80070c6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80070b0:	4b26      	ldr	r3, [pc, #152]	@ (800714c <HAL_PWREx_ConfigSupply+0xb0>)
 80070b2:	68db      	ldr	r3, [r3, #12]
 80070b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80070b8:	687a      	ldr	r2, [r7, #4]
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d001      	beq.n	80070c2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80070be:	2301      	movs	r3, #1
 80070c0:	e040      	b.n	8007144 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80070c2:	2300      	movs	r3, #0
 80070c4:	e03e      	b.n	8007144 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80070c6:	4b21      	ldr	r3, [pc, #132]	@ (800714c <HAL_PWREx_ConfigSupply+0xb0>)
 80070c8:	68db      	ldr	r3, [r3, #12]
 80070ca:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80070ce:	491f      	ldr	r1, [pc, #124]	@ (800714c <HAL_PWREx_ConfigSupply+0xb0>)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	4313      	orrs	r3, r2
 80070d4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80070d6:	f7fb fefb 	bl	8002ed0 <HAL_GetTick>
 80070da:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80070dc:	e009      	b.n	80070f2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80070de:	f7fb fef7 	bl	8002ed0 <HAL_GetTick>
 80070e2:	4602      	mov	r2, r0
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	1ad3      	subs	r3, r2, r3
 80070e8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80070ec:	d901      	bls.n	80070f2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80070ee:	2301      	movs	r3, #1
 80070f0:	e028      	b.n	8007144 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80070f2:	4b16      	ldr	r3, [pc, #88]	@ (800714c <HAL_PWREx_ConfigSupply+0xb0>)
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80070fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070fe:	d1ee      	bne.n	80070de <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2b1e      	cmp	r3, #30
 8007104:	d008      	beq.n	8007118 <HAL_PWREx_ConfigSupply+0x7c>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2b2e      	cmp	r3, #46	@ 0x2e
 800710a:	d005      	beq.n	8007118 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2b1d      	cmp	r3, #29
 8007110:	d002      	beq.n	8007118 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2b2d      	cmp	r3, #45	@ 0x2d
 8007116:	d114      	bne.n	8007142 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8007118:	f7fb feda 	bl	8002ed0 <HAL_GetTick>
 800711c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800711e:	e009      	b.n	8007134 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007120:	f7fb fed6 	bl	8002ed0 <HAL_GetTick>
 8007124:	4602      	mov	r2, r0
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	1ad3      	subs	r3, r2, r3
 800712a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800712e:	d901      	bls.n	8007134 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8007130:	2301      	movs	r3, #1
 8007132:	e007      	b.n	8007144 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8007134:	4b05      	ldr	r3, [pc, #20]	@ (800714c <HAL_PWREx_ConfigSupply+0xb0>)
 8007136:	68db      	ldr	r3, [r3, #12]
 8007138:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800713c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007140:	d1ee      	bne.n	8007120 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007142:	2300      	movs	r3, #0
}
 8007144:	4618      	mov	r0, r3
 8007146:	3710      	adds	r7, #16
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}
 800714c:	58024800 	.word	0x58024800

08007150 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b08c      	sub	sp, #48	@ 0x30
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d102      	bne.n	8007164 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800715e:	2301      	movs	r3, #1
 8007160:	f000 bc48 	b.w	80079f4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f003 0301 	and.w	r3, r3, #1
 800716c:	2b00      	cmp	r3, #0
 800716e:	f000 8088 	beq.w	8007282 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007172:	4b99      	ldr	r3, [pc, #612]	@ (80073d8 <HAL_RCC_OscConfig+0x288>)
 8007174:	691b      	ldr	r3, [r3, #16]
 8007176:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800717a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800717c:	4b96      	ldr	r3, [pc, #600]	@ (80073d8 <HAL_RCC_OscConfig+0x288>)
 800717e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007180:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007184:	2b10      	cmp	r3, #16
 8007186:	d007      	beq.n	8007198 <HAL_RCC_OscConfig+0x48>
 8007188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800718a:	2b18      	cmp	r3, #24
 800718c:	d111      	bne.n	80071b2 <HAL_RCC_OscConfig+0x62>
 800718e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007190:	f003 0303 	and.w	r3, r3, #3
 8007194:	2b02      	cmp	r3, #2
 8007196:	d10c      	bne.n	80071b2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007198:	4b8f      	ldr	r3, [pc, #572]	@ (80073d8 <HAL_RCC_OscConfig+0x288>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d06d      	beq.n	8007280 <HAL_RCC_OscConfig+0x130>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d169      	bne.n	8007280 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80071ac:	2301      	movs	r3, #1
 80071ae:	f000 bc21 	b.w	80079f4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071ba:	d106      	bne.n	80071ca <HAL_RCC_OscConfig+0x7a>
 80071bc:	4b86      	ldr	r3, [pc, #536]	@ (80073d8 <HAL_RCC_OscConfig+0x288>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a85      	ldr	r2, [pc, #532]	@ (80073d8 <HAL_RCC_OscConfig+0x288>)
 80071c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80071c6:	6013      	str	r3, [r2, #0]
 80071c8:	e02e      	b.n	8007228 <HAL_RCC_OscConfig+0xd8>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d10c      	bne.n	80071ec <HAL_RCC_OscConfig+0x9c>
 80071d2:	4b81      	ldr	r3, [pc, #516]	@ (80073d8 <HAL_RCC_OscConfig+0x288>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a80      	ldr	r2, [pc, #512]	@ (80073d8 <HAL_RCC_OscConfig+0x288>)
 80071d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80071dc:	6013      	str	r3, [r2, #0]
 80071de:	4b7e      	ldr	r3, [pc, #504]	@ (80073d8 <HAL_RCC_OscConfig+0x288>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a7d      	ldr	r2, [pc, #500]	@ (80073d8 <HAL_RCC_OscConfig+0x288>)
 80071e4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80071e8:	6013      	str	r3, [r2, #0]
 80071ea:	e01d      	b.n	8007228 <HAL_RCC_OscConfig+0xd8>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80071f4:	d10c      	bne.n	8007210 <HAL_RCC_OscConfig+0xc0>
 80071f6:	4b78      	ldr	r3, [pc, #480]	@ (80073d8 <HAL_RCC_OscConfig+0x288>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a77      	ldr	r2, [pc, #476]	@ (80073d8 <HAL_RCC_OscConfig+0x288>)
 80071fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007200:	6013      	str	r3, [r2, #0]
 8007202:	4b75      	ldr	r3, [pc, #468]	@ (80073d8 <HAL_RCC_OscConfig+0x288>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a74      	ldr	r2, [pc, #464]	@ (80073d8 <HAL_RCC_OscConfig+0x288>)
 8007208:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800720c:	6013      	str	r3, [r2, #0]
 800720e:	e00b      	b.n	8007228 <HAL_RCC_OscConfig+0xd8>
 8007210:	4b71      	ldr	r3, [pc, #452]	@ (80073d8 <HAL_RCC_OscConfig+0x288>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a70      	ldr	r2, [pc, #448]	@ (80073d8 <HAL_RCC_OscConfig+0x288>)
 8007216:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800721a:	6013      	str	r3, [r2, #0]
 800721c:	4b6e      	ldr	r3, [pc, #440]	@ (80073d8 <HAL_RCC_OscConfig+0x288>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a6d      	ldr	r2, [pc, #436]	@ (80073d8 <HAL_RCC_OscConfig+0x288>)
 8007222:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007226:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d013      	beq.n	8007258 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007230:	f7fb fe4e 	bl	8002ed0 <HAL_GetTick>
 8007234:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007236:	e008      	b.n	800724a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007238:	f7fb fe4a 	bl	8002ed0 <HAL_GetTick>
 800723c:	4602      	mov	r2, r0
 800723e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007240:	1ad3      	subs	r3, r2, r3
 8007242:	2b64      	cmp	r3, #100	@ 0x64
 8007244:	d901      	bls.n	800724a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007246:	2303      	movs	r3, #3
 8007248:	e3d4      	b.n	80079f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800724a:	4b63      	ldr	r3, [pc, #396]	@ (80073d8 <HAL_RCC_OscConfig+0x288>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007252:	2b00      	cmp	r3, #0
 8007254:	d0f0      	beq.n	8007238 <HAL_RCC_OscConfig+0xe8>
 8007256:	e014      	b.n	8007282 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007258:	f7fb fe3a 	bl	8002ed0 <HAL_GetTick>
 800725c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800725e:	e008      	b.n	8007272 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007260:	f7fb fe36 	bl	8002ed0 <HAL_GetTick>
 8007264:	4602      	mov	r2, r0
 8007266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007268:	1ad3      	subs	r3, r2, r3
 800726a:	2b64      	cmp	r3, #100	@ 0x64
 800726c:	d901      	bls.n	8007272 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800726e:	2303      	movs	r3, #3
 8007270:	e3c0      	b.n	80079f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007272:	4b59      	ldr	r3, [pc, #356]	@ (80073d8 <HAL_RCC_OscConfig+0x288>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800727a:	2b00      	cmp	r3, #0
 800727c:	d1f0      	bne.n	8007260 <HAL_RCC_OscConfig+0x110>
 800727e:	e000      	b.n	8007282 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007280:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f003 0302 	and.w	r3, r3, #2
 800728a:	2b00      	cmp	r3, #0
 800728c:	f000 80ca 	beq.w	8007424 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007290:	4b51      	ldr	r3, [pc, #324]	@ (80073d8 <HAL_RCC_OscConfig+0x288>)
 8007292:	691b      	ldr	r3, [r3, #16]
 8007294:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007298:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800729a:	4b4f      	ldr	r3, [pc, #316]	@ (80073d8 <HAL_RCC_OscConfig+0x288>)
 800729c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800729e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80072a0:	6a3b      	ldr	r3, [r7, #32]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d007      	beq.n	80072b6 <HAL_RCC_OscConfig+0x166>
 80072a6:	6a3b      	ldr	r3, [r7, #32]
 80072a8:	2b18      	cmp	r3, #24
 80072aa:	d156      	bne.n	800735a <HAL_RCC_OscConfig+0x20a>
 80072ac:	69fb      	ldr	r3, [r7, #28]
 80072ae:	f003 0303 	and.w	r3, r3, #3
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d151      	bne.n	800735a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80072b6:	4b48      	ldr	r3, [pc, #288]	@ (80073d8 <HAL_RCC_OscConfig+0x288>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f003 0304 	and.w	r3, r3, #4
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d005      	beq.n	80072ce <HAL_RCC_OscConfig+0x17e>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	68db      	ldr	r3, [r3, #12]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d101      	bne.n	80072ce <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80072ca:	2301      	movs	r3, #1
 80072cc:	e392      	b.n	80079f4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80072ce:	4b42      	ldr	r3, [pc, #264]	@ (80073d8 <HAL_RCC_OscConfig+0x288>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f023 0219 	bic.w	r2, r3, #25
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	68db      	ldr	r3, [r3, #12]
 80072da:	493f      	ldr	r1, [pc, #252]	@ (80073d8 <HAL_RCC_OscConfig+0x288>)
 80072dc:	4313      	orrs	r3, r2
 80072de:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072e0:	f7fb fdf6 	bl	8002ed0 <HAL_GetTick>
 80072e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80072e6:	e008      	b.n	80072fa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80072e8:	f7fb fdf2 	bl	8002ed0 <HAL_GetTick>
 80072ec:	4602      	mov	r2, r0
 80072ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072f0:	1ad3      	subs	r3, r2, r3
 80072f2:	2b02      	cmp	r3, #2
 80072f4:	d901      	bls.n	80072fa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80072f6:	2303      	movs	r3, #3
 80072f8:	e37c      	b.n	80079f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80072fa:	4b37      	ldr	r3, [pc, #220]	@ (80073d8 <HAL_RCC_OscConfig+0x288>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f003 0304 	and.w	r3, r3, #4
 8007302:	2b00      	cmp	r3, #0
 8007304:	d0f0      	beq.n	80072e8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007306:	f7fb fe13 	bl	8002f30 <HAL_GetREVID>
 800730a:	4603      	mov	r3, r0
 800730c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007310:	4293      	cmp	r3, r2
 8007312:	d817      	bhi.n	8007344 <HAL_RCC_OscConfig+0x1f4>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	691b      	ldr	r3, [r3, #16]
 8007318:	2b40      	cmp	r3, #64	@ 0x40
 800731a:	d108      	bne.n	800732e <HAL_RCC_OscConfig+0x1de>
 800731c:	4b2e      	ldr	r3, [pc, #184]	@ (80073d8 <HAL_RCC_OscConfig+0x288>)
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8007324:	4a2c      	ldr	r2, [pc, #176]	@ (80073d8 <HAL_RCC_OscConfig+0x288>)
 8007326:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800732a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800732c:	e07a      	b.n	8007424 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800732e:	4b2a      	ldr	r3, [pc, #168]	@ (80073d8 <HAL_RCC_OscConfig+0x288>)
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	691b      	ldr	r3, [r3, #16]
 800733a:	031b      	lsls	r3, r3, #12
 800733c:	4926      	ldr	r1, [pc, #152]	@ (80073d8 <HAL_RCC_OscConfig+0x288>)
 800733e:	4313      	orrs	r3, r2
 8007340:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007342:	e06f      	b.n	8007424 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007344:	4b24      	ldr	r3, [pc, #144]	@ (80073d8 <HAL_RCC_OscConfig+0x288>)
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	691b      	ldr	r3, [r3, #16]
 8007350:	061b      	lsls	r3, r3, #24
 8007352:	4921      	ldr	r1, [pc, #132]	@ (80073d8 <HAL_RCC_OscConfig+0x288>)
 8007354:	4313      	orrs	r3, r2
 8007356:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007358:	e064      	b.n	8007424 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	68db      	ldr	r3, [r3, #12]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d047      	beq.n	80073f2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007362:	4b1d      	ldr	r3, [pc, #116]	@ (80073d8 <HAL_RCC_OscConfig+0x288>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f023 0219 	bic.w	r2, r3, #25
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	68db      	ldr	r3, [r3, #12]
 800736e:	491a      	ldr	r1, [pc, #104]	@ (80073d8 <HAL_RCC_OscConfig+0x288>)
 8007370:	4313      	orrs	r3, r2
 8007372:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007374:	f7fb fdac 	bl	8002ed0 <HAL_GetTick>
 8007378:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800737a:	e008      	b.n	800738e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800737c:	f7fb fda8 	bl	8002ed0 <HAL_GetTick>
 8007380:	4602      	mov	r2, r0
 8007382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007384:	1ad3      	subs	r3, r2, r3
 8007386:	2b02      	cmp	r3, #2
 8007388:	d901      	bls.n	800738e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800738a:	2303      	movs	r3, #3
 800738c:	e332      	b.n	80079f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800738e:	4b12      	ldr	r3, [pc, #72]	@ (80073d8 <HAL_RCC_OscConfig+0x288>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f003 0304 	and.w	r3, r3, #4
 8007396:	2b00      	cmp	r3, #0
 8007398:	d0f0      	beq.n	800737c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800739a:	f7fb fdc9 	bl	8002f30 <HAL_GetREVID>
 800739e:	4603      	mov	r3, r0
 80073a0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d819      	bhi.n	80073dc <HAL_RCC_OscConfig+0x28c>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	691b      	ldr	r3, [r3, #16]
 80073ac:	2b40      	cmp	r3, #64	@ 0x40
 80073ae:	d108      	bne.n	80073c2 <HAL_RCC_OscConfig+0x272>
 80073b0:	4b09      	ldr	r3, [pc, #36]	@ (80073d8 <HAL_RCC_OscConfig+0x288>)
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80073b8:	4a07      	ldr	r2, [pc, #28]	@ (80073d8 <HAL_RCC_OscConfig+0x288>)
 80073ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80073be:	6053      	str	r3, [r2, #4]
 80073c0:	e030      	b.n	8007424 <HAL_RCC_OscConfig+0x2d4>
 80073c2:	4b05      	ldr	r3, [pc, #20]	@ (80073d8 <HAL_RCC_OscConfig+0x288>)
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	691b      	ldr	r3, [r3, #16]
 80073ce:	031b      	lsls	r3, r3, #12
 80073d0:	4901      	ldr	r1, [pc, #4]	@ (80073d8 <HAL_RCC_OscConfig+0x288>)
 80073d2:	4313      	orrs	r3, r2
 80073d4:	604b      	str	r3, [r1, #4]
 80073d6:	e025      	b.n	8007424 <HAL_RCC_OscConfig+0x2d4>
 80073d8:	58024400 	.word	0x58024400
 80073dc:	4b9a      	ldr	r3, [pc, #616]	@ (8007648 <HAL_RCC_OscConfig+0x4f8>)
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	691b      	ldr	r3, [r3, #16]
 80073e8:	061b      	lsls	r3, r3, #24
 80073ea:	4997      	ldr	r1, [pc, #604]	@ (8007648 <HAL_RCC_OscConfig+0x4f8>)
 80073ec:	4313      	orrs	r3, r2
 80073ee:	604b      	str	r3, [r1, #4]
 80073f0:	e018      	b.n	8007424 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80073f2:	4b95      	ldr	r3, [pc, #596]	@ (8007648 <HAL_RCC_OscConfig+0x4f8>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a94      	ldr	r2, [pc, #592]	@ (8007648 <HAL_RCC_OscConfig+0x4f8>)
 80073f8:	f023 0301 	bic.w	r3, r3, #1
 80073fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073fe:	f7fb fd67 	bl	8002ed0 <HAL_GetTick>
 8007402:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007404:	e008      	b.n	8007418 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007406:	f7fb fd63 	bl	8002ed0 <HAL_GetTick>
 800740a:	4602      	mov	r2, r0
 800740c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800740e:	1ad3      	subs	r3, r2, r3
 8007410:	2b02      	cmp	r3, #2
 8007412:	d901      	bls.n	8007418 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8007414:	2303      	movs	r3, #3
 8007416:	e2ed      	b.n	80079f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007418:	4b8b      	ldr	r3, [pc, #556]	@ (8007648 <HAL_RCC_OscConfig+0x4f8>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f003 0304 	and.w	r3, r3, #4
 8007420:	2b00      	cmp	r3, #0
 8007422:	d1f0      	bne.n	8007406 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f003 0310 	and.w	r3, r3, #16
 800742c:	2b00      	cmp	r3, #0
 800742e:	f000 80a9 	beq.w	8007584 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007432:	4b85      	ldr	r3, [pc, #532]	@ (8007648 <HAL_RCC_OscConfig+0x4f8>)
 8007434:	691b      	ldr	r3, [r3, #16]
 8007436:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800743a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800743c:	4b82      	ldr	r3, [pc, #520]	@ (8007648 <HAL_RCC_OscConfig+0x4f8>)
 800743e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007440:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007442:	69bb      	ldr	r3, [r7, #24]
 8007444:	2b08      	cmp	r3, #8
 8007446:	d007      	beq.n	8007458 <HAL_RCC_OscConfig+0x308>
 8007448:	69bb      	ldr	r3, [r7, #24]
 800744a:	2b18      	cmp	r3, #24
 800744c:	d13a      	bne.n	80074c4 <HAL_RCC_OscConfig+0x374>
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	f003 0303 	and.w	r3, r3, #3
 8007454:	2b01      	cmp	r3, #1
 8007456:	d135      	bne.n	80074c4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007458:	4b7b      	ldr	r3, [pc, #492]	@ (8007648 <HAL_RCC_OscConfig+0x4f8>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007460:	2b00      	cmp	r3, #0
 8007462:	d005      	beq.n	8007470 <HAL_RCC_OscConfig+0x320>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	69db      	ldr	r3, [r3, #28]
 8007468:	2b80      	cmp	r3, #128	@ 0x80
 800746a:	d001      	beq.n	8007470 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800746c:	2301      	movs	r3, #1
 800746e:	e2c1      	b.n	80079f4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007470:	f7fb fd5e 	bl	8002f30 <HAL_GetREVID>
 8007474:	4603      	mov	r3, r0
 8007476:	f241 0203 	movw	r2, #4099	@ 0x1003
 800747a:	4293      	cmp	r3, r2
 800747c:	d817      	bhi.n	80074ae <HAL_RCC_OscConfig+0x35e>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6a1b      	ldr	r3, [r3, #32]
 8007482:	2b20      	cmp	r3, #32
 8007484:	d108      	bne.n	8007498 <HAL_RCC_OscConfig+0x348>
 8007486:	4b70      	ldr	r3, [pc, #448]	@ (8007648 <HAL_RCC_OscConfig+0x4f8>)
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800748e:	4a6e      	ldr	r2, [pc, #440]	@ (8007648 <HAL_RCC_OscConfig+0x4f8>)
 8007490:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007494:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007496:	e075      	b.n	8007584 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007498:	4b6b      	ldr	r3, [pc, #428]	@ (8007648 <HAL_RCC_OscConfig+0x4f8>)
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6a1b      	ldr	r3, [r3, #32]
 80074a4:	069b      	lsls	r3, r3, #26
 80074a6:	4968      	ldr	r1, [pc, #416]	@ (8007648 <HAL_RCC_OscConfig+0x4f8>)
 80074a8:	4313      	orrs	r3, r2
 80074aa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80074ac:	e06a      	b.n	8007584 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80074ae:	4b66      	ldr	r3, [pc, #408]	@ (8007648 <HAL_RCC_OscConfig+0x4f8>)
 80074b0:	68db      	ldr	r3, [r3, #12]
 80074b2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6a1b      	ldr	r3, [r3, #32]
 80074ba:	061b      	lsls	r3, r3, #24
 80074bc:	4962      	ldr	r1, [pc, #392]	@ (8007648 <HAL_RCC_OscConfig+0x4f8>)
 80074be:	4313      	orrs	r3, r2
 80074c0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80074c2:	e05f      	b.n	8007584 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	69db      	ldr	r3, [r3, #28]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d042      	beq.n	8007552 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80074cc:	4b5e      	ldr	r3, [pc, #376]	@ (8007648 <HAL_RCC_OscConfig+0x4f8>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a5d      	ldr	r2, [pc, #372]	@ (8007648 <HAL_RCC_OscConfig+0x4f8>)
 80074d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074d8:	f7fb fcfa 	bl	8002ed0 <HAL_GetTick>
 80074dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80074de:	e008      	b.n	80074f2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80074e0:	f7fb fcf6 	bl	8002ed0 <HAL_GetTick>
 80074e4:	4602      	mov	r2, r0
 80074e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074e8:	1ad3      	subs	r3, r2, r3
 80074ea:	2b02      	cmp	r3, #2
 80074ec:	d901      	bls.n	80074f2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80074ee:	2303      	movs	r3, #3
 80074f0:	e280      	b.n	80079f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80074f2:	4b55      	ldr	r3, [pc, #340]	@ (8007648 <HAL_RCC_OscConfig+0x4f8>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d0f0      	beq.n	80074e0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80074fe:	f7fb fd17 	bl	8002f30 <HAL_GetREVID>
 8007502:	4603      	mov	r3, r0
 8007504:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007508:	4293      	cmp	r3, r2
 800750a:	d817      	bhi.n	800753c <HAL_RCC_OscConfig+0x3ec>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6a1b      	ldr	r3, [r3, #32]
 8007510:	2b20      	cmp	r3, #32
 8007512:	d108      	bne.n	8007526 <HAL_RCC_OscConfig+0x3d6>
 8007514:	4b4c      	ldr	r3, [pc, #304]	@ (8007648 <HAL_RCC_OscConfig+0x4f8>)
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800751c:	4a4a      	ldr	r2, [pc, #296]	@ (8007648 <HAL_RCC_OscConfig+0x4f8>)
 800751e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007522:	6053      	str	r3, [r2, #4]
 8007524:	e02e      	b.n	8007584 <HAL_RCC_OscConfig+0x434>
 8007526:	4b48      	ldr	r3, [pc, #288]	@ (8007648 <HAL_RCC_OscConfig+0x4f8>)
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6a1b      	ldr	r3, [r3, #32]
 8007532:	069b      	lsls	r3, r3, #26
 8007534:	4944      	ldr	r1, [pc, #272]	@ (8007648 <HAL_RCC_OscConfig+0x4f8>)
 8007536:	4313      	orrs	r3, r2
 8007538:	604b      	str	r3, [r1, #4]
 800753a:	e023      	b.n	8007584 <HAL_RCC_OscConfig+0x434>
 800753c:	4b42      	ldr	r3, [pc, #264]	@ (8007648 <HAL_RCC_OscConfig+0x4f8>)
 800753e:	68db      	ldr	r3, [r3, #12]
 8007540:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6a1b      	ldr	r3, [r3, #32]
 8007548:	061b      	lsls	r3, r3, #24
 800754a:	493f      	ldr	r1, [pc, #252]	@ (8007648 <HAL_RCC_OscConfig+0x4f8>)
 800754c:	4313      	orrs	r3, r2
 800754e:	60cb      	str	r3, [r1, #12]
 8007550:	e018      	b.n	8007584 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007552:	4b3d      	ldr	r3, [pc, #244]	@ (8007648 <HAL_RCC_OscConfig+0x4f8>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a3c      	ldr	r2, [pc, #240]	@ (8007648 <HAL_RCC_OscConfig+0x4f8>)
 8007558:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800755c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800755e:	f7fb fcb7 	bl	8002ed0 <HAL_GetTick>
 8007562:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007564:	e008      	b.n	8007578 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007566:	f7fb fcb3 	bl	8002ed0 <HAL_GetTick>
 800756a:	4602      	mov	r2, r0
 800756c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800756e:	1ad3      	subs	r3, r2, r3
 8007570:	2b02      	cmp	r3, #2
 8007572:	d901      	bls.n	8007578 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007574:	2303      	movs	r3, #3
 8007576:	e23d      	b.n	80079f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007578:	4b33      	ldr	r3, [pc, #204]	@ (8007648 <HAL_RCC_OscConfig+0x4f8>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007580:	2b00      	cmp	r3, #0
 8007582:	d1f0      	bne.n	8007566 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f003 0308 	and.w	r3, r3, #8
 800758c:	2b00      	cmp	r3, #0
 800758e:	d036      	beq.n	80075fe <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	695b      	ldr	r3, [r3, #20]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d019      	beq.n	80075cc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007598:	4b2b      	ldr	r3, [pc, #172]	@ (8007648 <HAL_RCC_OscConfig+0x4f8>)
 800759a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800759c:	4a2a      	ldr	r2, [pc, #168]	@ (8007648 <HAL_RCC_OscConfig+0x4f8>)
 800759e:	f043 0301 	orr.w	r3, r3, #1
 80075a2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075a4:	f7fb fc94 	bl	8002ed0 <HAL_GetTick>
 80075a8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80075aa:	e008      	b.n	80075be <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80075ac:	f7fb fc90 	bl	8002ed0 <HAL_GetTick>
 80075b0:	4602      	mov	r2, r0
 80075b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075b4:	1ad3      	subs	r3, r2, r3
 80075b6:	2b02      	cmp	r3, #2
 80075b8:	d901      	bls.n	80075be <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80075ba:	2303      	movs	r3, #3
 80075bc:	e21a      	b.n	80079f4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80075be:	4b22      	ldr	r3, [pc, #136]	@ (8007648 <HAL_RCC_OscConfig+0x4f8>)
 80075c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075c2:	f003 0302 	and.w	r3, r3, #2
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d0f0      	beq.n	80075ac <HAL_RCC_OscConfig+0x45c>
 80075ca:	e018      	b.n	80075fe <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80075cc:	4b1e      	ldr	r3, [pc, #120]	@ (8007648 <HAL_RCC_OscConfig+0x4f8>)
 80075ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075d0:	4a1d      	ldr	r2, [pc, #116]	@ (8007648 <HAL_RCC_OscConfig+0x4f8>)
 80075d2:	f023 0301 	bic.w	r3, r3, #1
 80075d6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075d8:	f7fb fc7a 	bl	8002ed0 <HAL_GetTick>
 80075dc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80075de:	e008      	b.n	80075f2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80075e0:	f7fb fc76 	bl	8002ed0 <HAL_GetTick>
 80075e4:	4602      	mov	r2, r0
 80075e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075e8:	1ad3      	subs	r3, r2, r3
 80075ea:	2b02      	cmp	r3, #2
 80075ec:	d901      	bls.n	80075f2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80075ee:	2303      	movs	r3, #3
 80075f0:	e200      	b.n	80079f4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80075f2:	4b15      	ldr	r3, [pc, #84]	@ (8007648 <HAL_RCC_OscConfig+0x4f8>)
 80075f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075f6:	f003 0302 	and.w	r3, r3, #2
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d1f0      	bne.n	80075e0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f003 0320 	and.w	r3, r3, #32
 8007606:	2b00      	cmp	r3, #0
 8007608:	d039      	beq.n	800767e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	699b      	ldr	r3, [r3, #24]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d01c      	beq.n	800764c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007612:	4b0d      	ldr	r3, [pc, #52]	@ (8007648 <HAL_RCC_OscConfig+0x4f8>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a0c      	ldr	r2, [pc, #48]	@ (8007648 <HAL_RCC_OscConfig+0x4f8>)
 8007618:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800761c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800761e:	f7fb fc57 	bl	8002ed0 <HAL_GetTick>
 8007622:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007624:	e008      	b.n	8007638 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007626:	f7fb fc53 	bl	8002ed0 <HAL_GetTick>
 800762a:	4602      	mov	r2, r0
 800762c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800762e:	1ad3      	subs	r3, r2, r3
 8007630:	2b02      	cmp	r3, #2
 8007632:	d901      	bls.n	8007638 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8007634:	2303      	movs	r3, #3
 8007636:	e1dd      	b.n	80079f4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007638:	4b03      	ldr	r3, [pc, #12]	@ (8007648 <HAL_RCC_OscConfig+0x4f8>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007640:	2b00      	cmp	r3, #0
 8007642:	d0f0      	beq.n	8007626 <HAL_RCC_OscConfig+0x4d6>
 8007644:	e01b      	b.n	800767e <HAL_RCC_OscConfig+0x52e>
 8007646:	bf00      	nop
 8007648:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800764c:	4b9b      	ldr	r3, [pc, #620]	@ (80078bc <HAL_RCC_OscConfig+0x76c>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a9a      	ldr	r2, [pc, #616]	@ (80078bc <HAL_RCC_OscConfig+0x76c>)
 8007652:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007656:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007658:	f7fb fc3a 	bl	8002ed0 <HAL_GetTick>
 800765c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800765e:	e008      	b.n	8007672 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007660:	f7fb fc36 	bl	8002ed0 <HAL_GetTick>
 8007664:	4602      	mov	r2, r0
 8007666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007668:	1ad3      	subs	r3, r2, r3
 800766a:	2b02      	cmp	r3, #2
 800766c:	d901      	bls.n	8007672 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800766e:	2303      	movs	r3, #3
 8007670:	e1c0      	b.n	80079f4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007672:	4b92      	ldr	r3, [pc, #584]	@ (80078bc <HAL_RCC_OscConfig+0x76c>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800767a:	2b00      	cmp	r3, #0
 800767c:	d1f0      	bne.n	8007660 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f003 0304 	and.w	r3, r3, #4
 8007686:	2b00      	cmp	r3, #0
 8007688:	f000 8081 	beq.w	800778e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800768c:	4b8c      	ldr	r3, [pc, #560]	@ (80078c0 <HAL_RCC_OscConfig+0x770>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a8b      	ldr	r2, [pc, #556]	@ (80078c0 <HAL_RCC_OscConfig+0x770>)
 8007692:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007696:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007698:	f7fb fc1a 	bl	8002ed0 <HAL_GetTick>
 800769c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800769e:	e008      	b.n	80076b2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80076a0:	f7fb fc16 	bl	8002ed0 <HAL_GetTick>
 80076a4:	4602      	mov	r2, r0
 80076a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a8:	1ad3      	subs	r3, r2, r3
 80076aa:	2b64      	cmp	r3, #100	@ 0x64
 80076ac:	d901      	bls.n	80076b2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80076ae:	2303      	movs	r3, #3
 80076b0:	e1a0      	b.n	80079f4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80076b2:	4b83      	ldr	r3, [pc, #524]	@ (80078c0 <HAL_RCC_OscConfig+0x770>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d0f0      	beq.n	80076a0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	689b      	ldr	r3, [r3, #8]
 80076c2:	2b01      	cmp	r3, #1
 80076c4:	d106      	bne.n	80076d4 <HAL_RCC_OscConfig+0x584>
 80076c6:	4b7d      	ldr	r3, [pc, #500]	@ (80078bc <HAL_RCC_OscConfig+0x76c>)
 80076c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076ca:	4a7c      	ldr	r2, [pc, #496]	@ (80078bc <HAL_RCC_OscConfig+0x76c>)
 80076cc:	f043 0301 	orr.w	r3, r3, #1
 80076d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80076d2:	e02d      	b.n	8007730 <HAL_RCC_OscConfig+0x5e0>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d10c      	bne.n	80076f6 <HAL_RCC_OscConfig+0x5a6>
 80076dc:	4b77      	ldr	r3, [pc, #476]	@ (80078bc <HAL_RCC_OscConfig+0x76c>)
 80076de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076e0:	4a76      	ldr	r2, [pc, #472]	@ (80078bc <HAL_RCC_OscConfig+0x76c>)
 80076e2:	f023 0301 	bic.w	r3, r3, #1
 80076e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80076e8:	4b74      	ldr	r3, [pc, #464]	@ (80078bc <HAL_RCC_OscConfig+0x76c>)
 80076ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076ec:	4a73      	ldr	r2, [pc, #460]	@ (80078bc <HAL_RCC_OscConfig+0x76c>)
 80076ee:	f023 0304 	bic.w	r3, r3, #4
 80076f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80076f4:	e01c      	b.n	8007730 <HAL_RCC_OscConfig+0x5e0>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	689b      	ldr	r3, [r3, #8]
 80076fa:	2b05      	cmp	r3, #5
 80076fc:	d10c      	bne.n	8007718 <HAL_RCC_OscConfig+0x5c8>
 80076fe:	4b6f      	ldr	r3, [pc, #444]	@ (80078bc <HAL_RCC_OscConfig+0x76c>)
 8007700:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007702:	4a6e      	ldr	r2, [pc, #440]	@ (80078bc <HAL_RCC_OscConfig+0x76c>)
 8007704:	f043 0304 	orr.w	r3, r3, #4
 8007708:	6713      	str	r3, [r2, #112]	@ 0x70
 800770a:	4b6c      	ldr	r3, [pc, #432]	@ (80078bc <HAL_RCC_OscConfig+0x76c>)
 800770c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800770e:	4a6b      	ldr	r2, [pc, #428]	@ (80078bc <HAL_RCC_OscConfig+0x76c>)
 8007710:	f043 0301 	orr.w	r3, r3, #1
 8007714:	6713      	str	r3, [r2, #112]	@ 0x70
 8007716:	e00b      	b.n	8007730 <HAL_RCC_OscConfig+0x5e0>
 8007718:	4b68      	ldr	r3, [pc, #416]	@ (80078bc <HAL_RCC_OscConfig+0x76c>)
 800771a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800771c:	4a67      	ldr	r2, [pc, #412]	@ (80078bc <HAL_RCC_OscConfig+0x76c>)
 800771e:	f023 0301 	bic.w	r3, r3, #1
 8007722:	6713      	str	r3, [r2, #112]	@ 0x70
 8007724:	4b65      	ldr	r3, [pc, #404]	@ (80078bc <HAL_RCC_OscConfig+0x76c>)
 8007726:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007728:	4a64      	ldr	r2, [pc, #400]	@ (80078bc <HAL_RCC_OscConfig+0x76c>)
 800772a:	f023 0304 	bic.w	r3, r3, #4
 800772e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	689b      	ldr	r3, [r3, #8]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d015      	beq.n	8007764 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007738:	f7fb fbca 	bl	8002ed0 <HAL_GetTick>
 800773c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800773e:	e00a      	b.n	8007756 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007740:	f7fb fbc6 	bl	8002ed0 <HAL_GetTick>
 8007744:	4602      	mov	r2, r0
 8007746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007748:	1ad3      	subs	r3, r2, r3
 800774a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800774e:	4293      	cmp	r3, r2
 8007750:	d901      	bls.n	8007756 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8007752:	2303      	movs	r3, #3
 8007754:	e14e      	b.n	80079f4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007756:	4b59      	ldr	r3, [pc, #356]	@ (80078bc <HAL_RCC_OscConfig+0x76c>)
 8007758:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800775a:	f003 0302 	and.w	r3, r3, #2
 800775e:	2b00      	cmp	r3, #0
 8007760:	d0ee      	beq.n	8007740 <HAL_RCC_OscConfig+0x5f0>
 8007762:	e014      	b.n	800778e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007764:	f7fb fbb4 	bl	8002ed0 <HAL_GetTick>
 8007768:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800776a:	e00a      	b.n	8007782 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800776c:	f7fb fbb0 	bl	8002ed0 <HAL_GetTick>
 8007770:	4602      	mov	r2, r0
 8007772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007774:	1ad3      	subs	r3, r2, r3
 8007776:	f241 3288 	movw	r2, #5000	@ 0x1388
 800777a:	4293      	cmp	r3, r2
 800777c:	d901      	bls.n	8007782 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800777e:	2303      	movs	r3, #3
 8007780:	e138      	b.n	80079f4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007782:	4b4e      	ldr	r3, [pc, #312]	@ (80078bc <HAL_RCC_OscConfig+0x76c>)
 8007784:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007786:	f003 0302 	and.w	r3, r3, #2
 800778a:	2b00      	cmp	r3, #0
 800778c:	d1ee      	bne.n	800776c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007792:	2b00      	cmp	r3, #0
 8007794:	f000 812d 	beq.w	80079f2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007798:	4b48      	ldr	r3, [pc, #288]	@ (80078bc <HAL_RCC_OscConfig+0x76c>)
 800779a:	691b      	ldr	r3, [r3, #16]
 800779c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80077a0:	2b18      	cmp	r3, #24
 80077a2:	f000 80bd 	beq.w	8007920 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077aa:	2b02      	cmp	r3, #2
 80077ac:	f040 809e 	bne.w	80078ec <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80077b0:	4b42      	ldr	r3, [pc, #264]	@ (80078bc <HAL_RCC_OscConfig+0x76c>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4a41      	ldr	r2, [pc, #260]	@ (80078bc <HAL_RCC_OscConfig+0x76c>)
 80077b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80077ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077bc:	f7fb fb88 	bl	8002ed0 <HAL_GetTick>
 80077c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80077c2:	e008      	b.n	80077d6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80077c4:	f7fb fb84 	bl	8002ed0 <HAL_GetTick>
 80077c8:	4602      	mov	r2, r0
 80077ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077cc:	1ad3      	subs	r3, r2, r3
 80077ce:	2b02      	cmp	r3, #2
 80077d0:	d901      	bls.n	80077d6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80077d2:	2303      	movs	r3, #3
 80077d4:	e10e      	b.n	80079f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80077d6:	4b39      	ldr	r3, [pc, #228]	@ (80078bc <HAL_RCC_OscConfig+0x76c>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d1f0      	bne.n	80077c4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80077e2:	4b36      	ldr	r3, [pc, #216]	@ (80078bc <HAL_RCC_OscConfig+0x76c>)
 80077e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80077e6:	4b37      	ldr	r3, [pc, #220]	@ (80078c4 <HAL_RCC_OscConfig+0x774>)
 80077e8:	4013      	ands	r3, r2
 80077ea:	687a      	ldr	r2, [r7, #4]
 80077ec:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80077ee:	687a      	ldr	r2, [r7, #4]
 80077f0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80077f2:	0112      	lsls	r2, r2, #4
 80077f4:	430a      	orrs	r2, r1
 80077f6:	4931      	ldr	r1, [pc, #196]	@ (80078bc <HAL_RCC_OscConfig+0x76c>)
 80077f8:	4313      	orrs	r3, r2
 80077fa:	628b      	str	r3, [r1, #40]	@ 0x28
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007800:	3b01      	subs	r3, #1
 8007802:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800780a:	3b01      	subs	r3, #1
 800780c:	025b      	lsls	r3, r3, #9
 800780e:	b29b      	uxth	r3, r3
 8007810:	431a      	orrs	r2, r3
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007816:	3b01      	subs	r3, #1
 8007818:	041b      	lsls	r3, r3, #16
 800781a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800781e:	431a      	orrs	r2, r3
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007824:	3b01      	subs	r3, #1
 8007826:	061b      	lsls	r3, r3, #24
 8007828:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800782c:	4923      	ldr	r1, [pc, #140]	@ (80078bc <HAL_RCC_OscConfig+0x76c>)
 800782e:	4313      	orrs	r3, r2
 8007830:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007832:	4b22      	ldr	r3, [pc, #136]	@ (80078bc <HAL_RCC_OscConfig+0x76c>)
 8007834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007836:	4a21      	ldr	r2, [pc, #132]	@ (80078bc <HAL_RCC_OscConfig+0x76c>)
 8007838:	f023 0301 	bic.w	r3, r3, #1
 800783c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800783e:	4b1f      	ldr	r3, [pc, #124]	@ (80078bc <HAL_RCC_OscConfig+0x76c>)
 8007840:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007842:	4b21      	ldr	r3, [pc, #132]	@ (80078c8 <HAL_RCC_OscConfig+0x778>)
 8007844:	4013      	ands	r3, r2
 8007846:	687a      	ldr	r2, [r7, #4]
 8007848:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800784a:	00d2      	lsls	r2, r2, #3
 800784c:	491b      	ldr	r1, [pc, #108]	@ (80078bc <HAL_RCC_OscConfig+0x76c>)
 800784e:	4313      	orrs	r3, r2
 8007850:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007852:	4b1a      	ldr	r3, [pc, #104]	@ (80078bc <HAL_RCC_OscConfig+0x76c>)
 8007854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007856:	f023 020c 	bic.w	r2, r3, #12
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800785e:	4917      	ldr	r1, [pc, #92]	@ (80078bc <HAL_RCC_OscConfig+0x76c>)
 8007860:	4313      	orrs	r3, r2
 8007862:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007864:	4b15      	ldr	r3, [pc, #84]	@ (80078bc <HAL_RCC_OscConfig+0x76c>)
 8007866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007868:	f023 0202 	bic.w	r2, r3, #2
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007870:	4912      	ldr	r1, [pc, #72]	@ (80078bc <HAL_RCC_OscConfig+0x76c>)
 8007872:	4313      	orrs	r3, r2
 8007874:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007876:	4b11      	ldr	r3, [pc, #68]	@ (80078bc <HAL_RCC_OscConfig+0x76c>)
 8007878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800787a:	4a10      	ldr	r2, [pc, #64]	@ (80078bc <HAL_RCC_OscConfig+0x76c>)
 800787c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007880:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007882:	4b0e      	ldr	r3, [pc, #56]	@ (80078bc <HAL_RCC_OscConfig+0x76c>)
 8007884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007886:	4a0d      	ldr	r2, [pc, #52]	@ (80078bc <HAL_RCC_OscConfig+0x76c>)
 8007888:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800788c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800788e:	4b0b      	ldr	r3, [pc, #44]	@ (80078bc <HAL_RCC_OscConfig+0x76c>)
 8007890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007892:	4a0a      	ldr	r2, [pc, #40]	@ (80078bc <HAL_RCC_OscConfig+0x76c>)
 8007894:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007898:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800789a:	4b08      	ldr	r3, [pc, #32]	@ (80078bc <HAL_RCC_OscConfig+0x76c>)
 800789c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800789e:	4a07      	ldr	r2, [pc, #28]	@ (80078bc <HAL_RCC_OscConfig+0x76c>)
 80078a0:	f043 0301 	orr.w	r3, r3, #1
 80078a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80078a6:	4b05      	ldr	r3, [pc, #20]	@ (80078bc <HAL_RCC_OscConfig+0x76c>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a04      	ldr	r2, [pc, #16]	@ (80078bc <HAL_RCC_OscConfig+0x76c>)
 80078ac:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80078b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078b2:	f7fb fb0d 	bl	8002ed0 <HAL_GetTick>
 80078b6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80078b8:	e011      	b.n	80078de <HAL_RCC_OscConfig+0x78e>
 80078ba:	bf00      	nop
 80078bc:	58024400 	.word	0x58024400
 80078c0:	58024800 	.word	0x58024800
 80078c4:	fffffc0c 	.word	0xfffffc0c
 80078c8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80078cc:	f7fb fb00 	bl	8002ed0 <HAL_GetTick>
 80078d0:	4602      	mov	r2, r0
 80078d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078d4:	1ad3      	subs	r3, r2, r3
 80078d6:	2b02      	cmp	r3, #2
 80078d8:	d901      	bls.n	80078de <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80078da:	2303      	movs	r3, #3
 80078dc:	e08a      	b.n	80079f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80078de:	4b47      	ldr	r3, [pc, #284]	@ (80079fc <HAL_RCC_OscConfig+0x8ac>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d0f0      	beq.n	80078cc <HAL_RCC_OscConfig+0x77c>
 80078ea:	e082      	b.n	80079f2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078ec:	4b43      	ldr	r3, [pc, #268]	@ (80079fc <HAL_RCC_OscConfig+0x8ac>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a42      	ldr	r2, [pc, #264]	@ (80079fc <HAL_RCC_OscConfig+0x8ac>)
 80078f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80078f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078f8:	f7fb faea 	bl	8002ed0 <HAL_GetTick>
 80078fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80078fe:	e008      	b.n	8007912 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007900:	f7fb fae6 	bl	8002ed0 <HAL_GetTick>
 8007904:	4602      	mov	r2, r0
 8007906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007908:	1ad3      	subs	r3, r2, r3
 800790a:	2b02      	cmp	r3, #2
 800790c:	d901      	bls.n	8007912 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800790e:	2303      	movs	r3, #3
 8007910:	e070      	b.n	80079f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007912:	4b3a      	ldr	r3, [pc, #232]	@ (80079fc <HAL_RCC_OscConfig+0x8ac>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800791a:	2b00      	cmp	r3, #0
 800791c:	d1f0      	bne.n	8007900 <HAL_RCC_OscConfig+0x7b0>
 800791e:	e068      	b.n	80079f2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007920:	4b36      	ldr	r3, [pc, #216]	@ (80079fc <HAL_RCC_OscConfig+0x8ac>)
 8007922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007924:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007926:	4b35      	ldr	r3, [pc, #212]	@ (80079fc <HAL_RCC_OscConfig+0x8ac>)
 8007928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800792a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007930:	2b01      	cmp	r3, #1
 8007932:	d031      	beq.n	8007998 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	f003 0203 	and.w	r2, r3, #3
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800793e:	429a      	cmp	r2, r3
 8007940:	d12a      	bne.n	8007998 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	091b      	lsrs	r3, r3, #4
 8007946:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800794e:	429a      	cmp	r2, r3
 8007950:	d122      	bne.n	8007998 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800795c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800795e:	429a      	cmp	r2, r3
 8007960:	d11a      	bne.n	8007998 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	0a5b      	lsrs	r3, r3, #9
 8007966:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800796e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007970:	429a      	cmp	r2, r3
 8007972:	d111      	bne.n	8007998 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	0c1b      	lsrs	r3, r3, #16
 8007978:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007980:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007982:	429a      	cmp	r2, r3
 8007984:	d108      	bne.n	8007998 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	0e1b      	lsrs	r3, r3, #24
 800798a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007992:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007994:	429a      	cmp	r2, r3
 8007996:	d001      	beq.n	800799c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8007998:	2301      	movs	r3, #1
 800799a:	e02b      	b.n	80079f4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800799c:	4b17      	ldr	r3, [pc, #92]	@ (80079fc <HAL_RCC_OscConfig+0x8ac>)
 800799e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079a0:	08db      	lsrs	r3, r3, #3
 80079a2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80079a6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079ac:	693a      	ldr	r2, [r7, #16]
 80079ae:	429a      	cmp	r2, r3
 80079b0:	d01f      	beq.n	80079f2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80079b2:	4b12      	ldr	r3, [pc, #72]	@ (80079fc <HAL_RCC_OscConfig+0x8ac>)
 80079b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079b6:	4a11      	ldr	r2, [pc, #68]	@ (80079fc <HAL_RCC_OscConfig+0x8ac>)
 80079b8:	f023 0301 	bic.w	r3, r3, #1
 80079bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80079be:	f7fb fa87 	bl	8002ed0 <HAL_GetTick>
 80079c2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80079c4:	bf00      	nop
 80079c6:	f7fb fa83 	bl	8002ed0 <HAL_GetTick>
 80079ca:	4602      	mov	r2, r0
 80079cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d0f9      	beq.n	80079c6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80079d2:	4b0a      	ldr	r3, [pc, #40]	@ (80079fc <HAL_RCC_OscConfig+0x8ac>)
 80079d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80079d6:	4b0a      	ldr	r3, [pc, #40]	@ (8007a00 <HAL_RCC_OscConfig+0x8b0>)
 80079d8:	4013      	ands	r3, r2
 80079da:	687a      	ldr	r2, [r7, #4]
 80079dc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80079de:	00d2      	lsls	r2, r2, #3
 80079e0:	4906      	ldr	r1, [pc, #24]	@ (80079fc <HAL_RCC_OscConfig+0x8ac>)
 80079e2:	4313      	orrs	r3, r2
 80079e4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80079e6:	4b05      	ldr	r3, [pc, #20]	@ (80079fc <HAL_RCC_OscConfig+0x8ac>)
 80079e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079ea:	4a04      	ldr	r2, [pc, #16]	@ (80079fc <HAL_RCC_OscConfig+0x8ac>)
 80079ec:	f043 0301 	orr.w	r3, r3, #1
 80079f0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80079f2:	2300      	movs	r3, #0
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3730      	adds	r7, #48	@ 0x30
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}
 80079fc:	58024400 	.word	0x58024400
 8007a00:	ffff0007 	.word	0xffff0007

08007a04 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b086      	sub	sp, #24
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d101      	bne.n	8007a18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007a14:	2301      	movs	r3, #1
 8007a16:	e19c      	b.n	8007d52 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007a18:	4b8a      	ldr	r3, [pc, #552]	@ (8007c44 <HAL_RCC_ClockConfig+0x240>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f003 030f 	and.w	r3, r3, #15
 8007a20:	683a      	ldr	r2, [r7, #0]
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d910      	bls.n	8007a48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a26:	4b87      	ldr	r3, [pc, #540]	@ (8007c44 <HAL_RCC_ClockConfig+0x240>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f023 020f 	bic.w	r2, r3, #15
 8007a2e:	4985      	ldr	r1, [pc, #532]	@ (8007c44 <HAL_RCC_ClockConfig+0x240>)
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	4313      	orrs	r3, r2
 8007a34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a36:	4b83      	ldr	r3, [pc, #524]	@ (8007c44 <HAL_RCC_ClockConfig+0x240>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f003 030f 	and.w	r3, r3, #15
 8007a3e:	683a      	ldr	r2, [r7, #0]
 8007a40:	429a      	cmp	r2, r3
 8007a42:	d001      	beq.n	8007a48 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007a44:	2301      	movs	r3, #1
 8007a46:	e184      	b.n	8007d52 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f003 0304 	and.w	r3, r3, #4
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d010      	beq.n	8007a76 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	691a      	ldr	r2, [r3, #16]
 8007a58:	4b7b      	ldr	r3, [pc, #492]	@ (8007c48 <HAL_RCC_ClockConfig+0x244>)
 8007a5a:	699b      	ldr	r3, [r3, #24]
 8007a5c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007a60:	429a      	cmp	r2, r3
 8007a62:	d908      	bls.n	8007a76 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007a64:	4b78      	ldr	r3, [pc, #480]	@ (8007c48 <HAL_RCC_ClockConfig+0x244>)
 8007a66:	699b      	ldr	r3, [r3, #24]
 8007a68:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	691b      	ldr	r3, [r3, #16]
 8007a70:	4975      	ldr	r1, [pc, #468]	@ (8007c48 <HAL_RCC_ClockConfig+0x244>)
 8007a72:	4313      	orrs	r3, r2
 8007a74:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f003 0308 	and.w	r3, r3, #8
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d010      	beq.n	8007aa4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	695a      	ldr	r2, [r3, #20]
 8007a86:	4b70      	ldr	r3, [pc, #448]	@ (8007c48 <HAL_RCC_ClockConfig+0x244>)
 8007a88:	69db      	ldr	r3, [r3, #28]
 8007a8a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007a8e:	429a      	cmp	r2, r3
 8007a90:	d908      	bls.n	8007aa4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007a92:	4b6d      	ldr	r3, [pc, #436]	@ (8007c48 <HAL_RCC_ClockConfig+0x244>)
 8007a94:	69db      	ldr	r3, [r3, #28]
 8007a96:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	695b      	ldr	r3, [r3, #20]
 8007a9e:	496a      	ldr	r1, [pc, #424]	@ (8007c48 <HAL_RCC_ClockConfig+0x244>)
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f003 0310 	and.w	r3, r3, #16
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d010      	beq.n	8007ad2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	699a      	ldr	r2, [r3, #24]
 8007ab4:	4b64      	ldr	r3, [pc, #400]	@ (8007c48 <HAL_RCC_ClockConfig+0x244>)
 8007ab6:	69db      	ldr	r3, [r3, #28]
 8007ab8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007abc:	429a      	cmp	r2, r3
 8007abe:	d908      	bls.n	8007ad2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007ac0:	4b61      	ldr	r3, [pc, #388]	@ (8007c48 <HAL_RCC_ClockConfig+0x244>)
 8007ac2:	69db      	ldr	r3, [r3, #28]
 8007ac4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	699b      	ldr	r3, [r3, #24]
 8007acc:	495e      	ldr	r1, [pc, #376]	@ (8007c48 <HAL_RCC_ClockConfig+0x244>)
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f003 0320 	and.w	r3, r3, #32
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d010      	beq.n	8007b00 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	69da      	ldr	r2, [r3, #28]
 8007ae2:	4b59      	ldr	r3, [pc, #356]	@ (8007c48 <HAL_RCC_ClockConfig+0x244>)
 8007ae4:	6a1b      	ldr	r3, [r3, #32]
 8007ae6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007aea:	429a      	cmp	r2, r3
 8007aec:	d908      	bls.n	8007b00 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007aee:	4b56      	ldr	r3, [pc, #344]	@ (8007c48 <HAL_RCC_ClockConfig+0x244>)
 8007af0:	6a1b      	ldr	r3, [r3, #32]
 8007af2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	69db      	ldr	r3, [r3, #28]
 8007afa:	4953      	ldr	r1, [pc, #332]	@ (8007c48 <HAL_RCC_ClockConfig+0x244>)
 8007afc:	4313      	orrs	r3, r2
 8007afe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f003 0302 	and.w	r3, r3, #2
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d010      	beq.n	8007b2e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	68da      	ldr	r2, [r3, #12]
 8007b10:	4b4d      	ldr	r3, [pc, #308]	@ (8007c48 <HAL_RCC_ClockConfig+0x244>)
 8007b12:	699b      	ldr	r3, [r3, #24]
 8007b14:	f003 030f 	and.w	r3, r3, #15
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	d908      	bls.n	8007b2e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b1c:	4b4a      	ldr	r3, [pc, #296]	@ (8007c48 <HAL_RCC_ClockConfig+0x244>)
 8007b1e:	699b      	ldr	r3, [r3, #24]
 8007b20:	f023 020f 	bic.w	r2, r3, #15
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	68db      	ldr	r3, [r3, #12]
 8007b28:	4947      	ldr	r1, [pc, #284]	@ (8007c48 <HAL_RCC_ClockConfig+0x244>)
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f003 0301 	and.w	r3, r3, #1
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d055      	beq.n	8007be6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007b3a:	4b43      	ldr	r3, [pc, #268]	@ (8007c48 <HAL_RCC_ClockConfig+0x244>)
 8007b3c:	699b      	ldr	r3, [r3, #24]
 8007b3e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	689b      	ldr	r3, [r3, #8]
 8007b46:	4940      	ldr	r1, [pc, #256]	@ (8007c48 <HAL_RCC_ClockConfig+0x244>)
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	685b      	ldr	r3, [r3, #4]
 8007b50:	2b02      	cmp	r3, #2
 8007b52:	d107      	bne.n	8007b64 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007b54:	4b3c      	ldr	r3, [pc, #240]	@ (8007c48 <HAL_RCC_ClockConfig+0x244>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d121      	bne.n	8007ba4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007b60:	2301      	movs	r3, #1
 8007b62:	e0f6      	b.n	8007d52 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	2b03      	cmp	r3, #3
 8007b6a:	d107      	bne.n	8007b7c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007b6c:	4b36      	ldr	r3, [pc, #216]	@ (8007c48 <HAL_RCC_ClockConfig+0x244>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d115      	bne.n	8007ba4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	e0ea      	b.n	8007d52 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d107      	bne.n	8007b94 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007b84:	4b30      	ldr	r3, [pc, #192]	@ (8007c48 <HAL_RCC_ClockConfig+0x244>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d109      	bne.n	8007ba4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007b90:	2301      	movs	r3, #1
 8007b92:	e0de      	b.n	8007d52 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007b94:	4b2c      	ldr	r3, [pc, #176]	@ (8007c48 <HAL_RCC_ClockConfig+0x244>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f003 0304 	and.w	r3, r3, #4
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d101      	bne.n	8007ba4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	e0d6      	b.n	8007d52 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007ba4:	4b28      	ldr	r3, [pc, #160]	@ (8007c48 <HAL_RCC_ClockConfig+0x244>)
 8007ba6:	691b      	ldr	r3, [r3, #16]
 8007ba8:	f023 0207 	bic.w	r2, r3, #7
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	4925      	ldr	r1, [pc, #148]	@ (8007c48 <HAL_RCC_ClockConfig+0x244>)
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007bb6:	f7fb f98b 	bl	8002ed0 <HAL_GetTick>
 8007bba:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007bbc:	e00a      	b.n	8007bd4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007bbe:	f7fb f987 	bl	8002ed0 <HAL_GetTick>
 8007bc2:	4602      	mov	r2, r0
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	1ad3      	subs	r3, r2, r3
 8007bc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d901      	bls.n	8007bd4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007bd0:	2303      	movs	r3, #3
 8007bd2:	e0be      	b.n	8007d52 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007bd4:	4b1c      	ldr	r3, [pc, #112]	@ (8007c48 <HAL_RCC_ClockConfig+0x244>)
 8007bd6:	691b      	ldr	r3, [r3, #16]
 8007bd8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	00db      	lsls	r3, r3, #3
 8007be2:	429a      	cmp	r2, r3
 8007be4:	d1eb      	bne.n	8007bbe <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f003 0302 	and.w	r3, r3, #2
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d010      	beq.n	8007c14 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	68da      	ldr	r2, [r3, #12]
 8007bf6:	4b14      	ldr	r3, [pc, #80]	@ (8007c48 <HAL_RCC_ClockConfig+0x244>)
 8007bf8:	699b      	ldr	r3, [r3, #24]
 8007bfa:	f003 030f 	and.w	r3, r3, #15
 8007bfe:	429a      	cmp	r2, r3
 8007c00:	d208      	bcs.n	8007c14 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007c02:	4b11      	ldr	r3, [pc, #68]	@ (8007c48 <HAL_RCC_ClockConfig+0x244>)
 8007c04:	699b      	ldr	r3, [r3, #24]
 8007c06:	f023 020f 	bic.w	r2, r3, #15
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	68db      	ldr	r3, [r3, #12]
 8007c0e:	490e      	ldr	r1, [pc, #56]	@ (8007c48 <HAL_RCC_ClockConfig+0x244>)
 8007c10:	4313      	orrs	r3, r2
 8007c12:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007c14:	4b0b      	ldr	r3, [pc, #44]	@ (8007c44 <HAL_RCC_ClockConfig+0x240>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f003 030f 	and.w	r3, r3, #15
 8007c1c:	683a      	ldr	r2, [r7, #0]
 8007c1e:	429a      	cmp	r2, r3
 8007c20:	d214      	bcs.n	8007c4c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c22:	4b08      	ldr	r3, [pc, #32]	@ (8007c44 <HAL_RCC_ClockConfig+0x240>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f023 020f 	bic.w	r2, r3, #15
 8007c2a:	4906      	ldr	r1, [pc, #24]	@ (8007c44 <HAL_RCC_ClockConfig+0x240>)
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c32:	4b04      	ldr	r3, [pc, #16]	@ (8007c44 <HAL_RCC_ClockConfig+0x240>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f003 030f 	and.w	r3, r3, #15
 8007c3a:	683a      	ldr	r2, [r7, #0]
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	d005      	beq.n	8007c4c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007c40:	2301      	movs	r3, #1
 8007c42:	e086      	b.n	8007d52 <HAL_RCC_ClockConfig+0x34e>
 8007c44:	52002000 	.word	0x52002000
 8007c48:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f003 0304 	and.w	r3, r3, #4
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d010      	beq.n	8007c7a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	691a      	ldr	r2, [r3, #16]
 8007c5c:	4b3f      	ldr	r3, [pc, #252]	@ (8007d5c <HAL_RCC_ClockConfig+0x358>)
 8007c5e:	699b      	ldr	r3, [r3, #24]
 8007c60:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d208      	bcs.n	8007c7a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007c68:	4b3c      	ldr	r3, [pc, #240]	@ (8007d5c <HAL_RCC_ClockConfig+0x358>)
 8007c6a:	699b      	ldr	r3, [r3, #24]
 8007c6c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	691b      	ldr	r3, [r3, #16]
 8007c74:	4939      	ldr	r1, [pc, #228]	@ (8007d5c <HAL_RCC_ClockConfig+0x358>)
 8007c76:	4313      	orrs	r3, r2
 8007c78:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f003 0308 	and.w	r3, r3, #8
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d010      	beq.n	8007ca8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	695a      	ldr	r2, [r3, #20]
 8007c8a:	4b34      	ldr	r3, [pc, #208]	@ (8007d5c <HAL_RCC_ClockConfig+0x358>)
 8007c8c:	69db      	ldr	r3, [r3, #28]
 8007c8e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007c92:	429a      	cmp	r2, r3
 8007c94:	d208      	bcs.n	8007ca8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007c96:	4b31      	ldr	r3, [pc, #196]	@ (8007d5c <HAL_RCC_ClockConfig+0x358>)
 8007c98:	69db      	ldr	r3, [r3, #28]
 8007c9a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	695b      	ldr	r3, [r3, #20]
 8007ca2:	492e      	ldr	r1, [pc, #184]	@ (8007d5c <HAL_RCC_ClockConfig+0x358>)
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f003 0310 	and.w	r3, r3, #16
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d010      	beq.n	8007cd6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	699a      	ldr	r2, [r3, #24]
 8007cb8:	4b28      	ldr	r3, [pc, #160]	@ (8007d5c <HAL_RCC_ClockConfig+0x358>)
 8007cba:	69db      	ldr	r3, [r3, #28]
 8007cbc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007cc0:	429a      	cmp	r2, r3
 8007cc2:	d208      	bcs.n	8007cd6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007cc4:	4b25      	ldr	r3, [pc, #148]	@ (8007d5c <HAL_RCC_ClockConfig+0x358>)
 8007cc6:	69db      	ldr	r3, [r3, #28]
 8007cc8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	699b      	ldr	r3, [r3, #24]
 8007cd0:	4922      	ldr	r1, [pc, #136]	@ (8007d5c <HAL_RCC_ClockConfig+0x358>)
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f003 0320 	and.w	r3, r3, #32
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d010      	beq.n	8007d04 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	69da      	ldr	r2, [r3, #28]
 8007ce6:	4b1d      	ldr	r3, [pc, #116]	@ (8007d5c <HAL_RCC_ClockConfig+0x358>)
 8007ce8:	6a1b      	ldr	r3, [r3, #32]
 8007cea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007cee:	429a      	cmp	r2, r3
 8007cf0:	d208      	bcs.n	8007d04 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007cf2:	4b1a      	ldr	r3, [pc, #104]	@ (8007d5c <HAL_RCC_ClockConfig+0x358>)
 8007cf4:	6a1b      	ldr	r3, [r3, #32]
 8007cf6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	69db      	ldr	r3, [r3, #28]
 8007cfe:	4917      	ldr	r1, [pc, #92]	@ (8007d5c <HAL_RCC_ClockConfig+0x358>)
 8007d00:	4313      	orrs	r3, r2
 8007d02:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007d04:	f000 f834 	bl	8007d70 <HAL_RCC_GetSysClockFreq>
 8007d08:	4602      	mov	r2, r0
 8007d0a:	4b14      	ldr	r3, [pc, #80]	@ (8007d5c <HAL_RCC_ClockConfig+0x358>)
 8007d0c:	699b      	ldr	r3, [r3, #24]
 8007d0e:	0a1b      	lsrs	r3, r3, #8
 8007d10:	f003 030f 	and.w	r3, r3, #15
 8007d14:	4912      	ldr	r1, [pc, #72]	@ (8007d60 <HAL_RCC_ClockConfig+0x35c>)
 8007d16:	5ccb      	ldrb	r3, [r1, r3]
 8007d18:	f003 031f 	and.w	r3, r3, #31
 8007d1c:	fa22 f303 	lsr.w	r3, r2, r3
 8007d20:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007d22:	4b0e      	ldr	r3, [pc, #56]	@ (8007d5c <HAL_RCC_ClockConfig+0x358>)
 8007d24:	699b      	ldr	r3, [r3, #24]
 8007d26:	f003 030f 	and.w	r3, r3, #15
 8007d2a:	4a0d      	ldr	r2, [pc, #52]	@ (8007d60 <HAL_RCC_ClockConfig+0x35c>)
 8007d2c:	5cd3      	ldrb	r3, [r2, r3]
 8007d2e:	f003 031f 	and.w	r3, r3, #31
 8007d32:	693a      	ldr	r2, [r7, #16]
 8007d34:	fa22 f303 	lsr.w	r3, r2, r3
 8007d38:	4a0a      	ldr	r2, [pc, #40]	@ (8007d64 <HAL_RCC_ClockConfig+0x360>)
 8007d3a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007d3c:	4a0a      	ldr	r2, [pc, #40]	@ (8007d68 <HAL_RCC_ClockConfig+0x364>)
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007d42:	4b0a      	ldr	r3, [pc, #40]	@ (8007d6c <HAL_RCC_ClockConfig+0x368>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4618      	mov	r0, r3
 8007d48:	f7fb f878 	bl	8002e3c <HAL_InitTick>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	3718      	adds	r7, #24
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}
 8007d5a:	bf00      	nop
 8007d5c:	58024400 	.word	0x58024400
 8007d60:	0800ce1c 	.word	0x0800ce1c
 8007d64:	24000004 	.word	0x24000004
 8007d68:	24000000 	.word	0x24000000
 8007d6c:	24000018 	.word	0x24000018

08007d70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b089      	sub	sp, #36	@ 0x24
 8007d74:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007d76:	4bb3      	ldr	r3, [pc, #716]	@ (8008044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d78:	691b      	ldr	r3, [r3, #16]
 8007d7a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007d7e:	2b18      	cmp	r3, #24
 8007d80:	f200 8155 	bhi.w	800802e <HAL_RCC_GetSysClockFreq+0x2be>
 8007d84:	a201      	add	r2, pc, #4	@ (adr r2, 8007d8c <HAL_RCC_GetSysClockFreq+0x1c>)
 8007d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d8a:	bf00      	nop
 8007d8c:	08007df1 	.word	0x08007df1
 8007d90:	0800802f 	.word	0x0800802f
 8007d94:	0800802f 	.word	0x0800802f
 8007d98:	0800802f 	.word	0x0800802f
 8007d9c:	0800802f 	.word	0x0800802f
 8007da0:	0800802f 	.word	0x0800802f
 8007da4:	0800802f 	.word	0x0800802f
 8007da8:	0800802f 	.word	0x0800802f
 8007dac:	08007e17 	.word	0x08007e17
 8007db0:	0800802f 	.word	0x0800802f
 8007db4:	0800802f 	.word	0x0800802f
 8007db8:	0800802f 	.word	0x0800802f
 8007dbc:	0800802f 	.word	0x0800802f
 8007dc0:	0800802f 	.word	0x0800802f
 8007dc4:	0800802f 	.word	0x0800802f
 8007dc8:	0800802f 	.word	0x0800802f
 8007dcc:	08007e1d 	.word	0x08007e1d
 8007dd0:	0800802f 	.word	0x0800802f
 8007dd4:	0800802f 	.word	0x0800802f
 8007dd8:	0800802f 	.word	0x0800802f
 8007ddc:	0800802f 	.word	0x0800802f
 8007de0:	0800802f 	.word	0x0800802f
 8007de4:	0800802f 	.word	0x0800802f
 8007de8:	0800802f 	.word	0x0800802f
 8007dec:	08007e23 	.word	0x08007e23
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007df0:	4b94      	ldr	r3, [pc, #592]	@ (8008044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f003 0320 	and.w	r3, r3, #32
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d009      	beq.n	8007e10 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007dfc:	4b91      	ldr	r3, [pc, #580]	@ (8008044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	08db      	lsrs	r3, r3, #3
 8007e02:	f003 0303 	and.w	r3, r3, #3
 8007e06:	4a90      	ldr	r2, [pc, #576]	@ (8008048 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007e08:	fa22 f303 	lsr.w	r3, r2, r3
 8007e0c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007e0e:	e111      	b.n	8008034 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007e10:	4b8d      	ldr	r3, [pc, #564]	@ (8008048 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007e12:	61bb      	str	r3, [r7, #24]
      break;
 8007e14:	e10e      	b.n	8008034 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007e16:	4b8d      	ldr	r3, [pc, #564]	@ (800804c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007e18:	61bb      	str	r3, [r7, #24]
      break;
 8007e1a:	e10b      	b.n	8008034 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007e1c:	4b8c      	ldr	r3, [pc, #560]	@ (8008050 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007e1e:	61bb      	str	r3, [r7, #24]
      break;
 8007e20:	e108      	b.n	8008034 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007e22:	4b88      	ldr	r3, [pc, #544]	@ (8008044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e26:	f003 0303 	and.w	r3, r3, #3
 8007e2a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007e2c:	4b85      	ldr	r3, [pc, #532]	@ (8008044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e30:	091b      	lsrs	r3, r3, #4
 8007e32:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007e36:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007e38:	4b82      	ldr	r3, [pc, #520]	@ (8008044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e3c:	f003 0301 	and.w	r3, r3, #1
 8007e40:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007e42:	4b80      	ldr	r3, [pc, #512]	@ (8008044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e46:	08db      	lsrs	r3, r3, #3
 8007e48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007e4c:	68fa      	ldr	r2, [r7, #12]
 8007e4e:	fb02 f303 	mul.w	r3, r2, r3
 8007e52:	ee07 3a90 	vmov	s15, r3
 8007e56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e5a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	f000 80e1 	beq.w	8008028 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	2b02      	cmp	r3, #2
 8007e6a:	f000 8083 	beq.w	8007f74 <HAL_RCC_GetSysClockFreq+0x204>
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	2b02      	cmp	r3, #2
 8007e72:	f200 80a1 	bhi.w	8007fb8 <HAL_RCC_GetSysClockFreq+0x248>
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d003      	beq.n	8007e84 <HAL_RCC_GetSysClockFreq+0x114>
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	2b01      	cmp	r3, #1
 8007e80:	d056      	beq.n	8007f30 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007e82:	e099      	b.n	8007fb8 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e84:	4b6f      	ldr	r3, [pc, #444]	@ (8008044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f003 0320 	and.w	r3, r3, #32
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d02d      	beq.n	8007eec <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007e90:	4b6c      	ldr	r3, [pc, #432]	@ (8008044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	08db      	lsrs	r3, r3, #3
 8007e96:	f003 0303 	and.w	r3, r3, #3
 8007e9a:	4a6b      	ldr	r2, [pc, #428]	@ (8008048 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007e9c:	fa22 f303 	lsr.w	r3, r2, r3
 8007ea0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	ee07 3a90 	vmov	s15, r3
 8007ea8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	ee07 3a90 	vmov	s15, r3
 8007eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007eb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007eba:	4b62      	ldr	r3, [pc, #392]	@ (8008044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ebe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ec2:	ee07 3a90 	vmov	s15, r3
 8007ec6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007eca:	ed97 6a02 	vldr	s12, [r7, #8]
 8007ece:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8008054 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007ed2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ed6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007eda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ede:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ee6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007eea:	e087      	b.n	8007ffc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	ee07 3a90 	vmov	s15, r3
 8007ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ef6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8008058 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007efa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007efe:	4b51      	ldr	r3, [pc, #324]	@ (8008044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f06:	ee07 3a90 	vmov	s15, r3
 8007f0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007f12:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8008054 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007f16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f2a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007f2e:	e065      	b.n	8007ffc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	ee07 3a90 	vmov	s15, r3
 8007f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f3a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800805c <HAL_RCC_GetSysClockFreq+0x2ec>
 8007f3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f42:	4b40      	ldr	r3, [pc, #256]	@ (8008044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f4a:	ee07 3a90 	vmov	s15, r3
 8007f4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f52:	ed97 6a02 	vldr	s12, [r7, #8]
 8007f56:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8008054 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007f5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f6e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007f72:	e043      	b.n	8007ffc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	ee07 3a90 	vmov	s15, r3
 8007f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f7e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8008060 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007f82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f86:	4b2f      	ldr	r3, [pc, #188]	@ (8008044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f8e:	ee07 3a90 	vmov	s15, r3
 8007f92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f96:	ed97 6a02 	vldr	s12, [r7, #8]
 8007f9a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8008054 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007f9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fa6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007faa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fb2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007fb6:	e021      	b.n	8007ffc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	ee07 3a90 	vmov	s15, r3
 8007fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fc2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800805c <HAL_RCC_GetSysClockFreq+0x2ec>
 8007fc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fca:	4b1e      	ldr	r3, [pc, #120]	@ (8008044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fd2:	ee07 3a90 	vmov	s15, r3
 8007fd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fda:	ed97 6a02 	vldr	s12, [r7, #8]
 8007fde:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8008054 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007fe2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fe6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007fee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ff2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ff6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007ffa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007ffc:	4b11      	ldr	r3, [pc, #68]	@ (8008044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008000:	0a5b      	lsrs	r3, r3, #9
 8008002:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008006:	3301      	adds	r3, #1
 8008008:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	ee07 3a90 	vmov	s15, r3
 8008010:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008014:	edd7 6a07 	vldr	s13, [r7, #28]
 8008018:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800801c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008020:	ee17 3a90 	vmov	r3, s15
 8008024:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008026:	e005      	b.n	8008034 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008028:	2300      	movs	r3, #0
 800802a:	61bb      	str	r3, [r7, #24]
      break;
 800802c:	e002      	b.n	8008034 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800802e:	4b07      	ldr	r3, [pc, #28]	@ (800804c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008030:	61bb      	str	r3, [r7, #24]
      break;
 8008032:	bf00      	nop
  }

  return sysclockfreq;
 8008034:	69bb      	ldr	r3, [r7, #24]
}
 8008036:	4618      	mov	r0, r3
 8008038:	3724      	adds	r7, #36	@ 0x24
 800803a:	46bd      	mov	sp, r7
 800803c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008040:	4770      	bx	lr
 8008042:	bf00      	nop
 8008044:	58024400 	.word	0x58024400
 8008048:	03d09000 	.word	0x03d09000
 800804c:	003d0900 	.word	0x003d0900
 8008050:	017d7840 	.word	0x017d7840
 8008054:	46000000 	.word	0x46000000
 8008058:	4c742400 	.word	0x4c742400
 800805c:	4a742400 	.word	0x4a742400
 8008060:	4bbebc20 	.word	0x4bbebc20

08008064 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b082      	sub	sp, #8
 8008068:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800806a:	f7ff fe81 	bl	8007d70 <HAL_RCC_GetSysClockFreq>
 800806e:	4602      	mov	r2, r0
 8008070:	4b10      	ldr	r3, [pc, #64]	@ (80080b4 <HAL_RCC_GetHCLKFreq+0x50>)
 8008072:	699b      	ldr	r3, [r3, #24]
 8008074:	0a1b      	lsrs	r3, r3, #8
 8008076:	f003 030f 	and.w	r3, r3, #15
 800807a:	490f      	ldr	r1, [pc, #60]	@ (80080b8 <HAL_RCC_GetHCLKFreq+0x54>)
 800807c:	5ccb      	ldrb	r3, [r1, r3]
 800807e:	f003 031f 	and.w	r3, r3, #31
 8008082:	fa22 f303 	lsr.w	r3, r2, r3
 8008086:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008088:	4b0a      	ldr	r3, [pc, #40]	@ (80080b4 <HAL_RCC_GetHCLKFreq+0x50>)
 800808a:	699b      	ldr	r3, [r3, #24]
 800808c:	f003 030f 	and.w	r3, r3, #15
 8008090:	4a09      	ldr	r2, [pc, #36]	@ (80080b8 <HAL_RCC_GetHCLKFreq+0x54>)
 8008092:	5cd3      	ldrb	r3, [r2, r3]
 8008094:	f003 031f 	and.w	r3, r3, #31
 8008098:	687a      	ldr	r2, [r7, #4]
 800809a:	fa22 f303 	lsr.w	r3, r2, r3
 800809e:	4a07      	ldr	r2, [pc, #28]	@ (80080bc <HAL_RCC_GetHCLKFreq+0x58>)
 80080a0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80080a2:	4a07      	ldr	r2, [pc, #28]	@ (80080c0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80080a8:	4b04      	ldr	r3, [pc, #16]	@ (80080bc <HAL_RCC_GetHCLKFreq+0x58>)
 80080aa:	681b      	ldr	r3, [r3, #0]
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3708      	adds	r7, #8
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}
 80080b4:	58024400 	.word	0x58024400
 80080b8:	0800ce1c 	.word	0x0800ce1c
 80080bc:	24000004 	.word	0x24000004
 80080c0:	24000000 	.word	0x24000000

080080c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80080c8:	f7ff ffcc 	bl	8008064 <HAL_RCC_GetHCLKFreq>
 80080cc:	4602      	mov	r2, r0
 80080ce:	4b06      	ldr	r3, [pc, #24]	@ (80080e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80080d0:	69db      	ldr	r3, [r3, #28]
 80080d2:	091b      	lsrs	r3, r3, #4
 80080d4:	f003 0307 	and.w	r3, r3, #7
 80080d8:	4904      	ldr	r1, [pc, #16]	@ (80080ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80080da:	5ccb      	ldrb	r3, [r1, r3]
 80080dc:	f003 031f 	and.w	r3, r3, #31
 80080e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	bd80      	pop	{r7, pc}
 80080e8:	58024400 	.word	0x58024400
 80080ec:	0800ce1c 	.word	0x0800ce1c

080080f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80080f4:	f7ff ffb6 	bl	8008064 <HAL_RCC_GetHCLKFreq>
 80080f8:	4602      	mov	r2, r0
 80080fa:	4b06      	ldr	r3, [pc, #24]	@ (8008114 <HAL_RCC_GetPCLK2Freq+0x24>)
 80080fc:	69db      	ldr	r3, [r3, #28]
 80080fe:	0a1b      	lsrs	r3, r3, #8
 8008100:	f003 0307 	and.w	r3, r3, #7
 8008104:	4904      	ldr	r1, [pc, #16]	@ (8008118 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008106:	5ccb      	ldrb	r3, [r1, r3]
 8008108:	f003 031f 	and.w	r3, r3, #31
 800810c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008110:	4618      	mov	r0, r3
 8008112:	bd80      	pop	{r7, pc}
 8008114:	58024400 	.word	0x58024400
 8008118:	0800ce1c 	.word	0x0800ce1c

0800811c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800811c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008120:	b0ca      	sub	sp, #296	@ 0x128
 8008122:	af00      	add	r7, sp, #0
 8008124:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008128:	2300      	movs	r3, #0
 800812a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800812e:	2300      	movs	r3, #0
 8008130:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008134:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800813c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8008140:	2500      	movs	r5, #0
 8008142:	ea54 0305 	orrs.w	r3, r4, r5
 8008146:	d049      	beq.n	80081dc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008148:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800814c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800814e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008152:	d02f      	beq.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008154:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008158:	d828      	bhi.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x90>
 800815a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800815e:	d01a      	beq.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008160:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008164:	d822      	bhi.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008166:	2b00      	cmp	r3, #0
 8008168:	d003      	beq.n	8008172 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800816a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800816e:	d007      	beq.n	8008180 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008170:	e01c      	b.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008172:	4bb8      	ldr	r3, [pc, #736]	@ (8008454 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008176:	4ab7      	ldr	r2, [pc, #732]	@ (8008454 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008178:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800817c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800817e:	e01a      	b.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008180:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008184:	3308      	adds	r3, #8
 8008186:	2102      	movs	r1, #2
 8008188:	4618      	mov	r0, r3
 800818a:	f002 fb61 	bl	800a850 <RCCEx_PLL2_Config>
 800818e:	4603      	mov	r3, r0
 8008190:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008194:	e00f      	b.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008196:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800819a:	3328      	adds	r3, #40	@ 0x28
 800819c:	2102      	movs	r1, #2
 800819e:	4618      	mov	r0, r3
 80081a0:	f002 fc08 	bl	800a9b4 <RCCEx_PLL3_Config>
 80081a4:	4603      	mov	r3, r0
 80081a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80081aa:	e004      	b.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80081ac:	2301      	movs	r3, #1
 80081ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80081b2:	e000      	b.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80081b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d10a      	bne.n	80081d4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80081be:	4ba5      	ldr	r3, [pc, #660]	@ (8008454 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80081c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081c2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80081c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80081cc:	4aa1      	ldr	r2, [pc, #644]	@ (8008454 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80081ce:	430b      	orrs	r3, r1
 80081d0:	6513      	str	r3, [r2, #80]	@ 0x50
 80081d2:	e003      	b.n	80081dc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80081dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081e4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80081e8:	f04f 0900 	mov.w	r9, #0
 80081ec:	ea58 0309 	orrs.w	r3, r8, r9
 80081f0:	d047      	beq.n	8008282 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80081f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081f8:	2b04      	cmp	r3, #4
 80081fa:	d82a      	bhi.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80081fc:	a201      	add	r2, pc, #4	@ (adr r2, 8008204 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80081fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008202:	bf00      	nop
 8008204:	08008219 	.word	0x08008219
 8008208:	08008227 	.word	0x08008227
 800820c:	0800823d 	.word	0x0800823d
 8008210:	0800825b 	.word	0x0800825b
 8008214:	0800825b 	.word	0x0800825b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008218:	4b8e      	ldr	r3, [pc, #568]	@ (8008454 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800821a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800821c:	4a8d      	ldr	r2, [pc, #564]	@ (8008454 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800821e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008222:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008224:	e01a      	b.n	800825c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008226:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800822a:	3308      	adds	r3, #8
 800822c:	2100      	movs	r1, #0
 800822e:	4618      	mov	r0, r3
 8008230:	f002 fb0e 	bl	800a850 <RCCEx_PLL2_Config>
 8008234:	4603      	mov	r3, r0
 8008236:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800823a:	e00f      	b.n	800825c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800823c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008240:	3328      	adds	r3, #40	@ 0x28
 8008242:	2100      	movs	r1, #0
 8008244:	4618      	mov	r0, r3
 8008246:	f002 fbb5 	bl	800a9b4 <RCCEx_PLL3_Config>
 800824a:	4603      	mov	r3, r0
 800824c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008250:	e004      	b.n	800825c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008252:	2301      	movs	r3, #1
 8008254:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008258:	e000      	b.n	800825c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800825a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800825c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008260:	2b00      	cmp	r3, #0
 8008262:	d10a      	bne.n	800827a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008264:	4b7b      	ldr	r3, [pc, #492]	@ (8008454 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008266:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008268:	f023 0107 	bic.w	r1, r3, #7
 800826c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008270:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008272:	4a78      	ldr	r2, [pc, #480]	@ (8008454 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008274:	430b      	orrs	r3, r1
 8008276:	6513      	str	r3, [r2, #80]	@ 0x50
 8008278:	e003      	b.n	8008282 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800827a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800827e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008282:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800828a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800828e:	f04f 0b00 	mov.w	fp, #0
 8008292:	ea5a 030b 	orrs.w	r3, sl, fp
 8008296:	d04c      	beq.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8008298:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800829c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800829e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082a2:	d030      	beq.n	8008306 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80082a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082a8:	d829      	bhi.n	80082fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80082aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80082ac:	d02d      	beq.n	800830a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80082ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80082b0:	d825      	bhi.n	80082fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80082b2:	2b80      	cmp	r3, #128	@ 0x80
 80082b4:	d018      	beq.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80082b6:	2b80      	cmp	r3, #128	@ 0x80
 80082b8:	d821      	bhi.n	80082fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d002      	beq.n	80082c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80082be:	2b40      	cmp	r3, #64	@ 0x40
 80082c0:	d007      	beq.n	80082d2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80082c2:	e01c      	b.n	80082fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082c4:	4b63      	ldr	r3, [pc, #396]	@ (8008454 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80082c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082c8:	4a62      	ldr	r2, [pc, #392]	@ (8008454 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80082ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80082ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80082d0:	e01c      	b.n	800830c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80082d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082d6:	3308      	adds	r3, #8
 80082d8:	2100      	movs	r1, #0
 80082da:	4618      	mov	r0, r3
 80082dc:	f002 fab8 	bl	800a850 <RCCEx_PLL2_Config>
 80082e0:	4603      	mov	r3, r0
 80082e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80082e6:	e011      	b.n	800830c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80082e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082ec:	3328      	adds	r3, #40	@ 0x28
 80082ee:	2100      	movs	r1, #0
 80082f0:	4618      	mov	r0, r3
 80082f2:	f002 fb5f 	bl	800a9b4 <RCCEx_PLL3_Config>
 80082f6:	4603      	mov	r3, r0
 80082f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80082fc:	e006      	b.n	800830c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80082fe:	2301      	movs	r3, #1
 8008300:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008304:	e002      	b.n	800830c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008306:	bf00      	nop
 8008308:	e000      	b.n	800830c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800830a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800830c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008310:	2b00      	cmp	r3, #0
 8008312:	d10a      	bne.n	800832a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008314:	4b4f      	ldr	r3, [pc, #316]	@ (8008454 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008316:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008318:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800831c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008320:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008322:	4a4c      	ldr	r2, [pc, #304]	@ (8008454 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008324:	430b      	orrs	r3, r1
 8008326:	6513      	str	r3, [r2, #80]	@ 0x50
 8008328:	e003      	b.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800832a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800832e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008332:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800833a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800833e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8008342:	2300      	movs	r3, #0
 8008344:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8008348:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800834c:	460b      	mov	r3, r1
 800834e:	4313      	orrs	r3, r2
 8008350:	d053      	beq.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008352:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008356:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800835a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800835e:	d035      	beq.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8008360:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008364:	d82e      	bhi.n	80083c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008366:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800836a:	d031      	beq.n	80083d0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800836c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008370:	d828      	bhi.n	80083c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008372:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008376:	d01a      	beq.n	80083ae <HAL_RCCEx_PeriphCLKConfig+0x292>
 8008378:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800837c:	d822      	bhi.n	80083c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800837e:	2b00      	cmp	r3, #0
 8008380:	d003      	beq.n	800838a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8008382:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008386:	d007      	beq.n	8008398 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8008388:	e01c      	b.n	80083c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800838a:	4b32      	ldr	r3, [pc, #200]	@ (8008454 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800838c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800838e:	4a31      	ldr	r2, [pc, #196]	@ (8008454 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008390:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008394:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008396:	e01c      	b.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008398:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800839c:	3308      	adds	r3, #8
 800839e:	2100      	movs	r1, #0
 80083a0:	4618      	mov	r0, r3
 80083a2:	f002 fa55 	bl	800a850 <RCCEx_PLL2_Config>
 80083a6:	4603      	mov	r3, r0
 80083a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80083ac:	e011      	b.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80083ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083b2:	3328      	adds	r3, #40	@ 0x28
 80083b4:	2100      	movs	r1, #0
 80083b6:	4618      	mov	r0, r3
 80083b8:	f002 fafc 	bl	800a9b4 <RCCEx_PLL3_Config>
 80083bc:	4603      	mov	r3, r0
 80083be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80083c2:	e006      	b.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80083c4:	2301      	movs	r3, #1
 80083c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80083ca:	e002      	b.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80083cc:	bf00      	nop
 80083ce:	e000      	b.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80083d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d10b      	bne.n	80083f2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80083da:	4b1e      	ldr	r3, [pc, #120]	@ (8008454 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80083dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083de:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80083e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80083ea:	4a1a      	ldr	r2, [pc, #104]	@ (8008454 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80083ec:	430b      	orrs	r3, r1
 80083ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80083f0:	e003      	b.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80083fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008402:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8008406:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800840a:	2300      	movs	r3, #0
 800840c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008410:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8008414:	460b      	mov	r3, r1
 8008416:	4313      	orrs	r3, r2
 8008418:	d056      	beq.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800841a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800841e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008422:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008426:	d038      	beq.n	800849a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008428:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800842c:	d831      	bhi.n	8008492 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800842e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008432:	d034      	beq.n	800849e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8008434:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008438:	d82b      	bhi.n	8008492 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800843a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800843e:	d01d      	beq.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8008440:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008444:	d825      	bhi.n	8008492 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008446:	2b00      	cmp	r3, #0
 8008448:	d006      	beq.n	8008458 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800844a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800844e:	d00a      	beq.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008450:	e01f      	b.n	8008492 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008452:	bf00      	nop
 8008454:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008458:	4ba2      	ldr	r3, [pc, #648]	@ (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800845a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800845c:	4aa1      	ldr	r2, [pc, #644]	@ (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800845e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008462:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008464:	e01c      	b.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008466:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800846a:	3308      	adds	r3, #8
 800846c:	2100      	movs	r1, #0
 800846e:	4618      	mov	r0, r3
 8008470:	f002 f9ee 	bl	800a850 <RCCEx_PLL2_Config>
 8008474:	4603      	mov	r3, r0
 8008476:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800847a:	e011      	b.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800847c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008480:	3328      	adds	r3, #40	@ 0x28
 8008482:	2100      	movs	r1, #0
 8008484:	4618      	mov	r0, r3
 8008486:	f002 fa95 	bl	800a9b4 <RCCEx_PLL3_Config>
 800848a:	4603      	mov	r3, r0
 800848c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008490:	e006      	b.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008492:	2301      	movs	r3, #1
 8008494:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008498:	e002      	b.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800849a:	bf00      	nop
 800849c:	e000      	b.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800849e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d10b      	bne.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80084a8:	4b8e      	ldr	r3, [pc, #568]	@ (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80084aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80084ac:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80084b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084b4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80084b8:	4a8a      	ldr	r2, [pc, #552]	@ (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80084ba:	430b      	orrs	r3, r1
 80084bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80084be:	e003      	b.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80084c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084d0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80084d4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80084d8:	2300      	movs	r3, #0
 80084da:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80084de:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80084e2:	460b      	mov	r3, r1
 80084e4:	4313      	orrs	r3, r2
 80084e6:	d03a      	beq.n	800855e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80084e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80084ee:	2b30      	cmp	r3, #48	@ 0x30
 80084f0:	d01f      	beq.n	8008532 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80084f2:	2b30      	cmp	r3, #48	@ 0x30
 80084f4:	d819      	bhi.n	800852a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80084f6:	2b20      	cmp	r3, #32
 80084f8:	d00c      	beq.n	8008514 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80084fa:	2b20      	cmp	r3, #32
 80084fc:	d815      	bhi.n	800852a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d019      	beq.n	8008536 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8008502:	2b10      	cmp	r3, #16
 8008504:	d111      	bne.n	800852a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008506:	4b77      	ldr	r3, [pc, #476]	@ (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800850a:	4a76      	ldr	r2, [pc, #472]	@ (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800850c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008510:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008512:	e011      	b.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008514:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008518:	3308      	adds	r3, #8
 800851a:	2102      	movs	r1, #2
 800851c:	4618      	mov	r0, r3
 800851e:	f002 f997 	bl	800a850 <RCCEx_PLL2_Config>
 8008522:	4603      	mov	r3, r0
 8008524:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008528:	e006      	b.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800852a:	2301      	movs	r3, #1
 800852c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008530:	e002      	b.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008532:	bf00      	nop
 8008534:	e000      	b.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008536:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008538:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800853c:	2b00      	cmp	r3, #0
 800853e:	d10a      	bne.n	8008556 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008540:	4b68      	ldr	r3, [pc, #416]	@ (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008542:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008544:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008548:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800854c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800854e:	4a65      	ldr	r2, [pc, #404]	@ (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008550:	430b      	orrs	r3, r1
 8008552:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008554:	e003      	b.n	800855e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008556:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800855a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800855e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008566:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800856a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800856e:	2300      	movs	r3, #0
 8008570:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008574:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8008578:	460b      	mov	r3, r1
 800857a:	4313      	orrs	r3, r2
 800857c:	d051      	beq.n	8008622 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800857e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008582:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008584:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008588:	d035      	beq.n	80085f6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800858a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800858e:	d82e      	bhi.n	80085ee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008590:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008594:	d031      	beq.n	80085fa <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8008596:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800859a:	d828      	bhi.n	80085ee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800859c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80085a0:	d01a      	beq.n	80085d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80085a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80085a6:	d822      	bhi.n	80085ee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d003      	beq.n	80085b4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80085ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80085b0:	d007      	beq.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80085b2:	e01c      	b.n	80085ee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085b4:	4b4b      	ldr	r3, [pc, #300]	@ (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80085b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085b8:	4a4a      	ldr	r2, [pc, #296]	@ (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80085ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80085be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80085c0:	e01c      	b.n	80085fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80085c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085c6:	3308      	adds	r3, #8
 80085c8:	2100      	movs	r1, #0
 80085ca:	4618      	mov	r0, r3
 80085cc:	f002 f940 	bl	800a850 <RCCEx_PLL2_Config>
 80085d0:	4603      	mov	r3, r0
 80085d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80085d6:	e011      	b.n	80085fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80085d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085dc:	3328      	adds	r3, #40	@ 0x28
 80085de:	2100      	movs	r1, #0
 80085e0:	4618      	mov	r0, r3
 80085e2:	f002 f9e7 	bl	800a9b4 <RCCEx_PLL3_Config>
 80085e6:	4603      	mov	r3, r0
 80085e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80085ec:	e006      	b.n	80085fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80085ee:	2301      	movs	r3, #1
 80085f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80085f4:	e002      	b.n	80085fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80085f6:	bf00      	nop
 80085f8:	e000      	b.n	80085fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80085fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008600:	2b00      	cmp	r3, #0
 8008602:	d10a      	bne.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008604:	4b37      	ldr	r3, [pc, #220]	@ (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008606:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008608:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800860c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008610:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008612:	4a34      	ldr	r2, [pc, #208]	@ (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008614:	430b      	orrs	r3, r1
 8008616:	6513      	str	r3, [r2, #80]	@ 0x50
 8008618:	e003      	b.n	8008622 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800861a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800861e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008622:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800862a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800862e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008632:	2300      	movs	r3, #0
 8008634:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008638:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800863c:	460b      	mov	r3, r1
 800863e:	4313      	orrs	r3, r2
 8008640:	d056      	beq.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008642:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008646:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008648:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800864c:	d033      	beq.n	80086b6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800864e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008652:	d82c      	bhi.n	80086ae <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008654:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008658:	d02f      	beq.n	80086ba <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800865a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800865e:	d826      	bhi.n	80086ae <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008660:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008664:	d02b      	beq.n	80086be <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8008666:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800866a:	d820      	bhi.n	80086ae <HAL_RCCEx_PeriphCLKConfig+0x592>
 800866c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008670:	d012      	beq.n	8008698 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8008672:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008676:	d81a      	bhi.n	80086ae <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008678:	2b00      	cmp	r3, #0
 800867a:	d022      	beq.n	80086c2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800867c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008680:	d115      	bne.n	80086ae <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008682:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008686:	3308      	adds	r3, #8
 8008688:	2101      	movs	r1, #1
 800868a:	4618      	mov	r0, r3
 800868c:	f002 f8e0 	bl	800a850 <RCCEx_PLL2_Config>
 8008690:	4603      	mov	r3, r0
 8008692:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008696:	e015      	b.n	80086c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008698:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800869c:	3328      	adds	r3, #40	@ 0x28
 800869e:	2101      	movs	r1, #1
 80086a0:	4618      	mov	r0, r3
 80086a2:	f002 f987 	bl	800a9b4 <RCCEx_PLL3_Config>
 80086a6:	4603      	mov	r3, r0
 80086a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80086ac:	e00a      	b.n	80086c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80086ae:	2301      	movs	r3, #1
 80086b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80086b4:	e006      	b.n	80086c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80086b6:	bf00      	nop
 80086b8:	e004      	b.n	80086c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80086ba:	bf00      	nop
 80086bc:	e002      	b.n	80086c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80086be:	bf00      	nop
 80086c0:	e000      	b.n	80086c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80086c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80086c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d10d      	bne.n	80086e8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80086cc:	4b05      	ldr	r3, [pc, #20]	@ (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80086ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086d0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80086d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80086da:	4a02      	ldr	r2, [pc, #8]	@ (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80086dc:	430b      	orrs	r3, r1
 80086de:	6513      	str	r3, [r2, #80]	@ 0x50
 80086e0:	e006      	b.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80086e2:	bf00      	nop
 80086e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80086f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086f8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80086fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008700:	2300      	movs	r3, #0
 8008702:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008706:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800870a:	460b      	mov	r3, r1
 800870c:	4313      	orrs	r3, r2
 800870e:	d055      	beq.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008710:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008714:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008718:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800871c:	d033      	beq.n	8008786 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800871e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008722:	d82c      	bhi.n	800877e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008724:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008728:	d02f      	beq.n	800878a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800872a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800872e:	d826      	bhi.n	800877e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008730:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008734:	d02b      	beq.n	800878e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8008736:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800873a:	d820      	bhi.n	800877e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800873c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008740:	d012      	beq.n	8008768 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8008742:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008746:	d81a      	bhi.n	800877e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008748:	2b00      	cmp	r3, #0
 800874a:	d022      	beq.n	8008792 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800874c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008750:	d115      	bne.n	800877e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008752:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008756:	3308      	adds	r3, #8
 8008758:	2101      	movs	r1, #1
 800875a:	4618      	mov	r0, r3
 800875c:	f002 f878 	bl	800a850 <RCCEx_PLL2_Config>
 8008760:	4603      	mov	r3, r0
 8008762:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008766:	e015      	b.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008768:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800876c:	3328      	adds	r3, #40	@ 0x28
 800876e:	2101      	movs	r1, #1
 8008770:	4618      	mov	r0, r3
 8008772:	f002 f91f 	bl	800a9b4 <RCCEx_PLL3_Config>
 8008776:	4603      	mov	r3, r0
 8008778:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800877c:	e00a      	b.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800877e:	2301      	movs	r3, #1
 8008780:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008784:	e006      	b.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008786:	bf00      	nop
 8008788:	e004      	b.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800878a:	bf00      	nop
 800878c:	e002      	b.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800878e:	bf00      	nop
 8008790:	e000      	b.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008792:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008794:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008798:	2b00      	cmp	r3, #0
 800879a:	d10b      	bne.n	80087b4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800879c:	4ba3      	ldr	r3, [pc, #652]	@ (8008a2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800879e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087a0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80087a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80087ac:	4a9f      	ldr	r2, [pc, #636]	@ (8008a2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80087ae:	430b      	orrs	r3, r1
 80087b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80087b2:	e003      	b.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80087bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80087c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80087cc:	2300      	movs	r3, #0
 80087ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80087d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80087d6:	460b      	mov	r3, r1
 80087d8:	4313      	orrs	r3, r2
 80087da:	d037      	beq.n	800884c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80087dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80087e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80087e6:	d00e      	beq.n	8008806 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80087e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80087ec:	d816      	bhi.n	800881c <HAL_RCCEx_PeriphCLKConfig+0x700>
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d018      	beq.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80087f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80087f6:	d111      	bne.n	800881c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80087f8:	4b8c      	ldr	r3, [pc, #560]	@ (8008a2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80087fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087fc:	4a8b      	ldr	r2, [pc, #556]	@ (8008a2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80087fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008802:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008804:	e00f      	b.n	8008826 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800880a:	3308      	adds	r3, #8
 800880c:	2101      	movs	r1, #1
 800880e:	4618      	mov	r0, r3
 8008810:	f002 f81e 	bl	800a850 <RCCEx_PLL2_Config>
 8008814:	4603      	mov	r3, r0
 8008816:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800881a:	e004      	b.n	8008826 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800881c:	2301      	movs	r3, #1
 800881e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008822:	e000      	b.n	8008826 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8008824:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008826:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800882a:	2b00      	cmp	r3, #0
 800882c:	d10a      	bne.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800882e:	4b7f      	ldr	r3, [pc, #508]	@ (8008a2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008830:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008832:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008836:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800883a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800883c:	4a7b      	ldr	r2, [pc, #492]	@ (8008a2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800883e:	430b      	orrs	r3, r1
 8008840:	6513      	str	r3, [r2, #80]	@ 0x50
 8008842:	e003      	b.n	800884c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008844:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008848:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800884c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008854:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8008858:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800885c:	2300      	movs	r3, #0
 800885e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008862:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8008866:	460b      	mov	r3, r1
 8008868:	4313      	orrs	r3, r2
 800886a:	d039      	beq.n	80088e0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800886c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008870:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008872:	2b03      	cmp	r3, #3
 8008874:	d81c      	bhi.n	80088b0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8008876:	a201      	add	r2, pc, #4	@ (adr r2, 800887c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8008878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800887c:	080088b9 	.word	0x080088b9
 8008880:	0800888d 	.word	0x0800888d
 8008884:	0800889b 	.word	0x0800889b
 8008888:	080088b9 	.word	0x080088b9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800888c:	4b67      	ldr	r3, [pc, #412]	@ (8008a2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800888e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008890:	4a66      	ldr	r2, [pc, #408]	@ (8008a2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008892:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008896:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008898:	e00f      	b.n	80088ba <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800889a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800889e:	3308      	adds	r3, #8
 80088a0:	2102      	movs	r1, #2
 80088a2:	4618      	mov	r0, r3
 80088a4:	f001 ffd4 	bl	800a850 <RCCEx_PLL2_Config>
 80088a8:	4603      	mov	r3, r0
 80088aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80088ae:	e004      	b.n	80088ba <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80088b0:	2301      	movs	r3, #1
 80088b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80088b6:	e000      	b.n	80088ba <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80088b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d10a      	bne.n	80088d8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80088c2:	4b5a      	ldr	r3, [pc, #360]	@ (8008a2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80088c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80088c6:	f023 0103 	bic.w	r1, r3, #3
 80088ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80088d0:	4a56      	ldr	r2, [pc, #344]	@ (8008a2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80088d2:	430b      	orrs	r3, r1
 80088d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80088d6:	e003      	b.n	80088e0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80088e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088e8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80088ec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80088f0:	2300      	movs	r3, #0
 80088f2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80088f6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80088fa:	460b      	mov	r3, r1
 80088fc:	4313      	orrs	r3, r2
 80088fe:	f000 809f 	beq.w	8008a40 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008902:	4b4b      	ldr	r3, [pc, #300]	@ (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	4a4a      	ldr	r2, [pc, #296]	@ (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008908:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800890c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800890e:	f7fa fadf 	bl	8002ed0 <HAL_GetTick>
 8008912:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008916:	e00b      	b.n	8008930 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008918:	f7fa fada 	bl	8002ed0 <HAL_GetTick>
 800891c:	4602      	mov	r2, r0
 800891e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8008922:	1ad3      	subs	r3, r2, r3
 8008924:	2b64      	cmp	r3, #100	@ 0x64
 8008926:	d903      	bls.n	8008930 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8008928:	2303      	movs	r3, #3
 800892a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800892e:	e005      	b.n	800893c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008930:	4b3f      	ldr	r3, [pc, #252]	@ (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008938:	2b00      	cmp	r3, #0
 800893a:	d0ed      	beq.n	8008918 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800893c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008940:	2b00      	cmp	r3, #0
 8008942:	d179      	bne.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008944:	4b39      	ldr	r3, [pc, #228]	@ (8008a2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008946:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008948:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800894c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008950:	4053      	eors	r3, r2
 8008952:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008956:	2b00      	cmp	r3, #0
 8008958:	d015      	beq.n	8008986 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800895a:	4b34      	ldr	r3, [pc, #208]	@ (8008a2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800895c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800895e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008962:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008966:	4b31      	ldr	r3, [pc, #196]	@ (8008a2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008968:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800896a:	4a30      	ldr	r2, [pc, #192]	@ (8008a2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800896c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008970:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008972:	4b2e      	ldr	r3, [pc, #184]	@ (8008a2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008974:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008976:	4a2d      	ldr	r2, [pc, #180]	@ (8008a2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008978:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800897c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800897e:	4a2b      	ldr	r2, [pc, #172]	@ (8008a2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008980:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8008984:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008986:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800898a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800898e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008992:	d118      	bne.n	80089c6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008994:	f7fa fa9c 	bl	8002ed0 <HAL_GetTick>
 8008998:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800899c:	e00d      	b.n	80089ba <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800899e:	f7fa fa97 	bl	8002ed0 <HAL_GetTick>
 80089a2:	4602      	mov	r2, r0
 80089a4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80089a8:	1ad2      	subs	r2, r2, r3
 80089aa:	f241 3388 	movw	r3, #5000	@ 0x1388
 80089ae:	429a      	cmp	r2, r3
 80089b0:	d903      	bls.n	80089ba <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80089b2:	2303      	movs	r3, #3
 80089b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80089b8:	e005      	b.n	80089c6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80089ba:	4b1c      	ldr	r3, [pc, #112]	@ (8008a2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80089bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089be:	f003 0302 	and.w	r3, r3, #2
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d0eb      	beq.n	800899e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80089c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d129      	bne.n	8008a22 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80089ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80089d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80089da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80089de:	d10e      	bne.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80089e0:	4b12      	ldr	r3, [pc, #72]	@ (8008a2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80089e2:	691b      	ldr	r3, [r3, #16]
 80089e4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80089e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089ec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80089f0:	091a      	lsrs	r2, r3, #4
 80089f2:	4b10      	ldr	r3, [pc, #64]	@ (8008a34 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80089f4:	4013      	ands	r3, r2
 80089f6:	4a0d      	ldr	r2, [pc, #52]	@ (8008a2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80089f8:	430b      	orrs	r3, r1
 80089fa:	6113      	str	r3, [r2, #16]
 80089fc:	e005      	b.n	8008a0a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80089fe:	4b0b      	ldr	r3, [pc, #44]	@ (8008a2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008a00:	691b      	ldr	r3, [r3, #16]
 8008a02:	4a0a      	ldr	r2, [pc, #40]	@ (8008a2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008a04:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008a08:	6113      	str	r3, [r2, #16]
 8008a0a:	4b08      	ldr	r3, [pc, #32]	@ (8008a2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008a0c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8008a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a12:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008a16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a1a:	4a04      	ldr	r2, [pc, #16]	@ (8008a2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008a1c:	430b      	orrs	r3, r1
 8008a1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008a20:	e00e      	b.n	8008a40 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008a22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8008a2a:	e009      	b.n	8008a40 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008a2c:	58024400 	.word	0x58024400
 8008a30:	58024800 	.word	0x58024800
 8008a34:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008a40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a48:	f002 0301 	and.w	r3, r2, #1
 8008a4c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008a50:	2300      	movs	r3, #0
 8008a52:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008a56:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008a5a:	460b      	mov	r3, r1
 8008a5c:	4313      	orrs	r3, r2
 8008a5e:	f000 8089 	beq.w	8008b74 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8008a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a66:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008a68:	2b28      	cmp	r3, #40	@ 0x28
 8008a6a:	d86b      	bhi.n	8008b44 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8008a6c:	a201      	add	r2, pc, #4	@ (adr r2, 8008a74 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a72:	bf00      	nop
 8008a74:	08008b4d 	.word	0x08008b4d
 8008a78:	08008b45 	.word	0x08008b45
 8008a7c:	08008b45 	.word	0x08008b45
 8008a80:	08008b45 	.word	0x08008b45
 8008a84:	08008b45 	.word	0x08008b45
 8008a88:	08008b45 	.word	0x08008b45
 8008a8c:	08008b45 	.word	0x08008b45
 8008a90:	08008b45 	.word	0x08008b45
 8008a94:	08008b19 	.word	0x08008b19
 8008a98:	08008b45 	.word	0x08008b45
 8008a9c:	08008b45 	.word	0x08008b45
 8008aa0:	08008b45 	.word	0x08008b45
 8008aa4:	08008b45 	.word	0x08008b45
 8008aa8:	08008b45 	.word	0x08008b45
 8008aac:	08008b45 	.word	0x08008b45
 8008ab0:	08008b45 	.word	0x08008b45
 8008ab4:	08008b2f 	.word	0x08008b2f
 8008ab8:	08008b45 	.word	0x08008b45
 8008abc:	08008b45 	.word	0x08008b45
 8008ac0:	08008b45 	.word	0x08008b45
 8008ac4:	08008b45 	.word	0x08008b45
 8008ac8:	08008b45 	.word	0x08008b45
 8008acc:	08008b45 	.word	0x08008b45
 8008ad0:	08008b45 	.word	0x08008b45
 8008ad4:	08008b4d 	.word	0x08008b4d
 8008ad8:	08008b45 	.word	0x08008b45
 8008adc:	08008b45 	.word	0x08008b45
 8008ae0:	08008b45 	.word	0x08008b45
 8008ae4:	08008b45 	.word	0x08008b45
 8008ae8:	08008b45 	.word	0x08008b45
 8008aec:	08008b45 	.word	0x08008b45
 8008af0:	08008b45 	.word	0x08008b45
 8008af4:	08008b4d 	.word	0x08008b4d
 8008af8:	08008b45 	.word	0x08008b45
 8008afc:	08008b45 	.word	0x08008b45
 8008b00:	08008b45 	.word	0x08008b45
 8008b04:	08008b45 	.word	0x08008b45
 8008b08:	08008b45 	.word	0x08008b45
 8008b0c:	08008b45 	.word	0x08008b45
 8008b10:	08008b45 	.word	0x08008b45
 8008b14:	08008b4d 	.word	0x08008b4d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008b18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b1c:	3308      	adds	r3, #8
 8008b1e:	2101      	movs	r1, #1
 8008b20:	4618      	mov	r0, r3
 8008b22:	f001 fe95 	bl	800a850 <RCCEx_PLL2_Config>
 8008b26:	4603      	mov	r3, r0
 8008b28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008b2c:	e00f      	b.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b32:	3328      	adds	r3, #40	@ 0x28
 8008b34:	2101      	movs	r1, #1
 8008b36:	4618      	mov	r0, r3
 8008b38:	f001 ff3c 	bl	800a9b4 <RCCEx_PLL3_Config>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008b42:	e004      	b.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b44:	2301      	movs	r3, #1
 8008b46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008b4a:	e000      	b.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8008b4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d10a      	bne.n	8008b6c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008b56:	4bbf      	ldr	r3, [pc, #764]	@ (8008e54 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008b58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b5a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8008b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b62:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008b64:	4abb      	ldr	r2, [pc, #748]	@ (8008e54 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008b66:	430b      	orrs	r3, r1
 8008b68:	6553      	str	r3, [r2, #84]	@ 0x54
 8008b6a:	e003      	b.n	8008b74 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b7c:	f002 0302 	and.w	r3, r2, #2
 8008b80:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008b84:	2300      	movs	r3, #0
 8008b86:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008b8a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8008b8e:	460b      	mov	r3, r1
 8008b90:	4313      	orrs	r3, r2
 8008b92:	d041      	beq.n	8008c18 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b98:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008b9a:	2b05      	cmp	r3, #5
 8008b9c:	d824      	bhi.n	8008be8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8008b9e:	a201      	add	r2, pc, #4	@ (adr r2, 8008ba4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8008ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ba4:	08008bf1 	.word	0x08008bf1
 8008ba8:	08008bbd 	.word	0x08008bbd
 8008bac:	08008bd3 	.word	0x08008bd3
 8008bb0:	08008bf1 	.word	0x08008bf1
 8008bb4:	08008bf1 	.word	0x08008bf1
 8008bb8:	08008bf1 	.word	0x08008bf1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bc0:	3308      	adds	r3, #8
 8008bc2:	2101      	movs	r1, #1
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f001 fe43 	bl	800a850 <RCCEx_PLL2_Config>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008bd0:	e00f      	b.n	8008bf2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bd6:	3328      	adds	r3, #40	@ 0x28
 8008bd8:	2101      	movs	r1, #1
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f001 feea 	bl	800a9b4 <RCCEx_PLL3_Config>
 8008be0:	4603      	mov	r3, r0
 8008be2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008be6:	e004      	b.n	8008bf2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008be8:	2301      	movs	r3, #1
 8008bea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008bee:	e000      	b.n	8008bf2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8008bf0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008bf2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d10a      	bne.n	8008c10 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008bfa:	4b96      	ldr	r3, [pc, #600]	@ (8008e54 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008bfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bfe:	f023 0107 	bic.w	r1, r3, #7
 8008c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c06:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008c08:	4a92      	ldr	r2, [pc, #584]	@ (8008e54 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008c0a:	430b      	orrs	r3, r1
 8008c0c:	6553      	str	r3, [r2, #84]	@ 0x54
 8008c0e:	e003      	b.n	8008c18 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c14:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008c18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c20:	f002 0304 	and.w	r3, r2, #4
 8008c24:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008c28:	2300      	movs	r3, #0
 8008c2a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008c2e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8008c32:	460b      	mov	r3, r1
 8008c34:	4313      	orrs	r3, r2
 8008c36:	d044      	beq.n	8008cc2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008c38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008c40:	2b05      	cmp	r3, #5
 8008c42:	d825      	bhi.n	8008c90 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8008c44:	a201      	add	r2, pc, #4	@ (adr r2, 8008c4c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8008c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c4a:	bf00      	nop
 8008c4c:	08008c99 	.word	0x08008c99
 8008c50:	08008c65 	.word	0x08008c65
 8008c54:	08008c7b 	.word	0x08008c7b
 8008c58:	08008c99 	.word	0x08008c99
 8008c5c:	08008c99 	.word	0x08008c99
 8008c60:	08008c99 	.word	0x08008c99
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c68:	3308      	adds	r3, #8
 8008c6a:	2101      	movs	r1, #1
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	f001 fdef 	bl	800a850 <RCCEx_PLL2_Config>
 8008c72:	4603      	mov	r3, r0
 8008c74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008c78:	e00f      	b.n	8008c9a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c7e:	3328      	adds	r3, #40	@ 0x28
 8008c80:	2101      	movs	r1, #1
 8008c82:	4618      	mov	r0, r3
 8008c84:	f001 fe96 	bl	800a9b4 <RCCEx_PLL3_Config>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008c8e:	e004      	b.n	8008c9a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c90:	2301      	movs	r3, #1
 8008c92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008c96:	e000      	b.n	8008c9a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8008c98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d10b      	bne.n	8008cba <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008ca2:	4b6c      	ldr	r3, [pc, #432]	@ (8008e54 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008ca4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ca6:	f023 0107 	bic.w	r1, r3, #7
 8008caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008cb2:	4a68      	ldr	r2, [pc, #416]	@ (8008e54 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008cb4:	430b      	orrs	r3, r1
 8008cb6:	6593      	str	r3, [r2, #88]	@ 0x58
 8008cb8:	e003      	b.n	8008cc2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008cbe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cca:	f002 0320 	and.w	r3, r2, #32
 8008cce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008cd8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008cdc:	460b      	mov	r3, r1
 8008cde:	4313      	orrs	r3, r2
 8008ce0:	d055      	beq.n	8008d8e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008cea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008cee:	d033      	beq.n	8008d58 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8008cf0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008cf4:	d82c      	bhi.n	8008d50 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008cfa:	d02f      	beq.n	8008d5c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8008cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d00:	d826      	bhi.n	8008d50 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008d02:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008d06:	d02b      	beq.n	8008d60 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8008d08:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008d0c:	d820      	bhi.n	8008d50 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008d0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d12:	d012      	beq.n	8008d3a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008d14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d18:	d81a      	bhi.n	8008d50 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d022      	beq.n	8008d64 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8008d1e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d22:	d115      	bne.n	8008d50 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008d24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d28:	3308      	adds	r3, #8
 8008d2a:	2100      	movs	r1, #0
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f001 fd8f 	bl	800a850 <RCCEx_PLL2_Config>
 8008d32:	4603      	mov	r3, r0
 8008d34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008d38:	e015      	b.n	8008d66 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d3e:	3328      	adds	r3, #40	@ 0x28
 8008d40:	2102      	movs	r1, #2
 8008d42:	4618      	mov	r0, r3
 8008d44:	f001 fe36 	bl	800a9b4 <RCCEx_PLL3_Config>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008d4e:	e00a      	b.n	8008d66 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d50:	2301      	movs	r3, #1
 8008d52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008d56:	e006      	b.n	8008d66 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008d58:	bf00      	nop
 8008d5a:	e004      	b.n	8008d66 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008d5c:	bf00      	nop
 8008d5e:	e002      	b.n	8008d66 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008d60:	bf00      	nop
 8008d62:	e000      	b.n	8008d66 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008d64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d10b      	bne.n	8008d86 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008d6e:	4b39      	ldr	r3, [pc, #228]	@ (8008e54 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008d70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d72:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d7e:	4a35      	ldr	r2, [pc, #212]	@ (8008e54 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008d80:	430b      	orrs	r3, r1
 8008d82:	6553      	str	r3, [r2, #84]	@ 0x54
 8008d84:	e003      	b.n	8008d8e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d96:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008d9a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008d9e:	2300      	movs	r3, #0
 8008da0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008da4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008da8:	460b      	mov	r3, r1
 8008daa:	4313      	orrs	r3, r2
 8008dac:	d058      	beq.n	8008e60 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008db2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008db6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008dba:	d033      	beq.n	8008e24 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8008dbc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008dc0:	d82c      	bhi.n	8008e1c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008dc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008dc6:	d02f      	beq.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8008dc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008dcc:	d826      	bhi.n	8008e1c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008dce:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008dd2:	d02b      	beq.n	8008e2c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8008dd4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008dd8:	d820      	bhi.n	8008e1c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008dda:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008dde:	d012      	beq.n	8008e06 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8008de0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008de4:	d81a      	bhi.n	8008e1c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d022      	beq.n	8008e30 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8008dea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008dee:	d115      	bne.n	8008e1c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008df0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008df4:	3308      	adds	r3, #8
 8008df6:	2100      	movs	r1, #0
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f001 fd29 	bl	800a850 <RCCEx_PLL2_Config>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008e04:	e015      	b.n	8008e32 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e0a:	3328      	adds	r3, #40	@ 0x28
 8008e0c:	2102      	movs	r1, #2
 8008e0e:	4618      	mov	r0, r3
 8008e10:	f001 fdd0 	bl	800a9b4 <RCCEx_PLL3_Config>
 8008e14:	4603      	mov	r3, r0
 8008e16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008e1a:	e00a      	b.n	8008e32 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008e22:	e006      	b.n	8008e32 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008e24:	bf00      	nop
 8008e26:	e004      	b.n	8008e32 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008e28:	bf00      	nop
 8008e2a:	e002      	b.n	8008e32 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008e2c:	bf00      	nop
 8008e2e:	e000      	b.n	8008e32 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008e30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d10e      	bne.n	8008e58 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008e3a:	4b06      	ldr	r3, [pc, #24]	@ (8008e54 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008e3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e3e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8008e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e46:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008e4a:	4a02      	ldr	r2, [pc, #8]	@ (8008e54 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008e4c:	430b      	orrs	r3, r1
 8008e4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008e50:	e006      	b.n	8008e60 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8008e52:	bf00      	nop
 8008e54:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e5c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e68:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008e6c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008e70:	2300      	movs	r3, #0
 8008e72:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008e76:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008e7a:	460b      	mov	r3, r1
 8008e7c:	4313      	orrs	r3, r2
 8008e7e:	d055      	beq.n	8008f2c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008e80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e84:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008e88:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008e8c:	d033      	beq.n	8008ef6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8008e8e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008e92:	d82c      	bhi.n	8008eee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008e94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008e98:	d02f      	beq.n	8008efa <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8008e9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008e9e:	d826      	bhi.n	8008eee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008ea0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008ea4:	d02b      	beq.n	8008efe <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8008ea6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008eaa:	d820      	bhi.n	8008eee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008eac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008eb0:	d012      	beq.n	8008ed8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8008eb2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008eb6:	d81a      	bhi.n	8008eee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d022      	beq.n	8008f02 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8008ebc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008ec0:	d115      	bne.n	8008eee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ec6:	3308      	adds	r3, #8
 8008ec8:	2100      	movs	r1, #0
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f001 fcc0 	bl	800a850 <RCCEx_PLL2_Config>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008ed6:	e015      	b.n	8008f04 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008edc:	3328      	adds	r3, #40	@ 0x28
 8008ede:	2102      	movs	r1, #2
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	f001 fd67 	bl	800a9b4 <RCCEx_PLL3_Config>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008eec:	e00a      	b.n	8008f04 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008eee:	2301      	movs	r3, #1
 8008ef0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008ef4:	e006      	b.n	8008f04 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008ef6:	bf00      	nop
 8008ef8:	e004      	b.n	8008f04 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008efa:	bf00      	nop
 8008efc:	e002      	b.n	8008f04 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008efe:	bf00      	nop
 8008f00:	e000      	b.n	8008f04 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008f02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d10b      	bne.n	8008f24 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008f0c:	4ba1      	ldr	r3, [pc, #644]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008f0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f10:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f18:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008f1c:	4a9d      	ldr	r2, [pc, #628]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008f1e:	430b      	orrs	r3, r1
 8008f20:	6593      	str	r3, [r2, #88]	@ 0x58
 8008f22:	e003      	b.n	8008f2c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008f2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f34:	f002 0308 	and.w	r3, r2, #8
 8008f38:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008f42:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008f46:	460b      	mov	r3, r1
 8008f48:	4313      	orrs	r3, r2
 8008f4a:	d01e      	beq.n	8008f8a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008f4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008f54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f58:	d10c      	bne.n	8008f74 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f5e:	3328      	adds	r3, #40	@ 0x28
 8008f60:	2102      	movs	r1, #2
 8008f62:	4618      	mov	r0, r3
 8008f64:	f001 fd26 	bl	800a9b4 <RCCEx_PLL3_Config>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d002      	beq.n	8008f74 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8008f6e:	2301      	movs	r3, #1
 8008f70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008f74:	4b87      	ldr	r3, [pc, #540]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008f76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f78:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008f7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008f84:	4a83      	ldr	r2, [pc, #524]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008f86:	430b      	orrs	r3, r1
 8008f88:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f92:	f002 0310 	and.w	r3, r2, #16
 8008f96:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008fa0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008fa4:	460b      	mov	r3, r1
 8008fa6:	4313      	orrs	r3, r2
 8008fa8:	d01e      	beq.n	8008fe8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008fb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008fb6:	d10c      	bne.n	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008fb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fbc:	3328      	adds	r3, #40	@ 0x28
 8008fbe:	2102      	movs	r1, #2
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f001 fcf7 	bl	800a9b4 <RCCEx_PLL3_Config>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d002      	beq.n	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8008fcc:	2301      	movs	r3, #1
 8008fce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008fd2:	4b70      	ldr	r3, [pc, #448]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008fd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008fd6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fde:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008fe2:	4a6c      	ldr	r2, [pc, #432]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008fe4:	430b      	orrs	r3, r1
 8008fe6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ff0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008ff4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008ffe:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8009002:	460b      	mov	r3, r1
 8009004:	4313      	orrs	r3, r2
 8009006:	d03e      	beq.n	8009086 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009008:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800900c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009010:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009014:	d022      	beq.n	800905c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8009016:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800901a:	d81b      	bhi.n	8009054 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800901c:	2b00      	cmp	r3, #0
 800901e:	d003      	beq.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8009020:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009024:	d00b      	beq.n	800903e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8009026:	e015      	b.n	8009054 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009028:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800902c:	3308      	adds	r3, #8
 800902e:	2100      	movs	r1, #0
 8009030:	4618      	mov	r0, r3
 8009032:	f001 fc0d 	bl	800a850 <RCCEx_PLL2_Config>
 8009036:	4603      	mov	r3, r0
 8009038:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800903c:	e00f      	b.n	800905e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800903e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009042:	3328      	adds	r3, #40	@ 0x28
 8009044:	2102      	movs	r1, #2
 8009046:	4618      	mov	r0, r3
 8009048:	f001 fcb4 	bl	800a9b4 <RCCEx_PLL3_Config>
 800904c:	4603      	mov	r3, r0
 800904e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009052:	e004      	b.n	800905e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009054:	2301      	movs	r3, #1
 8009056:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800905a:	e000      	b.n	800905e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800905c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800905e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009062:	2b00      	cmp	r3, #0
 8009064:	d10b      	bne.n	800907e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009066:	4b4b      	ldr	r3, [pc, #300]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009068:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800906a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800906e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009072:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009076:	4a47      	ldr	r2, [pc, #284]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009078:	430b      	orrs	r3, r1
 800907a:	6593      	str	r3, [r2, #88]	@ 0x58
 800907c:	e003      	b.n	8009086 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800907e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009082:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009086:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800908a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800908e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8009092:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009094:	2300      	movs	r3, #0
 8009096:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009098:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800909c:	460b      	mov	r3, r1
 800909e:	4313      	orrs	r3, r2
 80090a0:	d03b      	beq.n	800911a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80090a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80090aa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80090ae:	d01f      	beq.n	80090f0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80090b0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80090b4:	d818      	bhi.n	80090e8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80090b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80090ba:	d003      	beq.n	80090c4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80090bc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80090c0:	d007      	beq.n	80090d2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80090c2:	e011      	b.n	80090e8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090c4:	4b33      	ldr	r3, [pc, #204]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80090c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090c8:	4a32      	ldr	r2, [pc, #200]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80090ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80090ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80090d0:	e00f      	b.n	80090f2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80090d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090d6:	3328      	adds	r3, #40	@ 0x28
 80090d8:	2101      	movs	r1, #1
 80090da:	4618      	mov	r0, r3
 80090dc:	f001 fc6a 	bl	800a9b4 <RCCEx_PLL3_Config>
 80090e0:	4603      	mov	r3, r0
 80090e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80090e6:	e004      	b.n	80090f2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80090e8:	2301      	movs	r3, #1
 80090ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80090ee:	e000      	b.n	80090f2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80090f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d10b      	bne.n	8009112 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80090fa:	4b26      	ldr	r3, [pc, #152]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80090fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090fe:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009102:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009106:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800910a:	4a22      	ldr	r2, [pc, #136]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800910c:	430b      	orrs	r3, r1
 800910e:	6553      	str	r3, [r2, #84]	@ 0x54
 8009110:	e003      	b.n	800911a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009112:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009116:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800911a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800911e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009122:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8009126:	673b      	str	r3, [r7, #112]	@ 0x70
 8009128:	2300      	movs	r3, #0
 800912a:	677b      	str	r3, [r7, #116]	@ 0x74
 800912c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8009130:	460b      	mov	r3, r1
 8009132:	4313      	orrs	r3, r2
 8009134:	d034      	beq.n	80091a0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009136:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800913a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800913c:	2b00      	cmp	r3, #0
 800913e:	d003      	beq.n	8009148 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8009140:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009144:	d007      	beq.n	8009156 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8009146:	e011      	b.n	800916c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009148:	4b12      	ldr	r3, [pc, #72]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800914a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800914c:	4a11      	ldr	r2, [pc, #68]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800914e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009152:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009154:	e00e      	b.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009156:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800915a:	3308      	adds	r3, #8
 800915c:	2102      	movs	r1, #2
 800915e:	4618      	mov	r0, r3
 8009160:	f001 fb76 	bl	800a850 <RCCEx_PLL2_Config>
 8009164:	4603      	mov	r3, r0
 8009166:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800916a:	e003      	b.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800916c:	2301      	movs	r3, #1
 800916e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009172:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009174:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009178:	2b00      	cmp	r3, #0
 800917a:	d10d      	bne.n	8009198 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800917c:	4b05      	ldr	r3, [pc, #20]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800917e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009180:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009184:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009188:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800918a:	4a02      	ldr	r2, [pc, #8]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800918c:	430b      	orrs	r3, r1
 800918e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009190:	e006      	b.n	80091a0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8009192:	bf00      	nop
 8009194:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009198:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800919c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80091a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091a8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80091ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80091ae:	2300      	movs	r3, #0
 80091b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80091b2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80091b6:	460b      	mov	r3, r1
 80091b8:	4313      	orrs	r3, r2
 80091ba:	d00c      	beq.n	80091d6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80091bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091c0:	3328      	adds	r3, #40	@ 0x28
 80091c2:	2102      	movs	r1, #2
 80091c4:	4618      	mov	r0, r3
 80091c6:	f001 fbf5 	bl	800a9b4 <RCCEx_PLL3_Config>
 80091ca:	4603      	mov	r3, r0
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d002      	beq.n	80091d6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80091d0:	2301      	movs	r3, #1
 80091d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80091d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091de:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80091e2:	663b      	str	r3, [r7, #96]	@ 0x60
 80091e4:	2300      	movs	r3, #0
 80091e6:	667b      	str	r3, [r7, #100]	@ 0x64
 80091e8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80091ec:	460b      	mov	r3, r1
 80091ee:	4313      	orrs	r3, r2
 80091f0:	d038      	beq.n	8009264 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80091f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80091fe:	d018      	beq.n	8009232 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8009200:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009204:	d811      	bhi.n	800922a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009206:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800920a:	d014      	beq.n	8009236 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800920c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009210:	d80b      	bhi.n	800922a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009212:	2b00      	cmp	r3, #0
 8009214:	d011      	beq.n	800923a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8009216:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800921a:	d106      	bne.n	800922a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800921c:	4bc3      	ldr	r3, [pc, #780]	@ (800952c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800921e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009220:	4ac2      	ldr	r2, [pc, #776]	@ (800952c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009222:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009226:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009228:	e008      	b.n	800923c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800922a:	2301      	movs	r3, #1
 800922c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009230:	e004      	b.n	800923c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009232:	bf00      	nop
 8009234:	e002      	b.n	800923c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009236:	bf00      	nop
 8009238:	e000      	b.n	800923c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800923a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800923c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009240:	2b00      	cmp	r3, #0
 8009242:	d10b      	bne.n	800925c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009244:	4bb9      	ldr	r3, [pc, #740]	@ (800952c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009246:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009248:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800924c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009250:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009254:	4ab5      	ldr	r2, [pc, #724]	@ (800952c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009256:	430b      	orrs	r3, r1
 8009258:	6553      	str	r3, [r2, #84]	@ 0x54
 800925a:	e003      	b.n	8009264 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800925c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009260:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009264:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800926c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8009270:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009272:	2300      	movs	r3, #0
 8009274:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009276:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800927a:	460b      	mov	r3, r1
 800927c:	4313      	orrs	r3, r2
 800927e:	d009      	beq.n	8009294 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009280:	4baa      	ldr	r3, [pc, #680]	@ (800952c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009282:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009284:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009288:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800928c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800928e:	4aa7      	ldr	r2, [pc, #668]	@ (800952c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009290:	430b      	orrs	r3, r1
 8009292:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009294:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800929c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80092a0:	653b      	str	r3, [r7, #80]	@ 0x50
 80092a2:	2300      	movs	r3, #0
 80092a4:	657b      	str	r3, [r7, #84]	@ 0x54
 80092a6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80092aa:	460b      	mov	r3, r1
 80092ac:	4313      	orrs	r3, r2
 80092ae:	d00a      	beq.n	80092c6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80092b0:	4b9e      	ldr	r3, [pc, #632]	@ (800952c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80092b2:	691b      	ldr	r3, [r3, #16]
 80092b4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80092b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092bc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80092c0:	4a9a      	ldr	r2, [pc, #616]	@ (800952c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80092c2:	430b      	orrs	r3, r1
 80092c4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80092c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ce:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80092d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80092d4:	2300      	movs	r3, #0
 80092d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80092d8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80092dc:	460b      	mov	r3, r1
 80092de:	4313      	orrs	r3, r2
 80092e0:	d009      	beq.n	80092f6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80092e2:	4b92      	ldr	r3, [pc, #584]	@ (800952c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80092e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092e6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80092ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80092f0:	4a8e      	ldr	r2, [pc, #568]	@ (800952c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80092f2:	430b      	orrs	r3, r1
 80092f4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80092f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092fe:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8009302:	643b      	str	r3, [r7, #64]	@ 0x40
 8009304:	2300      	movs	r3, #0
 8009306:	647b      	str	r3, [r7, #68]	@ 0x44
 8009308:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800930c:	460b      	mov	r3, r1
 800930e:	4313      	orrs	r3, r2
 8009310:	d00e      	beq.n	8009330 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009312:	4b86      	ldr	r3, [pc, #536]	@ (800952c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009314:	691b      	ldr	r3, [r3, #16]
 8009316:	4a85      	ldr	r2, [pc, #532]	@ (800952c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009318:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800931c:	6113      	str	r3, [r2, #16]
 800931e:	4b83      	ldr	r3, [pc, #524]	@ (800952c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009320:	6919      	ldr	r1, [r3, #16]
 8009322:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009326:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800932a:	4a80      	ldr	r2, [pc, #512]	@ (800952c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800932c:	430b      	orrs	r3, r1
 800932e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009330:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009338:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800933c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800933e:	2300      	movs	r3, #0
 8009340:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009342:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8009346:	460b      	mov	r3, r1
 8009348:	4313      	orrs	r3, r2
 800934a:	d009      	beq.n	8009360 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800934c:	4b77      	ldr	r3, [pc, #476]	@ (800952c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800934e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009350:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009354:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009358:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800935a:	4a74      	ldr	r2, [pc, #464]	@ (800952c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800935c:	430b      	orrs	r3, r1
 800935e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009360:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009368:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800936c:	633b      	str	r3, [r7, #48]	@ 0x30
 800936e:	2300      	movs	r3, #0
 8009370:	637b      	str	r3, [r7, #52]	@ 0x34
 8009372:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8009376:	460b      	mov	r3, r1
 8009378:	4313      	orrs	r3, r2
 800937a:	d00a      	beq.n	8009392 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800937c:	4b6b      	ldr	r3, [pc, #428]	@ (800952c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800937e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009380:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8009384:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009388:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800938c:	4a67      	ldr	r2, [pc, #412]	@ (800952c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800938e:	430b      	orrs	r3, r1
 8009390:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009392:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800939a:	2100      	movs	r1, #0
 800939c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800939e:	f003 0301 	and.w	r3, r3, #1
 80093a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80093a4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80093a8:	460b      	mov	r3, r1
 80093aa:	4313      	orrs	r3, r2
 80093ac:	d011      	beq.n	80093d2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80093ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093b2:	3308      	adds	r3, #8
 80093b4:	2100      	movs	r1, #0
 80093b6:	4618      	mov	r0, r3
 80093b8:	f001 fa4a 	bl	800a850 <RCCEx_PLL2_Config>
 80093bc:	4603      	mov	r3, r0
 80093be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80093c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d003      	beq.n	80093d2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80093d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093da:	2100      	movs	r1, #0
 80093dc:	6239      	str	r1, [r7, #32]
 80093de:	f003 0302 	and.w	r3, r3, #2
 80093e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80093e4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80093e8:	460b      	mov	r3, r1
 80093ea:	4313      	orrs	r3, r2
 80093ec:	d011      	beq.n	8009412 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80093ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093f2:	3308      	adds	r3, #8
 80093f4:	2101      	movs	r1, #1
 80093f6:	4618      	mov	r0, r3
 80093f8:	f001 fa2a 	bl	800a850 <RCCEx_PLL2_Config>
 80093fc:	4603      	mov	r3, r0
 80093fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009402:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009406:	2b00      	cmp	r3, #0
 8009408:	d003      	beq.n	8009412 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800940a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800940e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009412:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800941a:	2100      	movs	r1, #0
 800941c:	61b9      	str	r1, [r7, #24]
 800941e:	f003 0304 	and.w	r3, r3, #4
 8009422:	61fb      	str	r3, [r7, #28]
 8009424:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009428:	460b      	mov	r3, r1
 800942a:	4313      	orrs	r3, r2
 800942c:	d011      	beq.n	8009452 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800942e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009432:	3308      	adds	r3, #8
 8009434:	2102      	movs	r1, #2
 8009436:	4618      	mov	r0, r3
 8009438:	f001 fa0a 	bl	800a850 <RCCEx_PLL2_Config>
 800943c:	4603      	mov	r3, r0
 800943e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009442:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009446:	2b00      	cmp	r3, #0
 8009448:	d003      	beq.n	8009452 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800944a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800944e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009452:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800945a:	2100      	movs	r1, #0
 800945c:	6139      	str	r1, [r7, #16]
 800945e:	f003 0308 	and.w	r3, r3, #8
 8009462:	617b      	str	r3, [r7, #20]
 8009464:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009468:	460b      	mov	r3, r1
 800946a:	4313      	orrs	r3, r2
 800946c:	d011      	beq.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800946e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009472:	3328      	adds	r3, #40	@ 0x28
 8009474:	2100      	movs	r1, #0
 8009476:	4618      	mov	r0, r3
 8009478:	f001 fa9c 	bl	800a9b4 <RCCEx_PLL3_Config>
 800947c:	4603      	mov	r3, r0
 800947e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8009482:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009486:	2b00      	cmp	r3, #0
 8009488:	d003      	beq.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800948a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800948e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009492:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800949a:	2100      	movs	r1, #0
 800949c:	60b9      	str	r1, [r7, #8]
 800949e:	f003 0310 	and.w	r3, r3, #16
 80094a2:	60fb      	str	r3, [r7, #12]
 80094a4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80094a8:	460b      	mov	r3, r1
 80094aa:	4313      	orrs	r3, r2
 80094ac:	d011      	beq.n	80094d2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80094ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094b2:	3328      	adds	r3, #40	@ 0x28
 80094b4:	2101      	movs	r1, #1
 80094b6:	4618      	mov	r0, r3
 80094b8:	f001 fa7c 	bl	800a9b4 <RCCEx_PLL3_Config>
 80094bc:	4603      	mov	r3, r0
 80094be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80094c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d003      	beq.n	80094d2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80094ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80094d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094da:	2100      	movs	r1, #0
 80094dc:	6039      	str	r1, [r7, #0]
 80094de:	f003 0320 	and.w	r3, r3, #32
 80094e2:	607b      	str	r3, [r7, #4]
 80094e4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80094e8:	460b      	mov	r3, r1
 80094ea:	4313      	orrs	r3, r2
 80094ec:	d011      	beq.n	8009512 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80094ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094f2:	3328      	adds	r3, #40	@ 0x28
 80094f4:	2102      	movs	r1, #2
 80094f6:	4618      	mov	r0, r3
 80094f8:	f001 fa5c 	bl	800a9b4 <RCCEx_PLL3_Config>
 80094fc:	4603      	mov	r3, r0
 80094fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009502:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009506:	2b00      	cmp	r3, #0
 8009508:	d003      	beq.n	8009512 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800950a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800950e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8009512:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8009516:	2b00      	cmp	r3, #0
 8009518:	d101      	bne.n	800951e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800951a:	2300      	movs	r3, #0
 800951c:	e000      	b.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800951e:	2301      	movs	r3, #1
}
 8009520:	4618      	mov	r0, r3
 8009522:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8009526:	46bd      	mov	sp, r7
 8009528:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800952c:	58024400 	.word	0x58024400

08009530 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b090      	sub	sp, #64	@ 0x40
 8009534:	af00      	add	r7, sp, #0
 8009536:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800953a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800953e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8009542:	430b      	orrs	r3, r1
 8009544:	f040 8094 	bne.w	8009670 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8009548:	4b9e      	ldr	r3, [pc, #632]	@ (80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800954a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800954c:	f003 0307 	and.w	r3, r3, #7
 8009550:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009554:	2b04      	cmp	r3, #4
 8009556:	f200 8087 	bhi.w	8009668 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800955a:	a201      	add	r2, pc, #4	@ (adr r2, 8009560 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800955c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009560:	08009575 	.word	0x08009575
 8009564:	0800959d 	.word	0x0800959d
 8009568:	080095c5 	.word	0x080095c5
 800956c:	08009661 	.word	0x08009661
 8009570:	080095ed 	.word	0x080095ed
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009574:	4b93      	ldr	r3, [pc, #588]	@ (80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800957c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009580:	d108      	bne.n	8009594 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009582:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009586:	4618      	mov	r0, r3
 8009588:	f001 f810 	bl	800a5ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800958c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800958e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009590:	f000 bd45 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009594:	2300      	movs	r3, #0
 8009596:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009598:	f000 bd41 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800959c:	4b89      	ldr	r3, [pc, #548]	@ (80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80095a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80095a8:	d108      	bne.n	80095bc <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095aa:	f107 0318 	add.w	r3, r7, #24
 80095ae:	4618      	mov	r0, r3
 80095b0:	f000 fd54 	bl	800a05c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80095b4:	69bb      	ldr	r3, [r7, #24]
 80095b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095b8:	f000 bd31 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80095bc:	2300      	movs	r3, #0
 80095be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095c0:	f000 bd2d 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80095c4:	4b7f      	ldr	r3, [pc, #508]	@ (80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80095cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80095d0:	d108      	bne.n	80095e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095d2:	f107 030c 	add.w	r3, r7, #12
 80095d6:	4618      	mov	r0, r3
 80095d8:	f000 fe94 	bl	800a304 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095e0:	f000 bd1d 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80095e4:	2300      	movs	r3, #0
 80095e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095e8:	f000 bd19 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80095ec:	4b75      	ldr	r3, [pc, #468]	@ (80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80095ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80095f0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80095f4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80095f6:	4b73      	ldr	r3, [pc, #460]	@ (80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f003 0304 	and.w	r3, r3, #4
 80095fe:	2b04      	cmp	r3, #4
 8009600:	d10c      	bne.n	800961c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8009602:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009604:	2b00      	cmp	r3, #0
 8009606:	d109      	bne.n	800961c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009608:	4b6e      	ldr	r3, [pc, #440]	@ (80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	08db      	lsrs	r3, r3, #3
 800960e:	f003 0303 	and.w	r3, r3, #3
 8009612:	4a6d      	ldr	r2, [pc, #436]	@ (80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009614:	fa22 f303 	lsr.w	r3, r2, r3
 8009618:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800961a:	e01f      	b.n	800965c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800961c:	4b69      	ldr	r3, [pc, #420]	@ (80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009624:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009628:	d106      	bne.n	8009638 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800962a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800962c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009630:	d102      	bne.n	8009638 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009632:	4b66      	ldr	r3, [pc, #408]	@ (80097cc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009634:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009636:	e011      	b.n	800965c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009638:	4b62      	ldr	r3, [pc, #392]	@ (80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009640:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009644:	d106      	bne.n	8009654 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8009646:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009648:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800964c:	d102      	bne.n	8009654 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800964e:	4b60      	ldr	r3, [pc, #384]	@ (80097d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009650:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009652:	e003      	b.n	800965c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009654:	2300      	movs	r3, #0
 8009656:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009658:	f000 bce1 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800965c:	f000 bcdf 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009660:	4b5c      	ldr	r3, [pc, #368]	@ (80097d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009662:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009664:	f000 bcdb 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009668:	2300      	movs	r3, #0
 800966a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800966c:	f000 bcd7 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8009670:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009674:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8009678:	430b      	orrs	r3, r1
 800967a:	f040 80ad 	bne.w	80097d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800967e:	4b51      	ldr	r3, [pc, #324]	@ (80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009680:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009682:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8009686:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800968a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800968e:	d056      	beq.n	800973e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8009690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009692:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009696:	f200 8090 	bhi.w	80097ba <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800969a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800969c:	2bc0      	cmp	r3, #192	@ 0xc0
 800969e:	f000 8088 	beq.w	80097b2 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80096a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096a4:	2bc0      	cmp	r3, #192	@ 0xc0
 80096a6:	f200 8088 	bhi.w	80097ba <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80096aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096ac:	2b80      	cmp	r3, #128	@ 0x80
 80096ae:	d032      	beq.n	8009716 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80096b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096b2:	2b80      	cmp	r3, #128	@ 0x80
 80096b4:	f200 8081 	bhi.w	80097ba <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80096b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d003      	beq.n	80096c6 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80096be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096c0:	2b40      	cmp	r3, #64	@ 0x40
 80096c2:	d014      	beq.n	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80096c4:	e079      	b.n	80097ba <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80096c6:	4b3f      	ldr	r3, [pc, #252]	@ (80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80096ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80096d2:	d108      	bne.n	80096e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80096d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80096d8:	4618      	mov	r0, r3
 80096da:	f000 ff67 	bl	800a5ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80096de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80096e2:	f000 bc9c 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80096e6:	2300      	movs	r3, #0
 80096e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096ea:	f000 bc98 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80096ee:	4b35      	ldr	r3, [pc, #212]	@ (80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80096f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80096fa:	d108      	bne.n	800970e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80096fc:	f107 0318 	add.w	r3, r7, #24
 8009700:	4618      	mov	r0, r3
 8009702:	f000 fcab 	bl	800a05c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009706:	69bb      	ldr	r3, [r7, #24]
 8009708:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800970a:	f000 bc88 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800970e:	2300      	movs	r3, #0
 8009710:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009712:	f000 bc84 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009716:	4b2b      	ldr	r3, [pc, #172]	@ (80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800971e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009722:	d108      	bne.n	8009736 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009724:	f107 030c 	add.w	r3, r7, #12
 8009728:	4618      	mov	r0, r3
 800972a:	f000 fdeb 	bl	800a304 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009732:	f000 bc74 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009736:	2300      	movs	r3, #0
 8009738:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800973a:	f000 bc70 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800973e:	4b21      	ldr	r3, [pc, #132]	@ (80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009742:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009746:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009748:	4b1e      	ldr	r3, [pc, #120]	@ (80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f003 0304 	and.w	r3, r3, #4
 8009750:	2b04      	cmp	r3, #4
 8009752:	d10c      	bne.n	800976e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8009754:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009756:	2b00      	cmp	r3, #0
 8009758:	d109      	bne.n	800976e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800975a:	4b1a      	ldr	r3, [pc, #104]	@ (80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	08db      	lsrs	r3, r3, #3
 8009760:	f003 0303 	and.w	r3, r3, #3
 8009764:	4a18      	ldr	r2, [pc, #96]	@ (80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009766:	fa22 f303 	lsr.w	r3, r2, r3
 800976a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800976c:	e01f      	b.n	80097ae <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800976e:	4b15      	ldr	r3, [pc, #84]	@ (80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009776:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800977a:	d106      	bne.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800977c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800977e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009782:	d102      	bne.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009784:	4b11      	ldr	r3, [pc, #68]	@ (80097cc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009786:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009788:	e011      	b.n	80097ae <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800978a:	4b0e      	ldr	r3, [pc, #56]	@ (80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009792:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009796:	d106      	bne.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8009798:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800979a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800979e:	d102      	bne.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80097a0:	4b0b      	ldr	r3, [pc, #44]	@ (80097d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80097a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80097a4:	e003      	b.n	80097ae <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80097a6:	2300      	movs	r3, #0
 80097a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80097aa:	f000 bc38 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80097ae:	f000 bc36 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80097b2:	4b08      	ldr	r3, [pc, #32]	@ (80097d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80097b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097b6:	f000 bc32 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80097ba:	2300      	movs	r3, #0
 80097bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097be:	f000 bc2e 	b.w	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80097c2:	bf00      	nop
 80097c4:	58024400 	.word	0x58024400
 80097c8:	03d09000 	.word	0x03d09000
 80097cc:	003d0900 	.word	0x003d0900
 80097d0:	017d7840 	.word	0x017d7840
 80097d4:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80097d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097dc:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80097e0:	430b      	orrs	r3, r1
 80097e2:	f040 809c 	bne.w	800991e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80097e6:	4b9e      	ldr	r3, [pc, #632]	@ (8009a60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80097e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097ea:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80097ee:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80097f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097f2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80097f6:	d054      	beq.n	80098a2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80097f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097fa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80097fe:	f200 808b 	bhi.w	8009918 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009804:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009808:	f000 8083 	beq.w	8009912 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800980c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800980e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009812:	f200 8081 	bhi.w	8009918 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009818:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800981c:	d02f      	beq.n	800987e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800981e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009820:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009824:	d878      	bhi.n	8009918 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009828:	2b00      	cmp	r3, #0
 800982a:	d004      	beq.n	8009836 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800982c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800982e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009832:	d012      	beq.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8009834:	e070      	b.n	8009918 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009836:	4b8a      	ldr	r3, [pc, #552]	@ (8009a60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800983e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009842:	d107      	bne.n	8009854 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009844:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009848:	4618      	mov	r0, r3
 800984a:	f000 feaf 	bl	800a5ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800984e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009850:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009852:	e3e4      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009854:	2300      	movs	r3, #0
 8009856:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009858:	e3e1      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800985a:	4b81      	ldr	r3, [pc, #516]	@ (8009a60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009862:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009866:	d107      	bne.n	8009878 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009868:	f107 0318 	add.w	r3, r7, #24
 800986c:	4618      	mov	r0, r3
 800986e:	f000 fbf5 	bl	800a05c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009872:	69bb      	ldr	r3, [r7, #24]
 8009874:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009876:	e3d2      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009878:	2300      	movs	r3, #0
 800987a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800987c:	e3cf      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800987e:	4b78      	ldr	r3, [pc, #480]	@ (8009a60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009886:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800988a:	d107      	bne.n	800989c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800988c:	f107 030c 	add.w	r3, r7, #12
 8009890:	4618      	mov	r0, r3
 8009892:	f000 fd37 	bl	800a304 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800989a:	e3c0      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800989c:	2300      	movs	r3, #0
 800989e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098a0:	e3bd      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80098a2:	4b6f      	ldr	r3, [pc, #444]	@ (8009a60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80098a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80098a6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80098aa:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80098ac:	4b6c      	ldr	r3, [pc, #432]	@ (8009a60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f003 0304 	and.w	r3, r3, #4
 80098b4:	2b04      	cmp	r3, #4
 80098b6:	d10c      	bne.n	80098d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80098b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d109      	bne.n	80098d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80098be:	4b68      	ldr	r3, [pc, #416]	@ (8009a60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	08db      	lsrs	r3, r3, #3
 80098c4:	f003 0303 	and.w	r3, r3, #3
 80098c8:	4a66      	ldr	r2, [pc, #408]	@ (8009a64 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80098ca:	fa22 f303 	lsr.w	r3, r2, r3
 80098ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80098d0:	e01e      	b.n	8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80098d2:	4b63      	ldr	r3, [pc, #396]	@ (8009a60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80098da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80098de:	d106      	bne.n	80098ee <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80098e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80098e6:	d102      	bne.n	80098ee <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80098e8:	4b5f      	ldr	r3, [pc, #380]	@ (8009a68 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80098ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80098ec:	e010      	b.n	8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80098ee:	4b5c      	ldr	r3, [pc, #368]	@ (8009a60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80098f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80098fa:	d106      	bne.n	800990a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80098fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009902:	d102      	bne.n	800990a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009904:	4b59      	ldr	r3, [pc, #356]	@ (8009a6c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8009906:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009908:	e002      	b.n	8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800990a:	2300      	movs	r3, #0
 800990c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800990e:	e386      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009910:	e385      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009912:	4b57      	ldr	r3, [pc, #348]	@ (8009a70 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009914:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009916:	e382      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009918:	2300      	movs	r3, #0
 800991a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800991c:	e37f      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800991e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009922:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8009926:	430b      	orrs	r3, r1
 8009928:	f040 80a7 	bne.w	8009a7a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800992c:	4b4c      	ldr	r3, [pc, #304]	@ (8009a60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800992e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009930:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8009934:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009938:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800993c:	d055      	beq.n	80099ea <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800993e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009940:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009944:	f200 8096 	bhi.w	8009a74 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800994a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800994e:	f000 8084 	beq.w	8009a5a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8009952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009954:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009958:	f200 808c 	bhi.w	8009a74 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800995c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800995e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009962:	d030      	beq.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8009964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009966:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800996a:	f200 8083 	bhi.w	8009a74 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800996e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009970:	2b00      	cmp	r3, #0
 8009972:	d004      	beq.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8009974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009976:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800997a:	d012      	beq.n	80099a2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800997c:	e07a      	b.n	8009a74 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800997e:	4b38      	ldr	r3, [pc, #224]	@ (8009a60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009986:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800998a:	d107      	bne.n	800999c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800998c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009990:	4618      	mov	r0, r3
 8009992:	f000 fe0b 	bl	800a5ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009998:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800999a:	e340      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800999c:	2300      	movs	r3, #0
 800999e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099a0:	e33d      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80099a2:	4b2f      	ldr	r3, [pc, #188]	@ (8009a60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80099aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80099ae:	d107      	bne.n	80099c0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80099b0:	f107 0318 	add.w	r3, r7, #24
 80099b4:	4618      	mov	r0, r3
 80099b6:	f000 fb51 	bl	800a05c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80099ba:	69bb      	ldr	r3, [r7, #24]
 80099bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80099be:	e32e      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80099c0:	2300      	movs	r3, #0
 80099c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099c4:	e32b      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80099c6:	4b26      	ldr	r3, [pc, #152]	@ (8009a60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80099ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80099d2:	d107      	bne.n	80099e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80099d4:	f107 030c 	add.w	r3, r7, #12
 80099d8:	4618      	mov	r0, r3
 80099da:	f000 fc93 	bl	800a304 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80099e2:	e31c      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80099e4:	2300      	movs	r3, #0
 80099e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099e8:	e319      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80099ea:	4b1d      	ldr	r3, [pc, #116]	@ (8009a60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80099ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80099ee:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80099f2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80099f4:	4b1a      	ldr	r3, [pc, #104]	@ (8009a60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	f003 0304 	and.w	r3, r3, #4
 80099fc:	2b04      	cmp	r3, #4
 80099fe:	d10c      	bne.n	8009a1a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8009a00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d109      	bne.n	8009a1a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009a06:	4b16      	ldr	r3, [pc, #88]	@ (8009a60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	08db      	lsrs	r3, r3, #3
 8009a0c:	f003 0303 	and.w	r3, r3, #3
 8009a10:	4a14      	ldr	r2, [pc, #80]	@ (8009a64 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009a12:	fa22 f303 	lsr.w	r3, r2, r3
 8009a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a18:	e01e      	b.n	8009a58 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009a1a:	4b11      	ldr	r3, [pc, #68]	@ (8009a60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009a26:	d106      	bne.n	8009a36 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8009a28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009a2e:	d102      	bne.n	8009a36 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009a30:	4b0d      	ldr	r3, [pc, #52]	@ (8009a68 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8009a32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a34:	e010      	b.n	8009a58 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009a36:	4b0a      	ldr	r3, [pc, #40]	@ (8009a60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a3e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009a42:	d106      	bne.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8009a44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a4a:	d102      	bne.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009a4c:	4b07      	ldr	r3, [pc, #28]	@ (8009a6c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8009a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a50:	e002      	b.n	8009a58 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009a52:	2300      	movs	r3, #0
 8009a54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009a56:	e2e2      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009a58:	e2e1      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009a5a:	4b05      	ldr	r3, [pc, #20]	@ (8009a70 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009a5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a5e:	e2de      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009a60:	58024400 	.word	0x58024400
 8009a64:	03d09000 	.word	0x03d09000
 8009a68:	003d0900 	.word	0x003d0900
 8009a6c:	017d7840 	.word	0x017d7840
 8009a70:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8009a74:	2300      	movs	r3, #0
 8009a76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a78:	e2d1      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009a7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a7e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8009a82:	430b      	orrs	r3, r1
 8009a84:	f040 809c 	bne.w	8009bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8009a88:	4b93      	ldr	r3, [pc, #588]	@ (8009cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009a8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a8c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8009a90:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a94:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009a98:	d054      	beq.n	8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8009a9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a9c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009aa0:	f200 808b 	bhi.w	8009bba <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009aa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aa6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009aaa:	f000 8083 	beq.w	8009bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8009aae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ab0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009ab4:	f200 8081 	bhi.w	8009bba <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009ab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009abe:	d02f      	beq.n	8009b20 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8009ac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ac2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009ac6:	d878      	bhi.n	8009bba <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d004      	beq.n	8009ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8009ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ad0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ad4:	d012      	beq.n	8009afc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8009ad6:	e070      	b.n	8009bba <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009ad8:	4b7f      	ldr	r3, [pc, #508]	@ (8009cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009ae0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009ae4:	d107      	bne.n	8009af6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009ae6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009aea:	4618      	mov	r0, r3
 8009aec:	f000 fd5e 	bl	800a5ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009af0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009af4:	e293      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009af6:	2300      	movs	r3, #0
 8009af8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009afa:	e290      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009afc:	4b76      	ldr	r3, [pc, #472]	@ (8009cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009b04:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009b08:	d107      	bne.n	8009b1a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b0a:	f107 0318 	add.w	r3, r7, #24
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f000 faa4 	bl	800a05c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009b14:	69bb      	ldr	r3, [r7, #24]
 8009b16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b18:	e281      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b1e:	e27e      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009b20:	4b6d      	ldr	r3, [pc, #436]	@ (8009cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009b28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b2c:	d107      	bne.n	8009b3e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b2e:	f107 030c 	add.w	r3, r7, #12
 8009b32:	4618      	mov	r0, r3
 8009b34:	f000 fbe6 	bl	800a304 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b3c:	e26f      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b42:	e26c      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009b44:	4b64      	ldr	r3, [pc, #400]	@ (8009cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009b46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b48:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009b4c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009b4e:	4b62      	ldr	r3, [pc, #392]	@ (8009cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f003 0304 	and.w	r3, r3, #4
 8009b56:	2b04      	cmp	r3, #4
 8009b58:	d10c      	bne.n	8009b74 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8009b5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d109      	bne.n	8009b74 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009b60:	4b5d      	ldr	r3, [pc, #372]	@ (8009cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	08db      	lsrs	r3, r3, #3
 8009b66:	f003 0303 	and.w	r3, r3, #3
 8009b6a:	4a5c      	ldr	r2, [pc, #368]	@ (8009cdc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8009b6c:	fa22 f303 	lsr.w	r3, r2, r3
 8009b70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009b72:	e01e      	b.n	8009bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009b74:	4b58      	ldr	r3, [pc, #352]	@ (8009cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b80:	d106      	bne.n	8009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8009b82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009b88:	d102      	bne.n	8009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009b8a:	4b55      	ldr	r3, [pc, #340]	@ (8009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009b8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009b8e:	e010      	b.n	8009bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009b90:	4b51      	ldr	r3, [pc, #324]	@ (8009cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009b98:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009b9c:	d106      	bne.n	8009bac <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8009b9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ba0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009ba4:	d102      	bne.n	8009bac <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009ba6:	4b4f      	ldr	r3, [pc, #316]	@ (8009ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009ba8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009baa:	e002      	b.n	8009bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009bac:	2300      	movs	r3, #0
 8009bae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009bb0:	e235      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009bb2:	e234      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009bb4:	4b4c      	ldr	r3, [pc, #304]	@ (8009ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8009bb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bb8:	e231      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009bba:	2300      	movs	r3, #0
 8009bbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bbe:	e22e      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8009bc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009bc4:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8009bc8:	430b      	orrs	r3, r1
 8009bca:	f040 808f 	bne.w	8009cec <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8009bce:	4b42      	ldr	r3, [pc, #264]	@ (8009cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009bd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009bd2:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8009bd6:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8009bd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bda:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009bde:	d06b      	beq.n	8009cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8009be0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009be2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009be6:	d874      	bhi.n	8009cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009be8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009bee:	d056      	beq.n	8009c9e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8009bf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bf2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009bf6:	d86c      	bhi.n	8009cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009bf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bfa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009bfe:	d03b      	beq.n	8009c78 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8009c00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c02:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009c06:	d864      	bhi.n	8009cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009c08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c0a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009c0e:	d021      	beq.n	8009c54 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8009c10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c12:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009c16:	d85c      	bhi.n	8009cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009c18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d004      	beq.n	8009c28 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8009c1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009c24:	d004      	beq.n	8009c30 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8009c26:	e054      	b.n	8009cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8009c28:	f7fe fa4c 	bl	80080c4 <HAL_RCC_GetPCLK1Freq>
 8009c2c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009c2e:	e1f6      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009c30:	4b29      	ldr	r3, [pc, #164]	@ (8009cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009c38:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009c3c:	d107      	bne.n	8009c4e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c3e:	f107 0318 	add.w	r3, r7, #24
 8009c42:	4618      	mov	r0, r3
 8009c44:	f000 fa0a 	bl	800a05c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009c48:	69fb      	ldr	r3, [r7, #28]
 8009c4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c4c:	e1e7      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c52:	e1e4      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009c54:	4b20      	ldr	r3, [pc, #128]	@ (8009cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009c5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009c60:	d107      	bne.n	8009c72 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c62:	f107 030c 	add.w	r3, r7, #12
 8009c66:	4618      	mov	r0, r3
 8009c68:	f000 fb4c 	bl	800a304 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009c6c:	693b      	ldr	r3, [r7, #16]
 8009c6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c70:	e1d5      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009c72:	2300      	movs	r3, #0
 8009c74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c76:	e1d2      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009c78:	4b17      	ldr	r3, [pc, #92]	@ (8009cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	f003 0304 	and.w	r3, r3, #4
 8009c80:	2b04      	cmp	r3, #4
 8009c82:	d109      	bne.n	8009c98 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009c84:	4b14      	ldr	r3, [pc, #80]	@ (8009cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	08db      	lsrs	r3, r3, #3
 8009c8a:	f003 0303 	and.w	r3, r3, #3
 8009c8e:	4a13      	ldr	r2, [pc, #76]	@ (8009cdc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8009c90:	fa22 f303 	lsr.w	r3, r2, r3
 8009c94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c96:	e1c2      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009c98:	2300      	movs	r3, #0
 8009c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c9c:	e1bf      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009c9e:	4b0e      	ldr	r3, [pc, #56]	@ (8009cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ca6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009caa:	d102      	bne.n	8009cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8009cac:	4b0c      	ldr	r3, [pc, #48]	@ (8009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009cae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009cb0:	e1b5      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cb6:	e1b2      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009cb8:	4b07      	ldr	r3, [pc, #28]	@ (8009cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009cc0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009cc4:	d102      	bne.n	8009ccc <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8009cc6:	4b07      	ldr	r3, [pc, #28]	@ (8009ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009cc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009cca:	e1a8      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009ccc:	2300      	movs	r3, #0
 8009cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cd0:	e1a5      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cd6:	e1a2      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009cd8:	58024400 	.word	0x58024400
 8009cdc:	03d09000 	.word	0x03d09000
 8009ce0:	003d0900 	.word	0x003d0900
 8009ce4:	017d7840 	.word	0x017d7840
 8009ce8:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009cec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009cf0:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8009cf4:	430b      	orrs	r3, r1
 8009cf6:	d173      	bne.n	8009de0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8009cf8:	4b9c      	ldr	r3, [pc, #624]	@ (8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009cfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009cfc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009d00:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009d02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d04:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009d08:	d02f      	beq.n	8009d6a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8009d0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d0c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009d10:	d863      	bhi.n	8009dda <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8009d12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d004      	beq.n	8009d22 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8009d18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d1e:	d012      	beq.n	8009d46 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8009d20:	e05b      	b.n	8009dda <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009d22:	4b92      	ldr	r3, [pc, #584]	@ (8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009d2a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009d2e:	d107      	bne.n	8009d40 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d30:	f107 0318 	add.w	r3, r7, #24
 8009d34:	4618      	mov	r0, r3
 8009d36:	f000 f991 	bl	800a05c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009d3a:	69bb      	ldr	r3, [r7, #24]
 8009d3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009d3e:	e16e      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009d40:	2300      	movs	r3, #0
 8009d42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d44:	e16b      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009d46:	4b89      	ldr	r3, [pc, #548]	@ (8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009d4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009d52:	d107      	bne.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d54:	f107 030c 	add.w	r3, r7, #12
 8009d58:	4618      	mov	r0, r3
 8009d5a:	f000 fad3 	bl	800a304 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009d62:	e15c      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009d64:	2300      	movs	r3, #0
 8009d66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d68:	e159      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009d6a:	4b80      	ldr	r3, [pc, #512]	@ (8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009d6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009d6e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009d72:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009d74:	4b7d      	ldr	r3, [pc, #500]	@ (8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	f003 0304 	and.w	r3, r3, #4
 8009d7c:	2b04      	cmp	r3, #4
 8009d7e:	d10c      	bne.n	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8009d80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d109      	bne.n	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009d86:	4b79      	ldr	r3, [pc, #484]	@ (8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	08db      	lsrs	r3, r3, #3
 8009d8c:	f003 0303 	and.w	r3, r3, #3
 8009d90:	4a77      	ldr	r2, [pc, #476]	@ (8009f70 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8009d92:	fa22 f303 	lsr.w	r3, r2, r3
 8009d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009d98:	e01e      	b.n	8009dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009d9a:	4b74      	ldr	r3, [pc, #464]	@ (8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009da2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009da6:	d106      	bne.n	8009db6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8009da8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009daa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009dae:	d102      	bne.n	8009db6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009db0:	4b70      	ldr	r3, [pc, #448]	@ (8009f74 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8009db2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009db4:	e010      	b.n	8009dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009db6:	4b6d      	ldr	r3, [pc, #436]	@ (8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009dbe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009dc2:	d106      	bne.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8009dc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009dc6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009dca:	d102      	bne.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009dcc:	4b6a      	ldr	r3, [pc, #424]	@ (8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009dce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009dd0:	e002      	b.n	8009dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009dd6:	e122      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009dd8:	e121      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009dda:	2300      	movs	r3, #0
 8009ddc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009dde:	e11e      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009de0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009de4:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8009de8:	430b      	orrs	r3, r1
 8009dea:	d133      	bne.n	8009e54 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8009dec:	4b5f      	ldr	r3, [pc, #380]	@ (8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009dee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009df0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009df4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009df6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d004      	beq.n	8009e06 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8009dfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dfe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e02:	d012      	beq.n	8009e2a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8009e04:	e023      	b.n	8009e4e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009e06:	4b59      	ldr	r3, [pc, #356]	@ (8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009e0e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009e12:	d107      	bne.n	8009e24 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009e14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009e18:	4618      	mov	r0, r3
 8009e1a:	f000 fbc7 	bl	800a5ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e22:	e0fc      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009e24:	2300      	movs	r3, #0
 8009e26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e28:	e0f9      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009e2a:	4b50      	ldr	r3, [pc, #320]	@ (8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009e32:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009e36:	d107      	bne.n	8009e48 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e38:	f107 0318 	add.w	r3, r7, #24
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	f000 f90d 	bl	800a05c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009e42:	6a3b      	ldr	r3, [r7, #32]
 8009e44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e46:	e0ea      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009e48:	2300      	movs	r3, #0
 8009e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e4c:	e0e7      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009e4e:	2300      	movs	r3, #0
 8009e50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e52:	e0e4      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009e54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e58:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8009e5c:	430b      	orrs	r3, r1
 8009e5e:	f040 808d 	bne.w	8009f7c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8009e62:	4b42      	ldr	r3, [pc, #264]	@ (8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009e64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e66:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8009e6a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009e6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009e72:	d06b      	beq.n	8009f4c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8009e74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e76:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009e7a:	d874      	bhi.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009e7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e82:	d056      	beq.n	8009f32 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8009e84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e8a:	d86c      	bhi.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009e8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e8e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009e92:	d03b      	beq.n	8009f0c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8009e94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e96:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009e9a:	d864      	bhi.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009e9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009ea2:	d021      	beq.n	8009ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8009ea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ea6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009eaa:	d85c      	bhi.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009eac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d004      	beq.n	8009ebc <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8009eb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eb4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009eb8:	d004      	beq.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8009eba:	e054      	b.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009ebc:	f000 f8b8 	bl	800a030 <HAL_RCCEx_GetD3PCLK1Freq>
 8009ec0:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009ec2:	e0ac      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009ec4:	4b29      	ldr	r3, [pc, #164]	@ (8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009ecc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009ed0:	d107      	bne.n	8009ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ed2:	f107 0318 	add.w	r3, r7, #24
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f000 f8c0 	bl	800a05c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009edc:	69fb      	ldr	r3, [r7, #28]
 8009ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ee0:	e09d      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ee6:	e09a      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009ee8:	4b20      	ldr	r3, [pc, #128]	@ (8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009ef0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009ef4:	d107      	bne.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ef6:	f107 030c 	add.w	r3, r7, #12
 8009efa:	4618      	mov	r0, r3
 8009efc:	f000 fa02 	bl	800a304 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009f00:	693b      	ldr	r3, [r7, #16]
 8009f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f04:	e08b      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f06:	2300      	movs	r3, #0
 8009f08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f0a:	e088      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009f0c:	4b17      	ldr	r3, [pc, #92]	@ (8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	f003 0304 	and.w	r3, r3, #4
 8009f14:	2b04      	cmp	r3, #4
 8009f16:	d109      	bne.n	8009f2c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009f18:	4b14      	ldr	r3, [pc, #80]	@ (8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	08db      	lsrs	r3, r3, #3
 8009f1e:	f003 0303 	and.w	r3, r3, #3
 8009f22:	4a13      	ldr	r2, [pc, #76]	@ (8009f70 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8009f24:	fa22 f303 	lsr.w	r3, r2, r3
 8009f28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f2a:	e078      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f30:	e075      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009f32:	4b0e      	ldr	r3, [pc, #56]	@ (8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f3e:	d102      	bne.n	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8009f40:	4b0c      	ldr	r3, [pc, #48]	@ (8009f74 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8009f42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f44:	e06b      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f46:	2300      	movs	r3, #0
 8009f48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f4a:	e068      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009f4c:	4b07      	ldr	r3, [pc, #28]	@ (8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009f54:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009f58:	d102      	bne.n	8009f60 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8009f5a:	4b07      	ldr	r3, [pc, #28]	@ (8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009f5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f5e:	e05e      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f60:	2300      	movs	r3, #0
 8009f62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f64:	e05b      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8009f66:	2300      	movs	r3, #0
 8009f68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f6a:	e058      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009f6c:	58024400 	.word	0x58024400
 8009f70:	03d09000 	.word	0x03d09000
 8009f74:	003d0900 	.word	0x003d0900
 8009f78:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009f7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f80:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8009f84:	430b      	orrs	r3, r1
 8009f86:	d148      	bne.n	800a01a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009f88:	4b27      	ldr	r3, [pc, #156]	@ (800a028 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009f8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f8c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009f90:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009f92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009f98:	d02a      	beq.n	8009ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8009f9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009fa0:	d838      	bhi.n	800a014 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8009fa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d004      	beq.n	8009fb2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8009fa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009faa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009fae:	d00d      	beq.n	8009fcc <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8009fb0:	e030      	b.n	800a014 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009fb2:	4b1d      	ldr	r3, [pc, #116]	@ (800a028 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009fba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009fbe:	d102      	bne.n	8009fc6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8009fc0:	4b1a      	ldr	r3, [pc, #104]	@ (800a02c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8009fc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009fc4:	e02b      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009fca:	e028      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009fcc:	4b16      	ldr	r3, [pc, #88]	@ (800a028 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009fd4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009fd8:	d107      	bne.n	8009fea <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009fda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f000 fae4 	bl	800a5ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009fe8:	e019      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009fea:	2300      	movs	r3, #0
 8009fec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009fee:	e016      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009ff0:	4b0d      	ldr	r3, [pc, #52]	@ (800a028 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009ff8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009ffc:	d107      	bne.n	800a00e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ffe:	f107 0318 	add.w	r3, r7, #24
 800a002:	4618      	mov	r0, r3
 800a004:	f000 f82a 	bl	800a05c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a008:	69fb      	ldr	r3, [r7, #28]
 800a00a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a00c:	e007      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a00e:	2300      	movs	r3, #0
 800a010:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a012:	e004      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a014:	2300      	movs	r3, #0
 800a016:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a018:	e001      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800a01a:	2300      	movs	r3, #0
 800a01c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800a01e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a020:	4618      	mov	r0, r3
 800a022:	3740      	adds	r7, #64	@ 0x40
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}
 800a028:	58024400 	.word	0x58024400
 800a02c:	017d7840 	.word	0x017d7840

0800a030 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a034:	f7fe f816 	bl	8008064 <HAL_RCC_GetHCLKFreq>
 800a038:	4602      	mov	r2, r0
 800a03a:	4b06      	ldr	r3, [pc, #24]	@ (800a054 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a03c:	6a1b      	ldr	r3, [r3, #32]
 800a03e:	091b      	lsrs	r3, r3, #4
 800a040:	f003 0307 	and.w	r3, r3, #7
 800a044:	4904      	ldr	r1, [pc, #16]	@ (800a058 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a046:	5ccb      	ldrb	r3, [r1, r3]
 800a048:	f003 031f 	and.w	r3, r3, #31
 800a04c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a050:	4618      	mov	r0, r3
 800a052:	bd80      	pop	{r7, pc}
 800a054:	58024400 	.word	0x58024400
 800a058:	0800ce1c 	.word	0x0800ce1c

0800a05c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a05c:	b480      	push	{r7}
 800a05e:	b089      	sub	sp, #36	@ 0x24
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a064:	4ba1      	ldr	r3, [pc, #644]	@ (800a2ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a068:	f003 0303 	and.w	r3, r3, #3
 800a06c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a06e:	4b9f      	ldr	r3, [pc, #636]	@ (800a2ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a070:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a072:	0b1b      	lsrs	r3, r3, #12
 800a074:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a078:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a07a:	4b9c      	ldr	r3, [pc, #624]	@ (800a2ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a07c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a07e:	091b      	lsrs	r3, r3, #4
 800a080:	f003 0301 	and.w	r3, r3, #1
 800a084:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a086:	4b99      	ldr	r3, [pc, #612]	@ (800a2ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a088:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a08a:	08db      	lsrs	r3, r3, #3
 800a08c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a090:	693a      	ldr	r2, [r7, #16]
 800a092:	fb02 f303 	mul.w	r3, r2, r3
 800a096:	ee07 3a90 	vmov	s15, r3
 800a09a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a09e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a0a2:	697b      	ldr	r3, [r7, #20]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	f000 8111 	beq.w	800a2cc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a0aa:	69bb      	ldr	r3, [r7, #24]
 800a0ac:	2b02      	cmp	r3, #2
 800a0ae:	f000 8083 	beq.w	800a1b8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a0b2:	69bb      	ldr	r3, [r7, #24]
 800a0b4:	2b02      	cmp	r3, #2
 800a0b6:	f200 80a1 	bhi.w	800a1fc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a0ba:	69bb      	ldr	r3, [r7, #24]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d003      	beq.n	800a0c8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a0c0:	69bb      	ldr	r3, [r7, #24]
 800a0c2:	2b01      	cmp	r3, #1
 800a0c4:	d056      	beq.n	800a174 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a0c6:	e099      	b.n	800a1fc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a0c8:	4b88      	ldr	r3, [pc, #544]	@ (800a2ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	f003 0320 	and.w	r3, r3, #32
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d02d      	beq.n	800a130 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a0d4:	4b85      	ldr	r3, [pc, #532]	@ (800a2ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	08db      	lsrs	r3, r3, #3
 800a0da:	f003 0303 	and.w	r3, r3, #3
 800a0de:	4a84      	ldr	r2, [pc, #528]	@ (800a2f0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a0e0:	fa22 f303 	lsr.w	r3, r2, r3
 800a0e4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	ee07 3a90 	vmov	s15, r3
 800a0ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0f0:	697b      	ldr	r3, [r7, #20]
 800a0f2:	ee07 3a90 	vmov	s15, r3
 800a0f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0fe:	4b7b      	ldr	r3, [pc, #492]	@ (800a2ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a100:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a106:	ee07 3a90 	vmov	s15, r3
 800a10a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a10e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a112:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a2f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a116:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a11a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a11e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a122:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a12a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a12e:	e087      	b.n	800a240 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a130:	697b      	ldr	r3, [r7, #20]
 800a132:	ee07 3a90 	vmov	s15, r3
 800a136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a13a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a2f8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a13e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a142:	4b6a      	ldr	r3, [pc, #424]	@ (800a2ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a144:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a146:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a14a:	ee07 3a90 	vmov	s15, r3
 800a14e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a152:	ed97 6a03 	vldr	s12, [r7, #12]
 800a156:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a2f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a15a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a15e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a162:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a166:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a16a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a16e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a172:	e065      	b.n	800a240 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a174:	697b      	ldr	r3, [r7, #20]
 800a176:	ee07 3a90 	vmov	s15, r3
 800a17a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a17e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a2fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a182:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a186:	4b59      	ldr	r3, [pc, #356]	@ (800a2ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a188:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a18a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a18e:	ee07 3a90 	vmov	s15, r3
 800a192:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a196:	ed97 6a03 	vldr	s12, [r7, #12]
 800a19a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a2f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a19e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a1aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a1b6:	e043      	b.n	800a240 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a1b8:	697b      	ldr	r3, [r7, #20]
 800a1ba:	ee07 3a90 	vmov	s15, r3
 800a1be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1c2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a300 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a1c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1ca:	4b48      	ldr	r3, [pc, #288]	@ (800a2ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a1cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1d2:	ee07 3a90 	vmov	s15, r3
 800a1d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1da:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1de:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a2f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a1e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a1ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a1fa:	e021      	b.n	800a240 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a1fc:	697b      	ldr	r3, [r7, #20]
 800a1fe:	ee07 3a90 	vmov	s15, r3
 800a202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a206:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a2fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a20a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a20e:	4b37      	ldr	r3, [pc, #220]	@ (800a2ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a210:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a212:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a216:	ee07 3a90 	vmov	s15, r3
 800a21a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a21e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a222:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a2f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a226:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a22a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a22e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a232:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a236:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a23a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a23e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800a240:	4b2a      	ldr	r3, [pc, #168]	@ (800a2ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a244:	0a5b      	lsrs	r3, r3, #9
 800a246:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a24a:	ee07 3a90 	vmov	s15, r3
 800a24e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a252:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a256:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a25a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a25e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a262:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a266:	ee17 2a90 	vmov	r2, s15
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800a26e:	4b1f      	ldr	r3, [pc, #124]	@ (800a2ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a270:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a272:	0c1b      	lsrs	r3, r3, #16
 800a274:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a278:	ee07 3a90 	vmov	s15, r3
 800a27c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a280:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a284:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a288:	edd7 6a07 	vldr	s13, [r7, #28]
 800a28c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a290:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a294:	ee17 2a90 	vmov	r2, s15
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800a29c:	4b13      	ldr	r3, [pc, #76]	@ (800a2ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a29e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2a0:	0e1b      	lsrs	r3, r3, #24
 800a2a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a2a6:	ee07 3a90 	vmov	s15, r3
 800a2aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a2b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a2b6:	edd7 6a07 	vldr	s13, [r7, #28]
 800a2ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a2be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a2c2:	ee17 2a90 	vmov	r2, s15
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a2ca:	e008      	b.n	800a2de <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2200      	movs	r2, #0
 800a2dc:	609a      	str	r2, [r3, #8]
}
 800a2de:	bf00      	nop
 800a2e0:	3724      	adds	r7, #36	@ 0x24
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e8:	4770      	bx	lr
 800a2ea:	bf00      	nop
 800a2ec:	58024400 	.word	0x58024400
 800a2f0:	03d09000 	.word	0x03d09000
 800a2f4:	46000000 	.word	0x46000000
 800a2f8:	4c742400 	.word	0x4c742400
 800a2fc:	4a742400 	.word	0x4a742400
 800a300:	4bbebc20 	.word	0x4bbebc20

0800a304 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800a304:	b480      	push	{r7}
 800a306:	b089      	sub	sp, #36	@ 0x24
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a30c:	4ba1      	ldr	r3, [pc, #644]	@ (800a594 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a30e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a310:	f003 0303 	and.w	r3, r3, #3
 800a314:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800a316:	4b9f      	ldr	r3, [pc, #636]	@ (800a594 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a318:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a31a:	0d1b      	lsrs	r3, r3, #20
 800a31c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a320:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a322:	4b9c      	ldr	r3, [pc, #624]	@ (800a594 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a326:	0a1b      	lsrs	r3, r3, #8
 800a328:	f003 0301 	and.w	r3, r3, #1
 800a32c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800a32e:	4b99      	ldr	r3, [pc, #612]	@ (800a594 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a332:	08db      	lsrs	r3, r3, #3
 800a334:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a338:	693a      	ldr	r2, [r7, #16]
 800a33a:	fb02 f303 	mul.w	r3, r2, r3
 800a33e:	ee07 3a90 	vmov	s15, r3
 800a342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a346:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a34a:	697b      	ldr	r3, [r7, #20]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	f000 8111 	beq.w	800a574 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a352:	69bb      	ldr	r3, [r7, #24]
 800a354:	2b02      	cmp	r3, #2
 800a356:	f000 8083 	beq.w	800a460 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a35a:	69bb      	ldr	r3, [r7, #24]
 800a35c:	2b02      	cmp	r3, #2
 800a35e:	f200 80a1 	bhi.w	800a4a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a362:	69bb      	ldr	r3, [r7, #24]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d003      	beq.n	800a370 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a368:	69bb      	ldr	r3, [r7, #24]
 800a36a:	2b01      	cmp	r3, #1
 800a36c:	d056      	beq.n	800a41c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a36e:	e099      	b.n	800a4a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a370:	4b88      	ldr	r3, [pc, #544]	@ (800a594 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f003 0320 	and.w	r3, r3, #32
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d02d      	beq.n	800a3d8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a37c:	4b85      	ldr	r3, [pc, #532]	@ (800a594 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	08db      	lsrs	r3, r3, #3
 800a382:	f003 0303 	and.w	r3, r3, #3
 800a386:	4a84      	ldr	r2, [pc, #528]	@ (800a598 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a388:	fa22 f303 	lsr.w	r3, r2, r3
 800a38c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	ee07 3a90 	vmov	s15, r3
 800a394:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a398:	697b      	ldr	r3, [r7, #20]
 800a39a:	ee07 3a90 	vmov	s15, r3
 800a39e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a3a6:	4b7b      	ldr	r3, [pc, #492]	@ (800a594 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a3a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3ae:	ee07 3a90 	vmov	s15, r3
 800a3b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a3ba:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a59c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a3be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a3c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a3ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3d2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a3d6:	e087      	b.n	800a4e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a3d8:	697b      	ldr	r3, [r7, #20]
 800a3da:	ee07 3a90 	vmov	s15, r3
 800a3de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3e2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a5a0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a3e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a3ea:	4b6a      	ldr	r3, [pc, #424]	@ (800a594 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a3ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3f2:	ee07 3a90 	vmov	s15, r3
 800a3f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3fa:	ed97 6a03 	vldr	s12, [r7, #12]
 800a3fe:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a59c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a402:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a406:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a40a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a40e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a412:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a416:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a41a:	e065      	b.n	800a4e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a41c:	697b      	ldr	r3, [r7, #20]
 800a41e:	ee07 3a90 	vmov	s15, r3
 800a422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a426:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a5a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a42a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a42e:	4b59      	ldr	r3, [pc, #356]	@ (800a594 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a436:	ee07 3a90 	vmov	s15, r3
 800a43a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a43e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a442:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a59c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a446:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a44a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a44e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a452:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a45a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a45e:	e043      	b.n	800a4e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a460:	697b      	ldr	r3, [r7, #20]
 800a462:	ee07 3a90 	vmov	s15, r3
 800a466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a46a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a5a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a46e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a472:	4b48      	ldr	r3, [pc, #288]	@ (800a594 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a47a:	ee07 3a90 	vmov	s15, r3
 800a47e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a482:	ed97 6a03 	vldr	s12, [r7, #12]
 800a486:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a59c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a48a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a48e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a492:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a496:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a49a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a49e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a4a2:	e021      	b.n	800a4e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a4a4:	697b      	ldr	r3, [r7, #20]
 800a4a6:	ee07 3a90 	vmov	s15, r3
 800a4aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4ae:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a5a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a4b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4b6:	4b37      	ldr	r3, [pc, #220]	@ (800a594 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a4b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4be:	ee07 3a90 	vmov	s15, r3
 800a4c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4c6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a4ca:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a59c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a4ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a4da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a4e6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800a4e8:	4b2a      	ldr	r3, [pc, #168]	@ (800a594 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a4ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4ec:	0a5b      	lsrs	r3, r3, #9
 800a4ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a4f2:	ee07 3a90 	vmov	s15, r3
 800a4f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a4fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a502:	edd7 6a07 	vldr	s13, [r7, #28]
 800a506:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a50a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a50e:	ee17 2a90 	vmov	r2, s15
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800a516:	4b1f      	ldr	r3, [pc, #124]	@ (800a594 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a51a:	0c1b      	lsrs	r3, r3, #16
 800a51c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a520:	ee07 3a90 	vmov	s15, r3
 800a524:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a528:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a52c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a530:	edd7 6a07 	vldr	s13, [r7, #28]
 800a534:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a538:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a53c:	ee17 2a90 	vmov	r2, s15
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800a544:	4b13      	ldr	r3, [pc, #76]	@ (800a594 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a548:	0e1b      	lsrs	r3, r3, #24
 800a54a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a54e:	ee07 3a90 	vmov	s15, r3
 800a552:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a556:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a55a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a55e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a562:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a566:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a56a:	ee17 2a90 	vmov	r2, s15
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a572:	e008      	b.n	800a586 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2200      	movs	r2, #0
 800a578:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2200      	movs	r2, #0
 800a57e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2200      	movs	r2, #0
 800a584:	609a      	str	r2, [r3, #8]
}
 800a586:	bf00      	nop
 800a588:	3724      	adds	r7, #36	@ 0x24
 800a58a:	46bd      	mov	sp, r7
 800a58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a590:	4770      	bx	lr
 800a592:	bf00      	nop
 800a594:	58024400 	.word	0x58024400
 800a598:	03d09000 	.word	0x03d09000
 800a59c:	46000000 	.word	0x46000000
 800a5a0:	4c742400 	.word	0x4c742400
 800a5a4:	4a742400 	.word	0x4a742400
 800a5a8:	4bbebc20 	.word	0x4bbebc20

0800a5ac <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	b089      	sub	sp, #36	@ 0x24
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a5b4:	4ba0      	ldr	r3, [pc, #640]	@ (800a838 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a5b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5b8:	f003 0303 	and.w	r3, r3, #3
 800a5bc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800a5be:	4b9e      	ldr	r3, [pc, #632]	@ (800a838 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a5c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5c2:	091b      	lsrs	r3, r3, #4
 800a5c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a5c8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a5ca:	4b9b      	ldr	r3, [pc, #620]	@ (800a838 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a5cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5ce:	f003 0301 	and.w	r3, r3, #1
 800a5d2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a5d4:	4b98      	ldr	r3, [pc, #608]	@ (800a838 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a5d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a5d8:	08db      	lsrs	r3, r3, #3
 800a5da:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a5de:	693a      	ldr	r2, [r7, #16]
 800a5e0:	fb02 f303 	mul.w	r3, r2, r3
 800a5e4:	ee07 3a90 	vmov	s15, r3
 800a5e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5ec:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a5f0:	697b      	ldr	r3, [r7, #20]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	f000 8111 	beq.w	800a81a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800a5f8:	69bb      	ldr	r3, [r7, #24]
 800a5fa:	2b02      	cmp	r3, #2
 800a5fc:	f000 8083 	beq.w	800a706 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800a600:	69bb      	ldr	r3, [r7, #24]
 800a602:	2b02      	cmp	r3, #2
 800a604:	f200 80a1 	bhi.w	800a74a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800a608:	69bb      	ldr	r3, [r7, #24]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d003      	beq.n	800a616 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800a60e:	69bb      	ldr	r3, [r7, #24]
 800a610:	2b01      	cmp	r3, #1
 800a612:	d056      	beq.n	800a6c2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800a614:	e099      	b.n	800a74a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a616:	4b88      	ldr	r3, [pc, #544]	@ (800a838 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	f003 0320 	and.w	r3, r3, #32
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d02d      	beq.n	800a67e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a622:	4b85      	ldr	r3, [pc, #532]	@ (800a838 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	08db      	lsrs	r3, r3, #3
 800a628:	f003 0303 	and.w	r3, r3, #3
 800a62c:	4a83      	ldr	r2, [pc, #524]	@ (800a83c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800a62e:	fa22 f303 	lsr.w	r3, r2, r3
 800a632:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a634:	68bb      	ldr	r3, [r7, #8]
 800a636:	ee07 3a90 	vmov	s15, r3
 800a63a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a63e:	697b      	ldr	r3, [r7, #20]
 800a640:	ee07 3a90 	vmov	s15, r3
 800a644:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a648:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a64c:	4b7a      	ldr	r3, [pc, #488]	@ (800a838 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a64e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a650:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a654:	ee07 3a90 	vmov	s15, r3
 800a658:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a65c:	ed97 6a03 	vldr	s12, [r7, #12]
 800a660:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800a840 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a664:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a668:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a66c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a670:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a674:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a678:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a67c:	e087      	b.n	800a78e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a67e:	697b      	ldr	r3, [r7, #20]
 800a680:	ee07 3a90 	vmov	s15, r3
 800a684:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a688:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800a844 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a68c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a690:	4b69      	ldr	r3, [pc, #420]	@ (800a838 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a692:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a694:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a698:	ee07 3a90 	vmov	s15, r3
 800a69c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6a0:	ed97 6a03 	vldr	s12, [r7, #12]
 800a6a4:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800a840 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a6a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6b0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a6b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6bc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a6c0:	e065      	b.n	800a78e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a6c2:	697b      	ldr	r3, [r7, #20]
 800a6c4:	ee07 3a90 	vmov	s15, r3
 800a6c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6cc:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800a848 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a6d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6d4:	4b58      	ldr	r3, [pc, #352]	@ (800a838 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a6d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6dc:	ee07 3a90 	vmov	s15, r3
 800a6e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6e4:	ed97 6a03 	vldr	s12, [r7, #12]
 800a6e8:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800a840 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a6ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6f4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a6f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a700:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a704:	e043      	b.n	800a78e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a706:	697b      	ldr	r3, [r7, #20]
 800a708:	ee07 3a90 	vmov	s15, r3
 800a70c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a710:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800a84c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a714:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a718:	4b47      	ldr	r3, [pc, #284]	@ (800a838 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a71a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a71c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a720:	ee07 3a90 	vmov	s15, r3
 800a724:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a728:	ed97 6a03 	vldr	s12, [r7, #12]
 800a72c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800a840 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a730:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a734:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a738:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a73c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a740:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a744:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a748:	e021      	b.n	800a78e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a74a:	697b      	ldr	r3, [r7, #20]
 800a74c:	ee07 3a90 	vmov	s15, r3
 800a750:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a754:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800a844 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a758:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a75c:	4b36      	ldr	r3, [pc, #216]	@ (800a838 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a75e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a760:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a764:	ee07 3a90 	vmov	s15, r3
 800a768:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a76c:	ed97 6a03 	vldr	s12, [r7, #12]
 800a770:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800a840 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a774:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a778:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a77c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a780:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a784:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a788:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a78c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800a78e:	4b2a      	ldr	r3, [pc, #168]	@ (800a838 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a792:	0a5b      	lsrs	r3, r3, #9
 800a794:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a798:	ee07 3a90 	vmov	s15, r3
 800a79c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7a0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a7a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a7a8:	edd7 6a07 	vldr	s13, [r7, #28]
 800a7ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a7b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a7b4:	ee17 2a90 	vmov	r2, s15
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800a7bc:	4b1e      	ldr	r3, [pc, #120]	@ (800a838 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a7be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7c0:	0c1b      	lsrs	r3, r3, #16
 800a7c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a7c6:	ee07 3a90 	vmov	s15, r3
 800a7ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a7d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a7d6:	edd7 6a07 	vldr	s13, [r7, #28]
 800a7da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a7de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a7e2:	ee17 2a90 	vmov	r2, s15
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800a7ea:	4b13      	ldr	r3, [pc, #76]	@ (800a838 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a7ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7ee:	0e1b      	lsrs	r3, r3, #24
 800a7f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a7f4:	ee07 3a90 	vmov	s15, r3
 800a7f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7fc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a800:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a804:	edd7 6a07 	vldr	s13, [r7, #28]
 800a808:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a80c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a810:	ee17 2a90 	vmov	r2, s15
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a818:	e008      	b.n	800a82c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2200      	movs	r2, #0
 800a81e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2200      	movs	r2, #0
 800a824:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2200      	movs	r2, #0
 800a82a:	609a      	str	r2, [r3, #8]
}
 800a82c:	bf00      	nop
 800a82e:	3724      	adds	r7, #36	@ 0x24
 800a830:	46bd      	mov	sp, r7
 800a832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a836:	4770      	bx	lr
 800a838:	58024400 	.word	0x58024400
 800a83c:	03d09000 	.word	0x03d09000
 800a840:	46000000 	.word	0x46000000
 800a844:	4c742400 	.word	0x4c742400
 800a848:	4a742400 	.word	0x4a742400
 800a84c:	4bbebc20 	.word	0x4bbebc20

0800a850 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a850:	b580      	push	{r7, lr}
 800a852:	b084      	sub	sp, #16
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
 800a858:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a85a:	2300      	movs	r3, #0
 800a85c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a85e:	4b53      	ldr	r3, [pc, #332]	@ (800a9ac <RCCEx_PLL2_Config+0x15c>)
 800a860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a862:	f003 0303 	and.w	r3, r3, #3
 800a866:	2b03      	cmp	r3, #3
 800a868:	d101      	bne.n	800a86e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a86a:	2301      	movs	r3, #1
 800a86c:	e099      	b.n	800a9a2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a86e:	4b4f      	ldr	r3, [pc, #316]	@ (800a9ac <RCCEx_PLL2_Config+0x15c>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	4a4e      	ldr	r2, [pc, #312]	@ (800a9ac <RCCEx_PLL2_Config+0x15c>)
 800a874:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a878:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a87a:	f7f8 fb29 	bl	8002ed0 <HAL_GetTick>
 800a87e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a880:	e008      	b.n	800a894 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a882:	f7f8 fb25 	bl	8002ed0 <HAL_GetTick>
 800a886:	4602      	mov	r2, r0
 800a888:	68bb      	ldr	r3, [r7, #8]
 800a88a:	1ad3      	subs	r3, r2, r3
 800a88c:	2b02      	cmp	r3, #2
 800a88e:	d901      	bls.n	800a894 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a890:	2303      	movs	r3, #3
 800a892:	e086      	b.n	800a9a2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a894:	4b45      	ldr	r3, [pc, #276]	@ (800a9ac <RCCEx_PLL2_Config+0x15c>)
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d1f0      	bne.n	800a882 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a8a0:	4b42      	ldr	r3, [pc, #264]	@ (800a9ac <RCCEx_PLL2_Config+0x15c>)
 800a8a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8a4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	031b      	lsls	r3, r3, #12
 800a8ae:	493f      	ldr	r1, [pc, #252]	@ (800a9ac <RCCEx_PLL2_Config+0x15c>)
 800a8b0:	4313      	orrs	r3, r2
 800a8b2:	628b      	str	r3, [r1, #40]	@ 0x28
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	685b      	ldr	r3, [r3, #4]
 800a8b8:	3b01      	subs	r3, #1
 800a8ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	689b      	ldr	r3, [r3, #8]
 800a8c2:	3b01      	subs	r3, #1
 800a8c4:	025b      	lsls	r3, r3, #9
 800a8c6:	b29b      	uxth	r3, r3
 800a8c8:	431a      	orrs	r2, r3
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	68db      	ldr	r3, [r3, #12]
 800a8ce:	3b01      	subs	r3, #1
 800a8d0:	041b      	lsls	r3, r3, #16
 800a8d2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a8d6:	431a      	orrs	r2, r3
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	691b      	ldr	r3, [r3, #16]
 800a8dc:	3b01      	subs	r3, #1
 800a8de:	061b      	lsls	r3, r3, #24
 800a8e0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a8e4:	4931      	ldr	r1, [pc, #196]	@ (800a9ac <RCCEx_PLL2_Config+0x15c>)
 800a8e6:	4313      	orrs	r3, r2
 800a8e8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a8ea:	4b30      	ldr	r3, [pc, #192]	@ (800a9ac <RCCEx_PLL2_Config+0x15c>)
 800a8ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8ee:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	695b      	ldr	r3, [r3, #20]
 800a8f6:	492d      	ldr	r1, [pc, #180]	@ (800a9ac <RCCEx_PLL2_Config+0x15c>)
 800a8f8:	4313      	orrs	r3, r2
 800a8fa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a8fc:	4b2b      	ldr	r3, [pc, #172]	@ (800a9ac <RCCEx_PLL2_Config+0x15c>)
 800a8fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a900:	f023 0220 	bic.w	r2, r3, #32
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	699b      	ldr	r3, [r3, #24]
 800a908:	4928      	ldr	r1, [pc, #160]	@ (800a9ac <RCCEx_PLL2_Config+0x15c>)
 800a90a:	4313      	orrs	r3, r2
 800a90c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a90e:	4b27      	ldr	r3, [pc, #156]	@ (800a9ac <RCCEx_PLL2_Config+0x15c>)
 800a910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a912:	4a26      	ldr	r2, [pc, #152]	@ (800a9ac <RCCEx_PLL2_Config+0x15c>)
 800a914:	f023 0310 	bic.w	r3, r3, #16
 800a918:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a91a:	4b24      	ldr	r3, [pc, #144]	@ (800a9ac <RCCEx_PLL2_Config+0x15c>)
 800a91c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a91e:	4b24      	ldr	r3, [pc, #144]	@ (800a9b0 <RCCEx_PLL2_Config+0x160>)
 800a920:	4013      	ands	r3, r2
 800a922:	687a      	ldr	r2, [r7, #4]
 800a924:	69d2      	ldr	r2, [r2, #28]
 800a926:	00d2      	lsls	r2, r2, #3
 800a928:	4920      	ldr	r1, [pc, #128]	@ (800a9ac <RCCEx_PLL2_Config+0x15c>)
 800a92a:	4313      	orrs	r3, r2
 800a92c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a92e:	4b1f      	ldr	r3, [pc, #124]	@ (800a9ac <RCCEx_PLL2_Config+0x15c>)
 800a930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a932:	4a1e      	ldr	r2, [pc, #120]	@ (800a9ac <RCCEx_PLL2_Config+0x15c>)
 800a934:	f043 0310 	orr.w	r3, r3, #16
 800a938:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d106      	bne.n	800a94e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a940:	4b1a      	ldr	r3, [pc, #104]	@ (800a9ac <RCCEx_PLL2_Config+0x15c>)
 800a942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a944:	4a19      	ldr	r2, [pc, #100]	@ (800a9ac <RCCEx_PLL2_Config+0x15c>)
 800a946:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a94a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a94c:	e00f      	b.n	800a96e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	2b01      	cmp	r3, #1
 800a952:	d106      	bne.n	800a962 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a954:	4b15      	ldr	r3, [pc, #84]	@ (800a9ac <RCCEx_PLL2_Config+0x15c>)
 800a956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a958:	4a14      	ldr	r2, [pc, #80]	@ (800a9ac <RCCEx_PLL2_Config+0x15c>)
 800a95a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a95e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a960:	e005      	b.n	800a96e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a962:	4b12      	ldr	r3, [pc, #72]	@ (800a9ac <RCCEx_PLL2_Config+0x15c>)
 800a964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a966:	4a11      	ldr	r2, [pc, #68]	@ (800a9ac <RCCEx_PLL2_Config+0x15c>)
 800a968:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a96c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a96e:	4b0f      	ldr	r3, [pc, #60]	@ (800a9ac <RCCEx_PLL2_Config+0x15c>)
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	4a0e      	ldr	r2, [pc, #56]	@ (800a9ac <RCCEx_PLL2_Config+0x15c>)
 800a974:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a978:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a97a:	f7f8 faa9 	bl	8002ed0 <HAL_GetTick>
 800a97e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a980:	e008      	b.n	800a994 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a982:	f7f8 faa5 	bl	8002ed0 <HAL_GetTick>
 800a986:	4602      	mov	r2, r0
 800a988:	68bb      	ldr	r3, [r7, #8]
 800a98a:	1ad3      	subs	r3, r2, r3
 800a98c:	2b02      	cmp	r3, #2
 800a98e:	d901      	bls.n	800a994 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a990:	2303      	movs	r3, #3
 800a992:	e006      	b.n	800a9a2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a994:	4b05      	ldr	r3, [pc, #20]	@ (800a9ac <RCCEx_PLL2_Config+0x15c>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d0f0      	beq.n	800a982 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a9a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	3710      	adds	r7, #16
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bd80      	pop	{r7, pc}
 800a9aa:	bf00      	nop
 800a9ac:	58024400 	.word	0x58024400
 800a9b0:	ffff0007 	.word	0xffff0007

0800a9b4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b084      	sub	sp, #16
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
 800a9bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a9be:	2300      	movs	r3, #0
 800a9c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a9c2:	4b53      	ldr	r3, [pc, #332]	@ (800ab10 <RCCEx_PLL3_Config+0x15c>)
 800a9c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9c6:	f003 0303 	and.w	r3, r3, #3
 800a9ca:	2b03      	cmp	r3, #3
 800a9cc:	d101      	bne.n	800a9d2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a9ce:	2301      	movs	r3, #1
 800a9d0:	e099      	b.n	800ab06 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a9d2:	4b4f      	ldr	r3, [pc, #316]	@ (800ab10 <RCCEx_PLL3_Config+0x15c>)
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	4a4e      	ldr	r2, [pc, #312]	@ (800ab10 <RCCEx_PLL3_Config+0x15c>)
 800a9d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a9dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a9de:	f7f8 fa77 	bl	8002ed0 <HAL_GetTick>
 800a9e2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a9e4:	e008      	b.n	800a9f8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a9e6:	f7f8 fa73 	bl	8002ed0 <HAL_GetTick>
 800a9ea:	4602      	mov	r2, r0
 800a9ec:	68bb      	ldr	r3, [r7, #8]
 800a9ee:	1ad3      	subs	r3, r2, r3
 800a9f0:	2b02      	cmp	r3, #2
 800a9f2:	d901      	bls.n	800a9f8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a9f4:	2303      	movs	r3, #3
 800a9f6:	e086      	b.n	800ab06 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a9f8:	4b45      	ldr	r3, [pc, #276]	@ (800ab10 <RCCEx_PLL3_Config+0x15c>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d1f0      	bne.n	800a9e6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800aa04:	4b42      	ldr	r3, [pc, #264]	@ (800ab10 <RCCEx_PLL3_Config+0x15c>)
 800aa06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa08:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	051b      	lsls	r3, r3, #20
 800aa12:	493f      	ldr	r1, [pc, #252]	@ (800ab10 <RCCEx_PLL3_Config+0x15c>)
 800aa14:	4313      	orrs	r3, r2
 800aa16:	628b      	str	r3, [r1, #40]	@ 0x28
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	685b      	ldr	r3, [r3, #4]
 800aa1c:	3b01      	subs	r3, #1
 800aa1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	689b      	ldr	r3, [r3, #8]
 800aa26:	3b01      	subs	r3, #1
 800aa28:	025b      	lsls	r3, r3, #9
 800aa2a:	b29b      	uxth	r3, r3
 800aa2c:	431a      	orrs	r2, r3
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	68db      	ldr	r3, [r3, #12]
 800aa32:	3b01      	subs	r3, #1
 800aa34:	041b      	lsls	r3, r3, #16
 800aa36:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800aa3a:	431a      	orrs	r2, r3
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	691b      	ldr	r3, [r3, #16]
 800aa40:	3b01      	subs	r3, #1
 800aa42:	061b      	lsls	r3, r3, #24
 800aa44:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800aa48:	4931      	ldr	r1, [pc, #196]	@ (800ab10 <RCCEx_PLL3_Config+0x15c>)
 800aa4a:	4313      	orrs	r3, r2
 800aa4c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800aa4e:	4b30      	ldr	r3, [pc, #192]	@ (800ab10 <RCCEx_PLL3_Config+0x15c>)
 800aa50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa52:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	695b      	ldr	r3, [r3, #20]
 800aa5a:	492d      	ldr	r1, [pc, #180]	@ (800ab10 <RCCEx_PLL3_Config+0x15c>)
 800aa5c:	4313      	orrs	r3, r2
 800aa5e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800aa60:	4b2b      	ldr	r3, [pc, #172]	@ (800ab10 <RCCEx_PLL3_Config+0x15c>)
 800aa62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa64:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	699b      	ldr	r3, [r3, #24]
 800aa6c:	4928      	ldr	r1, [pc, #160]	@ (800ab10 <RCCEx_PLL3_Config+0x15c>)
 800aa6e:	4313      	orrs	r3, r2
 800aa70:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800aa72:	4b27      	ldr	r3, [pc, #156]	@ (800ab10 <RCCEx_PLL3_Config+0x15c>)
 800aa74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa76:	4a26      	ldr	r2, [pc, #152]	@ (800ab10 <RCCEx_PLL3_Config+0x15c>)
 800aa78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aa7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800aa7e:	4b24      	ldr	r3, [pc, #144]	@ (800ab10 <RCCEx_PLL3_Config+0x15c>)
 800aa80:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800aa82:	4b24      	ldr	r3, [pc, #144]	@ (800ab14 <RCCEx_PLL3_Config+0x160>)
 800aa84:	4013      	ands	r3, r2
 800aa86:	687a      	ldr	r2, [r7, #4]
 800aa88:	69d2      	ldr	r2, [r2, #28]
 800aa8a:	00d2      	lsls	r2, r2, #3
 800aa8c:	4920      	ldr	r1, [pc, #128]	@ (800ab10 <RCCEx_PLL3_Config+0x15c>)
 800aa8e:	4313      	orrs	r3, r2
 800aa90:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800aa92:	4b1f      	ldr	r3, [pc, #124]	@ (800ab10 <RCCEx_PLL3_Config+0x15c>)
 800aa94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa96:	4a1e      	ldr	r2, [pc, #120]	@ (800ab10 <RCCEx_PLL3_Config+0x15c>)
 800aa98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aa9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d106      	bne.n	800aab2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800aaa4:	4b1a      	ldr	r3, [pc, #104]	@ (800ab10 <RCCEx_PLL3_Config+0x15c>)
 800aaa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aaa8:	4a19      	ldr	r2, [pc, #100]	@ (800ab10 <RCCEx_PLL3_Config+0x15c>)
 800aaaa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800aaae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800aab0:	e00f      	b.n	800aad2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800aab2:	683b      	ldr	r3, [r7, #0]
 800aab4:	2b01      	cmp	r3, #1
 800aab6:	d106      	bne.n	800aac6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800aab8:	4b15      	ldr	r3, [pc, #84]	@ (800ab10 <RCCEx_PLL3_Config+0x15c>)
 800aaba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aabc:	4a14      	ldr	r2, [pc, #80]	@ (800ab10 <RCCEx_PLL3_Config+0x15c>)
 800aabe:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800aac2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800aac4:	e005      	b.n	800aad2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800aac6:	4b12      	ldr	r3, [pc, #72]	@ (800ab10 <RCCEx_PLL3_Config+0x15c>)
 800aac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aaca:	4a11      	ldr	r2, [pc, #68]	@ (800ab10 <RCCEx_PLL3_Config+0x15c>)
 800aacc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800aad0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800aad2:	4b0f      	ldr	r3, [pc, #60]	@ (800ab10 <RCCEx_PLL3_Config+0x15c>)
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	4a0e      	ldr	r2, [pc, #56]	@ (800ab10 <RCCEx_PLL3_Config+0x15c>)
 800aad8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aadc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aade:	f7f8 f9f7 	bl	8002ed0 <HAL_GetTick>
 800aae2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800aae4:	e008      	b.n	800aaf8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800aae6:	f7f8 f9f3 	bl	8002ed0 <HAL_GetTick>
 800aaea:	4602      	mov	r2, r0
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	1ad3      	subs	r3, r2, r3
 800aaf0:	2b02      	cmp	r3, #2
 800aaf2:	d901      	bls.n	800aaf8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800aaf4:	2303      	movs	r3, #3
 800aaf6:	e006      	b.n	800ab06 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800aaf8:	4b05      	ldr	r3, [pc, #20]	@ (800ab10 <RCCEx_PLL3_Config+0x15c>)
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d0f0      	beq.n	800aae6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800ab04:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab06:	4618      	mov	r0, r3
 800ab08:	3710      	adds	r7, #16
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	bd80      	pop	{r7, pc}
 800ab0e:	bf00      	nop
 800ab10:	58024400 	.word	0x58024400
 800ab14:	ffff0007 	.word	0xffff0007

0800ab18 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b086      	sub	sp, #24
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	60f8      	str	r0, [r7, #12]
 800ab20:	60b9      	str	r1, [r7, #8]
 800ab22:	607a      	str	r2, [r7, #4]
 800ab24:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800ab26:	68bb      	ldr	r3, [r7, #8]
 800ab28:	2b02      	cmp	r3, #2
 800ab2a:	d904      	bls.n	800ab36 <HAL_SAI_InitProtocol+0x1e>
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	3b03      	subs	r3, #3
 800ab30:	2b01      	cmp	r3, #1
 800ab32:	d812      	bhi.n	800ab5a <HAL_SAI_InitProtocol+0x42>
 800ab34:	e008      	b.n	800ab48 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	687a      	ldr	r2, [r7, #4]
 800ab3a:	68b9      	ldr	r1, [r7, #8]
 800ab3c:	68f8      	ldr	r0, [r7, #12]
 800ab3e:	f000 fc2f 	bl	800b3a0 <SAI_InitI2S>
 800ab42:	4603      	mov	r3, r0
 800ab44:	75fb      	strb	r3, [r7, #23]
      break;
 800ab46:	e00b      	b.n	800ab60 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	687a      	ldr	r2, [r7, #4]
 800ab4c:	68b9      	ldr	r1, [r7, #8]
 800ab4e:	68f8      	ldr	r0, [r7, #12]
 800ab50:	f000 fcd8 	bl	800b504 <SAI_InitPCM>
 800ab54:	4603      	mov	r3, r0
 800ab56:	75fb      	strb	r3, [r7, #23]
      break;
 800ab58:	e002      	b.n	800ab60 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800ab5a:	2301      	movs	r3, #1
 800ab5c:	75fb      	strb	r3, [r7, #23]
      break;
 800ab5e:	bf00      	nop
  }

  if (status == HAL_OK)
 800ab60:	7dfb      	ldrb	r3, [r7, #23]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d104      	bne.n	800ab70 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800ab66:	68f8      	ldr	r0, [r7, #12]
 800ab68:	f000 f808 	bl	800ab7c <HAL_SAI_Init>
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800ab70:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab72:	4618      	mov	r0, r3
 800ab74:	3718      	adds	r7, #24
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}
	...

0800ab7c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b08a      	sub	sp, #40	@ 0x28
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d101      	bne.n	800ab8e <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800ab8a:	2301      	movs	r3, #1
 800ab8c:	e28e      	b.n	800b0ac <HAL_SAI_Init+0x530>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800ab8e:	f7f8 f9cf 	bl	8002f30 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800ab98:	2b01      	cmp	r3, #1
 800ab9a:	d113      	bne.n	800abc4 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	4a96      	ldr	r2, [pc, #600]	@ (800adfc <HAL_SAI_Init+0x280>)
 800aba2:	4293      	cmp	r3, r2
 800aba4:	d004      	beq.n	800abb0 <HAL_SAI_Init+0x34>
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	4a95      	ldr	r2, [pc, #596]	@ (800ae00 <HAL_SAI_Init+0x284>)
 800abac:	4293      	cmp	r3, r2
 800abae:	d107      	bne.n	800abc0 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800abb4:	2b01      	cmp	r3, #1
 800abb6:	d103      	bne.n	800abc0 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d001      	beq.n	800abc4 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 800abc0:	2301      	movs	r3, #1
 800abc2:	e273      	b.n	800b0ac <HAL_SAI_Init+0x530>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	4a8c      	ldr	r2, [pc, #560]	@ (800adfc <HAL_SAI_Init+0x280>)
 800abca:	4293      	cmp	r3, r2
 800abcc:	d004      	beq.n	800abd8 <HAL_SAI_Init+0x5c>
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	4a8c      	ldr	r2, [pc, #560]	@ (800ae04 <HAL_SAI_Init+0x288>)
 800abd4:	4293      	cmp	r3, r2
 800abd6:	d102      	bne.n	800abde <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 800abd8:	4b8b      	ldr	r3, [pc, #556]	@ (800ae08 <HAL_SAI_Init+0x28c>)
 800abda:	61bb      	str	r3, [r7, #24]
 800abdc:	e028      	b.n	800ac30 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	4a8a      	ldr	r2, [pc, #552]	@ (800ae0c <HAL_SAI_Init+0x290>)
 800abe4:	4293      	cmp	r3, r2
 800abe6:	d004      	beq.n	800abf2 <HAL_SAI_Init+0x76>
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	4a88      	ldr	r2, [pc, #544]	@ (800ae10 <HAL_SAI_Init+0x294>)
 800abee:	4293      	cmp	r3, r2
 800abf0:	d102      	bne.n	800abf8 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 800abf2:	4b88      	ldr	r3, [pc, #544]	@ (800ae14 <HAL_SAI_Init+0x298>)
 800abf4:	61bb      	str	r3, [r7, #24]
 800abf6:	e01b      	b.n	800ac30 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	4a86      	ldr	r2, [pc, #536]	@ (800ae18 <HAL_SAI_Init+0x29c>)
 800abfe:	4293      	cmp	r3, r2
 800ac00:	d004      	beq.n	800ac0c <HAL_SAI_Init+0x90>
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	4a85      	ldr	r2, [pc, #532]	@ (800ae1c <HAL_SAI_Init+0x2a0>)
 800ac08:	4293      	cmp	r3, r2
 800ac0a:	d102      	bne.n	800ac12 <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 800ac0c:	4b84      	ldr	r3, [pc, #528]	@ (800ae20 <HAL_SAI_Init+0x2a4>)
 800ac0e:	61bb      	str	r3, [r7, #24]
 800ac10:	e00e      	b.n	800ac30 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	4a7a      	ldr	r2, [pc, #488]	@ (800ae00 <HAL_SAI_Init+0x284>)
 800ac18:	4293      	cmp	r3, r2
 800ac1a:	d004      	beq.n	800ac26 <HAL_SAI_Init+0xaa>
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	4a80      	ldr	r2, [pc, #512]	@ (800ae24 <HAL_SAI_Init+0x2a8>)
 800ac22:	4293      	cmp	r3, r2
 800ac24:	d102      	bne.n	800ac2c <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 800ac26:	4b80      	ldr	r3, [pc, #512]	@ (800ae28 <HAL_SAI_Init+0x2ac>)
 800ac28:	61bb      	str	r3, [r7, #24]
 800ac2a:	e001      	b.n	800ac30 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800ac2c:	2301      	movs	r3, #1
 800ac2e:	e23d      	b.n	800b0ac <HAL_SAI_Init+0x530>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800ac36:	b2db      	uxtb	r3, r3
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d106      	bne.n	800ac4a <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2200      	movs	r2, #0
 800ac40:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800ac44:	6878      	ldr	r0, [r7, #4]
 800ac46:	f7f7 fea9 	bl	800299c <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	f000 fd14 	bl	800b678 <SAI_Disable>
 800ac50:	4603      	mov	r3, r0
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d001      	beq.n	800ac5a <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 800ac56:	2301      	movs	r3, #1
 800ac58:	e228      	b.n	800b0ac <HAL_SAI_Init+0x530>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2202      	movs	r2, #2
 800ac5e:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	68db      	ldr	r3, [r3, #12]
 800ac66:	2b02      	cmp	r3, #2
 800ac68:	d00c      	beq.n	800ac84 <HAL_SAI_Init+0x108>
 800ac6a:	2b02      	cmp	r3, #2
 800ac6c:	d80d      	bhi.n	800ac8a <HAL_SAI_Init+0x10e>
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d002      	beq.n	800ac78 <HAL_SAI_Init+0xfc>
 800ac72:	2b01      	cmp	r3, #1
 800ac74:	d003      	beq.n	800ac7e <HAL_SAI_Init+0x102>
 800ac76:	e008      	b.n	800ac8a <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800ac78:	2300      	movs	r3, #0
 800ac7a:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800ac7c:	e008      	b.n	800ac90 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800ac7e:	2310      	movs	r3, #16
 800ac80:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800ac82:	e005      	b.n	800ac90 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800ac84:	2320      	movs	r3, #32
 800ac86:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800ac88:	e002      	b.n	800ac90 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800ac8e:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	689b      	ldr	r3, [r3, #8]
 800ac94:	2b05      	cmp	r3, #5
 800ac96:	d832      	bhi.n	800acfe <HAL_SAI_Init+0x182>
 800ac98:	a201      	add	r2, pc, #4	@ (adr r2, 800aca0 <HAL_SAI_Init+0x124>)
 800ac9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac9e:	bf00      	nop
 800aca0:	0800acb9 	.word	0x0800acb9
 800aca4:	0800acbf 	.word	0x0800acbf
 800aca8:	0800acc7 	.word	0x0800acc7
 800acac:	0800accf 	.word	0x0800accf
 800acb0:	0800acdf 	.word	0x0800acdf
 800acb4:	0800acef 	.word	0x0800acef
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800acb8:	2300      	movs	r3, #0
 800acba:	61fb      	str	r3, [r7, #28]
      break;
 800acbc:	e022      	b.n	800ad04 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800acbe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800acc2:	61fb      	str	r3, [r7, #28]
      break;
 800acc4:	e01e      	b.n	800ad04 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800acc6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800acca:	61fb      	str	r3, [r7, #28]
      break;
 800accc:	e01a      	b.n	800ad04 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800acce:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800acd2:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800acd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acd6:	f043 0301 	orr.w	r3, r3, #1
 800acda:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800acdc:	e012      	b.n	800ad04 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800acde:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ace2:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 800ace4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ace6:	f043 0302 	orr.w	r3, r3, #2
 800acea:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800acec:	e00a      	b.n	800ad04 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800acee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800acf2:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 800acf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acf6:	f043 0303 	orr.w	r3, r3, #3
 800acfa:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800acfc:	e002      	b.n	800ad04 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800acfe:	2300      	movs	r3, #0
 800ad00:	61fb      	str	r3, [r7, #28]
      break;
 800ad02:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 800ad04:	69bb      	ldr	r3, [r7, #24]
 800ad06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ad08:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	6a1b      	ldr	r3, [r3, #32]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	f000 80c5 	beq.w	800ae9e <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 800ad14:	2300      	movs	r3, #0
 800ad16:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	4a37      	ldr	r2, [pc, #220]	@ (800adfc <HAL_SAI_Init+0x280>)
 800ad1e:	4293      	cmp	r3, r2
 800ad20:	d004      	beq.n	800ad2c <HAL_SAI_Init+0x1b0>
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	4a37      	ldr	r2, [pc, #220]	@ (800ae04 <HAL_SAI_Init+0x288>)
 800ad28:	4293      	cmp	r3, r2
 800ad2a:	d106      	bne.n	800ad3a <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800ad2c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800ad30:	f04f 0100 	mov.w	r1, #0
 800ad34:	f7fe fbfc 	bl	8009530 <HAL_RCCEx_GetPeriphCLKFreq>
 800ad38:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	4a33      	ldr	r2, [pc, #204]	@ (800ae0c <HAL_SAI_Init+0x290>)
 800ad40:	4293      	cmp	r3, r2
 800ad42:	d004      	beq.n	800ad4e <HAL_SAI_Init+0x1d2>
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	4a31      	ldr	r2, [pc, #196]	@ (800ae10 <HAL_SAI_Init+0x294>)
 800ad4a:	4293      	cmp	r3, r2
 800ad4c:	d106      	bne.n	800ad5c <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800ad4e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800ad52:	f04f 0100 	mov.w	r1, #0
 800ad56:	f7fe fbeb 	bl	8009530 <HAL_RCCEx_GetPeriphCLKFreq>
 800ad5a:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	4a2d      	ldr	r2, [pc, #180]	@ (800ae18 <HAL_SAI_Init+0x29c>)
 800ad62:	4293      	cmp	r3, r2
 800ad64:	d004      	beq.n	800ad70 <HAL_SAI_Init+0x1f4>
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	4a2c      	ldr	r2, [pc, #176]	@ (800ae1c <HAL_SAI_Init+0x2a0>)
 800ad6c:	4293      	cmp	r3, r2
 800ad6e:	d106      	bne.n	800ad7e <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 800ad70:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800ad74:	f04f 0100 	mov.w	r1, #0
 800ad78:	f7fe fbda 	bl	8009530 <HAL_RCCEx_GetPeriphCLKFreq>
 800ad7c:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	4a1f      	ldr	r2, [pc, #124]	@ (800ae00 <HAL_SAI_Init+0x284>)
 800ad84:	4293      	cmp	r3, r2
 800ad86:	d106      	bne.n	800ad96 <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800ad88:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800ad8c:	f04f 0100 	mov.w	r1, #0
 800ad90:	f7fe fbce 	bl	8009530 <HAL_RCCEx_GetPeriphCLKFreq>
 800ad94:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	4a22      	ldr	r2, [pc, #136]	@ (800ae24 <HAL_SAI_Init+0x2a8>)
 800ad9c:	4293      	cmp	r3, r2
 800ad9e:	d106      	bne.n	800adae <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800ada0:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800ada4:	f04f 0100 	mov.w	r1, #0
 800ada8:	f7fe fbc2 	bl	8009530 <HAL_RCCEx_GetPeriphCLKFreq>
 800adac:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	699b      	ldr	r3, [r3, #24]
 800adb2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800adb6:	d139      	bne.n	800ae2c <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800adbc:	2b04      	cmp	r3, #4
 800adbe:	d102      	bne.n	800adc6 <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800adc0:	2340      	movs	r3, #64	@ 0x40
 800adc2:	60fb      	str	r3, [r7, #12]
 800adc4:	e00a      	b.n	800addc <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800adca:	2b08      	cmp	r3, #8
 800adcc:	d103      	bne.n	800add6 <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800adce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800add2:	60fb      	str	r3, [r7, #12]
 800add4:	e002      	b.n	800addc <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800adda:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800addc:	697a      	ldr	r2, [r7, #20]
 800adde:	4613      	mov	r3, r2
 800ade0:	009b      	lsls	r3, r3, #2
 800ade2:	4413      	add	r3, r2
 800ade4:	005b      	lsls	r3, r3, #1
 800ade6:	4619      	mov	r1, r3
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	6a1b      	ldr	r3, [r3, #32]
 800adec:	68fa      	ldr	r2, [r7, #12]
 800adee:	fb02 f303 	mul.w	r3, r2, r3
 800adf2:	fbb1 f3f3 	udiv	r3, r1, r3
 800adf6:	613b      	str	r3, [r7, #16]
 800adf8:	e030      	b.n	800ae5c <HAL_SAI_Init+0x2e0>
 800adfa:	bf00      	nop
 800adfc:	40015804 	.word	0x40015804
 800ae00:	58005404 	.word	0x58005404
 800ae04:	40015824 	.word	0x40015824
 800ae08:	40015800 	.word	0x40015800
 800ae0c:	40015c04 	.word	0x40015c04
 800ae10:	40015c24 	.word	0x40015c24
 800ae14:	40015c00 	.word	0x40015c00
 800ae18:	40016004 	.word	0x40016004
 800ae1c:	40016024 	.word	0x40016024
 800ae20:	40016000 	.word	0x40016000
 800ae24:	58005424 	.word	0x58005424
 800ae28:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae30:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ae34:	d101      	bne.n	800ae3a <HAL_SAI_Init+0x2be>
 800ae36:	2302      	movs	r3, #2
 800ae38:	e000      	b.n	800ae3c <HAL_SAI_Init+0x2c0>
 800ae3a:	2301      	movs	r3, #1
 800ae3c:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800ae3e:	697a      	ldr	r2, [r7, #20]
 800ae40:	4613      	mov	r3, r2
 800ae42:	009b      	lsls	r3, r3, #2
 800ae44:	4413      	add	r3, r2
 800ae46:	005b      	lsls	r3, r3, #1
 800ae48:	4619      	mov	r1, r3
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6a1b      	ldr	r3, [r3, #32]
 800ae4e:	68ba      	ldr	r2, [r7, #8]
 800ae50:	fb02 f303 	mul.w	r3, r2, r3
 800ae54:	021b      	lsls	r3, r3, #8
 800ae56:	fbb1 f3f3 	udiv	r3, r1, r3
 800ae5a:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800ae5c:	693b      	ldr	r3, [r7, #16]
 800ae5e:	4a95      	ldr	r2, [pc, #596]	@ (800b0b4 <HAL_SAI_Init+0x538>)
 800ae60:	fba2 2303 	umull	r2, r3, r2, r3
 800ae64:	08da      	lsrs	r2, r3, #3
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800ae6a:	6939      	ldr	r1, [r7, #16]
 800ae6c:	4b91      	ldr	r3, [pc, #580]	@ (800b0b4 <HAL_SAI_Init+0x538>)
 800ae6e:	fba3 2301 	umull	r2, r3, r3, r1
 800ae72:	08da      	lsrs	r2, r3, #3
 800ae74:	4613      	mov	r3, r2
 800ae76:	009b      	lsls	r3, r3, #2
 800ae78:	4413      	add	r3, r2
 800ae7a:	005b      	lsls	r3, r3, #1
 800ae7c:	1aca      	subs	r2, r1, r3
 800ae7e:	2a08      	cmp	r2, #8
 800ae80:	d904      	bls.n	800ae8c <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae86:	1c5a      	adds	r2, r3, #1
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae90:	2b04      	cmp	r3, #4
 800ae92:	d104      	bne.n	800ae9e <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae98:	085a      	lsrs	r2, r3, #1
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	685b      	ldr	r3, [r3, #4]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d003      	beq.n	800aeae <HAL_SAI_Init+0x332>
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	685b      	ldr	r3, [r3, #4]
 800aeaa:	2b02      	cmp	r3, #2
 800aeac:	d109      	bne.n	800aec2 <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aeb2:	2b01      	cmp	r3, #1
 800aeb4:	d101      	bne.n	800aeba <HAL_SAI_Init+0x33e>
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	e001      	b.n	800aebe <HAL_SAI_Init+0x342>
 800aeba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aebe:	623b      	str	r3, [r7, #32]
 800aec0:	e008      	b.n	800aed4 <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aec6:	2b01      	cmp	r3, #1
 800aec8:	d102      	bne.n	800aed0 <HAL_SAI_Init+0x354>
 800aeca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aece:	e000      	b.n	800aed2 <HAL_SAI_Init+0x356>
 800aed0:	2300      	movs	r3, #0
 800aed2:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800aed4:	f7f8 f82c 	bl	8002f30 <HAL_GetREVID>
 800aed8:	4603      	mov	r3, r0
 800aeda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aede:	d331      	bcc.n	800af44 <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	6819      	ldr	r1, [r3, #0]
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681a      	ldr	r2, [r3, #0]
 800aeea:	4b73      	ldr	r3, [pc, #460]	@ (800b0b8 <HAL_SAI_Init+0x53c>)
 800aeec:	400b      	ands	r3, r1
 800aeee:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	6819      	ldr	r1, [r3, #0]
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	685a      	ldr	r2, [r3, #4]
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aefe:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800af04:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800af0a:	431a      	orrs	r2, r3
 800af0c:	6a3b      	ldr	r3, [r7, #32]
 800af0e:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800af10:	69fb      	ldr	r3, [r7, #28]
 800af12:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            ckstr_bits | syncen_bits |                             \
 800af18:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	695b      	ldr	r3, [r3, #20]
 800af1e:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800af24:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af2a:	051b      	lsls	r3, r3, #20
 800af2c:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800af32:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	691b      	ldr	r3, [r3, #16]
 800af38:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	430a      	orrs	r2, r1
 800af40:	601a      	str	r2, [r3, #0]
 800af42:	e02d      	b.n	800afa0 <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	6819      	ldr	r1, [r3, #0]
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681a      	ldr	r2, [r3, #0]
 800af4e:	4b5b      	ldr	r3, [pc, #364]	@ (800b0bc <HAL_SAI_Init+0x540>)
 800af50:	400b      	ands	r3, r1
 800af52:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	6819      	ldr	r1, [r3, #0]
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	685a      	ldr	r2, [r3, #4]
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af62:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800af68:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800af6e:	431a      	orrs	r2, r3
 800af70:	6a3b      	ldr	r3, [r7, #32]
 800af72:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800af74:	69fb      	ldr	r3, [r7, #28]
 800af76:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            ckstr_bits | syncen_bits |                             \
 800af7c:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	695b      	ldr	r3, [r3, #20]
 800af82:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800af88:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af8e:	051b      	lsls	r3, r3, #20
 800af90:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800af96:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	430a      	orrs	r2, r1
 800af9e:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	6859      	ldr	r1, [r3, #4]
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681a      	ldr	r2, [r3, #0]
 800afaa:	4b45      	ldr	r3, [pc, #276]	@ (800b0c0 <HAL_SAI_Init+0x544>)
 800afac:	400b      	ands	r3, r1
 800afae:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	6859      	ldr	r1, [r3, #4]
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	69da      	ldr	r2, [r3, #28]
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800afbe:	431a      	orrs	r2, r3
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800afc4:	431a      	orrs	r2, r3
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	430a      	orrs	r2, r1
 800afcc:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	6899      	ldr	r1, [r3, #8]
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681a      	ldr	r2, [r3, #0]
 800afd8:	4b3a      	ldr	r3, [pc, #232]	@ (800b0c4 <HAL_SAI_Init+0x548>)
 800afda:	400b      	ands	r3, r1
 800afdc:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	6899      	ldr	r1, [r3, #8]
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800afe8:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800afee:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 800aff4:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 800affa:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b000:	3b01      	subs	r3, #1
 800b002:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800b004:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	430a      	orrs	r2, r1
 800b00c:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	68d9      	ldr	r1, [r3, #12]
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681a      	ldr	r2, [r3, #0]
 800b018:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800b01c:	400b      	ands	r3, r1
 800b01e:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	68d9      	ldr	r1, [r3, #12]
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b02e:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b034:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800b036:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b03c:	3b01      	subs	r3, #1
 800b03e:	021b      	lsls	r3, r3, #8
 800b040:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	430a      	orrs	r2, r1
 800b048:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	4a1e      	ldr	r2, [pc, #120]	@ (800b0c8 <HAL_SAI_Init+0x54c>)
 800b050:	4293      	cmp	r3, r2
 800b052:	d004      	beq.n	800b05e <HAL_SAI_Init+0x4e2>
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	4a1c      	ldr	r2, [pc, #112]	@ (800b0cc <HAL_SAI_Init+0x550>)
 800b05a:	4293      	cmp	r3, r2
 800b05c:	d119      	bne.n	800b092 <HAL_SAI_Init+0x516>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800b05e:	69bb      	ldr	r3, [r7, #24]
 800b060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b062:	f023 0201 	bic.w	r2, r3, #1
 800b066:	69bb      	ldr	r3, [r7, #24]
 800b068:	645a      	str	r2, [r3, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b070:	2b01      	cmp	r3, #1
 800b072:	d10e      	bne.n	800b092 <HAL_SAI_Init+0x516>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b07c:	3b01      	subs	r3, #1
 800b07e:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800b080:	431a      	orrs	r2, r3
 800b082:	69bb      	ldr	r3, [r7, #24]
 800b084:	645a      	str	r2, [r3, #68]	@ 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800b086:	69bb      	ldr	r3, [r7, #24]
 800b088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b08a:	f043 0201 	orr.w	r2, r3, #1
 800b08e:	69bb      	ldr	r3, [r7, #24]
 800b090:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	2200      	movs	r2, #0
 800b096:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	2201      	movs	r2, #1
 800b09e:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 800b0aa:	2300      	movs	r3, #0
}
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	3728      	adds	r7, #40	@ 0x28
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bd80      	pop	{r7, pc}
 800b0b4:	cccccccd 	.word	0xcccccccd
 800b0b8:	f005c010 	.word	0xf005c010
 800b0bc:	f805c010 	.word	0xf805c010
 800b0c0:	ffff1ff0 	.word	0xffff1ff0
 800b0c4:	fff88000 	.word	0xfff88000
 800b0c8:	40015804 	.word	0x40015804
 800b0cc:	58005404 	.word	0x58005404

0800b0d0 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b086      	sub	sp, #24
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	60f8      	str	r0, [r7, #12]
 800b0d8:	60b9      	str	r1, [r7, #8]
 800b0da:	4613      	mov	r3, r2
 800b0dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800b0de:	f7f7 fef7 	bl	8002ed0 <HAL_GetTick>
 800b0e2:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800b0e4:	68bb      	ldr	r3, [r7, #8]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d002      	beq.n	800b0f0 <HAL_SAI_Transmit_DMA+0x20>
 800b0ea:	88fb      	ldrh	r3, [r7, #6]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d101      	bne.n	800b0f4 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800b0f0:	2301      	movs	r3, #1
 800b0f2:	e098      	b.n	800b226 <HAL_SAI_Transmit_DMA+0x156>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800b0fa:	b2db      	uxtb	r3, r3
 800b0fc:	2b01      	cmp	r3, #1
 800b0fe:	f040 8091 	bne.w	800b224 <HAL_SAI_Transmit_DMA+0x154>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800b108:	2b01      	cmp	r3, #1
 800b10a:	d101      	bne.n	800b110 <HAL_SAI_Transmit_DMA+0x40>
 800b10c:	2302      	movs	r3, #2
 800b10e:	e08a      	b.n	800b226 <HAL_SAI_Transmit_DMA+0x156>
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	2201      	movs	r2, #1
 800b114:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->pBuffPtr = pData;
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	68ba      	ldr	r2, [r7, #8]
 800b11c:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->XferSize = Size;
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	88fa      	ldrh	r2, [r7, #6]
 800b122:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	88fa      	ldrh	r2, [r7, #6]
 800b12a:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	2200      	movs	r2, #0
 800b132:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	2212      	movs	r2, #18
 800b13a:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b144:	4a3a      	ldr	r2, [pc, #232]	@ (800b230 <HAL_SAI_Transmit_DMA+0x160>)
 800b146:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b14e:	4a39      	ldr	r2, [pc, #228]	@ (800b234 <HAL_SAI_Transmit_DMA+0x164>)
 800b150:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b158:	4a37      	ldr	r2, [pc, #220]	@ (800b238 <HAL_SAI_Transmit_DMA+0x168>)
 800b15a:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b162:	2200      	movs	r2, #0
 800b164:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b170:	4619      	mov	r1, r3
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	331c      	adds	r3, #28
 800b178:	461a      	mov	r2, r3
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 800b180:	f7f8 fb4e 	bl	8003820 <HAL_DMA_Start_IT>
 800b184:	4603      	mov	r3, r0
 800b186:	2b00      	cmp	r3, #0
 800b188:	d005      	beq.n	800b196 <HAL_SAI_Transmit_DMA+0xc6>
    {
      __HAL_UNLOCK(hsai);
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	2200      	movs	r2, #0
 800b18e:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      return  HAL_ERROR;
 800b192:	2301      	movs	r3, #1
 800b194:	e047      	b.n	800b226 <HAL_SAI_Transmit_DMA+0x156>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800b196:	2100      	movs	r1, #0
 800b198:	68f8      	ldr	r0, [r7, #12]
 800b19a:	f000 fa35 	bl	800b608 <SAI_InterruptFlag>
 800b19e:	4601      	mov	r1, r0
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	691a      	ldr	r2, [r3, #16]
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	430a      	orrs	r2, r1
 800b1ac:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	681a      	ldr	r2, [r3, #0]
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800b1bc:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800b1be:	e015      	b.n	800b1ec <HAL_SAI_Transmit_DMA+0x11c>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800b1c0:	f7f7 fe86 	bl	8002ed0 <HAL_GetTick>
 800b1c4:	4602      	mov	r2, r0
 800b1c6:	697b      	ldr	r3, [r7, #20]
 800b1c8:	1ad3      	subs	r3, r2, r3
 800b1ca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b1ce:	d90d      	bls.n	800b1ec <HAL_SAI_Transmit_DMA+0x11c>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b1d6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

        return HAL_TIMEOUT;
 800b1e8:	2303      	movs	r3, #3
 800b1ea:	e01c      	b.n	800b226 <HAL_SAI_Transmit_DMA+0x156>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	695b      	ldr	r3, [r3, #20]
 800b1f2:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d0e2      	beq.n	800b1c0 <HAL_SAI_Transmit_DMA+0xf0>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b204:	2b00      	cmp	r3, #0
 800b206:	d107      	bne.n	800b218 <HAL_SAI_Transmit_DMA+0x148>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	681a      	ldr	r2, [r3, #0]
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800b216:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	2200      	movs	r2, #0
 800b21c:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 800b220:	2300      	movs	r3, #0
 800b222:	e000      	b.n	800b226 <HAL_SAI_Transmit_DMA+0x156>
  }
  else
  {
    return HAL_BUSY;
 800b224:	2302      	movs	r3, #2
  }
}
 800b226:	4618      	mov	r0, r3
 800b228:	3718      	adds	r7, #24
 800b22a:	46bd      	mov	sp, r7
 800b22c:	bd80      	pop	{r7, pc}
 800b22e:	bf00      	nop
 800b230:	0800b74d 	.word	0x0800b74d
 800b234:	0800b6ed 	.word	0x0800b6ed
 800b238:	0800b7e5 	.word	0x0800b7e5

0800b23c <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b084      	sub	sp, #16
 800b240:	af00      	add	r7, sp, #0
 800b242:	60f8      	str	r0, [r7, #12]
 800b244:	60b9      	str	r1, [r7, #8]
 800b246:	4613      	mov	r3, r2
 800b248:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 800b24a:	68bb      	ldr	r3, [r7, #8]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d002      	beq.n	800b256 <HAL_SAI_Receive_DMA+0x1a>
 800b250:	88fb      	ldrh	r3, [r7, #6]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d101      	bne.n	800b25a <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800b256:	2301      	movs	r3, #1
 800b258:	e079      	b.n	800b34e <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800b260:	b2db      	uxtb	r3, r3
 800b262:	2b01      	cmp	r3, #1
 800b264:	d172      	bne.n	800b34c <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800b26c:	2b01      	cmp	r3, #1
 800b26e:	d101      	bne.n	800b274 <HAL_SAI_Receive_DMA+0x38>
 800b270:	2302      	movs	r3, #2
 800b272:	e06c      	b.n	800b34e <HAL_SAI_Receive_DMA+0x112>
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	2201      	movs	r2, #1
 800b278:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->pBuffPtr = pData;
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	68ba      	ldr	r2, [r7, #8]
 800b280:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->XferSize = Size;
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	88fa      	ldrh	r2, [r7, #6]
 800b286:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	88fa      	ldrh	r2, [r7, #6]
 800b28e:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	2200      	movs	r2, #0
 800b296:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	2222      	movs	r2, #34	@ 0x22
 800b29e:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b2a8:	4a2b      	ldr	r2, [pc, #172]	@ (800b358 <HAL_SAI_Receive_DMA+0x11c>)
 800b2aa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b2b2:	4a2a      	ldr	r2, [pc, #168]	@ (800b35c <HAL_SAI_Receive_DMA+0x120>)
 800b2b4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b2bc:	4a28      	ldr	r2, [pc, #160]	@ (800b360 <HAL_SAI_Receive_DMA+0x124>)
 800b2be:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	331c      	adds	r3, #28
 800b2d6:	4619      	mov	r1, r3
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b2dc:	461a      	mov	r2, r3
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 800b2e4:	f7f8 fa9c 	bl	8003820 <HAL_DMA_Start_IT>
 800b2e8:	4603      	mov	r3, r0
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d005      	beq.n	800b2fa <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      return  HAL_ERROR;
 800b2f6:	2301      	movs	r3, #1
 800b2f8:	e029      	b.n	800b34e <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800b2fa:	2100      	movs	r1, #0
 800b2fc:	68f8      	ldr	r0, [r7, #12]
 800b2fe:	f000 f983 	bl	800b608 <SAI_InterruptFlag>
 800b302:	4601      	mov	r1, r0
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	691a      	ldr	r2, [r3, #16]
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	430a      	orrs	r2, r1
 800b310:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	681a      	ldr	r2, [r3, #0]
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800b320:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d107      	bne.n	800b340 <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	681a      	ldr	r2, [r3, #0]
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800b33e:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	2200      	movs	r2, #0
 800b344:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 800b348:	2300      	movs	r3, #0
 800b34a:	e000      	b.n	800b34e <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 800b34c:	2302      	movs	r3, #2
  }
}
 800b34e:	4618      	mov	r0, r3
 800b350:	3710      	adds	r7, #16
 800b352:	46bd      	mov	sp, r7
 800b354:	bd80      	pop	{r7, pc}
 800b356:	bf00      	nop
 800b358:	0800b7c9 	.word	0x0800b7c9
 800b35c:	0800b769 	.word	0x0800b769
 800b360:	0800b7e5 	.word	0x0800b7e5

0800b364 <HAL_SAI_TxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 800b364:	b480      	push	{r7}
 800b366:	b083      	sub	sp, #12
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxCpltCallback could be implemented in the user file
   */
}
 800b36c:	bf00      	nop
 800b36e:	370c      	adds	r7, #12
 800b370:	46bd      	mov	sp, r7
 800b372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b376:	4770      	bx	lr

0800b378 <HAL_SAI_TxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 800b378:	b480      	push	{r7}
 800b37a:	b083      	sub	sp, #12
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxHalfCpltCallback could be implemented in the user file
   */
}
 800b380:	bf00      	nop
 800b382:	370c      	adds	r7, #12
 800b384:	46bd      	mov	sp, r7
 800b386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38a:	4770      	bx	lr

0800b38c <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800b38c:	b480      	push	{r7}
 800b38e:	b083      	sub	sp, #12
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 800b394:	bf00      	nop
 800b396:	370c      	adds	r7, #12
 800b398:	46bd      	mov	sp, r7
 800b39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39e:	4770      	bx	lr

0800b3a0 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800b3a0:	b480      	push	{r7}
 800b3a2:	b087      	sub	sp, #28
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	60f8      	str	r0, [r7, #12]
 800b3a8:	60b9      	str	r1, [r7, #8]
 800b3aa:	607a      	str	r2, [r7, #4]
 800b3ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	685b      	ldr	r3, [r3, #4]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d003      	beq.n	800b3ce <SAI_InitI2S+0x2e>
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	685b      	ldr	r3, [r3, #4]
 800b3ca:	2b02      	cmp	r3, #2
 800b3cc:	d103      	bne.n	800b3d6 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	651a      	str	r2, [r3, #80]	@ 0x50
 800b3d4:	e002      	b.n	800b3dc <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	2201      	movs	r2, #1
 800b3da:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800b3e2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b3ea:	675a      	str	r2, [r3, #116]	@ 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	683a      	ldr	r2, [r7, #0]
 800b3f6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800b3f8:	683b      	ldr	r3, [r7, #0]
 800b3fa:	f003 0301 	and.w	r3, r3, #1
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d001      	beq.n	800b406 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800b402:	2301      	movs	r3, #1
 800b404:	e077      	b.n	800b4f6 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800b406:	68bb      	ldr	r3, [r7, #8]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d107      	bne.n	800b41c <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	2200      	movs	r2, #0
 800b410:	661a      	str	r2, [r3, #96]	@ 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800b418:	665a      	str	r2, [r3, #100]	@ 0x64
 800b41a:	e006      	b.n	800b42a <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800b422:	661a      	str	r2, [r3, #96]	@ 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	2200      	movs	r2, #0
 800b428:	665a      	str	r2, [r3, #100]	@ 0x64
  }

  /* Frame definition */
  switch (datasize)
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	2b03      	cmp	r3, #3
 800b42e:	d84f      	bhi.n	800b4d0 <SAI_InitI2S+0x130>
 800b430:	a201      	add	r2, pc, #4	@ (adr r2, 800b438 <SAI_InitI2S+0x98>)
 800b432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b436:	bf00      	nop
 800b438:	0800b449 	.word	0x0800b449
 800b43c:	0800b46b 	.word	0x0800b46b
 800b440:	0800b48d 	.word	0x0800b48d
 800b444:	0800b4af 	.word	0x0800b4af
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	2280      	movs	r2, #128	@ 0x80
 800b44c:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800b44e:	683b      	ldr	r3, [r7, #0]
 800b450:	085b      	lsrs	r3, r3, #1
 800b452:	015a      	lsls	r2, r3, #5
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	085b      	lsrs	r3, r3, #1
 800b45c:	011a      	lsls	r2, r3, #4
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	2240      	movs	r2, #64	@ 0x40
 800b466:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800b468:	e035      	b.n	800b4d6 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	2280      	movs	r2, #128	@ 0x80
 800b46e:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	085b      	lsrs	r3, r3, #1
 800b474:	019a      	lsls	r2, r3, #6
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	085b      	lsrs	r3, r3, #1
 800b47e:	015a      	lsls	r2, r3, #5
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	2280      	movs	r2, #128	@ 0x80
 800b488:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800b48a:	e024      	b.n	800b4d6 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	22c0      	movs	r2, #192	@ 0xc0
 800b490:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	085b      	lsrs	r3, r3, #1
 800b496:	019a      	lsls	r2, r3, #6
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	085b      	lsrs	r3, r3, #1
 800b4a0:	015a      	lsls	r2, r3, #5
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	2280      	movs	r2, #128	@ 0x80
 800b4aa:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800b4ac:	e013      	b.n	800b4d6 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	22e0      	movs	r2, #224	@ 0xe0
 800b4b2:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800b4b4:	683b      	ldr	r3, [r7, #0]
 800b4b6:	085b      	lsrs	r3, r3, #1
 800b4b8:	019a      	lsls	r2, r3, #6
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	085b      	lsrs	r3, r3, #1
 800b4c2:	015a      	lsls	r2, r3, #5
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	2280      	movs	r2, #128	@ 0x80
 800b4cc:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800b4ce:	e002      	b.n	800b4d6 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800b4d0:	2301      	movs	r3, #1
 800b4d2:	75fb      	strb	r3, [r7, #23]
      break;
 800b4d4:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800b4d6:	68bb      	ldr	r3, [r7, #8]
 800b4d8:	2b02      	cmp	r3, #2
 800b4da:	d10b      	bne.n	800b4f4 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2b01      	cmp	r3, #1
 800b4e0:	d102      	bne.n	800b4e8 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	2210      	movs	r2, #16
 800b4e6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2b02      	cmp	r3, #2
 800b4ec:	d102      	bne.n	800b4f4 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	2208      	movs	r2, #8
 800b4f2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }
  return status;
 800b4f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	371c      	adds	r7, #28
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b500:	4770      	bx	lr
 800b502:	bf00      	nop

0800b504 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800b504:	b480      	push	{r7}
 800b506:	b087      	sub	sp, #28
 800b508:	af00      	add	r7, sp, #0
 800b50a:	60f8      	str	r0, [r7, #12]
 800b50c:	60b9      	str	r1, [r7, #8]
 800b50e:	607a      	str	r2, [r7, #4]
 800b510:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b512:	2300      	movs	r3, #0
 800b514:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	2200      	movs	r2, #0
 800b51a:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	2200      	movs	r2, #0
 800b520:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	685b      	ldr	r3, [r3, #4]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d003      	beq.n	800b532 <SAI_InitPCM+0x2e>
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	685b      	ldr	r3, [r3, #4]
 800b52e:	2b02      	cmp	r3, #2
 800b530:	d103      	bne.n	800b53a <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	2201      	movs	r2, #1
 800b536:	651a      	str	r2, [r3, #80]	@ 0x50
 800b538:	e002      	b.n	800b540 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	2200      	movs	r2, #0
 800b53e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	2200      	movs	r2, #0
 800b544:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800b54c:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800b554:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	2200      	movs	r2, #0
 800b55a:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	683a      	ldr	r2, [r7, #0]
 800b560:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b568:	675a      	str	r2, [r3, #116]	@ 0x74

  if (protocol == SAI_PCM_SHORT)
 800b56a:	68bb      	ldr	r3, [r7, #8]
 800b56c:	2b04      	cmp	r3, #4
 800b56e:	d103      	bne.n	800b578 <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	2201      	movs	r2, #1
 800b574:	659a      	str	r2, [r3, #88]	@ 0x58
 800b576:	e002      	b.n	800b57e <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	220d      	movs	r2, #13
 800b57c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  switch (datasize)
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	2b03      	cmp	r3, #3
 800b582:	d837      	bhi.n	800b5f4 <SAI_InitPCM+0xf0>
 800b584:	a201      	add	r2, pc, #4	@ (adr r2, 800b58c <SAI_InitPCM+0x88>)
 800b586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b58a:	bf00      	nop
 800b58c:	0800b59d 	.word	0x0800b59d
 800b590:	0800b5b3 	.word	0x0800b5b3
 800b594:	0800b5c9 	.word	0x0800b5c9
 800b598:	0800b5df 	.word	0x0800b5df
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	2280      	movs	r2, #128	@ 0x80
 800b5a0:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800b5a2:	683b      	ldr	r3, [r7, #0]
 800b5a4:	011a      	lsls	r2, r3, #4
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	2240      	movs	r2, #64	@ 0x40
 800b5ae:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800b5b0:	e023      	b.n	800b5fa <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	2280      	movs	r2, #128	@ 0x80
 800b5b6:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800b5b8:	683b      	ldr	r3, [r7, #0]
 800b5ba:	015a      	lsls	r2, r3, #5
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	2280      	movs	r2, #128	@ 0x80
 800b5c4:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800b5c6:	e018      	b.n	800b5fa <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	22c0      	movs	r2, #192	@ 0xc0
 800b5cc:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	015a      	lsls	r2, r3, #5
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	2280      	movs	r2, #128	@ 0x80
 800b5da:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800b5dc:	e00d      	b.n	800b5fa <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	22e0      	movs	r2, #224	@ 0xe0
 800b5e2:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800b5e4:	683b      	ldr	r3, [r7, #0]
 800b5e6:	015a      	lsls	r2, r3, #5
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	2280      	movs	r2, #128	@ 0x80
 800b5f0:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800b5f2:	e002      	b.n	800b5fa <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800b5f4:	2301      	movs	r3, #1
 800b5f6:	75fb      	strb	r3, [r7, #23]
      break;
 800b5f8:	bf00      	nop
  }

  return status;
 800b5fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	371c      	adds	r7, #28
 800b600:	46bd      	mov	sp, r7
 800b602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b606:	4770      	bx	lr

0800b608 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 800b608:	b480      	push	{r7}
 800b60a:	b085      	sub	sp, #20
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
 800b610:	460b      	mov	r3, r1
 800b612:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800b614:	2301      	movs	r3, #1
 800b616:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800b618:	78fb      	ldrb	r3, [r7, #3]
 800b61a:	2b01      	cmp	r3, #1
 800b61c:	d103      	bne.n	800b626 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	f043 0308 	orr.w	r3, r3, #8
 800b624:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b62a:	2b08      	cmp	r3, #8
 800b62c:	d10b      	bne.n	800b646 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800b632:	2b03      	cmp	r3, #3
 800b634:	d003      	beq.n	800b63e <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	685b      	ldr	r3, [r3, #4]
 800b63a:	2b01      	cmp	r3, #1
 800b63c:	d103      	bne.n	800b646 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	f043 0310 	orr.w	r3, r3, #16
 800b644:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	685b      	ldr	r3, [r3, #4]
 800b64a:	2b03      	cmp	r3, #3
 800b64c:	d003      	beq.n	800b656 <SAI_InterruptFlag+0x4e>
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	685b      	ldr	r3, [r3, #4]
 800b652:	2b02      	cmp	r3, #2
 800b654:	d104      	bne.n	800b660 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800b65c:	60fb      	str	r3, [r7, #12]
 800b65e:	e003      	b.n	800b668 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	f043 0304 	orr.w	r3, r3, #4
 800b666:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800b668:	68fb      	ldr	r3, [r7, #12]
}
 800b66a:	4618      	mov	r0, r3
 800b66c:	3714      	adds	r7, #20
 800b66e:	46bd      	mov	sp, r7
 800b670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b674:	4770      	bx	lr
	...

0800b678 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800b678:	b480      	push	{r7}
 800b67a:	b085      	sub	sp, #20
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800b680:	4b18      	ldr	r3, [pc, #96]	@ (800b6e4 <SAI_Disable+0x6c>)
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	4a18      	ldr	r2, [pc, #96]	@ (800b6e8 <SAI_Disable+0x70>)
 800b686:	fba2 2303 	umull	r2, r3, r2, r3
 800b68a:	0b1b      	lsrs	r3, r3, #12
 800b68c:	009b      	lsls	r3, r3, #2
 800b68e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800b690:	2300      	movs	r3, #0
 800b692:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	681a      	ldr	r2, [r3, #0]
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800b6a2:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d10a      	bne.n	800b6c0 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b6b0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 800b6ba:	2303      	movs	r3, #3
 800b6bc:	72fb      	strb	r3, [r7, #11]
      break;
 800b6be:	e009      	b.n	800b6d4 <SAI_Disable+0x5c>
    }
    count--;
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	3b01      	subs	r3, #1
 800b6c4:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d1e7      	bne.n	800b6a4 <SAI_Disable+0x2c>

  return status;
 800b6d4:	7afb      	ldrb	r3, [r7, #11]
}
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	3714      	adds	r7, #20
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e0:	4770      	bx	lr
 800b6e2:	bf00      	nop
 800b6e4:	24000000 	.word	0x24000000
 800b6e8:	95cbec1b 	.word	0x95cbec1b

0800b6ec <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b084      	sub	sp, #16
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6f8:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	69db      	ldr	r3, [r3, #28]
 800b6fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b702:	d01c      	beq.n	800b73e <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	2200      	movs	r2, #0
 800b708:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	681a      	ldr	r2, [r3, #0]
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800b71a:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800b71c:	2100      	movs	r1, #0
 800b71e:	68f8      	ldr	r0, [r7, #12]
 800b720:	f7ff ff72 	bl	800b608 <SAI_InterruptFlag>
 800b724:	4603      	mov	r3, r0
 800b726:	43d9      	mvns	r1, r3
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	691a      	ldr	r2, [r3, #16]
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	400a      	ands	r2, r1
 800b734:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	2201      	movs	r2, #1
 800b73a:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800b73e:	68f8      	ldr	r0, [r7, #12]
 800b740:	f7ff fe10 	bl	800b364 <HAL_SAI_TxCpltCallback>
#endif
}
 800b744:	bf00      	nop
 800b746:	3710      	adds	r7, #16
 800b748:	46bd      	mov	sp, r7
 800b74a:	bd80      	pop	{r7, pc}

0800b74c <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b084      	sub	sp, #16
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b758:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800b75a:	68f8      	ldr	r0, [r7, #12]
 800b75c:	f7ff fe0c 	bl	800b378 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 800b760:	bf00      	nop
 800b762:	3710      	adds	r7, #16
 800b764:	46bd      	mov	sp, r7
 800b766:	bd80      	pop	{r7, pc}

0800b768 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b084      	sub	sp, #16
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b774:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	69db      	ldr	r3, [r3, #28]
 800b77a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b77e:	d01c      	beq.n	800b7ba <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	681a      	ldr	r2, [r3, #0]
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800b78e:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	2200      	movs	r2, #0
 800b794:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800b798:	2100      	movs	r1, #0
 800b79a:	68f8      	ldr	r0, [r7, #12]
 800b79c:	f7ff ff34 	bl	800b608 <SAI_InterruptFlag>
 800b7a0:	4603      	mov	r3, r0
 800b7a2:	43d9      	mvns	r1, r3
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	691a      	ldr	r2, [r3, #16]
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	400a      	ands	r2, r1
 800b7b0:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	2201      	movs	r2, #1
 800b7b6:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800b7ba:	68f8      	ldr	r0, [r7, #12]
 800b7bc:	f7f6 fd5c 	bl	8002278 <HAL_SAI_RxCpltCallback>
#endif
}
 800b7c0:	bf00      	nop
 800b7c2:	3710      	adds	r7, #16
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	bd80      	pop	{r7, pc}

0800b7c8 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b084      	sub	sp, #16
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7d4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800b7d6:	68f8      	ldr	r0, [r7, #12]
 800b7d8:	f7f6 fd04 	bl	80021e4 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 800b7dc:	bf00      	nop
 800b7de:	3710      	adds	r7, #16
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	bd80      	pop	{r7, pc}

0800b7e4 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b084      	sub	sp, #16
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7f0:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800b7f2:	6878      	ldr	r0, [r7, #4]
 800b7f4:	f7f9 f9a8 	bl	8004b48 <HAL_DMA_GetError>
 800b7f8:	4603      	mov	r3, r0
 800b7fa:	2b02      	cmp	r3, #2
 800b7fc:	d01d      	beq.n	800b83a <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b804:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	681a      	ldr	r2, [r3, #0]
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800b81c:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 800b81e:	68f8      	ldr	r0, [r7, #12]
 800b820:	f7ff ff2a 	bl	800b678 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	2201      	movs	r2, #1
 800b828:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	2200      	movs	r2, #0
 800b830:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 800b834:	68f8      	ldr	r0, [r7, #12]
 800b836:	f7ff fda9 	bl	800b38c <HAL_SAI_ErrorCallback>
#endif
  }
}
 800b83a:	bf00      	nop
 800b83c:	3710      	adds	r7, #16
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd80      	pop	{r7, pc}

0800b842 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b842:	b580      	push	{r7, lr}
 800b844:	b082      	sub	sp, #8
 800b846:	af00      	add	r7, sp, #0
 800b848:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d101      	bne.n	800b854 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b850:	2301      	movs	r3, #1
 800b852:	e042      	b.n	800b8da <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d106      	bne.n	800b86c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	2200      	movs	r2, #0
 800b862:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b866:	6878      	ldr	r0, [r7, #4]
 800b868:	f7f7 f84e 	bl	8002908 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2224      	movs	r2, #36	@ 0x24
 800b870:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	681a      	ldr	r2, [r3, #0]
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	f022 0201 	bic.w	r2, r2, #1
 800b882:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d002      	beq.n	800b892 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b88c:	6878      	ldr	r0, [r7, #4]
 800b88e:	f000 fd91 	bl	800c3b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b892:	6878      	ldr	r0, [r7, #4]
 800b894:	f000 f826 	bl	800b8e4 <UART_SetConfig>
 800b898:	4603      	mov	r3, r0
 800b89a:	2b01      	cmp	r3, #1
 800b89c:	d101      	bne.n	800b8a2 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b89e:	2301      	movs	r3, #1
 800b8a0:	e01b      	b.n	800b8da <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	685a      	ldr	r2, [r3, #4]
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b8b0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	689a      	ldr	r2, [r3, #8]
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b8c0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	681a      	ldr	r2, [r3, #0]
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	f042 0201 	orr.w	r2, r2, #1
 800b8d0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b8d2:	6878      	ldr	r0, [r7, #4]
 800b8d4:	f000 fe10 	bl	800c4f8 <UART_CheckIdleState>
 800b8d8:	4603      	mov	r3, r0
}
 800b8da:	4618      	mov	r0, r3
 800b8dc:	3708      	adds	r7, #8
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	bd80      	pop	{r7, pc}
	...

0800b8e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b8e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b8e8:	b092      	sub	sp, #72	@ 0x48
 800b8ea:	af00      	add	r7, sp, #0
 800b8ec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b8f4:	697b      	ldr	r3, [r7, #20]
 800b8f6:	689a      	ldr	r2, [r3, #8]
 800b8f8:	697b      	ldr	r3, [r7, #20]
 800b8fa:	691b      	ldr	r3, [r3, #16]
 800b8fc:	431a      	orrs	r2, r3
 800b8fe:	697b      	ldr	r3, [r7, #20]
 800b900:	695b      	ldr	r3, [r3, #20]
 800b902:	431a      	orrs	r2, r3
 800b904:	697b      	ldr	r3, [r7, #20]
 800b906:	69db      	ldr	r3, [r3, #28]
 800b908:	4313      	orrs	r3, r2
 800b90a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b90c:	697b      	ldr	r3, [r7, #20]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	681a      	ldr	r2, [r3, #0]
 800b912:	4bbe      	ldr	r3, [pc, #760]	@ (800bc0c <UART_SetConfig+0x328>)
 800b914:	4013      	ands	r3, r2
 800b916:	697a      	ldr	r2, [r7, #20]
 800b918:	6812      	ldr	r2, [r2, #0]
 800b91a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b91c:	430b      	orrs	r3, r1
 800b91e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b920:	697b      	ldr	r3, [r7, #20]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	685b      	ldr	r3, [r3, #4]
 800b926:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b92a:	697b      	ldr	r3, [r7, #20]
 800b92c:	68da      	ldr	r2, [r3, #12]
 800b92e:	697b      	ldr	r3, [r7, #20]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	430a      	orrs	r2, r1
 800b934:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b936:	697b      	ldr	r3, [r7, #20]
 800b938:	699b      	ldr	r3, [r3, #24]
 800b93a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b93c:	697b      	ldr	r3, [r7, #20]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	4ab3      	ldr	r2, [pc, #716]	@ (800bc10 <UART_SetConfig+0x32c>)
 800b942:	4293      	cmp	r3, r2
 800b944:	d004      	beq.n	800b950 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b946:	697b      	ldr	r3, [r7, #20]
 800b948:	6a1b      	ldr	r3, [r3, #32]
 800b94a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b94c:	4313      	orrs	r3, r2
 800b94e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b950:	697b      	ldr	r3, [r7, #20]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	689a      	ldr	r2, [r3, #8]
 800b956:	4baf      	ldr	r3, [pc, #700]	@ (800bc14 <UART_SetConfig+0x330>)
 800b958:	4013      	ands	r3, r2
 800b95a:	697a      	ldr	r2, [r7, #20]
 800b95c:	6812      	ldr	r2, [r2, #0]
 800b95e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b960:	430b      	orrs	r3, r1
 800b962:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b964:	697b      	ldr	r3, [r7, #20]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b96a:	f023 010f 	bic.w	r1, r3, #15
 800b96e:	697b      	ldr	r3, [r7, #20]
 800b970:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b972:	697b      	ldr	r3, [r7, #20]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	430a      	orrs	r2, r1
 800b978:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b97a:	697b      	ldr	r3, [r7, #20]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	4aa6      	ldr	r2, [pc, #664]	@ (800bc18 <UART_SetConfig+0x334>)
 800b980:	4293      	cmp	r3, r2
 800b982:	d177      	bne.n	800ba74 <UART_SetConfig+0x190>
 800b984:	4ba5      	ldr	r3, [pc, #660]	@ (800bc1c <UART_SetConfig+0x338>)
 800b986:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b988:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b98c:	2b28      	cmp	r3, #40	@ 0x28
 800b98e:	d86d      	bhi.n	800ba6c <UART_SetConfig+0x188>
 800b990:	a201      	add	r2, pc, #4	@ (adr r2, 800b998 <UART_SetConfig+0xb4>)
 800b992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b996:	bf00      	nop
 800b998:	0800ba3d 	.word	0x0800ba3d
 800b99c:	0800ba6d 	.word	0x0800ba6d
 800b9a0:	0800ba6d 	.word	0x0800ba6d
 800b9a4:	0800ba6d 	.word	0x0800ba6d
 800b9a8:	0800ba6d 	.word	0x0800ba6d
 800b9ac:	0800ba6d 	.word	0x0800ba6d
 800b9b0:	0800ba6d 	.word	0x0800ba6d
 800b9b4:	0800ba6d 	.word	0x0800ba6d
 800b9b8:	0800ba45 	.word	0x0800ba45
 800b9bc:	0800ba6d 	.word	0x0800ba6d
 800b9c0:	0800ba6d 	.word	0x0800ba6d
 800b9c4:	0800ba6d 	.word	0x0800ba6d
 800b9c8:	0800ba6d 	.word	0x0800ba6d
 800b9cc:	0800ba6d 	.word	0x0800ba6d
 800b9d0:	0800ba6d 	.word	0x0800ba6d
 800b9d4:	0800ba6d 	.word	0x0800ba6d
 800b9d8:	0800ba4d 	.word	0x0800ba4d
 800b9dc:	0800ba6d 	.word	0x0800ba6d
 800b9e0:	0800ba6d 	.word	0x0800ba6d
 800b9e4:	0800ba6d 	.word	0x0800ba6d
 800b9e8:	0800ba6d 	.word	0x0800ba6d
 800b9ec:	0800ba6d 	.word	0x0800ba6d
 800b9f0:	0800ba6d 	.word	0x0800ba6d
 800b9f4:	0800ba6d 	.word	0x0800ba6d
 800b9f8:	0800ba55 	.word	0x0800ba55
 800b9fc:	0800ba6d 	.word	0x0800ba6d
 800ba00:	0800ba6d 	.word	0x0800ba6d
 800ba04:	0800ba6d 	.word	0x0800ba6d
 800ba08:	0800ba6d 	.word	0x0800ba6d
 800ba0c:	0800ba6d 	.word	0x0800ba6d
 800ba10:	0800ba6d 	.word	0x0800ba6d
 800ba14:	0800ba6d 	.word	0x0800ba6d
 800ba18:	0800ba5d 	.word	0x0800ba5d
 800ba1c:	0800ba6d 	.word	0x0800ba6d
 800ba20:	0800ba6d 	.word	0x0800ba6d
 800ba24:	0800ba6d 	.word	0x0800ba6d
 800ba28:	0800ba6d 	.word	0x0800ba6d
 800ba2c:	0800ba6d 	.word	0x0800ba6d
 800ba30:	0800ba6d 	.word	0x0800ba6d
 800ba34:	0800ba6d 	.word	0x0800ba6d
 800ba38:	0800ba65 	.word	0x0800ba65
 800ba3c:	2301      	movs	r3, #1
 800ba3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba42:	e222      	b.n	800be8a <UART_SetConfig+0x5a6>
 800ba44:	2304      	movs	r3, #4
 800ba46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba4a:	e21e      	b.n	800be8a <UART_SetConfig+0x5a6>
 800ba4c:	2308      	movs	r3, #8
 800ba4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba52:	e21a      	b.n	800be8a <UART_SetConfig+0x5a6>
 800ba54:	2310      	movs	r3, #16
 800ba56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba5a:	e216      	b.n	800be8a <UART_SetConfig+0x5a6>
 800ba5c:	2320      	movs	r3, #32
 800ba5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba62:	e212      	b.n	800be8a <UART_SetConfig+0x5a6>
 800ba64:	2340      	movs	r3, #64	@ 0x40
 800ba66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba6a:	e20e      	b.n	800be8a <UART_SetConfig+0x5a6>
 800ba6c:	2380      	movs	r3, #128	@ 0x80
 800ba6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba72:	e20a      	b.n	800be8a <UART_SetConfig+0x5a6>
 800ba74:	697b      	ldr	r3, [r7, #20]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	4a69      	ldr	r2, [pc, #420]	@ (800bc20 <UART_SetConfig+0x33c>)
 800ba7a:	4293      	cmp	r3, r2
 800ba7c:	d130      	bne.n	800bae0 <UART_SetConfig+0x1fc>
 800ba7e:	4b67      	ldr	r3, [pc, #412]	@ (800bc1c <UART_SetConfig+0x338>)
 800ba80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba82:	f003 0307 	and.w	r3, r3, #7
 800ba86:	2b05      	cmp	r3, #5
 800ba88:	d826      	bhi.n	800bad8 <UART_SetConfig+0x1f4>
 800ba8a:	a201      	add	r2, pc, #4	@ (adr r2, 800ba90 <UART_SetConfig+0x1ac>)
 800ba8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba90:	0800baa9 	.word	0x0800baa9
 800ba94:	0800bab1 	.word	0x0800bab1
 800ba98:	0800bab9 	.word	0x0800bab9
 800ba9c:	0800bac1 	.word	0x0800bac1
 800baa0:	0800bac9 	.word	0x0800bac9
 800baa4:	0800bad1 	.word	0x0800bad1
 800baa8:	2300      	movs	r3, #0
 800baaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800baae:	e1ec      	b.n	800be8a <UART_SetConfig+0x5a6>
 800bab0:	2304      	movs	r3, #4
 800bab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bab6:	e1e8      	b.n	800be8a <UART_SetConfig+0x5a6>
 800bab8:	2308      	movs	r3, #8
 800baba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800babe:	e1e4      	b.n	800be8a <UART_SetConfig+0x5a6>
 800bac0:	2310      	movs	r3, #16
 800bac2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bac6:	e1e0      	b.n	800be8a <UART_SetConfig+0x5a6>
 800bac8:	2320      	movs	r3, #32
 800baca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bace:	e1dc      	b.n	800be8a <UART_SetConfig+0x5a6>
 800bad0:	2340      	movs	r3, #64	@ 0x40
 800bad2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bad6:	e1d8      	b.n	800be8a <UART_SetConfig+0x5a6>
 800bad8:	2380      	movs	r3, #128	@ 0x80
 800bada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bade:	e1d4      	b.n	800be8a <UART_SetConfig+0x5a6>
 800bae0:	697b      	ldr	r3, [r7, #20]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	4a4f      	ldr	r2, [pc, #316]	@ (800bc24 <UART_SetConfig+0x340>)
 800bae6:	4293      	cmp	r3, r2
 800bae8:	d130      	bne.n	800bb4c <UART_SetConfig+0x268>
 800baea:	4b4c      	ldr	r3, [pc, #304]	@ (800bc1c <UART_SetConfig+0x338>)
 800baec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800baee:	f003 0307 	and.w	r3, r3, #7
 800baf2:	2b05      	cmp	r3, #5
 800baf4:	d826      	bhi.n	800bb44 <UART_SetConfig+0x260>
 800baf6:	a201      	add	r2, pc, #4	@ (adr r2, 800bafc <UART_SetConfig+0x218>)
 800baf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bafc:	0800bb15 	.word	0x0800bb15
 800bb00:	0800bb1d 	.word	0x0800bb1d
 800bb04:	0800bb25 	.word	0x0800bb25
 800bb08:	0800bb2d 	.word	0x0800bb2d
 800bb0c:	0800bb35 	.word	0x0800bb35
 800bb10:	0800bb3d 	.word	0x0800bb3d
 800bb14:	2300      	movs	r3, #0
 800bb16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb1a:	e1b6      	b.n	800be8a <UART_SetConfig+0x5a6>
 800bb1c:	2304      	movs	r3, #4
 800bb1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb22:	e1b2      	b.n	800be8a <UART_SetConfig+0x5a6>
 800bb24:	2308      	movs	r3, #8
 800bb26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb2a:	e1ae      	b.n	800be8a <UART_SetConfig+0x5a6>
 800bb2c:	2310      	movs	r3, #16
 800bb2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb32:	e1aa      	b.n	800be8a <UART_SetConfig+0x5a6>
 800bb34:	2320      	movs	r3, #32
 800bb36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb3a:	e1a6      	b.n	800be8a <UART_SetConfig+0x5a6>
 800bb3c:	2340      	movs	r3, #64	@ 0x40
 800bb3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb42:	e1a2      	b.n	800be8a <UART_SetConfig+0x5a6>
 800bb44:	2380      	movs	r3, #128	@ 0x80
 800bb46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb4a:	e19e      	b.n	800be8a <UART_SetConfig+0x5a6>
 800bb4c:	697b      	ldr	r3, [r7, #20]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	4a35      	ldr	r2, [pc, #212]	@ (800bc28 <UART_SetConfig+0x344>)
 800bb52:	4293      	cmp	r3, r2
 800bb54:	d130      	bne.n	800bbb8 <UART_SetConfig+0x2d4>
 800bb56:	4b31      	ldr	r3, [pc, #196]	@ (800bc1c <UART_SetConfig+0x338>)
 800bb58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb5a:	f003 0307 	and.w	r3, r3, #7
 800bb5e:	2b05      	cmp	r3, #5
 800bb60:	d826      	bhi.n	800bbb0 <UART_SetConfig+0x2cc>
 800bb62:	a201      	add	r2, pc, #4	@ (adr r2, 800bb68 <UART_SetConfig+0x284>)
 800bb64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb68:	0800bb81 	.word	0x0800bb81
 800bb6c:	0800bb89 	.word	0x0800bb89
 800bb70:	0800bb91 	.word	0x0800bb91
 800bb74:	0800bb99 	.word	0x0800bb99
 800bb78:	0800bba1 	.word	0x0800bba1
 800bb7c:	0800bba9 	.word	0x0800bba9
 800bb80:	2300      	movs	r3, #0
 800bb82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb86:	e180      	b.n	800be8a <UART_SetConfig+0x5a6>
 800bb88:	2304      	movs	r3, #4
 800bb8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb8e:	e17c      	b.n	800be8a <UART_SetConfig+0x5a6>
 800bb90:	2308      	movs	r3, #8
 800bb92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb96:	e178      	b.n	800be8a <UART_SetConfig+0x5a6>
 800bb98:	2310      	movs	r3, #16
 800bb9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb9e:	e174      	b.n	800be8a <UART_SetConfig+0x5a6>
 800bba0:	2320      	movs	r3, #32
 800bba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bba6:	e170      	b.n	800be8a <UART_SetConfig+0x5a6>
 800bba8:	2340      	movs	r3, #64	@ 0x40
 800bbaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbae:	e16c      	b.n	800be8a <UART_SetConfig+0x5a6>
 800bbb0:	2380      	movs	r3, #128	@ 0x80
 800bbb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbb6:	e168      	b.n	800be8a <UART_SetConfig+0x5a6>
 800bbb8:	697b      	ldr	r3, [r7, #20]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	4a1b      	ldr	r2, [pc, #108]	@ (800bc2c <UART_SetConfig+0x348>)
 800bbbe:	4293      	cmp	r3, r2
 800bbc0:	d142      	bne.n	800bc48 <UART_SetConfig+0x364>
 800bbc2:	4b16      	ldr	r3, [pc, #88]	@ (800bc1c <UART_SetConfig+0x338>)
 800bbc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bbc6:	f003 0307 	and.w	r3, r3, #7
 800bbca:	2b05      	cmp	r3, #5
 800bbcc:	d838      	bhi.n	800bc40 <UART_SetConfig+0x35c>
 800bbce:	a201      	add	r2, pc, #4	@ (adr r2, 800bbd4 <UART_SetConfig+0x2f0>)
 800bbd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbd4:	0800bbed 	.word	0x0800bbed
 800bbd8:	0800bbf5 	.word	0x0800bbf5
 800bbdc:	0800bbfd 	.word	0x0800bbfd
 800bbe0:	0800bc05 	.word	0x0800bc05
 800bbe4:	0800bc31 	.word	0x0800bc31
 800bbe8:	0800bc39 	.word	0x0800bc39
 800bbec:	2300      	movs	r3, #0
 800bbee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbf2:	e14a      	b.n	800be8a <UART_SetConfig+0x5a6>
 800bbf4:	2304      	movs	r3, #4
 800bbf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbfa:	e146      	b.n	800be8a <UART_SetConfig+0x5a6>
 800bbfc:	2308      	movs	r3, #8
 800bbfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc02:	e142      	b.n	800be8a <UART_SetConfig+0x5a6>
 800bc04:	2310      	movs	r3, #16
 800bc06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc0a:	e13e      	b.n	800be8a <UART_SetConfig+0x5a6>
 800bc0c:	cfff69f3 	.word	0xcfff69f3
 800bc10:	58000c00 	.word	0x58000c00
 800bc14:	11fff4ff 	.word	0x11fff4ff
 800bc18:	40011000 	.word	0x40011000
 800bc1c:	58024400 	.word	0x58024400
 800bc20:	40004400 	.word	0x40004400
 800bc24:	40004800 	.word	0x40004800
 800bc28:	40004c00 	.word	0x40004c00
 800bc2c:	40005000 	.word	0x40005000
 800bc30:	2320      	movs	r3, #32
 800bc32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc36:	e128      	b.n	800be8a <UART_SetConfig+0x5a6>
 800bc38:	2340      	movs	r3, #64	@ 0x40
 800bc3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc3e:	e124      	b.n	800be8a <UART_SetConfig+0x5a6>
 800bc40:	2380      	movs	r3, #128	@ 0x80
 800bc42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc46:	e120      	b.n	800be8a <UART_SetConfig+0x5a6>
 800bc48:	697b      	ldr	r3, [r7, #20]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	4acb      	ldr	r2, [pc, #812]	@ (800bf7c <UART_SetConfig+0x698>)
 800bc4e:	4293      	cmp	r3, r2
 800bc50:	d176      	bne.n	800bd40 <UART_SetConfig+0x45c>
 800bc52:	4bcb      	ldr	r3, [pc, #812]	@ (800bf80 <UART_SetConfig+0x69c>)
 800bc54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc56:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bc5a:	2b28      	cmp	r3, #40	@ 0x28
 800bc5c:	d86c      	bhi.n	800bd38 <UART_SetConfig+0x454>
 800bc5e:	a201      	add	r2, pc, #4	@ (adr r2, 800bc64 <UART_SetConfig+0x380>)
 800bc60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc64:	0800bd09 	.word	0x0800bd09
 800bc68:	0800bd39 	.word	0x0800bd39
 800bc6c:	0800bd39 	.word	0x0800bd39
 800bc70:	0800bd39 	.word	0x0800bd39
 800bc74:	0800bd39 	.word	0x0800bd39
 800bc78:	0800bd39 	.word	0x0800bd39
 800bc7c:	0800bd39 	.word	0x0800bd39
 800bc80:	0800bd39 	.word	0x0800bd39
 800bc84:	0800bd11 	.word	0x0800bd11
 800bc88:	0800bd39 	.word	0x0800bd39
 800bc8c:	0800bd39 	.word	0x0800bd39
 800bc90:	0800bd39 	.word	0x0800bd39
 800bc94:	0800bd39 	.word	0x0800bd39
 800bc98:	0800bd39 	.word	0x0800bd39
 800bc9c:	0800bd39 	.word	0x0800bd39
 800bca0:	0800bd39 	.word	0x0800bd39
 800bca4:	0800bd19 	.word	0x0800bd19
 800bca8:	0800bd39 	.word	0x0800bd39
 800bcac:	0800bd39 	.word	0x0800bd39
 800bcb0:	0800bd39 	.word	0x0800bd39
 800bcb4:	0800bd39 	.word	0x0800bd39
 800bcb8:	0800bd39 	.word	0x0800bd39
 800bcbc:	0800bd39 	.word	0x0800bd39
 800bcc0:	0800bd39 	.word	0x0800bd39
 800bcc4:	0800bd21 	.word	0x0800bd21
 800bcc8:	0800bd39 	.word	0x0800bd39
 800bccc:	0800bd39 	.word	0x0800bd39
 800bcd0:	0800bd39 	.word	0x0800bd39
 800bcd4:	0800bd39 	.word	0x0800bd39
 800bcd8:	0800bd39 	.word	0x0800bd39
 800bcdc:	0800bd39 	.word	0x0800bd39
 800bce0:	0800bd39 	.word	0x0800bd39
 800bce4:	0800bd29 	.word	0x0800bd29
 800bce8:	0800bd39 	.word	0x0800bd39
 800bcec:	0800bd39 	.word	0x0800bd39
 800bcf0:	0800bd39 	.word	0x0800bd39
 800bcf4:	0800bd39 	.word	0x0800bd39
 800bcf8:	0800bd39 	.word	0x0800bd39
 800bcfc:	0800bd39 	.word	0x0800bd39
 800bd00:	0800bd39 	.word	0x0800bd39
 800bd04:	0800bd31 	.word	0x0800bd31
 800bd08:	2301      	movs	r3, #1
 800bd0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd0e:	e0bc      	b.n	800be8a <UART_SetConfig+0x5a6>
 800bd10:	2304      	movs	r3, #4
 800bd12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd16:	e0b8      	b.n	800be8a <UART_SetConfig+0x5a6>
 800bd18:	2308      	movs	r3, #8
 800bd1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd1e:	e0b4      	b.n	800be8a <UART_SetConfig+0x5a6>
 800bd20:	2310      	movs	r3, #16
 800bd22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd26:	e0b0      	b.n	800be8a <UART_SetConfig+0x5a6>
 800bd28:	2320      	movs	r3, #32
 800bd2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd2e:	e0ac      	b.n	800be8a <UART_SetConfig+0x5a6>
 800bd30:	2340      	movs	r3, #64	@ 0x40
 800bd32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd36:	e0a8      	b.n	800be8a <UART_SetConfig+0x5a6>
 800bd38:	2380      	movs	r3, #128	@ 0x80
 800bd3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd3e:	e0a4      	b.n	800be8a <UART_SetConfig+0x5a6>
 800bd40:	697b      	ldr	r3, [r7, #20]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	4a8f      	ldr	r2, [pc, #572]	@ (800bf84 <UART_SetConfig+0x6a0>)
 800bd46:	4293      	cmp	r3, r2
 800bd48:	d130      	bne.n	800bdac <UART_SetConfig+0x4c8>
 800bd4a:	4b8d      	ldr	r3, [pc, #564]	@ (800bf80 <UART_SetConfig+0x69c>)
 800bd4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bd4e:	f003 0307 	and.w	r3, r3, #7
 800bd52:	2b05      	cmp	r3, #5
 800bd54:	d826      	bhi.n	800bda4 <UART_SetConfig+0x4c0>
 800bd56:	a201      	add	r2, pc, #4	@ (adr r2, 800bd5c <UART_SetConfig+0x478>)
 800bd58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd5c:	0800bd75 	.word	0x0800bd75
 800bd60:	0800bd7d 	.word	0x0800bd7d
 800bd64:	0800bd85 	.word	0x0800bd85
 800bd68:	0800bd8d 	.word	0x0800bd8d
 800bd6c:	0800bd95 	.word	0x0800bd95
 800bd70:	0800bd9d 	.word	0x0800bd9d
 800bd74:	2300      	movs	r3, #0
 800bd76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd7a:	e086      	b.n	800be8a <UART_SetConfig+0x5a6>
 800bd7c:	2304      	movs	r3, #4
 800bd7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd82:	e082      	b.n	800be8a <UART_SetConfig+0x5a6>
 800bd84:	2308      	movs	r3, #8
 800bd86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd8a:	e07e      	b.n	800be8a <UART_SetConfig+0x5a6>
 800bd8c:	2310      	movs	r3, #16
 800bd8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd92:	e07a      	b.n	800be8a <UART_SetConfig+0x5a6>
 800bd94:	2320      	movs	r3, #32
 800bd96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd9a:	e076      	b.n	800be8a <UART_SetConfig+0x5a6>
 800bd9c:	2340      	movs	r3, #64	@ 0x40
 800bd9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bda2:	e072      	b.n	800be8a <UART_SetConfig+0x5a6>
 800bda4:	2380      	movs	r3, #128	@ 0x80
 800bda6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bdaa:	e06e      	b.n	800be8a <UART_SetConfig+0x5a6>
 800bdac:	697b      	ldr	r3, [r7, #20]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	4a75      	ldr	r2, [pc, #468]	@ (800bf88 <UART_SetConfig+0x6a4>)
 800bdb2:	4293      	cmp	r3, r2
 800bdb4:	d130      	bne.n	800be18 <UART_SetConfig+0x534>
 800bdb6:	4b72      	ldr	r3, [pc, #456]	@ (800bf80 <UART_SetConfig+0x69c>)
 800bdb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bdba:	f003 0307 	and.w	r3, r3, #7
 800bdbe:	2b05      	cmp	r3, #5
 800bdc0:	d826      	bhi.n	800be10 <UART_SetConfig+0x52c>
 800bdc2:	a201      	add	r2, pc, #4	@ (adr r2, 800bdc8 <UART_SetConfig+0x4e4>)
 800bdc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdc8:	0800bde1 	.word	0x0800bde1
 800bdcc:	0800bde9 	.word	0x0800bde9
 800bdd0:	0800bdf1 	.word	0x0800bdf1
 800bdd4:	0800bdf9 	.word	0x0800bdf9
 800bdd8:	0800be01 	.word	0x0800be01
 800bddc:	0800be09 	.word	0x0800be09
 800bde0:	2300      	movs	r3, #0
 800bde2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bde6:	e050      	b.n	800be8a <UART_SetConfig+0x5a6>
 800bde8:	2304      	movs	r3, #4
 800bdea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bdee:	e04c      	b.n	800be8a <UART_SetConfig+0x5a6>
 800bdf0:	2308      	movs	r3, #8
 800bdf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bdf6:	e048      	b.n	800be8a <UART_SetConfig+0x5a6>
 800bdf8:	2310      	movs	r3, #16
 800bdfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bdfe:	e044      	b.n	800be8a <UART_SetConfig+0x5a6>
 800be00:	2320      	movs	r3, #32
 800be02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be06:	e040      	b.n	800be8a <UART_SetConfig+0x5a6>
 800be08:	2340      	movs	r3, #64	@ 0x40
 800be0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be0e:	e03c      	b.n	800be8a <UART_SetConfig+0x5a6>
 800be10:	2380      	movs	r3, #128	@ 0x80
 800be12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be16:	e038      	b.n	800be8a <UART_SetConfig+0x5a6>
 800be18:	697b      	ldr	r3, [r7, #20]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	4a5b      	ldr	r2, [pc, #364]	@ (800bf8c <UART_SetConfig+0x6a8>)
 800be1e:	4293      	cmp	r3, r2
 800be20:	d130      	bne.n	800be84 <UART_SetConfig+0x5a0>
 800be22:	4b57      	ldr	r3, [pc, #348]	@ (800bf80 <UART_SetConfig+0x69c>)
 800be24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800be26:	f003 0307 	and.w	r3, r3, #7
 800be2a:	2b05      	cmp	r3, #5
 800be2c:	d826      	bhi.n	800be7c <UART_SetConfig+0x598>
 800be2e:	a201      	add	r2, pc, #4	@ (adr r2, 800be34 <UART_SetConfig+0x550>)
 800be30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be34:	0800be4d 	.word	0x0800be4d
 800be38:	0800be55 	.word	0x0800be55
 800be3c:	0800be5d 	.word	0x0800be5d
 800be40:	0800be65 	.word	0x0800be65
 800be44:	0800be6d 	.word	0x0800be6d
 800be48:	0800be75 	.word	0x0800be75
 800be4c:	2302      	movs	r3, #2
 800be4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be52:	e01a      	b.n	800be8a <UART_SetConfig+0x5a6>
 800be54:	2304      	movs	r3, #4
 800be56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be5a:	e016      	b.n	800be8a <UART_SetConfig+0x5a6>
 800be5c:	2308      	movs	r3, #8
 800be5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be62:	e012      	b.n	800be8a <UART_SetConfig+0x5a6>
 800be64:	2310      	movs	r3, #16
 800be66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be6a:	e00e      	b.n	800be8a <UART_SetConfig+0x5a6>
 800be6c:	2320      	movs	r3, #32
 800be6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be72:	e00a      	b.n	800be8a <UART_SetConfig+0x5a6>
 800be74:	2340      	movs	r3, #64	@ 0x40
 800be76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be7a:	e006      	b.n	800be8a <UART_SetConfig+0x5a6>
 800be7c:	2380      	movs	r3, #128	@ 0x80
 800be7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be82:	e002      	b.n	800be8a <UART_SetConfig+0x5a6>
 800be84:	2380      	movs	r3, #128	@ 0x80
 800be86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800be8a:	697b      	ldr	r3, [r7, #20]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	4a3f      	ldr	r2, [pc, #252]	@ (800bf8c <UART_SetConfig+0x6a8>)
 800be90:	4293      	cmp	r3, r2
 800be92:	f040 80f8 	bne.w	800c086 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800be96:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800be9a:	2b20      	cmp	r3, #32
 800be9c:	dc46      	bgt.n	800bf2c <UART_SetConfig+0x648>
 800be9e:	2b02      	cmp	r3, #2
 800bea0:	f2c0 8082 	blt.w	800bfa8 <UART_SetConfig+0x6c4>
 800bea4:	3b02      	subs	r3, #2
 800bea6:	2b1e      	cmp	r3, #30
 800bea8:	d87e      	bhi.n	800bfa8 <UART_SetConfig+0x6c4>
 800beaa:	a201      	add	r2, pc, #4	@ (adr r2, 800beb0 <UART_SetConfig+0x5cc>)
 800beac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800beb0:	0800bf33 	.word	0x0800bf33
 800beb4:	0800bfa9 	.word	0x0800bfa9
 800beb8:	0800bf3b 	.word	0x0800bf3b
 800bebc:	0800bfa9 	.word	0x0800bfa9
 800bec0:	0800bfa9 	.word	0x0800bfa9
 800bec4:	0800bfa9 	.word	0x0800bfa9
 800bec8:	0800bf4b 	.word	0x0800bf4b
 800becc:	0800bfa9 	.word	0x0800bfa9
 800bed0:	0800bfa9 	.word	0x0800bfa9
 800bed4:	0800bfa9 	.word	0x0800bfa9
 800bed8:	0800bfa9 	.word	0x0800bfa9
 800bedc:	0800bfa9 	.word	0x0800bfa9
 800bee0:	0800bfa9 	.word	0x0800bfa9
 800bee4:	0800bfa9 	.word	0x0800bfa9
 800bee8:	0800bf5b 	.word	0x0800bf5b
 800beec:	0800bfa9 	.word	0x0800bfa9
 800bef0:	0800bfa9 	.word	0x0800bfa9
 800bef4:	0800bfa9 	.word	0x0800bfa9
 800bef8:	0800bfa9 	.word	0x0800bfa9
 800befc:	0800bfa9 	.word	0x0800bfa9
 800bf00:	0800bfa9 	.word	0x0800bfa9
 800bf04:	0800bfa9 	.word	0x0800bfa9
 800bf08:	0800bfa9 	.word	0x0800bfa9
 800bf0c:	0800bfa9 	.word	0x0800bfa9
 800bf10:	0800bfa9 	.word	0x0800bfa9
 800bf14:	0800bfa9 	.word	0x0800bfa9
 800bf18:	0800bfa9 	.word	0x0800bfa9
 800bf1c:	0800bfa9 	.word	0x0800bfa9
 800bf20:	0800bfa9 	.word	0x0800bfa9
 800bf24:	0800bfa9 	.word	0x0800bfa9
 800bf28:	0800bf9b 	.word	0x0800bf9b
 800bf2c:	2b40      	cmp	r3, #64	@ 0x40
 800bf2e:	d037      	beq.n	800bfa0 <UART_SetConfig+0x6bc>
 800bf30:	e03a      	b.n	800bfa8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800bf32:	f7fe f87d 	bl	800a030 <HAL_RCCEx_GetD3PCLK1Freq>
 800bf36:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bf38:	e03c      	b.n	800bfb4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bf3e:	4618      	mov	r0, r3
 800bf40:	f7fe f88c 	bl	800a05c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bf44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bf48:	e034      	b.n	800bfb4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bf4a:	f107 0318 	add.w	r3, r7, #24
 800bf4e:	4618      	mov	r0, r3
 800bf50:	f7fe f9d8 	bl	800a304 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bf54:	69fb      	ldr	r3, [r7, #28]
 800bf56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bf58:	e02c      	b.n	800bfb4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bf5a:	4b09      	ldr	r3, [pc, #36]	@ (800bf80 <UART_SetConfig+0x69c>)
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	f003 0320 	and.w	r3, r3, #32
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d016      	beq.n	800bf94 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bf66:	4b06      	ldr	r3, [pc, #24]	@ (800bf80 <UART_SetConfig+0x69c>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	08db      	lsrs	r3, r3, #3
 800bf6c:	f003 0303 	and.w	r3, r3, #3
 800bf70:	4a07      	ldr	r2, [pc, #28]	@ (800bf90 <UART_SetConfig+0x6ac>)
 800bf72:	fa22 f303 	lsr.w	r3, r2, r3
 800bf76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bf78:	e01c      	b.n	800bfb4 <UART_SetConfig+0x6d0>
 800bf7a:	bf00      	nop
 800bf7c:	40011400 	.word	0x40011400
 800bf80:	58024400 	.word	0x58024400
 800bf84:	40007800 	.word	0x40007800
 800bf88:	40007c00 	.word	0x40007c00
 800bf8c:	58000c00 	.word	0x58000c00
 800bf90:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800bf94:	4b9d      	ldr	r3, [pc, #628]	@ (800c20c <UART_SetConfig+0x928>)
 800bf96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bf98:	e00c      	b.n	800bfb4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bf9a:	4b9d      	ldr	r3, [pc, #628]	@ (800c210 <UART_SetConfig+0x92c>)
 800bf9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bf9e:	e009      	b.n	800bfb4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bfa0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bfa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bfa6:	e005      	b.n	800bfb4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800bfac:	2301      	movs	r3, #1
 800bfae:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800bfb2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bfb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	f000 81de 	beq.w	800c378 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bfbc:	697b      	ldr	r3, [r7, #20]
 800bfbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfc0:	4a94      	ldr	r2, [pc, #592]	@ (800c214 <UART_SetConfig+0x930>)
 800bfc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bfc6:	461a      	mov	r2, r3
 800bfc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bfca:	fbb3 f3f2 	udiv	r3, r3, r2
 800bfce:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bfd0:	697b      	ldr	r3, [r7, #20]
 800bfd2:	685a      	ldr	r2, [r3, #4]
 800bfd4:	4613      	mov	r3, r2
 800bfd6:	005b      	lsls	r3, r3, #1
 800bfd8:	4413      	add	r3, r2
 800bfda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bfdc:	429a      	cmp	r2, r3
 800bfde:	d305      	bcc.n	800bfec <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bfe0:	697b      	ldr	r3, [r7, #20]
 800bfe2:	685b      	ldr	r3, [r3, #4]
 800bfe4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bfe6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bfe8:	429a      	cmp	r2, r3
 800bfea:	d903      	bls.n	800bff4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800bfec:	2301      	movs	r3, #1
 800bfee:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800bff2:	e1c1      	b.n	800c378 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bff4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bff6:	2200      	movs	r2, #0
 800bff8:	60bb      	str	r3, [r7, #8]
 800bffa:	60fa      	str	r2, [r7, #12]
 800bffc:	697b      	ldr	r3, [r7, #20]
 800bffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c000:	4a84      	ldr	r2, [pc, #528]	@ (800c214 <UART_SetConfig+0x930>)
 800c002:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c006:	b29b      	uxth	r3, r3
 800c008:	2200      	movs	r2, #0
 800c00a:	603b      	str	r3, [r7, #0]
 800c00c:	607a      	str	r2, [r7, #4]
 800c00e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c012:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c016:	f7f4 f95f 	bl	80002d8 <__aeabi_uldivmod>
 800c01a:	4602      	mov	r2, r0
 800c01c:	460b      	mov	r3, r1
 800c01e:	4610      	mov	r0, r2
 800c020:	4619      	mov	r1, r3
 800c022:	f04f 0200 	mov.w	r2, #0
 800c026:	f04f 0300 	mov.w	r3, #0
 800c02a:	020b      	lsls	r3, r1, #8
 800c02c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c030:	0202      	lsls	r2, r0, #8
 800c032:	6979      	ldr	r1, [r7, #20]
 800c034:	6849      	ldr	r1, [r1, #4]
 800c036:	0849      	lsrs	r1, r1, #1
 800c038:	2000      	movs	r0, #0
 800c03a:	460c      	mov	r4, r1
 800c03c:	4605      	mov	r5, r0
 800c03e:	eb12 0804 	adds.w	r8, r2, r4
 800c042:	eb43 0905 	adc.w	r9, r3, r5
 800c046:	697b      	ldr	r3, [r7, #20]
 800c048:	685b      	ldr	r3, [r3, #4]
 800c04a:	2200      	movs	r2, #0
 800c04c:	469a      	mov	sl, r3
 800c04e:	4693      	mov	fp, r2
 800c050:	4652      	mov	r2, sl
 800c052:	465b      	mov	r3, fp
 800c054:	4640      	mov	r0, r8
 800c056:	4649      	mov	r1, r9
 800c058:	f7f4 f93e 	bl	80002d8 <__aeabi_uldivmod>
 800c05c:	4602      	mov	r2, r0
 800c05e:	460b      	mov	r3, r1
 800c060:	4613      	mov	r3, r2
 800c062:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c066:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c06a:	d308      	bcc.n	800c07e <UART_SetConfig+0x79a>
 800c06c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c06e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c072:	d204      	bcs.n	800c07e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800c074:	697b      	ldr	r3, [r7, #20]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c07a:	60da      	str	r2, [r3, #12]
 800c07c:	e17c      	b.n	800c378 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800c07e:	2301      	movs	r3, #1
 800c080:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c084:	e178      	b.n	800c378 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c086:	697b      	ldr	r3, [r7, #20]
 800c088:	69db      	ldr	r3, [r3, #28]
 800c08a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c08e:	f040 80c5 	bne.w	800c21c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800c092:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c096:	2b20      	cmp	r3, #32
 800c098:	dc48      	bgt.n	800c12c <UART_SetConfig+0x848>
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	db7b      	blt.n	800c196 <UART_SetConfig+0x8b2>
 800c09e:	2b20      	cmp	r3, #32
 800c0a0:	d879      	bhi.n	800c196 <UART_SetConfig+0x8b2>
 800c0a2:	a201      	add	r2, pc, #4	@ (adr r2, 800c0a8 <UART_SetConfig+0x7c4>)
 800c0a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0a8:	0800c133 	.word	0x0800c133
 800c0ac:	0800c13b 	.word	0x0800c13b
 800c0b0:	0800c197 	.word	0x0800c197
 800c0b4:	0800c197 	.word	0x0800c197
 800c0b8:	0800c143 	.word	0x0800c143
 800c0bc:	0800c197 	.word	0x0800c197
 800c0c0:	0800c197 	.word	0x0800c197
 800c0c4:	0800c197 	.word	0x0800c197
 800c0c8:	0800c153 	.word	0x0800c153
 800c0cc:	0800c197 	.word	0x0800c197
 800c0d0:	0800c197 	.word	0x0800c197
 800c0d4:	0800c197 	.word	0x0800c197
 800c0d8:	0800c197 	.word	0x0800c197
 800c0dc:	0800c197 	.word	0x0800c197
 800c0e0:	0800c197 	.word	0x0800c197
 800c0e4:	0800c197 	.word	0x0800c197
 800c0e8:	0800c163 	.word	0x0800c163
 800c0ec:	0800c197 	.word	0x0800c197
 800c0f0:	0800c197 	.word	0x0800c197
 800c0f4:	0800c197 	.word	0x0800c197
 800c0f8:	0800c197 	.word	0x0800c197
 800c0fc:	0800c197 	.word	0x0800c197
 800c100:	0800c197 	.word	0x0800c197
 800c104:	0800c197 	.word	0x0800c197
 800c108:	0800c197 	.word	0x0800c197
 800c10c:	0800c197 	.word	0x0800c197
 800c110:	0800c197 	.word	0x0800c197
 800c114:	0800c197 	.word	0x0800c197
 800c118:	0800c197 	.word	0x0800c197
 800c11c:	0800c197 	.word	0x0800c197
 800c120:	0800c197 	.word	0x0800c197
 800c124:	0800c197 	.word	0x0800c197
 800c128:	0800c189 	.word	0x0800c189
 800c12c:	2b40      	cmp	r3, #64	@ 0x40
 800c12e:	d02e      	beq.n	800c18e <UART_SetConfig+0x8aa>
 800c130:	e031      	b.n	800c196 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c132:	f7fb ffc7 	bl	80080c4 <HAL_RCC_GetPCLK1Freq>
 800c136:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c138:	e033      	b.n	800c1a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c13a:	f7fb ffd9 	bl	80080f0 <HAL_RCC_GetPCLK2Freq>
 800c13e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c140:	e02f      	b.n	800c1a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c142:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c146:	4618      	mov	r0, r3
 800c148:	f7fd ff88 	bl	800a05c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c14c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c14e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c150:	e027      	b.n	800c1a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c152:	f107 0318 	add.w	r3, r7, #24
 800c156:	4618      	mov	r0, r3
 800c158:	f7fe f8d4 	bl	800a304 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c15c:	69fb      	ldr	r3, [r7, #28]
 800c15e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c160:	e01f      	b.n	800c1a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c162:	4b2d      	ldr	r3, [pc, #180]	@ (800c218 <UART_SetConfig+0x934>)
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	f003 0320 	and.w	r3, r3, #32
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d009      	beq.n	800c182 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c16e:	4b2a      	ldr	r3, [pc, #168]	@ (800c218 <UART_SetConfig+0x934>)
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	08db      	lsrs	r3, r3, #3
 800c174:	f003 0303 	and.w	r3, r3, #3
 800c178:	4a24      	ldr	r2, [pc, #144]	@ (800c20c <UART_SetConfig+0x928>)
 800c17a:	fa22 f303 	lsr.w	r3, r2, r3
 800c17e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c180:	e00f      	b.n	800c1a2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c182:	4b22      	ldr	r3, [pc, #136]	@ (800c20c <UART_SetConfig+0x928>)
 800c184:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c186:	e00c      	b.n	800c1a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c188:	4b21      	ldr	r3, [pc, #132]	@ (800c210 <UART_SetConfig+0x92c>)
 800c18a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c18c:	e009      	b.n	800c1a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c18e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c192:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c194:	e005      	b.n	800c1a2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c196:	2300      	movs	r3, #0
 800c198:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c19a:	2301      	movs	r3, #1
 800c19c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c1a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c1a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	f000 80e7 	beq.w	800c378 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c1aa:	697b      	ldr	r3, [r7, #20]
 800c1ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1ae:	4a19      	ldr	r2, [pc, #100]	@ (800c214 <UART_SetConfig+0x930>)
 800c1b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c1b4:	461a      	mov	r2, r3
 800c1b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c1b8:	fbb3 f3f2 	udiv	r3, r3, r2
 800c1bc:	005a      	lsls	r2, r3, #1
 800c1be:	697b      	ldr	r3, [r7, #20]
 800c1c0:	685b      	ldr	r3, [r3, #4]
 800c1c2:	085b      	lsrs	r3, r3, #1
 800c1c4:	441a      	add	r2, r3
 800c1c6:	697b      	ldr	r3, [r7, #20]
 800c1c8:	685b      	ldr	r3, [r3, #4]
 800c1ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800c1ce:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c1d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1d2:	2b0f      	cmp	r3, #15
 800c1d4:	d916      	bls.n	800c204 <UART_SetConfig+0x920>
 800c1d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c1dc:	d212      	bcs.n	800c204 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c1de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1e0:	b29b      	uxth	r3, r3
 800c1e2:	f023 030f 	bic.w	r3, r3, #15
 800c1e6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c1e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1ea:	085b      	lsrs	r3, r3, #1
 800c1ec:	b29b      	uxth	r3, r3
 800c1ee:	f003 0307 	and.w	r3, r3, #7
 800c1f2:	b29a      	uxth	r2, r3
 800c1f4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c1f6:	4313      	orrs	r3, r2
 800c1f8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800c1fa:	697b      	ldr	r3, [r7, #20]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800c200:	60da      	str	r2, [r3, #12]
 800c202:	e0b9      	b.n	800c378 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c204:	2301      	movs	r3, #1
 800c206:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c20a:	e0b5      	b.n	800c378 <UART_SetConfig+0xa94>
 800c20c:	03d09000 	.word	0x03d09000
 800c210:	003d0900 	.word	0x003d0900
 800c214:	0800ce78 	.word	0x0800ce78
 800c218:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800c21c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c220:	2b20      	cmp	r3, #32
 800c222:	dc49      	bgt.n	800c2b8 <UART_SetConfig+0x9d4>
 800c224:	2b00      	cmp	r3, #0
 800c226:	db7c      	blt.n	800c322 <UART_SetConfig+0xa3e>
 800c228:	2b20      	cmp	r3, #32
 800c22a:	d87a      	bhi.n	800c322 <UART_SetConfig+0xa3e>
 800c22c:	a201      	add	r2, pc, #4	@ (adr r2, 800c234 <UART_SetConfig+0x950>)
 800c22e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c232:	bf00      	nop
 800c234:	0800c2bf 	.word	0x0800c2bf
 800c238:	0800c2c7 	.word	0x0800c2c7
 800c23c:	0800c323 	.word	0x0800c323
 800c240:	0800c323 	.word	0x0800c323
 800c244:	0800c2cf 	.word	0x0800c2cf
 800c248:	0800c323 	.word	0x0800c323
 800c24c:	0800c323 	.word	0x0800c323
 800c250:	0800c323 	.word	0x0800c323
 800c254:	0800c2df 	.word	0x0800c2df
 800c258:	0800c323 	.word	0x0800c323
 800c25c:	0800c323 	.word	0x0800c323
 800c260:	0800c323 	.word	0x0800c323
 800c264:	0800c323 	.word	0x0800c323
 800c268:	0800c323 	.word	0x0800c323
 800c26c:	0800c323 	.word	0x0800c323
 800c270:	0800c323 	.word	0x0800c323
 800c274:	0800c2ef 	.word	0x0800c2ef
 800c278:	0800c323 	.word	0x0800c323
 800c27c:	0800c323 	.word	0x0800c323
 800c280:	0800c323 	.word	0x0800c323
 800c284:	0800c323 	.word	0x0800c323
 800c288:	0800c323 	.word	0x0800c323
 800c28c:	0800c323 	.word	0x0800c323
 800c290:	0800c323 	.word	0x0800c323
 800c294:	0800c323 	.word	0x0800c323
 800c298:	0800c323 	.word	0x0800c323
 800c29c:	0800c323 	.word	0x0800c323
 800c2a0:	0800c323 	.word	0x0800c323
 800c2a4:	0800c323 	.word	0x0800c323
 800c2a8:	0800c323 	.word	0x0800c323
 800c2ac:	0800c323 	.word	0x0800c323
 800c2b0:	0800c323 	.word	0x0800c323
 800c2b4:	0800c315 	.word	0x0800c315
 800c2b8:	2b40      	cmp	r3, #64	@ 0x40
 800c2ba:	d02e      	beq.n	800c31a <UART_SetConfig+0xa36>
 800c2bc:	e031      	b.n	800c322 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c2be:	f7fb ff01 	bl	80080c4 <HAL_RCC_GetPCLK1Freq>
 800c2c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c2c4:	e033      	b.n	800c32e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c2c6:	f7fb ff13 	bl	80080f0 <HAL_RCC_GetPCLK2Freq>
 800c2ca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c2cc:	e02f      	b.n	800c32e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c2ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	f7fd fec2 	bl	800a05c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c2d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c2dc:	e027      	b.n	800c32e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c2de:	f107 0318 	add.w	r3, r7, #24
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	f7fe f80e 	bl	800a304 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c2e8:	69fb      	ldr	r3, [r7, #28]
 800c2ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c2ec:	e01f      	b.n	800c32e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c2ee:	4b2d      	ldr	r3, [pc, #180]	@ (800c3a4 <UART_SetConfig+0xac0>)
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	f003 0320 	and.w	r3, r3, #32
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d009      	beq.n	800c30e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c2fa:	4b2a      	ldr	r3, [pc, #168]	@ (800c3a4 <UART_SetConfig+0xac0>)
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	08db      	lsrs	r3, r3, #3
 800c300:	f003 0303 	and.w	r3, r3, #3
 800c304:	4a28      	ldr	r2, [pc, #160]	@ (800c3a8 <UART_SetConfig+0xac4>)
 800c306:	fa22 f303 	lsr.w	r3, r2, r3
 800c30a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c30c:	e00f      	b.n	800c32e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800c30e:	4b26      	ldr	r3, [pc, #152]	@ (800c3a8 <UART_SetConfig+0xac4>)
 800c310:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c312:	e00c      	b.n	800c32e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c314:	4b25      	ldr	r3, [pc, #148]	@ (800c3ac <UART_SetConfig+0xac8>)
 800c316:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c318:	e009      	b.n	800c32e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c31a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c31e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c320:	e005      	b.n	800c32e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800c322:	2300      	movs	r3, #0
 800c324:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c326:	2301      	movs	r3, #1
 800c328:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c32c:	bf00      	nop
    }

    if (pclk != 0U)
 800c32e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c330:	2b00      	cmp	r3, #0
 800c332:	d021      	beq.n	800c378 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c334:	697b      	ldr	r3, [r7, #20]
 800c336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c338:	4a1d      	ldr	r2, [pc, #116]	@ (800c3b0 <UART_SetConfig+0xacc>)
 800c33a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c33e:	461a      	mov	r2, r3
 800c340:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c342:	fbb3 f2f2 	udiv	r2, r3, r2
 800c346:	697b      	ldr	r3, [r7, #20]
 800c348:	685b      	ldr	r3, [r3, #4]
 800c34a:	085b      	lsrs	r3, r3, #1
 800c34c:	441a      	add	r2, r3
 800c34e:	697b      	ldr	r3, [r7, #20]
 800c350:	685b      	ldr	r3, [r3, #4]
 800c352:	fbb2 f3f3 	udiv	r3, r2, r3
 800c356:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c35a:	2b0f      	cmp	r3, #15
 800c35c:	d909      	bls.n	800c372 <UART_SetConfig+0xa8e>
 800c35e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c360:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c364:	d205      	bcs.n	800c372 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c368:	b29a      	uxth	r2, r3
 800c36a:	697b      	ldr	r3, [r7, #20]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	60da      	str	r2, [r3, #12]
 800c370:	e002      	b.n	800c378 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c372:	2301      	movs	r3, #1
 800c374:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c378:	697b      	ldr	r3, [r7, #20]
 800c37a:	2201      	movs	r2, #1
 800c37c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800c380:	697b      	ldr	r3, [r7, #20]
 800c382:	2201      	movs	r2, #1
 800c384:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c388:	697b      	ldr	r3, [r7, #20]
 800c38a:	2200      	movs	r2, #0
 800c38c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c38e:	697b      	ldr	r3, [r7, #20]
 800c390:	2200      	movs	r2, #0
 800c392:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c394:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800c398:	4618      	mov	r0, r3
 800c39a:	3748      	adds	r7, #72	@ 0x48
 800c39c:	46bd      	mov	sp, r7
 800c39e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c3a2:	bf00      	nop
 800c3a4:	58024400 	.word	0x58024400
 800c3a8:	03d09000 	.word	0x03d09000
 800c3ac:	003d0900 	.word	0x003d0900
 800c3b0:	0800ce78 	.word	0x0800ce78

0800c3b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c3b4:	b480      	push	{r7}
 800c3b6:	b083      	sub	sp, #12
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3c0:	f003 0308 	and.w	r3, r3, #8
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d00a      	beq.n	800c3de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	685b      	ldr	r3, [r3, #4]
 800c3ce:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	430a      	orrs	r2, r1
 800c3dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3e2:	f003 0301 	and.w	r3, r3, #1
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d00a      	beq.n	800c400 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	685b      	ldr	r3, [r3, #4]
 800c3f0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	430a      	orrs	r2, r1
 800c3fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c404:	f003 0302 	and.w	r3, r3, #2
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d00a      	beq.n	800c422 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	685b      	ldr	r3, [r3, #4]
 800c412:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	430a      	orrs	r2, r1
 800c420:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c426:	f003 0304 	and.w	r3, r3, #4
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d00a      	beq.n	800c444 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	685b      	ldr	r3, [r3, #4]
 800c434:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	430a      	orrs	r2, r1
 800c442:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c448:	f003 0310 	and.w	r3, r3, #16
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d00a      	beq.n	800c466 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	689b      	ldr	r3, [r3, #8]
 800c456:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	430a      	orrs	r2, r1
 800c464:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c46a:	f003 0320 	and.w	r3, r3, #32
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d00a      	beq.n	800c488 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	689b      	ldr	r3, [r3, #8]
 800c478:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	430a      	orrs	r2, r1
 800c486:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c48c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c490:	2b00      	cmp	r3, #0
 800c492:	d01a      	beq.n	800c4ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	685b      	ldr	r3, [r3, #4]
 800c49a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	430a      	orrs	r2, r1
 800c4a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c4ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c4b2:	d10a      	bne.n	800c4ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	685b      	ldr	r3, [r3, #4]
 800c4ba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	430a      	orrs	r2, r1
 800c4c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c4ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d00a      	beq.n	800c4ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	685b      	ldr	r3, [r3, #4]
 800c4dc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	430a      	orrs	r2, r1
 800c4ea:	605a      	str	r2, [r3, #4]
  }
}
 800c4ec:	bf00      	nop
 800c4ee:	370c      	adds	r7, #12
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f6:	4770      	bx	lr

0800c4f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b098      	sub	sp, #96	@ 0x60
 800c4fc:	af02      	add	r7, sp, #8
 800c4fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	2200      	movs	r2, #0
 800c504:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c508:	f7f6 fce2 	bl	8002ed0 <HAL_GetTick>
 800c50c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	f003 0308 	and.w	r3, r3, #8
 800c518:	2b08      	cmp	r3, #8
 800c51a:	d12f      	bne.n	800c57c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c51c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c520:	9300      	str	r3, [sp, #0]
 800c522:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c524:	2200      	movs	r2, #0
 800c526:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c52a:	6878      	ldr	r0, [r7, #4]
 800c52c:	f000 f88e 	bl	800c64c <UART_WaitOnFlagUntilTimeout>
 800c530:	4603      	mov	r3, r0
 800c532:	2b00      	cmp	r3, #0
 800c534:	d022      	beq.n	800c57c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c53c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c53e:	e853 3f00 	ldrex	r3, [r3]
 800c542:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c544:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c546:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c54a:	653b      	str	r3, [r7, #80]	@ 0x50
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	461a      	mov	r2, r3
 800c552:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c554:	647b      	str	r3, [r7, #68]	@ 0x44
 800c556:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c558:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c55a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c55c:	e841 2300 	strex	r3, r2, [r1]
 800c560:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c562:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c564:	2b00      	cmp	r3, #0
 800c566:	d1e6      	bne.n	800c536 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	2220      	movs	r2, #32
 800c56c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	2200      	movs	r2, #0
 800c574:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c578:	2303      	movs	r3, #3
 800c57a:	e063      	b.n	800c644 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	f003 0304 	and.w	r3, r3, #4
 800c586:	2b04      	cmp	r3, #4
 800c588:	d149      	bne.n	800c61e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c58a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c58e:	9300      	str	r3, [sp, #0]
 800c590:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c592:	2200      	movs	r2, #0
 800c594:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c598:	6878      	ldr	r0, [r7, #4]
 800c59a:	f000 f857 	bl	800c64c <UART_WaitOnFlagUntilTimeout>
 800c59e:	4603      	mov	r3, r0
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d03c      	beq.n	800c61e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5ac:	e853 3f00 	ldrex	r3, [r3]
 800c5b0:	623b      	str	r3, [r7, #32]
   return(result);
 800c5b2:	6a3b      	ldr	r3, [r7, #32]
 800c5b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c5b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	461a      	mov	r2, r3
 800c5c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c5c2:	633b      	str	r3, [r7, #48]	@ 0x30
 800c5c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c5c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c5ca:	e841 2300 	strex	r3, r2, [r1]
 800c5ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c5d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d1e6      	bne.n	800c5a4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	3308      	adds	r3, #8
 800c5dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5de:	693b      	ldr	r3, [r7, #16]
 800c5e0:	e853 3f00 	ldrex	r3, [r3]
 800c5e4:	60fb      	str	r3, [r7, #12]
   return(result);
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	f023 0301 	bic.w	r3, r3, #1
 800c5ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	3308      	adds	r3, #8
 800c5f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c5f6:	61fa      	str	r2, [r7, #28]
 800c5f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5fa:	69b9      	ldr	r1, [r7, #24]
 800c5fc:	69fa      	ldr	r2, [r7, #28]
 800c5fe:	e841 2300 	strex	r3, r2, [r1]
 800c602:	617b      	str	r3, [r7, #20]
   return(result);
 800c604:	697b      	ldr	r3, [r7, #20]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d1e5      	bne.n	800c5d6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	2220      	movs	r2, #32
 800c60e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	2200      	movs	r2, #0
 800c616:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c61a:	2303      	movs	r3, #3
 800c61c:	e012      	b.n	800c644 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	2220      	movs	r2, #32
 800c622:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	2220      	movs	r2, #32
 800c62a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	2200      	movs	r2, #0
 800c632:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	2200      	movs	r2, #0
 800c638:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	2200      	movs	r2, #0
 800c63e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c642:	2300      	movs	r3, #0
}
 800c644:	4618      	mov	r0, r3
 800c646:	3758      	adds	r7, #88	@ 0x58
 800c648:	46bd      	mov	sp, r7
 800c64a:	bd80      	pop	{r7, pc}

0800c64c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b084      	sub	sp, #16
 800c650:	af00      	add	r7, sp, #0
 800c652:	60f8      	str	r0, [r7, #12]
 800c654:	60b9      	str	r1, [r7, #8]
 800c656:	603b      	str	r3, [r7, #0]
 800c658:	4613      	mov	r3, r2
 800c65a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c65c:	e04f      	b.n	800c6fe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c65e:	69bb      	ldr	r3, [r7, #24]
 800c660:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c664:	d04b      	beq.n	800c6fe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c666:	f7f6 fc33 	bl	8002ed0 <HAL_GetTick>
 800c66a:	4602      	mov	r2, r0
 800c66c:	683b      	ldr	r3, [r7, #0]
 800c66e:	1ad3      	subs	r3, r2, r3
 800c670:	69ba      	ldr	r2, [r7, #24]
 800c672:	429a      	cmp	r2, r3
 800c674:	d302      	bcc.n	800c67c <UART_WaitOnFlagUntilTimeout+0x30>
 800c676:	69bb      	ldr	r3, [r7, #24]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d101      	bne.n	800c680 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c67c:	2303      	movs	r3, #3
 800c67e:	e04e      	b.n	800c71e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	f003 0304 	and.w	r3, r3, #4
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d037      	beq.n	800c6fe <UART_WaitOnFlagUntilTimeout+0xb2>
 800c68e:	68bb      	ldr	r3, [r7, #8]
 800c690:	2b80      	cmp	r3, #128	@ 0x80
 800c692:	d034      	beq.n	800c6fe <UART_WaitOnFlagUntilTimeout+0xb2>
 800c694:	68bb      	ldr	r3, [r7, #8]
 800c696:	2b40      	cmp	r3, #64	@ 0x40
 800c698:	d031      	beq.n	800c6fe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	69db      	ldr	r3, [r3, #28]
 800c6a0:	f003 0308 	and.w	r3, r3, #8
 800c6a4:	2b08      	cmp	r3, #8
 800c6a6:	d110      	bne.n	800c6ca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	2208      	movs	r2, #8
 800c6ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c6b0:	68f8      	ldr	r0, [r7, #12]
 800c6b2:	f000 f839 	bl	800c728 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	2208      	movs	r2, #8
 800c6ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	2200      	movs	r2, #0
 800c6c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c6c6:	2301      	movs	r3, #1
 800c6c8:	e029      	b.n	800c71e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	69db      	ldr	r3, [r3, #28]
 800c6d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c6d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c6d8:	d111      	bne.n	800c6fe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c6e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c6e4:	68f8      	ldr	r0, [r7, #12]
 800c6e6:	f000 f81f 	bl	800c728 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	2220      	movs	r2, #32
 800c6ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c6fa:	2303      	movs	r3, #3
 800c6fc:	e00f      	b.n	800c71e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	69da      	ldr	r2, [r3, #28]
 800c704:	68bb      	ldr	r3, [r7, #8]
 800c706:	4013      	ands	r3, r2
 800c708:	68ba      	ldr	r2, [r7, #8]
 800c70a:	429a      	cmp	r2, r3
 800c70c:	bf0c      	ite	eq
 800c70e:	2301      	moveq	r3, #1
 800c710:	2300      	movne	r3, #0
 800c712:	b2db      	uxtb	r3, r3
 800c714:	461a      	mov	r2, r3
 800c716:	79fb      	ldrb	r3, [r7, #7]
 800c718:	429a      	cmp	r2, r3
 800c71a:	d0a0      	beq.n	800c65e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c71c:	2300      	movs	r3, #0
}
 800c71e:	4618      	mov	r0, r3
 800c720:	3710      	adds	r7, #16
 800c722:	46bd      	mov	sp, r7
 800c724:	bd80      	pop	{r7, pc}
	...

0800c728 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c728:	b480      	push	{r7}
 800c72a:	b095      	sub	sp, #84	@ 0x54
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c736:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c738:	e853 3f00 	ldrex	r3, [r3]
 800c73c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c73e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c740:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c744:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	461a      	mov	r2, r3
 800c74c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c74e:	643b      	str	r3, [r7, #64]	@ 0x40
 800c750:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c752:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c754:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c756:	e841 2300 	strex	r3, r2, [r1]
 800c75a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c75c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d1e6      	bne.n	800c730 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	3308      	adds	r3, #8
 800c768:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c76a:	6a3b      	ldr	r3, [r7, #32]
 800c76c:	e853 3f00 	ldrex	r3, [r3]
 800c770:	61fb      	str	r3, [r7, #28]
   return(result);
 800c772:	69fa      	ldr	r2, [r7, #28]
 800c774:	4b1e      	ldr	r3, [pc, #120]	@ (800c7f0 <UART_EndRxTransfer+0xc8>)
 800c776:	4013      	ands	r3, r2
 800c778:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	3308      	adds	r3, #8
 800c780:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c782:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c784:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c786:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c788:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c78a:	e841 2300 	strex	r3, r2, [r1]
 800c78e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c792:	2b00      	cmp	r3, #0
 800c794:	d1e5      	bne.n	800c762 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c79a:	2b01      	cmp	r3, #1
 800c79c:	d118      	bne.n	800c7d0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	e853 3f00 	ldrex	r3, [r3]
 800c7aa:	60bb      	str	r3, [r7, #8]
   return(result);
 800c7ac:	68bb      	ldr	r3, [r7, #8]
 800c7ae:	f023 0310 	bic.w	r3, r3, #16
 800c7b2:	647b      	str	r3, [r7, #68]	@ 0x44
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	461a      	mov	r2, r3
 800c7ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c7bc:	61bb      	str	r3, [r7, #24]
 800c7be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7c0:	6979      	ldr	r1, [r7, #20]
 800c7c2:	69ba      	ldr	r2, [r7, #24]
 800c7c4:	e841 2300 	strex	r3, r2, [r1]
 800c7c8:	613b      	str	r3, [r7, #16]
   return(result);
 800c7ca:	693b      	ldr	r3, [r7, #16]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d1e6      	bne.n	800c79e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	2220      	movs	r2, #32
 800c7d4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	2200      	movs	r2, #0
 800c7dc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c7e4:	bf00      	nop
 800c7e6:	3754      	adds	r7, #84	@ 0x54
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ee:	4770      	bx	lr
 800c7f0:	effffffe 	.word	0xeffffffe

0800c7f4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c7f4:	b480      	push	{r7}
 800c7f6:	b085      	sub	sp, #20
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c802:	2b01      	cmp	r3, #1
 800c804:	d101      	bne.n	800c80a <HAL_UARTEx_DisableFifoMode+0x16>
 800c806:	2302      	movs	r3, #2
 800c808:	e027      	b.n	800c85a <HAL_UARTEx_DisableFifoMode+0x66>
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	2201      	movs	r2, #1
 800c80e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	2224      	movs	r2, #36	@ 0x24
 800c816:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	681a      	ldr	r2, [r3, #0]
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	f022 0201 	bic.w	r2, r2, #1
 800c830:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c838:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	2200      	movs	r2, #0
 800c83e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	68fa      	ldr	r2, [r7, #12]
 800c846:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	2220      	movs	r2, #32
 800c84c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	2200      	movs	r2, #0
 800c854:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c858:	2300      	movs	r3, #0
}
 800c85a:	4618      	mov	r0, r3
 800c85c:	3714      	adds	r7, #20
 800c85e:	46bd      	mov	sp, r7
 800c860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c864:	4770      	bx	lr

0800c866 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c866:	b580      	push	{r7, lr}
 800c868:	b084      	sub	sp, #16
 800c86a:	af00      	add	r7, sp, #0
 800c86c:	6078      	str	r0, [r7, #4]
 800c86e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c876:	2b01      	cmp	r3, #1
 800c878:	d101      	bne.n	800c87e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c87a:	2302      	movs	r3, #2
 800c87c:	e02d      	b.n	800c8da <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	2201      	movs	r2, #1
 800c882:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	2224      	movs	r2, #36	@ 0x24
 800c88a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	681a      	ldr	r2, [r3, #0]
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	f022 0201 	bic.w	r2, r2, #1
 800c8a4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	689b      	ldr	r3, [r3, #8]
 800c8ac:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	683a      	ldr	r2, [r7, #0]
 800c8b6:	430a      	orrs	r2, r1
 800c8b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c8ba:	6878      	ldr	r0, [r7, #4]
 800c8bc:	f000 f850 	bl	800c960 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	68fa      	ldr	r2, [r7, #12]
 800c8c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	2220      	movs	r2, #32
 800c8cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c8d8:	2300      	movs	r3, #0
}
 800c8da:	4618      	mov	r0, r3
 800c8dc:	3710      	adds	r7, #16
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	bd80      	pop	{r7, pc}

0800c8e2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c8e2:	b580      	push	{r7, lr}
 800c8e4:	b084      	sub	sp, #16
 800c8e6:	af00      	add	r7, sp, #0
 800c8e8:	6078      	str	r0, [r7, #4]
 800c8ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c8f2:	2b01      	cmp	r3, #1
 800c8f4:	d101      	bne.n	800c8fa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c8f6:	2302      	movs	r3, #2
 800c8f8:	e02d      	b.n	800c956 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	2201      	movs	r2, #1
 800c8fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	2224      	movs	r2, #36	@ 0x24
 800c906:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	681a      	ldr	r2, [r3, #0]
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	f022 0201 	bic.w	r2, r2, #1
 800c920:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	689b      	ldr	r3, [r3, #8]
 800c928:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	683a      	ldr	r2, [r7, #0]
 800c932:	430a      	orrs	r2, r1
 800c934:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c936:	6878      	ldr	r0, [r7, #4]
 800c938:	f000 f812 	bl	800c960 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	68fa      	ldr	r2, [r7, #12]
 800c942:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	2220      	movs	r2, #32
 800c948:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	2200      	movs	r2, #0
 800c950:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c954:	2300      	movs	r3, #0
}
 800c956:	4618      	mov	r0, r3
 800c958:	3710      	adds	r7, #16
 800c95a:	46bd      	mov	sp, r7
 800c95c:	bd80      	pop	{r7, pc}
	...

0800c960 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c960:	b480      	push	{r7}
 800c962:	b085      	sub	sp, #20
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d108      	bne.n	800c982 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	2201      	movs	r2, #1
 800c974:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	2201      	movs	r2, #1
 800c97c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c980:	e031      	b.n	800c9e6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c982:	2310      	movs	r3, #16
 800c984:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c986:	2310      	movs	r3, #16
 800c988:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	689b      	ldr	r3, [r3, #8]
 800c990:	0e5b      	lsrs	r3, r3, #25
 800c992:	b2db      	uxtb	r3, r3
 800c994:	f003 0307 	and.w	r3, r3, #7
 800c998:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	689b      	ldr	r3, [r3, #8]
 800c9a0:	0f5b      	lsrs	r3, r3, #29
 800c9a2:	b2db      	uxtb	r3, r3
 800c9a4:	f003 0307 	and.w	r3, r3, #7
 800c9a8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c9aa:	7bbb      	ldrb	r3, [r7, #14]
 800c9ac:	7b3a      	ldrb	r2, [r7, #12]
 800c9ae:	4911      	ldr	r1, [pc, #68]	@ (800c9f4 <UARTEx_SetNbDataToProcess+0x94>)
 800c9b0:	5c8a      	ldrb	r2, [r1, r2]
 800c9b2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c9b6:	7b3a      	ldrb	r2, [r7, #12]
 800c9b8:	490f      	ldr	r1, [pc, #60]	@ (800c9f8 <UARTEx_SetNbDataToProcess+0x98>)
 800c9ba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c9bc:	fb93 f3f2 	sdiv	r3, r3, r2
 800c9c0:	b29a      	uxth	r2, r3
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c9c8:	7bfb      	ldrb	r3, [r7, #15]
 800c9ca:	7b7a      	ldrb	r2, [r7, #13]
 800c9cc:	4909      	ldr	r1, [pc, #36]	@ (800c9f4 <UARTEx_SetNbDataToProcess+0x94>)
 800c9ce:	5c8a      	ldrb	r2, [r1, r2]
 800c9d0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c9d4:	7b7a      	ldrb	r2, [r7, #13]
 800c9d6:	4908      	ldr	r1, [pc, #32]	@ (800c9f8 <UARTEx_SetNbDataToProcess+0x98>)
 800c9d8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c9da:	fb93 f3f2 	sdiv	r3, r3, r2
 800c9de:	b29a      	uxth	r2, r3
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c9e6:	bf00      	nop
 800c9e8:	3714      	adds	r7, #20
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f0:	4770      	bx	lr
 800c9f2:	bf00      	nop
 800c9f4:	0800ce90 	.word	0x0800ce90
 800c9f8:	0800ce98 	.word	0x0800ce98

0800c9fc <arm_fir_q15>:
 800c9fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca00:	b09b      	sub	sp, #108	@ 0x6c
 800ca02:	4605      	mov	r5, r0
 800ca04:	f06f 4e00 	mvn.w	lr, #2147483648	@ 0x80000000
 800ca08:	9017      	str	r0, [sp, #92]	@ 0x5c
 800ca0a:	8800      	ldrh	r0, [r0, #0]
 800ca0c:	686e      	ldr	r6, [r5, #4]
 800ca0e:	4486      	add	lr, r0
 800ca10:	68af      	ldr	r7, [r5, #8]
 800ca12:	9318      	str	r3, [sp, #96]	@ 0x60
 800ca14:	089b      	lsrs	r3, r3, #2
 800ca16:	eb06 054e 	add.w	r5, r6, lr, lsl #1
 800ca1a:	9114      	str	r1, [sp, #80]	@ 0x50
 800ca1c:	9611      	str	r6, [sp, #68]	@ 0x44
 800ca1e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800ca20:	9513      	str	r5, [sp, #76]	@ 0x4c
 800ca22:	9319      	str	r3, [sp, #100]	@ 0x64
 800ca24:	e9cd 2015 	strd	r2, r0, [sp, #84]	@ 0x54
 800ca28:	f000 80f5 	beq.w	800cc16 <arm_fir_q15+0x21a>
 800ca2c:	4634      	mov	r4, r6
 800ca2e:	0886      	lsrs	r6, r0, #2
 800ca30:	4694      	mov	ip, r2
 800ca32:	f000 0003 	and.w	r0, r0, #3
 800ca36:	1c72      	adds	r2, r6, #1
 800ca38:	3108      	adds	r1, #8
 800ca3a:	9010      	str	r0, [sp, #64]	@ 0x40
 800ca3c:	4620      	mov	r0, r4
 800ca3e:	00d2      	lsls	r2, r2, #3
 800ca40:	9108      	str	r1, [sp, #32]
 800ca42:	f105 0108 	add.w	r1, r5, #8
 800ca46:	960e      	str	r6, [sp, #56]	@ 0x38
 800ca48:	e9cd c30a 	strd	ip, r3, [sp, #40]	@ 0x28
 800ca4c:	f1a2 0308 	sub.w	r3, r2, #8
 800ca50:	18a2      	adds	r2, r4, r2
 800ca52:	9109      	str	r1, [sp, #36]	@ 0x24
 800ca54:	18fb      	adds	r3, r7, r3
 800ca56:	9205      	str	r2, [sp, #20]
 800ca58:	9312      	str	r3, [sp, #72]	@ 0x48
 800ca5a:	9a08      	ldr	r2, [sp, #32]
 800ca5c:	f100 0508 	add.w	r5, r0, #8
 800ca60:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ca62:	f932 3c08 	ldrsh.w	r3, [r2, #-8]
 800ca66:	46a9      	mov	r9, r5
 800ca68:	950c      	str	r5, [sp, #48]	@ 0x30
 800ca6a:	f821 3c08 	strh.w	r3, [r1, #-8]
 800ca6e:	f932 3c06 	ldrsh.w	r3, [r2, #-6]
 800ca72:	f821 3c06 	strh.w	r3, [r1, #-6]
 800ca76:	f932 3c04 	ldrsh.w	r3, [r2, #-4]
 800ca7a:	f821 3c04 	strh.w	r3, [r1, #-4]
 800ca7e:	f932 3c02 	ldrsh.w	r3, [r2, #-2]
 800ca82:	f821 3c02 	strh.w	r3, [r1, #-2]
 800ca86:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ca88:	f8d0 c000 	ldr.w	ip, [r0]
 800ca8c:	f8d0 e004 	ldr.w	lr, [r0, #4]
 800ca90:	4664      	mov	r4, ip
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	f000 8140 	beq.w	800cd18 <arm_fir_q15+0x31c>
 800ca98:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	f8cd 9008 	str.w	r9, [sp, #8]
 800caa0:	fa1f f88e 	uxth.w	r8, lr
 800caa4:	9201      	str	r2, [sp, #4]
 800caa6:	469b      	mov	fp, r3
 800caa8:	9a05      	ldr	r2, [sp, #20]
 800caaa:	461d      	mov	r5, r3
 800caac:	461f      	mov	r7, r3
 800caae:	4699      	mov	r9, r3
 800cab0:	920d      	str	r2, [sp, #52]	@ 0x34
 800cab2:	461a      	mov	r2, r3
 800cab4:	9303      	str	r3, [sp, #12]
 800cab6:	9304      	str	r3, [sp, #16]
 800cab8:	9901      	ldr	r1, [sp, #4]
 800caba:	9804      	ldr	r0, [sp, #16]
 800cabc:	680e      	ldr	r6, [r1, #0]
 800cabe:	fbcc 70c6 	smlald	r7, r0, ip, r6
 800cac2:	9903      	ldr	r1, [sp, #12]
 800cac4:	fbce b1c6 	smlald	fp, r1, lr, r6
 800cac8:	0c24      	lsrs	r4, r4, #16
 800caca:	4692      	mov	sl, r2
 800cacc:	9a02      	ldr	r2, [sp, #8]
 800cace:	0424      	lsls	r4, r4, #16
 800cad0:	f8d2 c000 	ldr.w	ip, [r2]
 800cad4:	4652      	mov	r2, sl
 800cad6:	ea48 0804 	orr.w	r8, r8, r4
 800cada:	fbc8 52d6 	smlaldx	r5, r2, r8, r6
 800cade:	4ca2      	ldr	r4, [pc, #648]	@ (800cd68 <arm_fir_q15+0x36c>)
 800cae0:	fa1f f88c 	uxth.w	r8, ip
 800cae4:	469a      	mov	sl, r3
 800cae6:	9203      	str	r2, [sp, #12]
 800cae8:	ea0e 0404 	and.w	r4, lr, r4
 800caec:	ea48 0304 	orr.w	r3, r8, r4
 800caf0:	fbc3 a9d6 	smlaldx	sl, r9, r3, r6
 800caf4:	9e01      	ldr	r6, [sp, #4]
 800caf6:	6874      	ldr	r4, [r6, #4]
 800caf8:	3608      	adds	r6, #8
 800cafa:	9601      	str	r6, [sp, #4]
 800cafc:	fbce 70c4 	smlald	r7, r0, lr, r4
 800cb00:	9006      	str	r0, [sp, #24]
 800cb02:	9004      	str	r0, [sp, #16]
 800cb04:	9802      	ldr	r0, [sp, #8]
 800cb06:	4602      	mov	r2, r0
 800cb08:	f8d0 e004 	ldr.w	lr, [r0, #4]
 800cb0c:	3208      	adds	r2, #8
 800cb0e:	4610      	mov	r0, r2
 800cb10:	9202      	str	r2, [sp, #8]
 800cb12:	fbcc b1c4 	smlald	fp, r1, ip, r4
 800cb16:	9a03      	ldr	r2, [sp, #12]
 800cb18:	9103      	str	r1, [sp, #12]
 800cb1a:	fbc3 52d4 	smlaldx	r5, r2, r3, r4
 800cb1e:	4b92      	ldr	r3, [pc, #584]	@ (800cd68 <arm_fir_q15+0x36c>)
 800cb20:	fa1f f88e 	uxth.w	r8, lr
 800cb24:	9207      	str	r2, [sp, #28]
 800cb26:	ea0c 0303 	and.w	r3, ip, r3
 800cb2a:	461e      	mov	r6, r3
 800cb2c:	4653      	mov	r3, sl
 800cb2e:	46ca      	mov	sl, r9
 800cb30:	ea48 0906 	orr.w	r9, r8, r6
 800cb34:	fbc9 3ad4 	smlaldx	r3, sl, r9, r4
 800cb38:	9e05      	ldr	r6, [sp, #20]
 800cb3a:	4664      	mov	r4, ip
 800cb3c:	46d1      	mov	r9, sl
 800cb3e:	42b0      	cmp	r0, r6
 800cb40:	d1ba      	bne.n	800cab8 <arm_fir_q15+0xbc>
 800cb42:	46d0      	mov	r8, sl
 800cb44:	9806      	ldr	r0, [sp, #24]
 800cb46:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 800cb48:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800cb4a:	b31e      	cbz	r6, 800cb94 <arm_fir_q15+0x198>
 800cb4c:	f8d4 8000 	ldr.w	r8, [r4]
 800cb50:	fbcc 70c8 	smlald	r7, r0, ip, r8
 800cb54:	9004      	str	r0, [sp, #16]
 800cb56:	465e      	mov	r6, fp
 800cb58:	fbce 61c8 	smlald	r6, r1, lr, r8
 800cb5c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800cb60:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cb62:	fa1f f08e 	uxth.w	r0, lr
 800cb66:	9103      	str	r1, [sp, #12]
 800cb68:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 800cb6c:	6811      	ldr	r1, [r2, #0]
 800cb6e:	46b3      	mov	fp, r6
 800cb70:	9a07      	ldr	r2, [sp, #28]
 800cb72:	ea40 0c0c 	orr.w	ip, r0, ip
 800cb76:	fbcc 52d8 	smlaldx	r5, r2, ip, r8
 800cb7a:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 800cb7e:	461c      	mov	r4, r3
 800cb80:	b289      	uxth	r1, r1
 800cb82:	4650      	mov	r0, sl
 800cb84:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
 800cb88:	ea41 010e 	orr.w	r1, r1, lr
 800cb8c:	fbc1 40d8 	smlaldx	r4, r0, r1, r8
 800cb90:	4623      	mov	r3, r4
 800cb92:	4680      	mov	r8, r0
 800cb94:	9908      	ldr	r1, [sp, #32]
 800cb96:	0bff      	lsrs	r7, r7, #15
 800cb98:	ea4f 36db 	mov.w	r6, fp, lsr #15
 800cb9c:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800cb9e:	3108      	adds	r1, #8
 800cba0:	0bdc      	lsrs	r4, r3, #15
 800cba2:	0bed      	lsrs	r5, r5, #15
 800cba4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cba6:	9108      	str	r1, [sp, #32]
 800cba8:	ea44 4448 	orr.w	r4, r4, r8, lsl #17
 800cbac:	9904      	ldr	r1, [sp, #16]
 800cbae:	ea45 4542 	orr.w	r5, r5, r2, lsl #17
 800cbb2:	f304 040f 	ssat	r4, #16, r4
 800cbb6:	ea47 4741 	orr.w	r7, r7, r1, lsl #17
 800cbba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cbbc:	f307 070f 	ssat	r7, #16, r7
 800cbc0:	3108      	adds	r1, #8
 800cbc2:	b2bf      	uxth	r7, r7
 800cbc4:	f305 050f 	ssat	r5, #16, r5
 800cbc8:	9109      	str	r1, [sp, #36]	@ 0x24
 800cbca:	ea47 4705 	orr.w	r7, r7, r5, lsl #16
 800cbce:	9903      	ldr	r1, [sp, #12]
 800cbd0:	3308      	adds	r3, #8
 800cbd2:	f843 7c08 	str.w	r7, [r3, #-8]
 800cbd6:	ea46 4641 	orr.w	r6, r6, r1, lsl #17
 800cbda:	9905      	ldr	r1, [sp, #20]
 800cbdc:	f306 060f 	ssat	r6, #16, r6
 800cbe0:	b2b6      	uxth	r6, r6
 800cbe2:	3108      	adds	r1, #8
 800cbe4:	ea46 4604 	orr.w	r6, r6, r4, lsl #16
 800cbe8:	9105      	str	r1, [sp, #20]
 800cbea:	f843 6c04 	str.w	r6, [r3, #-4]
 800cbee:	930a      	str	r3, [sp, #40]	@ 0x28
 800cbf0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cbf2:	3b01      	subs	r3, #1
 800cbf4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cbf6:	f47f af30 	bne.w	800ca5a <arm_fir_q15+0x5e>
 800cbfa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cbfc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800cbfe:	00db      	lsls	r3, r3, #3
 800cc00:	441a      	add	r2, r3
 800cc02:	9214      	str	r2, [sp, #80]	@ 0x50
 800cc04:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800cc06:	441a      	add	r2, r3
 800cc08:	9211      	str	r2, [sp, #68]	@ 0x44
 800cc0a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800cc0c:	441a      	add	r2, r3
 800cc0e:	9213      	str	r2, [sp, #76]	@ 0x4c
 800cc10:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800cc12:	441a      	add	r2, r3
 800cc14:	9215      	str	r2, [sp, #84]	@ 0x54
 800cc16:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800cc18:	f013 0c03 	ands.w	ip, r3, #3
 800cc1c:	d03e      	beq.n	800cc9c <arm_fir_q15+0x2a0>
 800cc1e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cc20:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800cc24:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800cc26:	f1a3 0e02 	sub.w	lr, r3, #2
 800cc2a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800cc2c:	f8cd c008 	str.w	ip, [sp, #8]
 800cc30:	1c96      	adds	r6, r2, #2
 800cc32:	085f      	lsrs	r7, r3, #1
 800cc34:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cc36:	f8dd b054 	ldr.w	fp, [sp, #84]	@ 0x54
 800cc3a:	1c9c      	adds	r4, r3, #2
 800cc3c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800cc3e:	eb03 080c 	add.w	r8, r3, ip
 800cc42:	4699      	mov	r9, r3
 800cc44:	4694      	mov	ip, r2
 800cc46:	f939 2b02 	ldrsh.w	r2, [r9], #2
 800cc4a:	1ea5      	subs	r5, r4, #2
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	2000      	movs	r0, #0
 800cc50:	2100      	movs	r1, #0
 800cc52:	f82e 2f02 	strh.w	r2, [lr, #2]!
 800cc56:	f8cd e004 	str.w	lr, [sp, #4]
 800cc5a:	f83c a023 	ldrh.w	sl, [ip, r3, lsl #2]
 800cc5e:	f835 e023 	ldrh.w	lr, [r5, r3, lsl #2]
 800cc62:	f834 2023 	ldrh.w	r2, [r4, r3, lsl #2]
 800cc66:	fbce 018a 	smlalbb	r0, r1, lr, sl
 800cc6a:	f836 a023 	ldrh.w	sl, [r6, r3, lsl #2]
 800cc6e:	3301      	adds	r3, #1
 800cc70:	fbc2 018a 	smlalbb	r0, r1, r2, sl
 800cc74:	429f      	cmp	r7, r3
 800cc76:	d1f0      	bne.n	800cc5a <arm_fir_q15+0x25e>
 800cc78:	0bc3      	lsrs	r3, r0, #15
 800cc7a:	45c1      	cmp	r9, r8
 800cc7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 800cc80:	f104 0402 	add.w	r4, r4, #2
 800cc84:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 800cc88:	f303 030f 	ssat	r3, #16, r3
 800cc8c:	f82b 3b02 	strh.w	r3, [fp], #2
 800cc90:	d1d9      	bne.n	800cc46 <arm_fir_q15+0x24a>
 800cc92:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cc94:	f8dd c008 	ldr.w	ip, [sp, #8]
 800cc98:	4463      	add	r3, ip
 800cc9a:	9311      	str	r3, [sp, #68]	@ 0x44
 800cc9c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800cc9e:	1e5f      	subs	r7, r3, #1
 800cca0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cca2:	08be      	lsrs	r6, r7, #2
 800cca4:	f8d3 c004 	ldr.w	ip, [r3, #4]
 800cca8:	d01f      	beq.n	800ccea <arm_fir_q15+0x2ee>
 800ccaa:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800ccac:	f10c 0208 	add.w	r2, ip, #8
 800ccb0:	4603      	mov	r3, r0
 800ccb2:	3308      	adds	r3, #8
 800ccb4:	4290      	cmp	r0, r2
 800ccb6:	bf38      	it	cc
 800ccb8:	459c      	cmpcc	ip, r3
 800ccba:	d33d      	bcc.n	800cd38 <arm_fir_q15+0x33c>
 800ccbc:	1e71      	subs	r1, r6, #1
 800ccbe:	2901      	cmp	r1, #1
 800ccc0:	d93a      	bls.n	800cd38 <arm_fir_q15+0x33c>
 800ccc2:	4663      	mov	r3, ip
 800ccc4:	1d01      	adds	r1, r0, #4
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	3201      	adds	r2, #1
 800ccca:	f850 5b08 	ldr.w	r5, [r0], #8
 800ccce:	f851 4b08 	ldr.w	r4, [r1], #8
 800ccd2:	3308      	adds	r3, #8
 800ccd4:	4296      	cmp	r6, r2
 800ccd6:	f843 5c08 	str.w	r5, [r3, #-8]
 800ccda:	f843 4c04 	str.w	r4, [r3, #-4]
 800ccde:	d1f3      	bne.n	800ccc8 <arm_fir_q15+0x2cc>
 800cce0:	00f6      	lsls	r6, r6, #3
 800cce2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cce4:	44b4      	add	ip, r6
 800cce6:	4433      	add	r3, r6
 800cce8:	9311      	str	r3, [sp, #68]	@ 0x44
 800ccea:	f017 0703 	ands.w	r7, r7, #3
 800ccee:	d010      	beq.n	800cd12 <arm_fir_q15+0x316>
 800ccf0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ccf2:	3f01      	subs	r7, #1
 800ccf4:	f9b2 3000 	ldrsh.w	r3, [r2]
 800ccf8:	f8ac 3000 	strh.w	r3, [ip]
 800ccfc:	d009      	beq.n	800cd12 <arm_fir_q15+0x316>
 800ccfe:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 800cd02:	2f01      	cmp	r7, #1
 800cd04:	f8ac 3002 	strh.w	r3, [ip, #2]
 800cd08:	d003      	beq.n	800cd12 <arm_fir_q15+0x316>
 800cd0a:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 800cd0e:	f8ac 3004 	strh.w	r3, [ip, #4]
 800cd12:	b01b      	add	sp, #108	@ 0x6c
 800cd14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd18:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 800cd1a:	950d      	str	r5, [sp, #52]	@ 0x34
 800cd1c:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 800cd1e:	46b2      	mov	sl, r6
 800cd20:	4633      	mov	r3, r6
 800cd22:	9607      	str	r6, [sp, #28]
 800cd24:	4631      	mov	r1, r6
 800cd26:	4630      	mov	r0, r6
 800cd28:	4632      	mov	r2, r6
 800cd2a:	46b0      	mov	r8, r6
 800cd2c:	46b3      	mov	fp, r6
 800cd2e:	9603      	str	r6, [sp, #12]
 800cd30:	4635      	mov	r5, r6
 800cd32:	4637      	mov	r7, r6
 800cd34:	9604      	str	r6, [sp, #16]
 800cd36:	e707      	b.n	800cb48 <arm_fir_q15+0x14c>
 800cd38:	4631      	mov	r1, r6
 800cd3a:	f933 0c08 	ldrsh.w	r0, [r3, #-8]
 800cd3e:	3901      	subs	r1, #1
 800cd40:	f103 0308 	add.w	r3, r3, #8
 800cd44:	f102 0208 	add.w	r2, r2, #8
 800cd48:	f822 0c10 	strh.w	r0, [r2, #-16]
 800cd4c:	f933 0c0e 	ldrsh.w	r0, [r3, #-14]
 800cd50:	f822 0c0e 	strh.w	r0, [r2, #-14]
 800cd54:	f933 0c0c 	ldrsh.w	r0, [r3, #-12]
 800cd58:	f822 0c0c 	strh.w	r0, [r2, #-12]
 800cd5c:	f933 0c0a 	ldrsh.w	r0, [r3, #-10]
 800cd60:	f822 0c0a 	strh.w	r0, [r2, #-10]
 800cd64:	d1e9      	bne.n	800cd3a <arm_fir_q15+0x33e>
 800cd66:	e7bb      	b.n	800cce0 <arm_fir_q15+0x2e4>
 800cd68:	ffff0000 	.word	0xffff0000

0800cd6c <arm_fir_init_q15>:
 800cd6c:	b538      	push	{r3, r4, r5, lr}
 800cd6e:	f011 0501 	ands.w	r5, r1, #1
 800cd72:	d10c      	bne.n	800cd8e <arm_fir_init_q15+0x22>
 800cd74:	4604      	mov	r4, r0
 800cd76:	9804      	ldr	r0, [sp, #16]
 800cd78:	1808      	adds	r0, r1, r0
 800cd7a:	8021      	strh	r1, [r4, #0]
 800cd7c:	60a2      	str	r2, [r4, #8]
 800cd7e:	4629      	mov	r1, r5
 800cd80:	0042      	lsls	r2, r0, #1
 800cd82:	4618      	mov	r0, r3
 800cd84:	f000 f806 	bl	800cd94 <memset>
 800cd88:	6060      	str	r0, [r4, #4]
 800cd8a:	4628      	mov	r0, r5
 800cd8c:	bd38      	pop	{r3, r4, r5, pc}
 800cd8e:	f04f 30ff 	mov.w	r0, #4294967295
 800cd92:	bd38      	pop	{r3, r4, r5, pc}

0800cd94 <memset>:
 800cd94:	4402      	add	r2, r0
 800cd96:	4603      	mov	r3, r0
 800cd98:	4293      	cmp	r3, r2
 800cd9a:	d100      	bne.n	800cd9e <memset+0xa>
 800cd9c:	4770      	bx	lr
 800cd9e:	f803 1b01 	strb.w	r1, [r3], #1
 800cda2:	e7f9      	b.n	800cd98 <memset+0x4>

0800cda4 <__libc_init_array>:
 800cda4:	b570      	push	{r4, r5, r6, lr}
 800cda6:	4d0d      	ldr	r5, [pc, #52]	@ (800cddc <__libc_init_array+0x38>)
 800cda8:	4c0d      	ldr	r4, [pc, #52]	@ (800cde0 <__libc_init_array+0x3c>)
 800cdaa:	1b64      	subs	r4, r4, r5
 800cdac:	10a4      	asrs	r4, r4, #2
 800cdae:	2600      	movs	r6, #0
 800cdb0:	42a6      	cmp	r6, r4
 800cdb2:	d109      	bne.n	800cdc8 <__libc_init_array+0x24>
 800cdb4:	4d0b      	ldr	r5, [pc, #44]	@ (800cde4 <__libc_init_array+0x40>)
 800cdb6:	4c0c      	ldr	r4, [pc, #48]	@ (800cde8 <__libc_init_array+0x44>)
 800cdb8:	f000 f818 	bl	800cdec <_init>
 800cdbc:	1b64      	subs	r4, r4, r5
 800cdbe:	10a4      	asrs	r4, r4, #2
 800cdc0:	2600      	movs	r6, #0
 800cdc2:	42a6      	cmp	r6, r4
 800cdc4:	d105      	bne.n	800cdd2 <__libc_init_array+0x2e>
 800cdc6:	bd70      	pop	{r4, r5, r6, pc}
 800cdc8:	f855 3b04 	ldr.w	r3, [r5], #4
 800cdcc:	4798      	blx	r3
 800cdce:	3601      	adds	r6, #1
 800cdd0:	e7ee      	b.n	800cdb0 <__libc_init_array+0xc>
 800cdd2:	f855 3b04 	ldr.w	r3, [r5], #4
 800cdd6:	4798      	blx	r3
 800cdd8:	3601      	adds	r6, #1
 800cdda:	e7f2      	b.n	800cdc2 <__libc_init_array+0x1e>
 800cddc:	0800cea8 	.word	0x0800cea8
 800cde0:	0800cea8 	.word	0x0800cea8
 800cde4:	0800cea8 	.word	0x0800cea8
 800cde8:	0800ceac 	.word	0x0800ceac

0800cdec <_init>:
 800cdec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdee:	bf00      	nop
 800cdf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdf2:	bc08      	pop	{r3}
 800cdf4:	469e      	mov	lr, r3
 800cdf6:	4770      	bx	lr

0800cdf8 <_fini>:
 800cdf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdfa:	bf00      	nop
 800cdfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdfe:	bc08      	pop	{r3}
 800ce00:	469e      	mov	lr, r3
 800ce02:	4770      	bx	lr
